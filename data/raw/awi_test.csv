index,category,vtype,final_label,project,no,warning_line,warning_method,warning_abstract_method
2,MALICIOUS_CODE,MS_PKGPROTECT,FP,bcel,3,"@Deprecated
public static final String[] METHODHANDLE_NAMES = { """", ""getField"", ""getStatic"", ""putField"", ""putStatic"", ""invokeVirtual"", ""invokeStatic"", ""invokeSpecial"", ""newInvokeSpecial"", ""invokeInterface"" };","@Deprecated
public static final String[] METHODHANDLE_NAMES = { """", ""getField"", ""getStatic"", ""putField"", ""putStatic"", ""invokeVirtual"", ""invokeStatic"", ""invokeSpecial"", ""newInvokeSpecial"", ""invokeInterface"" };","@Deprecated
public static final String[] stringArrayVar1 = stringArrayLiteral2;"
9,MALICIOUS_CODE,EI_EXPOSE_REP,FP,bcel,10,"return opens_table;
","public ModuleOpens[] getOpensTable() {
return opens_table;
}","public ModuleOpens[] getOpensTable() {
return opens_table;
}"
15,MALICIOUS_CODE,MS_MUTABLE_ARRAY,TP,bcel,16,"// TODO: mutable public array!!
public static final String[] ATTRIBUTE_NAMES = { ""SourceFile"", ""ConstantValue"", ""Code"", ""Exceptions"", ""LineNumberTable"", ""LocalVariableTable"", ""InnerClasses"", ""Synthetic"", ""Deprecated"", ""PMGClass"", ""Signature"", ""StackMap"", ""RuntimeVisibleAnnotations"", ""RuntimeInvisibleAnnotations"", ""RuntimeVisibleParameterAnnotations"", ""RuntimeInvisibleParameterAnnotations"", ""AnnotationDefault"", ""LocalVariableTypeTable"", ""EnclosingMethod"", ""StackMapTable"", ""BootstrapMethods"", ""MethodParameters"" };","// TODO: mutable public array!!
public static final String[] ATTRIBUTE_NAMES = { ""SourceFile"", ""ConstantValue"", ""Code"", ""Exceptions"", ""LineNumberTable"", ""LocalVariableTable"", ""InnerClasses"", ""Synthetic"", ""Deprecated"", ""PMGClass"", ""Signature"", ""StackMap"", ""RuntimeVisibleAnnotations"", ""RuntimeInvisibleAnnotations"", ""RuntimeVisibleParameterAnnotations"", ""RuntimeInvisibleParameterAnnotations"", ""AnnotationDefault"", ""LocalVariableTypeTable"", ""EnclosingMethod"", ""StackMapTable"", ""BootstrapMethods"", ""MethodParameters"" };","// TODO: mutable public array!!
public static final String[] stringArrayVar1 = stringArrayLiteral2;"
24,MALICIOUS_CODE,MS_PKGPROTECT,TP,bcel,25,"@Deprecated
public static final String[] INTERFACES_IMPLEMENTED_BY_ARRAYS = { ""java.lang.Cloneable"", ""java.io.Serializable"" };","@Deprecated
public static final String[] INTERFACES_IMPLEMENTED_BY_ARRAYS = { ""java.lang.Cloneable"", ""java.io.Serializable"" };","@Deprecated
public static final String[] stringArrayVar1 = stringArrayLiteral2;"
25,MALICIOUS_CODE,EI_EXPOSE_REP2,FP,bcel,26,"this.bootstrap_methods = bootstrap_methods;
","public final void setBootstrapMethods(final BootstrapMethod[] bootstrap_methods) {
this.bootstrap_methods = bootstrap_methods;
}","public final void setBootstrapMethods(final BootstrapMethod[] bootstrap_methods) {
this.bootstrap_methods = bootstrap_methods;
}"
28,MALICIOUS_CODE,EI_EXPOSE_REP2,FP,bcel,29,"this.annotation_table = annotation_table;
","public final void setAnnotationTable(final AnnotationEntry[] annotation_table) {
this.annotation_table = annotation_table;
}","public final void setAnnotationTable(final AnnotationEntry[] annotation_table) {
this.annotation_table = annotation_table;
}"
29,MALICIOUS_CODE,MS_PKGPROTECT,FP,bcel,30,"@Deprecated
public static final String[] ACCESS_NAMES = { ""public"", ""private"", ""protected"", ""static"", ""final"", ""synchronized"", ""volatile"", ""transient"", ""native"", ""interface"", ""abstract"", ""strictfp"", ""synthetic"", ""annotation"", ""enum"" };","@Deprecated
public static final String[] ACCESS_NAMES = { ""public"", ""private"", ""protected"", ""static"", ""final"", ""synchronized"", ""volatile"", ""transient"", ""native"", ""interface"", ""abstract"", ""strictfp"", ""synthetic"", ""annotation"", ""enum"" };","@Deprecated
public static final String[] stringArrayVar1 = stringArrayLiteral2;"
37,MALICIOUS_CODE,EI_EXPOSE_REP2,FP,bcel,38,"this.arg_types = arg_types;
","public void setArgumentTypes(final Type[] arg_types) {
this.arg_types = arg_types;
}","public void setArgumentTypes(final Type[] arg_types) {
this.arg_types = arg_types;
}"
38,MALICIOUS_CODE,MS_MUTABLE_ARRAY,TP,bcel,39,"public static final int[] PRODUCE_STACK = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 2, 2, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 4, 4, 5, 6, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 0, 2, 1, 2, 1, 1, 2, 1, 2, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, UNPREDICTABLE, 0, UNPREDICTABLE, 0, UNPREDICTABLE, UNPREDICTABLE, UNPREDICTABLE, UNPREDICTABLE, UNPREDICTABLE, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNPREDICTABLE, UNPREDICTABLE };","public static final int[] PRODUCE_STACK = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 2, 2, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 4, 4, 5, 6, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 0, 2, 1, 2, 1, 1, 2, 1, 2, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, UNPREDICTABLE, 0, UNPREDICTABLE, 0, UNPREDICTABLE, UNPREDICTABLE, UNPREDICTABLE, UNPREDICTABLE, UNPREDICTABLE, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNPREDICTABLE, UNPREDICTABLE };",public static final int[] intArrayVar1 = intArrayLiteral2;
45,MALICIOUS_CODE,EI_EXPOSE_REP2,FP,bcel,46,"this.local_variable_table = local_variable_table;
","public LocalVariableTable(final int name_index, final int length, final LocalVariable[] local_variable_table, final ConstantPool constant_pool) {
super(Const.ATTR_LOCAL_VARIABLE_TABLE, name_index, length, constant_pool);
this.local_variable_table = local_variable_table;
}","public LocalVariableTable(final int name_index, final int length, final LocalVariable[] local_variable_table, final ConstantPool constant_pool) {
super(Const.ATTR_LOCAL_VARIABLE_TABLE, name_index, length, constant_pool);
this.local_variable_table = local_variable_table;
}"
47,MALICIOUS_CODE,EI_EXPOSE_REP,FP,bcel,48,"return line_number_table;
","public LineNumber[] getLineNumberTable() {
return line_number_table;
}","public LineNumber[] getLineNumberTable() {
return line_number_table;
}"
59,MALICIOUS_CODE,EI_EXPOSE_REP,FP,bcel,60,"return evalues;
","public ElementValue[] getElementValuesArray() {
return evalues;
}","public ElementValue[] getElementValuesArray() {
return evalues;
}"
76,MALICIOUS_CODE,EI_EXPOSE_REP,FP,bcel,77,"return inner_classes;
","public InnerClass[] getInnerClasses() {
return inner_classes;
}","public InnerClass[] getInnerClasses() {
return inner_classes;
}"
85,MALICIOUS_CODE,MS_MUTABLE_ARRAY,TP,bcel,86,"public static final String[] TYPE_NAMES = { ILLEGAL_TYPE, ILLEGAL_TYPE, ILLEGAL_TYPE, ILLEGAL_TYPE, ""boolean"", ""char"", ""float"", ""double"", ""byte"", ""short"", ""int"", ""long"", ""void"", ""array"", ""object"", ""unknown"", ""address"" };","public static final String[] TYPE_NAMES = { ILLEGAL_TYPE, ILLEGAL_TYPE, ILLEGAL_TYPE, ILLEGAL_TYPE, ""boolean"", ""char"", ""float"", ""double"", ""byte"", ""short"", ""int"", ""long"", ""void"", ""array"", ""object"", ""unknown"", ""address"" };",public static final String[] stringArrayVar1 = stringArrayLiteral2;
89,MALICIOUS_CODE,EI_EXPOSE_REP,FP,bcel,90,"return requires_table;
","public ModuleRequires[] getRequiresTable() {
return requires_table;
}","public ModuleRequires[] getRequiresTable() {
return requires_table;
}"
94,MALICIOUS_CODE,MS_MUTABLE_ARRAY,TP,bcel,95,"public static final String[] OPCODE_NAMES = { ""nop"", ""aconst_null"", ""iconst_m1"", ""iconst_0"", ""iconst_1"", ""iconst_2"", ""iconst_3"", ""iconst_4"", ""iconst_5"", ""lconst_0"", ""lconst_1"", ""fconst_0"", ""fconst_1"", ""fconst_2"", ""dconst_0"", ""dconst_1"", ""bipush"", ""sipush"", ""ldc"", ""ldc_w"", ""ldc2_w"", ""iload"", ""lload"", ""fload"", ""dload"", ""aload"", ""iload_0"", ""iload_1"", ""iload_2"", ""iload_3"", ""lload_0"", ""lload_1"", ""lload_2"", ""lload_3"", ""fload_0"", ""fload_1"", ""fload_2"", ""fload_3"", ""dload_0"", ""dload_1"", ""dload_2"", ""dload_3"", ""aload_0"", ""aload_1"", ""aload_2"", ""aload_3"", ""iaload"", ""laload"", ""faload"", ""daload"", ""aaload"", ""baload"", ""caload"", ""saload"", ""istore"", ""lstore"", ""fstore"", ""dstore"", ""astore"", ""istore_0"", ""istore_1"", ""istore_2"", ""istore_3"", ""lstore_0"", ""lstore_1"", ""lstore_2"", ""lstore_3"", ""fstore_0"", ""fstore_1"", ""fstore_2"", ""fstore_3"", ""dstore_0"", ""dstore_1"", ""dstore_2"", ""dstore_3"", ""astore_0"", ""astore_1"", ""astore_2"", ""astore_3"", ""iastore"", ""lastore"", ""fastore"", ""dastore"", ""aastore"", ""bastore"", ""castore"", ""sastore"", ""pop"", ""pop2"", ""dup"", ""dup_x1"", ""dup_x2"", ""dup2"", ""dup2_x1"", ""dup2_x2"", ""swap"", ""iadd"", ""ladd"", ""fadd"", ""dadd"", ""isub"", ""lsub"", ""fsub"", ""dsub"", ""imul"", ""lmul"", ""fmul"", ""dmul"", ""idiv"", ""ldiv"", ""fdiv"", ""ddiv"", ""irem"", ""lrem"", ""frem"", ""drem"", ""ineg"", ""lneg"", ""fneg"", ""dneg"", ""ishl"", ""lshl"", ""ishr"", ""lshr"", ""iushr"", ""lushr"", ""iand"", ""land"", ""ior"", ""lor"", ""ixor"", ""lxor"", ""iinc"", ""i2l"", ""i2f"", ""i2d"", ""l2i"", ""l2f"", ""l2d"", ""f2i"", ""f2l"", ""f2d"", ""d2i"", ""d2l"", ""d2f"", ""i2b"", ""i2c"", ""i2s"", ""lcmp"", ""fcmpl"", ""fcmpg"", ""dcmpl"", ""dcmpg"", ""ifeq"", ""ifne"", ""iflt"", ""ifge"", ""ifgt"", ""ifle"", ""if_icmpeq"", ""if_icmpne"", ""if_icmplt"", ""if_icmpge"", ""if_icmpgt"", ""if_icmple"", ""if_acmpeq"", ""if_acmpne"", ""goto"", ""jsr"", ""ret"", ""tableswitch"", ""lookupswitch"", ""ireturn"", ""lreturn"", ""freturn"", ""dreturn"", ""areturn"", ""return"", ""getstatic"", ""putstatic"", ""getfield"", ""putfield"", ""invokevirtual"", ""invokespecial"", ""invokestatic"", ""invokeinterface"", ""invokedynamic"", ""new"", ""newarray"", ""anewarray"", ""arraylength"", ""athrow"", ""checkcast"", ""instanceof"", ""monitorenter"", ""monitorexit"", ""wide"", ""multianewarray"", ""ifnull"", ""ifnonnull"", ""goto_w"", ""jsr_w"", ""breakpointimpdep1"", ""impdep2"" };","public static final String[] OPCODE_NAMES = { ""nop"", ""aconst_null"", ""iconst_m1"", ""iconst_0"", ""iconst_1"", ""iconst_2"", ""iconst_3"", ""iconst_4"", ""iconst_5"", ""lconst_0"", ""lconst_1"", ""fconst_0"", ""fconst_1"", ""fconst_2"", ""dconst_0"", ""dconst_1"", ""bipush"", ""sipush"", ""ldc"", ""ldc_w"", ""ldc2_w"", ""iload"", ""lload"", ""fload"", ""dload"", ""aload"", ""iload_0"", ""iload_1"", ""iload_2"", ""iload_3"", ""lload_0"", ""lload_1"", ""lload_2"", ""lload_3"", ""fload_0"", ""fload_1"", ""fload_2"", ""fload_3"", ""dload_0"", ""dload_1"", ""dload_2"", ""dload_3"", ""aload_0"", ""aload_1"", ""aload_2"", ""aload_3"", ""iaload"", ""laload"", ""faload"", ""daload"", ""aaload"", ""baload"", ""caload"", ""saload"", ""istore"", ""lstore"", ""fstore"", ""dstore"", ""astore"", ""istore_0"", ""istore_1"", ""istore_2"", ""istore_3"", ""lstore_0"", ""lstore_1"", ""lstore_2"", ""lstore_3"", ""fstore_0"", ""fstore_1"", ""fstore_2"", ""fstore_3"", ""dstore_0"", ""dstore_1"", ""dstore_2"", ""dstore_3"", ""astore_0"", ""astore_1"", ""astore_2"", ""astore_3"", ""iastore"", ""lastore"", ""fastore"", ""dastore"", ""aastore"", ""bastore"", ""castore"", ""sastore"", ""pop"", ""pop2"", ""dup"", ""dup_x1"", ""dup_x2"", ""dup2"", ""dup2_x1"", ""dup2_x2"", ""swap"", ""iadd"", ""ladd"", ""fadd"", ""dadd"", ""isub"", ""lsub"", ""fsub"", ""dsub"", ""imul"", ""lmul"", ""fmul"", ""dmul"", ""idiv"", ""ldiv"", ""fdiv"", ""ddiv"", ""irem"", ""lrem"", ""frem"", ""drem"", ""ineg"", ""lneg"", ""fneg"", ""dneg"", ""ishl"", ""lshl"", ""ishr"", ""lshr"", ""iushr"", ""lushr"", ""iand"", ""land"", ""ior"", ""lor"", ""ixor"", ""lxor"", ""iinc"", ""i2l"", ""i2f"", ""i2d"", ""l2i"", ""l2f"", ""l2d"", ""f2i"", ""f2l"", ""f2d"", ""d2i"", ""d2l"", ""d2f"", ""i2b"", ""i2c"", ""i2s"", ""lcmp"", ""fcmpl"", ""fcmpg"", ""dcmpl"", ""dcmpg"", ""ifeq"", ""ifne"", ""iflt"", ""ifge"", ""ifgt"", ""ifle"", ""if_icmpeq"", ""if_icmpne"", ""if_icmplt"", ""if_icmpge"", ""if_icmpgt"", ""if_icmple"", ""if_acmpeq"", ""if_acmpne"", ""goto"", ""jsr"", ""ret"", ""tableswitch"", ""lookupswitch"", ""ireturn"", ""lreturn"", ""freturn"", ""dreturn"", ""areturn"", ""return"", ""getstatic"", ""putstatic"", ""getfield"", ""putfield"", ""invokevirtual"", ""invokespecial"", ""invokestatic"", ""invokeinterface"", ""invokedynamic"", ""new"", ""newarray"", ""anewarray"", ""arraylength"", ""athrow"", ""checkcast"", ""instanceof"", ""monitorenter"", ""monitorexit"", ""wide"", ""multianewarray"", ""ifnull"", ""ifnonnull"", ""goto_w"", ""jsr_w"", ""breakpointimpdep1"", ""impdep2"" };",public static final String[] stringArrayVar1 = stringArrayLiteral2;
98,MALICIOUS_CODE,MS_MUTABLE_ARRAY,TP,bcel,99,"public static final String[] CONSTANT_NAMES = { """", ""CONSTANT_Utf8"", """", ""CONSTANT_Integer"", ""CONSTANT_Float"", ""CONSTANT_Long"", ""CONSTANT_Double"", ""CONSTANT_Class"", ""CONSTANT_String"", ""CONSTANT_Fieldref"", ""CONSTANT_Methodref"", ""CONSTANT_InterfaceMethodref"", ""CONSTANT_NameAndType"", """", """", ""CONSTANT_MethodHandle"", ""CONSTANT_MethodType"", """", ""CONSTANT_InvokeDynamic"" };","public static final String[] CONSTANT_NAMES = { """", ""CONSTANT_Utf8"", """", ""CONSTANT_Integer"", ""CONSTANT_Float"", ""CONSTANT_Long"", ""CONSTANT_Double"", ""CONSTANT_Class"", ""CONSTANT_String"", ""CONSTANT_Fieldref"", ""CONSTANT_Methodref"", ""CONSTANT_InterfaceMethodref"", ""CONSTANT_NameAndType"", """", """", ""CONSTANT_MethodHandle"", ""CONSTANT_MethodType"", """", ""CONSTANT_InvokeDynamic"" };",public static final String[] stringArrayVar1 = stringArrayLiteral2;
302,MALICIOUS_CODE,EI_EXPOSE_REP2,FP,bcel,303,"this.annotation_table = annotation_table;
","public Annotations(byte annotation_type, int name_index, int length, AnnotationEntry[] annotation_table, ConstantPool constant_pool, boolean isRuntimeVisible) {
super(annotation_type, name_index, length, constant_pool);
this.annotation_table = annotation_table;
this.isRuntimeVisible = isRuntimeVisible;
}","public Annotations(byte annotation_type, int name_index, int length, AnnotationEntry[] annotation_table, ConstantPool constant_pool, boolean isRuntimeVisible) {
super(annotation_type, name_index, length, constant_pool);
this.annotation_table = annotation_table;
this.isRuntimeVisible = isRuntimeVisible;
}"
303,MALICIOUS_CODE,EI_EXPOSE_REP2,FP,bcel,304,"this.evalues = datums;
","public ArrayElementValue(int type, ElementValue[] datums, ConstantPool cpool) {
super(type, cpool);
if (type != ARRAY) {
throw new RuntimeException(""Only element values of type array can be built with this ctor - type specified: "" + type);
}
this.evalues = datums;
}","public ArrayElementValue(int type, ElementValue[] datums, ConstantPool cpool) {
super(type, cpool);
if (type != ARRAY) {
throw new RuntimeException(""Only element values of type array can be built with this ctor - type specified: "" + type);
}
this.evalues = datums;
}"
307,MALICIOUS_CODE,EI_EXPOSE_REP,FP,bcel,308,"return bootstrap_arguments;
","public int[] getBootstrapArguments() {
return bootstrap_arguments;
}","public int[] getBootstrapArguments() {
return bootstrap_arguments;
}"
314,MALICIOUS_CODE,EI_EXPOSE_REP,FP,bcel,315,"return code;
","public final byte[] getCode() {
return code;
}","public final byte[] getCode() {
return code;
}"
315,MALICIOUS_CODE,EI_EXPOSE_REP,FP,bcel,316,"return attributes;
","public final Attribute[] getAttributes() {
return attributes;
}","public final Attribute[] getAttributes() {
return attributes;
}"
319,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,bcel,320,"i = ((ConstantClass) c).getNameIndex();
","public String constantToString(Constant c) throws ClassFormatException {
String str;
int i;
byte tag = c.getTag();
switch(tag) {
case Const.CONSTANT_Class:
i = ((ConstantClass) c).getNameIndex();
c = getConstant(i, Const.CONSTANT_Utf8);
str = Utility.compactClassName(((ConstantUtf8) c).getBytes(), false);
break;
case Const.CONSTANT_String:
i = ((ConstantString) c).getStringIndex();
c = getConstant(i, Const.CONSTANT_Utf8);
str = ""\"""" + escape(((ConstantUtf8) c).getBytes()) + ""\"""";
break;
case Const.CONSTANT_Utf8:
str = ((ConstantUtf8) c).getBytes();
break;
case Const.CONSTANT_Double:
str = String.valueOf(((ConstantDouble) c).getBytes());
break;
case Const.CONSTANT_Float:
str = String.valueOf(((ConstantFloat) c).getBytes());
break;
case Const.CONSTANT_Long:
str = String.valueOf(((ConstantLong) c).getBytes());
break;
case Const.CONSTANT_Integer:
str = String.valueOf(((ConstantInteger) c).getBytes());
break;
case Const.CONSTANT_NameAndType:
str = constantToString(((ConstantNameAndType) c).getNameIndex(), Const.CONSTANT_Utf8) + "":"" + constantToString(((ConstantNameAndType) c).getSignatureIndex(), Const.CONSTANT_Utf8);
break;
case Const.CONSTANT_InterfaceMethodref:
case Const.CONSTANT_Methodref:
case Const.CONSTANT_Fieldref:
str = constantToString(((ConstantCP) c).getClassIndex(), Const.CONSTANT_Class) + ""."" + constantToString(((ConstantCP) c).getNameAndTypeIndex(), Const.CONSTANT_NameAndType);
break;
case Const.CONSTANT_MethodHandle:
ConstantMethodHandle cmh = (ConstantMethodHandle) c;
str = Const.getMethodHandleName(cmh.getReferenceKind()) + "" "" + constantToString(cmh.getReferenceIndex(), getConstant(cmh.getReferenceIndex()).getTag());
break;
case Const.CONSTANT_MethodType:
ConstantMethodType cmt = (ConstantMethodType) c;
str = constantToString(cmt.getDescriptorIndex(), Const.CONSTANT_Utf8);
break;
case Const.CONSTANT_InvokeDynamic:
ConstantInvokeDynamic cid = (ConstantInvokeDynamic) c;
str = cid.getBootstrapMethodAttrIndex() + "":"" + constantToString(cid.getNameAndTypeIndex(), Const.CONSTANT_NameAndType);
break;
default:
// Never reached
throw new RuntimeException(""Unknown constant type "" + tag);
}
return str;
}","public String constantToString(Constant c) throws ClassFormatException {
String stringVar1;
int intVar2;
byte byteVar3 = byteLiteral4;
switch(byteVar3) {
case Const.CONSTANT_Class:
intVar2 = ((ConstantClass) c).getNameIndex();
c = getConstant(intVar2, Const.CONSTANT_Utf8);
stringVar1 = Utility.compactClassName(((ConstantUtf8) c).getBytes(), false);
break;
case Const.CONSTANT_String:
intVar2 = ((ConstantString) c).getStringIndex();
c = getConstant(intVar2, Const.CONSTANT_Utf8);
stringVar1 = ""\"""" + escape(((ConstantUtf8) c).getBytes()) + ""\"""";
break;
case Const.CONSTANT_Utf8:
stringVar1 = ((ConstantUtf8) c).getBytes();
break;
case Const.CONSTANT_Double:
stringVar1 = String.valueOf(((ConstantDouble) c).getBytes());
break;
case Const.CONSTANT_Float:
stringVar1 = String.valueOf(((ConstantFloat) c).getBytes());
break;
case Const.CONSTANT_Long:
stringVar1 = String.valueOf(((ConstantLong) c).getBytes());
break;
case Const.CONSTANT_Integer:
stringVar1 = String.valueOf(((ConstantInteger) c).getBytes());
break;
case Const.CONSTANT_NameAndType:
stringVar1 = constantToString(((ConstantNameAndType) c).getNameIndex(), Const.CONSTANT_Utf8) + "":"" + constantToString(((ConstantNameAndType) c).getSignatureIndex(), Const.CONSTANT_Utf8);
break;
case Const.CONSTANT_InterfaceMethodref:
case Const.CONSTANT_Methodref:
case Const.CONSTANT_Fieldref:
stringVar1 = constantToString(((ConstantCP) c).getClassIndex(), Const.CONSTANT_Class) + ""."" + constantToString(((ConstantCP) c).getNameAndTypeIndex(), Const.CONSTANT_NameAndType);
break;
case Const.CONSTANT_MethodHandle:
ConstantMethodHandle constantmethodhandleVar5 = constantmethodhandleLiteral6;
stringVar1 = Const.getMethodHandleName(constantmethodhandleVar5.getReferenceKind()) + "" "" + constantToString(constantmethodhandleVar5.getReferenceIndex(), getConstant(constantmethodhandleVar5.getReferenceIndex()).getTag());
break;
case Const.CONSTANT_MethodType:
ConstantMethodType constantmethodtypeVar7 = constantmethodtypeLiteral8;
stringVar1 = constantToString(constantmethodtypeVar7.getDescriptorIndex(), Const.CONSTANT_Utf8);
break;
case Const.CONSTANT_InvokeDynamic:
ConstantInvokeDynamic constantinvokedynamicVar9 = constantinvokedynamicLiteral10;
stringVar1 = constantinvokedynamicVar9.getBootstrapMethodAttrIndex() + "":"" + constantToString(constantinvokedynamicVar9.getNameAndTypeIndex(), Const.CONSTANT_NameAndType);
break;
default:
// Never reached
throw new RuntimeException(""Unknown constant type "" + byteVar3);
}
return stringVar1;
}"
321,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,bcel,322,"i = ((ConstantString) c).getStringIndex();
","public String constantToString(Constant c) throws ClassFormatException {
String str;
int i;
byte tag = c.getTag();
switch(tag) {
case Const.CONSTANT_Class:
i = ((ConstantClass) c).getNameIndex();
c = getConstant(i, Const.CONSTANT_Utf8);
str = Utility.compactClassName(((ConstantUtf8) c).getBytes(), false);
break;
case Const.CONSTANT_String:
i = ((ConstantString) c).getStringIndex();
c = getConstant(i, Const.CONSTANT_Utf8);
str = ""\"""" + escape(((ConstantUtf8) c).getBytes()) + ""\"""";
break;
case Const.CONSTANT_Utf8:
str = ((ConstantUtf8) c).getBytes();
break;
case Const.CONSTANT_Double:
str = String.valueOf(((ConstantDouble) c).getBytes());
break;
case Const.CONSTANT_Float:
str = String.valueOf(((ConstantFloat) c).getBytes());
break;
case Const.CONSTANT_Long:
str = String.valueOf(((ConstantLong) c).getBytes());
break;
case Const.CONSTANT_Integer:
str = String.valueOf(((ConstantInteger) c).getBytes());
break;
case Const.CONSTANT_NameAndType:
str = constantToString(((ConstantNameAndType) c).getNameIndex(), Const.CONSTANT_Utf8) + "":"" + constantToString(((ConstantNameAndType) c).getSignatureIndex(), Const.CONSTANT_Utf8);
break;
case Const.CONSTANT_InterfaceMethodref:
case Const.CONSTANT_Methodref:
case Const.CONSTANT_Fieldref:
str = constantToString(((ConstantCP) c).getClassIndex(), Const.CONSTANT_Class) + ""."" + constantToString(((ConstantCP) c).getNameAndTypeIndex(), Const.CONSTANT_NameAndType);
break;
case Const.CONSTANT_MethodHandle:
ConstantMethodHandle cmh = (ConstantMethodHandle) c;
str = Const.getMethodHandleName(cmh.getReferenceKind()) + "" "" + constantToString(cmh.getReferenceIndex(), getConstant(cmh.getReferenceIndex()).getTag());
break;
case Const.CONSTANT_MethodType:
ConstantMethodType cmt = (ConstantMethodType) c;
str = constantToString(cmt.getDescriptorIndex(), Const.CONSTANT_Utf8);
break;
case Const.CONSTANT_InvokeDynamic:
ConstantInvokeDynamic cid = (ConstantInvokeDynamic) c;
str = cid.getBootstrapMethodAttrIndex() + "":"" + constantToString(cid.getNameAndTypeIndex(), Const.CONSTANT_NameAndType);
break;
default:
// Never reached
throw new RuntimeException(""Unknown constant type "" + tag);
}
return str;
}","public String constantToString(Constant c) throws ClassFormatException {
String stringVar1;
int intVar2;
byte byteVar3 = byteLiteral4;
switch(byteVar3) {
case Const.CONSTANT_Class:
intVar2 = ((ConstantClass) c).getNameIndex();
c = getConstant(intVar2, Const.CONSTANT_Utf8);
stringVar1 = Utility.compactClassName(((ConstantUtf8) c).getBytes(), false);
break;
case Const.CONSTANT_String:
intVar2 = ((ConstantString) c).getStringIndex();
c = getConstant(intVar2, Const.CONSTANT_Utf8);
stringVar1 = ""\"""" + escape(((ConstantUtf8) c).getBytes()) + ""\"""";
break;
case Const.CONSTANT_Utf8:
stringVar1 = ((ConstantUtf8) c).getBytes();
break;
case Const.CONSTANT_Double:
stringVar1 = String.valueOf(((ConstantDouble) c).getBytes());
break;
case Const.CONSTANT_Float:
stringVar1 = String.valueOf(((ConstantFloat) c).getBytes());
break;
case Const.CONSTANT_Long:
stringVar1 = String.valueOf(((ConstantLong) c).getBytes());
break;
case Const.CONSTANT_Integer:
stringVar1 = String.valueOf(((ConstantInteger) c).getBytes());
break;
case Const.CONSTANT_NameAndType:
stringVar1 = constantToString(((ConstantNameAndType) c).getNameIndex(), Const.CONSTANT_Utf8) + "":"" + constantToString(((ConstantNameAndType) c).getSignatureIndex(), Const.CONSTANT_Utf8);
break;
case Const.CONSTANT_InterfaceMethodref:
case Const.CONSTANT_Methodref:
case Const.CONSTANT_Fieldref:
stringVar1 = constantToString(((ConstantCP) c).getClassIndex(), Const.CONSTANT_Class) + ""."" + constantToString(((ConstantCP) c).getNameAndTypeIndex(), Const.CONSTANT_NameAndType);
break;
case Const.CONSTANT_MethodHandle:
ConstantMethodHandle constantmethodhandleVar5 = constantmethodhandleLiteral6;
stringVar1 = Const.getMethodHandleName(constantmethodhandleVar5.getReferenceKind()) + "" "" + constantToString(constantmethodhandleVar5.getReferenceIndex(), getConstant(constantmethodhandleVar5.getReferenceIndex()).getTag());
break;
case Const.CONSTANT_MethodType:
ConstantMethodType constantmethodtypeVar7 = constantmethodtypeLiteral8;
stringVar1 = constantToString(constantmethodtypeVar7.getDescriptorIndex(), Const.CONSTANT_Utf8);
break;
case Const.CONSTANT_InvokeDynamic:
ConstantInvokeDynamic constantinvokedynamicVar9 = constantinvokedynamicLiteral10;
stringVar1 = constantinvokedynamicVar9.getBootstrapMethodAttrIndex() + "":"" + constantToString(constantinvokedynamicVar9.getNameAndTypeIndex(), Const.CONSTANT_NameAndType);
break;
default:
// Never reached
throw new RuntimeException(""Unknown constant type "" + byteVar3);
}
return stringVar1;
}"
324,MALICIOUS_CODE,EI_EXPOSE_REP2,FP,bcel,325,"this.constant_pool = constant_pool;
","public ConstantPool(Constant[] constant_pool) {
this.constant_pool = constant_pool;
}","public ConstantPool(Constant[] constant_pool) {
this.constant_pool = constant_pool;
}"
330,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,bcel,331,"str = ((ConstantUtf8) c).getBytes();
","public String constantToString(Constant c) throws ClassFormatException {
String str;
int i;
byte tag = c.getTag();
switch(tag) {
case Const.CONSTANT_Class:
i = ((ConstantClass) c).getNameIndex();
c = getConstant(i, Const.CONSTANT_Utf8);
str = Utility.compactClassName(((ConstantUtf8) c).getBytes(), false);
break;
case Const.CONSTANT_String:
i = ((ConstantString) c).getStringIndex();
c = getConstant(i, Const.CONSTANT_Utf8);
str = ""\"""" + escape(((ConstantUtf8) c).getBytes()) + ""\"""";
break;
case Const.CONSTANT_Utf8:
str = ((ConstantUtf8) c).getBytes();
break;
case Const.CONSTANT_Double:
str = String.valueOf(((ConstantDouble) c).getBytes());
break;
case Const.CONSTANT_Float:
str = String.valueOf(((ConstantFloat) c).getBytes());
break;
case Const.CONSTANT_Long:
str = String.valueOf(((ConstantLong) c).getBytes());
break;
case Const.CONSTANT_Integer:
str = String.valueOf(((ConstantInteger) c).getBytes());
break;
case Const.CONSTANT_NameAndType:
str = constantToString(((ConstantNameAndType) c).getNameIndex(), Const.CONSTANT_Utf8) + "":"" + constantToString(((ConstantNameAndType) c).getSignatureIndex(), Const.CONSTANT_Utf8);
break;
case Const.CONSTANT_InterfaceMethodref:
case Const.CONSTANT_Methodref:
case Const.CONSTANT_Fieldref:
str = constantToString(((ConstantCP) c).getClassIndex(), Const.CONSTANT_Class) + ""."" + constantToString(((ConstantCP) c).getNameAndTypeIndex(), Const.CONSTANT_NameAndType);
break;
case Const.CONSTANT_MethodHandle:
ConstantMethodHandle cmh = (ConstantMethodHandle) c;
str = Const.getMethodHandleName(cmh.getReferenceKind()) + "" "" + constantToString(cmh.getReferenceIndex(), getConstant(cmh.getReferenceIndex()).getTag());
break;
case Const.CONSTANT_MethodType:
ConstantMethodType cmt = (ConstantMethodType) c;
str = constantToString(cmt.getDescriptorIndex(), Const.CONSTANT_Utf8);
break;
case Const.CONSTANT_InvokeDynamic:
ConstantInvokeDynamic cid = (ConstantInvokeDynamic) c;
str = cid.getBootstrapMethodAttrIndex() + "":"" + constantToString(cid.getNameAndTypeIndex(), Const.CONSTANT_NameAndType);
break;
default:
// Never reached
throw new RuntimeException(""Unknown constant type "" + tag);
}
return str;
}","public String constantToString(Constant c) throws ClassFormatException {
String stringVar1;
int intVar2;
byte byteVar3 = byteLiteral4;
switch(byteVar3) {
case Const.CONSTANT_Class:
intVar2 = ((ConstantClass) c).getNameIndex();
c = getConstant(intVar2, Const.CONSTANT_Utf8);
stringVar1 = Utility.compactClassName(((ConstantUtf8) c).getBytes(), false);
break;
case Const.CONSTANT_String:
intVar2 = ((ConstantString) c).getStringIndex();
c = getConstant(intVar2, Const.CONSTANT_Utf8);
stringVar1 = ""\"""" + escape(((ConstantUtf8) c).getBytes()) + ""\"""";
break;
case Const.CONSTANT_Utf8:
stringVar1 = ((ConstantUtf8) c).getBytes();
break;
case Const.CONSTANT_Double:
stringVar1 = String.valueOf(((ConstantDouble) c).getBytes());
break;
case Const.CONSTANT_Float:
stringVar1 = String.valueOf(((ConstantFloat) c).getBytes());
break;
case Const.CONSTANT_Long:
stringVar1 = String.valueOf(((ConstantLong) c).getBytes());
break;
case Const.CONSTANT_Integer:
stringVar1 = String.valueOf(((ConstantInteger) c).getBytes());
break;
case Const.CONSTANT_NameAndType:
stringVar1 = constantToString(((ConstantNameAndType) c).getNameIndex(), Const.CONSTANT_Utf8) + "":"" + constantToString(((ConstantNameAndType) c).getSignatureIndex(), Const.CONSTANT_Utf8);
break;
case Const.CONSTANT_InterfaceMethodref:
case Const.CONSTANT_Methodref:
case Const.CONSTANT_Fieldref:
stringVar1 = constantToString(((ConstantCP) c).getClassIndex(), Const.CONSTANT_Class) + ""."" + constantToString(((ConstantCP) c).getNameAndTypeIndex(), Const.CONSTANT_NameAndType);
break;
case Const.CONSTANT_MethodHandle:
ConstantMethodHandle constantmethodhandleVar5 = constantmethodhandleLiteral6;
stringVar1 = Const.getMethodHandleName(constantmethodhandleVar5.getReferenceKind()) + "" "" + constantToString(constantmethodhandleVar5.getReferenceIndex(), getConstant(constantmethodhandleVar5.getReferenceIndex()).getTag());
break;
case Const.CONSTANT_MethodType:
ConstantMethodType constantmethodtypeVar7 = constantmethodtypeLiteral8;
stringVar1 = constantToString(constantmethodtypeVar7.getDescriptorIndex(), Const.CONSTANT_Utf8);
break;
case Const.CONSTANT_InvokeDynamic:
ConstantInvokeDynamic constantinvokedynamicVar9 = constantinvokedynamicLiteral10;
stringVar1 = constantinvokedynamicVar9.getBootstrapMethodAttrIndex() + "":"" + constantToString(constantinvokedynamicVar9.getNameAndTypeIndex(), Const.CONSTANT_NameAndType);
break;
default:
// Never reached
throw new RuntimeException(""Unknown constant type "" + byteVar3);
}
return stringVar1;
}"
337,MALICIOUS_CODE,EI_EXPOSE_REP2,FP,bcel,338,"this.bytes = bytes;
","public Deprecated(int name_index, int length, byte[] bytes, ConstantPool constant_pool) {
super(Const.ATTR_DEPRECATED, name_index, length, constant_pool);
this.bytes = bytes;
}","public Deprecated(int name_index, int length, byte[] bytes, ConstantPool constant_pool) {
super(Const.ATTR_DEPRECATED, name_index, length, constant_pool);
this.bytes = bytes;
}"
339,MALICIOUS_CODE,EI_EXPOSE_REP,FP,bcel,340,"return exception_index_table;
","public final int[] getExceptionIndexTable() {
return exception_index_table;
}","public final int[] getExceptionIndexTable() {
return exception_index_table;
}"
349,MALICIOUS_CODE,EI_EXPOSE_REP,FP,bcel,350,"return annotations;
","public AnnotationEntry[] getAnnotationEntries() {
if (annotations == null) {
annotations = AnnotationEntry.createAnnotationEntries(getAttributes());
}
return annotations;
}","public AnnotationEntry[] getAnnotationEntries() {
if (annotations == null) {
annotations = AnnotationEntry.createAnnotationEntries(getAttributes());
}
return annotations;
}"
361,MALICIOUS_CODE,EI_EXPOSE_REP,FP,bcel,362,"return local_variable_table;
","public final LocalVariable[] getLocalVariableTable() {
return local_variable_table;
}","public final LocalVariable[] getLocalVariableTable() {
return local_variable_table;
}"
379,MALICIOUS_CODE,EI_EXPOSE_REP2,FP,bcel,380,"this.map = map;
","public final void setStackMap(StackMapEntry[] map) {
this.map = map;
int len = 2;
for (int i = 0; i < map.length; i++) {
len += map[i].getMapEntrySize();
}
setLength(len);
}","public final void setStackMap(StackMapEntry[] map) {
this.map = map;
int intVar1 = intLiteral2;
for (int intVar5 = intLiteral6; intVar3 < intLiteral1; intVar3++) {
intVar1 += map[intVar3].getMapEntrySize();
}
setLength(intVar1);
}"
382,MALICIOUS_CODE,EI_EXPOSE_REP,FP,bcel,383,"return bytes;
","public final byte[] getBytes() {
return bytes;
}","public final byte[] getBytes() {
return bytes;
}"
387,MALICIOUS_CODE,EI_EXPOSE_REP,FP,bcel,388,"return bytes;
","public final byte[] getBytes() {
return bytes;
}","public final byte[] getBytes() {
return bytes;
}"
389,DODGY_CODE,SF_SWITCH_FALLTHROUGH,FP,bcel,390,"buf.append(""\t"");
case Const.INSTANCEOF:
index = bytes.readUnsignedShort();
","public static String codeToString(ByteSequence bytes, ConstantPool constant_pool, boolean verbose) throws IOException {
short opcode = (short) bytes.readUnsignedByte();
int default_offset = 0;
int low;
int high;
int npairs;
int index;
int vindex;
int constant;
int[] match;
int[] jump_table;
int no_pad_bytes = 0;
int offset;
StringBuilder buf = new StringBuilder(Const.getOpcodeName(opcode));
if ((opcode == Const.TABLESWITCH) || (opcode == Const.LOOKUPSWITCH)) {
int remainder = bytes.getIndex() % 4;
no_pad_bytes = (remainder == 0) ? 0 : 4 - remainder;
for (int i = 0; i < no_pad_bytes; i++) {
byte b;
if ((b = bytes.readByte()) != 0) {
System.err.println(""Warning: Padding byte != 0 in "" + Const.getOpcodeName(opcode) + "":"" + b);
}
}
default_offset = bytes.readInt();
}
switch(opcode) {
case Const.TABLESWITCH:
low = bytes.readInt();
high = bytes.readInt();
offset = bytes.getIndex() - 12 - no_pad_bytes - 1;
default_offset += offset;
buf.append(""\tdefault = "").append(default_offset).append("", low = "").append(low).append("", high = "").append(high).append(""("");
jump_table = new int[high - low + 1];
for (int i = 0; i < jump_table.length; i++) {
jump_table[i] = offset + bytes.readInt();
buf.append(jump_table[i]);
if (i < jump_table.length - 1) {
buf.append("", "");
}
}
buf.append("")"");
break;
case Const.LOOKUPSWITCH:
{
npairs = bytes.readInt();
offset = bytes.getIndex() - 8 - no_pad_bytes - 1;
match = new int[npairs];
jump_table = new int[npairs];
default_offset += offset;
buf.append(""\tdefault = "").append(default_offset).append("", npairs = "").append(npairs).append("" ("");
for (int i = 0; i < npairs; i++) {
match[i] = bytes.readInt();
jump_table[i] = offset + bytes.readInt();
buf.append(""("").append(match[i]).append("", "").append(jump_table[i]).append("")"");
if (i < npairs - 1) {
buf.append("", "");
}
}
buf.append("")"");
}
break;
case Const.GOTO:
case Const.IFEQ:
case Const.IFGE:
case Const.IFGT:
case Const.IFLE:
case Const.IFLT:
case Const.JSR:
case Const.IFNE:
case Const.IFNONNULL:
case Const.IFNULL:
case Const.IF_ACMPEQ:
case Const.IF_ACMPNE:
case Const.IF_ICMPEQ:
case Const.IF_ICMPGE:
case Const.IF_ICMPGT:
case Const.IF_ICMPLE:
case Const.IF_ICMPLT:
case Const.IF_ICMPNE:
buf.append(""\t\t#"").append((bytes.getIndex() - 1) + bytes.readShort());
break;
case Const.GOTO_W:
case Const.JSR_W:
buf.append(""\t\t#"").append((bytes.getIndex() - 1) + bytes.readInt());
break;
case Const.ALOAD:
case Const.ASTORE:
case Const.DLOAD:
case Const.DSTORE:
case Const.FLOAD:
case Const.FSTORE:
case Const.ILOAD:
case Const.ISTORE:
case Const.LLOAD:
case Const.LSTORE:
case Const.RET:
if (wide) {
vindex = bytes.readUnsignedShort();
wide = false;
} else {
vindex = bytes.readUnsignedByte();
}
buf.append(""\t\t%"").append(vindex);
break;
case Const.WIDE:
wide = true;
buf.append(""\t(wide)"");
break;
case Const.NEWARRAY:
buf.append(""\t\t<"").append(Const.getTypeName(bytes.readByte())).append("">"");
break;
case Const.GETFIELD:
case Const.GETSTATIC:
case Const.PUTFIELD:
case Const.PUTSTATIC:
index = bytes.readUnsignedShort();
buf.append(""\t\t"").append(constant_pool.constantToString(index, Const.CONSTANT_Fieldref)).append(verbose ? "" ("" + index + "")"" : """");
break;
case Const.NEW:
case Const.CHECKCAST:
buf.append(""\t"");
case Const.INSTANCEOF:
index = bytes.readUnsignedShort();
buf.append(""\t<"").append(constant_pool.constantToString(index, Const.CONSTANT_Class)).append("">"").append(verbose ? "" ("" + index + "")"" : """");
break;
case Const.INVOKESPECIAL:
case Const.INVOKESTATIC:
index = bytes.readUnsignedShort();
Constant c = constant_pool.getConstant(index);
buf.append(""\t"").append(constant_pool.constantToString(index, c.getTag())).append(verbose ? "" ("" + index + "")"" : """");
break;
case Const.INVOKEVIRTUAL:
index = bytes.readUnsignedShort();
buf.append(""\t"").append(constant_pool.constantToString(index, Const.CONSTANT_Methodref)).append(verbose ? "" ("" + index + "")"" : """");
break;
case Const.INVOKEINTERFACE:
index = bytes.readUnsignedShort();
int nargs = bytes.readUnsignedByte();
buf.append(""\t"").append(constant_pool.constantToString(index, Const.CONSTANT_InterfaceMethodref)).append(verbose ? "" ("" + index + "")\t"" : """").append(nargs).append(""\t"").append(bytes.readUnsignedByte());
break;
case Const.INVOKEDYNAMIC:
index = bytes.readUnsignedShort();
buf.append(""\t"").append(constant_pool.constantToString(index, Const.CONSTANT_InvokeDynamic)).append(verbose ? "" ("" + index + "")\t"" : """").append(bytes.readUnsignedByte()).append(bytes.readUnsignedByte());
break;
case Const.LDC_W:
case Const.LDC2_W:
index = bytes.readUnsignedShort();
buf.append(""\t\t"").append(constant_pool.constantToString(index, constant_pool.getConstant(index).getTag())).append(verbose ? "" ("" + index + "")"" : """");
break;
case Const.LDC:
index = bytes.readUnsignedByte();
buf.append(""\t\t"").append(constant_pool.constantToString(index, constant_pool.getConstant(index).getTag())).append(verbose ? "" ("" + index + "")"" : """");
break;
case Const.ANEWARRAY:
index = bytes.readUnsignedShort();
buf.append(""\t\t<"").append(compactClassName(constant_pool.getConstantString(index, Const.CONSTANT_Class), false)).append("">"").append(verbose ? "" ("" + index + "")"" : """");
break;
case Const.MULTIANEWARRAY:
{
index = bytes.readUnsignedShort();
int dimensions = bytes.readUnsignedByte();
buf.append(""\t<"").append(compactClassName(constant_pool.getConstantString(index, Const.CONSTANT_Class), false)).append("">\t"").append(dimensions).append(verbose ? "" ("" + index + "")"" : """");
}
break;
case Const.IINC:
if (wide) {
vindex = bytes.readUnsignedShort();
constant = bytes.readShort();
wide = false;
} else {
vindex = bytes.readUnsignedByte();
constant = bytes.readByte();
}
buf.append(""\t\t%"").append(vindex).append(""\t"").append(constant);
break;
default:
if (Const.getNoOfOperands(opcode) > 0) {
for (int i = 0; i < Const.getOperandTypeCount(opcode); i++) {
buf.append(""\t\t"");
switch(Const.getOperandType(opcode, i)) {
case Const.T_BYTE:
buf.append(bytes.readByte());
break;
case Const.T_SHORT:
buf.append(bytes.readShort());
break;
case Const.T_INT:
buf.append(bytes.readInt());
break;
default:
// Never reached
System.err.println(""Unreachable default case reached!"");
System.exit(-1);
}
}
}
}
return buf.toString();
}","public static String codeToString(ByteSequence bytes, ConstantPool constant_pool, boolean verbose) throws IOException {
short shortVar1 = shortLiteral2;
int intVar3 = intLiteral4;
int intVar5;
int intVar6;
int intVar7;
int intVar8;
int intVar9;
int intVar10;
int[] intArrayVar11;
int[] intArrayVar12;
int intVar13 = intLiteral4;
int intVar14;
StringBuilder stringbuilderVar15 = stringbuilderLiteral16;
if ((shortVar1 == Const.TABLESWITCH) || (shortVar1 == Const.LOOKUPSWITCH)) {
int intVar17 = intLiteral18;
intVar13 = (intVar17 == 0) ? 0 : 4 - intVar17;
for (int intVar26 = intLiteral27; intVar19 < intLiteral1; intVar19++) {
byte byteVar20;
if ((byteVar20 = bytes.readByte()) != 0) {
System.err.println(""Warning: Padding byte != 0 in "" + Const.getOpcodeName(shortVar1) + "":"" + byteVar20);
}
}
intVar3 = bytes.readInt();
}
switch(shortVar1) {
case Const.TABLESWITCH:
intVar5 = bytes.readInt();
intVar6 = bytes.readInt();
intVar14 = bytes.getIndex() - 12 - intVar13 - 1;
intVar3 += intVar14;
stringbuilderVar15.append(""\tdefault = "").append(intVar3).append("", low = "").append(intVar5).append("", high = "").append(intVar6).append(""("");
intArrayVar12 = new int[intVar6 - intVar5 + 1];
for (int intVar26 = intLiteral27; intVar19 < intLiteral2; intVar19++) {
intArrayVar12[intVar19] = intVar14 + bytes.readInt();
stringbuilderVar15.append(intArrayVar12[intVar19]);
if (intVar19 < intArrayVar12.length - 1) {
stringbuilderVar15.append("", "");
}
}
stringbuilderVar15.append("")"");
break;
case Const.LOOKUPSWITCH:
{
intVar7 = bytes.readInt();
intVar14 = bytes.getIndex() - 8 - intVar13 - 1;
intArrayVar11 = new int[intVar7];
intArrayVar12 = new int[intVar7];
intVar3 += intVar14;
stringbuilderVar15.append(""\tdefault = "").append(intVar3).append("", npairs = "").append(intVar7).append("" ("");
for (int intVar26 = intLiteral27; intVar19 < intLiteral3; intVar19++) {
intArrayVar11[intVar19] = bytes.readInt();
intArrayVar12[intVar19] = intVar14 + bytes.readInt();
stringbuilderVar15.append(""("").append(intArrayVar11[intVar19]).append("", "").append(intArrayVar12[intVar19]).append("")"");
if (intVar19 < intVar7 - 1) {
stringbuilderVar15.append("", "");
}
}
stringbuilderVar15.append("")"");
}
break;
case Const.GOTO:
case Const.IFEQ:
case Const.IFGE:
case Const.IFGT:
case Const.IFLE:
case Const.IFLT:
case Const.JSR:
case Const.IFNE:
case Const.IFNONNULL:
case Const.IFNULL:
case Const.IF_ACMPEQ:
case Const.IF_ACMPNE:
case Const.IF_ICMPEQ:
case Const.IF_ICMPGE:
case Const.IF_ICMPGT:
case Const.IF_ICMPLE:
case Const.IF_ICMPLT:
case Const.IF_ICMPNE:
stringbuilderVar15.append(""\t\t#"").append((bytes.getIndex() - 1) + bytes.readShort());
break;
case Const.GOTO_W:
case Const.JSR_W:
stringbuilderVar15.append(""\t\t#"").append((bytes.getIndex() - 1) + bytes.readInt());
break;
case Const.ALOAD:
case Const.ASTORE:
case Const.DLOAD:
case Const.DSTORE:
case Const.FLOAD:
case Const.FSTORE:
case Const.ILOAD:
case Const.ISTORE:
case Const.LLOAD:
case Const.LSTORE:
case Const.RET:
if (wide) {
intVar9 = bytes.readUnsignedShort();
wide = false;
} else {
intVar9 = bytes.readUnsignedByte();
}
stringbuilderVar15.append(""\t\t%"").append(intVar9);
break;
case Const.WIDE:
wide = true;
stringbuilderVar15.append(""\t(wide)"");
break;
case Const.NEWARRAY:
stringbuilderVar15.append(""\t\t<"").append(Const.getTypeName(bytes.readByte())).append("">"");
break;
case Const.GETFIELD:
case Const.GETSTATIC:
case Const.PUTFIELD:
case Const.PUTSTATIC:
intVar8 = bytes.readUnsignedShort();
stringbuilderVar15.append(""\t\t"").append(constant_pool.constantToString(intVar8, Const.CONSTANT_Fieldref)).append(verbose ? "" ("" + intVar8 + "")"" : """");
break;
case Const.NEW:
case Const.CHECKCAST:
stringbuilderVar15.append(""\t"");
case Const.INSTANCEOF:
intVar8 = bytes.readUnsignedShort();
stringbuilderVar15.append(""\t<"").append(constant_pool.constantToString(intVar8, Const.CONSTANT_Class)).append("">"").append(verbose ? "" ("" + intVar8 + "")"" : """");
break;
case Const.INVOKESPECIAL:
case Const.INVOKESTATIC:
intVar8 = bytes.readUnsignedShort();
Constant constantVar21 = constantLiteral22;
stringbuilderVar15.append(""\t"").append(constant_pool.constantToString(intVar8, constantVar21.getTag())).append(verbose ? "" ("" + intVar8 + "")"" : """");
break;
case Const.INVOKEVIRTUAL:
intVar8 = bytes.readUnsignedShort();
stringbuilderVar15.append(""\t"").append(constant_pool.constantToString(intVar8, Const.CONSTANT_Methodref)).append(verbose ? "" ("" + intVar8 + "")"" : """");
break;
case Const.INVOKEINTERFACE:
intVar8 = bytes.readUnsignedShort();
int intVar23 = intLiteral24;
stringbuilderVar15.append(""\t"").append(constant_pool.constantToString(intVar8, Const.CONSTANT_InterfaceMethodref)).append(verbose ? "" ("" + intVar8 + "")\t"" : """").append(intVar23).append(""\t"").append(bytes.readUnsignedByte());
break;
case Const.INVOKEDYNAMIC:
intVar8 = bytes.readUnsignedShort();
stringbuilderVar15.append(""\t"").append(constant_pool.constantToString(intVar8, Const.CONSTANT_InvokeDynamic)).append(verbose ? "" ("" + intVar8 + "")\t"" : """").append(bytes.readUnsignedByte()).append(bytes.readUnsignedByte());
break;
case Const.LDC_W:
case Const.LDC2_W:
intVar8 = bytes.readUnsignedShort();
stringbuilderVar15.append(""\t\t"").append(constant_pool.constantToString(intVar8, constant_pool.getConstant(intVar8).getTag())).append(verbose ? "" ("" + intVar8 + "")"" : """");
break;
case Const.LDC:
intVar8 = bytes.readUnsignedByte();
stringbuilderVar15.append(""\t\t"").append(constant_pool.constantToString(intVar8, constant_pool.getConstant(intVar8).getTag())).append(verbose ? "" ("" + intVar8 + "")"" : """");
break;
case Const.ANEWARRAY:
intVar8 = bytes.readUnsignedShort();
stringbuilderVar15.append(""\t\t<"").append(compactClassName(constant_pool.getConstantString(intVar8, Const.CONSTANT_Class), false)).append("">"").append(verbose ? "" ("" + intVar8 + "")"" : """");
break;
case Const.MULTIANEWARRAY:
{
intVar8 = bytes.readUnsignedShort();
int intVar25 = intLiteral24;
stringbuilderVar15.append(""\t<"").append(compactClassName(constant_pool.getConstantString(intVar8, Const.CONSTANT_Class), false)).append("">\t"").append(intVar25).append(verbose ? "" ("" + intVar8 + "")"" : """");
}
break;
case Const.IINC:
if (wide) {
intVar9 = bytes.readUnsignedShort();
intVar10 = bytes.readShort();
wide = false;
} else {
intVar9 = bytes.readUnsignedByte();
intVar10 = bytes.readByte();
}
stringbuilderVar15.append(""\t\t%"").append(intVar9).append(""\t"").append(intVar10);
break;
default:
if (Const.getNoOfOperands(shortVar1) > 0) {
for (int intVar26 = intLiteral27; intVar19 < intLiteral4; intVar19++) {
stringbuilderVar15.append(""\t\t"");
switch(Const.getOperandType(shortVar1, intVar19)) {
case Const.T_BYTE:
stringbuilderVar15.append(bytes.readByte());
break;
case Const.T_SHORT:
stringbuilderVar15.append(bytes.readShort());
break;
case Const.T_INT:
stringbuilderVar15.append(bytes.readInt());
break;
default:
// Never reached
System.err.println(""Unreachable default case reached!"");
System.exit(-1);
}
}
}
}
return stringbuilderVar15.toString();
}"
390,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,bcel,391,"return null;
","static Attribute[] getParameterAnnotationAttributes(ConstantPoolGen cp, List<AnnotationEntryGen>[] vec) {
int[] visCount = new int[vec.length];
int totalVisCount = 0;
int[] invisCount = new int[vec.length];
int totalInvisCount = 0;
try {
for (int i = 0; i < vec.length; i++) {
if (vec[i] != null) {
for (AnnotationEntryGen element : vec[i]) {
if (element.isRuntimeVisible()) {
visCount[i]++;
totalVisCount++;
} else {
invisCount[i]++;
totalInvisCount++;
}
}
}
}
ByteArrayOutputStream rvaBytes = new ByteArrayOutputStream();
DataOutputStream rvaDos = new DataOutputStream(rvaBytes);
rvaDos.writeByte(vec.length);
for (int i = 0; i < vec.length; i++) {
rvaDos.writeShort(visCount[i]);
if (visCount[i] > 0) {
for (AnnotationEntryGen element : vec[i]) {
if (element.isRuntimeVisible()) {
element.dump(rvaDos);
}
}
}
}
rvaDos.close();
ByteArrayOutputStream riaBytes = new ByteArrayOutputStream();
DataOutputStream riaDos = new DataOutputStream(riaBytes);
riaDos.writeByte(vec.length);
for (int i = 0; i < vec.length; i++) {
riaDos.writeShort(invisCount[i]);
if (invisCount[i] > 0) {
for (AnnotationEntryGen element : vec[i]) {
if (!element.isRuntimeVisible()) {
element.dump(riaDos);
}
}
}
}
riaDos.close();
byte[] rvaData = rvaBytes.toByteArray();
byte[] riaData = riaBytes.toByteArray();
int rvaIndex = -1;
int riaIndex = -1;
if (totalVisCount > 0) {
rvaIndex = cp.addUtf8(""RuntimeVisibleParameterAnnotations"");
}
if (totalInvisCount > 0) {
riaIndex = cp.addUtf8(""RuntimeInvisibleParameterAnnotations"");
}
List<Attribute> newAttributes = new ArrayList<>();
if (totalVisCount > 0) {
newAttributes.add(new RuntimeVisibleParameterAnnotations(rvaIndex, rvaData.length, new DataInputStream(new ByteArrayInputStream(rvaData)), cp.getConstantPool()));
}
if (totalInvisCount > 0) {
newAttributes.add(new RuntimeInvisibleParameterAnnotations(riaIndex, riaData.length, new DataInputStream(new ByteArrayInputStream(riaData)), cp.getConstantPool()));
}
return newAttributes.toArray(new Attribute[newAttributes.size()]);
} catch (IOException e) {
System.err.println(""IOException whilst processing parameter annotations"");
e.printStackTrace();
}
return null;
}","static Attribute[] getParameterAnnotationAttributes(ConstantPoolGen cp, List<AnnotationEntryGen>[] vec) {
int[] intArrayVar1 = intArrayLiteral2;
int intVar3 = intLiteral4;
int[] intArrayVar5 = intArrayLiteral2;
int intVar6 = intLiteral4;
try {
for (int intVar25 = intLiteral26; intVar7 < intLiteral1; intVar7++) {
if (vec[intVar7] != null) {
for (AnnotationEntryGen annotationentrygenVar8 : vec[intVar7]) {
if (annotationentrygenVar8.isRuntimeVisible()) {
intArrayVar1[intVar7]++;
intVar3++;
} else {
intArrayVar5[intVar7]++;
intVar6++;
}
}
}
}
ByteArrayOutputStream bytearrayoutputstreamVar9 = bytearrayoutputstreamLiteral10;
DataOutputStream dataoutputstreamVar11 = dataoutputstreamLiteral12;
dataoutputstreamVar11.writeByte(vec.length);
for (int intVar25 = intLiteral26; intVar7 < vec.length; intVar7++) {
dataoutputstreamVar11.writeShort(intArrayVar1[intVar7]);
if (intArrayVar1[intVar7] > 0) {
for (AnnotationEntryGen annotationentrygenVar8 : vec[intVar7]) {
if (annotationentrygenVar8.isRuntimeVisible()) {
annotationentrygenVar8.dump(dataoutputstreamVar11);
}
}
}
}
dataoutputstreamVar11.close();
ByteArrayOutputStream bytearrayoutputstreamVar13 = bytearrayoutputstreamLiteral10;
DataOutputStream dataoutputstreamVar14 = dataoutputstreamLiteral15;
dataoutputstreamVar14.writeByte(vec.length);
for (int intVar25 = intLiteral26; intVar7 < vec.length; intVar7++) {
dataoutputstreamVar14.writeShort(intArrayVar5[intVar7]);
if (intArrayVar5[intVar7] > 0) {
for (AnnotationEntryGen annotationentrygenVar8 : vec[intVar7]) {
if (!annotationentrygenVar8.isRuntimeVisible()) {
annotationentrygenVar8.dump(dataoutputstreamVar14);
}
}
}
}
dataoutputstreamVar14.close();
byte[] byteArrayVar16 = byteArrayLiteral17;
byte[] byteArrayVar18 = byteArrayLiteral19;
int intVar20 = intLiteral21;
int intVar22 = intLiteral21;
if (intVar3 > 0) {
intVar20 = cp.addUtf8(""RuntimeVisibleParameterAnnotations"");
}
if (intVar6 > 0) {
intVar22 = cp.addUtf8(""RuntimeInvisibleParameterAnnotations"");
}
List<Attribute> list<attribute>Var23 = list<attribute>Literal24;
if (intVar3 > 0) {
list<attribute>Var23.add(new RuntimeVisibleParameterAnnotations(intVar20, byteArrayVar16.length, new DataInputStream(new ByteArrayInputStream(byteArrayVar16)), cp.getConstantPool()));
}
if (intVar6 > 0) {
list<attribute>Var23.add(new RuntimeInvisibleParameterAnnotations(intVar22, byteArrayVar18.length, new DataInputStream(new ByteArrayInputStream(byteArrayVar18)), cp.getConstantPool()));
}
return list<attribute>Var23.toArray(new Attribute[list<attribute>Var23.size()]);
} catch (IOException e) {
System.err.println(""IOException whilst processing parameter annotations"");
e.printStackTrace();
}
return null;
}"
391,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,bcel,392,"return null;
","static Attribute[] getAnnotationAttributes(ConstantPoolGen cp, AnnotationEntryGen[] annotationEntryGens) {
if (annotationEntryGens.length == 0) {
return new Attribute[0];
}
try {
int countVisible = 0;
int countInvisible = 0;
for (AnnotationEntryGen a : annotationEntryGens) {
if (a.isRuntimeVisible()) {
countVisible++;
} else {
countInvisible++;
}
}
ByteArrayOutputStream rvaBytes = new ByteArrayOutputStream();
ByteArrayOutputStream riaBytes = new ByteArrayOutputStream();
DataOutputStream rvaDos = new DataOutputStream(rvaBytes);
DataOutputStream riaDos = new DataOutputStream(riaBytes);
rvaDos.writeShort(countVisible);
riaDos.writeShort(countInvisible);
for (AnnotationEntryGen a : annotationEntryGens) {
if (a.isRuntimeVisible()) {
a.dump(rvaDos);
} else {
a.dump(riaDos);
}
}
rvaDos.close();
riaDos.close();
byte[] rvaData = rvaBytes.toByteArray();
byte[] riaData = riaBytes.toByteArray();
int rvaIndex = -1;
int riaIndex = -1;
if (rvaData.length > 2) {
rvaIndex = cp.addUtf8(""RuntimeVisibleAnnotations"");
}
if (riaData.length > 2) {
riaIndex = cp.addUtf8(""RuntimeInvisibleAnnotations"");
}
List<Attribute> newAttributes = new ArrayList<>();
if (rvaData.length > 2) {
newAttributes.add(new RuntimeVisibleAnnotations(rvaIndex, rvaData.length, new DataInputStream(new ByteArrayInputStream(rvaData)), cp.getConstantPool()));
}
if (riaData.length > 2) {
newAttributes.add(new RuntimeInvisibleAnnotations(riaIndex, riaData.length, new DataInputStream(new ByteArrayInputStream(riaData)), cp.getConstantPool()));
}
return newAttributes.toArray(new Attribute[newAttributes.size()]);
} catch (IOException e) {
System.err.println(""IOException whilst processing annotations"");
e.printStackTrace();
}
return null;
}","static Attribute[] getAnnotationAttributes(ConstantPoolGen cp, AnnotationEntryGen[] annotationEntryGens) {
if (annotationEntryGens.length == 0) {
return new Attribute[0];
}
try {
int intVar1 = intLiteral2;
int intVar3 = intLiteral2;
for (AnnotationEntryGen annotationentrygenVar4 : annotationEntryGens) {
if (annotationentrygenVar4.isRuntimeVisible()) {
intVar1++;
} else {
intVar3++;
}
}
ByteArrayOutputStream bytearrayoutputstreamVar5 = bytearrayoutputstreamLiteral6;
ByteArrayOutputStream bytearrayoutputstreamVar7 = bytearrayoutputstreamLiteral6;
DataOutputStream dataoutputstreamVar8 = dataoutputstreamLiteral9;
DataOutputStream dataoutputstreamVar10 = dataoutputstreamLiteral11;
dataoutputstreamVar8.writeShort(intVar1);
dataoutputstreamVar10.writeShort(intVar3);
for (AnnotationEntryGen annotationentrygenVar4 : annotationEntryGens) {
if (annotationentrygenVar4.isRuntimeVisible()) {
annotationentrygenVar4.dump(dataoutputstreamVar8);
} else {
annotationentrygenVar4.dump(dataoutputstreamVar10);
}
}
dataoutputstreamVar8.close();
dataoutputstreamVar10.close();
byte[] byteArrayVar12 = byteArrayLiteral13;
byte[] byteArrayVar14 = byteArrayLiteral15;
int intVar16 = intLiteral17;
int intVar18 = intLiteral17;
if (byteArrayVar12.length > 2) {
intVar16 = cp.addUtf8(""RuntimeVisibleAnnotations"");
}
if (byteArrayVar14.length > 2) {
intVar18 = cp.addUtf8(""RuntimeInvisibleAnnotations"");
}
List<Attribute> list<attribute>Var19 = list<attribute>Literal20;
if (byteArrayVar12.length > 2) {
list<attribute>Var19.add(new RuntimeVisibleAnnotations(intVar16, byteArrayVar12.length, new DataInputStream(new ByteArrayInputStream(byteArrayVar12)), cp.getConstantPool()));
}
if (byteArrayVar14.length > 2) {
list<attribute>Var19.add(new RuntimeInvisibleAnnotations(intVar18, byteArrayVar14.length, new DataInputStream(new ByteArrayInputStream(byteArrayVar14)), cp.getConstantPool()));
}
return list<attribute>Var19.toArray(new Attribute[list<attribute>Var19.size()]);
} catch (IOException e) {
System.err.println(""IOException whilst processing annotations"");
e.printStackTrace();
}
return null;
}"
394,Multithreaded correctness,LI_LAZY_INIT_STATIC,FP,bcel,395,"if (bh_list == null) {
return new BranchHandle(i);
}
BranchHandle bh = bh_list;
bh_list = (BranchHandle) bh.getNext();
","static BranchHandle getBranchHandle(BranchInstruction i) {
if (bh_list == null) {
return new BranchHandle(i);
}
BranchHandle bh = bh_list;
bh_list = (BranchHandle) bh.getNext();
bh.setInstruction(i);
return bh;
}","static BranchHandle getBranchHandle(BranchInstruction i) {
if (bh_list == null) {
return new BranchHandle(i);
}
BranchHandle branchhandleVar1 = branchhandleLiteral2;
bh_list = (BranchHandle) branchhandleVar1.getNext();
branchhandleVar1.setInstruction(i);
return branchhandleVar1;
}"
395,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,bcel,396,"ConstantCP m = (ConstantCP) c;
","public int addConstant(Constant c, ConstantPoolGen cp) {
Constant[] constants = cp.getConstantPool().getConstantPool();
switch(c.getTag()) {
case Const.CONSTANT_String:
{
ConstantString s = (ConstantString) c;
ConstantUtf8 u8 = (ConstantUtf8) constants[s.getStringIndex()];
return addString(u8.getBytes());
}
case Const.CONSTANT_Class:
{
ConstantClass s = (ConstantClass) c;
ConstantUtf8 u8 = (ConstantUtf8) constants[s.getNameIndex()];
return addClass(u8.getBytes());
}
case Const.CONSTANT_NameAndType:
{
ConstantNameAndType n = (ConstantNameAndType) c;
ConstantUtf8 u8 = (ConstantUtf8) constants[n.getNameIndex()];
ConstantUtf8 u8_2 = (ConstantUtf8) constants[n.getSignatureIndex()];
return addNameAndType(u8.getBytes(), u8_2.getBytes());
}
case Const.CONSTANT_Utf8:
return addUtf8(((ConstantUtf8) c).getBytes());
case Const.CONSTANT_Double:
return addDouble(((ConstantDouble) c).getBytes());
case Const.CONSTANT_Float:
return addFloat(((ConstantFloat) c).getBytes());
case Const.CONSTANT_Long:
return addLong(((ConstantLong) c).getBytes());
case Const.CONSTANT_Integer:
return addInteger(((ConstantInteger) c).getBytes());
case Const.CONSTANT_InterfaceMethodref:
case Const.CONSTANT_Methodref:
case Const.CONSTANT_Fieldref:
{
ConstantCP m = (ConstantCP) c;
ConstantClass clazz = (ConstantClass) constants[m.getClassIndex()];
ConstantNameAndType n = (ConstantNameAndType) constants[m.getNameAndTypeIndex()];
ConstantUtf8 u8 = (ConstantUtf8) constants[clazz.getNameIndex()];
String class_name = u8.getBytes().replace('/', '.');
u8 = (ConstantUtf8) constants[n.getNameIndex()];
String name = u8.getBytes();
u8 = (ConstantUtf8) constants[n.getSignatureIndex()];
String signature = u8.getBytes();
switch(c.getTag()) {
case Const.CONSTANT_InterfaceMethodref:
return addInterfaceMethodref(class_name, name, signature);
case Const.CONSTANT_Methodref:
return addMethodref(class_name, name, signature);
case Const.CONSTANT_Fieldref:
return addFieldref(class_name, name, signature);
default:
// Never reached
throw new RuntimeException(""Unknown constant type "" + c);
}
}
default:
// Never reached
throw new RuntimeException(""Unknown constant type "" + c);
}
}","public int addConstant(Constant c, ConstantPoolGen cp) {
Constant[] constantArrayVar1 = constantArrayLiteral2;
switch(c.getTag()) {
case Const.CONSTANT_String:
{
ConstantString constantstringVar3 = constantstringLiteral4;
ConstantUtf8 constantutf8Var5 = constantutf8Literal6;
return addString(constantutf8Var5.getBytes());
}
case Const.CONSTANT_Class:
{
ConstantClass constantstringVar3 = constantclassLiteral7;
ConstantUtf8 constantutf8Var5 = constantutf8Literal8;
return addClass(constantutf8Var5.getBytes());
}
case Const.CONSTANT_NameAndType:
{
ConstantNameAndType constantnameandtypeVar9 = constantnameandtypeLiteral10;
ConstantUtf8 constantutf8Var5 = constantutf8Literal11;
ConstantUtf8 constantutf8Var12 = constantutf8Literal13;
return addNameAndType(constantutf8Var5.getBytes(), constantutf8Var12.getBytes());
}
case Const.CONSTANT_Utf8:
return addUtf8(((ConstantUtf8) c).getBytes());
case Const.CONSTANT_Double:
return addDouble(((ConstantDouble) c).getBytes());
case Const.CONSTANT_Float:
return addFloat(((ConstantFloat) c).getBytes());
case Const.CONSTANT_Long:
return addLong(((ConstantLong) c).getBytes());
case Const.CONSTANT_Integer:
return addInteger(((ConstantInteger) c).getBytes());
case Const.CONSTANT_InterfaceMethodref:
case Const.CONSTANT_Methodref:
case Const.CONSTANT_Fieldref:
{
ConstantCP constantcpVar14 = constantcpLiteral15;
ConstantClass constantclassVar16 = constantclassLiteral17;
ConstantNameAndType constantnameandtypeVar9 = constantnameandtypeLiteral18;
ConstantUtf8 constantutf8Var5 = constantutf8Literal19;
String stringVar20 = stringLiteral21;
constantutf8Var5 = (ConstantUtf8) constantArrayVar1[constantnameandtypeVar9.getNameIndex()];
String stringVar22 = stringLiteral23;
constantutf8Var5 = (ConstantUtf8) constantArrayVar1[constantnameandtypeVar9.getSignatureIndex()];
String stringVar24 = stringLiteral23;
switch(c.getTag()) {
case Const.CONSTANT_InterfaceMethodref:
return addInterfaceMethodref(stringVar20, stringVar22, stringVar24);
case Const.CONSTANT_Methodref:
return addMethodref(stringVar20, stringVar22, stringVar24);
case Const.CONSTANT_Fieldref:
return addFieldref(stringVar20, stringVar22, stringVar24);
default:
// Never reached
throw new RuntimeException(""Unknown constant type "" + c);
}
}
default:
// Never reached
throw new RuntimeException(""Unknown constant type "" + c);
}
}"
396,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,bcel,397,"return addLong(((ConstantLong) c).getBytes());
","public int addConstant(Constant c, ConstantPoolGen cp) {
Constant[] constants = cp.getConstantPool().getConstantPool();
switch(c.getTag()) {
case Const.CONSTANT_String:
{
ConstantString s = (ConstantString) c;
ConstantUtf8 u8 = (ConstantUtf8) constants[s.getStringIndex()];
return addString(u8.getBytes());
}
case Const.CONSTANT_Class:
{
ConstantClass s = (ConstantClass) c;
ConstantUtf8 u8 = (ConstantUtf8) constants[s.getNameIndex()];
return addClass(u8.getBytes());
}
case Const.CONSTANT_NameAndType:
{
ConstantNameAndType n = (ConstantNameAndType) c;
ConstantUtf8 u8 = (ConstantUtf8) constants[n.getNameIndex()];
ConstantUtf8 u8_2 = (ConstantUtf8) constants[n.getSignatureIndex()];
return addNameAndType(u8.getBytes(), u8_2.getBytes());
}
case Const.CONSTANT_Utf8:
return addUtf8(((ConstantUtf8) c).getBytes());
case Const.CONSTANT_Double:
return addDouble(((ConstantDouble) c).getBytes());
case Const.CONSTANT_Float:
return addFloat(((ConstantFloat) c).getBytes());
case Const.CONSTANT_Long:
return addLong(((ConstantLong) c).getBytes());
case Const.CONSTANT_Integer:
return addInteger(((ConstantInteger) c).getBytes());
case Const.CONSTANT_InterfaceMethodref:
case Const.CONSTANT_Methodref:
case Const.CONSTANT_Fieldref:
{
ConstantCP m = (ConstantCP) c;
ConstantClass clazz = (ConstantClass) constants[m.getClassIndex()];
ConstantNameAndType n = (ConstantNameAndType) constants[m.getNameAndTypeIndex()];
ConstantUtf8 u8 = (ConstantUtf8) constants[clazz.getNameIndex()];
String class_name = u8.getBytes().replace('/', '.');
u8 = (ConstantUtf8) constants[n.getNameIndex()];
String name = u8.getBytes();
u8 = (ConstantUtf8) constants[n.getSignatureIndex()];
String signature = u8.getBytes();
switch(c.getTag()) {
case Const.CONSTANT_InterfaceMethodref:
return addInterfaceMethodref(class_name, name, signature);
case Const.CONSTANT_Methodref:
return addMethodref(class_name, name, signature);
case Const.CONSTANT_Fieldref:
return addFieldref(class_name, name, signature);
default:
// Never reached
throw new RuntimeException(""Unknown constant type "" + c);
}
}
default:
// Never reached
throw new RuntimeException(""Unknown constant type "" + c);
}
}","public int addConstant(Constant c, ConstantPoolGen cp) {
Constant[] constantArrayVar1 = constantArrayLiteral2;
switch(c.getTag()) {
case Const.CONSTANT_String:
{
ConstantString constantstringVar3 = constantstringLiteral4;
ConstantUtf8 constantutf8Var5 = constantutf8Literal6;
return addString(constantutf8Var5.getBytes());
}
case Const.CONSTANT_Class:
{
ConstantClass constantstringVar3 = constantclassLiteral7;
ConstantUtf8 constantutf8Var5 = constantutf8Literal8;
return addClass(constantutf8Var5.getBytes());
}
case Const.CONSTANT_NameAndType:
{
ConstantNameAndType constantnameandtypeVar9 = constantnameandtypeLiteral10;
ConstantUtf8 constantutf8Var5 = constantutf8Literal11;
ConstantUtf8 constantutf8Var12 = constantutf8Literal13;
return addNameAndType(constantutf8Var5.getBytes(), constantutf8Var12.getBytes());
}
case Const.CONSTANT_Utf8:
return addUtf8(((ConstantUtf8) c).getBytes());
case Const.CONSTANT_Double:
return addDouble(((ConstantDouble) c).getBytes());
case Const.CONSTANT_Float:
return addFloat(((ConstantFloat) c).getBytes());
case Const.CONSTANT_Long:
return addLong(((ConstantLong) c).getBytes());
case Const.CONSTANT_Integer:
return addInteger(((ConstantInteger) c).getBytes());
case Const.CONSTANT_InterfaceMethodref:
case Const.CONSTANT_Methodref:
case Const.CONSTANT_Fieldref:
{
ConstantCP constantcpVar14 = constantcpLiteral15;
ConstantClass constantclassVar16 = constantclassLiteral17;
ConstantNameAndType constantnameandtypeVar9 = constantnameandtypeLiteral18;
ConstantUtf8 constantutf8Var5 = constantutf8Literal19;
String stringVar20 = stringLiteral21;
constantutf8Var5 = (ConstantUtf8) constantArrayVar1[constantnameandtypeVar9.getNameIndex()];
String stringVar22 = stringLiteral23;
constantutf8Var5 = (ConstantUtf8) constantArrayVar1[constantnameandtypeVar9.getSignatureIndex()];
String stringVar24 = stringLiteral23;
switch(c.getTag()) {
case Const.CONSTANT_InterfaceMethodref:
return addInterfaceMethodref(stringVar20, stringVar22, stringVar24);
case Const.CONSTANT_Methodref:
return addMethodref(stringVar20, stringVar22, stringVar24);
case Const.CONSTANT_Fieldref:
return addFieldref(stringVar20, stringVar22, stringVar24);
default:
// Never reached
throw new RuntimeException(""Unknown constant type "" + c);
}
}
default:
// Never reached
throw new RuntimeException(""Unknown constant type "" + c);
}
}"
399,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,bcel,400,"return addDouble(((ConstantDouble) c).getBytes());
","public int addConstant(Constant c, ConstantPoolGen cp) {
Constant[] constants = cp.getConstantPool().getConstantPool();
switch(c.getTag()) {
case Const.CONSTANT_String:
{
ConstantString s = (ConstantString) c;
ConstantUtf8 u8 = (ConstantUtf8) constants[s.getStringIndex()];
return addString(u8.getBytes());
}
case Const.CONSTANT_Class:
{
ConstantClass s = (ConstantClass) c;
ConstantUtf8 u8 = (ConstantUtf8) constants[s.getNameIndex()];
return addClass(u8.getBytes());
}
case Const.CONSTANT_NameAndType:
{
ConstantNameAndType n = (ConstantNameAndType) c;
ConstantUtf8 u8 = (ConstantUtf8) constants[n.getNameIndex()];
ConstantUtf8 u8_2 = (ConstantUtf8) constants[n.getSignatureIndex()];
return addNameAndType(u8.getBytes(), u8_2.getBytes());
}
case Const.CONSTANT_Utf8:
return addUtf8(((ConstantUtf8) c).getBytes());
case Const.CONSTANT_Double:
return addDouble(((ConstantDouble) c).getBytes());
case Const.CONSTANT_Float:
return addFloat(((ConstantFloat) c).getBytes());
case Const.CONSTANT_Long:
return addLong(((ConstantLong) c).getBytes());
case Const.CONSTANT_Integer:
return addInteger(((ConstantInteger) c).getBytes());
case Const.CONSTANT_InterfaceMethodref:
case Const.CONSTANT_Methodref:
case Const.CONSTANT_Fieldref:
{
ConstantCP m = (ConstantCP) c;
ConstantClass clazz = (ConstantClass) constants[m.getClassIndex()];
ConstantNameAndType n = (ConstantNameAndType) constants[m.getNameAndTypeIndex()];
ConstantUtf8 u8 = (ConstantUtf8) constants[clazz.getNameIndex()];
String class_name = u8.getBytes().replace('/', '.');
u8 = (ConstantUtf8) constants[n.getNameIndex()];
String name = u8.getBytes();
u8 = (ConstantUtf8) constants[n.getSignatureIndex()];
String signature = u8.getBytes();
switch(c.getTag()) {
case Const.CONSTANT_InterfaceMethodref:
return addInterfaceMethodref(class_name, name, signature);
case Const.CONSTANT_Methodref:
return addMethodref(class_name, name, signature);
case Const.CONSTANT_Fieldref:
return addFieldref(class_name, name, signature);
default:
// Never reached
throw new RuntimeException(""Unknown constant type "" + c);
}
}
default:
// Never reached
throw new RuntimeException(""Unknown constant type "" + c);
}
}","public int addConstant(Constant c, ConstantPoolGen cp) {
Constant[] constantArrayVar1 = constantArrayLiteral2;
switch(c.getTag()) {
case Const.CONSTANT_String:
{
ConstantString constantstringVar3 = constantstringLiteral4;
ConstantUtf8 constantutf8Var5 = constantutf8Literal6;
return addString(constantutf8Var5.getBytes());
}
case Const.CONSTANT_Class:
{
ConstantClass constantstringVar3 = constantclassLiteral7;
ConstantUtf8 constantutf8Var5 = constantutf8Literal8;
return addClass(constantutf8Var5.getBytes());
}
case Const.CONSTANT_NameAndType:
{
ConstantNameAndType constantnameandtypeVar9 = constantnameandtypeLiteral10;
ConstantUtf8 constantutf8Var5 = constantutf8Literal11;
ConstantUtf8 constantutf8Var12 = constantutf8Literal13;
return addNameAndType(constantutf8Var5.getBytes(), constantutf8Var12.getBytes());
}
case Const.CONSTANT_Utf8:
return addUtf8(((ConstantUtf8) c).getBytes());
case Const.CONSTANT_Double:
return addDouble(((ConstantDouble) c).getBytes());
case Const.CONSTANT_Float:
return addFloat(((ConstantFloat) c).getBytes());
case Const.CONSTANT_Long:
return addLong(((ConstantLong) c).getBytes());
case Const.CONSTANT_Integer:
return addInteger(((ConstantInteger) c).getBytes());
case Const.CONSTANT_InterfaceMethodref:
case Const.CONSTANT_Methodref:
case Const.CONSTANT_Fieldref:
{
ConstantCP constantcpVar14 = constantcpLiteral15;
ConstantClass constantclassVar16 = constantclassLiteral17;
ConstantNameAndType constantnameandtypeVar9 = constantnameandtypeLiteral18;
ConstantUtf8 constantutf8Var5 = constantutf8Literal19;
String stringVar20 = stringLiteral21;
constantutf8Var5 = (ConstantUtf8) constantArrayVar1[constantnameandtypeVar9.getNameIndex()];
String stringVar22 = stringLiteral23;
constantutf8Var5 = (ConstantUtf8) constantArrayVar1[constantnameandtypeVar9.getSignatureIndex()];
String stringVar24 = stringLiteral23;
switch(c.getTag()) {
case Const.CONSTANT_InterfaceMethodref:
return addInterfaceMethodref(stringVar20, stringVar22, stringVar24);
case Const.CONSTANT_Methodref:
return addMethodref(stringVar20, stringVar22, stringVar24);
case Const.CONSTANT_Fieldref:
return addFieldref(stringVar20, stringVar22, stringVar24);
default:
// Never reached
throw new RuntimeException(""Unknown constant type "" + c);
}
}
default:
// Never reached
throw new RuntimeException(""Unknown constant type "" + c);
}
}"
406,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,bcel,407,"return new EnumElementValueGen((EnumElementValue) value, cpool,
","public static ElementValueGen copy(ElementValue value, ConstantPoolGen cpool, boolean copyPoolEntries) {
switch(value.getElementValueType()) {
case 'B':
case 'C':
case 'D':
case 'F':
case 'I':
case 'J':
case 'S':
case 'Z':
case 's':
return new SimpleElementValueGen((SimpleElementValue) value, cpool, copyPoolEntries);
case 'e':
return new EnumElementValueGen((EnumElementValue) value, cpool, copyPoolEntries);
case '@':
return new AnnotationElementValueGen((AnnotationElementValue) value, cpool, copyPoolEntries);
case '[':
return new ArrayElementValueGen((ArrayElementValue) value, cpool, copyPoolEntries);
case 'c':
return new ClassElementValueGen((ClassElementValue) value, cpool, copyPoolEntries);
default:
throw new RuntimeException(""Not implemented yet! ("" + value.getElementValueType() + "")"");
}
}","public static ElementValueGen copy(ElementValue value, ConstantPoolGen cpool, boolean copyPoolEntries) {
switch(value.getElementValueType()) {
case 'B':
case 'C':
case 'D':
case 'F':
case 'I':
case 'J':
case 'S':
case 'Z':
case 's':
return new SimpleElementValueGen((SimpleElementValue) value, cpool, copyPoolEntries);
case 'e':
return new EnumElementValueGen((EnumElementValue) value, cpool, copyPoolEntries);
case '@':
return new AnnotationElementValueGen((AnnotationElementValue) value, cpool, copyPoolEntries);
case '[':
return new ArrayElementValueGen((ArrayElementValue) value, cpool, copyPoolEntries);
case 'c':
return new ClassElementValueGen((ClassElementValue) value, cpool, copyPoolEntries);
default:
throw new RuntimeException(""Not implemented yet! ("" + value.getElementValueType() + "")"");
}
}"
410,PERFORMANCE,DM_FP_NUMBER_CTOR,FP,bcel,411,"return new Float(value);
","@Override
public Number getValue() {
return new Float(value);
}","@Override
public Number getValue() {
return new Float(value);
}"
415,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,bcel,416,"return new CHECKCAST(cp.addClass((ObjectType) t));
","public CHECKCAST createCheckCast(ReferenceType t) {
if (t instanceof ArrayType) {
return new CHECKCAST(cp.addArrayClass((ArrayType) t));
}
return new CHECKCAST(cp.addClass((ObjectType) t));
}","public CHECKCAST createCheckCast(ReferenceType t) {
if (t instanceof ArrayType) {
return new CHECKCAST(cp.addArrayClass((ArrayType) t));
}
return new CHECKCAST(cp.addClass((ObjectType) t));
}"
416,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,bcel,417,"return new INSTANCEOF(cp.addClass((ObjectType) t));
","public INSTANCEOF createInstanceOf(ReferenceType t) {
if (t instanceof ArrayType) {
return new INSTANCEOF(cp.addArrayClass((ArrayType) t));
}
return new INSTANCEOF(cp.addClass((ObjectType) t));
}","public INSTANCEOF createInstanceOf(ReferenceType t) {
if (t instanceof ArrayType) {
return new INSTANCEOF(cp.addArrayClass((ArrayType) t));
}
return new INSTANCEOF(cp.addClass((ObjectType) t));
}"
420,DODGY_CODE,IM_AVERAGE_COMPUTATION_COULD_OVERFLOW,FP,bcel,421,"int i = (l + r) / 2;
","public static InstructionHandle findHandle(InstructionHandle[] ihs, int[] pos, int count, int target) {
int l = 0;
int r = count - 1;
do {
int i = (l + r) / 2;
int j = pos[i];
if (j == target) {
return ihs[i];
} else if (target < j) {
r = i - 1;
} else {
l = i + 1;
}
} while (l <= r);
return null;
}","public static InstructionHandle findHandle(InstructionHandle[] ihs, int[] pos, int count, int target) {
int intVar1 = intLiteral2;
int intVar3 = intLiteral4;
do {
int intVar5 = intLiteral6;
int intVar7 = intLiteral8;
if (intVar7 == target) {
return ihs[intVar5];
} else if (target < intVar7) {
intVar3 = intVar5 - 1;
} else {
intVar1 = intVar5 + 1;
}
} while (intVar1 <= intVar3);
return null;
}"
423,MALICIOUS_CODE,EI_EXPOSE_REP2,FP,bcel,424,"this.arg_types = arg_types;
","public void setArgumentTypes(Type[] arg_types) {
this.arg_types = arg_types;
}","public void setArgumentTypes(Type[] arg_types) {
this.arg_types = arg_types;
}"
428,MALICIOUS_CODE,EI_EXPOSE_REP,FP,bcel,429,"return match;
","public int[] getMatchs() {
return match;
}","public int[] getMatchs() {
return match;
}"
431,MALICIOUS_CODE,EI_EXPOSE_REP,FP,bcel,432,"return targets;
","public InstructionHandle[] getTargets() {
return targets;
}","public InstructionHandle[] getTargets() {
return targets;
}"
438,I18N,DM_DEFAULT_ENCODING,FP,bcel,439,"_out = new PrintWriter(out);
","public BCELifier(JavaClass clazz, OutputStream out) {
_clazz = clazz;
_out = new PrintWriter(out);
_cp = new ConstantPoolGen(_clazz.getConstantPool());
}","public BCELifier(JavaClass clazz, OutputStream out) {
_clazz = clazz;
_out = new PrintWriter(out);
_cp = new ConstantPoolGen(_clazz.getConstantPool());
}"
440,DODGY_CODE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,FP,bcel,441,"class_name = java_class.getClassName(); 
","public Class2HTML(JavaClass java_class, String dir) throws IOException {
Method[] methods = java_class.getMethods();
this.java_class = java_class;
this.dir = dir;
class_name = java_class.getClassName();
constant_pool = java_class.getConstantPool();
int index = class_name.lastIndexOf('.');
if (index > -1) {
class_package = class_name.substring(0, index);
} else {
class_package = """";
}
ConstantHTML constant_html = new ConstantHTML(dir, class_name, class_package, methods, constant_pool);
AttributeHTML attribute_html = new AttributeHTML(dir, class_name, constant_pool, constant_html);
new MethodHTML(dir, class_name, methods, java_class.getFields(), constant_html, attribute_html);
writeMainHTML(attribute_html);
new CodeHTML(dir, class_name, methods, constant_pool, constant_html);
attribute_html.close();
}","public Class2HTML(JavaClass java_class, String dir) throws IOException {
Method[] methodArrayVar1 = methodArrayLiteral2;
this.java_class = java_class;
this.dir = dir;
class_name = java_class.getClassName();
constant_pool = java_class.getConstantPool();
int intVar3 = intLiteral4;
if (intVar3 > -1) {
class_package = class_name.substring(0, intVar3);
} else {
class_package = """";
}
ConstantHTML constanthtmlVar5 = constanthtmlLiteral6;
AttributeHTML attributehtmlVar7 = attributehtmlLiteral8;
new MethodHTML(dir, class_name, methodArrayVar1, java_class.getFields(), constanthtmlVar5, attributehtmlVar7);
writeMainHTML(attributehtmlVar7);
new CodeHTML(dir, class_name, methodArrayVar1, constant_pool, constanthtmlVar5);
attributehtmlVar7.close();
}"
456,PERFORMANCE,DM_GC,FP,bcel,457,"System.gc(); 
","@Override
public void update(String classname) {
System.gc();
for (int i = 0; i < indent; i++) {
System.out.print("" "");
}
System.out.println(classname);
indent += 1;
Verifier v = VerifierFactory.getVerifier(classname);
VerificationResult vr;
vr = v.doPass1();
if (vr != VerificationResult.VR_OK) {
System.out.println(""Pass 1:\n"" + vr);
}
vr = v.doPass2();
if (vr != VerificationResult.VR_OK) {
System.out.println(""Pass 2:\n"" + vr);
}
if (vr == VerificationResult.VR_OK) {
try {
JavaClass jc = Repository.lookupClass(v.getClassName());
for (int i = 0; i < jc.getMethods().length; i++) {
vr = v.doPass3a(i);
if (vr != VerificationResult.VR_OK) {
System.out.println(v.getClassName() + "", Pass 3a, method "" + i + "" ['"" + jc.getMethods()[i] + ""']:\n"" + vr);
}
vr = v.doPass3b(i);
if (vr != VerificationResult.VR_OK) {
System.out.println(v.getClassName() + "", Pass 3b, method "" + i + "" ['"" + jc.getMethods()[i] + ""']:\n"" + vr);
}
}
} catch (ClassNotFoundException e) {
System.err.println(""Could not find class "" + v.getClassName() + "" in Repository"");
}
}
indent -= 1;
}","@Override
public void update(String classname) {
System.gc();
for (int intVar8 = intLiteral9; intVar1 < intLiteral1; intVar1++) {
System.out.print("" "");
}
System.out.println(classname);
indent += 1;
Verifier verifierVar3 = verifierLiteral4;
VerificationResult verificationresultVar5;
verificationresultVar5 = verifierVar3.doPass1();
if (verificationresultVar5 != VerificationResult.VR_OK) {
System.out.println(""Pass 1:\n"" + verificationresultVar5);
}
verificationresultVar5 = verifierVar3.doPass2();
if (verificationresultVar5 != VerificationResult.VR_OK) {
System.out.println(""Pass 2:\n"" + verificationresultVar5);
}
if (verificationresultVar5 == VerificationResult.VR_OK) {
try {
JavaClass javaclassVar6 = javaclassLiteral7;
for (int intVar8 = intLiteral9; intVar1 < intLiteral2; intVar1++) {
verificationresultVar5 = verifierVar3.doPass3a(intVar1);
if (verificationresultVar5 != VerificationResult.VR_OK) {
System.out.println(verifierVar3.getClassName() + "", Pass 3a, method "" + intVar1 + "" ['"" + javaclassVar6.getMethods()[intVar1] + ""']:\n"" + verificationresultVar5);
}
verificationresultVar5 = verifierVar3.doPass3b(intVar1);
if (verificationresultVar5 != VerificationResult.VR_OK) {
System.out.println(verifierVar3.getClassName() + "", Pass 3b, method "" + intVar1 + "" ['"" + javaclassVar6.getMethods()[intVar1] + ""']:\n"" + verificationresultVar5);
}
}
} catch (ClassNotFoundException e) {
System.err.println(""Could not find class "" + verifierVar3.getClassName() + "" in Repository"");
}
}
indent -= 1;
}"
464,DODGY_CODE,UCF_USELESS_CONTROL_FLOW,FP,bcel,465,"objreftype.subclassOf(curr) ) ){
","@Override
public void visitGETFIELD(GETFIELD o) {
try {
Type objectref = stack().peek();
if (!((objectref instanceof ObjectType) || (objectref == Type.NULL))) {
constraintViolated(o, ""Stack top should be an object reference that's not an array reference, but is '"" + objectref + ""'."");
}
String field_name = o.getFieldName(cpg);
JavaClass jc = Repository.lookupClass(getObjectType(o).getClassName());
Field[] fields = jc.getFields();
Field f = null;
for (Field field : fields) {
if (field.getName().equals(field_name)) {
Type f_type = Type.getType(field.getSignature());
Type o_type = o.getType(cpg);
if (f_type.equals(o_type)) {
f = field;
break;
}
}
}
if (f == null) {
JavaClass[] superclasses = jc.getSuperClasses();
outer: for (JavaClass superclass : superclasses) {
fields = superclass.getFields();
for (Field field : fields) {
if (field.getName().equals(field_name)) {
Type f_type = Type.getType(field.getSignature());
Type o_type = o.getType(cpg);
if (f_type.equals(o_type)) {
f = field;
if ((f.getAccessFlags() & (Const.ACC_PUBLIC | Const.ACC_PROTECTED)) == 0) {
f = null;
}
break outer;
}
}
}
}
if (f == null) {
throw new AssertionViolatedException(""Field '"" + field_name + ""' not found in "" + jc.getClassName());
}
}
if (f.isProtected()) {
ObjectType classtype = getObjectType(o);
ObjectType curr = ObjectType.getInstance(mg.getClassName());
if (classtype.equals(curr) || curr.subclassOf(classtype)) {
Type t = stack().peek();
if (t == Type.NULL) {
return;
}
if (!(t instanceof ObjectType)) {
constraintViolated(o, ""The 'objectref' must refer to an object that's not an array. Found instead: '"" + t + ""'."");
}
ObjectType objreftype = (ObjectType) t;
if (!(objreftype.equals(curr) || objreftype.subclassOf(curr))) {
// TODO: One day move to Staerk-et-al's ""Set of object types"" instead of ""wider"" object types
}
}
}
// TODO: Could go into Pass 3a.
if (f.isStatic()) {
constraintViolated(o, ""Referenced field '"" + f + ""' is static which it shouldn't be."");
}
} catch (ClassNotFoundException e) {
// FIXME: maybe not the best way to handle this
throw new AssertionViolatedException(""Missing class: "" + e, e);
}
}","@Override
public void visitGETFIELD(GETFIELD o) {
try {
Type typeVar1 = typeLiteral2;
if (!((typeVar1 instanceof ObjectType) || (typeVar1 == Type.NULL))) {
constraintViolated(o, ""Stack top should be an object reference that's not an array reference, but is '"" + typeVar1 + ""'."");
}
String stringVar3 = stringLiteral4;
JavaClass javaclassVar5 = javaclassLiteral6;
Field[] fieldArrayVar7 = fieldArrayLiteral8;
Field fieldVar9 = fieldLiteral10;
for (Field fieldVar11 : fieldArrayVar7) {
if (fieldVar11.getName().equals(stringVar3)) {
Type typeVar12 = typeLiteral13;
Type typeVar14 = typeLiteral15;
if (typeVar12.equals(typeVar14)) {
fieldVar9 = fieldVar11;
break;
}
}
}
if (fieldVar9 == null) {
JavaClass[] javaclassArrayVar16 = javaclassArrayLiteral17;
outer: for (JavaClass javaclassVar18 : javaclassArrayVar16) {
fieldArrayVar7 = javaclassVar18.getFields();
for (Field fieldVar11 : fieldArrayVar7) {
if (fieldVar11.getName().equals(stringVar3)) {
Type typeVar12 = typeLiteral13;
Type typeVar14 = typeLiteral15;
if (typeVar12.equals(typeVar14)) {
fieldVar9 = fieldVar11;
if ((fieldVar9.getAccessFlags() & (Const.ACC_PUBLIC | Const.ACC_PROTECTED)) == 0) {
fieldVar9 = null;
}
break outer;
}
}
}
}
if (fieldVar9 == null) {
throw new AssertionViolatedException(""Field '"" + stringVar3 + ""' not found in "" + javaclassVar5.getClassName());
}
}
if (fieldVar9.isProtected()) {
ObjectType objecttypeVar19 = objecttypeLiteral20;
ObjectType objecttypeVar21 = objecttypeLiteral22;
if (objecttypeVar19.equals(objecttypeVar21) || objecttypeVar21.subclassOf(objecttypeVar19)) {
Type typeVar23 = typeLiteral2;
if (typeVar23 == Type.NULL) {
return;
}
if (!(typeVar23 instanceof ObjectType)) {
constraintViolated(o, ""The 'objectref' must refer to an object that's not an array. Found instead: '"" + typeVar23 + ""'."");
}
ObjectType objecttypeVar24 = objecttypeLiteral25;
if (!(objecttypeVar24.equals(objecttypeVar21) || objecttypeVar24.subclassOf(objecttypeVar21))) {
// TODO: One day move to Staerk-et-al's ""Set of object types"" instead of ""wider"" object types
}
}
}
// TODO: Could go into Pass 3a.
if (fieldVar9.isStatic()) {
constraintViolated(o, ""Referenced field '"" + fieldVar9 + ""' is static which it shouldn't be."");
}
} catch (ClassNotFoundException e) {
// FIXME: maybe not the best way to handle this
throw new AssertionViolatedException(""Missing class: "" + e, e);
}
}"
468,MALICIOUS_CODE,MS_OOI_PKGPROTECT,FP,bcel,469,"String[] OPCODE_NAMES = { ""nop"", ""aconst_null"", ""iconst_m1"", ""iconst_0"", ""iconst_1"", ""iconst_2"", ""iconst_3"", ""iconst_4"", ""iconst_5"", ""lconst_0"", ""lconst_1"", ""fconst_0"", ""fconst_1"", ""fconst_2"", ""dconst_0"", ""dconst_1"", ""bipush"", ""sipush"", ""ldc"", ""ldc_w"", ""ldc2_w"", ""iload"", ""lload"", ""fload"", ""dload"", ""aload"", ""iload_0"", ""iload_1"", ""iload_2"", ""iload_3"", ""lload_0"", ""lload_1"", ""lload_2"", ""lload_3"", ""fload_0"", ""fload_1"", ""fload_2"", ""fload_3"", ""dload_0"", ""dload_1"", ""dload_2"", ""dload_3"", ""aload_0"", ""aload_1"", ""aload_2"", ""aload_3"", ""iaload"", ""laload"", ""faload"", ""daload"", ""aaload"", ""baload"", ""caload"", ""saload"", ""istore"", ""lstore"", ""fstore"", ""dstore"", ""astore"", ""istore_0"", ""istore_1"", ""istore_2"", ""istore_3"", ""lstore_0"", ""lstore_1"", ""lstore_2"", ""lstore_3"", ""fstore_0"", ""fstore_1"", ""fstore_2"", ""fstore_3"", ""dstore_0"", ""dstore_1"", ""dstore_2"", ""dstore_3"", ""astore_0"", ""astore_1"", ""astore_2"", ""astore_3"", ""iastore"", ""lastore"", ""fastore"", ""dastore"", ""aastore"", ""bastore"", ""castore"", ""sastore"", ""pop"", ""pop2"", ""dup"", ""dup_x1"", ""dup_x2"", ""dup2"", ""dup2_x1"", ""dup2_x2"", ""swap"", ""iadd"", ""ladd"", ""fadd"", ""dadd"", ""isub"", ""lsub"", ""fsub"", ""dsub"", ""imul"", ""lmul"", ""fmul"", ""dmul"", ""idiv"", ""ldiv"", ""fdiv"", ""ddiv"", ""irem"", ""lrem"", ""frem"", ""drem"", ""ineg"", ""lneg"", ""fneg"", ""dneg"", ""ishl"", ""lshl"", ""ishr"", ""lshr"", ""iushr"", ""lushr"", ""iand"", ""land"", ""ior"", ""lor"", ""ixor"", ""lxor"", ""iinc"", ""i2l"", ""i2f"", ""i2d"", ""l2i"", ""l2f"", ""l2d"", ""f2i"", ""f2l"", ""f2d"", ""d2i"", ""d2l"", ""d2f"", ""i2b"", ""i2c"", ""i2s"", ""lcmp"", ""fcmpl"", ""fcmpg"", ""dcmpl"", ""dcmpg"", ""ifeq"", ""ifne"", ""iflt"", ""ifge"", ""ifgt"", ""ifle"", ""if_icmpeq"", ""if_icmpne"", ""if_icmplt"", ""if_icmpge"", ""if_icmpgt"", ""if_icmple"", ""if_acmpeq"", ""if_acmpne"", ""goto"", ""jsr"", ""ret"", ""tableswitch"", ""lookupswitch"", ""ireturn"", ""lreturn"", ""freturn"", ""dreturn"", ""areturn"", ""return"", ""getstatic"", ""putstatic"", ""getfield"", ""putfield"", ""invokevirtual"", ""invokespecial"", ""invokestatic"", ""invokeinterface"", ""invokedynamic"", ""new"", ""newarray"", ""anewarray"", ""arraylength"", ""athrow"", ""checkcast"", ""instanceof"", ""monitorenter"", ""monitorexit"", ""wide"", ""multianewarray"", ""ifnull"", ""ifnonnull"", ""goto_w"", ""jsr_w"", ""breakpointimpdep1"", ""impdep2"" };","String[] OPCODE_NAMES = { ""nop"", ""aconst_null"", ""iconst_m1"", ""iconst_0"", ""iconst_1"", ""iconst_2"", ""iconst_3"", ""iconst_4"", ""iconst_5"", ""lconst_0"", ""lconst_1"", ""fconst_0"", ""fconst_1"", ""fconst_2"", ""dconst_0"", ""dconst_1"", ""bipush"", ""sipush"", ""ldc"", ""ldc_w"", ""ldc2_w"", ""iload"", ""lload"", ""fload"", ""dload"", ""aload"", ""iload_0"", ""iload_1"", ""iload_2"", ""iload_3"", ""lload_0"", ""lload_1"", ""lload_2"", ""lload_3"", ""fload_0"", ""fload_1"", ""fload_2"", ""fload_3"", ""dload_0"", ""dload_1"", ""dload_2"", ""dload_3"", ""aload_0"", ""aload_1"", ""aload_2"", ""aload_3"", ""iaload"", ""laload"", ""faload"", ""daload"", ""aaload"", ""baload"", ""caload"", ""saload"", ""istore"", ""lstore"", ""fstore"", ""dstore"", ""astore"", ""istore_0"", ""istore_1"", ""istore_2"", ""istore_3"", ""lstore_0"", ""lstore_1"", ""lstore_2"", ""lstore_3"", ""fstore_0"", ""fstore_1"", ""fstore_2"", ""fstore_3"", ""dstore_0"", ""dstore_1"", ""dstore_2"", ""dstore_3"", ""astore_0"", ""astore_1"", ""astore_2"", ""astore_3"", ""iastore"", ""lastore"", ""fastore"", ""dastore"", ""aastore"", ""bastore"", ""castore"", ""sastore"", ""pop"", ""pop2"", ""dup"", ""dup_x1"", ""dup_x2"", ""dup2"", ""dup2_x1"", ""dup2_x2"", ""swap"", ""iadd"", ""ladd"", ""fadd"", ""dadd"", ""isub"", ""lsub"", ""fsub"", ""dsub"", ""imul"", ""lmul"", ""fmul"", ""dmul"", ""idiv"", ""ldiv"", ""fdiv"", ""ddiv"", ""irem"", ""lrem"", ""frem"", ""drem"", ""ineg"", ""lneg"", ""fneg"", ""dneg"", ""ishl"", ""lshl"", ""ishr"", ""lshr"", ""iushr"", ""lushr"", ""iand"", ""land"", ""ior"", ""lor"", ""ixor"", ""lxor"", ""iinc"", ""i2l"", ""i2f"", ""i2d"", ""l2i"", ""l2f"", ""l2d"", ""f2i"", ""f2l"", ""f2d"", ""d2i"", ""d2l"", ""d2f"", ""i2b"", ""i2c"", ""i2s"", ""lcmp"", ""fcmpl"", ""fcmpg"", ""dcmpl"", ""dcmpg"", ""ifeq"", ""ifne"", ""iflt"", ""ifge"", ""ifgt"", ""ifle"", ""if_icmpeq"", ""if_icmpne"", ""if_icmplt"", ""if_icmpge"", ""if_icmpgt"", ""if_icmple"", ""if_acmpeq"", ""if_acmpne"", ""goto"", ""jsr"", ""ret"", ""tableswitch"", ""lookupswitch"", ""ireturn"", ""lreturn"", ""freturn"", ""dreturn"", ""areturn"", ""return"", ""getstatic"", ""putstatic"", ""getfield"", ""putfield"", ""invokevirtual"", ""invokespecial"", ""invokestatic"", ""invokeinterface"", ""invokedynamic"", ""new"", ""newarray"", ""anewarray"", ""arraylength"", ""athrow"", ""checkcast"", ""instanceof"", ""monitorenter"", ""monitorexit"", ""wide"", ""multianewarray"", ""ifnull"", ""ifnonnull"", ""goto_w"", ""jsr_w"", ""breakpointimpdep1"", ""impdep2"" };",String[] stringArrayVar1 = stringArrayLiteral2;
470,MALICIOUS_CODE,MS_OOI_PKGPROTECT,FP,bcel,471,"String[] SHORT_TYPE_NAMES = { ILLEGAL_TYPE, ILLEGAL_TYPE, ILLEGAL_TYPE, ILLEGAL_TYPE, ""Z"", ""C"", ""F"", ""D"", ""B"", ""S"", ""I"", ""J"", ""V"", ILLEGAL_TYPE, ILLEGAL_TYPE, ILLEGAL_TYPE };","String[] SHORT_TYPE_NAMES = { ILLEGAL_TYPE, ILLEGAL_TYPE, ILLEGAL_TYPE, ILLEGAL_TYPE, ""Z"", ""C"", ""F"", ""D"", ""B"", ""S"", ""I"", ""J"", ""V"", ILLEGAL_TYPE, ILLEGAL_TYPE, ILLEGAL_TYPE };",String[] stringArrayVar1 = stringArrayLiteral2;
473,MALICIOUS_CODE,MS_OOI_PKGPROTECT,FP,bcel,474,"String[] INTERFACES_IMPLEMENTED_BY_ARRAYS = { ""java.lang.Cloneable"", ""java.io.Serializable"" };","String[] INTERFACES_IMPLEMENTED_BY_ARRAYS = { ""java.lang.Cloneable"", ""java.io.Serializable"" };",String[] stringArrayVar1 = stringArrayLiteral2;
475,MALICIOUS_CODE,MS_OOI_PKGPROTECT,FP,bcel,476,"String[] CLASS_TYPE_NAMES = { ILLEGAL_TYPE, ILLEGAL_TYPE, ILLEGAL_TYPE, ILLEGAL_TYPE, ""java.lang.Boolean"", ""java.lang.Character"", ""java.lang.Float"", ""java.lang.Double"", ""java.lang.Byte"", ""java.lang.Short"", ""java.lang.Integer"", ""java.lang.Long"", ""java.lang.Void"", ILLEGAL_TYPE, ILLEGAL_TYPE, ILLEGAL_TYPE, ILLEGAL_TYPE };","String[] CLASS_TYPE_NAMES = { ILLEGAL_TYPE, ILLEGAL_TYPE, ILLEGAL_TYPE, ILLEGAL_TYPE, ""java.lang.Boolean"", ""java.lang.Character"", ""java.lang.Float"", ""java.lang.Double"", ""java.lang.Byte"", ""java.lang.Short"", ""java.lang.Integer"", ""java.lang.Long"", ""java.lang.Void"", ILLEGAL_TYPE, ILLEGAL_TYPE, ILLEGAL_TYPE, ILLEGAL_TYPE };",String[] stringArrayVar1 = stringArrayLiteral2;
477,MALICIOUS_CODE,MS_OOI_PKGPROTECT,FP,bcel,478,"String[] ACCESS_NAMES = { ""public"", ""private"", ""protected"", ""static"", ""final"", ""synchronized"", ""volatile"", ""transient"", ""native"", ""interface"", ""abstract"", ""strictfp"", ""synthetic"", ""annotation"", ""enum"" };","String[] ACCESS_NAMES = { ""public"", ""private"", ""protected"", ""static"", ""final"", ""synchronized"", ""volatile"", ""transient"", ""native"", ""interface"", ""abstract"", ""strictfp"", ""synthetic"", ""annotation"", ""enum"" };",String[] stringArrayVar1 = stringArrayLiteral2;
481,MALICIOUS_CODE,MS_OOI_PKGPROTECT,FP,bcel,482,"@Deprecated
Class<?>[] EXCS_CLASS_AND_INTERFACE_RESOLUTION = { NO_CLASS_DEF_FOUND_ERROR, CLASS_FORMAT_ERROR, VERIFY_ERROR, ABSTRACT_METHOD_ERROR, EXCEPTION_IN_INITIALIZER_ERROR, ILLEGAL_ACCESS_ERROR };","@Deprecated
Class<?>[] EXCS_CLASS_AND_INTERFACE_RESOLUTION = { NO_CLASS_DEF_FOUND_ERROR, CLASS_FORMAT_ERROR, VERIFY_ERROR, ABSTRACT_METHOD_ERROR, EXCEPTION_IN_INITIALIZER_ERROR, ILLEGAL_ACCESS_ERROR };","@Deprecated
Class<?>[] class<?>ArrayVar1 = class<?>ArrayLiteral2;"
482,MALICIOUS_CODE,MS_OOI_PKGPROTECT,FP,bcel,483,"@Deprecated
Class<?>[] EXCS_ARRAY_EXCEPTION = { NULL_POINTER_EXCEPTION, ARRAY_INDEX_OUT_OF_BOUNDS_EXCEPTION };","@Deprecated
Class<?>[] EXCS_ARRAY_EXCEPTION = { NULL_POINTER_EXCEPTION, ARRAY_INDEX_OUT_OF_BOUNDS_EXCEPTION };","@Deprecated
Class<?>[] class<?>ArrayVar1 = class<?>ArrayLiteral2;"
485,MALICIOUS_CODE,EI_EXPOSE_REP2,FP,bcel,486,"this.annotationTable = annotationTable;
","public Annotations(final byte annotationType, final int nameIndex, final int length, final AnnotationEntry[] annotationTable, final ConstantPool constantPool, final boolean isRuntimeVisible) {
super(annotationType, nameIndex, length, constantPool);
this.annotationTable = annotationTable;
this.isRuntimeVisible = isRuntimeVisible;
}","public Annotations(final byte annotationType, final int nameIndex, final int length, final AnnotationEntry[] annotationTable, final ConstantPool constantPool, final boolean isRuntimeVisible) {
super(annotationType, nameIndex, length, constantPool);
this.annotationTable = annotationTable;
this.isRuntimeVisible = isRuntimeVisible;
}"
493,MALICIOUS_CODE,EI_EXPOSE_REP2,FP,bcel,494,"this.bootstrapMethods = bootstrapMethods;
","public BootstrapMethods(final int name_index, final int length, final BootstrapMethod[] bootstrapMethods, final ConstantPool constant_pool) {
super(Const.ATTR_BOOTSTRAP_METHODS, name_index, length, constant_pool);
this.bootstrapMethods = bootstrapMethods;
}","public BootstrapMethods(final int name_index, final int length, final BootstrapMethod[] bootstrapMethods, final ConstantPool constant_pool) {
super(Const.ATTR_BOOTSTRAP_METHODS, name_index, length, constant_pool);
this.bootstrapMethods = bootstrapMethods;
}"
508,MALICIOUS_CODE,EI_EXPOSE_REP2,FP,bcel,509,"this.constantPool = constantPool;
","public void setConstantPool(final Constant[] constantPool) {
this.constantPool = constantPool;
}","public void setConstantPool(final Constant[] constantPool) {
this.constantPool = constantPool;
}"
512,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,bcel,513,"str = constantToString(((ConstantNameAndType) c).getNameIndex(),
","public String constantToString(Constant c) throws ClassFormatException {
String str;
int i;
final byte tag = c.getTag();
switch(tag) {
case Const.CONSTANT_Class:
i = ((ConstantClass) c).getNameIndex();
c = getConstant(i, Const.CONSTANT_Utf8);
str = Utility.compactClassName(((ConstantUtf8) c).getBytes(), false);
break;
case Const.CONSTANT_String:
i = ((ConstantString) c).getStringIndex();
c = getConstant(i, Const.CONSTANT_Utf8);
str = ""\"""" + escape(((ConstantUtf8) c).getBytes()) + ""\"""";
break;
case Const.CONSTANT_Utf8:
str = ((ConstantUtf8) c).getBytes();
break;
case Const.CONSTANT_Double:
str = String.valueOf(((ConstantDouble) c).getBytes());
break;
case Const.CONSTANT_Float:
str = String.valueOf(((ConstantFloat) c).getBytes());
break;
case Const.CONSTANT_Long:
str = String.valueOf(((ConstantLong) c).getBytes());
break;
case Const.CONSTANT_Integer:
str = String.valueOf(((ConstantInteger) c).getBytes());
break;
case Const.CONSTANT_NameAndType:
str = constantToString(((ConstantNameAndType) c).getNameIndex(), Const.CONSTANT_Utf8) + "" "" + constantToString(((ConstantNameAndType) c).getSignatureIndex(), Const.CONSTANT_Utf8);
break;
case Const.CONSTANT_InterfaceMethodref:
case Const.CONSTANT_Methodref:
case Const.CONSTANT_Fieldref:
str = constantToString(((ConstantCP) c).getClassIndex(), Const.CONSTANT_Class) + ""."" + constantToString(((ConstantCP) c).getNameAndTypeIndex(), Const.CONSTANT_NameAndType);
break;
case Const.CONSTANT_MethodHandle:
final ConstantMethodHandle cmh = (ConstantMethodHandle) c;
str = Const.getMethodHandleName(cmh.getReferenceKind()) + "" "" + constantToString(cmh.getReferenceIndex(), getConstant(cmh.getReferenceIndex()).getTag());
break;
case Const.CONSTANT_MethodType:
final ConstantMethodType cmt = (ConstantMethodType) c;
str = constantToString(cmt.getDescriptorIndex(), Const.CONSTANT_Utf8);
break;
case Const.CONSTANT_InvokeDynamic:
final ConstantInvokeDynamic cid = (ConstantInvokeDynamic) c;
str = cid.getBootstrapMethodAttrIndex() + "":"" + constantToString(cid.getNameAndTypeIndex(), Const.CONSTANT_NameAndType);
break;
case Const.CONSTANT_Module:
i = ((ConstantModule) c).getNameIndex();
c = getConstant(i, Const.CONSTANT_Utf8);
str = Utility.compactClassName(((ConstantUtf8) c).getBytes(), false);
break;
case Const.CONSTANT_Package:
i = ((ConstantPackage) c).getNameIndex();
c = getConstant(i, Const.CONSTANT_Utf8);
str = Utility.compactClassName(((ConstantUtf8) c).getBytes(), false);
break;
default:
// Never reached
throw new IllegalArgumentException(""Unknown constant type "" + tag);
}
return str;
}","public String constantToString(Constant c) throws ClassFormatException {
String stringVar1;
int intVar2;
final byte byteVar3 = byteLiteral4;
switch(byteVar3) {
case Const.CONSTANT_Class:
intVar2 = ((ConstantClass) c).getNameIndex();
c = getConstant(intVar2, Const.CONSTANT_Utf8);
stringVar1 = Utility.compactClassName(((ConstantUtf8) c).getBytes(), false);
break;
case Const.CONSTANT_String:
intVar2 = ((ConstantString) c).getStringIndex();
c = getConstant(intVar2, Const.CONSTANT_Utf8);
stringVar1 = ""\"""" + escape(((ConstantUtf8) c).getBytes()) + ""\"""";
break;
case Const.CONSTANT_Utf8:
stringVar1 = ((ConstantUtf8) c).getBytes();
break;
case Const.CONSTANT_Double:
stringVar1 = String.valueOf(((ConstantDouble) c).getBytes());
break;
case Const.CONSTANT_Float:
stringVar1 = String.valueOf(((ConstantFloat) c).getBytes());
break;
case Const.CONSTANT_Long:
stringVar1 = String.valueOf(((ConstantLong) c).getBytes());
break;
case Const.CONSTANT_Integer:
stringVar1 = String.valueOf(((ConstantInteger) c).getBytes());
break;
case Const.CONSTANT_NameAndType:
stringVar1 = constantToString(((ConstantNameAndType) c).getNameIndex(), Const.CONSTANT_Utf8) + "" "" + constantToString(((ConstantNameAndType) c).getSignatureIndex(), Const.CONSTANT_Utf8);
break;
case Const.CONSTANT_InterfaceMethodref:
case Const.CONSTANT_Methodref:
case Const.CONSTANT_Fieldref:
stringVar1 = constantToString(((ConstantCP) c).getClassIndex(), Const.CONSTANT_Class) + ""."" + constantToString(((ConstantCP) c).getNameAndTypeIndex(), Const.CONSTANT_NameAndType);
break;
case Const.CONSTANT_MethodHandle:
final ConstantMethodHandle constantmethodhandleVar5 = constantmethodhandleLiteral6;
stringVar1 = Const.getMethodHandleName(constantmethodhandleVar5.getReferenceKind()) + "" "" + constantToString(constantmethodhandleVar5.getReferenceIndex(), getConstant(constantmethodhandleVar5.getReferenceIndex()).getTag());
break;
case Const.CONSTANT_MethodType:
final ConstantMethodType constantmethodtypeVar7 = constantmethodtypeLiteral8;
stringVar1 = constantToString(constantmethodtypeVar7.getDescriptorIndex(), Const.CONSTANT_Utf8);
break;
case Const.CONSTANT_InvokeDynamic:
final ConstantInvokeDynamic constantinvokedynamicVar9 = constantinvokedynamicLiteral10;
stringVar1 = constantinvokedynamicVar9.getBootstrapMethodAttrIndex() + "":"" + constantToString(constantinvokedynamicVar9.getNameAndTypeIndex(), Const.CONSTANT_NameAndType);
break;
case Const.CONSTANT_Module:
intVar2 = ((ConstantModule) c).getNameIndex();
c = getConstant(intVar2, Const.CONSTANT_Utf8);
stringVar1 = Utility.compactClassName(((ConstantUtf8) c).getBytes(), false);
break;
case Const.CONSTANT_Package:
intVar2 = ((ConstantPackage) c).getNameIndex();
c = getConstant(intVar2, Const.CONSTANT_Utf8);
stringVar1 = Utility.compactClassName(((ConstantUtf8) c).getBytes(), false);
break;
default:
// Never reached
throw new IllegalArgumentException(""Unknown constant type "" + byteVar3);
}
return stringVar1;
}"
518,DODGY_CODE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,FP,bcel,519,"created++;
","ConstantUtf8(final DataInput dataInput) throws IOException {
super(Const.CONSTANT_Utf8);
value = dataInput.readUTF();
created++;
}","ConstantUtf8(final DataInput dataInput) throws IOException {
super(Const.CONSTANT_Utf8);
value = dataInput.readUTF();
created++;
}"
519,MALICIOUS_CODE,EI_EXPOSE_REP2,FP,bcel,520,"this.bytes = bytes;
","public void setBytes(final byte[] bytes) {
this.bytes = bytes;
}","public void setBytes(final byte[] bytes) {
this.bytes = bytes;
}"
526,MALICIOUS_CODE,EI_EXPOSE_REP,FP,bcel,527,"return innerClasses;
","public InnerClass[] getInnerClasses() {
return innerClasses;
}","public InnerClass[] getInnerClasses() {
return innerClasses;
}"
532,MALICIOUS_CODE,EI_EXPOSE_REP,FP,bcel,533,"return attributes;
","public Attribute[] getAttributes() {
return attributes;
}","public Attribute[] getAttributes() {
return attributes;
}"
551,MALICIOUS_CODE,EI_EXPOSE_REP,FP,bcel,552,"return exportsTable;
","public ModuleExports[] getExportsTable() {
return exportsTable;
}","public ModuleExports[] getExportsTable() {
return exportsTable;
}"
556,MALICIOUS_CODE,EI_EXPOSE_REP,FP,bcel,557,"return classes;
","public int[] getClasses() {
return classes;
}","public int[] getClasses() {
return classes;
}"
560,MALICIOUS_CODE,EI_EXPOSE_REP,FP,bcel,561,"return parameterAnnotationTable;
","public final ParameterAnnotationEntry[] getParameterAnnotationTable() {
return parameterAnnotationTable;
}","public final ParameterAnnotationEntry[] getParameterAnnotationTable() {
return parameterAnnotationTable;
}"
564,I18N,DM_DEFAULT_ENCODING,FP,bcel,565,"return new String(buf);
","String getData() {
return new String(buf);
}","String getData() {
return new String(buf);
}"
565,MALICIOUS_CODE,EI_EXPOSE_REP,FP,bcel,566,"return map;
","public StackMapEntry[] getStackMap() {
return map;
}","public StackMapEntry[] getStackMap() {
return map;
}"
566,MALICIOUS_CODE,EI_EXPOSE_REP2,FP,bcel,567,"this.map = map;
","public void setStackMap(final StackMapEntry[] map) {
this.map = map;
int len = 2;
for (final StackMapEntry element : map) {
len += element.getMapEntrySize();
}
setLength(len);
}","public void setStackMap(final StackMapEntry[] map) {
this.map = map;
int intVar1 = intLiteral2;
for (final StackMapEntry stackmapentryVar3 : map) {
intVar1 += stackmapentryVar3.getMapEntrySize();
}
setLength(intVar1);
}"
575,MALICIOUS_CODE,EI_EXPOSE_REP,FP,bcel,576,"return bytes;
","public byte[] getBytes() {
return bytes;
}","public byte[] getBytes() {
return bytes;
}"
586,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,bcel,587,"final ConstantNameAndType n = (ConstantNameAndType) c;
","public int addConstant(final Constant c, final ConstantPoolGen cp) {
final Constant[] constants = cp.getConstantPool().getConstantPool();
switch(c.getTag()) {
case Const.CONSTANT_String:
{
final ConstantString s = (ConstantString) c;
final ConstantUtf8 u8 = (ConstantUtf8) constants[s.getStringIndex()];
return addString(u8.getBytes());
}
case Const.CONSTANT_Class:
{
final ConstantClass s = (ConstantClass) c;
final ConstantUtf8 u8 = (ConstantUtf8) constants[s.getNameIndex()];
return addClass(u8.getBytes());
}
case Const.CONSTANT_NameAndType:
{
final ConstantNameAndType n = (ConstantNameAndType) c;
final ConstantUtf8 u8 = (ConstantUtf8) constants[n.getNameIndex()];
final ConstantUtf8 u8_2 = (ConstantUtf8) constants[n.getSignatureIndex()];
return addNameAndType(u8.getBytes(), u8_2.getBytes());
}
case Const.CONSTANT_Utf8:
return addUtf8(((ConstantUtf8) c).getBytes());
case Const.CONSTANT_Double:
return addDouble(((ConstantDouble) c).getBytes());
case Const.CONSTANT_Float:
return addFloat(((ConstantFloat) c).getBytes());
case Const.CONSTANT_Long:
return addLong(((ConstantLong) c).getBytes());
case Const.CONSTANT_Integer:
return addInteger(((ConstantInteger) c).getBytes());
case Const.CONSTANT_InterfaceMethodref:
case Const.CONSTANT_Methodref:
case Const.CONSTANT_Fieldref:
{
final ConstantCP m = (ConstantCP) c;
final ConstantClass clazz = (ConstantClass) constants[m.getClassIndex()];
final ConstantNameAndType n = (ConstantNameAndType) constants[m.getNameAndTypeIndex()];
ConstantUtf8 u8 = (ConstantUtf8) constants[clazz.getNameIndex()];
final String class_name = u8.getBytes().replace('/', '.');
u8 = (ConstantUtf8) constants[n.getNameIndex()];
final String name = u8.getBytes();
u8 = (ConstantUtf8) constants[n.getSignatureIndex()];
final String signature = u8.getBytes();
switch(c.getTag()) {
case Const.CONSTANT_InterfaceMethodref:
return addInterfaceMethodref(class_name, name, signature);
case Const.CONSTANT_Methodref:
return addMethodref(class_name, name, signature);
case Const.CONSTANT_Fieldref:
return addFieldref(class_name, name, signature);
default:
// Never reached
throw new IllegalArgumentException(""Unknown constant type "" + c);
}
}
default:
// Never reached
throw new IllegalArgumentException(""Unknown constant type "" + c);
}
}","public int addConstant(final Constant c, final ConstantPoolGen cp) {
final Constant[] constantArrayVar1 = constantArrayLiteral2;
switch(c.getTag()) {
case Const.CONSTANT_String:
{
final ConstantString constantstringVar3 = constantstringLiteral4;
final ConstantUtf8 constantutf8Var5 = constantutf8Literal6;
return addString(constantutf8Var5.getBytes());
}
case Const.CONSTANT_Class:
{
final ConstantClass constantstringVar3 = constantclassLiteral7;
final ConstantUtf8 constantutf8Var5 = constantutf8Literal8;
return addClass(constantutf8Var5.getBytes());
}
case Const.CONSTANT_NameAndType:
{
final ConstantNameAndType constantnameandtypeVar9 = constantnameandtypeLiteral10;
final ConstantUtf8 constantutf8Var5 = constantutf8Literal11;
final ConstantUtf8 constantutf8Var12 = constantutf8Literal13;
return addNameAndType(constantutf8Var5.getBytes(), constantutf8Var12.getBytes());
}
case Const.CONSTANT_Utf8:
return addUtf8(((ConstantUtf8) c).getBytes());
case Const.CONSTANT_Double:
return addDouble(((ConstantDouble) c).getBytes());
case Const.CONSTANT_Float:
return addFloat(((ConstantFloat) c).getBytes());
case Const.CONSTANT_Long:
return addLong(((ConstantLong) c).getBytes());
case Const.CONSTANT_Integer:
return addInteger(((ConstantInteger) c).getBytes());
case Const.CONSTANT_InterfaceMethodref:
case Const.CONSTANT_Methodref:
case Const.CONSTANT_Fieldref:
{
final ConstantCP constantcpVar14 = constantcpLiteral15;
final ConstantClass constantclassVar16 = constantclassLiteral17;
final ConstantNameAndType constantnameandtypeVar9 = constantnameandtypeLiteral18;
ConstantUtf8 constantutf8Var5 = constantutf8Literal19;
final String stringVar20 = stringLiteral21;
constantutf8Var5 = (ConstantUtf8) constantArrayVar1[constantnameandtypeVar9.getNameIndex()];
final String stringVar22 = stringLiteral23;
constantutf8Var5 = (ConstantUtf8) constantArrayVar1[constantnameandtypeVar9.getSignatureIndex()];
final String stringVar24 = stringLiteral23;
switch(c.getTag()) {
case Const.CONSTANT_InterfaceMethodref:
return addInterfaceMethodref(stringVar20, stringVar22, stringVar24);
case Const.CONSTANT_Methodref:
return addMethodref(stringVar20, stringVar22, stringVar24);
case Const.CONSTANT_Fieldref:
return addFieldref(stringVar20, stringVar22, stringVar24);
default:
// Never reached
throw new IllegalArgumentException(""Unknown constant type "" + c);
}
}
default:
// Never reached
throw new IllegalArgumentException(""Unknown constant type "" + c);
}
}"
594,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,bcel,595,"return new EnumElementValueGen((EnumElementValue) value, cpool,
","public static ElementValueGen copy(final ElementValue value, final ConstantPoolGen cpool, final boolean copyPoolEntries) {
switch(value.getElementValueType()) {
case 'B':
case 'C':
case 'D':
case 'F':
case 'I':
case 'J':
case 'S':
case 'Z':
case 's':
return new SimpleElementValueGen((SimpleElementValue) value, cpool, copyPoolEntries);
case 'e':
return new EnumElementValueGen((EnumElementValue) value, cpool, copyPoolEntries);
case '@':
return new AnnotationElementValueGen((AnnotationElementValue) value, cpool, copyPoolEntries);
case '[':
return new ArrayElementValueGen((ArrayElementValue) value, cpool, copyPoolEntries);
case 'c':
return new ClassElementValueGen((ClassElementValue) value, cpool, copyPoolEntries);
default:
throw new UnsupportedOperationException(""Not implemented yet! ("" + value.getElementValueType() + "")"");
}
}","public static ElementValueGen copy(final ElementValue value, final ConstantPoolGen cpool, final boolean copyPoolEntries) {
switch(value.getElementValueType()) {
case 'B':
case 'C':
case 'D':
case 'F':
case 'I':
case 'J':
case 'S':
case 'Z':
case 's':
return new SimpleElementValueGen((SimpleElementValue) value, cpool, copyPoolEntries);
case 'e':
return new EnumElementValueGen((EnumElementValue) value, cpool, copyPoolEntries);
case '@':
return new AnnotationElementValueGen((AnnotationElementValue) value, cpool, copyPoolEntries);
case '[':
return new ArrayElementValueGen((ArrayElementValue) value, cpool, copyPoolEntries);
case 'c':
return new ClassElementValueGen((ClassElementValue) value, cpool, copyPoolEntries);
default:
throw new UnsupportedOperationException(""Not implemented yet! ("" + value.getElementValueType() + "")"");
}
}"
595,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,bcel,596,"return new ClassElementValueGen((ClassElementValue) value, cpool,
","public static ElementValueGen copy(final ElementValue value, final ConstantPoolGen cpool, final boolean copyPoolEntries) {
switch(value.getElementValueType()) {
case 'B':
case 'C':
case 'D':
case 'F':
case 'I':
case 'J':
case 'S':
case 'Z':
case 's':
return new SimpleElementValueGen((SimpleElementValue) value, cpool, copyPoolEntries);
case 'e':
return new EnumElementValueGen((EnumElementValue) value, cpool, copyPoolEntries);
case '@':
return new AnnotationElementValueGen((AnnotationElementValue) value, cpool, copyPoolEntries);
case '[':
return new ArrayElementValueGen((ArrayElementValue) value, cpool, copyPoolEntries);
case 'c':
return new ClassElementValueGen((ClassElementValue) value, cpool, copyPoolEntries);
default:
throw new UnsupportedOperationException(""Not implemented yet! ("" + value.getElementValueType() + "")"");
}
}","public static ElementValueGen copy(final ElementValue value, final ConstantPoolGen cpool, final boolean copyPoolEntries) {
switch(value.getElementValueType()) {
case 'B':
case 'C':
case 'D':
case 'F':
case 'I':
case 'J':
case 'S':
case 'Z':
case 's':
return new SimpleElementValueGen((SimpleElementValue) value, cpool, copyPoolEntries);
case 'e':
return new EnumElementValueGen((EnumElementValue) value, cpool, copyPoolEntries);
case '@':
return new AnnotationElementValueGen((AnnotationElementValue) value, cpool, copyPoolEntries);
case '[':
return new ArrayElementValueGen((ArrayElementValue) value, cpool, copyPoolEntries);
case 'c':
return new ClassElementValueGen((ClassElementValue) value, cpool, copyPoolEntries);
default:
throw new UnsupportedOperationException(""Not implemented yet! ("" + value.getElementValueType() + "")"");
}
}"
601,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,bcel,602,"return new CHECKCAST(cp.addClass(((ObjectType) dest_type).getClassName()));
","public Instruction createCast(final Type src_type, final Type dest_type) {
if ((src_type instanceof BasicType) && (dest_type instanceof BasicType)) {
final byte dest = dest_type.getType();
byte src = src_type.getType();
if (dest == Const.T_LONG && (src == Const.T_CHAR || src == Const.T_BYTE || src == Const.T_SHORT)) {
src = Const.T_INT;
}
final String name = ""org.apache.bcel.generic."" + short_names[src - Const.T_CHAR] + ""2"" + short_names[dest - Const.T_CHAR];
Instruction i = null;
try {
i = (Instruction) java.lang.Class.forName(name).newInstance();
} catch (final Exception e) {
throw new IllegalArgumentException(""Could not find instruction: "" + name, e);
}
return i;
} else if ((src_type instanceof ReferenceType) && (dest_type instanceof ReferenceType)) {
if (dest_type instanceof ArrayType) {
return new CHECKCAST(cp.addArrayClass((ArrayType) dest_type));
}
return new CHECKCAST(cp.addClass(((ObjectType) dest_type).getClassName()));
} else {
throw new IllegalArgumentException(""Cannot cast "" + src_type + "" to "" + dest_type);
}
}","public Instruction createCast(final Type src_type, final Type dest_type) {
if ((src_type instanceof BasicType) && (dest_type instanceof BasicType)) {
final byte byteVar1 = byteLiteral2;
byte byteVar3 = byteLiteral4;
if (byteVar1 == Const.T_LONG && (byteVar3 == Const.T_CHAR || byteVar3 == Const.T_BYTE || byteVar3 == Const.T_SHORT)) {
byteVar3 = Const.T_INT;
}
final String stringVar5 = stringLiteral6;
Instruction instructionVar7 = instructionLiteral8;
try {
instructionVar7 = (Instruction) java.lang.Class.forName(stringVar5).newInstance();
} catch (final Exception e) {
throw new IllegalArgumentException(""Could not find instruction: "" + stringVar5, e);
}
return instructionVar7;
} else if ((src_type instanceof ReferenceType) && (dest_type instanceof ReferenceType)) {
if (dest_type instanceof ArrayType) {
return new CHECKCAST(cp.addArrayClass((ArrayType) dest_type));
}
return new CHECKCAST(cp.addClass(((ObjectType) dest_type).getClassName()));
} else {
throw new IllegalArgumentException(""Cannot cast "" + src_type + "" to "" + dest_type);
}
}"
604,DODGY_CODE,SF_SWITCH_NO_DEFAULT,FP,bcel,605,"switch (i.getOpcode()) {
case Const.JSR:
case Const.GOTO:
max_additional_bytes += 2;
break;
case Const.TABLESWITCH:
case Const.LOOKUPSWITCH:
max_additional_bytes += 3;
","public void setPositions(final boolean check) {
int max_additional_bytes = 0;
int additional_bytes = 0;
int index = 0;
int count = 0;
final int[] pos = new int[length];
if (check) {
for (InstructionHandle ih = start; ih != null; ih = ih.getNext()) {
final Instruction i = ih.getInstruction();
if (i instanceof BranchInstruction) {
Instruction inst = ((BranchInstruction) i).getTarget().getInstruction();
if (!contains(inst)) {
throw new ClassGenException(""Branch target of "" + Const.getOpcodeName(i.getOpcode()) + "":"" + inst + "" not in instruction list"");
}
if (i instanceof Select) {
final InstructionHandle[] targets = ((Select) i).getTargets();
for (final InstructionHandle target : targets) {
inst = target.getInstruction();
if (!contains(inst)) {
throw new ClassGenException(""Branch target of "" + Const.getOpcodeName(i.getOpcode()) + "":"" + inst + "" not in instruction list"");
}
}
}
if (!(ih instanceof BranchHandle)) {
throw new ClassGenException(""Branch instruction "" + Const.getOpcodeName(i.getOpcode()) + "":"" + inst + "" not contained in BranchHandle."");
}
}
}
}
for (InstructionHandle ih = start; ih != null; ih = ih.getNext()) {
final Instruction i = ih.getInstruction();
ih.setPosition(index);
pos[count++] = index;
switch(i.getOpcode()) {
case Const.JSR:
case Const.GOTO:
max_additional_bytes += 2;
break;
case Const.TABLESWITCH:
case Const.LOOKUPSWITCH:
max_additional_bytes += 3;
break;
}
index += i.getLength();
}
for (InstructionHandle ih = start; ih != null; ih = ih.getNext()) {
additional_bytes += ih.updatePosition(additional_bytes, max_additional_bytes);
}
index = count = 0;
for (InstructionHandle ih = start; ih != null; ih = ih.getNext()) {
final Instruction i = ih.getInstruction();
ih.setPosition(index);
pos[count++] = index;
index += i.getLength();
}
bytePositions = new int[count];
System.arraycopy(pos, 0, bytePositions, 0, count);
}","public void setPositions(final boolean check) {
int intVar1 = intLiteral2;
int intVar3 = intLiteral2;
int intVar4 = intLiteral2;
int intVar5 = intLiteral2;
final int[] intArrayVar6 = intArrayLiteral7;
if (check) {
for (InstructionHandle instructionhandleVar17 = instructionhandleLiteral18; instructionhandleVar8 != intLiteral1; instructionhandleVar8 = instructionhandleVar8.getNext()) {
final Instruction instructionVar10 = instructionLiteral11;
if (instructionVar10 instanceof BranchInstruction) {
Instruction instructionVar12 = instructionLiteral13;
if (!contains(instructionVar12)) {
throw new ClassGenException(""Branch target of "" + Const.getOpcodeName(instructionVar10.getOpcode()) + "":"" + instructionVar12 + "" not in instruction list"");
}
if (instructionVar10 instanceof Select) {
final InstructionHandle[] instructionhandleArrayVar14 = instructionhandleArrayLiteral15;
for (final InstructionHandle instructionhandleVar16 : instructionhandleArrayVar14) {
instructionVar12 = instructionhandleVar16.getInstruction();
if (!contains(instructionVar12)) {
throw new ClassGenException(""Branch target of "" + Const.getOpcodeName(instructionVar10.getOpcode()) + "":"" + instructionVar12 + "" not in instruction list"");
}
}
}
if (!(instructionhandleVar8 instanceof BranchHandle)) {
throw new ClassGenException(""Branch instruction "" + Const.getOpcodeName(instructionVar10.getOpcode()) + "":"" + instructionVar12 + "" not contained in BranchHandle."");
}
}
}
}
for (InstructionHandle instructionhandleVar17 = instructionhandleLiteral18; instructionhandleVar8 != null; instructionhandleVar8 = instructionhandleVar8.getNext()) {
final Instruction instructionVar10 = instructionLiteral11;
instructionhandleVar8.setPosition(intVar4);
intArrayVar6[intVar5++] = intVar4;
switch(instructionVar10.getOpcode()) {
case Const.JSR:
case Const.GOTO:
intVar1 += 2;
break;
case Const.TABLESWITCH:
case Const.LOOKUPSWITCH:
intVar1 += 3;
break;
}
intVar4 += instructionVar10.getLength();
}
for (InstructionHandle instructionhandleVar17 = instructionhandleLiteral18; instructionhandleVar8 != null; instructionhandleVar8 = instructionhandleVar8.getNext()) {
intVar3 += instructionhandleVar8.updatePosition(intVar3, intVar1);
}
intVar4 = intVar5 = 0;
for (InstructionHandle instructionhandleVar17 = instructionhandleLiteral18; instructionhandleVar8 != null; instructionhandleVar8 = instructionhandleVar8.getNext()) {
final Instruction instructionVar10 = instructionLiteral11;
instructionhandleVar8.setPosition(intVar4);
intArrayVar6[intVar5++] = intVar4;
intVar4 += instructionVar10.getLength();
}
bytePositions = new int[intVar5];
System.arraycopy(intArrayVar6, 0, bytePositions, 0, intVar5);
}"
612,MALICIOUS_CODE,EI_EXPOSE_REP,FP,bcel,613,"return indices;
","public int[] getIndices() {
return indices;
}","public int[] getIndices() {
return indices;
}"
629,MALICIOUS_CODE,EI_EXPOSE_REP2,FP,bcel,630,"this.ignored_packages = ignored_packages;
","public ClassLoader(final String[] ignored_packages) {
this.ignored_packages = ignored_packages;
}","public ClassLoader(final String[] ignored_packages) {
this.ignored_packages = ignored_packages;
}"
635,DODGY_CODE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,FP,bcel,636,"wide = false; 
","private String codeToHTML(final ByteSequence bytes, final int method_number) throws IOException {
final short opcode = (short) bytes.readUnsignedByte();
String name;
String signature;
int default_offset = 0;
int low;
int high;
int index;
int class_index;
int vindex;
int constant;
int[] jump_table;
int no_pad_bytes = 0;
int offset;
final StringBuilder buf = new StringBuilder(256);
buf.append(""<TT>"").append(Const.getOpcodeName(opcode)).append(""</TT></TD><TD>"");
if ((opcode == Const.TABLESWITCH) || (opcode == Const.LOOKUPSWITCH)) {
final int remainder = bytes.getIndex() % 4;
no_pad_bytes = (remainder == 0) ? 0 : 4 - remainder;
for (int i = 0; i < no_pad_bytes; i++) {
bytes.readByte();
}
default_offset = bytes.readInt();
}
switch(opcode) {
case Const.TABLESWITCH:
low = bytes.readInt();
high = bytes.readInt();
offset = bytes.getIndex() - 12 - no_pad_bytes - 1;
default_offset += offset;
buf.append(""<TABLE BORDER=1><TR>"");
jump_table = new int[high - low + 1];
for (int i = 0; i < jump_table.length; i++) {
jump_table[i] = offset + bytes.readInt();
buf.append(""<TH>"").append(low + i).append(""</TH>"");
}
buf.append(""<TH>default</TH></TR>\n<TR>"");
for (final int element : jump_table) {
buf.append(""<TD><A HREF=\""#code"").append(method_number).append(""@"").append(element).append(""\"">"").append(element).append(""</A></TD>"");
}
buf.append(""<TD><A HREF=\""#code"").append(method_number).append(""@"").append(default_offset).append(""\"">"").append(default_offset).append(""</A></TD></TR>\n</TABLE>\n"");
break;
case Const.LOOKUPSWITCH:
final int npairs = bytes.readInt();
offset = bytes.getIndex() - 8 - no_pad_bytes - 1;
jump_table = new int[npairs];
default_offset += offset;
buf.append(""<TABLE BORDER=1><TR>"");
for (int i = 0; i < npairs; i++) {
final int match = bytes.readInt();
jump_table[i] = offset + bytes.readInt();
buf.append(""<TH>"").append(match).append(""</TH>"");
}
buf.append(""<TH>default</TH></TR>\n<TR>"");
for (int i = 0; i < npairs; i++) {
buf.append(""<TD><A HREF=\""#code"").append(method_number).append(""@"").append(jump_table[i]).append(""\"">"").append(jump_table[i]).append(""</A></TD>"");
}
buf.append(""<TD><A HREF=\""#code"").append(method_number).append(""@"").append(default_offset).append(""\"">"").append(default_offset).append(""</A></TD></TR>\n</TABLE>\n"");
break;
case Const.GOTO:
case Const.IFEQ:
case Const.IFGE:
case Const.IFGT:
case Const.IFLE:
case Const.IFLT:
case Const.IFNE:
case Const.IFNONNULL:
case Const.IFNULL:
case Const.IF_ACMPEQ:
case Const.IF_ACMPNE:
case Const.IF_ICMPEQ:
case Const.IF_ICMPGE:
case Const.IF_ICMPGT:
case Const.IF_ICMPLE:
case Const.IF_ICMPLT:
case Const.IF_ICMPNE:
case Const.JSR:
index = bytes.getIndex() + bytes.readShort() - 1;
buf.append(""<A HREF=\""#code"").append(method_number).append(""@"").append(index).append(""\"">"").append(index).append(""</A>"");
break;
case Const.GOTO_W:
case Const.JSR_W:
final int windex = bytes.getIndex() + bytes.readInt() - 1;
buf.append(""<A HREF=\""#code"").append(method_number).append(""@"").append(windex).append(""\"">"").append(windex).append(""</A>"");
break;
case Const.ALOAD:
case Const.ASTORE:
case Const.DLOAD:
case Const.DSTORE:
case Const.FLOAD:
case Const.FSTORE:
case Const.ILOAD:
case Const.ISTORE:
case Const.LLOAD:
case Const.LSTORE:
case Const.RET:
if (wide) {
vindex = bytes.readShort();
wide = false;
} else {
vindex = bytes.readUnsignedByte();
}
buf.append(""%"").append(vindex);
break;
case Const.WIDE:
wide = true;
buf.append(""(wide)"");
break;
case Const.NEWARRAY:
buf.append(""<FONT COLOR=\""#00FF00\"">"").append(Const.getTypeName(bytes.readByte())).append(""</FONT>"");
break;
case Const.GETFIELD:
case Const.GETSTATIC:
case Const.PUTFIELD:
case Const.PUTSTATIC:
index = bytes.readShort();
final ConstantFieldref c1 = (ConstantFieldref) constantPool.getConstant(index, Const.CONSTANT_Fieldref);
class_index = c1.getClassIndex();
name = constantPool.getConstantString(class_index, Const.CONSTANT_Class);
name = Utility.compactClassName(name, false);
index = c1.getNameAndTypeIndex();
final String field_name = constantPool.constantToString(index, Const.CONSTANT_NameAndType);
if (name.equals(className)) {
buf.append(""<A HREF=\"""").append(className).append(""_methods.html#field"").append(field_name).append(""\"" TARGET=Methods>"").append(field_name).append(""</A>\n"");
} else {
buf.append(constantHtml.referenceConstant(class_index)).append(""."").append(field_name);
}
break;
case Const.CHECKCAST:
case Const.INSTANCEOF:
case Const.NEW:
index = bytes.readShort();
buf.append(constantHtml.referenceConstant(index));
break;
case Const.INVOKESPECIAL:
case Const.INVOKESTATIC:
case Const.INVOKEVIRTUAL:
case Const.INVOKEINTERFACE:
case Const.INVOKEDYNAMIC:
final int m_index = bytes.readShort();
String str;
if (opcode == Const.INVOKEINTERFACE) {
bytes.readUnsignedByte();
bytes.readUnsignedByte();
final ConstantInterfaceMethodref c = (ConstantInterfaceMethodref) constantPool.getConstant(m_index, Const.CONSTANT_InterfaceMethodref);
class_index = c.getClassIndex();
index = c.getNameAndTypeIndex();
name = Class2HTML.referenceClass(class_index);
} else if (opcode == Const.INVOKEDYNAMIC) {
bytes.readUnsignedByte();
bytes.readUnsignedByte();
final ConstantInvokeDynamic c = (ConstantInvokeDynamic) constantPool.getConstant(m_index, Const.CONSTANT_InvokeDynamic);
index = c.getNameAndTypeIndex();
name = ""#"" + c.getBootstrapMethodAttrIndex();
} else {
// UNDONE: Java8 now allows INVOKESPECIAL and INVOKESTATIC to
final ConstantMethodref c = (ConstantMethodref) constantPool.getConstant(m_index, Const.CONSTANT_Methodref);
class_index = c.getClassIndex();
index = c.getNameAndTypeIndex();
name = Class2HTML.referenceClass(class_index);
}
str = Class2HTML.toHTML(constantPool.constantToString(constantPool.getConstant(index, Const.CONSTANT_NameAndType)));
final ConstantNameAndType c2 = (ConstantNameAndType) constantPool.getConstant(index, Const.CONSTANT_NameAndType);
signature = constantPool.constantToString(c2.getSignatureIndex(), Const.CONSTANT_Utf8);
final String[] args = Utility.methodSignatureArgumentTypes(signature, false);
final String type = Utility.methodSignatureReturnType(signature, false);
buf.append(name).append("".<A HREF=\"""").append(className).append(""_cp.html#cp"").append(m_index).append(""\"" TARGET=ConstantPool>"").append(str).append(""</A>"").append(""("");
for (int i = 0; i < args.length; i++) {
buf.append(Class2HTML.referenceType(args[i]));
if (i < args.length - 1) {
buf.append("", "");
}
}
buf.append(""):"").append(Class2HTML.referenceType(type));
break;
case Const.LDC_W:
case Const.LDC2_W:
index = bytes.readShort();
buf.append(""<A HREF=\"""").append(className).append(""_cp.html#cp"").append(index).append(""\"" TARGET=\""ConstantPool\"">"").append(Class2HTML.toHTML(constantPool.constantToString(index, constantPool.getConstant(index).getTag()))).append(""</a>"");
break;
case Const.LDC:
index = bytes.readUnsignedByte();
buf.append(""<A HREF=\"""").append(className).append(""_cp.html#cp"").append(index).append(""\"" TARGET=\""ConstantPool\"">"").append(Class2HTML.toHTML(constantPool.constantToString(index, constantPool.getConstant(index).getTag()))).append(""</a>"");
break;
case Const.ANEWARRAY:
index = bytes.readShort();
buf.append(constantHtml.referenceConstant(index));
break;
case Const.MULTIANEWARRAY:
index = bytes.readShort();
final int dimensions = bytes.readByte();
buf.append(constantHtml.referenceConstant(index)).append("":"").append(dimensions).append(""-dimensional"");
break;
case Const.IINC:
if (wide) {
vindex = bytes.readShort();
constant = bytes.readShort();
wide = false;
} else {
vindex = bytes.readUnsignedByte();
constant = bytes.readByte();
}
buf.append(""%"").append(vindex).append("" "").append(constant);
break;
default:
if (Const.getNoOfOperands(opcode) > 0) {
for (int i = 0; i < Const.getOperandTypeCount(opcode); i++) {
switch(Const.getOperandType(opcode, i)) {
case Const.T_BYTE:
buf.append(bytes.readUnsignedByte());
break;
case // Either branch or index
Const.T_SHORT:
buf.append(bytes.readShort());
break;
case Const.T_INT:
buf.append(bytes.readInt());
break;
default:
// Never reached
throw new IllegalStateException(""Unreachable default case reached! "" + Const.getOperandType(opcode, i));
}
buf.append(""&nbsp;"");
}
}
}
buf.append(""</TD>"");
return buf.toString();
}","private String codeToHTML(final ByteSequence bytes, final int method_number) throws IOException {
final short shortVar1 = shortLiteral2;
String stringVar3;
String stringVar4;
int intVar5 = intLiteral6;
int intVar7;
int intVar8;
int intVar9;
int intVar10;
int intVar11;
int intVar12;
int[] intArrayVar13;
int intVar14 = intLiteral6;
int intVar15;
final StringBuilder stringbuilderVar16 = stringbuilderLiteral17;
stringbuilderVar16.append(""<TT>"").append(Const.getOpcodeName(shortVar1)).append(""</TT></TD><TD>"");
if ((shortVar1 == Const.TABLESWITCH) || (shortVar1 == Const.LOOKUPSWITCH)) {
final int intVar18 = intLiteral19;
intVar14 = (intVar18 == 0) ? 0 : 4 - intVar18;
for (int intVar46 = intLiteral47; intVar20 < intLiteral1; intVar20++) {
bytes.readByte();
}
intVar5 = bytes.readInt();
}
switch(shortVar1) {
case Const.TABLESWITCH:
intVar7 = bytes.readInt();
intVar8 = bytes.readInt();
intVar15 = bytes.getIndex() - 12 - intVar14 - 1;
intVar5 += intVar15;
stringbuilderVar16.append(""<TABLE BORDER=1><TR>"");
intArrayVar13 = new int[intVar8 - intVar7 + 1];
for (int intVar46 = intLiteral47; intVar20 < intLiteral2; intVar20++) {
intArrayVar13[intVar20] = intVar15 + bytes.readInt();
stringbuilderVar16.append(""<TH>"").append(intVar7 + intVar20).append(""</TH>"");
}
stringbuilderVar16.append(""<TH>default</TH></TR>\n<TR>"");
for (final int intVar21 : intArrayVar13) {
stringbuilderVar16.append(""<TD><A HREF=\""#code"").append(method_number).append(""@"").append(intVar21).append(""\"">"").append(intVar21).append(""</A></TD>"");
}
stringbuilderVar16.append(""<TD><A HREF=\""#code"").append(method_number).append(""@"").append(intVar5).append(""\"">"").append(intVar5).append(""</A></TD></TR>\n</TABLE>\n"");
break;
case Const.LOOKUPSWITCH:
final int intVar22 = intLiteral23;
intVar15 = bytes.getIndex() - 8 - intVar14 - 1;
intArrayVar13 = new int[intVar22];
intVar5 += intVar15;
stringbuilderVar16.append(""<TABLE BORDER=1><TR>"");
for (int intVar46 = intLiteral47; intVar20 < intLiteral3; intVar20++) {
final int intVar24 = intLiteral23;
intArrayVar13[intVar20] = intVar15 + bytes.readInt();
stringbuilderVar16.append(""<TH>"").append(intVar24).append(""</TH>"");
}
stringbuilderVar16.append(""<TH>default</TH></TR>\n<TR>"");
for (int intVar46 = intLiteral47; intVar20 < intVar22; intVar20++) {
stringbuilderVar16.append(""<TD><A HREF=\""#code"").append(method_number).append(""@"").append(intArrayVar13[intVar20]).append(""\"">"").append(intArrayVar13[intVar20]).append(""</A></TD>"");
}
stringbuilderVar16.append(""<TD><A HREF=\""#code"").append(method_number).append(""@"").append(intVar5).append(""\"">"").append(intVar5).append(""</A></TD></TR>\n</TABLE>\n"");
break;
case Const.GOTO:
case Const.IFEQ:
case Const.IFGE:
case Const.IFGT:
case Const.IFLE:
case Const.IFLT:
case Const.IFNE:
case Const.IFNONNULL:
case Const.IFNULL:
case Const.IF_ACMPEQ:
case Const.IF_ACMPNE:
case Const.IF_ICMPEQ:
case Const.IF_ICMPGE:
case Const.IF_ICMPGT:
case Const.IF_ICMPLE:
case Const.IF_ICMPLT:
case Const.IF_ICMPNE:
case Const.JSR:
intVar9 = bytes.getIndex() + bytes.readShort() - 1;
stringbuilderVar16.append(""<A HREF=\""#code"").append(method_number).append(""@"").append(intVar9).append(""\"">"").append(intVar9).append(""</A>"");
break;
case Const.GOTO_W:
case Const.JSR_W:
final int intVar25 = intLiteral26;
stringbuilderVar16.append(""<A HREF=\""#code"").append(method_number).append(""@"").append(intVar25).append(""\"">"").append(intVar25).append(""</A>"");
break;
case Const.ALOAD:
case Const.ASTORE:
case Const.DLOAD:
case Const.DSTORE:
case Const.FLOAD:
case Const.FSTORE:
case Const.ILOAD:
case Const.ISTORE:
case Const.LLOAD:
case Const.LSTORE:
case Const.RET:
if (wide) {
intVar11 = bytes.readShort();
wide = false;
} else {
intVar11 = bytes.readUnsignedByte();
}
stringbuilderVar16.append(""%"").append(intVar11);
break;
case Const.WIDE:
wide = true;
stringbuilderVar16.append(""(wide)"");
break;
case Const.NEWARRAY:
stringbuilderVar16.append(""<FONT COLOR=\""#00FF00\"">"").append(Const.getTypeName(bytes.readByte())).append(""</FONT>"");
break;
case Const.GETFIELD:
case Const.GETSTATIC:
case Const.PUTFIELD:
case Const.PUTSTATIC:
intVar9 = bytes.readShort();
final ConstantFieldref constantfieldrefVar27 = constantfieldrefLiteral28;
intVar10 = constantfieldrefVar27.getClassIndex();
stringVar3 = constantPool.getConstantString(intVar10, Const.CONSTANT_Class);
stringVar3 = Utility.compactClassName(stringVar3, false);
intVar9 = constantfieldrefVar27.getNameAndTypeIndex();
final String stringVar29 = stringLiteral30;
if (stringVar3.equals(className)) {
stringbuilderVar16.append(""<A HREF=\"""").append(className).append(""_methods.html#field"").append(stringVar29).append(""\"" TARGET=Methods>"").append(stringVar29).append(""</A>\n"");
} else {
stringbuilderVar16.append(constantHtml.referenceConstant(intVar10)).append(""."").append(stringVar29);
}
break;
case Const.CHECKCAST:
case Const.INSTANCEOF:
case Const.NEW:
intVar9 = bytes.readShort();
stringbuilderVar16.append(constantHtml.referenceConstant(intVar9));
break;
case Const.INVOKESPECIAL:
case Const.INVOKESTATIC:
case Const.INVOKEVIRTUAL:
case Const.INVOKEINTERFACE:
case Const.INVOKEDYNAMIC:
final int intVar31 = intLiteral32;
String stringVar33;
if (shortVar1 == Const.INVOKEINTERFACE) {
bytes.readUnsignedByte();
bytes.readUnsignedByte();
final ConstantInterfaceMethodref constantinterfacemethodrefVar34 = constantinterfacemethodrefLiteral35;
intVar10 = constantinterfacemethodrefVar34.getClassIndex();
intVar9 = constantinterfacemethodrefVar34.getNameAndTypeIndex();
stringVar3 = Class2HTML.referenceClass(intVar10);
} else if (shortVar1 == Const.INVOKEDYNAMIC) {
bytes.readUnsignedByte();
bytes.readUnsignedByte();
final ConstantInvokeDynamic constantinterfacemethodrefVar34 = constantinvokedynamicLiteral36;
intVar9 = constantinterfacemethodrefVar34.getNameAndTypeIndex();
stringVar3 = ""#"" + constantinterfacemethodrefVar34.getBootstrapMethodAttrIndex();
} else {
// UNDONE: Java8 now allows INVOKESPECIAL and INVOKESTATIC to
final ConstantMethodref constantinterfacemethodrefVar34 = constantmethodrefLiteral37;
intVar10 = constantinterfacemethodrefVar34.getClassIndex();
intVar9 = constantinterfacemethodrefVar34.getNameAndTypeIndex();
stringVar3 = Class2HTML.referenceClass(intVar10);
}
stringVar33 = Class2HTML.toHTML(constantPool.constantToString(constantPool.getConstant(intVar9, Const.CONSTANT_NameAndType)));
final ConstantNameAndType constantnameandtypeVar38 = constantnameandtypeLiteral39;
stringVar4 = constantPool.constantToString(constantnameandtypeVar38.getSignatureIndex(), Const.CONSTANT_Utf8);
final String[] stringArrayVar40 = stringArrayLiteral41;
final String stringVar42 = stringLiteral43;
stringbuilderVar16.append(stringVar3).append("".<A HREF=\"""").append(className).append(""_cp.html#cp"").append(intVar31).append(""\"" TARGET=ConstantPool>"").append(stringVar33).append(""</A>"").append(""("");
for (int intVar46 = intLiteral47; intVar20 < intLiteral4; intVar20++) {
stringbuilderVar16.append(Class2HTML.referenceType(stringArrayVar40[intVar20]));
if (intVar20 < stringArrayVar40.length - 1) {
stringbuilderVar16.append("", "");
}
}
stringbuilderVar16.append(""):"").append(Class2HTML.referenceType(stringVar42));
break;
case Const.LDC_W:
case Const.LDC2_W:
intVar9 = bytes.readShort();
stringbuilderVar16.append(""<A HREF=\"""").append(className).append(""_cp.html#cp"").append(intVar9).append(""\"" TARGET=\""ConstantPool\"">"").append(Class2HTML.toHTML(constantPool.constantToString(intVar9, constantPool.getConstant(intVar9).getTag()))).append(""</a>"");
break;
case Const.LDC:
intVar9 = bytes.readUnsignedByte();
stringbuilderVar16.append(""<A HREF=\"""").append(className).append(""_cp.html#cp"").append(intVar9).append(""\"" TARGET=\""ConstantPool\"">"").append(Class2HTML.toHTML(constantPool.constantToString(intVar9, constantPool.getConstant(intVar9).getTag()))).append(""</a>"");
break;
case Const.ANEWARRAY:
intVar9 = bytes.readShort();
stringbuilderVar16.append(constantHtml.referenceConstant(intVar9));
break;
case Const.MULTIANEWARRAY:
intVar9 = bytes.readShort();
final int intVar44 = intLiteral45;
stringbuilderVar16.append(constantHtml.referenceConstant(intVar9)).append("":"").append(intVar44).append(""-dimensional"");
break;
case Const.IINC:
if (wide) {
intVar11 = bytes.readShort();
intVar12 = bytes.readShort();
wide = false;
} else {
intVar11 = bytes.readUnsignedByte();
intVar12 = bytes.readByte();
}
stringbuilderVar16.append(""%"").append(intVar11).append("" "").append(intVar12);
break;
default:
if (Const.getNoOfOperands(shortVar1) > 0) {
for (int intVar46 = intLiteral47; intVar20 < intLiteral5; intVar20++) {
switch(Const.getOperandType(shortVar1, intVar20)) {
case Const.T_BYTE:
stringbuilderVar16.append(bytes.readUnsignedByte());
break;
case // Either branch or index
Const.T_SHORT:
stringbuilderVar16.append(bytes.readShort());
break;
case Const.T_INT:
stringbuilderVar16.append(bytes.readInt());
break;
default:
// Never reached
throw new IllegalStateException(""Unreachable default case reached! "" + Const.getOperandType(shortVar1, intVar20));
}
stringbuilderVar16.append(""&nbsp;"");
}
}
}
stringbuilderVar16.append(""</TD>"");
return stringbuilderVar16.toString();
}"
636,I18N,DM_DEFAULT_ENCODING,FP,bcel,637,"file = new PrintWriter(new FileOutputStream(dir + class_name + ""_code.html""));
","CodeHTML(final String dir, final String class_name, final Method[] methods, final ConstantPool constant_pool, final ConstantHTML constant_html) throws IOException {
this.className = class_name;
this.constantPool = constant_pool;
this.constantHtml = constant_html;
file = new PrintWriter(new FileOutputStream(dir + class_name + ""_code.html""));
file.println(""<HTML><BODY BGCOLOR=\""#C0C0C0\"">"");
for (int i = 0; i < methods.length; i++) {
writeMethod(methods[i], i);
}
file.println(""</BODY></HTML>"");
file.close();
}","CodeHTML(final String dir, final String class_name, final Method[] methods, final ConstantPool constant_pool, final ConstantHTML constant_html) throws IOException {
this.className = class_name;
this.constantPool = constant_pool;
this.constantHtml = constant_html;
file = new PrintWriter(new FileOutputStream(dir + class_name + ""_code.html""));
file.println(""<HTML><BODY BGCOLOR=\""#C0C0C0\"">"");
for (int intVar3 = intLiteral4; intVar1 < intLiteral1; intVar1++) {
writeMethod(methods[intVar1], intVar1);
}
file.println(""</BODY></HTML>"");
file.close();
}"
637,DODGY_CODE,DB_DUPLICATE_SWITCH_CLAUSES,FP,bcel,638,"index = bytes.readShort();
buf.append(constantHtml.referenceConstant(index));
break;
","private String codeToHTML(final ByteSequence bytes, final int method_number) throws IOException {
final short opcode = (short) bytes.readUnsignedByte();
String name;
String signature;
int default_offset = 0;
int low;
int high;
int index;
int class_index;
int vindex;
int constant;
int[] jump_table;
int no_pad_bytes = 0;
int offset;
final StringBuilder buf = new StringBuilder(256);
buf.append(""<TT>"").append(Const.getOpcodeName(opcode)).append(""</TT></TD><TD>"");
if ((opcode == Const.TABLESWITCH) || (opcode == Const.LOOKUPSWITCH)) {
final int remainder = bytes.getIndex() % 4;
no_pad_bytes = (remainder == 0) ? 0 : 4 - remainder;
for (int i = 0; i < no_pad_bytes; i++) {
bytes.readByte();
}
default_offset = bytes.readInt();
}
switch(opcode) {
case Const.TABLESWITCH:
low = bytes.readInt();
high = bytes.readInt();
offset = bytes.getIndex() - 12 - no_pad_bytes - 1;
default_offset += offset;
buf.append(""<TABLE BORDER=1><TR>"");
jump_table = new int[high - low + 1];
for (int i = 0; i < jump_table.length; i++) {
jump_table[i] = offset + bytes.readInt();
buf.append(""<TH>"").append(low + i).append(""</TH>"");
}
buf.append(""<TH>default</TH></TR>\n<TR>"");
for (final int element : jump_table) {
buf.append(""<TD><A HREF=\""#code"").append(method_number).append(""@"").append(element).append(""\"">"").append(element).append(""</A></TD>"");
}
buf.append(""<TD><A HREF=\""#code"").append(method_number).append(""@"").append(default_offset).append(""\"">"").append(default_offset).append(""</A></TD></TR>\n</TABLE>\n"");
break;
case Const.LOOKUPSWITCH:
final int npairs = bytes.readInt();
offset = bytes.getIndex() - 8 - no_pad_bytes - 1;
jump_table = new int[npairs];
default_offset += offset;
buf.append(""<TABLE BORDER=1><TR>"");
for (int i = 0; i < npairs; i++) {
final int match = bytes.readInt();
jump_table[i] = offset + bytes.readInt();
buf.append(""<TH>"").append(match).append(""</TH>"");
}
buf.append(""<TH>default</TH></TR>\n<TR>"");
for (int i = 0; i < npairs; i++) {
buf.append(""<TD><A HREF=\""#code"").append(method_number).append(""@"").append(jump_table[i]).append(""\"">"").append(jump_table[i]).append(""</A></TD>"");
}
buf.append(""<TD><A HREF=\""#code"").append(method_number).append(""@"").append(default_offset).append(""\"">"").append(default_offset).append(""</A></TD></TR>\n</TABLE>\n"");
break;
case Const.GOTO:
case Const.IFEQ:
case Const.IFGE:
case Const.IFGT:
case Const.IFLE:
case Const.IFLT:
case Const.IFNE:
case Const.IFNONNULL:
case Const.IFNULL:
case Const.IF_ACMPEQ:
case Const.IF_ACMPNE:
case Const.IF_ICMPEQ:
case Const.IF_ICMPGE:
case Const.IF_ICMPGT:
case Const.IF_ICMPLE:
case Const.IF_ICMPLT:
case Const.IF_ICMPNE:
case Const.JSR:
index = bytes.getIndex() + bytes.readShort() - 1;
buf.append(""<A HREF=\""#code"").append(method_number).append(""@"").append(index).append(""\"">"").append(index).append(""</A>"");
break;
case Const.GOTO_W:
case Const.JSR_W:
final int windex = bytes.getIndex() + bytes.readInt() - 1;
buf.append(""<A HREF=\""#code"").append(method_number).append(""@"").append(windex).append(""\"">"").append(windex).append(""</A>"");
break;
case Const.ALOAD:
case Const.ASTORE:
case Const.DLOAD:
case Const.DSTORE:
case Const.FLOAD:
case Const.FSTORE:
case Const.ILOAD:
case Const.ISTORE:
case Const.LLOAD:
case Const.LSTORE:
case Const.RET:
if (wide) {
vindex = bytes.readShort();
wide = false;
} else {
vindex = bytes.readUnsignedByte();
}
buf.append(""%"").append(vindex);
break;
case Const.WIDE:
wide = true;
buf.append(""(wide)"");
break;
case Const.NEWARRAY:
buf.append(""<FONT COLOR=\""#00FF00\"">"").append(Const.getTypeName(bytes.readByte())).append(""</FONT>"");
break;
case Const.GETFIELD:
case Const.GETSTATIC:
case Const.PUTFIELD:
case Const.PUTSTATIC:
index = bytes.readShort();
final ConstantFieldref c1 = (ConstantFieldref) constantPool.getConstant(index, Const.CONSTANT_Fieldref);
class_index = c1.getClassIndex();
name = constantPool.getConstantString(class_index, Const.CONSTANT_Class);
name = Utility.compactClassName(name, false);
index = c1.getNameAndTypeIndex();
final String field_name = constantPool.constantToString(index, Const.CONSTANT_NameAndType);
if (name.equals(className)) {
buf.append(""<A HREF=\"""").append(className).append(""_methods.html#field"").append(field_name).append(""\"" TARGET=Methods>"").append(field_name).append(""</A>\n"");
} else {
buf.append(constantHtml.referenceConstant(class_index)).append(""."").append(field_name);
}
break;
case Const.CHECKCAST:
case Const.INSTANCEOF:
case Const.NEW:
index = bytes.readShort();
buf.append(constantHtml.referenceConstant(index));
break;
case Const.INVOKESPECIAL:
case Const.INVOKESTATIC:
case Const.INVOKEVIRTUAL:
case Const.INVOKEINTERFACE:
case Const.INVOKEDYNAMIC:
final int m_index = bytes.readShort();
String str;
if (opcode == Const.INVOKEINTERFACE) {
bytes.readUnsignedByte();
bytes.readUnsignedByte();
final ConstantInterfaceMethodref c = (ConstantInterfaceMethodref) constantPool.getConstant(m_index, Const.CONSTANT_InterfaceMethodref);
class_index = c.getClassIndex();
index = c.getNameAndTypeIndex();
name = Class2HTML.referenceClass(class_index);
} else if (opcode == Const.INVOKEDYNAMIC) {
bytes.readUnsignedByte();
bytes.readUnsignedByte();
final ConstantInvokeDynamic c = (ConstantInvokeDynamic) constantPool.getConstant(m_index, Const.CONSTANT_InvokeDynamic);
index = c.getNameAndTypeIndex();
name = ""#"" + c.getBootstrapMethodAttrIndex();
} else {
// UNDONE: Java8 now allows INVOKESPECIAL and INVOKESTATIC to
final ConstantMethodref c = (ConstantMethodref) constantPool.getConstant(m_index, Const.CONSTANT_Methodref);
class_index = c.getClassIndex();
index = c.getNameAndTypeIndex();
name = Class2HTML.referenceClass(class_index);
}
str = Class2HTML.toHTML(constantPool.constantToString(constantPool.getConstant(index, Const.CONSTANT_NameAndType)));
final ConstantNameAndType c2 = (ConstantNameAndType) constantPool.getConstant(index, Const.CONSTANT_NameAndType);
signature = constantPool.constantToString(c2.getSignatureIndex(), Const.CONSTANT_Utf8);
final String[] args = Utility.methodSignatureArgumentTypes(signature, false);
final String type = Utility.methodSignatureReturnType(signature, false);
buf.append(name).append("".<A HREF=\"""").append(className).append(""_cp.html#cp"").append(m_index).append(""\"" TARGET=ConstantPool>"").append(str).append(""</A>"").append(""("");
for (int i = 0; i < args.length; i++) {
buf.append(Class2HTML.referenceType(args[i]));
if (i < args.length - 1) {
buf.append("", "");
}
}
buf.append(""):"").append(Class2HTML.referenceType(type));
break;
case Const.LDC_W:
case Const.LDC2_W:
index = bytes.readShort();
buf.append(""<A HREF=\"""").append(className).append(""_cp.html#cp"").append(index).append(""\"" TARGET=\""ConstantPool\"">"").append(Class2HTML.toHTML(constantPool.constantToString(index, constantPool.getConstant(index).getTag()))).append(""</a>"");
break;
case Const.LDC:
index = bytes.readUnsignedByte();
buf.append(""<A HREF=\"""").append(className).append(""_cp.html#cp"").append(index).append(""\"" TARGET=\""ConstantPool\"">"").append(Class2HTML.toHTML(constantPool.constantToString(index, constantPool.getConstant(index).getTag()))).append(""</a>"");
break;
case Const.ANEWARRAY:
index = bytes.readShort();
buf.append(constantHtml.referenceConstant(index));
break;
case Const.MULTIANEWARRAY:
index = bytes.readShort();
final int dimensions = bytes.readByte();
buf.append(constantHtml.referenceConstant(index)).append("":"").append(dimensions).append(""-dimensional"");
break;
case Const.IINC:
if (wide) {
vindex = bytes.readShort();
constant = bytes.readShort();
wide = false;
} else {
vindex = bytes.readUnsignedByte();
constant = bytes.readByte();
}
buf.append(""%"").append(vindex).append("" "").append(constant);
break;
default:
if (Const.getNoOfOperands(opcode) > 0) {
for (int i = 0; i < Const.getOperandTypeCount(opcode); i++) {
switch(Const.getOperandType(opcode, i)) {
case Const.T_BYTE:
buf.append(bytes.readUnsignedByte());
break;
case // Either branch or index
Const.T_SHORT:
buf.append(bytes.readShort());
break;
case Const.T_INT:
buf.append(bytes.readInt());
break;
default:
// Never reached
throw new IllegalStateException(""Unreachable default case reached! "" + Const.getOperandType(opcode, i));
}
buf.append(""&nbsp;"");
}
}
}
buf.append(""</TD>"");
return buf.toString();
}","private String codeToHTML(final ByteSequence bytes, final int method_number) throws IOException {
final short shortVar1 = shortLiteral2;
String stringVar3;
String stringVar4;
int intVar5 = intLiteral6;
int intVar7;
int intVar8;
int intVar9;
int intVar10;
int intVar11;
int intVar12;
int[] intArrayVar13;
int intVar14 = intLiteral6;
int intVar15;
final StringBuilder stringbuilderVar16 = stringbuilderLiteral17;
stringbuilderVar16.append(""<TT>"").append(Const.getOpcodeName(shortVar1)).append(""</TT></TD><TD>"");
if ((shortVar1 == Const.TABLESWITCH) || (shortVar1 == Const.LOOKUPSWITCH)) {
final int intVar18 = intLiteral19;
intVar14 = (intVar18 == 0) ? 0 : 4 - intVar18;
for (int intVar46 = intLiteral47; intVar20 < intLiteral1; intVar20++) {
bytes.readByte();
}
intVar5 = bytes.readInt();
}
switch(shortVar1) {
case Const.TABLESWITCH:
intVar7 = bytes.readInt();
intVar8 = bytes.readInt();
intVar15 = bytes.getIndex() - 12 - intVar14 - 1;
intVar5 += intVar15;
stringbuilderVar16.append(""<TABLE BORDER=1><TR>"");
intArrayVar13 = new int[intVar8 - intVar7 + 1];
for (int intVar46 = intLiteral47; intVar20 < intLiteral2; intVar20++) {
intArrayVar13[intVar20] = intVar15 + bytes.readInt();
stringbuilderVar16.append(""<TH>"").append(intVar7 + intVar20).append(""</TH>"");
}
stringbuilderVar16.append(""<TH>default</TH></TR>\n<TR>"");
for (final int intVar21 : intArrayVar13) {
stringbuilderVar16.append(""<TD><A HREF=\""#code"").append(method_number).append(""@"").append(intVar21).append(""\"">"").append(intVar21).append(""</A></TD>"");
}
stringbuilderVar16.append(""<TD><A HREF=\""#code"").append(method_number).append(""@"").append(intVar5).append(""\"">"").append(intVar5).append(""</A></TD></TR>\n</TABLE>\n"");
break;
case Const.LOOKUPSWITCH:
final int intVar22 = intLiteral23;
intVar15 = bytes.getIndex() - 8 - intVar14 - 1;
intArrayVar13 = new int[intVar22];
intVar5 += intVar15;
stringbuilderVar16.append(""<TABLE BORDER=1><TR>"");
for (int intVar46 = intLiteral47; intVar20 < intLiteral3; intVar20++) {
final int intVar24 = intLiteral23;
intArrayVar13[intVar20] = intVar15 + bytes.readInt();
stringbuilderVar16.append(""<TH>"").append(intVar24).append(""</TH>"");
}
stringbuilderVar16.append(""<TH>default</TH></TR>\n<TR>"");
for (int intVar46 = intLiteral47; intVar20 < intVar22; intVar20++) {
stringbuilderVar16.append(""<TD><A HREF=\""#code"").append(method_number).append(""@"").append(intArrayVar13[intVar20]).append(""\"">"").append(intArrayVar13[intVar20]).append(""</A></TD>"");
}
stringbuilderVar16.append(""<TD><A HREF=\""#code"").append(method_number).append(""@"").append(intVar5).append(""\"">"").append(intVar5).append(""</A></TD></TR>\n</TABLE>\n"");
break;
case Const.GOTO:
case Const.IFEQ:
case Const.IFGE:
case Const.IFGT:
case Const.IFLE:
case Const.IFLT:
case Const.IFNE:
case Const.IFNONNULL:
case Const.IFNULL:
case Const.IF_ACMPEQ:
case Const.IF_ACMPNE:
case Const.IF_ICMPEQ:
case Const.IF_ICMPGE:
case Const.IF_ICMPGT:
case Const.IF_ICMPLE:
case Const.IF_ICMPLT:
case Const.IF_ICMPNE:
case Const.JSR:
intVar9 = bytes.getIndex() + bytes.readShort() - 1;
stringbuilderVar16.append(""<A HREF=\""#code"").append(method_number).append(""@"").append(intVar9).append(""\"">"").append(intVar9).append(""</A>"");
break;
case Const.GOTO_W:
case Const.JSR_W:
final int intVar25 = intLiteral26;
stringbuilderVar16.append(""<A HREF=\""#code"").append(method_number).append(""@"").append(intVar25).append(""\"">"").append(intVar25).append(""</A>"");
break;
case Const.ALOAD:
case Const.ASTORE:
case Const.DLOAD:
case Const.DSTORE:
case Const.FLOAD:
case Const.FSTORE:
case Const.ILOAD:
case Const.ISTORE:
case Const.LLOAD:
case Const.LSTORE:
case Const.RET:
if (wide) {
intVar11 = bytes.readShort();
wide = false;
} else {
intVar11 = bytes.readUnsignedByte();
}
stringbuilderVar16.append(""%"").append(intVar11);
break;
case Const.WIDE:
wide = true;
stringbuilderVar16.append(""(wide)"");
break;
case Const.NEWARRAY:
stringbuilderVar16.append(""<FONT COLOR=\""#00FF00\"">"").append(Const.getTypeName(bytes.readByte())).append(""</FONT>"");
break;
case Const.GETFIELD:
case Const.GETSTATIC:
case Const.PUTFIELD:
case Const.PUTSTATIC:
intVar9 = bytes.readShort();
final ConstantFieldref constantfieldrefVar27 = constantfieldrefLiteral28;
intVar10 = constantfieldrefVar27.getClassIndex();
stringVar3 = constantPool.getConstantString(intVar10, Const.CONSTANT_Class);
stringVar3 = Utility.compactClassName(stringVar3, false);
intVar9 = constantfieldrefVar27.getNameAndTypeIndex();
final String stringVar29 = stringLiteral30;
if (stringVar3.equals(className)) {
stringbuilderVar16.append(""<A HREF=\"""").append(className).append(""_methods.html#field"").append(stringVar29).append(""\"" TARGET=Methods>"").append(stringVar29).append(""</A>\n"");
} else {
stringbuilderVar16.append(constantHtml.referenceConstant(intVar10)).append(""."").append(stringVar29);
}
break;
case Const.CHECKCAST:
case Const.INSTANCEOF:
case Const.NEW:
intVar9 = bytes.readShort();
stringbuilderVar16.append(constantHtml.referenceConstant(intVar9));
break;
case Const.INVOKESPECIAL:
case Const.INVOKESTATIC:
case Const.INVOKEVIRTUAL:
case Const.INVOKEINTERFACE:
case Const.INVOKEDYNAMIC:
final int intVar31 = intLiteral32;
String stringVar33;
if (shortVar1 == Const.INVOKEINTERFACE) {
bytes.readUnsignedByte();
bytes.readUnsignedByte();
final ConstantInterfaceMethodref constantinterfacemethodrefVar34 = constantinterfacemethodrefLiteral35;
intVar10 = constantinterfacemethodrefVar34.getClassIndex();
intVar9 = constantinterfacemethodrefVar34.getNameAndTypeIndex();
stringVar3 = Class2HTML.referenceClass(intVar10);
} else if (shortVar1 == Const.INVOKEDYNAMIC) {
bytes.readUnsignedByte();
bytes.readUnsignedByte();
final ConstantInvokeDynamic constantinterfacemethodrefVar34 = constantinvokedynamicLiteral36;
intVar9 = constantinterfacemethodrefVar34.getNameAndTypeIndex();
stringVar3 = ""#"" + constantinterfacemethodrefVar34.getBootstrapMethodAttrIndex();
} else {
// UNDONE: Java8 now allows INVOKESPECIAL and INVOKESTATIC to
final ConstantMethodref constantinterfacemethodrefVar34 = constantmethodrefLiteral37;
intVar10 = constantinterfacemethodrefVar34.getClassIndex();
intVar9 = constantinterfacemethodrefVar34.getNameAndTypeIndex();
stringVar3 = Class2HTML.referenceClass(intVar10);
}
stringVar33 = Class2HTML.toHTML(constantPool.constantToString(constantPool.getConstant(intVar9, Const.CONSTANT_NameAndType)));
final ConstantNameAndType constantnameandtypeVar38 = constantnameandtypeLiteral39;
stringVar4 = constantPool.constantToString(constantnameandtypeVar38.getSignatureIndex(), Const.CONSTANT_Utf8);
final String[] stringArrayVar40 = stringArrayLiteral41;
final String stringVar42 = stringLiteral43;
stringbuilderVar16.append(stringVar3).append("".<A HREF=\"""").append(className).append(""_cp.html#cp"").append(intVar31).append(""\"" TARGET=ConstantPool>"").append(stringVar33).append(""</A>"").append(""("");
for (int intVar46 = intLiteral47; intVar20 < intLiteral4; intVar20++) {
stringbuilderVar16.append(Class2HTML.referenceType(stringArrayVar40[intVar20]));
if (intVar20 < stringArrayVar40.length - 1) {
stringbuilderVar16.append("", "");
}
}
stringbuilderVar16.append(""):"").append(Class2HTML.referenceType(stringVar42));
break;
case Const.LDC_W:
case Const.LDC2_W:
intVar9 = bytes.readShort();
stringbuilderVar16.append(""<A HREF=\"""").append(className).append(""_cp.html#cp"").append(intVar9).append(""\"" TARGET=\""ConstantPool\"">"").append(Class2HTML.toHTML(constantPool.constantToString(intVar9, constantPool.getConstant(intVar9).getTag()))).append(""</a>"");
break;
case Const.LDC:
intVar9 = bytes.readUnsignedByte();
stringbuilderVar16.append(""<A HREF=\"""").append(className).append(""_cp.html#cp"").append(intVar9).append(""\"" TARGET=\""ConstantPool\"">"").append(Class2HTML.toHTML(constantPool.constantToString(intVar9, constantPool.getConstant(intVar9).getTag()))).append(""</a>"");
break;
case Const.ANEWARRAY:
intVar9 = bytes.readShort();
stringbuilderVar16.append(constantHtml.referenceConstant(intVar9));
break;
case Const.MULTIANEWARRAY:
intVar9 = bytes.readShort();
final int intVar44 = intLiteral45;
stringbuilderVar16.append(constantHtml.referenceConstant(intVar9)).append("":"").append(intVar44).append(""-dimensional"");
break;
case Const.IINC:
if (wide) {
intVar11 = bytes.readShort();
intVar12 = bytes.readShort();
wide = false;
} else {
intVar11 = bytes.readUnsignedByte();
intVar12 = bytes.readByte();
}
stringbuilderVar16.append(""%"").append(intVar11).append("" "").append(intVar12);
break;
default:
if (Const.getNoOfOperands(shortVar1) > 0) {
for (int intVar46 = intLiteral47; intVar20 < intLiteral5; intVar20++) {
switch(Const.getOperandType(shortVar1, intVar20)) {
case Const.T_BYTE:
stringbuilderVar16.append(bytes.readUnsignedByte());
break;
case // Either branch or index
Const.T_SHORT:
stringbuilderVar16.append(bytes.readShort());
break;
case Const.T_INT:
stringbuilderVar16.append(bytes.readInt());
break;
default:
// Never reached
throw new IllegalStateException(""Unreachable default case reached! "" + Const.getOperandType(shortVar1, intVar20));
}
stringbuilderVar16.append(""&nbsp;"");
}
}
}
stringbuilderVar16.append(""</TD>"");
return stringbuilderVar16.toString();
}"
642,BAD_PRACTICE,ISC_INSTANTIATE_STATIC_CLASS,FP,bcel,643,"new GraphicalVerifier();
","public static void main(final String[] args) {
try {
UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
} catch (final Exception e) {
e.printStackTrace();
}
new GraphicalVerifier();
}","public static void main(final String[] args) {
try {
UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
} catch (final Exception e) {
e.printStackTrace();
}
new GraphicalVerifier();
}"
652,DODGY_CODE,UCF_USELESS_CONTROL_FLOW,FP,bcel,653,"objreftype.subclassOf(curr) ) ) {
","@Override
public void visitGETFIELD(final GETFIELD o) {
try {
final Type objectref = stack().peek();
if (!((objectref instanceof ObjectType) || (objectref == Type.NULL))) {
constraintViolated(o, ""Stack top should be an object reference that's not an array reference, but is '"" + objectref + ""'."");
}
final String field_name = o.getFieldName(cpg);
final JavaClass jc = Repository.lookupClass(getObjectType(o).getClassName());
Field[] fields = jc.getFields();
Field f = null;
for (final Field field : fields) {
if (field.getName().equals(field_name)) {
final Type f_type = Type.getType(field.getSignature());
final Type o_type = o.getType(cpg);
if (f_type.equals(o_type)) {
f = field;
break;
}
}
}
if (f == null) {
final JavaClass[] superclasses = jc.getSuperClasses();
outer: for (final JavaClass superclass : superclasses) {
fields = superclass.getFields();
for (final Field field : fields) {
if (field.getName().equals(field_name)) {
final Type f_type = Type.getType(field.getSignature());
final Type o_type = o.getType(cpg);
if (f_type.equals(o_type)) {
f = field;
if ((f.getAccessFlags() & (Const.ACC_PUBLIC | Const.ACC_PROTECTED)) == 0) {
f = null;
}
break outer;
}
}
}
}
if (f == null) {
throw new AssertionViolatedException(""Field '"" + field_name + ""' not found in "" + jc.getClassName());
}
}
if (f.isProtected()) {
final ObjectType classtype = getObjectType(o);
final ObjectType curr = ObjectType.getInstance(mg.getClassName());
if (classtype.equals(curr) || curr.subclassOf(classtype)) {
final Type t = stack().peek();
if (t == Type.NULL) {
return;
}
if (!(t instanceof ObjectType)) {
constraintViolated(o, ""The 'objectref' must refer to an object that's not an array. Found instead: '"" + t + ""'."");
}
final ObjectType objreftype = (ObjectType) t;
if (!(objreftype.equals(curr) || objreftype.subclassOf(curr))) {
// TODO: One day move to Staerk-et-al's ""Set of object types"" instead of ""wider"" object types
}
}
}
// TODO: Could go into Pass 3a.
if (f.isStatic()) {
constraintViolated(o, ""Referenced field '"" + f + ""' is static which it shouldn't be."");
}
} catch (final ClassNotFoundException e) {
// FIXME: maybe not the best way to handle this
throw new AssertionViolatedException(""Missing class: "" + e, e);
}
}","@Override
public void visitGETFIELD(final GETFIELD o) {
try {
final Type typeVar1 = typeLiteral2;
if (!((typeVar1 instanceof ObjectType) || (typeVar1 == Type.NULL))) {
constraintViolated(o, ""Stack top should be an object reference that's not an array reference, but is '"" + typeVar1 + ""'."");
}
final String stringVar3 = stringLiteral4;
final JavaClass javaclassVar5 = javaclassLiteral6;
Field[] fieldArrayVar7 = fieldArrayLiteral8;
Field fieldVar9 = fieldLiteral10;
for (final Field fieldVar11 : fieldArrayVar7) {
if (fieldVar11.getName().equals(stringVar3)) {
final Type typeVar12 = typeLiteral13;
final Type typeVar14 = typeLiteral15;
if (typeVar12.equals(typeVar14)) {
fieldVar9 = fieldVar11;
break;
}
}
}
if (fieldVar9 == null) {
final JavaClass[] javaclassArrayVar16 = javaclassArrayLiteral17;
outer: for (final JavaClass javaclassVar18 : javaclassArrayVar16) {
fieldArrayVar7 = javaclassVar18.getFields();
for (final Field fieldVar11 : fieldArrayVar7) {
if (fieldVar11.getName().equals(stringVar3)) {
final Type typeVar12 = typeLiteral13;
final Type typeVar14 = typeLiteral15;
if (typeVar12.equals(typeVar14)) {
fieldVar9 = fieldVar11;
if ((fieldVar9.getAccessFlags() & (Const.ACC_PUBLIC | Const.ACC_PROTECTED)) == 0) {
fieldVar9 = null;
}
break outer;
}
}
}
}
if (fieldVar9 == null) {
throw new AssertionViolatedException(""Field '"" + stringVar3 + ""' not found in "" + javaclassVar5.getClassName());
}
}
if (fieldVar9.isProtected()) {
final ObjectType objecttypeVar19 = objecttypeLiteral20;
final ObjectType objecttypeVar21 = objecttypeLiteral22;
if (objecttypeVar19.equals(objecttypeVar21) || objecttypeVar21.subclassOf(objecttypeVar19)) {
final Type typeVar23 = typeLiteral2;
if (typeVar23 == Type.NULL) {
return;
}
if (!(typeVar23 instanceof ObjectType)) {
constraintViolated(o, ""The 'objectref' must refer to an object that's not an array. Found instead: '"" + typeVar23 + ""'."");
}
final ObjectType objecttypeVar24 = objecttypeLiteral25;
if (!(objecttypeVar24.equals(objecttypeVar21) || objecttypeVar24.subclassOf(objecttypeVar21))) {
// TODO: One day move to Staerk-et-al's ""Set of object types"" instead of ""wider"" object types
}
}
}
// TODO: Could go into Pass 3a.
if (fieldVar9.isStatic()) {
constraintViolated(o, ""Referenced field '"" + fieldVar9 + ""' is static which it shouldn't be."");
}
} catch (final ClassNotFoundException e) {
// FIXME: maybe not the best way to handle this
throw new AssertionViolatedException(""Missing class: "" + e, e);
}
}"
653,BAD_PRACTICE,CN_IDIOM_NO_SUPER_CALL,FP,bcel,654,"final LocalVariables lvs = new LocalVariables(locals.length);
for (int i=0; i<locals.length; i++) {
lvs.locals[i] = this.locals[i];
}
return lvs;
","@Override
public Object clone() {
final LocalVariables lvs = new LocalVariables(locals.length);
for (int i = 0; i < locals.length; i++) {
lvs.locals[i] = this.locals[i];
}
return lvs;
}","@Override
public Object clone() {
final LocalVariables localvariablesVar1 = localvariablesLiteral2;
for (int intVar5 = intLiteral6; intVar3 < intLiteral1; intVar3++) {
localvariablesVar1.locals[intVar3] = this.locals[intVar3];
}
return localvariablesVar1;
}"
654,BAD_PRACTICE,CN_IDIOM_NO_SUPER_CALL,FP,bcel,655,"final OperandStack newstack = new OperandStack(this.maxStack);
@SuppressWarnings(""unchecked"") 
final ArrayList<Type> clone = (ArrayList<Type>) this.stack.clone();
newstack.stack = clone;
return newstack;
","@Override
public Object clone() {
final OperandStack newstack = new OperandStack(this.maxStack);
@SuppressWarnings(""unchecked"")
final ArrayList<Type> clone = (ArrayList<Type>) this.stack.clone();
newstack.stack = clone;
return newstack;
}","@Override
public Object clone() {
final OperandStack operandstackVar1 = operandstackLiteral2;
@SuppressWarnings(""unchecked"")
final ArrayList<Type> arraylist<type>Var3 = arraylist<type>Literal4;
operandstackVar1.stack = arraylist<type>Var3;
return operandstackVar1;
}"
660,MALICIOUS_CODE,MS_OOI_PKGPROTECT,FP,bcel,661,"public static final String[] CLASS_TYPE_NAMES = { ILLEGAL_TYPE, ILLEGAL_TYPE, ILLEGAL_TYPE, ILLEGAL_TYPE, ""java.lang.Boolean"", ""java.lang.Character"", ""java.lang.Float"", ""java.lang.Double"", ""java.lang.Byte"", ""java.lang.Short"", ""java.lang.Integer"", ""java.lang.Long"", ""java.lang.Void"", ILLEGAL_TYPE, ILLEGAL_TYPE, ILLEGAL_TYPE, ILLEGAL_TYPE };","public static final String[] CLASS_TYPE_NAMES = { ILLEGAL_TYPE, ILLEGAL_TYPE, ILLEGAL_TYPE, ILLEGAL_TYPE, ""java.lang.Boolean"", ""java.lang.Character"", ""java.lang.Float"", ""java.lang.Double"", ""java.lang.Byte"", ""java.lang.Short"", ""java.lang.Integer"", ""java.lang.Long"", ""java.lang.Void"", ILLEGAL_TYPE, ILLEGAL_TYPE, ILLEGAL_TYPE, ILLEGAL_TYPE };",public static final String[] stringArrayVar1 = stringArrayLiteral2;
663,MALICIOUS_CODE,MS_OOI_PKGPROTECT,FP,bcel,664,"public static final String[] SHORT_TYPE_NAMES = { ILLEGAL_TYPE, ILLEGAL_TYPE, ILLEGAL_TYPE, ILLEGAL_TYPE, ""Z"", ""C"", ""F"", ""D"", ""B"", ""S"", ""I"", ""J"", ""V"", ILLEGAL_TYPE, ILLEGAL_TYPE, ILLEGAL_TYPE };","public static final String[] SHORT_TYPE_NAMES = { ILLEGAL_TYPE, ILLEGAL_TYPE, ILLEGAL_TYPE, ILLEGAL_TYPE, ""Z"", ""C"", ""F"", ""D"", ""B"", ""S"", ""I"", ""J"", ""V"", ILLEGAL_TYPE, ILLEGAL_TYPE, ILLEGAL_TYPE };",public static final String[] stringArrayVar1 = stringArrayLiteral2;
665,MALICIOUS_CODE,MS_OOI_PKGPROTECT,FP,bcel,666,"// TODO: mutable public array!!
public static final String[] ATTRIBUTE_NAMES = { ""SourceFile"", ""ConstantValue"", ""Code"", ""Exceptions"", ""LineNumberTable"", ""LocalVariableTable"", ""InnerClasses"", ""Synthetic"", ""Deprecated"", ""PMGClass"", ""Signature"", ""StackMap"", ""RuntimeVisibleAnnotations"", ""RuntimeInvisibleAnnotations"", ""RuntimeVisibleParameterAnnotations"", ""RuntimeInvisibleParameterAnnotations"", ""AnnotationDefault"" };","// TODO: mutable public array!!
public static final String[] ATTRIBUTE_NAMES = { ""SourceFile"", ""ConstantValue"", ""Code"", ""Exceptions"", ""LineNumberTable"", ""LocalVariableTable"", ""InnerClasses"", ""Synthetic"", ""Deprecated"", ""PMGClass"", ""Signature"", ""StackMap"", ""RuntimeVisibleAnnotations"", ""RuntimeInvisibleAnnotations"", ""RuntimeVisibleParameterAnnotations"", ""RuntimeInvisibleParameterAnnotations"", ""AnnotationDefault"" };","// TODO: mutable public array!!
public static final String[] stringArrayVar1 = stringArrayLiteral2;"
668,MALICIOUS_CODE,MS_OOI_PKGPROTECT,FP,bcel,669,"@Deprecated
public static final Class<?>[] EXCS_ARRAY_EXCEPTION = { NULL_POINTER_EXCEPTION, ARRAY_INDEX_OUT_OF_BOUNDS_EXCEPTION };","@Deprecated
public static final Class<?>[] EXCS_ARRAY_EXCEPTION = { NULL_POINTER_EXCEPTION, ARRAY_INDEX_OUT_OF_BOUNDS_EXCEPTION };","@Deprecated
public static final Class<?>[] class<?>ArrayVar1 = class<?>ArrayLiteral2;"
669,MALICIOUS_CODE,MS_OOI_PKGPROTECT,FP,bcel,670,"@Deprecated
public static final Class<?>[] EXCS_FIELD_AND_METHOD_RESOLUTION = { NO_SUCH_FIELD_ERROR, ILLEGAL_ACCESS_ERROR, NO_SUCH_METHOD_ERROR };","@Deprecated
public static final Class<?>[] EXCS_FIELD_AND_METHOD_RESOLUTION = { NO_SUCH_FIELD_ERROR, ILLEGAL_ACCESS_ERROR, NO_SUCH_METHOD_ERROR };","@Deprecated
public static final Class<?>[] class<?>ArrayVar1 = class<?>ArrayLiteral2;"
670,MALICIOUS_CODE,MS_OOI_PKGPROTECT,FP,bcel,671,"@Deprecated
public static final Class<?>[] EXCS_CLASS_AND_INTERFACE_RESOLUTION = { NO_CLASS_DEF_FOUND_ERROR, CLASS_FORMAT_ERROR, VERIFY_ERROR, ABSTRACT_METHOD_ERROR, EXCEPTION_IN_INITIALIZER_ERROR, ILLEGAL_ACCESS_ERROR };","@Deprecated
public static final Class<?>[] EXCS_CLASS_AND_INTERFACE_RESOLUTION = { NO_CLASS_DEF_FOUND_ERROR, CLASS_FORMAT_ERROR, VERIFY_ERROR, ABSTRACT_METHOD_ERROR, EXCEPTION_IN_INITIALIZER_ERROR, ILLEGAL_ACCESS_ERROR };","@Deprecated
public static final Class<?>[] class<?>ArrayVar1 = class<?>ArrayLiteral2;"
671,MALICIOUS_CODE,EI_EXPOSE_REP,FP,bcel,672,"return annotation_table;
","public AnnotationEntry[] getAnnotationEntries() {
return annotation_table;
}","public AnnotationEntry[] getAnnotationEntries() {
return annotation_table;
}"
679,MALICIOUS_CODE,EI_EXPOSE_REP,FP,bcel,680,"return bootstrap_arguments;
","public int[] getBootstrapArguments() {
return bootstrap_arguments;
}","public int[] getBootstrapArguments() {
return bootstrap_arguments;
}"
680,MALICIOUS_CODE,EI_EXPOSE_REP2,FP,bcel,681,"this.bootstrap_methods = bootstrap_methods;
","public BootstrapMethods(final int name_index, final int length, final BootstrapMethod[] bootstrap_methods, final ConstantPool constant_pool) {
super(Const.ATTR_BOOTSTRAP_METHODS, name_index, length, constant_pool);
this.bootstrap_methods = bootstrap_methods;
}","public BootstrapMethods(final int name_index, final int length, final BootstrapMethod[] bootstrap_methods, final ConstantPool constant_pool) {
super(Const.ATTR_BOOTSTRAP_METHODS, name_index, length, constant_pool);
this.bootstrap_methods = bootstrap_methods;
}"
681,MALICIOUS_CODE,EI_EXPOSE_REP,FP,bcel,682,"return bootstrap_methods;
","public final BootstrapMethod[] getBootstrapMethods() {
return bootstrap_methods;
}","public final BootstrapMethod[] getBootstrapMethods() {
return bootstrap_methods;
}"
682,MALICIOUS_CODE,EI_EXPOSE_REP2,FP,bcel,683,"this.bootstrap_methods = bootstrap_methods;
","public final void setBootstrapMethods(final BootstrapMethod[] bootstrap_methods) {
this.bootstrap_methods = bootstrap_methods;
}","public final void setBootstrapMethods(final BootstrapMethod[] bootstrap_methods) {
this.bootstrap_methods = bootstrap_methods;
}"
685,MALICIOUS_CODE,EI_EXPOSE_REP,FP,bcel,686,"return code;
","public final byte[] getCode() {
return code;
}","public final byte[] getCode() {
return code;
}"
690,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,bcel,691,"ConstantMethodType cmt = (ConstantMethodType) c;
","public String constantToString(Constant c) throws ClassFormatException {
String str;
int i;
byte tag = c.getTag();
switch(tag) {
case Const.CONSTANT_Class:
i = ((ConstantClass) c).getNameIndex();
c = getConstant(i, Const.CONSTANT_Utf8);
str = Utility.compactClassName(((ConstantUtf8) c).getBytes(), false);
break;
case Const.CONSTANT_String:
i = ((ConstantString) c).getStringIndex();
c = getConstant(i, Const.CONSTANT_Utf8);
str = ""\"""" + escape(((ConstantUtf8) c).getBytes()) + ""\"""";
break;
case Const.CONSTANT_Utf8:
str = ((ConstantUtf8) c).getBytes();
break;
case Const.CONSTANT_Double:
str = String.valueOf(((ConstantDouble) c).getBytes());
break;
case Const.CONSTANT_Float:
str = String.valueOf(((ConstantFloat) c).getBytes());
break;
case Const.CONSTANT_Long:
str = String.valueOf(((ConstantLong) c).getBytes());
break;
case Const.CONSTANT_Integer:
str = String.valueOf(((ConstantInteger) c).getBytes());
break;
case Const.CONSTANT_NameAndType:
str = constantToString(((ConstantNameAndType) c).getNameIndex(), Const.CONSTANT_Utf8) + "":"" + constantToString(((ConstantNameAndType) c).getSignatureIndex(), Const.CONSTANT_Utf8);
break;
case Const.CONSTANT_InterfaceMethodref:
case Const.CONSTANT_Methodref:
case Const.CONSTANT_Fieldref:
str = constantToString(((ConstantCP) c).getClassIndex(), Const.CONSTANT_Class) + ""."" + constantToString(((ConstantCP) c).getNameAndTypeIndex(), Const.CONSTANT_NameAndType);
break;
case Const.CONSTANT_MethodHandle:
ConstantMethodHandle cmh = (ConstantMethodHandle) c;
str = Const.getMethodHandleName(cmh.getReferenceKind()) + "" "" + constantToString(cmh.getReferenceIndex(), getConstant(cmh.getReferenceIndex()).getTag());
break;
case Const.CONSTANT_MethodType:
ConstantMethodType cmt = (ConstantMethodType) c;
str = constantToString(cmt.getDescriptorIndex(), Const.CONSTANT_Utf8);
break;
case Const.CONSTANT_InvokeDynamic:
ConstantInvokeDynamic cid = (ConstantInvokeDynamic) c;
str = cid.getBootstrapMethodAttrIndex() + "":"" + constantToString(cid.getNameAndTypeIndex(), Const.CONSTANT_NameAndType);
break;
default:
// Never reached
throw new RuntimeException(""Unknown constant type "" + tag);
}
return str;
}","public String constantToString(Constant c) throws ClassFormatException {
String stringVar1;
int intVar2;
byte byteVar3 = byteLiteral4;
switch(byteVar3) {
case Const.CONSTANT_Class:
intVar2 = ((ConstantClass) c).getNameIndex();
c = getConstant(intVar2, Const.CONSTANT_Utf8);
stringVar1 = Utility.compactClassName(((ConstantUtf8) c).getBytes(), false);
break;
case Const.CONSTANT_String:
intVar2 = ((ConstantString) c).getStringIndex();
c = getConstant(intVar2, Const.CONSTANT_Utf8);
stringVar1 = ""\"""" + escape(((ConstantUtf8) c).getBytes()) + ""\"""";
break;
case Const.CONSTANT_Utf8:
stringVar1 = ((ConstantUtf8) c).getBytes();
break;
case Const.CONSTANT_Double:
stringVar1 = String.valueOf(((ConstantDouble) c).getBytes());
break;
case Const.CONSTANT_Float:
stringVar1 = String.valueOf(((ConstantFloat) c).getBytes());
break;
case Const.CONSTANT_Long:
stringVar1 = String.valueOf(((ConstantLong) c).getBytes());
break;
case Const.CONSTANT_Integer:
stringVar1 = String.valueOf(((ConstantInteger) c).getBytes());
break;
case Const.CONSTANT_NameAndType:
stringVar1 = constantToString(((ConstantNameAndType) c).getNameIndex(), Const.CONSTANT_Utf8) + "":"" + constantToString(((ConstantNameAndType) c).getSignatureIndex(), Const.CONSTANT_Utf8);
break;
case Const.CONSTANT_InterfaceMethodref:
case Const.CONSTANT_Methodref:
case Const.CONSTANT_Fieldref:
stringVar1 = constantToString(((ConstantCP) c).getClassIndex(), Const.CONSTANT_Class) + ""."" + constantToString(((ConstantCP) c).getNameAndTypeIndex(), Const.CONSTANT_NameAndType);
break;
case Const.CONSTANT_MethodHandle:
ConstantMethodHandle constantmethodhandleVar5 = constantmethodhandleLiteral6;
stringVar1 = Const.getMethodHandleName(constantmethodhandleVar5.getReferenceKind()) + "" "" + constantToString(constantmethodhandleVar5.getReferenceIndex(), getConstant(constantmethodhandleVar5.getReferenceIndex()).getTag());
break;
case Const.CONSTANT_MethodType:
ConstantMethodType constantmethodtypeVar7 = constantmethodtypeLiteral8;
stringVar1 = constantToString(constantmethodtypeVar7.getDescriptorIndex(), Const.CONSTANT_Utf8);
break;
case Const.CONSTANT_InvokeDynamic:
ConstantInvokeDynamic constantinvokedynamicVar9 = constantinvokedynamicLiteral10;
stringVar1 = constantinvokedynamicVar9.getBootstrapMethodAttrIndex() + "":"" + constantToString(constantinvokedynamicVar9.getNameAndTypeIndex(), Const.CONSTANT_NameAndType);
break;
default:
// Never reached
throw new RuntimeException(""Unknown constant type "" + byteVar3);
}
return stringVar1;
}"
694,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,bcel,695,"i = ((ConstantString) c).getStringIndex();
","public String constantToString(Constant c) throws ClassFormatException {
String str;
int i;
byte tag = c.getTag();
switch(tag) {
case Const.CONSTANT_Class:
i = ((ConstantClass) c).getNameIndex();
c = getConstant(i, Const.CONSTANT_Utf8);
str = Utility.compactClassName(((ConstantUtf8) c).getBytes(), false);
break;
case Const.CONSTANT_String:
i = ((ConstantString) c).getStringIndex();
c = getConstant(i, Const.CONSTANT_Utf8);
str = ""\"""" + escape(((ConstantUtf8) c).getBytes()) + ""\"""";
break;
case Const.CONSTANT_Utf8:
str = ((ConstantUtf8) c).getBytes();
break;
case Const.CONSTANT_Double:
str = String.valueOf(((ConstantDouble) c).getBytes());
break;
case Const.CONSTANT_Float:
str = String.valueOf(((ConstantFloat) c).getBytes());
break;
case Const.CONSTANT_Long:
str = String.valueOf(((ConstantLong) c).getBytes());
break;
case Const.CONSTANT_Integer:
str = String.valueOf(((ConstantInteger) c).getBytes());
break;
case Const.CONSTANT_NameAndType:
str = constantToString(((ConstantNameAndType) c).getNameIndex(), Const.CONSTANT_Utf8) + "":"" + constantToString(((ConstantNameAndType) c).getSignatureIndex(), Const.CONSTANT_Utf8);
break;
case Const.CONSTANT_InterfaceMethodref:
case Const.CONSTANT_Methodref:
case Const.CONSTANT_Fieldref:
str = constantToString(((ConstantCP) c).getClassIndex(), Const.CONSTANT_Class) + ""."" + constantToString(((ConstantCP) c).getNameAndTypeIndex(), Const.CONSTANT_NameAndType);
break;
case Const.CONSTANT_MethodHandle:
ConstantMethodHandle cmh = (ConstantMethodHandle) c;
str = Const.getMethodHandleName(cmh.getReferenceKind()) + "" "" + constantToString(cmh.getReferenceIndex(), getConstant(cmh.getReferenceIndex()).getTag());
break;
case Const.CONSTANT_MethodType:
ConstantMethodType cmt = (ConstantMethodType) c;
str = constantToString(cmt.getDescriptorIndex(), Const.CONSTANT_Utf8);
break;
case Const.CONSTANT_InvokeDynamic:
ConstantInvokeDynamic cid = (ConstantInvokeDynamic) c;
str = cid.getBootstrapMethodAttrIndex() + "":"" + constantToString(cid.getNameAndTypeIndex(), Const.CONSTANT_NameAndType);
break;
default:
// Never reached
throw new RuntimeException(""Unknown constant type "" + tag);
}
return str;
}","public String constantToString(Constant c) throws ClassFormatException {
String stringVar1;
int intVar2;
byte byteVar3 = byteLiteral4;
switch(byteVar3) {
case Const.CONSTANT_Class:
intVar2 = ((ConstantClass) c).getNameIndex();
c = getConstant(intVar2, Const.CONSTANT_Utf8);
stringVar1 = Utility.compactClassName(((ConstantUtf8) c).getBytes(), false);
break;
case Const.CONSTANT_String:
intVar2 = ((ConstantString) c).getStringIndex();
c = getConstant(intVar2, Const.CONSTANT_Utf8);
stringVar1 = ""\"""" + escape(((ConstantUtf8) c).getBytes()) + ""\"""";
break;
case Const.CONSTANT_Utf8:
stringVar1 = ((ConstantUtf8) c).getBytes();
break;
case Const.CONSTANT_Double:
stringVar1 = String.valueOf(((ConstantDouble) c).getBytes());
break;
case Const.CONSTANT_Float:
stringVar1 = String.valueOf(((ConstantFloat) c).getBytes());
break;
case Const.CONSTANT_Long:
stringVar1 = String.valueOf(((ConstantLong) c).getBytes());
break;
case Const.CONSTANT_Integer:
stringVar1 = String.valueOf(((ConstantInteger) c).getBytes());
break;
case Const.CONSTANT_NameAndType:
stringVar1 = constantToString(((ConstantNameAndType) c).getNameIndex(), Const.CONSTANT_Utf8) + "":"" + constantToString(((ConstantNameAndType) c).getSignatureIndex(), Const.CONSTANT_Utf8);
break;
case Const.CONSTANT_InterfaceMethodref:
case Const.CONSTANT_Methodref:
case Const.CONSTANT_Fieldref:
stringVar1 = constantToString(((ConstantCP) c).getClassIndex(), Const.CONSTANT_Class) + ""."" + constantToString(((ConstantCP) c).getNameAndTypeIndex(), Const.CONSTANT_NameAndType);
break;
case Const.CONSTANT_MethodHandle:
ConstantMethodHandle constantmethodhandleVar5 = constantmethodhandleLiteral6;
stringVar1 = Const.getMethodHandleName(constantmethodhandleVar5.getReferenceKind()) + "" "" + constantToString(constantmethodhandleVar5.getReferenceIndex(), getConstant(constantmethodhandleVar5.getReferenceIndex()).getTag());
break;
case Const.CONSTANT_MethodType:
ConstantMethodType constantmethodtypeVar7 = constantmethodtypeLiteral8;
stringVar1 = constantToString(constantmethodtypeVar7.getDescriptorIndex(), Const.CONSTANT_Utf8);
break;
case Const.CONSTANT_InvokeDynamic:
ConstantInvokeDynamic constantinvokedynamicVar9 = constantinvokedynamicLiteral10;
stringVar1 = constantinvokedynamicVar9.getBootstrapMethodAttrIndex() + "":"" + constantToString(constantinvokedynamicVar9.getNameAndTypeIndex(), Const.CONSTANT_NameAndType);
break;
default:
// Never reached
throw new RuntimeException(""Unknown constant type "" + byteVar3);
}
return stringVar1;
}"
698,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,bcel,699,"str = constantToString(((ConstantCP) c).getClassIndex(), Const.CONSTANT_Class)
","public String constantToString(Constant c) throws ClassFormatException {
String str;
int i;
byte tag = c.getTag();
switch(tag) {
case Const.CONSTANT_Class:
i = ((ConstantClass) c).getNameIndex();
c = getConstant(i, Const.CONSTANT_Utf8);
str = Utility.compactClassName(((ConstantUtf8) c).getBytes(), false);
break;
case Const.CONSTANT_String:
i = ((ConstantString) c).getStringIndex();
c = getConstant(i, Const.CONSTANT_Utf8);
str = ""\"""" + escape(((ConstantUtf8) c).getBytes()) + ""\"""";
break;
case Const.CONSTANT_Utf8:
str = ((ConstantUtf8) c).getBytes();
break;
case Const.CONSTANT_Double:
str = String.valueOf(((ConstantDouble) c).getBytes());
break;
case Const.CONSTANT_Float:
str = String.valueOf(((ConstantFloat) c).getBytes());
break;
case Const.CONSTANT_Long:
str = String.valueOf(((ConstantLong) c).getBytes());
break;
case Const.CONSTANT_Integer:
str = String.valueOf(((ConstantInteger) c).getBytes());
break;
case Const.CONSTANT_NameAndType:
str = constantToString(((ConstantNameAndType) c).getNameIndex(), Const.CONSTANT_Utf8) + "":"" + constantToString(((ConstantNameAndType) c).getSignatureIndex(), Const.CONSTANT_Utf8);
break;
case Const.CONSTANT_InterfaceMethodref:
case Const.CONSTANT_Methodref:
case Const.CONSTANT_Fieldref:
str = constantToString(((ConstantCP) c).getClassIndex(), Const.CONSTANT_Class) + ""."" + constantToString(((ConstantCP) c).getNameAndTypeIndex(), Const.CONSTANT_NameAndType);
break;
case Const.CONSTANT_MethodHandle:
ConstantMethodHandle cmh = (ConstantMethodHandle) c;
str = Const.getMethodHandleName(cmh.getReferenceKind()) + "" "" + constantToString(cmh.getReferenceIndex(), getConstant(cmh.getReferenceIndex()).getTag());
break;
case Const.CONSTANT_MethodType:
ConstantMethodType cmt = (ConstantMethodType) c;
str = constantToString(cmt.getDescriptorIndex(), Const.CONSTANT_Utf8);
break;
case Const.CONSTANT_InvokeDynamic:
ConstantInvokeDynamic cid = (ConstantInvokeDynamic) c;
str = cid.getBootstrapMethodAttrIndex() + "":"" + constantToString(cid.getNameAndTypeIndex(), Const.CONSTANT_NameAndType);
break;
default:
// Never reached
throw new RuntimeException(""Unknown constant type "" + tag);
}
return str;
}","public String constantToString(Constant c) throws ClassFormatException {
String stringVar1;
int intVar2;
byte byteVar3 = byteLiteral4;
switch(byteVar3) {
case Const.CONSTANT_Class:
intVar2 = ((ConstantClass) c).getNameIndex();
c = getConstant(intVar2, Const.CONSTANT_Utf8);
stringVar1 = Utility.compactClassName(((ConstantUtf8) c).getBytes(), false);
break;
case Const.CONSTANT_String:
intVar2 = ((ConstantString) c).getStringIndex();
c = getConstant(intVar2, Const.CONSTANT_Utf8);
stringVar1 = ""\"""" + escape(((ConstantUtf8) c).getBytes()) + ""\"""";
break;
case Const.CONSTANT_Utf8:
stringVar1 = ((ConstantUtf8) c).getBytes();
break;
case Const.CONSTANT_Double:
stringVar1 = String.valueOf(((ConstantDouble) c).getBytes());
break;
case Const.CONSTANT_Float:
stringVar1 = String.valueOf(((ConstantFloat) c).getBytes());
break;
case Const.CONSTANT_Long:
stringVar1 = String.valueOf(((ConstantLong) c).getBytes());
break;
case Const.CONSTANT_Integer:
stringVar1 = String.valueOf(((ConstantInteger) c).getBytes());
break;
case Const.CONSTANT_NameAndType:
stringVar1 = constantToString(((ConstantNameAndType) c).getNameIndex(), Const.CONSTANT_Utf8) + "":"" + constantToString(((ConstantNameAndType) c).getSignatureIndex(), Const.CONSTANT_Utf8);
break;
case Const.CONSTANT_InterfaceMethodref:
case Const.CONSTANT_Methodref:
case Const.CONSTANT_Fieldref:
stringVar1 = constantToString(((ConstantCP) c).getClassIndex(), Const.CONSTANT_Class) + ""."" + constantToString(((ConstantCP) c).getNameAndTypeIndex(), Const.CONSTANT_NameAndType);
break;
case Const.CONSTANT_MethodHandle:
ConstantMethodHandle constantmethodhandleVar5 = constantmethodhandleLiteral6;
stringVar1 = Const.getMethodHandleName(constantmethodhandleVar5.getReferenceKind()) + "" "" + constantToString(constantmethodhandleVar5.getReferenceIndex(), getConstant(constantmethodhandleVar5.getReferenceIndex()).getTag());
break;
case Const.CONSTANT_MethodType:
ConstantMethodType constantmethodtypeVar7 = constantmethodtypeLiteral8;
stringVar1 = constantToString(constantmethodtypeVar7.getDescriptorIndex(), Const.CONSTANT_Utf8);
break;
case Const.CONSTANT_InvokeDynamic:
ConstantInvokeDynamic constantinvokedynamicVar9 = constantinvokedynamicLiteral10;
stringVar1 = constantinvokedynamicVar9.getBootstrapMethodAttrIndex() + "":"" + constantToString(constantinvokedynamicVar9.getNameAndTypeIndex(), Const.CONSTANT_NameAndType);
break;
default:
// Never reached
throw new RuntimeException(""Unknown constant type "" + byteVar3);
}
return stringVar1;
}"
705,DODGY_CODE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,FP,bcel,706,"created++;
","ConstantUtf8(final DataInput file) throws IOException {
super(Const.CONSTANT_Utf8);
bytes = file.readUTF();
created++;
}","ConstantUtf8(final DataInput file) throws IOException {
super(Const.CONSTANT_Utf8);
bytes = file.readUTF();
created++;
}"
720,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,bcel,721,"if (debug) {
System.out.println(str);
}
}
","static void Debug(final String str) {
if (debug) {
System.out.println(str);
}
}","static void Debug(final String str) {
if (debug) {
System.out.println(str);
}
}"
727,MALICIOUS_CODE,EI_EXPOSE_REP2,FP,bcel,728,"this.line_number_table = line_number_table;
","public final void setLineNumberTable(final LineNumber[] line_number_table) {
this.line_number_table = line_number_table;
}","public final void setLineNumberTable(final LineNumber[] line_number_table) {
this.line_number_table = line_number_table;
}"
729,MALICIOUS_CODE,EI_EXPOSE_REP,FP,bcel,730,"return line_number_table;
","public final LineNumber[] getLineNumberTable() {
return line_number_table;
}","public final LineNumber[] getLineNumberTable() {
return line_number_table;
}"
735,MALICIOUS_CODE,EI_EXPOSE_REP2,FP,bcel,736,"this.local_variable_type_table = local_variable_table;
","public LocalVariableTypeTable(final int name_index, final int length, final LocalVariable[] local_variable_table, final ConstantPool constant_pool) {
super(Const.ATTR_LOCAL_VARIABLE_TYPE_TABLE, name_index, length, constant_pool);
this.local_variable_type_table = local_variable_table;
}","public LocalVariableTypeTable(final int name_index, final int length, final LocalVariable[] local_variable_table, final ConstantPool constant_pool) {
super(Const.ATTR_LOCAL_VARIABLE_TYPE_TABLE, name_index, length, constant_pool);
this.local_variable_type_table = local_variable_table;
}"
737,MALICIOUS_CODE,EI_EXPOSE_REP,FP,bcel,738,"return parameterAnnotationEntries;
","public ParameterAnnotationEntry[] getParameterAnnotationEntries() {
if (parameterAnnotationEntries == null) {
parameterAnnotationEntries = ParameterAnnotationEntry.createParameterAnnotationEntries(getAttributes());
}
return parameterAnnotationEntries;
}","public ParameterAnnotationEntry[] getParameterAnnotationEntries() {
if (parameterAnnotationEntries == null) {
parameterAnnotationEntries = ParameterAnnotationEntry.createParameterAnnotationEntries(getAttributes());
}
return parameterAnnotationEntries;
}"
740,MALICIOUS_CODE,EI_EXPOSE_REP,FP,bcel,741,"return annotation_table;
","public AnnotationEntry[] getAnnotationEntries() {
return annotation_table;
}","public AnnotationEntry[] getAnnotationEntries() {
return annotation_table;
}"
751,MALICIOUS_CODE,EI_EXPOSE_REP,FP,bcel,752,"return types_of_locals;
","public StackMapType[] getTypesOfLocals() {
return types_of_locals;
}","public StackMapType[] getTypesOfLocals() {
return types_of_locals;
}"
756,MALICIOUS_CODE,EI_EXPOSE_REP,FP,bcel,757,"return bytes;
","public final byte[] getBytes() {
return bytes;
}","public final byte[] getBytes() {
return bytes;
}"
757,MALICIOUS_CODE,EI_EXPOSE_REP2,FP,bcel,758,"this.bytes = bytes;
","public Unknown(final int name_index, final int length, final byte[] bytes, final ConstantPool constant_pool) {
super(Const.ATTR_UNKNOWN, name_index, length, constant_pool);
this.bytes = bytes;
name = ((ConstantUtf8) constant_pool.getConstant(name_index, Const.CONSTANT_Utf8)).getBytes();
unknown_attributes.put(name, this);
}","public Unknown(final int name_index, final int length, final byte[] bytes, final ConstantPool constant_pool) {
super(Const.ATTR_UNKNOWN, name_index, length, constant_pool);
this.bytes = bytes;
name = ((ConstantUtf8) constant_pool.getConstant(name_index, Const.CONSTANT_Utf8)).getBytes();
unknown_attributes.put(name, this);
}"
760,BAD_PRACTICE,DM_EXIT,FP,bcel,761,"System.exit(-1);
","public static String codeToString(final ByteSequence bytes, final ConstantPool constant_pool, final boolean verbose) throws IOException {
short opcode = (short) bytes.readUnsignedByte();
int default_offset = 0;
int low;
int high;
int npairs;
int index;
int vindex;
int constant;
int[] match;
int[] jump_table;
int no_pad_bytes = 0;
int offset;
StringBuilder buf = new StringBuilder(Const.getOpcodeName(opcode));
if ((opcode == Const.TABLESWITCH) || (opcode == Const.LOOKUPSWITCH)) {
int remainder = bytes.getIndex() % 4;
no_pad_bytes = (remainder == 0) ? 0 : 4 - remainder;
for (int i = 0; i < no_pad_bytes; i++) {
byte b;
if ((b = bytes.readByte()) != 0) {
System.err.println(""Warning: Padding byte != 0 in "" + Const.getOpcodeName(opcode) + "":"" + b);
}
}
default_offset = bytes.readInt();
}
switch(opcode) {
case Const.TABLESWITCH:
low = bytes.readInt();
high = bytes.readInt();
offset = bytes.getIndex() - 12 - no_pad_bytes - 1;
default_offset += offset;
buf.append(""\tdefault = "").append(default_offset).append("", low = "").append(low).append("", high = "").append(high).append(""("");
jump_table = new int[high - low + 1];
for (int i = 0; i < jump_table.length; i++) {
jump_table[i] = offset + bytes.readInt();
buf.append(jump_table[i]);
if (i < jump_table.length - 1) {
buf.append("", "");
}
}
buf.append("")"");
break;
case Const.LOOKUPSWITCH:
{
npairs = bytes.readInt();
offset = bytes.getIndex() - 8 - no_pad_bytes - 1;
match = new int[npairs];
jump_table = new int[npairs];
default_offset += offset;
buf.append(""\tdefault = "").append(default_offset).append("", npairs = "").append(npairs).append("" ("");
for (int i = 0; i < npairs; i++) {
match[i] = bytes.readInt();
jump_table[i] = offset + bytes.readInt();
buf.append(""("").append(match[i]).append("", "").append(jump_table[i]).append("")"");
if (i < npairs - 1) {
buf.append("", "");
}
}
buf.append("")"");
}
break;
case Const.GOTO:
case Const.IFEQ:
case Const.IFGE:
case Const.IFGT:
case Const.IFLE:
case Const.IFLT:
case Const.JSR:
case Const.IFNE:
case Const.IFNONNULL:
case Const.IFNULL:
case Const.IF_ACMPEQ:
case Const.IF_ACMPNE:
case Const.IF_ICMPEQ:
case Const.IF_ICMPGE:
case Const.IF_ICMPGT:
case Const.IF_ICMPLE:
case Const.IF_ICMPLT:
case Const.IF_ICMPNE:
buf.append(""\t\t#"").append((bytes.getIndex() - 1) + bytes.readShort());
break;
case Const.GOTO_W:
case Const.JSR_W:
buf.append(""\t\t#"").append((bytes.getIndex() - 1) + bytes.readInt());
break;
case Const.ALOAD:
case Const.ASTORE:
case Const.DLOAD:
case Const.DSTORE:
case Const.FLOAD:
case Const.FSTORE:
case Const.ILOAD:
case Const.ISTORE:
case Const.LLOAD:
case Const.LSTORE:
case Const.RET:
if (wide) {
vindex = bytes.readUnsignedShort();
wide = false;
} else {
vindex = bytes.readUnsignedByte();
}
buf.append(""\t\t%"").append(vindex);
break;
case Const.WIDE:
wide = true;
buf.append(""\t(wide)"");
break;
case Const.NEWARRAY:
buf.append(""\t\t<"").append(Const.getTypeName(bytes.readByte())).append("">"");
break;
case Const.GETFIELD:
case Const.GETSTATIC:
case Const.PUTFIELD:
case Const.PUTSTATIC:
index = bytes.readUnsignedShort();
buf.append(""\t\t"").append(constant_pool.constantToString(index, Const.CONSTANT_Fieldref)).append(verbose ? "" ("" + index + "")"" : """");
break;
case Const.NEW:
case Const.CHECKCAST:
buf.append(""\t"");
case Const.INSTANCEOF:
index = bytes.readUnsignedShort();
buf.append(""\t<"").append(constant_pool.constantToString(index, Const.CONSTANT_Class)).append("">"").append(verbose ? "" ("" + index + "")"" : """");
break;
case Const.INVOKESPECIAL:
case Const.INVOKESTATIC:
index = bytes.readUnsignedShort();
Constant c = constant_pool.getConstant(index);
buf.append(""\t"").append(constant_pool.constantToString(index, c.getTag())).append(verbose ? "" ("" + index + "")"" : """");
break;
case Const.INVOKEVIRTUAL:
index = bytes.readUnsignedShort();
buf.append(""\t"").append(constant_pool.constantToString(index, Const.CONSTANT_Methodref)).append(verbose ? "" ("" + index + "")"" : """");
break;
case Const.INVOKEINTERFACE:
index = bytes.readUnsignedShort();
int nargs = bytes.readUnsignedByte();
buf.append(""\t"").append(constant_pool.constantToString(index, Const.CONSTANT_InterfaceMethodref)).append(verbose ? "" ("" + index + "")\t"" : """").append(nargs).append(""\t"").append(bytes.readUnsignedByte());
break;
case Const.INVOKEDYNAMIC:
index = bytes.readUnsignedShort();
buf.append(""\t"").append(constant_pool.constantToString(index, Const.CONSTANT_InvokeDynamic)).append(verbose ? "" ("" + index + "")\t"" : """").append(bytes.readUnsignedByte()).append(bytes.readUnsignedByte());
break;
case Const.LDC_W:
case Const.LDC2_W:
index = bytes.readUnsignedShort();
buf.append(""\t\t"").append(constant_pool.constantToString(index, constant_pool.getConstant(index).getTag())).append(verbose ? "" ("" + index + "")"" : """");
break;
case Const.LDC:
index = bytes.readUnsignedByte();
buf.append(""\t\t"").append(constant_pool.constantToString(index, constant_pool.getConstant(index).getTag())).append(verbose ? "" ("" + index + "")"" : """");
break;
case Const.ANEWARRAY:
index = bytes.readUnsignedShort();
buf.append(""\t\t<"").append(compactClassName(constant_pool.getConstantString(index, Const.CONSTANT_Class), false)).append("">"").append(verbose ? "" ("" + index + "")"" : """");
break;
case Const.MULTIANEWARRAY:
{
index = bytes.readUnsignedShort();
int dimensions = bytes.readUnsignedByte();
buf.append(""\t<"").append(compactClassName(constant_pool.getConstantString(index, Const.CONSTANT_Class), false)).append("">\t"").append(dimensions).append(verbose ? "" ("" + index + "")"" : """");
}
break;
case Const.IINC:
if (wide) {
vindex = bytes.readUnsignedShort();
constant = bytes.readShort();
wide = false;
} else {
vindex = bytes.readUnsignedByte();
constant = bytes.readByte();
}
buf.append(""\t\t%"").append(vindex).append(""\t"").append(constant);
break;
default:
if (Const.getNoOfOperands(opcode) > 0) {
for (int i = 0; i < Const.getOperandTypeCount(opcode); i++) {
buf.append(""\t\t"");
switch(Const.getOperandType(opcode, i)) {
case Const.T_BYTE:
buf.append(bytes.readByte());
break;
case Const.T_SHORT:
buf.append(bytes.readShort());
break;
case Const.T_INT:
buf.append(bytes.readInt());
break;
default:
// Never reached
System.err.println(""Unreachable default case reached!"");
System.exit(-1);
}
}
}
}
return buf.toString();
}","public static String codeToString(final ByteSequence bytes, final ConstantPool constant_pool, final boolean verbose) throws IOException {
short shortVar1 = shortLiteral2;
int intVar3 = intLiteral4;
int intVar5;
int intVar6;
int intVar7;
int intVar8;
int intVar9;
int intVar10;
int[] intArrayVar11;
int[] intArrayVar12;
int intVar13 = intLiteral4;
int intVar14;
StringBuilder stringbuilderVar15 = stringbuilderLiteral16;
if ((shortVar1 == Const.TABLESWITCH) || (shortVar1 == Const.LOOKUPSWITCH)) {
int intVar17 = intLiteral18;
intVar13 = (intVar17 == 0) ? 0 : 4 - intVar17;
for (int intVar26 = intLiteral27; intVar19 < intLiteral1; intVar19++) {
byte byteVar20;
if ((byteVar20 = bytes.readByte()) != 0) {
System.err.println(""Warning: Padding byte != 0 in "" + Const.getOpcodeName(shortVar1) + "":"" + byteVar20);
}
}
intVar3 = bytes.readInt();
}
switch(shortVar1) {
case Const.TABLESWITCH:
intVar5 = bytes.readInt();
intVar6 = bytes.readInt();
intVar14 = bytes.getIndex() - 12 - intVar13 - 1;
intVar3 += intVar14;
stringbuilderVar15.append(""\tdefault = "").append(intVar3).append("", low = "").append(intVar5).append("", high = "").append(intVar6).append(""("");
intArrayVar12 = new int[intVar6 - intVar5 + 1];
for (int intVar26 = intLiteral27; intVar19 < intLiteral2; intVar19++) {
intArrayVar12[intVar19] = intVar14 + bytes.readInt();
stringbuilderVar15.append(intArrayVar12[intVar19]);
if (intVar19 < intArrayVar12.length - 1) {
stringbuilderVar15.append("", "");
}
}
stringbuilderVar15.append("")"");
break;
case Const.LOOKUPSWITCH:
{
intVar7 = bytes.readInt();
intVar14 = bytes.getIndex() - 8 - intVar13 - 1;
intArrayVar11 = new int[intVar7];
intArrayVar12 = new int[intVar7];
intVar3 += intVar14;
stringbuilderVar15.append(""\tdefault = "").append(intVar3).append("", npairs = "").append(intVar7).append("" ("");
for (int intVar26 = intLiteral27; intVar19 < intLiteral3; intVar19++) {
intArrayVar11[intVar19] = bytes.readInt();
intArrayVar12[intVar19] = intVar14 + bytes.readInt();
stringbuilderVar15.append(""("").append(intArrayVar11[intVar19]).append("", "").append(intArrayVar12[intVar19]).append("")"");
if (intVar19 < intVar7 - 1) {
stringbuilderVar15.append("", "");
}
}
stringbuilderVar15.append("")"");
}
break;
case Const.GOTO:
case Const.IFEQ:
case Const.IFGE:
case Const.IFGT:
case Const.IFLE:
case Const.IFLT:
case Const.JSR:
case Const.IFNE:
case Const.IFNONNULL:
case Const.IFNULL:
case Const.IF_ACMPEQ:
case Const.IF_ACMPNE:
case Const.IF_ICMPEQ:
case Const.IF_ICMPGE:
case Const.IF_ICMPGT:
case Const.IF_ICMPLE:
case Const.IF_ICMPLT:
case Const.IF_ICMPNE:
stringbuilderVar15.append(""\t\t#"").append((bytes.getIndex() - 1) + bytes.readShort());
break;
case Const.GOTO_W:
case Const.JSR_W:
stringbuilderVar15.append(""\t\t#"").append((bytes.getIndex() - 1) + bytes.readInt());
break;
case Const.ALOAD:
case Const.ASTORE:
case Const.DLOAD:
case Const.DSTORE:
case Const.FLOAD:
case Const.FSTORE:
case Const.ILOAD:
case Const.ISTORE:
case Const.LLOAD:
case Const.LSTORE:
case Const.RET:
if (wide) {
intVar9 = bytes.readUnsignedShort();
wide = false;
} else {
intVar9 = bytes.readUnsignedByte();
}
stringbuilderVar15.append(""\t\t%"").append(intVar9);
break;
case Const.WIDE:
wide = true;
stringbuilderVar15.append(""\t(wide)"");
break;
case Const.NEWARRAY:
stringbuilderVar15.append(""\t\t<"").append(Const.getTypeName(bytes.readByte())).append("">"");
break;
case Const.GETFIELD:
case Const.GETSTATIC:
case Const.PUTFIELD:
case Const.PUTSTATIC:
intVar8 = bytes.readUnsignedShort();
stringbuilderVar15.append(""\t\t"").append(constant_pool.constantToString(intVar8, Const.CONSTANT_Fieldref)).append(verbose ? "" ("" + intVar8 + "")"" : """");
break;
case Const.NEW:
case Const.CHECKCAST:
stringbuilderVar15.append(""\t"");
case Const.INSTANCEOF:
intVar8 = bytes.readUnsignedShort();
stringbuilderVar15.append(""\t<"").append(constant_pool.constantToString(intVar8, Const.CONSTANT_Class)).append("">"").append(verbose ? "" ("" + intVar8 + "")"" : """");
break;
case Const.INVOKESPECIAL:
case Const.INVOKESTATIC:
intVar8 = bytes.readUnsignedShort();
Constant constantVar21 = constantLiteral22;
stringbuilderVar15.append(""\t"").append(constant_pool.constantToString(intVar8, constantVar21.getTag())).append(verbose ? "" ("" + intVar8 + "")"" : """");
break;
case Const.INVOKEVIRTUAL:
intVar8 = bytes.readUnsignedShort();
stringbuilderVar15.append(""\t"").append(constant_pool.constantToString(intVar8, Const.CONSTANT_Methodref)).append(verbose ? "" ("" + intVar8 + "")"" : """");
break;
case Const.INVOKEINTERFACE:
intVar8 = bytes.readUnsignedShort();
int intVar23 = intLiteral24;
stringbuilderVar15.append(""\t"").append(constant_pool.constantToString(intVar8, Const.CONSTANT_InterfaceMethodref)).append(verbose ? "" ("" + intVar8 + "")\t"" : """").append(intVar23).append(""\t"").append(bytes.readUnsignedByte());
break;
case Const.INVOKEDYNAMIC:
intVar8 = bytes.readUnsignedShort();
stringbuilderVar15.append(""\t"").append(constant_pool.constantToString(intVar8, Const.CONSTANT_InvokeDynamic)).append(verbose ? "" ("" + intVar8 + "")\t"" : """").append(bytes.readUnsignedByte()).append(bytes.readUnsignedByte());
break;
case Const.LDC_W:
case Const.LDC2_W:
intVar8 = bytes.readUnsignedShort();
stringbuilderVar15.append(""\t\t"").append(constant_pool.constantToString(intVar8, constant_pool.getConstant(intVar8).getTag())).append(verbose ? "" ("" + intVar8 + "")"" : """");
break;
case Const.LDC:
intVar8 = bytes.readUnsignedByte();
stringbuilderVar15.append(""\t\t"").append(constant_pool.constantToString(intVar8, constant_pool.getConstant(intVar8).getTag())).append(verbose ? "" ("" + intVar8 + "")"" : """");
break;
case Const.ANEWARRAY:
intVar8 = bytes.readUnsignedShort();
stringbuilderVar15.append(""\t\t<"").append(compactClassName(constant_pool.getConstantString(intVar8, Const.CONSTANT_Class), false)).append("">"").append(verbose ? "" ("" + intVar8 + "")"" : """");
break;
case Const.MULTIANEWARRAY:
{
intVar8 = bytes.readUnsignedShort();
int intVar25 = intLiteral24;
stringbuilderVar15.append(""\t<"").append(compactClassName(constant_pool.getConstantString(intVar8, Const.CONSTANT_Class), false)).append("">\t"").append(intVar25).append(verbose ? "" ("" + intVar8 + "")"" : """");
}
break;
case Const.IINC:
if (wide) {
intVar9 = bytes.readUnsignedShort();
intVar10 = bytes.readShort();
wide = false;
} else {
intVar9 = bytes.readUnsignedByte();
intVar10 = bytes.readByte();
}
stringbuilderVar15.append(""\t\t%"").append(intVar9).append(""\t"").append(intVar10);
break;
default:
if (Const.getNoOfOperands(shortVar1) > 0) {
for (int intVar26 = intLiteral27; intVar19 < intLiteral4; intVar19++) {
stringbuilderVar15.append(""\t\t"");
switch(Const.getOperandType(shortVar1, intVar19)) {
case Const.T_BYTE:
stringbuilderVar15.append(bytes.readByte());
break;
case Const.T_SHORT:
stringbuilderVar15.append(bytes.readShort());
break;
case Const.T_INT:
stringbuilderVar15.append(bytes.readInt());
break;
default:
// Never reached
System.err.println(""Unreachable default case reached!"");
System.exit(-1);
}
}
}
}
return stringbuilderVar15.toString();
}"
766,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,bcel,767,"ConstantClass s = (ConstantClass) c;
","public int addConstant(final Constant c, final ConstantPoolGen cp) {
Constant[] constants = cp.getConstantPool().getConstantPool();
switch(c.getTag()) {
case Const.CONSTANT_String:
{
ConstantString s = (ConstantString) c;
ConstantUtf8 u8 = (ConstantUtf8) constants[s.getStringIndex()];
return addString(u8.getBytes());
}
case Const.CONSTANT_Class:
{
ConstantClass s = (ConstantClass) c;
ConstantUtf8 u8 = (ConstantUtf8) constants[s.getNameIndex()];
return addClass(u8.getBytes());
}
case Const.CONSTANT_NameAndType:
{
ConstantNameAndType n = (ConstantNameAndType) c;
ConstantUtf8 u8 = (ConstantUtf8) constants[n.getNameIndex()];
ConstantUtf8 u8_2 = (ConstantUtf8) constants[n.getSignatureIndex()];
return addNameAndType(u8.getBytes(), u8_2.getBytes());
}
case Const.CONSTANT_Utf8:
return addUtf8(((ConstantUtf8) c).getBytes());
case Const.CONSTANT_Double:
return addDouble(((ConstantDouble) c).getBytes());
case Const.CONSTANT_Float:
return addFloat(((ConstantFloat) c).getBytes());
case Const.CONSTANT_Long:
return addLong(((ConstantLong) c).getBytes());
case Const.CONSTANT_Integer:
return addInteger(((ConstantInteger) c).getBytes());
case Const.CONSTANT_InterfaceMethodref:
case Const.CONSTANT_Methodref:
case Const.CONSTANT_Fieldref:
{
ConstantCP m = (ConstantCP) c;
ConstantClass clazz = (ConstantClass) constants[m.getClassIndex()];
ConstantNameAndType n = (ConstantNameAndType) constants[m.getNameAndTypeIndex()];
ConstantUtf8 u8 = (ConstantUtf8) constants[clazz.getNameIndex()];
String class_name = u8.getBytes().replace('/', '.');
u8 = (ConstantUtf8) constants[n.getNameIndex()];
String name = u8.getBytes();
u8 = (ConstantUtf8) constants[n.getSignatureIndex()];
String signature = u8.getBytes();
switch(c.getTag()) {
case Const.CONSTANT_InterfaceMethodref:
return addInterfaceMethodref(class_name, name, signature);
case Const.CONSTANT_Methodref:
return addMethodref(class_name, name, signature);
case Const.CONSTANT_Fieldref:
return addFieldref(class_name, name, signature);
default:
// Never reached
throw new RuntimeException(""Unknown constant type "" + c);
}
}
default:
// Never reached
throw new RuntimeException(""Unknown constant type "" + c);
}
}","public int addConstant(final Constant c, final ConstantPoolGen cp) {
Constant[] constantArrayVar1 = constantArrayLiteral2;
switch(c.getTag()) {
case Const.CONSTANT_String:
{
ConstantString constantstringVar3 = constantstringLiteral4;
ConstantUtf8 constantutf8Var5 = constantutf8Literal6;
return addString(constantutf8Var5.getBytes());
}
case Const.CONSTANT_Class:
{
ConstantClass constantstringVar3 = constantclassLiteral7;
ConstantUtf8 constantutf8Var5 = constantutf8Literal8;
return addClass(constantutf8Var5.getBytes());
}
case Const.CONSTANT_NameAndType:
{
ConstantNameAndType constantnameandtypeVar9 = constantnameandtypeLiteral10;
ConstantUtf8 constantutf8Var5 = constantutf8Literal11;
ConstantUtf8 constantutf8Var12 = constantutf8Literal13;
return addNameAndType(constantutf8Var5.getBytes(), constantutf8Var12.getBytes());
}
case Const.CONSTANT_Utf8:
return addUtf8(((ConstantUtf8) c).getBytes());
case Const.CONSTANT_Double:
return addDouble(((ConstantDouble) c).getBytes());
case Const.CONSTANT_Float:
return addFloat(((ConstantFloat) c).getBytes());
case Const.CONSTANT_Long:
return addLong(((ConstantLong) c).getBytes());
case Const.CONSTANT_Integer:
return addInteger(((ConstantInteger) c).getBytes());
case Const.CONSTANT_InterfaceMethodref:
case Const.CONSTANT_Methodref:
case Const.CONSTANT_Fieldref:
{
ConstantCP constantcpVar14 = constantcpLiteral15;
ConstantClass constantclassVar16 = constantclassLiteral17;
ConstantNameAndType constantnameandtypeVar9 = constantnameandtypeLiteral18;
ConstantUtf8 constantutf8Var5 = constantutf8Literal19;
String stringVar20 = stringLiteral21;
constantutf8Var5 = (ConstantUtf8) constantArrayVar1[constantnameandtypeVar9.getNameIndex()];
String stringVar22 = stringLiteral23;
constantutf8Var5 = (ConstantUtf8) constantArrayVar1[constantnameandtypeVar9.getSignatureIndex()];
String stringVar24 = stringLiteral23;
switch(c.getTag()) {
case Const.CONSTANT_InterfaceMethodref:
return addInterfaceMethodref(stringVar20, stringVar22, stringVar24);
case Const.CONSTANT_Methodref:
return addMethodref(stringVar20, stringVar22, stringVar24);
case Const.CONSTANT_Fieldref:
return addFieldref(stringVar20, stringVar22, stringVar24);
default:
// Never reached
throw new RuntimeException(""Unknown constant type "" + c);
}
}
default:
// Never reached
throw new RuntimeException(""Unknown constant type "" + c);
}
}"
769,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,bcel,770,"return addInteger(((ConstantInteger) c).getBytes());
","public int addConstant(final Constant c, final ConstantPoolGen cp) {
Constant[] constants = cp.getConstantPool().getConstantPool();
switch(c.getTag()) {
case Const.CONSTANT_String:
{
ConstantString s = (ConstantString) c;
ConstantUtf8 u8 = (ConstantUtf8) constants[s.getStringIndex()];
return addString(u8.getBytes());
}
case Const.CONSTANT_Class:
{
ConstantClass s = (ConstantClass) c;
ConstantUtf8 u8 = (ConstantUtf8) constants[s.getNameIndex()];
return addClass(u8.getBytes());
}
case Const.CONSTANT_NameAndType:
{
ConstantNameAndType n = (ConstantNameAndType) c;
ConstantUtf8 u8 = (ConstantUtf8) constants[n.getNameIndex()];
ConstantUtf8 u8_2 = (ConstantUtf8) constants[n.getSignatureIndex()];
return addNameAndType(u8.getBytes(), u8_2.getBytes());
}
case Const.CONSTANT_Utf8:
return addUtf8(((ConstantUtf8) c).getBytes());
case Const.CONSTANT_Double:
return addDouble(((ConstantDouble) c).getBytes());
case Const.CONSTANT_Float:
return addFloat(((ConstantFloat) c).getBytes());
case Const.CONSTANT_Long:
return addLong(((ConstantLong) c).getBytes());
case Const.CONSTANT_Integer:
return addInteger(((ConstantInteger) c).getBytes());
case Const.CONSTANT_InterfaceMethodref:
case Const.CONSTANT_Methodref:
case Const.CONSTANT_Fieldref:
{
ConstantCP m = (ConstantCP) c;
ConstantClass clazz = (ConstantClass) constants[m.getClassIndex()];
ConstantNameAndType n = (ConstantNameAndType) constants[m.getNameAndTypeIndex()];
ConstantUtf8 u8 = (ConstantUtf8) constants[clazz.getNameIndex()];
String class_name = u8.getBytes().replace('/', '.');
u8 = (ConstantUtf8) constants[n.getNameIndex()];
String name = u8.getBytes();
u8 = (ConstantUtf8) constants[n.getSignatureIndex()];
String signature = u8.getBytes();
switch(c.getTag()) {
case Const.CONSTANT_InterfaceMethodref:
return addInterfaceMethodref(class_name, name, signature);
case Const.CONSTANT_Methodref:
return addMethodref(class_name, name, signature);
case Const.CONSTANT_Fieldref:
return addFieldref(class_name, name, signature);
default:
// Never reached
throw new RuntimeException(""Unknown constant type "" + c);
}
}
default:
// Never reached
throw new RuntimeException(""Unknown constant type "" + c);
}
}","public int addConstant(final Constant c, final ConstantPoolGen cp) {
Constant[] constantArrayVar1 = constantArrayLiteral2;
switch(c.getTag()) {
case Const.CONSTANT_String:
{
ConstantString constantstringVar3 = constantstringLiteral4;
ConstantUtf8 constantutf8Var5 = constantutf8Literal6;
return addString(constantutf8Var5.getBytes());
}
case Const.CONSTANT_Class:
{
ConstantClass constantstringVar3 = constantclassLiteral7;
ConstantUtf8 constantutf8Var5 = constantutf8Literal8;
return addClass(constantutf8Var5.getBytes());
}
case Const.CONSTANT_NameAndType:
{
ConstantNameAndType constantnameandtypeVar9 = constantnameandtypeLiteral10;
ConstantUtf8 constantutf8Var5 = constantutf8Literal11;
ConstantUtf8 constantutf8Var12 = constantutf8Literal13;
return addNameAndType(constantutf8Var5.getBytes(), constantutf8Var12.getBytes());
}
case Const.CONSTANT_Utf8:
return addUtf8(((ConstantUtf8) c).getBytes());
case Const.CONSTANT_Double:
return addDouble(((ConstantDouble) c).getBytes());
case Const.CONSTANT_Float:
return addFloat(((ConstantFloat) c).getBytes());
case Const.CONSTANT_Long:
return addLong(((ConstantLong) c).getBytes());
case Const.CONSTANT_Integer:
return addInteger(((ConstantInteger) c).getBytes());
case Const.CONSTANT_InterfaceMethodref:
case Const.CONSTANT_Methodref:
case Const.CONSTANT_Fieldref:
{
ConstantCP constantcpVar14 = constantcpLiteral15;
ConstantClass constantclassVar16 = constantclassLiteral17;
ConstantNameAndType constantnameandtypeVar9 = constantnameandtypeLiteral18;
ConstantUtf8 constantutf8Var5 = constantutf8Literal19;
String stringVar20 = stringLiteral21;
constantutf8Var5 = (ConstantUtf8) constantArrayVar1[constantnameandtypeVar9.getNameIndex()];
String stringVar22 = stringLiteral23;
constantutf8Var5 = (ConstantUtf8) constantArrayVar1[constantnameandtypeVar9.getSignatureIndex()];
String stringVar24 = stringLiteral23;
switch(c.getTag()) {
case Const.CONSTANT_InterfaceMethodref:
return addInterfaceMethodref(stringVar20, stringVar22, stringVar24);
case Const.CONSTANT_Methodref:
return addMethodref(stringVar20, stringVar22, stringVar24);
case Const.CONSTANT_Fieldref:
return addFieldref(stringVar20, stringVar22, stringVar24);
default:
// Never reached
throw new RuntimeException(""Unknown constant type "" + c);
}
}
default:
// Never reached
throw new RuntimeException(""Unknown constant type "" + c);
}
}"
770,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,bcel,771,"ConstantString s = (ConstantString) c;
","public int addConstant(final Constant c, final ConstantPoolGen cp) {
Constant[] constants = cp.getConstantPool().getConstantPool();
switch(c.getTag()) {
case Const.CONSTANT_String:
{
ConstantString s = (ConstantString) c;
ConstantUtf8 u8 = (ConstantUtf8) constants[s.getStringIndex()];
return addString(u8.getBytes());
}
case Const.CONSTANT_Class:
{
ConstantClass s = (ConstantClass) c;
ConstantUtf8 u8 = (ConstantUtf8) constants[s.getNameIndex()];
return addClass(u8.getBytes());
}
case Const.CONSTANT_NameAndType:
{
ConstantNameAndType n = (ConstantNameAndType) c;
ConstantUtf8 u8 = (ConstantUtf8) constants[n.getNameIndex()];
ConstantUtf8 u8_2 = (ConstantUtf8) constants[n.getSignatureIndex()];
return addNameAndType(u8.getBytes(), u8_2.getBytes());
}
case Const.CONSTANT_Utf8:
return addUtf8(((ConstantUtf8) c).getBytes());
case Const.CONSTANT_Double:
return addDouble(((ConstantDouble) c).getBytes());
case Const.CONSTANT_Float:
return addFloat(((ConstantFloat) c).getBytes());
case Const.CONSTANT_Long:
return addLong(((ConstantLong) c).getBytes());
case Const.CONSTANT_Integer:
return addInteger(((ConstantInteger) c).getBytes());
case Const.CONSTANT_InterfaceMethodref:
case Const.CONSTANT_Methodref:
case Const.CONSTANT_Fieldref:
{
ConstantCP m = (ConstantCP) c;
ConstantClass clazz = (ConstantClass) constants[m.getClassIndex()];
ConstantNameAndType n = (ConstantNameAndType) constants[m.getNameAndTypeIndex()];
ConstantUtf8 u8 = (ConstantUtf8) constants[clazz.getNameIndex()];
String class_name = u8.getBytes().replace('/', '.');
u8 = (ConstantUtf8) constants[n.getNameIndex()];
String name = u8.getBytes();
u8 = (ConstantUtf8) constants[n.getSignatureIndex()];
String signature = u8.getBytes();
switch(c.getTag()) {
case Const.CONSTANT_InterfaceMethodref:
return addInterfaceMethodref(class_name, name, signature);
case Const.CONSTANT_Methodref:
return addMethodref(class_name, name, signature);
case Const.CONSTANT_Fieldref:
return addFieldref(class_name, name, signature);
default:
// Never reached
throw new RuntimeException(""Unknown constant type "" + c);
}
}
default:
// Never reached
throw new RuntimeException(""Unknown constant type "" + c);
}
}","public int addConstant(final Constant c, final ConstantPoolGen cp) {
Constant[] constantArrayVar1 = constantArrayLiteral2;
switch(c.getTag()) {
case Const.CONSTANT_String:
{
ConstantString constantstringVar3 = constantstringLiteral4;
ConstantUtf8 constantutf8Var5 = constantutf8Literal6;
return addString(constantutf8Var5.getBytes());
}
case Const.CONSTANT_Class:
{
ConstantClass constantstringVar3 = constantclassLiteral7;
ConstantUtf8 constantutf8Var5 = constantutf8Literal8;
return addClass(constantutf8Var5.getBytes());
}
case Const.CONSTANT_NameAndType:
{
ConstantNameAndType constantnameandtypeVar9 = constantnameandtypeLiteral10;
ConstantUtf8 constantutf8Var5 = constantutf8Literal11;
ConstantUtf8 constantutf8Var12 = constantutf8Literal13;
return addNameAndType(constantutf8Var5.getBytes(), constantutf8Var12.getBytes());
}
case Const.CONSTANT_Utf8:
return addUtf8(((ConstantUtf8) c).getBytes());
case Const.CONSTANT_Double:
return addDouble(((ConstantDouble) c).getBytes());
case Const.CONSTANT_Float:
return addFloat(((ConstantFloat) c).getBytes());
case Const.CONSTANT_Long:
return addLong(((ConstantLong) c).getBytes());
case Const.CONSTANT_Integer:
return addInteger(((ConstantInteger) c).getBytes());
case Const.CONSTANT_InterfaceMethodref:
case Const.CONSTANT_Methodref:
case Const.CONSTANT_Fieldref:
{
ConstantCP constantcpVar14 = constantcpLiteral15;
ConstantClass constantclassVar16 = constantclassLiteral17;
ConstantNameAndType constantnameandtypeVar9 = constantnameandtypeLiteral18;
ConstantUtf8 constantutf8Var5 = constantutf8Literal19;
String stringVar20 = stringLiteral21;
constantutf8Var5 = (ConstantUtf8) constantArrayVar1[constantnameandtypeVar9.getNameIndex()];
String stringVar22 = stringLiteral23;
constantutf8Var5 = (ConstantUtf8) constantArrayVar1[constantnameandtypeVar9.getSignatureIndex()];
String stringVar24 = stringLiteral23;
switch(c.getTag()) {
case Const.CONSTANT_InterfaceMethodref:
return addInterfaceMethodref(stringVar20, stringVar22, stringVar24);
case Const.CONSTANT_Methodref:
return addMethodref(stringVar20, stringVar22, stringVar24);
case Const.CONSTANT_Fieldref:
return addFieldref(stringVar20, stringVar22, stringVar24);
default:
// Never reached
throw new RuntimeException(""Unknown constant type "" + c);
}
}
default:
// Never reached
throw new RuntimeException(""Unknown constant type "" + c);
}
}"
775,PERFORMANCE,DM_FP_NUMBER_CTOR,FP,bcel,776,"return new Double(value);
","@Override
public Number getValue() {
return new Double(value);
}","@Override
public Number getValue() {
return new Double(value);
}"
777,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,bcel,778,"return new ArrayElementValueGen((ArrayElementValue) value, cpool,
","public static ElementValueGen copy(final ElementValue value, final ConstantPoolGen cpool, final boolean copyPoolEntries) {
switch(value.getElementValueType()) {
case 'B':
case 'C':
case 'D':
case 'F':
case 'I':
case 'J':
case 'S':
case 'Z':
case 's':
return new SimpleElementValueGen((SimpleElementValue) value, cpool, copyPoolEntries);
case 'e':
return new EnumElementValueGen((EnumElementValue) value, cpool, copyPoolEntries);
case '@':
return new AnnotationElementValueGen((AnnotationElementValue) value, cpool, copyPoolEntries);
case '[':
return new ArrayElementValueGen((ArrayElementValue) value, cpool, copyPoolEntries);
case 'c':
return new ClassElementValueGen((ClassElementValue) value, cpool, copyPoolEntries);
default:
throw new RuntimeException(""Not implemented yet! ("" + value.getElementValueType() + "")"");
}
}","public static ElementValueGen copy(final ElementValue value, final ConstantPoolGen cpool, final boolean copyPoolEntries) {
switch(value.getElementValueType()) {
case 'B':
case 'C':
case 'D':
case 'F':
case 'I':
case 'J':
case 'S':
case 'Z':
case 's':
return new SimpleElementValueGen((SimpleElementValue) value, cpool, copyPoolEntries);
case 'e':
return new EnumElementValueGen((EnumElementValue) value, cpool, copyPoolEntries);
case '@':
return new AnnotationElementValueGen((AnnotationElementValue) value, cpool, copyPoolEntries);
case '[':
return new ArrayElementValueGen((ArrayElementValue) value, cpool, copyPoolEntries);
case 'c':
return new ClassElementValueGen((ClassElementValue) value, cpool, copyPoolEntries);
default:
throw new RuntimeException(""Not implemented yet! ("" + value.getElementValueType() + "")"");
}
}"
779,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,bcel,780,"return new SimpleElementValueGen((SimpleElementValue) value, cpool,
","public static ElementValueGen copy(final ElementValue value, final ConstantPoolGen cpool, final boolean copyPoolEntries) {
switch(value.getElementValueType()) {
case 'B':
case 'C':
case 'D':
case 'F':
case 'I':
case 'J':
case 'S':
case 'Z':
case 's':
return new SimpleElementValueGen((SimpleElementValue) value, cpool, copyPoolEntries);
case 'e':
return new EnumElementValueGen((EnumElementValue) value, cpool, copyPoolEntries);
case '@':
return new AnnotationElementValueGen((AnnotationElementValue) value, cpool, copyPoolEntries);
case '[':
return new ArrayElementValueGen((ArrayElementValue) value, cpool, copyPoolEntries);
case 'c':
return new ClassElementValueGen((ClassElementValue) value, cpool, copyPoolEntries);
default:
throw new RuntimeException(""Not implemented yet! ("" + value.getElementValueType() + "")"");
}
}","public static ElementValueGen copy(final ElementValue value, final ConstantPoolGen cpool, final boolean copyPoolEntries) {
switch(value.getElementValueType()) {
case 'B':
case 'C':
case 'D':
case 'F':
case 'I':
case 'J':
case 'S':
case 'Z':
case 's':
return new SimpleElementValueGen((SimpleElementValue) value, cpool, copyPoolEntries);
case 'e':
return new EnumElementValueGen((EnumElementValue) value, cpool, copyPoolEntries);
case '@':
return new AnnotationElementValueGen((AnnotationElementValue) value, cpool, copyPoolEntries);
case '[':
return new ArrayElementValueGen((ArrayElementValue) value, cpool, copyPoolEntries);
case 'c':
return new ClassElementValueGen((ClassElementValue) value, cpool, copyPoolEntries);
default:
throw new RuntimeException(""Not implemented yet! ("" + value.getElementValueType() + "")"");
}
}"
781,PERFORMANCE,DM_FP_NUMBER_CTOR,FP,bcel,782,"return new Float(value);
","@Override
public Number getValue() {
return new Float(value);
}","@Override
public Number getValue() {
return new Float(value);
}"
785,MALICIOUS_CODE,MS_OOI_PKGPROTECT,FP,bcel,786,public static final Instruction[] INSTRUCTIONS = new Instruction[256];,public static final Instruction[] INSTRUCTIONS = new Instruction[256];,public static final Instruction[] instructionArrayVar1 = instructionArrayLiteral2;
792,MALICIOUS_CODE,EI_EXPOSE_REP,FP,bcel,793,"return byte_positions;
","public int[] getInstructionPositions() {
return byte_positions;
}","public int[] getInstructionPositions() {
return byte_positions;
}"
800,MALICIOUS_CODE,EI_EXPOSE_REP,FP,bcel,801,"return match;
","public int[] getMatchs() {
return match;
}","public int[] getMatchs() {
return match;
}"
802,MALICIOUS_CODE,EI_EXPOSE_REP,FP,bcel,803,"return targets;
","public InstructionHandle[] getTargets() {
return targets;
}","public InstructionHandle[] getTargets() {
return targets;
}"
805,DODGY_CODE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,FP,bcel,806,"BranchHandle bh = (BranchHandle) branch_map.get(bi);
","@Override
public void visitBranchInstruction(final BranchInstruction bi) {
BranchHandle bh = (BranchHandle) branch_map.get(bi);
int pos = bh.getPosition();
String name = bi.getName() + ""_"" + pos;
if (bi instanceof Select) {
Select s = (Select) bi;
branches.add(bi);
StringBuilder args = new StringBuilder(""new int[] { "");
int[] matchs = s.getMatchs();
for (int i = 0; i < matchs.length; i++) {
args.append(matchs[i]);
if (i < matchs.length - 1) {
args.append("", "");
}
}
args.append("" }"");
_out.print(""Select "" + name + "" = new "" + bi.getName().toUpperCase(Locale.ENGLISH) + ""("" + args + "", new InstructionHandle[] { "");
for (int i = 0; i < matchs.length; i++) {
_out.print(""null"");
if (i < matchs.length - 1) {
_out.print("", "");
}
}
_out.println("" }, null);"");
} else {
int t_pos = bh.getTarget().getPosition();
String target;
if (pos > t_pos) {
target = ""ih_"" + t_pos;
} else {
branches.add(bi);
target = ""null"";
}
_out.println(""    BranchInstruction "" + name + "" = _factory.createBranchInstruction("" + CONSTANT_PREFIX + bi.getName().toUpperCase(Locale.ENGLISH) + "", "" + target + "");"");
}
if (bh.hasTargeters()) {
_out.println(""    ih_"" + pos + "" = il.append("" + name + "");"");
} else {
_out.println(""    il.append("" + name + "");"");
}
}","@Override
public void visitBranchInstruction(final BranchInstruction bi) {
BranchHandle branchhandleVar1 = branchhandleLiteral2;
int intVar3 = intLiteral4;
String stringVar5 = stringLiteral6;
if (bi instanceof Select) {
Select selectVar7 = selectLiteral8;
branches.add(bi);
StringBuilder stringbuilderVar9 = stringbuilderLiteral10;
int[] intArrayVar11 = intArrayLiteral12;
for (int intVar18 = intLiteral19; intVar13 < intLiteral1; intVar13++) {
stringbuilderVar9.append(intArrayVar11[intVar13]);
if (intVar13 < intArrayVar11.length - 1) {
stringbuilderVar9.append("", "");
}
}
stringbuilderVar9.append("" }"");
_out.print(""Select "" + stringVar5 + "" = new "" + bi.getName().toUpperCase(Locale.ENGLISH) + ""("" + stringbuilderVar9 + "", new InstructionHandle[] { "");
for (int intVar18 = intLiteral19; intVar13 < intArrayVar11.length; intVar13++) {
_out.print(""null"");
if (intVar13 < intArrayVar11.length - 1) {
_out.print("", "");
}
}
_out.println("" }, null);"");
} else {
int intVar15 = intLiteral16;
String stringVar17;
if (intVar3 > intVar15) {
stringVar17 = ""ih_"" + intVar15;
} else {
branches.add(bi);
stringVar17 = ""null"";
}
_out.println(""    BranchInstruction "" + stringVar5 + "" = _factory.createBranchInstruction("" + CONSTANT_PREFIX + bi.getName().toUpperCase(Locale.ENGLISH) + "", "" + stringVar17 + "");"");
}
if (branchhandleVar1.hasTargeters()) {
_out.println(""    ih_"" + intVar3 + "" = il.append("" + stringVar5 + "");"");
} else {
_out.println(""    il.append("" + stringVar5 + "");"");
}
}"
806,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,bcel,807,"type = ((NEWARRAY) i).getType();
","@Override
public void visitAllocationInstruction(final AllocationInstruction i) {
Type type;
if (i instanceof CPInstruction) {
type = ((CPInstruction) i).getType(_cp);
} else {
type = ((NEWARRAY) i).getType();
}
short opcode = ((Instruction) i).getOpcode();
int dim = 1;
switch(opcode) {
case Const.NEW:
_out.println(""il.append(_factory.createNew(\"""" + ((ObjectType) type).getClassName() + ""\""));"");
break;
case Const.MULTIANEWARRAY:
dim = ((MULTIANEWARRAY) i).getDimensions();
case Const.ANEWARRAY:
case Const.NEWARRAY:
if (type instanceof ArrayType) {
type = ((ArrayType) type).getBasicType();
}
_out.println(""il.append(_factory.createNewArray("" + BCELifier.printType(type) + "", (short) "" + dim + ""));"");
break;
default:
throw new RuntimeException(""Oops: "" + opcode);
}
}","@Override
public void visitAllocationInstruction(final AllocationInstruction i) {
Type typeVar1;
if (i instanceof CPInstruction) {
typeVar1 = ((CPInstruction) i).getType(_cp);
} else {
typeVar1 = ((NEWARRAY) i).getType();
}
short shortVar2 = shortLiteral3;
int intVar4 = intLiteral5;
switch(shortVar2) {
case Const.NEW:
_out.println(""il.append(_factory.createNew(\"""" + ((ObjectType) typeVar1).getClassName() + ""\""));"");
break;
case Const.MULTIANEWARRAY:
intVar4 = ((MULTIANEWARRAY) i).getDimensions();
case Const.ANEWARRAY:
case Const.NEWARRAY:
if (typeVar1 instanceof ArrayType) {
typeVar1 = ((ArrayType) typeVar1).getBasicType();
}
_out.println(""il.append(_factory.createNewArray("" + BCELifier.printType(typeVar1) + "", (short) "" + intVar4 + ""));"");
break;
default:
throw new RuntimeException(""Oops: "" + shortVar2);
}
}"
821,DODGY_CODE,DB_DUPLICATE_SWITCH_CLAUSES,FP,bcel,822,"index = bytes.readShort();
buf.append(constant_html.referenceConstant(index));
break;
","private String codeToHTML(final ByteSequence bytes, final int method_number) throws IOException {
short opcode = (short) bytes.readUnsignedByte();
String name;
String signature;
int default_offset = 0;
int low;
int high;
int index;
int class_index;
int vindex;
int constant;
int[] jump_table;
int no_pad_bytes = 0;
int offset;
StringBuilder buf = new StringBuilder(256);
buf.append(""<TT>"").append(Const.getOpcodeName(opcode)).append(""</TT></TD><TD>"");
if ((opcode == Const.TABLESWITCH) || (opcode == Const.LOOKUPSWITCH)) {
int remainder = bytes.getIndex() % 4;
no_pad_bytes = (remainder == 0) ? 0 : 4 - remainder;
for (int i = 0; i < no_pad_bytes; i++) {
bytes.readByte();
}
default_offset = bytes.readInt();
}
switch(opcode) {
case Const.TABLESWITCH:
low = bytes.readInt();
high = bytes.readInt();
offset = bytes.getIndex() - 12 - no_pad_bytes - 1;
default_offset += offset;
buf.append(""<TABLE BORDER=1><TR>"");
jump_table = new int[high - low + 1];
for (int i = 0; i < jump_table.length; i++) {
jump_table[i] = offset + bytes.readInt();
buf.append(""<TH>"").append(low + i).append(""</TH>"");
}
buf.append(""<TH>default</TH></TR>\n<TR>"");
for (int element : jump_table) {
buf.append(""<TD><A HREF=\""#code"").append(method_number).append(""@"").append(element).append(""\"">"").append(element).append(""</A></TD>"");
}
buf.append(""<TD><A HREF=\""#code"").append(method_number).append(""@"").append(default_offset).append(""\"">"").append(default_offset).append(""</A></TD></TR>\n</TABLE>\n"");
break;
case Const.LOOKUPSWITCH:
int npairs = bytes.readInt();
offset = bytes.getIndex() - 8 - no_pad_bytes - 1;
jump_table = new int[npairs];
default_offset += offset;
buf.append(""<TABLE BORDER=1><TR>"");
for (int i = 0; i < npairs; i++) {
int match = bytes.readInt();
jump_table[i] = offset + bytes.readInt();
buf.append(""<TH>"").append(match).append(""</TH>"");
}
buf.append(""<TH>default</TH></TR>\n<TR>"");
for (int i = 0; i < npairs; i++) {
buf.append(""<TD><A HREF=\""#code"").append(method_number).append(""@"").append(jump_table[i]).append(""\"">"").append(jump_table[i]).append(""</A></TD>"");
}
buf.append(""<TD><A HREF=\""#code"").append(method_number).append(""@"").append(default_offset).append(""\"">"").append(default_offset).append(""</A></TD></TR>\n</TABLE>\n"");
break;
case Const.GOTO:
case Const.IFEQ:
case Const.IFGE:
case Const.IFGT:
case Const.IFLE:
case Const.IFLT:
case Const.IFNE:
case Const.IFNONNULL:
case Const.IFNULL:
case Const.IF_ACMPEQ:
case Const.IF_ACMPNE:
case Const.IF_ICMPEQ:
case Const.IF_ICMPGE:
case Const.IF_ICMPGT:
case Const.IF_ICMPLE:
case Const.IF_ICMPLT:
case Const.IF_ICMPNE:
case Const.JSR:
index = bytes.getIndex() + bytes.readShort() - 1;
buf.append(""<A HREF=\""#code"").append(method_number).append(""@"").append(index).append(""\"">"").append(index).append(""</A>"");
break;
case Const.GOTO_W:
case Const.JSR_W:
int windex = bytes.getIndex() + bytes.readInt() - 1;
buf.append(""<A HREF=\""#code"").append(method_number).append(""@"").append(windex).append(""\"">"").append(windex).append(""</A>"");
break;
case Const.ALOAD:
case Const.ASTORE:
case Const.DLOAD:
case Const.DSTORE:
case Const.FLOAD:
case Const.FSTORE:
case Const.ILOAD:
case Const.ISTORE:
case Const.LLOAD:
case Const.LSTORE:
case Const.RET:
if (wide) {
vindex = bytes.readShort();
wide = false;
} else {
vindex = bytes.readUnsignedByte();
}
buf.append(""%"").append(vindex);
break;
case Const.WIDE:
wide = true;
buf.append(""(wide)"");
break;
case Const.NEWARRAY:
buf.append(""<FONT COLOR=\""#00FF00\"">"").append(Const.getTypeName(bytes.readByte())).append(""</FONT>"");
break;
case Const.GETFIELD:
case Const.GETSTATIC:
case Const.PUTFIELD:
case Const.PUTSTATIC:
index = bytes.readShort();
ConstantFieldref c1 = (ConstantFieldref) constant_pool.getConstant(index, Const.CONSTANT_Fieldref);
class_index = c1.getClassIndex();
name = constant_pool.getConstantString(class_index, Const.CONSTANT_Class);
name = Utility.compactClassName(name, false);
index = c1.getNameAndTypeIndex();
String field_name = constant_pool.constantToString(index, Const.CONSTANT_NameAndType);
if (name.equals(class_name)) {
buf.append(""<A HREF=\"""").append(class_name).append(""_methods.html#field"").append(field_name).append(""\"" TARGET=Methods>"").append(field_name).append(""</A>\n"");
} else {
buf.append(constant_html.referenceConstant(class_index)).append(""."").append(field_name);
}
break;
case Const.CHECKCAST:
case Const.INSTANCEOF:
case Const.NEW:
index = bytes.readShort();
buf.append(constant_html.referenceConstant(index));
break;
case Const.INVOKESPECIAL:
case Const.INVOKESTATIC:
case Const.INVOKEVIRTUAL:
case Const.INVOKEINTERFACE:
case Const.INVOKEDYNAMIC:
int m_index = bytes.readShort();
String str;
if (opcode == Const.INVOKEINTERFACE) {
bytes.readUnsignedByte();
bytes.readUnsignedByte();
ConstantInterfaceMethodref c = (ConstantInterfaceMethodref) constant_pool.getConstant(m_index, Const.CONSTANT_InterfaceMethodref);
class_index = c.getClassIndex();
index = c.getNameAndTypeIndex();
name = Class2HTML.referenceClass(class_index);
} else if (opcode == Const.INVOKEDYNAMIC) {
bytes.readUnsignedByte();
bytes.readUnsignedByte();
ConstantInvokeDynamic c = (ConstantInvokeDynamic) constant_pool.getConstant(m_index, Const.CONSTANT_InvokeDynamic);
index = c.getNameAndTypeIndex();
name = ""#"" + c.getBootstrapMethodAttrIndex();
} else {
// UNDONE: Java8 now allows INVOKESPECIAL and INVOKESTATIC to
ConstantMethodref c = (ConstantMethodref) constant_pool.getConstant(m_index, Const.CONSTANT_Methodref);
class_index = c.getClassIndex();
index = c.getNameAndTypeIndex();
name = Class2HTML.referenceClass(class_index);
}
str = Class2HTML.toHTML(constant_pool.constantToString(constant_pool.getConstant(index, Const.CONSTANT_NameAndType)));
ConstantNameAndType c2 = (ConstantNameAndType) constant_pool.getConstant(index, Const.CONSTANT_NameAndType);
signature = constant_pool.constantToString(c2.getSignatureIndex(), Const.CONSTANT_Utf8);
String[] args = Utility.methodSignatureArgumentTypes(signature, false);
String type = Utility.methodSignatureReturnType(signature, false);
buf.append(name).append("".<A HREF=\"""").append(class_name).append(""_cp.html#cp"").append(m_index).append(""\"" TARGET=ConstantPool>"").append(str).append(""</A>"").append(""("");
for (int i = 0; i < args.length; i++) {
buf.append(Class2HTML.referenceType(args[i]));
if (i < args.length - 1) {
buf.append("", "");
}
}
buf.append(""):"").append(Class2HTML.referenceType(type));
break;
case Const.LDC_W:
case Const.LDC2_W:
index = bytes.readShort();
buf.append(""<A HREF=\"""").append(class_name).append(""_cp.html#cp"").append(index).append(""\"" TARGET=\""ConstantPool\"">"").append(Class2HTML.toHTML(constant_pool.constantToString(index, constant_pool.getConstant(index).getTag()))).append(""</a>"");
break;
case Const.LDC:
index = bytes.readUnsignedByte();
buf.append(""<A HREF=\"""").append(class_name).append(""_cp.html#cp"").append(index).append(""\"" TARGET=\""ConstantPool\"">"").append(Class2HTML.toHTML(constant_pool.constantToString(index, constant_pool.getConstant(index).getTag()))).append(""</a>"");
break;
case Const.ANEWARRAY:
index = bytes.readShort();
buf.append(constant_html.referenceConstant(index));
break;
case Const.MULTIANEWARRAY:
index = bytes.readShort();
int dimensions = bytes.readByte();
buf.append(constant_html.referenceConstant(index)).append("":"").append(dimensions).append(""-dimensional"");
break;
case Const.IINC:
if (wide) {
vindex = bytes.readShort();
constant = bytes.readShort();
wide = false;
} else {
vindex = bytes.readUnsignedByte();
constant = bytes.readByte();
}
buf.append(""%"").append(vindex).append("" "").append(constant);
break;
default:
if (Const.getNoOfOperands(opcode) > 0) {
for (int i = 0; i < Const.getOperandTypeCount(opcode); i++) {
switch(Const.getOperandType(opcode, i)) {
case Const.T_BYTE:
buf.append(bytes.readUnsignedByte());
break;
case // Either branch or index
Const.T_SHORT:
buf.append(bytes.readShort());
break;
case Const.T_INT:
buf.append(bytes.readInt());
break;
default:
// Never reached
throw new IllegalStateException(""Unreachable default case reached! "" + Const.getOperandType(opcode, i));
}
buf.append(""&nbsp;"");
}
}
}
buf.append(""</TD>"");
return buf.toString();
}","private String codeToHTML(final ByteSequence bytes, final int method_number) throws IOException {
short shortVar1 = shortLiteral2;
String stringVar3;
String stringVar4;
int intVar5 = intLiteral6;
int intVar7;
int intVar8;
int intVar9;
int intVar10;
int intVar11;
int intVar12;
int[] intArrayVar13;
int intVar14 = intLiteral6;
int intVar15;
StringBuilder stringbuilderVar16 = stringbuilderLiteral17;
stringbuilderVar16.append(""<TT>"").append(Const.getOpcodeName(shortVar1)).append(""</TT></TD><TD>"");
if ((shortVar1 == Const.TABLESWITCH) || (shortVar1 == Const.LOOKUPSWITCH)) {
int intVar18 = intLiteral19;
intVar14 = (intVar18 == 0) ? 0 : 4 - intVar18;
for (int intVar46 = intLiteral47; intVar20 < intLiteral1; intVar20++) {
bytes.readByte();
}
intVar5 = bytes.readInt();
}
switch(shortVar1) {
case Const.TABLESWITCH:
intVar7 = bytes.readInt();
intVar8 = bytes.readInt();
intVar15 = bytes.getIndex() - 12 - intVar14 - 1;
intVar5 += intVar15;
stringbuilderVar16.append(""<TABLE BORDER=1><TR>"");
intArrayVar13 = new int[intVar8 - intVar7 + 1];
for (int intVar46 = intLiteral47; intVar20 < intLiteral2; intVar20++) {
intArrayVar13[intVar20] = intVar15 + bytes.readInt();
stringbuilderVar16.append(""<TH>"").append(intVar7 + intVar20).append(""</TH>"");
}
stringbuilderVar16.append(""<TH>default</TH></TR>\n<TR>"");
for (int intVar21 : intArrayVar13) {
stringbuilderVar16.append(""<TD><A HREF=\""#code"").append(method_number).append(""@"").append(intVar21).append(""\"">"").append(intVar21).append(""</A></TD>"");
}
stringbuilderVar16.append(""<TD><A HREF=\""#code"").append(method_number).append(""@"").append(intVar5).append(""\"">"").append(intVar5).append(""</A></TD></TR>\n</TABLE>\n"");
break;
case Const.LOOKUPSWITCH:
int intVar22 = intLiteral23;
intVar15 = bytes.getIndex() - 8 - intVar14 - 1;
intArrayVar13 = new int[intVar22];
intVar5 += intVar15;
stringbuilderVar16.append(""<TABLE BORDER=1><TR>"");
for (int intVar46 = intLiteral47; intVar20 < intLiteral3; intVar20++) {
int intVar24 = intLiteral23;
intArrayVar13[intVar20] = intVar15 + bytes.readInt();
stringbuilderVar16.append(""<TH>"").append(intVar24).append(""</TH>"");
}
stringbuilderVar16.append(""<TH>default</TH></TR>\n<TR>"");
for (int intVar46 = intLiteral47; intVar20 < intVar22; intVar20++) {
stringbuilderVar16.append(""<TD><A HREF=\""#code"").append(method_number).append(""@"").append(intArrayVar13[intVar20]).append(""\"">"").append(intArrayVar13[intVar20]).append(""</A></TD>"");
}
stringbuilderVar16.append(""<TD><A HREF=\""#code"").append(method_number).append(""@"").append(intVar5).append(""\"">"").append(intVar5).append(""</A></TD></TR>\n</TABLE>\n"");
break;
case Const.GOTO:
case Const.IFEQ:
case Const.IFGE:
case Const.IFGT:
case Const.IFLE:
case Const.IFLT:
case Const.IFNE:
case Const.IFNONNULL:
case Const.IFNULL:
case Const.IF_ACMPEQ:
case Const.IF_ACMPNE:
case Const.IF_ICMPEQ:
case Const.IF_ICMPGE:
case Const.IF_ICMPGT:
case Const.IF_ICMPLE:
case Const.IF_ICMPLT:
case Const.IF_ICMPNE:
case Const.JSR:
intVar9 = bytes.getIndex() + bytes.readShort() - 1;
stringbuilderVar16.append(""<A HREF=\""#code"").append(method_number).append(""@"").append(intVar9).append(""\"">"").append(intVar9).append(""</A>"");
break;
case Const.GOTO_W:
case Const.JSR_W:
int intVar25 = intLiteral26;
stringbuilderVar16.append(""<A HREF=\""#code"").append(method_number).append(""@"").append(intVar25).append(""\"">"").append(intVar25).append(""</A>"");
break;
case Const.ALOAD:
case Const.ASTORE:
case Const.DLOAD:
case Const.DSTORE:
case Const.FLOAD:
case Const.FSTORE:
case Const.ILOAD:
case Const.ISTORE:
case Const.LLOAD:
case Const.LSTORE:
case Const.RET:
if (wide) {
intVar11 = bytes.readShort();
wide = false;
} else {
intVar11 = bytes.readUnsignedByte();
}
stringbuilderVar16.append(""%"").append(intVar11);
break;
case Const.WIDE:
wide = true;
stringbuilderVar16.append(""(wide)"");
break;
case Const.NEWARRAY:
stringbuilderVar16.append(""<FONT COLOR=\""#00FF00\"">"").append(Const.getTypeName(bytes.readByte())).append(""</FONT>"");
break;
case Const.GETFIELD:
case Const.GETSTATIC:
case Const.PUTFIELD:
case Const.PUTSTATIC:
intVar9 = bytes.readShort();
ConstantFieldref constantfieldrefVar27 = constantfieldrefLiteral28;
intVar10 = constantfieldrefVar27.getClassIndex();
stringVar3 = constant_pool.getConstantString(intVar10, Const.CONSTANT_Class);
stringVar3 = Utility.compactClassName(stringVar3, false);
intVar9 = constantfieldrefVar27.getNameAndTypeIndex();
String stringVar29 = stringLiteral30;
if (stringVar3.equals(class_name)) {
stringbuilderVar16.append(""<A HREF=\"""").append(class_name).append(""_methods.html#field"").append(stringVar29).append(""\"" TARGET=Methods>"").append(stringVar29).append(""</A>\n"");
} else {
stringbuilderVar16.append(constant_html.referenceConstant(intVar10)).append(""."").append(stringVar29);
}
break;
case Const.CHECKCAST:
case Const.INSTANCEOF:
case Const.NEW:
intVar9 = bytes.readShort();
stringbuilderVar16.append(constant_html.referenceConstant(intVar9));
break;
case Const.INVOKESPECIAL:
case Const.INVOKESTATIC:
case Const.INVOKEVIRTUAL:
case Const.INVOKEINTERFACE:
case Const.INVOKEDYNAMIC:
int intVar31 = intLiteral32;
String stringVar33;
if (shortVar1 == Const.INVOKEINTERFACE) {
bytes.readUnsignedByte();
bytes.readUnsignedByte();
ConstantInterfaceMethodref constantinterfacemethodrefVar34 = constantinterfacemethodrefLiteral35;
intVar10 = constantinterfacemethodrefVar34.getClassIndex();
intVar9 = constantinterfacemethodrefVar34.getNameAndTypeIndex();
stringVar3 = Class2HTML.referenceClass(intVar10);
} else if (shortVar1 == Const.INVOKEDYNAMIC) {
bytes.readUnsignedByte();
bytes.readUnsignedByte();
ConstantInvokeDynamic constantinterfacemethodrefVar34 = constantinvokedynamicLiteral36;
intVar9 = constantinterfacemethodrefVar34.getNameAndTypeIndex();
stringVar3 = ""#"" + constantinterfacemethodrefVar34.getBootstrapMethodAttrIndex();
} else {
// UNDONE: Java8 now allows INVOKESPECIAL and INVOKESTATIC to
ConstantMethodref constantinterfacemethodrefVar34 = constantmethodrefLiteral37;
intVar10 = constantinterfacemethodrefVar34.getClassIndex();
intVar9 = constantinterfacemethodrefVar34.getNameAndTypeIndex();
stringVar3 = Class2HTML.referenceClass(intVar10);
}
stringVar33 = Class2HTML.toHTML(constant_pool.constantToString(constant_pool.getConstant(intVar9, Const.CONSTANT_NameAndType)));
ConstantNameAndType constantnameandtypeVar38 = constantnameandtypeLiteral39;
stringVar4 = constant_pool.constantToString(constantnameandtypeVar38.getSignatureIndex(), Const.CONSTANT_Utf8);
String[] stringArrayVar40 = stringArrayLiteral41;
String stringVar42 = stringLiteral43;
stringbuilderVar16.append(stringVar3).append("".<A HREF=\"""").append(class_name).append(""_cp.html#cp"").append(intVar31).append(""\"" TARGET=ConstantPool>"").append(stringVar33).append(""</A>"").append(""("");
for (int intVar46 = intLiteral47; intVar20 < intLiteral4; intVar20++) {
stringbuilderVar16.append(Class2HTML.referenceType(stringArrayVar40[intVar20]));
if (intVar20 < stringArrayVar40.length - 1) {
stringbuilderVar16.append("", "");
}
}
stringbuilderVar16.append(""):"").append(Class2HTML.referenceType(stringVar42));
break;
case Const.LDC_W:
case Const.LDC2_W:
intVar9 = bytes.readShort();
stringbuilderVar16.append(""<A HREF=\"""").append(class_name).append(""_cp.html#cp"").append(intVar9).append(""\"" TARGET=\""ConstantPool\"">"").append(Class2HTML.toHTML(constant_pool.constantToString(intVar9, constant_pool.getConstant(intVar9).getTag()))).append(""</a>"");
break;
case Const.LDC:
intVar9 = bytes.readUnsignedByte();
stringbuilderVar16.append(""<A HREF=\"""").append(class_name).append(""_cp.html#cp"").append(intVar9).append(""\"" TARGET=\""ConstantPool\"">"").append(Class2HTML.toHTML(constant_pool.constantToString(intVar9, constant_pool.getConstant(intVar9).getTag()))).append(""</a>"");
break;
case Const.ANEWARRAY:
intVar9 = bytes.readShort();
stringbuilderVar16.append(constant_html.referenceConstant(intVar9));
break;
case Const.MULTIANEWARRAY:
intVar9 = bytes.readShort();
int intVar44 = intLiteral45;
stringbuilderVar16.append(constant_html.referenceConstant(intVar9)).append("":"").append(intVar44).append(""-dimensional"");
break;
case Const.IINC:
if (wide) {
intVar11 = bytes.readShort();
intVar12 = bytes.readShort();
wide = false;
} else {
intVar11 = bytes.readUnsignedByte();
intVar12 = bytes.readByte();
}
stringbuilderVar16.append(""%"").append(intVar11).append("" "").append(intVar12);
break;
default:
if (Const.getNoOfOperands(shortVar1) > 0) {
for (int intVar46 = intLiteral47; intVar20 < intLiteral5; intVar20++) {
switch(Const.getOperandType(shortVar1, intVar20)) {
case Const.T_BYTE:
stringbuilderVar16.append(bytes.readUnsignedByte());
break;
case // Either branch or index
Const.T_SHORT:
stringbuilderVar16.append(bytes.readShort());
break;
case Const.T_INT:
stringbuilderVar16.append(bytes.readInt());
break;
default:
// Never reached
throw new IllegalStateException(""Unreachable default case reached! "" + Const.getOperandType(shortVar1, intVar20));
}
stringbuilderVar16.append(""&nbsp;"");
}
}
}
stringbuilderVar16.append(""</TD>"");
return stringbuilderVar16.toString();
}"
822,I18N,DM_DEFAULT_ENCODING,FP,bcel,823,"file = new PrintWriter(new FileOutputStream(dir + class_name + ""_code.html""));
","CodeHTML(final String dir, final String class_name, final Method[] methods, final ConstantPool constant_pool, final ConstantHTML constant_html) throws IOException {
this.class_name = class_name;
this.constant_pool = constant_pool;
this.constant_html = constant_html;
file = new PrintWriter(new FileOutputStream(dir + class_name + ""_code.html""));
file.println(""<HTML><BODY BGCOLOR=\""#C0C0C0\"">"");
for (int i = 0; i < methods.length; i++) {
writeMethod(methods[i], i);
}
file.println(""</BODY></HTML>"");
file.close();
}","CodeHTML(final String dir, final String class_name, final Method[] methods, final ConstantPool constant_pool, final ConstantHTML constant_html) throws IOException {
this.class_name = class_name;
this.constant_pool = constant_pool;
this.constant_html = constant_html;
file = new PrintWriter(new FileOutputStream(dir + class_name + ""_code.html""));
file.println(""<HTML><BODY BGCOLOR=\""#C0C0C0\"">"");
for (int intVar3 = intLiteral4; intVar1 < intLiteral1; intVar1++) {
writeMethod(methods[intVar1], intVar1);
}
file.println(""</BODY></HTML>"");
file.close();
}"
824,I18N,DM_DEFAULT_ENCODING,FP,bcel,825,"file = new PrintWriter(new FileOutputStream(dir + class_name + ""_cp.html""));
","ConstantHTML(final String dir, final String class_name, final String class_package, final Method[] methods, final ConstantPool constant_pool) throws IOException {
this.class_name = class_name;
this.class_package = class_package;
this.constant_pool = constant_pool;
this.methods = methods;
constants = constant_pool.getConstantPool();
file = new PrintWriter(new FileOutputStream(dir + class_name + ""_cp.html""));
constant_ref = new String[constants.length];
constant_ref[0] = ""&lt;unknown&gt;"";
file.println(""<HTML><BODY BGCOLOR=\""#C0C0C0\""><TABLE BORDER=0>"");
for (int i = 1; i < constants.length; i++) {
if (i % 2 == 0) {
file.print(""<TR BGCOLOR=\""#C0C0C0\""><TD>"");
} else {
file.print(""<TR BGCOLOR=\""#A0A0A0\""><TD>"");
}
if (constants[i] != null) {
writeConstant(i);
}
file.print(""</TD></TR>\n"");
}
file.println(""</TABLE></BODY></HTML>"");
file.close();
}","ConstantHTML(final String dir, final String class_name, final String class_package, final Method[] methods, final ConstantPool constant_pool) throws IOException {
this.class_name = class_name;
this.class_package = class_package;
this.constant_pool = constant_pool;
this.methods = methods;
constants = constant_pool.getConstantPool();
file = new PrintWriter(new FileOutputStream(dir + class_name + ""_cp.html""));
constant_ref = new String[constants.length];
constant_ref[0] = ""&lt;unknown&gt;"";
file.println(""<HTML><BODY BGCOLOR=\""#C0C0C0\""><TABLE BORDER=0>"");
for (int intVar3 = intLiteral4; intVar1 < intLiteral1; intVar1++) {
if (intVar1 % 2 == 0) {
file.print(""<TR BGCOLOR=\""#C0C0C0\""><TD>"");
} else {
file.print(""<TR BGCOLOR=\""#A0A0A0\""><TD>"");
}
if (constants[intVar1] != null) {
writeConstant(intVar1);
}
file.print(""</TD></TR>\n"");
}
file.println(""</TABLE></BODY></HTML>"");
file.close();
}"
830,DODGY_CODE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,FP,bcel,831,"contentPane = (JPanel) this.getContentPane();
","private void jbInit() throws Exception {
contentPane = (JPanel) this.getContentPane();
contentPane.setLayout(cardLayout1);
this.setJMenuBar(jMenuBar1);
this.setSize(new Dimension(708, 451));
this.setTitle(""JustIce"");
jPanel1.setMinimumSize(new Dimension(100, 100));
jPanel1.setPreferredSize(new Dimension(100, 100));
jPanel1.setLayout(gridLayout1);
jSplitPane2.setOrientation(JSplitPane.VERTICAL_SPLIT);
jPanel2.setLayout(gridLayout2);
jPanel3.setMinimumSize(new Dimension(200, 100));
jPanel3.setPreferredSize(new Dimension(400, 400));
jPanel3.setLayout(gridLayout4);
messagesPanel.setMinimumSize(new Dimension(100, 100));
messagesPanel.setLayout(gridLayout3);
jPanel2.setMinimumSize(new Dimension(200, 100));
jMenu1.setText(""File"");
jScrollPane1.getViewport().setBackground(Color.red);
messagesScrollPane.getViewport().setBackground(Color.red);
messagesScrollPane.setPreferredSize(new Dimension(10, 10));
classNamesJList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
@Override
public void valueChanged(final ListSelectionEvent e) {
classNamesJList_valueChanged(e);
}
});
classNamesJList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
jScrollPane3.setBorder(BorderFactory.createLineBorder(Color.black));
jScrollPane3.setPreferredSize(new Dimension(100, 100));
gridLayout4.setRows(4);
gridLayout4.setColumns(1);
gridLayout4.setHgap(1);
jScrollPane4.setBorder(BorderFactory.createLineBorder(Color.black));
jScrollPane4.setPreferredSize(new Dimension(100, 100));
pass1TextPane.setBorder(BorderFactory.createRaisedBevelBorder());
pass1TextPane.setToolTipText("""");
pass1TextPane.setEditable(false);
pass2TextPane.setBorder(BorderFactory.createRaisedBevelBorder());
pass2TextPane.setEditable(false);
messagesTextPane.setBorder(BorderFactory.createRaisedBevelBorder());
messagesTextPane.setEditable(false);
newFileMenuItem.setText(""New..."");
newFileMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(78, InputEvent.CTRL_MASK, true));
newFileMenuItem.addActionListener(new java.awt.event.ActionListener() {
@Override
public void actionPerformed(final ActionEvent e) {
newFileMenuItem_actionPerformed(e);
}
});
pass3aTextPane.setEditable(false);
pass3bTextPane.setEditable(false);
pass3aJList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
@Override
public void valueChanged(final ListSelectionEvent e) {
pass3aJList_valueChanged(e);
}
});
pass3bJList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
@Override
public void valueChanged(final ListSelectionEvent e) {
pass3bJList_valueChanged(e);
}
});
jMenu2.setText(""Help"");
whatisMenuItem.setText(""What is..."");
whatisMenuItem.addActionListener(new java.awt.event.ActionListener() {
@Override
public void actionPerformed(final ActionEvent e) {
whatisMenuItem_actionPerformed(e);
}
});
aboutMenuItem.setText(""About"");
aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
@Override
public void actionPerformed(final ActionEvent e) {
aboutMenuItem_actionPerformed(e);
}
});
jSplitPane2.add(messagesPanel, JSplitPane.BOTTOM);
messagesPanel.add(messagesScrollPane, null);
messagesScrollPane.getViewport().add(messagesTextPane, null);
jSplitPane2.add(jPanel3, JSplitPane.TOP);
jPanel3.add(jScrollPane3, null);
jScrollPane3.getViewport().add(pass1TextPane, null);
jPanel3.add(jScrollPane4, null);
jPanel3.add(jSplitPane3, null);
jSplitPane3.add(jScrollPane2, JSplitPane.LEFT);
jScrollPane2.getViewport().add(pass3aJList, null);
jSplitPane3.add(jScrollPane5, JSplitPane.RIGHT);
jScrollPane5.getViewport().add(pass3aTextPane, null);
jPanel3.add(jSplitPane4, null);
jSplitPane4.add(jScrollPane6, JSplitPane.LEFT);
jScrollPane6.getViewport().add(pass3bJList, null);
jSplitPane4.add(jScrollPane7, JSplitPane.RIGHT);
jScrollPane7.getViewport().add(pass3bTextPane, null);
jScrollPane4.getViewport().add(pass2TextPane, null);
jSplitPane1.add(jPanel2, JSplitPane.TOP);
jPanel2.add(jScrollPane1, null);
jSplitPane1.add(jPanel1, JSplitPane.BOTTOM);
jPanel1.add(jSplitPane2, null);
jScrollPane1.getViewport().add(classNamesJList, null);
jMenuBar1.add(jMenu1);
jMenuBar1.add(jMenu2);
contentPane.add(jSplitPane1, ""jSplitPane1"");
jMenu1.add(newFileMenuItem);
jMenu2.add(whatisMenuItem);
jMenu2.add(aboutMenuItem);
jSplitPane2.setDividerLocation(300);
jSplitPane3.setDividerLocation(150);
jSplitPane4.setDividerLocation(150);
}","private void jbInit() throws Exception {
contentPane = (JPanel) this.getContentPane();
contentPane.setLayout(cardLayout1);
this.setJMenuBar(jMenuBar1);
this.setSize(new Dimension(708, 451));
this.setTitle(""JustIce"");
jPanel1.setMinimumSize(new Dimension(100, 100));
jPanel1.setPreferredSize(new Dimension(100, 100));
jPanel1.setLayout(gridLayout1);
jSplitPane2.setOrientation(JSplitPane.VERTICAL_SPLIT);
jPanel2.setLayout(gridLayout2);
jPanel3.setMinimumSize(new Dimension(200, 100));
jPanel3.setPreferredSize(new Dimension(400, 400));
jPanel3.setLayout(gridLayout4);
messagesPanel.setMinimumSize(new Dimension(100, 100));
messagesPanel.setLayout(gridLayout3);
jPanel2.setMinimumSize(new Dimension(200, 100));
jMenu1.setText(""File"");
jScrollPane1.getViewport().setBackground(Color.red);
messagesScrollPane.getViewport().setBackground(Color.red);
messagesScrollPane.setPreferredSize(new Dimension(10, 10));
classNamesJList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
@Override
public void valueChanged(final ListSelectionEvent e) {
classNamesJList_valueChanged(e);
}
});
classNamesJList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
jScrollPane3.setBorder(BorderFactory.createLineBorder(Color.black));
jScrollPane3.setPreferredSize(new Dimension(100, 100));
gridLayout4.setRows(4);
gridLayout4.setColumns(1);
gridLayout4.setHgap(1);
jScrollPane4.setBorder(BorderFactory.createLineBorder(Color.black));
jScrollPane4.setPreferredSize(new Dimension(100, 100));
pass1TextPane.setBorder(BorderFactory.createRaisedBevelBorder());
pass1TextPane.setToolTipText("""");
pass1TextPane.setEditable(false);
pass2TextPane.setBorder(BorderFactory.createRaisedBevelBorder());
pass2TextPane.setEditable(false);
messagesTextPane.setBorder(BorderFactory.createRaisedBevelBorder());
messagesTextPane.setEditable(false);
newFileMenuItem.setText(""New..."");
newFileMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(78, InputEvent.CTRL_MASK, true));
newFileMenuItem.addActionListener(new java.awt.event.ActionListener() {
@Override
public void actionPerformed(final ActionEvent e) {
newFileMenuItem_actionPerformed(e);
}
});
pass3aTextPane.setEditable(false);
pass3bTextPane.setEditable(false);
pass3aJList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
@Override
public void valueChanged(final ListSelectionEvent e) {
pass3aJList_valueChanged(e);
}
});
pass3bJList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
@Override
public void valueChanged(final ListSelectionEvent e) {
pass3bJList_valueChanged(e);
}
});
jMenu2.setText(""Help"");
whatisMenuItem.setText(""What is..."");
whatisMenuItem.addActionListener(new java.awt.event.ActionListener() {
@Override
public void actionPerformed(final ActionEvent e) {
whatisMenuItem_actionPerformed(e);
}
});
aboutMenuItem.setText(""About"");
aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
@Override
public void actionPerformed(final ActionEvent e) {
aboutMenuItem_actionPerformed(e);
}
});
jSplitPane2.add(messagesPanel, JSplitPane.BOTTOM);
messagesPanel.add(messagesScrollPane, null);
messagesScrollPane.getViewport().add(messagesTextPane, null);
jSplitPane2.add(jPanel3, JSplitPane.TOP);
jPanel3.add(jScrollPane3, null);
jScrollPane3.getViewport().add(pass1TextPane, null);
jPanel3.add(jScrollPane4, null);
jPanel3.add(jSplitPane3, null);
jSplitPane3.add(jScrollPane2, JSplitPane.LEFT);
jScrollPane2.getViewport().add(pass3aJList, null);
jSplitPane3.add(jScrollPane5, JSplitPane.RIGHT);
jScrollPane5.getViewport().add(pass3aTextPane, null);
jPanel3.add(jSplitPane4, null);
jSplitPane4.add(jScrollPane6, JSplitPane.LEFT);
jScrollPane6.getViewport().add(pass3bJList, null);
jSplitPane4.add(jScrollPane7, JSplitPane.RIGHT);
jScrollPane7.getViewport().add(pass3bTextPane, null);
jScrollPane4.getViewport().add(pass2TextPane, null);
jSplitPane1.add(jPanel2, JSplitPane.TOP);
jPanel2.add(jScrollPane1, null);
jSplitPane1.add(jPanel1, JSplitPane.BOTTOM);
jPanel1.add(jSplitPane2, null);
jScrollPane1.getViewport().add(classNamesJList, null);
jMenuBar1.add(jMenu1);
jMenuBar1.add(jMenu2);
contentPane.add(jSplitPane1, ""jSplitPane1"");
jMenu1.add(newFileMenuItem);
jMenu2.add(whatisMenuItem);
jMenu2.add(aboutMenuItem);
jSplitPane2.setDividerLocation(300);
jSplitPane3.setDividerLocation(150);
jSplitPane4.setDividerLocation(150);
}"
833,BAD_PRACTICE,BIT_SIGNED_CHECK,FP,bcel,834,"if ((obj.getAccessFlags() & ~(Const.ACC_PUBLIC|Const.ACC_PRIVATE|Const.ACC_PROTECTED|Const.ACC_STATIC|
","@Override
public void visitField(final Field obj) {
if (jc.isClass()) {
int maxone = 0;
if (obj.isPrivate()) {
maxone++;
}
if (obj.isProtected()) {
maxone++;
}
if (obj.isPublic()) {
maxone++;
}
if (maxone > 1) {
throw new ClassConstraintException(""Field '"" + tostring(obj) + ""' must only have at most one of its ACC_PRIVATE, ACC_PROTECTED, ACC_PUBLIC modifiers set."");
}
if (obj.isFinal() && obj.isVolatile()) {
throw new ClassConstraintException(""Field '"" + tostring(obj) + ""' must only have at most one of its ACC_FINAL, ACC_VOLATILE modifiers set."");
}
} else {
if (!obj.isPublic()) {
throw new ClassConstraintException(""Interface field '"" + tostring(obj) + ""' must have the ACC_PUBLIC modifier set but hasn't!"");
}
if (!obj.isStatic()) {
throw new ClassConstraintException(""Interface field '"" + tostring(obj) + ""' must have the ACC_STATIC modifier set but hasn't!"");
}
if (!obj.isFinal()) {
throw new ClassConstraintException(""Interface field '"" + tostring(obj) + ""' must have the ACC_FINAL modifier set but hasn't!"");
}
}
if ((obj.getAccessFlags() & ~(Const.ACC_PUBLIC | Const.ACC_PRIVATE | Const.ACC_PROTECTED | Const.ACC_STATIC | Const.ACC_FINAL | Const.ACC_VOLATILE | Const.ACC_TRANSIENT)) > 0) {
addMessage(""Field '"" + tostring(obj) + ""' has access flag(s) other than ACC_PUBLIC, ACC_PRIVATE, ACC_PROTECTED,"" + "" ACC_STATIC, ACC_FINAL, ACC_VOLATILE, ACC_TRANSIENT set (ignored)."");
}
checkIndex(obj, obj.getNameIndex(), CONST_Utf8);
String name = obj.getName();
if (!validFieldName(name)) {
throw new ClassConstraintException(""Field '"" + tostring(obj) + ""' has illegal name '"" + obj.getName() + ""'."");
}
checkIndex(obj, obj.getSignatureIndex(), CONST_Utf8);
String sig = ((ConstantUtf8) (cp.getConstant(obj.getSignatureIndex()))).getBytes();
try {
Type.getType(sig);
} catch (ClassFormatException cfe) {
throw new ClassConstraintException(""Illegal descriptor (==signature) '"" + sig + ""' used by '"" + tostring(obj) + ""'."", cfe);
}
String nameanddesc = name + sig;
if (field_names_and_desc.contains(nameanddesc)) {
throw new ClassConstraintException(""No two fields (like '"" + tostring(obj) + ""') are allowed have same names and descriptors!"");
}
if (field_names.contains(name)) {
addMessage(""More than one field of name '"" + name + ""' detected (but with different type descriptors). This is very unusual."");
}
field_names_and_desc.add(nameanddesc);
field_names.add(name);
Attribute[] atts = obj.getAttributes();
for (Attribute att : atts) {
if ((!(att instanceof ConstantValue)) && (!(att instanceof Synthetic)) && (!(att instanceof Deprecated))) {
addMessage(""Attribute '"" + tostring(att) + ""' as an attribute of Field '"" + tostring(obj) + ""' is unknown and will therefore be ignored."");
}
if (!(att instanceof ConstantValue)) {
addMessage(""Attribute '"" + tostring(att) + ""' as an attribute of Field '"" + tostring(obj) + ""' is not a ConstantValue and is therefore only of use for debuggers and such."");
}
}
}","@Override
public void visitField(final Field obj) {
if (jc.isClass()) {
int intVar1 = intLiteral2;
if (obj.isPrivate()) {
intVar1++;
}
if (obj.isProtected()) {
intVar1++;
}
if (obj.isPublic()) {
intVar1++;
}
if (intVar1 > 1) {
throw new ClassConstraintException(""Field '"" + tostring(obj) + ""' must only have at most one of its ACC_PRIVATE, ACC_PROTECTED, ACC_PUBLIC modifiers set."");
}
if (obj.isFinal() && obj.isVolatile()) {
throw new ClassConstraintException(""Field '"" + tostring(obj) + ""' must only have at most one of its ACC_FINAL, ACC_VOLATILE modifiers set."");
}
} else {
if (!obj.isPublic()) {
throw new ClassConstraintException(""Interface field '"" + tostring(obj) + ""' must have the ACC_PUBLIC modifier set but hasn't!"");
}
if (!obj.isStatic()) {
throw new ClassConstraintException(""Interface field '"" + tostring(obj) + ""' must have the ACC_STATIC modifier set but hasn't!"");
}
if (!obj.isFinal()) {
throw new ClassConstraintException(""Interface field '"" + tostring(obj) + ""' must have the ACC_FINAL modifier set but hasn't!"");
}
}
if ((obj.getAccessFlags() & ~(Const.ACC_PUBLIC | Const.ACC_PRIVATE | Const.ACC_PROTECTED | Const.ACC_STATIC | Const.ACC_FINAL | Const.ACC_VOLATILE | Const.ACC_TRANSIENT)) > 0) {
addMessage(""Field '"" + tostring(obj) + ""' has access flag(s) other than ACC_PUBLIC, ACC_PRIVATE, ACC_PROTECTED,"" + "" ACC_STATIC, ACC_FINAL, ACC_VOLATILE, ACC_TRANSIENT set (ignored)."");
}
checkIndex(obj, obj.getNameIndex(), CONST_Utf8);
String stringVar3 = stringLiteral4;
if (!validFieldName(stringVar3)) {
throw new ClassConstraintException(""Field '"" + tostring(obj) + ""' has illegal name '"" + obj.getName() + ""'."");
}
checkIndex(obj, obj.getSignatureIndex(), CONST_Utf8);
String stringVar5 = stringLiteral6;
try {
Type.getType(stringVar5);
} catch (ClassFormatException cfe) {
throw new ClassConstraintException(""Illegal descriptor (==signature) '"" + stringVar5 + ""' used by '"" + tostring(obj) + ""'."", cfe);
}
String stringVar7 = stringLiteral8;
if (field_names_and_desc.contains(stringVar7)) {
throw new ClassConstraintException(""No two fields (like '"" + tostring(obj) + ""') are allowed have same names and descriptors!"");
}
if (field_names.contains(stringVar3)) {
addMessage(""More than one field of name '"" + stringVar3 + ""' detected (but with different type descriptors). This is very unusual."");
}
field_names_and_desc.add(stringVar7);
field_names.add(stringVar3);
Attribute[] attributeArrayVar9 = attributeArrayLiteral10;
for (Attribute attributeVar11 : attributeArrayVar9) {
if ((!(attributeVar11 instanceof ConstantValue)) && (!(attributeVar11 instanceof Synthetic)) && (!(attributeVar11 instanceof Deprecated))) {
addMessage(""Attribute '"" + tostring(attributeVar11) + ""' as an attribute of Field '"" + tostring(obj) + ""' is unknown and will therefore be ignored."");
}
if (!(attributeVar11 instanceof ConstantValue)) {
addMessage(""Attribute '"" + tostring(attributeVar11) + ""' as an attribute of Field '"" + tostring(obj) + ""' is not a ConstantValue and is therefore only of use for debuggers and such."");
}
}
}"
1031,BAD_PRACTICE,SE_COMPARATOR_SHOULD_BE_SERIALIZABLE,FP,codec,1,"public StringEncoderComparator() {
this.stringEncoder = null; 
}
public StringEncoderComparator(StringEncoder stringEncoder) {
this.stringEncoder = stringEncoder;
}
@Override
public int compare(Object o1, Object o2) {
int compareCode = 0;
try {
Comparable s1 = (Comparable) this.stringEncoder.encode(o1);
Comparable s2 = (Comparable) this.stringEncoder.encode(o2);
compareCode = s1.compareTo(s2);
} catch (EncoderException ee) {
compareCode = 0;
}
return compareCode;
","@Override
public int compare(Object o1, Object o2) {
int compareCode = 0;
try {
Comparable s1 = (Comparable) this.stringEncoder.encode(o1);
Comparable s2 = (Comparable) this.stringEncoder.encode(o2);
compareCode = s1.compareTo(s2);
} catch (EncoderException ee) {
compareCode = 0;
}
return compareCode;
}","@Override
public int compare(Object o1, Object o2) {
int intVar1 = intLiteral2;
try {
Comparable comparableVar3 = comparableLiteral4;
Comparable comparableVar5 = comparableLiteral6;
intVar1 = comparableVar3.compareTo(comparableVar5);
} catch (EncoderException ee) {
intVar1 = 0;
}
return intVar1;
}"
1036,DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,FP,codec,6,"if (m == null || !m.find()) {
","public static String md5Crypt(final byte[] keyBytes, final String salt, final String prefix) {
int keyLen = keyBytes.length;
String saltString;
if (salt == null) {
saltString = B64.getRandomSalt(8);
} else {
final Pattern p = Pattern.compile(""^"" + prefix.replace(""$"", ""\\$"") + ""([\\.\\/a-zA-Z0-9]{1,8}).*"");
final Matcher m = p.matcher(salt);
if (m == null || !m.find()) {
throw new IllegalArgumentException(""Invalid salt value: "" + salt);
}
saltString = m.group(1);
}
byte[] saltBytes = saltString.getBytes(Charsets.UTF_8);
MessageDigest ctx = DigestUtils.getMd5Digest();
ctx.update(keyBytes);
ctx.update(prefix.getBytes(Charsets.UTF_8));
ctx.update(saltBytes);
MessageDigest ctx1 = DigestUtils.getMd5Digest();
ctx1.update(keyBytes);
ctx1.update(saltBytes);
ctx1.update(keyBytes);
byte[] finalb = ctx1.digest();
int ii = keyLen;
while (ii > 0) {
ctx.update(finalb, 0, ii > 16 ? 16 : ii);
ii -= 16;
}
Arrays.fill(finalb, (byte) 0);
ii = keyLen;
int j = 0;
while (ii > 0) {
if ((ii & 1) == 1) {
ctx.update(finalb[j]);
} else {
ctx.update(keyBytes[j]);
}
ii >>= 1;
}
StringBuilder passwd = new StringBuilder(prefix + saltString + ""$"");
finalb = ctx.digest();
for (int i = 0; i < ROUNDS; i++) {
ctx1 = DigestUtils.getMd5Digest();
if ((i & 1) != 0) {
ctx1.update(keyBytes);
} else {
ctx1.update(finalb, 0, BLOCKSIZE);
}
if (i % 3 != 0) {
ctx1.update(saltBytes);
}
if (i % 7 != 0) {
ctx1.update(keyBytes);
}
if ((i & 1) != 0) {
ctx1.update(finalb, 0, BLOCKSIZE);
} else {
ctx1.update(keyBytes);
}
finalb = ctx1.digest();
}
B64.b64from24bit(finalb[0], finalb[6], finalb[12], 4, passwd);
B64.b64from24bit(finalb[1], finalb[7], finalb[13], 4, passwd);
B64.b64from24bit(finalb[2], finalb[8], finalb[14], 4, passwd);
B64.b64from24bit(finalb[3], finalb[9], finalb[15], 4, passwd);
B64.b64from24bit(finalb[4], finalb[10], finalb[5], 4, passwd);
B64.b64from24bit((byte) 0, (byte) 0, finalb[11], 2, passwd);
ctx.reset();
ctx1.reset();
Arrays.fill(keyBytes, (byte) 0);
Arrays.fill(saltBytes, (byte) 0);
Arrays.fill(finalb, (byte) 0);
return passwd.toString();
}","public static String md5Crypt(final byte[] keyBytes, final String salt, final String prefix) {
int intVar1 = intLiteral2;
String stringVar3;
if (salt == null) {
stringVar3 = B64.getRandomSalt(8);
} else {
final Pattern patternVar4 = patternLiteral5;
final Matcher matcherVar6 = matcherLiteral7;
if (matcherVar6 == null || !matcherVar6.find()) {
throw new IllegalArgumentException(""Invalid salt value: "" + salt);
}
stringVar3 = matcherVar6.group(1);
}
byte[] byteArrayVar8 = byteArrayLiteral9;
MessageDigest messagedigestVar10 = messagedigestLiteral11;
messagedigestVar10.update(keyBytes);
messagedigestVar10.update(prefix.getBytes(Charsets.UTF_8));
messagedigestVar10.update(byteArrayVar8);
MessageDigest messagedigestVar12 = messagedigestLiteral11;
messagedigestVar12.update(keyBytes);
messagedigestVar12.update(byteArrayVar8);
messagedigestVar12.update(keyBytes);
byte[] byteArrayVar13 = byteArrayLiteral14;
int intVar15 = intLiteral16;
while (intVar15 > 0) {
messagedigestVar10.update(byteArrayVar13, 0, intVar15 > 16 ? 16 : intVar15);
intVar15 -= 16;
}
Arrays.fill(byteArrayVar13, (byte) 0);
intVar15 = intVar1;
int intVar17 = intLiteral18;
while (intVar15 > 0) {
if ((intVar15 & 1) == 1) {
messagedigestVar10.update(byteArrayVar13[intVar17]);
} else {
messagedigestVar10.update(keyBytes[intVar17]);
}
intVar15 >>= 1;
}
StringBuilder stringbuilderVar19 = stringbuilderLiteral20;
byteArrayVar13 = messagedigestVar10.digest();
for (int intVar22 = intLiteral23; intVar21 < intLiteral1; intVar21++) {
messagedigestVar12 = DigestUtils.getMd5Digest();
if ((intVar21 & 1) != 0) {
messagedigestVar12.update(keyBytes);
} else {
messagedigestVar12.update(byteArrayVar13, 0, BLOCKSIZE);
}
if (intVar21 % 3 != 0) {
messagedigestVar12.update(byteArrayVar8);
}
if (intVar21 % 7 != 0) {
messagedigestVar12.update(keyBytes);
}
if ((intVar21 & 1) != 0) {
messagedigestVar12.update(byteArrayVar13, 0, BLOCKSIZE);
} else {
messagedigestVar12.update(keyBytes);
}
byteArrayVar13 = messagedigestVar12.digest();
}
B64.b64from24bit(byteArrayVar13[0], byteArrayVar13[6], byteArrayVar13[12], 4, stringbuilderVar19);
B64.b64from24bit(byteArrayVar13[1], byteArrayVar13[7], byteArrayVar13[13], 4, stringbuilderVar19);
B64.b64from24bit(byteArrayVar13[2], byteArrayVar13[8], byteArrayVar13[14], 4, stringbuilderVar19);
B64.b64from24bit(byteArrayVar13[3], byteArrayVar13[9], byteArrayVar13[15], 4, stringbuilderVar19);
B64.b64from24bit(byteArrayVar13[4], byteArrayVar13[10], byteArrayVar13[5], 4, stringbuilderVar19);
B64.b64from24bit((byte) 0, (byte) 0, byteArrayVar13[11], 2, stringbuilderVar19);
messagedigestVar10.reset();
messagedigestVar12.reset();
Arrays.fill(keyBytes, (byte) 0);
Arrays.fill(byteArrayVar8, (byte) 0);
Arrays.fill(byteArrayVar13, (byte) 0);
return stringbuilderVar19.toString();
}"
1041,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,codec,11,"return null;
","@Override
protected byte[] doDecoding(byte[] bytes) throws DecoderException {
if (bytes == null) {
return null;
}
boolean hasUnderscores = false;
for (byte b : bytes) {
if (b == UNDERSCORE) {
hasUnderscores = true;
break;
}
}
if (hasUnderscores) {
byte[] tmp = new byte[bytes.length];
for (int i = 0; i < bytes.length; i++) {
byte b = bytes[i];
if (b != UNDERSCORE) {
tmp[i] = b;
} else {
tmp[i] = BLANK;
}
}
return QuotedPrintableCodec.decodeQuotedPrintable(tmp);
}
return QuotedPrintableCodec.decodeQuotedPrintable(bytes);
}","@Override
protected byte[] doDecoding(byte[] bytes) throws DecoderException {
if (bytes == null) {
return null;
}
boolean booleanVar1 = booleanLiteral2;
for (byte byteVar3 : bytes) {
if (byteVar3 == UNDERSCORE) {
booleanVar1 = true;
break;
}
}
if (booleanVar1) {
byte[] byteArrayVar4 = byteArrayLiteral5;
for (int intVar9 = intLiteral10; intVar6 < intLiteral1; intVar6++) {
byte byteVar3 = byteLiteral8;
if (byteVar3 != UNDERSCORE) {
byteArrayVar4[intVar6] = byteVar3;
} else {
byteArrayVar4[intVar6] = BLANK;
}
}
return QuotedPrintableCodec.decodeQuotedPrintable(byteArrayVar4);
}
return QuotedPrintableCodec.decodeQuotedPrintable(bytes);
}"
1042,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,codec,12,"return null;
","@Override
protected byte[] doEncoding(byte[] bytes) {
if (bytes == null) {
return null;
}
byte[] data = QuotedPrintableCodec.encodeQuotedPrintable(PRINTABLE_CHARS, bytes);
if (this.encodeBlanks) {
for (int i = 0; i < data.length; i++) {
if (data[i] == BLANK) {
data[i] = UNDERSCORE;
}
}
}
return data;
}","@Override
protected byte[] doEncoding(byte[] bytes) {
if (bytes == null) {
return null;
}
byte[] byteArrayVar1 = byteArrayLiteral2;
if (this.encodeBlanks) {
for (int intVar5 = intLiteral6; intVar3 < intLiteral1; intVar3++) {
if (byteArrayVar1[intVar3] == BLANK) {
byteArrayVar1[intVar3] = UNDERSCORE;
}
}
}
return byteArrayVar1;
}"
1048,DODGY_CODE,SA_FIELD_DOUBLE_ASSIGNMENT,FP,codec,18,"modulus = (++modulus) % 3;
","void encode(byte[] in, int inPos, int inAvail) {
if (eof) {
return;
}
if (inAvail < 0) {
eof = true;
if (buffer == null || buffer.length - pos < encodeSize) {
resizeBuffer();
}
switch(modulus) {
case 1:
buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
if (encodeTable == STANDARD_ENCODE_TABLE) {
buffer[pos++] = PAD;
buffer[pos++] = PAD;
}
break;
case 2:
buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
if (encodeTable == STANDARD_ENCODE_TABLE) {
buffer[pos++] = PAD;
}
break;
}
if (lineLength > 0 && pos > 0) {
System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
pos += lineSeparator.length;
}
} else {
for (int i = 0; i < inAvail; i++) {
if (buffer == null || buffer.length - pos < encodeSize) {
resizeBuffer();
}
modulus = (++modulus) % 3;
int b = in[inPos++];
if (b < 0) {
b += 256;
}
x = (x << 8) + b;
if (0 == modulus) {
buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
buffer[pos++] = encodeTable[(x >> 12) & MASK_6BITS];
buffer[pos++] = encodeTable[(x >> 6) & MASK_6BITS];
buffer[pos++] = encodeTable[x & MASK_6BITS];
currentLinePos += 4;
if (lineLength > 0 && lineLength <= currentLinePos) {
System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
pos += lineSeparator.length;
currentLinePos = 0;
}
}
}
}
}","void encode(byte[] in, int inPos, int inAvail) {
if (eof) {
return;
}
if (inAvail < 0) {
eof = true;
if (buffer == null || buffer.length - pos < encodeSize) {
resizeBuffer();
}
switch(modulus) {
case 1:
buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
if (encodeTable == STANDARD_ENCODE_TABLE) {
buffer[pos++] = PAD;
buffer[pos++] = PAD;
}
break;
case 2:
buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
if (encodeTable == STANDARD_ENCODE_TABLE) {
buffer[pos++] = PAD;
}
break;
}
if (lineLength > 0 && pos > 0) {
System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
pos += lineSeparator.length;
}
} else {
for (int intVar5 = intLiteral6; intVar1 < intLiteral1; intVar1++) {
if (buffer == null || buffer.length - pos < encodeSize) {
resizeBuffer();
}
modulus = (++modulus) % 3;
int intVar3 = intLiteral4;
if (intVar3 < 0) {
intVar3 += 256;
}
x = (x << 8) + intVar3;
if (0 == modulus) {
buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
buffer[pos++] = encodeTable[(x >> 12) & MASK_6BITS];
buffer[pos++] = encodeTable[(x >> 6) & MASK_6BITS];
buffer[pos++] = encodeTable[x & MASK_6BITS];
currentLinePos += 4;
if (lineLength > 0 && lineLength <= currentLinePos) {
System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
pos += lineSeparator.length;
currentLinePos = 0;
}
}
}
}
}"
1052,I18N,DM_DEFAULT_ENCODING,FP,codec,22,"return decodeHex(new String(array).toCharArray());
","public byte[] decode(byte[] array) throws DecoderException {
return decodeHex(new String(array).toCharArray());
}","public byte[] decode(byte[] array) throws DecoderException {
return decodeHex(new String(array).toCharArray());
}"
1058,I18N,DM_DEFAULT_ENCODING,FP,codec,28,"return md5(data.getBytes());
","public static byte[] md5(String data) {
return md5(data.getBytes());
}","public static byte[] md5(String data) {
return md5(data.getBytes());
}"
1069,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,codec,39,"return null;
","public static final byte[] decodeUrl(byte[] bytes) throws DecoderException {
if (bytes == null) {
return null;
}
ByteArrayOutputStream buffer = new ByteArrayOutputStream();
for (int i = 0; i < bytes.length; i++) {
int b = bytes[i];
if (b == '+') {
buffer.write(' ');
} else if (b == '%') {
try {
int u = Character.digit((char) bytes[++i], 16);
int l = Character.digit((char) bytes[++i], 16);
if (u == -1 || l == -1) {
throw new DecoderException(""Invalid URL encoding"");
}
buffer.write((char) ((u << 4) + l));
} catch (ArrayIndexOutOfBoundsException e) {
throw new DecoderException(""Invalid URL encoding"");
}
} else {
buffer.write(b);
}
}
return buffer.toByteArray();
}","public static final byte[] decodeUrl(byte[] bytes) throws DecoderException {
if (bytes == null) {
return null;
}
ByteArrayOutputStream bytearrayoutputstreamVar1 = bytearrayoutputstreamLiteral2;
for (int intVar10 = intLiteral11; intVar3 < intLiteral1; intVar3++) {
int intVar5 = intLiteral6;
if (intVar5 == '+') {
bytearrayoutputstreamVar1.write(' ');
} else if (intVar5 == '%') {
try {
int intVar7 = intLiteral8;
int intVar9 = intLiteral8;
if (intVar7 == -1 || intVar9 == -1) {
throw new DecoderException(""Invalid URL encoding"");
}
bytearrayoutputstreamVar1.write((char) ((intVar7 << 4) + intVar9));
} catch (ArrayIndexOutOfBoundsException e) {
throw new DecoderException(""Invalid URL encoding"");
}
} else {
bytearrayoutputstreamVar1.write(intVar5);
}
}
return bytearrayoutputstreamVar1.toByteArray();
}"
1074,DODGY_CODE,SF_SWITCH_NO_DEFAULT,FP,codec,44,"switch (modulus) { 
case 1 : 
buffer[pos++] = encodeTable[(int)(bitWorkArea >> 3) & MASK_5BITS]; 
buffer[pos++] = encodeTable[(int)(bitWorkArea << 2) & MASK_5BITS]; 
buffer[pos++] = PAD;
buffer[pos++] = PAD;
buffer[pos++] = PAD;
buffer[pos++] = PAD;
buffer[pos++] = PAD;
buffer[pos++] = PAD;
break;
case 2 : 
buffer[pos++] = encodeTable[(int)(bitWorkArea >> 11) & MASK_5BITS]; 
buffer[pos++] = encodeTable[(int)(bitWorkArea >>  6) & MASK_5BITS]; 
buffer[pos++] = encodeTable[(int)(bitWorkArea >>  1) & MASK_5BITS]; 
buffer[pos++] = encodeTable[(int)(bitWorkArea <<  4) & MASK_5BITS]; 
buffer[pos++] = PAD;
buffer[pos++] = PAD;
buffer[pos++] = PAD;
buffer[pos++] = PAD;
break;
case 3 : 
buffer[pos++] = encodeTable[(int)(bitWorkArea >> 19) & MASK_5BITS]; 
buffer[pos++] = encodeTable[(int)(bitWorkArea >> 14) & MASK_5BITS]; 
buffer[pos++] = encodeTable[(int)(bitWorkArea >>  9) & MASK_5BITS]; 
buffer[pos++] = encodeTable[(int)(bitWorkArea >>  4) & MASK_5BITS]; 
buffer[pos++] = encodeTable[(int)(bitWorkArea <<  1) & MASK_5BITS]; 
buffer[pos++] = PAD;
buffer[pos++] = PAD;
buffer[pos++] = PAD;
break;
case 4 : 
buffer[pos++] = encodeTable[(int)(bitWorkArea >> 27) & MASK_5BITS]; 
buffer[pos++] = encodeTable[(int)(bitWorkArea >> 22) & MASK_5BITS]; 
buffer[pos++] = encodeTable[(int)(bitWorkArea >> 17) & MASK_5BITS]; 
buffer[pos++] = encodeTable[(int)(bitWorkArea >> 12) & MASK_5BITS]; 
buffer[pos++] = encodeTable[(int)(bitWorkArea >>  7) & MASK_5BITS]; 
buffer[pos++] = encodeTable[(int)(bitWorkArea >>  2) & MASK_5BITS]; 
buffer[pos++] = encodeTable[(int)(bitWorkArea <<  3) & MASK_5BITS]; 
buffer[pos++] = PAD;
","void encode(byte[] in, int inPos, int inAvail) {
if (eof) {
return;
}
if (inAvail < 0) {
eof = true;
if (0 == modulus && lineLength == 0) {
return;
}
ensureBufferSize(encodeSize);
int savedPos = pos;
switch(modulus) {
case 1:
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 3) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea << 2) & MASK_5BITS];
buffer[pos++] = PAD;
buffer[pos++] = PAD;
buffer[pos++] = PAD;
buffer[pos++] = PAD;
buffer[pos++] = PAD;
buffer[pos++] = PAD;
break;
case 2:
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 11) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 6) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 1) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea << 4) & MASK_5BITS];
buffer[pos++] = PAD;
buffer[pos++] = PAD;
buffer[pos++] = PAD;
buffer[pos++] = PAD;
break;
case 3:
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 19) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 14) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 9) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 4) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea << 1) & MASK_5BITS];
buffer[pos++] = PAD;
buffer[pos++] = PAD;
buffer[pos++] = PAD;
break;
case 4:
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 27) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 22) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 17) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 12) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 7) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 2) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea << 3) & MASK_5BITS];
buffer[pos++] = PAD;
break;
}
currentLinePos += pos - savedPos;
if (lineLength > 0 && currentLinePos > 0) {
System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
pos += lineSeparator.length;
}
} else {
for (int i = 0; i < inAvail; i++) {
ensureBufferSize(encodeSize);
modulus = (modulus + 1) % BYTES_PER_UNENCODED_BLOCK;
int b = in[inPos++];
if (b < 0) {
b += 256;
}
bitWorkArea = (bitWorkArea << 8) + b;
if (0 == modulus) {
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 35) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 30) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 25) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 20) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 15) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 10) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 5) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) bitWorkArea & MASK_5BITS];
currentLinePos += BYTES_PER_ENCODED_BLOCK;
if (lineLength > 0 && lineLength <= currentLinePos) {
System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
pos += lineSeparator.length;
currentLinePos = 0;
}
}
}
}
}","void encode(byte[] in, int inPos, int inAvail) {
if (eof) {
return;
}
if (inAvail < 0) {
eof = true;
if (0 == modulus && lineLength == 0) {
return;
}
ensureBufferSize(encodeSize);
int intVar1 = intLiteral2;
switch(modulus) {
case 1:
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 3) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea << 2) & MASK_5BITS];
buffer[pos++] = PAD;
buffer[pos++] = PAD;
buffer[pos++] = PAD;
buffer[pos++] = PAD;
buffer[pos++] = PAD;
buffer[pos++] = PAD;
break;
case 2:
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 11) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 6) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 1) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea << 4) & MASK_5BITS];
buffer[pos++] = PAD;
buffer[pos++] = PAD;
buffer[pos++] = PAD;
buffer[pos++] = PAD;
break;
case 3:
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 19) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 14) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 9) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 4) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea << 1) & MASK_5BITS];
buffer[pos++] = PAD;
buffer[pos++] = PAD;
buffer[pos++] = PAD;
break;
case 4:
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 27) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 22) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 17) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 12) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 7) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 2) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea << 3) & MASK_5BITS];
buffer[pos++] = PAD;
break;
}
currentLinePos += pos - intVar1;
if (lineLength > 0 && currentLinePos > 0) {
System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
pos += lineSeparator.length;
}
} else {
for (int intVar7 = intLiteral8; intVar3 < intLiteral1; intVar3++) {
ensureBufferSize(encodeSize);
modulus = (modulus + 1) % BYTES_PER_UNENCODED_BLOCK;
int intVar5 = intLiteral6;
if (intVar5 < 0) {
intVar5 += 256;
}
bitWorkArea = (bitWorkArea << 8) + intVar5;
if (0 == modulus) {
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 35) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 30) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 25) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 20) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 15) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 10) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 5) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) bitWorkArea & MASK_5BITS];
currentLinePos += BYTES_PER_ENCODED_BLOCK;
if (lineLength > 0 && lineLength <= currentLinePos) {
System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
pos += lineSeparator.length;
currentLinePos = 0;
}
}
}
}
}"
1077,DODGY_CODE,SF_SWITCH_NO_DEFAULT,FP,codec,47,"switch (modulus) {
case 2 : 
bitWorkArea = bitWorkArea >> 4; 
buffer[pos++] = (byte) ((bitWorkArea) & MASK_8BITS);
break;
case 3 : 
bitWorkArea = bitWorkArea >> 2; 
buffer[pos++] = (byte) ((bitWorkArea >> 8) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea) & MASK_8BITS);
","void decode(byte[] in, int inPos, int inAvail) {
if (eof) {
return;
}
if (inAvail < 0) {
eof = true;
}
for (int i = 0; i < inAvail; i++) {
ensureBufferSize(decodeSize);
byte b = in[inPos++];
if (b == PAD) {
eof = true;
break;
} else {
if (b >= 0 && b < DECODE_TABLE.length) {
int result = DECODE_TABLE[b];
if (result >= 0) {
modulus = (modulus + 1) % BYTES_PER_ENCODED_BLOCK;
bitWorkArea = (bitWorkArea << BITS_PER_ENCODED_BYTE) + result;
if (modulus == 0) {
buffer[pos++] = (byte) ((bitWorkArea >> 16) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea >> 8) & MASK_8BITS);
buffer[pos++] = (byte) (bitWorkArea & MASK_8BITS);
}
}
}
}
}
// Two forms of EOF as far as base64 decoder is concerned: actual
if (eof && modulus != 0) {
ensureBufferSize(decodeSize);
switch(modulus) {
case 2:
bitWorkArea = bitWorkArea >> 4;
buffer[pos++] = (byte) ((bitWorkArea) & MASK_8BITS);
break;
case 3:
bitWorkArea = bitWorkArea >> 2;
buffer[pos++] = (byte) ((bitWorkArea >> 8) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea) & MASK_8BITS);
break;
}
}
}","void decode(byte[] in, int inPos, int inAvail) {
if (eof) {
return;
}
if (inAvail < 0) {
eof = true;
}
for (int intVar7 = intLiteral8; intVar1 < intLiteral1; intVar1++) {
ensureBufferSize(decodeSize);
byte byteVar3 = byteLiteral4;
if (byteVar3 == PAD) {
eof = true;
break;
} else {
if (byteVar3 >= 0 && byteVar3 < DECODE_TABLE.length) {
int intVar5 = intLiteral6;
if (intVar5 >= 0) {
modulus = (modulus + 1) % BYTES_PER_ENCODED_BLOCK;
bitWorkArea = (bitWorkArea << BITS_PER_ENCODED_BYTE) + intVar5;
if (modulus == 0) {
buffer[pos++] = (byte) ((bitWorkArea >> 16) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea >> 8) & MASK_8BITS);
buffer[pos++] = (byte) (bitWorkArea & MASK_8BITS);
}
}
}
}
}
// Two forms of EOF as far as base64 decoder is concerned: actual
if (eof && modulus != 0) {
ensureBufferSize(decodeSize);
switch(modulus) {
case 2:
bitWorkArea = bitWorkArea >> 4;
buffer[pos++] = (byte) ((bitWorkArea) & MASK_8BITS);
break;
case 3:
bitWorkArea = bitWorkArea >> 2;
buffer[pos++] = (byte) ((bitWorkArea >> 8) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea) & MASK_8BITS);
break;
}
}
}"
1079,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,codec,49,"return null;
","public static byte[] getBytesUnchecked(String string, String charsetName) {
if (string == null) {
return null;
}
try {
return string.getBytes(charsetName);
} catch (UnsupportedEncodingException e) {
throw StringUtils.newIllegalStateException(charsetName, e);
}
}","public static byte[] getBytesUnchecked(String string, String charsetName) {
if (string == null) {
return null;
}
try {
return string.getBytes(charsetName);
} catch (UnsupportedEncodingException e) {
throw StringUtils.newIllegalStateException(charsetName, e);
}
}"
1084,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,codec,54,"return null;
","protected byte[] doDecoding(byte[] bytes) throws DecoderException {
if (bytes == null) {
return null;
}
boolean hasUnderscores = false;
for (int i = 0; i < bytes.length; i++) {
if (bytes[i] == UNDERSCORE) {
hasUnderscores = true;
break;
}
}
if (hasUnderscores) {
byte[] tmp = new byte[bytes.length];
for (int i = 0; i < bytes.length; i++) {
byte b = bytes[i];
if (b != UNDERSCORE) {
tmp[i] = b;
} else {
tmp[i] = BLANK;
}
}
return QuotedPrintableCodec.decodeQuotedPrintable(tmp);
}
return QuotedPrintableCodec.decodeQuotedPrintable(bytes);
}","protected byte[] doDecoding(byte[] bytes) throws DecoderException {
if (bytes == null) {
return null;
}
boolean booleanVar1 = booleanLiteral2;
for (int intVar9 = intLiteral10; intVar3 < intLiteral1; intVar3++) {
if (bytes[intVar3] == UNDERSCORE) {
booleanVar1 = true;
break;
}
}
if (booleanVar1) {
byte[] byteArrayVar5 = byteArrayLiteral6;
for (int intVar9 = intLiteral10; intVar3 < bytes.length; intVar3++) {
byte byteVar7 = byteLiteral8;
if (byteVar7 != UNDERSCORE) {
byteArrayVar5[intVar3] = byteVar7;
} else {
byteArrayVar5[intVar3] = BLANK;
}
}
return QuotedPrintableCodec.decodeQuotedPrintable(byteArrayVar5);
}
return QuotedPrintableCodec.decodeQuotedPrintable(bytes);
}"
1086,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,codec,56,"return null;
","public static final byte[] decodeQuotedPrintable(byte[] bytes) throws DecoderException {
if (bytes == null) {
return null;
}
ByteArrayOutputStream buffer = new ByteArrayOutputStream();
for (int i = 0; i < bytes.length; i++) {
int b = bytes[i];
if (b == ESCAPE_CHAR) {
try {
int u = Utils.digit16(bytes[++i]);
int l = Utils.digit16(bytes[++i]);
buffer.write((char) ((u << 4) + l));
} catch (ArrayIndexOutOfBoundsException e) {
throw new DecoderException(""Invalid quoted-printable encoding"", e);
}
} else {
buffer.write(b);
}
}
return buffer.toByteArray();
}","public static final byte[] decodeQuotedPrintable(byte[] bytes) throws DecoderException {
if (bytes == null) {
return null;
}
ByteArrayOutputStream bytearrayoutputstreamVar1 = bytearrayoutputstreamLiteral2;
for (int intVar10 = intLiteral11; intVar3 < intLiteral1; intVar3++) {
int intVar5 = intLiteral6;
if (intVar5 == ESCAPE_CHAR) {
try {
int intVar7 = intLiteral8;
int intVar9 = intLiteral8;
bytearrayoutputstreamVar1.write((char) ((intVar7 << 4) + intVar9));
} catch (ArrayIndexOutOfBoundsException e) {
throw new DecoderException(""Invalid quoted-printable encoding"", e);
}
} else {
bytearrayoutputstreamVar1.write(intVar5);
}
}
return bytearrayoutputstreamVar1.toByteArray();
}"
1102,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,codec,72,"return null;
","@Override
protected byte[] doDecoding(final byte[] bytes) throws DecoderException {
if (bytes == null) {
return null;
}
boolean hasUnderscores = false;
for (final byte b : bytes) {
if (b == UNDERSCORE) {
hasUnderscores = true;
break;
}
}
if (hasUnderscores) {
final byte[] tmp = new byte[bytes.length];
for (int i = 0; i < bytes.length; i++) {
final byte b = bytes[i];
if (b != UNDERSCORE) {
tmp[i] = b;
} else {
tmp[i] = BLANK;
}
}
return QuotedPrintableCodec.decodeQuotedPrintable(tmp);
}
return QuotedPrintableCodec.decodeQuotedPrintable(bytes);
}","@Override
protected byte[] doDecoding(final byte[] bytes) throws DecoderException {
if (bytes == null) {
return null;
}
boolean booleanVar1 = booleanLiteral2;
for (final byte byteVar3 : bytes) {
if (byteVar3 == UNDERSCORE) {
booleanVar1 = true;
break;
}
}
if (booleanVar1) {
final byte[] byteArrayVar4 = byteArrayLiteral5;
for (int intVar9 = intLiteral10; intVar6 < intLiteral1; intVar6++) {
final byte byteVar3 = byteLiteral8;
if (byteVar3 != UNDERSCORE) {
byteArrayVar4[intVar6] = byteVar3;
} else {
byteArrayVar4[intVar6] = BLANK;
}
}
return QuotedPrintableCodec.decodeQuotedPrintable(byteArrayVar4);
}
return QuotedPrintableCodec.decodeQuotedPrintable(bytes);
}"
1106,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,codec,76,"return null;
","public static final byte[] encodeUrl(BitSet urlsafe, final byte[] bytes) {
if (bytes == null) {
return null;
}
if (urlsafe == null) {
urlsafe = WWW_FORM_URL;
}
final ByteArrayOutputStream buffer = new ByteArrayOutputStream();
for (final byte c : bytes) {
int b = c;
if (b < 0) {
b = 256 + b;
}
if (urlsafe.get(b)) {
if (b == ' ') {
b = '+';
}
buffer.write(b);
} else {
buffer.write(ESCAPE_CHAR);
final char hex1 = Character.toUpperCase(Character.forDigit((b >> 4) & 0xF, RADIX));
final char hex2 = Character.toUpperCase(Character.forDigit(b & 0xF, RADIX));
buffer.write(hex1);
buffer.write(hex2);
}
}
return buffer.toByteArray();
}","public static final byte[] encodeUrl(BitSet urlsafe, final byte[] bytes) {
if (bytes == null) {
return null;
}
if (urlsafe == null) {
urlsafe = WWW_FORM_URL;
}
final ByteArrayOutputStream bytearrayoutputstreamVar1 = bytearrayoutputstreamLiteral2;
for (final byte byteVar3 : bytes) {
int intVar4 = intLiteral5;
if (intVar4 < 0) {
intVar4 = 256 + intVar4;
}
if (urlsafe.get(intVar4)) {
if (intVar4 == ' ') {
intVar4 = '+';
}
bytearrayoutputstreamVar1.write(intVar4);
} else {
bytearrayoutputstreamVar1.write(ESCAPE_CHAR);
final char charVar6 = charLiteral7;
final char charVar8 = charLiteral9;
bytearrayoutputstreamVar1.write(charVar6);
bytearrayoutputstreamVar1.write(charVar8);
}
}
return bytearrayoutputstreamVar1.toByteArray();
}"
1109,I18N,DM_DEFAULT_ENCODING,FP,codec,79,"return new String(encodeHex(array)).getBytes();
","public byte[] encode(byte[] array) {
return new String(encodeHex(array)).getBytes();
}","public byte[] encode(byte[] array) {
return new String(encodeHex(array)).getBytes();
}"
1114,I18N,DM_DEFAULT_ENCODING,FP,codec,84,"return md5(data.getBytes());
","public static byte[] md5(String data) {
return md5(data.getBytes());
}","public static byte[] md5(String data) {
return md5(data.getBytes());
}"
1119,DODGY_CODE,SF_SWITCH_NO_DEFAULT,FP,codec,89,"switch(symb) {
case 'A' : case 'E' : case 'I' : case 'O' : case 'U' :
if (n == 0) {
code.append(symb);
}
break ; 
case 'B' :
if ( isPreviousChar(local, n, 'M') &&
isLastChar(wdsz, n) ) { 
break;
}
code.append(symb);
break;
case 'C' : 
if ( isPreviousChar(local, n, 'S') &&
!isLastChar(wdsz, n) &&
(FRONTV.indexOf(local.charAt(n + 1)) >= 0) ) {
break;
}
if (regionMatch(local, n, ""CIA"")) { 
code.append('X');
break;
}
if (!isLastChar(wdsz, n) &&
(FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {
code.append('S');
break; 
}
if (isPreviousChar(local, n, 'S') &&
isNextChar(local, n, 'H') ) { 
code.append('K') ;
break ;
}
if (isNextChar(local, n, 'H')) { 
if ((n == 0) &&
(wdsz >= 3) &&
isVowel(local,2) ) { 
code.append('K');
} else {
code.append('X'); 
}
} else {
code.append('K');
}
break ;
case 'D' :
if (!isLastChar(wdsz, n + 1) &&
isNextChar(local, n, 'G') &&
(FRONTV.indexOf(local.charAt(n + 2)) >= 0)) { 
code.append('J'); n += 2 ;
} else {
code.append('T');
}
break ;
case 'G' : 
if (isLastChar(wdsz, n + 1) &&
isNextChar(local, n, 'H')) {
break;
}
if (!isLastChar(wdsz, n + 1) &&
isNextChar(local,n,'H') &&
!isVowel(local,n+2)) {
break;
}
if ((n > 0) &&
( regionMatch(local, n, ""GN"") ||
regionMatch(local, n, ""GNED"") ) ) {
break; 
}
if (isPreviousChar(local, n, 'G')) {
hard = true ;
} else {
hard = false ;
}
if (!isLastChar(wdsz, n) &&
(FRONTV.indexOf(local.charAt(n + 1)) >= 0) &&
(!hard)) {
code.append('J');
} else {
code.append('K');
}
break ;
case 'H':
if (isLastChar(wdsz, n)) {
break ; 
}
if ((n > 0) &&
(VARSON.indexOf(local.charAt(n - 1)) >= 0)) {
break;
}
if (isVowel(local,n+1)) {
code.append('H'); 
}
break;
case 'F':
case 'J' :
case 'L' :
case 'M':
case 'N' :
case 'R' :
code.append(symb);
break;
case 'K' :
if (n > 0) { 
if (!isPreviousChar(local, n, 'C')) {
code.append(symb);
}
} else {
code.append(symb); 
}
break ;
case 'P' :
if (isNextChar(local,n,'H')) {
code.append('F');
} else {
code.append(symb);
}
break ;
case 'Q' :
code.append('K');
break;
case 'S' :
if (regionMatch(local,n,""SH"") ||
regionMatch(local,n,""SIO"") ||
regionMatch(local,n,""SIA"")) {
code.append('X');
} else {
code.append('S');
}
break;
case 'T' :
if (regionMatch(local,n,""TIA"") ||
regionMatch(local,n,""TIO"")) {
code.append('X');
break;
}
if (regionMatch(local,n,""TCH"")) {
break;
}
if (regionMatch(local,n,""TH"")) {
code.append('0');
} else {
code.append('T');
}
break ;
case 'V' :
code.append('F'); break ;
case 'W' : case 'Y' : 
if (!isLastChar(wdsz,n) &&
isVowel(local,n+1)) {
code.append(symb);
}
break ;
case 'X' :
code.append('K'); code.append('S');
break ;
case 'Z' :
code.append('S'); break ;
","public String metaphone(String txt) {
boolean hard = false;
if ((txt == null) || (txt.length() == 0)) {
return """";
}
if (txt.length() == 1) {
return txt.toUpperCase();
}
char[] inwd = txt.toUpperCase().toCharArray();
StringBuffer local = new StringBuffer(40);
StringBuffer code = new StringBuffer(10);
switch(inwd[0]) {
case 'K':
case 'G':
case 'P':
if (inwd[1] == 'N') {
local.append(inwd, 1, inwd.length - 1);
} else {
local.append(inwd);
}
break;
case 'A':
if (inwd[1] == 'E') {
local.append(inwd, 1, inwd.length - 1);
} else {
local.append(inwd);
}
break;
case 'W':
if (inwd[1] == 'R') {
local.append(inwd, 1, inwd.length - 1);
break;
}
if (inwd[1] == 'H') {
local.append(inwd, 1, inwd.length - 1);
local.setCharAt(0, 'W');
} else {
local.append(inwd);
}
break;
case 'X':
inwd[0] = 'S';
local.append(inwd);
break;
default:
local.append(inwd);
}
int wdsz = local.length();
int n = 0;
while ((code.length() < this.getMaxCodeLen()) && (n < wdsz)) {
char symb = local.charAt(n);
if ((symb != 'C') && (isPreviousChar(local, n, symb))) {
n++;
} else {
switch(symb) {
case 'A':
case 'E':
case 'I':
case 'O':
case 'U':
if (n == 0) {
code.append(symb);
}
break;
case 'B':
if (isPreviousChar(local, n, 'M') && isLastChar(wdsz, n)) {
break;
}
code.append(symb);
break;
case 'C':
if (isPreviousChar(local, n, 'S') && !isLastChar(wdsz, n) && (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {
break;
}
if (regionMatch(local, n, ""CIA"")) {
code.append('X');
break;
}
if (!isLastChar(wdsz, n) && (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {
code.append('S');
break;
}
if (isPreviousChar(local, n, 'S') && isNextChar(local, n, 'H')) {
code.append('K');
break;
}
if (isNextChar(local, n, 'H')) {
if ((n == 0) && (wdsz >= 3) && isVowel(local, 2)) {
code.append('K');
} else {
code.append('X');
}
} else {
code.append('K');
}
break;
case 'D':
if (!isLastChar(wdsz, n + 1) && isNextChar(local, n, 'G') && (FRONTV.indexOf(local.charAt(n + 2)) >= 0)) {
code.append('J');
n += 2;
} else {
code.append('T');
}
break;
case 'G':
if (isLastChar(wdsz, n + 1) && isNextChar(local, n, 'H')) {
break;
}
if (!isLastChar(wdsz, n + 1) && isNextChar(local, n, 'H') && !isVowel(local, n + 2)) {
break;
}
if ((n > 0) && (regionMatch(local, n, ""GN"") || regionMatch(local, n, ""GNED""))) {
break;
}
if (isPreviousChar(local, n, 'G')) {
hard = true;
} else {
hard = false;
}
if (!isLastChar(wdsz, n) && (FRONTV.indexOf(local.charAt(n + 1)) >= 0) && (!hard)) {
code.append('J');
} else {
code.append('K');
}
break;
case 'H':
if (isLastChar(wdsz, n)) {
break;
}
if ((n > 0) && (VARSON.indexOf(local.charAt(n - 1)) >= 0)) {
break;
}
if (isVowel(local, n + 1)) {
code.append('H');
}
break;
case 'F':
case 'J':
case 'L':
case 'M':
case 'N':
case 'R':
code.append(symb);
break;
case 'K':
if (n > 0) {
if (!isPreviousChar(local, n, 'C')) {
code.append(symb);
}
} else {
code.append(symb);
}
break;
case 'P':
if (isNextChar(local, n, 'H')) {
code.append('F');
} else {
code.append(symb);
}
break;
case 'Q':
code.append('K');
break;
case 'S':
if (regionMatch(local, n, ""SH"") || regionMatch(local, n, ""SIO"") || regionMatch(local, n, ""SIA"")) {
code.append('X');
} else {
code.append('S');
}
break;
case 'T':
if (regionMatch(local, n, ""TIA"") || regionMatch(local, n, ""TIO"")) {
code.append('X');
break;
}
if (regionMatch(local, n, ""TCH"")) {
break;
}
if (regionMatch(local, n, ""TH"")) {
code.append('0');
} else {
code.append('T');
}
break;
case 'V':
code.append('F');
break;
case 'W':
case 'Y':
if (!isLastChar(wdsz, n) && isVowel(local, n + 1)) {
code.append(symb);
}
break;
case 'X':
code.append('K');
code.append('S');
break;
case 'Z':
code.append('S');
break;
}
n++;
}
if (code.length() > this.getMaxCodeLen()) {
code.setLength(this.getMaxCodeLen());
}
}
return code.toString();
}","public String metaphone(String txt) {
boolean booleanVar1 = booleanLiteral2;
if ((txt == null) || (txt.length() == 0)) {
return """";
}
if (txt.length() == 1) {
return txt.toUpperCase();
}
char[] charArrayVar3 = charArrayLiteral4;
StringBuffer stringbufferVar5 = stringbufferLiteral6;
StringBuffer stringbufferVar7 = stringbufferLiteral8;
switch(charArrayVar3[0]) {
case 'K':
case 'G':
case 'P':
if (charArrayVar3[1] == 'N') {
stringbufferVar5.append(charArrayVar3, 1, charArrayVar3.length - 1);
} else {
stringbufferVar5.append(charArrayVar3);
}
break;
case 'A':
if (charArrayVar3[1] == 'E') {
stringbufferVar5.append(charArrayVar3, 1, charArrayVar3.length - 1);
} else {
stringbufferVar5.append(charArrayVar3);
}
break;
case 'W':
if (charArrayVar3[1] == 'R') {
stringbufferVar5.append(charArrayVar3, 1, charArrayVar3.length - 1);
break;
}
if (charArrayVar3[1] == 'H') {
stringbufferVar5.append(charArrayVar3, 1, charArrayVar3.length - 1);
stringbufferVar5.setCharAt(0, 'W');
} else {
stringbufferVar5.append(charArrayVar3);
}
break;
case 'X':
charArrayVar3[0] = 'S';
stringbufferVar5.append(charArrayVar3);
break;
default:
stringbufferVar5.append(charArrayVar3);
}
int intVar9 = intLiteral10;
int intVar11 = intLiteral12;
while ((stringbufferVar7.length() < this.getMaxCodeLen()) && (intVar11 < intVar9)) {
char charVar13 = charLiteral14;
if ((charVar13 != 'C') && (isPreviousChar(stringbufferVar5, intVar11, charVar13))) {
intVar11++;
} else {
switch(charVar13) {
case 'A':
case 'E':
case 'I':
case 'O':
case 'U':
if (intVar11 == 0) {
stringbufferVar7.append(charVar13);
}
break;
case 'B':
if (isPreviousChar(stringbufferVar5, intVar11, 'M') && isLastChar(intVar9, intVar11)) {
break;
}
stringbufferVar7.append(charVar13);
break;
case 'C':
if (isPreviousChar(stringbufferVar5, intVar11, 'S') && !isLastChar(intVar9, intVar11) && (FRONTV.indexOf(stringbufferVar5.charAt(intVar11 + 1)) >= 0)) {
break;
}
if (regionMatch(stringbufferVar5, intVar11, ""CIA"")) {
stringbufferVar7.append('X');
break;
}
if (!isLastChar(intVar9, intVar11) && (FRONTV.indexOf(stringbufferVar5.charAt(intVar11 + 1)) >= 0)) {
stringbufferVar7.append('S');
break;
}
if (isPreviousChar(stringbufferVar5, intVar11, 'S') && isNextChar(stringbufferVar5, intVar11, 'H')) {
stringbufferVar7.append('K');
break;
}
if (isNextChar(stringbufferVar5, intVar11, 'H')) {
if ((intVar11 == 0) && (intVar9 >= 3) && isVowel(stringbufferVar5, 2)) {
stringbufferVar7.append('K');
} else {
stringbufferVar7.append('X');
}
} else {
stringbufferVar7.append('K');
}
break;
case 'D':
if (!isLastChar(intVar9, intVar11 + 1) && isNextChar(stringbufferVar5, intVar11, 'G') && (FRONTV.indexOf(stringbufferVar5.charAt(intVar11 + 2)) >= 0)) {
stringbufferVar7.append('J');
intVar11 += 2;
} else {
stringbufferVar7.append('T');
}
break;
case 'G':
if (isLastChar(intVar9, intVar11 + 1) && isNextChar(stringbufferVar5, intVar11, 'H')) {
break;
}
if (!isLastChar(intVar9, intVar11 + 1) && isNextChar(stringbufferVar5, intVar11, 'H') && !isVowel(stringbufferVar5, intVar11 + 2)) {
break;
}
if ((intVar11 > 0) && (regionMatch(stringbufferVar5, intVar11, ""GN"") || regionMatch(stringbufferVar5, intVar11, ""GNED""))) {
break;
}
if (isPreviousChar(stringbufferVar5, intVar11, 'G')) {
booleanVar1 = true;
} else {
booleanVar1 = false;
}
if (!isLastChar(intVar9, intVar11) && (FRONTV.indexOf(stringbufferVar5.charAt(intVar11 + 1)) >= 0) && (!booleanVar1)) {
stringbufferVar7.append('J');
} else {
stringbufferVar7.append('K');
}
break;
case 'H':
if (isLastChar(intVar9, intVar11)) {
break;
}
if ((intVar11 > 0) && (VARSON.indexOf(stringbufferVar5.charAt(intVar11 - 1)) >= 0)) {
break;
}
if (isVowel(stringbufferVar5, intVar11 + 1)) {
stringbufferVar7.append('H');
}
break;
case 'F':
case 'J':
case 'L':
case 'M':
case 'N':
case 'R':
stringbufferVar7.append(charVar13);
break;
case 'K':
if (intVar11 > 0) {
if (!isPreviousChar(stringbufferVar5, intVar11, 'C')) {
stringbufferVar7.append(charVar13);
}
} else {
stringbufferVar7.append(charVar13);
}
break;
case 'P':
if (isNextChar(stringbufferVar5, intVar11, 'H')) {
stringbufferVar7.append('F');
} else {
stringbufferVar7.append(charVar13);
}
break;
case 'Q':
stringbufferVar7.append('K');
break;
case 'S':
if (regionMatch(stringbufferVar5, intVar11, ""SH"") || regionMatch(stringbufferVar5, intVar11, ""SIO"") || regionMatch(stringbufferVar5, intVar11, ""SIA"")) {
stringbufferVar7.append('X');
} else {
stringbufferVar7.append('S');
}
break;
case 'T':
if (regionMatch(stringbufferVar5, intVar11, ""TIA"") || regionMatch(stringbufferVar5, intVar11, ""TIO"")) {
stringbufferVar7.append('X');
break;
}
if (regionMatch(stringbufferVar5, intVar11, ""TCH"")) {
break;
}
if (regionMatch(stringbufferVar5, intVar11, ""TH"")) {
stringbufferVar7.append('0');
} else {
stringbufferVar7.append('T');
}
break;
case 'V':
stringbufferVar7.append('F');
break;
case 'W':
case 'Y':
if (!isLastChar(intVar9, intVar11) && isVowel(stringbufferVar5, intVar11 + 1)) {
stringbufferVar7.append(charVar13);
}
break;
case 'X':
stringbufferVar7.append('K');
stringbufferVar7.append('S');
break;
case 'Z':
stringbufferVar7.append('S');
break;
}
intVar11++;
}
if (stringbufferVar7.length() > this.getMaxCodeLen()) {
stringbufferVar7.setLength(this.getMaxCodeLen());
}
}
return stringbufferVar7.toString();
}"
1125,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,codec,95,"return null;
","protected byte[] doEncoding(byte[] bytes) {
if (bytes == null) {
return null;
}
return Base64.encodeBase64(bytes);
}","protected byte[] doEncoding(byte[] bytes) {
if (bytes == null) {
return null;
}
return Base64.encodeBase64(bytes);
}"
1129,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,codec,99,"return null;
","public static final byte[] decodeQuotedPrintable(byte[] bytes) throws DecoderException {
if (bytes == null) {
return null;
}
ByteArrayOutputStream buffer = new ByteArrayOutputStream();
for (int i = 0; i < bytes.length; i++) {
int b = bytes[i];
if (b == ESCAPE_CHAR) {
try {
int u = Character.digit((char) bytes[++i], 16);
int l = Character.digit((char) bytes[++i], 16);
if (u == -1 || l == -1) {
throw new DecoderException(""Invalid quoted-printable encoding"");
}
buffer.write((char) ((u << 4) + l));
} catch (ArrayIndexOutOfBoundsException e) {
throw new DecoderException(""Invalid quoted-printable encoding"");
}
} else {
buffer.write(b);
}
}
return buffer.toByteArray();
}","public static final byte[] decodeQuotedPrintable(byte[] bytes) throws DecoderException {
if (bytes == null) {
return null;
}
ByteArrayOutputStream bytearrayoutputstreamVar1 = bytearrayoutputstreamLiteral2;
for (int intVar10 = intLiteral11; intVar3 < intLiteral1; intVar3++) {
int intVar5 = intLiteral6;
if (intVar5 == ESCAPE_CHAR) {
try {
int intVar7 = intLiteral8;
int intVar9 = intLiteral8;
if (intVar7 == -1 || intVar9 == -1) {
throw new DecoderException(""Invalid quoted-printable encoding"");
}
bytearrayoutputstreamVar1.write((char) ((intVar7 << 4) + intVar9));
} catch (ArrayIndexOutOfBoundsException e) {
throw new DecoderException(""Invalid quoted-printable encoding"");
}
} else {
bytearrayoutputstreamVar1.write(intVar5);
}
}
return bytearrayoutputstreamVar1.toByteArray();
}"
1131,DODGY_CODE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,FP,codec,101,protected static byte ESCAPE_CHAR = '%';,protected static byte ESCAPE_CHAR = '%';,protected static byte byteVar1 = byteLiteral2;
1148,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,codec,118,"return null;
","@Override
protected byte[] doDecoding(final byte[] bytes) throws DecoderException {
if (bytes == null) {
return null;
}
boolean hasUnderscores = false;
for (final byte b : bytes) {
if (b == UNDERSCORE) {
hasUnderscores = true;
break;
}
}
if (hasUnderscores) {
final byte[] tmp = new byte[bytes.length];
for (int i = 0; i < bytes.length; i++) {
final byte b = bytes[i];
if (b != UNDERSCORE) {
tmp[i] = b;
} else {
tmp[i] = BLANK;
}
}
return QuotedPrintableCodec.decodeQuotedPrintable(tmp);
}
return QuotedPrintableCodec.decodeQuotedPrintable(bytes);
}","@Override
protected byte[] doDecoding(final byte[] bytes) throws DecoderException {
if (bytes == null) {
return null;
}
boolean booleanVar1 = booleanLiteral2;
for (final byte byteVar3 : bytes) {
if (byteVar3 == UNDERSCORE) {
booleanVar1 = true;
break;
}
}
if (booleanVar1) {
final byte[] byteArrayVar4 = byteArrayLiteral5;
for (int intVar9 = intLiteral10; intVar6 < intLiteral1; intVar6++) {
final byte byteVar3 = byteLiteral8;
if (byteVar3 != UNDERSCORE) {
byteArrayVar4[intVar6] = byteVar3;
} else {
byteArrayVar4[intVar6] = BLANK;
}
}
return QuotedPrintableCodec.decodeQuotedPrintable(byteArrayVar4);
}
return QuotedPrintableCodec.decodeQuotedPrintable(bytes);
}"
1149,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,codec,119,"return null;
","public static final byte[] decodeQuotedPrintable(final byte[] bytes) throws DecoderException {
if (bytes == null) {
return null;
}
final ByteArrayOutputStream buffer = new ByteArrayOutputStream();
for (int i = 0; i < bytes.length; i++) {
final int b = bytes[i];
if (b == ESCAPE_CHAR) {
try {
final int u = Utils.digit16(bytes[++i]);
final int l = Utils.digit16(bytes[++i]);
buffer.write((char) ((u << 4) + l));
} catch (final ArrayIndexOutOfBoundsException e) {
throw new DecoderException(""Invalid quoted-printable encoding"", e);
}
} else {
buffer.write(b);
}
}
return buffer.toByteArray();
}","public static final byte[] decodeQuotedPrintable(final byte[] bytes) throws DecoderException {
if (bytes == null) {
return null;
}
final ByteArrayOutputStream bytearrayoutputstreamVar1 = bytearrayoutputstreamLiteral2;
for (int intVar10 = intLiteral11; intVar3 < intLiteral1; intVar3++) {
final int intVar5 = intLiteral6;
if (intVar5 == ESCAPE_CHAR) {
try {
final int intVar7 = intLiteral8;
final int intVar9 = intLiteral8;
bytearrayoutputstreamVar1.write((char) ((intVar7 << 4) + intVar9));
} catch (final ArrayIndexOutOfBoundsException e) {
throw new DecoderException(""Invalid quoted-printable encoding"", e);
}
} else {
bytearrayoutputstreamVar1.write(intVar5);
}
}
return bytearrayoutputstreamVar1.toByteArray();
}"
1151,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,codec,121,"return null;
","public static final byte[] encodeUrl(BitSet urlsafe, final byte[] bytes) {
if (bytes == null) {
return null;
}
if (urlsafe == null) {
urlsafe = WWW_FORM_URL;
}
final ByteArrayOutputStream buffer = new ByteArrayOutputStream();
for (final byte c : bytes) {
int b = c;
if (b < 0) {
b = 256 + b;
}
if (urlsafe.get(b)) {
if (b == ' ') {
b = '+';
}
buffer.write(b);
} else {
buffer.write(ESCAPE_CHAR);
final char hex1 = Character.toUpperCase(Character.forDigit((b >> 4) & 0xF, RADIX));
final char hex2 = Character.toUpperCase(Character.forDigit(b & 0xF, RADIX));
buffer.write(hex1);
buffer.write(hex2);
}
}
return buffer.toByteArray();
}","public static final byte[] encodeUrl(BitSet urlsafe, final byte[] bytes) {
if (bytes == null) {
return null;
}
if (urlsafe == null) {
urlsafe = WWW_FORM_URL;
}
final ByteArrayOutputStream bytearrayoutputstreamVar1 = bytearrayoutputstreamLiteral2;
for (final byte byteVar3 : bytes) {
int intVar4 = intLiteral5;
if (intVar4 < 0) {
intVar4 = 256 + intVar4;
}
if (urlsafe.get(intVar4)) {
if (intVar4 == ' ') {
intVar4 = '+';
}
bytearrayoutputstreamVar1.write(intVar4);
} else {
bytearrayoutputstreamVar1.write(ESCAPE_CHAR);
final char charVar6 = charLiteral7;
final char charVar8 = charLiteral9;
bytearrayoutputstreamVar1.write(charVar6);
bytearrayoutputstreamVar1.write(charVar8);
}
}
return bytearrayoutputstreamVar1.toByteArray();
}"
1156,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,codec,126,"return null;
","public static byte[] getBytesUnchecked(final String string, final String charsetName) {
if (string == null) {
return null;
}
try {
return string.getBytes(charsetName);
} catch (final UnsupportedEncodingException e) {
throw StringUtils.newIllegalStateException(charsetName, e);
}
}","public static byte[] getBytesUnchecked(final String string, final String charsetName) {
if (string == null) {
return null;
}
try {
return string.getBytes(charsetName);
} catch (final UnsupportedEncodingException e) {
throw StringUtils.newIllegalStateException(charsetName, e);
}
}"
1161,DODGY_CODE,UC_USELESS_CONDITION,FP,codec,131,"} else if (sumLength >= EIGHT && sumLength <= ELEVEN) {
","int getMinRating(final int sumLength) {
int minRating = 0;
if (sumLength <= FOUR) {
minRating = FIVE;
} else if (sumLength >= FIVE && sumLength <= SEVEN) {
minRating = FOUR;
} else if (sumLength >= EIGHT && sumLength <= ELEVEN) {
minRating = THREE;
} else if (sumLength == TWELVE) {
minRating = TWO;
} else {
minRating = ONE;
}
return minRating;
}","int getMinRating(final int sumLength) {
int intVar1 = intLiteral2;
if (sumLength <= FOUR) {
intVar1 = FIVE;
} else if (sumLength >= FIVE && sumLength <= SEVEN) {
intVar1 = FOUR;
} else if (sumLength >= EIGHT && sumLength <= ELEVEN) {
intVar1 = THREE;
} else if (sumLength == TWELVE) {
intVar1 = TWO;
} else {
intVar1 = ONE;
}
return intVar1;
}"
1169,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,codec,139,"return null;
","public static final byte[] encodeQuotedPrintable(BitSet printable, final byte[] bytes, boolean strict) {
if (bytes == null) {
return null;
}
if (printable == null) {
printable = PRINTABLE_CHARS;
}
final ByteArrayOutputStream buffer = new ByteArrayOutputStream();
if (strict) {
int pos = 1;
for (int i = 0; i < bytes.length - 3; i++) {
int b = getUnsignedOctet(i, bytes);
if (pos < SAFE_LENGTH) {
pos += encodeByte(b, !printable.get(b), buffer);
} else {
encodeByte(b, !printable.get(b) || isWhitespace(b), buffer);
buffer.write(ESCAPE_CHAR);
buffer.write(CR);
buffer.write(LF);
pos = 1;
}
}
int b = getUnsignedOctet(bytes.length - 3, bytes);
boolean encode = !printable.get(b) || (isWhitespace(b) && pos > SAFE_LENGTH - 5);
pos += encodeByte(b, encode, buffer);
// simplification: if < 6 bytes left, do a soft line break as we may need
if (pos > SAFE_LENGTH - 2) {
buffer.write(ESCAPE_CHAR);
buffer.write(CR);
buffer.write(LF);
}
for (int i = bytes.length - 2; i < bytes.length; i++) {
b = getUnsignedOctet(i, bytes);
encode = !printable.get(b) || (i > bytes.length - 2 && isWhitespace(b));
encodeByte(b, encode, buffer);
}
} else {
for (final byte c : bytes) {
int b = c;
if (b < 0) {
b = 256 + b;
}
if (printable.get(b)) {
buffer.write(b);
} else {
encodeQuotedPrintable(b, buffer);
}
}
}
return buffer.toByteArray();
}","public static final byte[] encodeQuotedPrintable(BitSet printable, final byte[] bytes, boolean strict) {
if (bytes == null) {
return null;
}
if (printable == null) {
printable = PRINTABLE_CHARS;
}
final ByteArrayOutputStream bytearrayoutputstreamVar1 = bytearrayoutputstreamLiteral2;
if (strict) {
int intVar3 = intLiteral4;
for (int intVar15 = intLiteral16; intVar5 < intLiteral1; intVar5++) {
int intVar7 = intLiteral8;
if (intVar3 < SAFE_LENGTH) {
intVar3 += encodeByte(intVar7, !printable.get(intVar7), bytearrayoutputstreamVar1);
} else {
encodeByte(intVar7, !printable.get(intVar7) || isWhitespace(intVar7), bytearrayoutputstreamVar1);
bytearrayoutputstreamVar1.write(ESCAPE_CHAR);
bytearrayoutputstreamVar1.write(CR);
bytearrayoutputstreamVar1.write(LF);
intVar3 = 1;
}
}
int intVar7 = intLiteral9;
boolean booleanVar10 = booleanLiteral11;
intVar3 += encodeByte(intVar7, booleanVar10, bytearrayoutputstreamVar1);
// simplification: if < 6 bytes left, do a soft line break as we may need
if (intVar3 > SAFE_LENGTH - 2) {
bytearrayoutputstreamVar1.write(ESCAPE_CHAR);
bytearrayoutputstreamVar1.write(CR);
bytearrayoutputstreamVar1.write(LF);
}
for (int intVar15 = intLiteral17; intVar5 < intLiteral2; intVar5++) {
intVar7 = getUnsignedOctet(intVar5, bytes);
booleanVar10 = !printable.get(intVar7) || (intVar5 > bytes.length - 2 && isWhitespace(intVar7));
encodeByte(intVar7, booleanVar10, bytearrayoutputstreamVar1);
}
} else {
for (final byte byteVar13 : bytes) {
int intVar7 = intLiteral14;
if (intVar7 < 0) {
intVar7 = 256 + intVar7;
}
if (printable.get(intVar7)) {
bytearrayoutputstreamVar1.write(intVar7);
} else {
encodeQuotedPrintable(intVar7, bytearrayoutputstreamVar1);
}
}
}
return bytearrayoutputstreamVar1.toByteArray();
}"
1174,DODGY_CODE,SF_SWITCH_NO_DEFAULT,FP,codec,144,"switch (modulus) {
case 2 : 
buffer[pos++] = (byte) ((bitWorkArea >> 2) & MASK_8BITS);
break;
case 3 : 
buffer[pos++] = (byte) ((bitWorkArea >> 7) & MASK_8BITS);
break;
case 4 : 
bitWorkArea = bitWorkArea >> 4; 
buffer[pos++] = (byte) ((bitWorkArea >> 8) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea) & MASK_8BITS);
break;
case 5 : 
bitWorkArea = bitWorkArea >> 1;
buffer[pos++] = (byte) ((bitWorkArea >> 16) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea >> 8) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea) & MASK_8BITS);
break;
case 6 : 
bitWorkArea = bitWorkArea >> 6;
buffer[pos++] = (byte) ((bitWorkArea >> 16) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea >> 8) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea) & MASK_8BITS);
break;
case 7 : 
bitWorkArea = bitWorkArea >> 3;
buffer[pos++] = (byte) ((bitWorkArea >> 24) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea >> 16) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea >> 8) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea) & MASK_8BITS);
","@Override
void decode(byte[] in, int inPos, int inAvail) {
if (eof) {
return;
}
if (inAvail < 0) {
eof = true;
}
for (int i = 0; i < inAvail; i++) {
byte b = in[inPos++];
if (b == PAD) {
eof = true;
break;
} else {
ensureBufferSize(decodeSize);
if (b >= 0 && b < this.decodeTable.length) {
int result = this.decodeTable[b];
if (result >= 0) {
modulus = (modulus + 1) % BYTES_PER_ENCODED_BLOCK;
bitWorkArea = (bitWorkArea << BITS_PER_ENCODED_BYTE) + result;
if (modulus == 0) {
buffer[pos++] = (byte) ((bitWorkArea >> 32) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea >> 24) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea >> 16) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea >> 8) & MASK_8BITS);
buffer[pos++] = (byte) (bitWorkArea & MASK_8BITS);
}
}
}
}
}
// Two forms of EOF as far as Base32 decoder is concerned: actual
if (eof && modulus >= 2) {
ensureBufferSize(decodeSize);
switch(modulus) {
case 2:
buffer[pos++] = (byte) ((bitWorkArea >> 2) & MASK_8BITS);
break;
case 3:
buffer[pos++] = (byte) ((bitWorkArea >> 7) & MASK_8BITS);
break;
case 4:
bitWorkArea = bitWorkArea >> 4;
buffer[pos++] = (byte) ((bitWorkArea >> 8) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea) & MASK_8BITS);
break;
case 5:
bitWorkArea = bitWorkArea >> 1;
buffer[pos++] = (byte) ((bitWorkArea >> 16) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea >> 8) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea) & MASK_8BITS);
break;
case 6:
bitWorkArea = bitWorkArea >> 6;
buffer[pos++] = (byte) ((bitWorkArea >> 16) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea >> 8) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea) & MASK_8BITS);
break;
case 7:
bitWorkArea = bitWorkArea >> 3;
buffer[pos++] = (byte) ((bitWorkArea >> 24) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea >> 16) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea >> 8) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea) & MASK_8BITS);
break;
}
}
}","@Override
void decode(byte[] in, int inPos, int inAvail) {
if (eof) {
return;
}
if (inAvail < 0) {
eof = true;
}
for (int intVar7 = intLiteral8; intVar1 < intLiteral1; intVar1++) {
byte byteVar3 = byteLiteral4;
if (byteVar3 == PAD) {
eof = true;
break;
} else {
ensureBufferSize(decodeSize);
if (byteVar3 >= 0 && byteVar3 < this.decodeTable.length) {
int intVar5 = intLiteral6;
if (intVar5 >= 0) {
modulus = (modulus + 1) % BYTES_PER_ENCODED_BLOCK;
bitWorkArea = (bitWorkArea << BITS_PER_ENCODED_BYTE) + intVar5;
if (modulus == 0) {
buffer[pos++] = (byte) ((bitWorkArea >> 32) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea >> 24) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea >> 16) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea >> 8) & MASK_8BITS);
buffer[pos++] = (byte) (bitWorkArea & MASK_8BITS);
}
}
}
}
}
// Two forms of EOF as far as Base32 decoder is concerned: actual
if (eof && modulus >= 2) {
ensureBufferSize(decodeSize);
switch(modulus) {
case 2:
buffer[pos++] = (byte) ((bitWorkArea >> 2) & MASK_8BITS);
break;
case 3:
buffer[pos++] = (byte) ((bitWorkArea >> 7) & MASK_8BITS);
break;
case 4:
bitWorkArea = bitWorkArea >> 4;
buffer[pos++] = (byte) ((bitWorkArea >> 8) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea) & MASK_8BITS);
break;
case 5:
bitWorkArea = bitWorkArea >> 1;
buffer[pos++] = (byte) ((bitWorkArea >> 16) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea >> 8) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea) & MASK_8BITS);
break;
case 6:
bitWorkArea = bitWorkArea >> 6;
buffer[pos++] = (byte) ((bitWorkArea >> 16) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea >> 8) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea) & MASK_8BITS);
break;
case 7:
bitWorkArea = bitWorkArea >> 3;
buffer[pos++] = (byte) ((bitWorkArea >> 24) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea >> 16) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea >> 8) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea) & MASK_8BITS);
break;
}
}
}"
1192,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,codec,162,"return null;
","private static byte[] getBytes(final String string, final Charset charset) {
if (string == null) {
return null;
}
return string.getBytes(charset);
}","private static byte[] getBytes(final String string, final Charset charset) {
if (string == null) {
return null;
}
return string.getBytes(charset);
}"
1193,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,codec,163,"return null;
","public static byte[] getBytesUnchecked(final String string, final String charsetName) {
if (string == null) {
return null;
}
try {
return string.getBytes(charsetName);
} catch (final UnsupportedEncodingException e) {
throw StringUtils.newIllegalStateException(charsetName, e);
}
}","public static byte[] getBytesUnchecked(final String string, final String charsetName) {
if (string == null) {
return null;
}
try {
return string.getBytes(charsetName);
} catch (final UnsupportedEncodingException e) {
throw StringUtils.newIllegalStateException(charsetName, e);
}
}"
1196,DODGY_CODE,SF_SWITCH_FALLTHROUGH,FP,codec,166,"case 7: localCrc = (localCrc >>> 8) ^ T[((localCrc ^ b[i++]) << 24) >>> 24];
case 6: localCrc = (localCrc >>> 8) ^ T[((localCrc ^ b[i++]) << 24) >>> 24];
","@Override
public void update(final byte[] b, final int offset, final int len) {
int localCrc = crc;
final int remainder = len & 0x7;
int i = offset;
for (final int end = offset + len - remainder; i < end; i += 8) {
final int x = localCrc ^ ((((b[i] << 24) >>> 24) + ((b[i + 1] << 24) >>> 16)) + (((b[i + 2] << 24) >>> 8) + (b[i + 3] << 24)));
localCrc = ((T[((x << 24) >>> 24) + 0x700] ^ T[((x << 16) >>> 24) + 0x600]) ^ (T[((x << 8) >>> 24) + 0x500] ^ T[(x >>> 24) + 0x400])) ^ ((T[((b[i + 4] << 24) >>> 24) + 0x300] ^ T[((b[i + 5] << 24) >>> 24) + 0x200]) ^ (T[((b[i + 6] << 24) >>> 24) + 0x100] ^ T[((b[i + 7] << 24) >>> 24)]));
}
switch(remainder) {
case 7:
localCrc = (localCrc >>> 8) ^ T[((localCrc ^ b[i++]) << 24) >>> 24];
case 6:
localCrc = (localCrc >>> 8) ^ T[((localCrc ^ b[i++]) << 24) >>> 24];
case 5:
localCrc = (localCrc >>> 8) ^ T[((localCrc ^ b[i++]) << 24) >>> 24];
case 4:
localCrc = (localCrc >>> 8) ^ T[((localCrc ^ b[i++]) << 24) >>> 24];
case 3:
localCrc = (localCrc >>> 8) ^ T[((localCrc ^ b[i++]) << 24) >>> 24];
case 2:
localCrc = (localCrc >>> 8) ^ T[((localCrc ^ b[i++]) << 24) >>> 24];
case 1:
localCrc = (localCrc >>> 8) ^ T[((localCrc ^ b[i++]) << 24) >>> 24];
default:
}
crc = localCrc;
}","@Override
public void update(final byte[] b, final int offset, final int len) {
int intVar1 = intLiteral2;
final int intVar3 = intLiteral4;
int intVar5 = intLiteral6;
for (final int intVar11 = intLiteral12; intVar5 < intLiteral1; intVar5 += 8) {
final int intVar9 = intLiteral10;
intVar1 = ((T[((intVar9 << 24) >>> 24) + 0x700] ^ T[((intVar9 << 16) >>> 24) + 0x600]) ^ (T[((intVar9 << 8) >>> 24) + 0x500] ^ T[(intVar9 >>> 24) + 0x400])) ^ ((T[((b[intVar5 + 4] << 24) >>> 24) + 0x300] ^ T[((b[intVar5 + 5] << 24) >>> 24) + 0x200]) ^ (T[((b[intVar5 + 6] << 24) >>> 24) + 0x100] ^ T[((b[intVar5 + 7] << 24) >>> 24)]));
}
switch(intVar3) {
case 7:
intVar1 = (intVar1 >>> 8) ^ T[((intVar1 ^ b[intVar5++]) << 24) >>> 24];
case 6:
intVar1 = (intVar1 >>> 8) ^ T[((intVar1 ^ b[intVar5++]) << 24) >>> 24];
case 5:
intVar1 = (intVar1 >>> 8) ^ T[((intVar1 ^ b[intVar5++]) << 24) >>> 24];
case 4:
intVar1 = (intVar1 >>> 8) ^ T[((intVar1 ^ b[intVar5++]) << 24) >>> 24];
case 3:
intVar1 = (intVar1 >>> 8) ^ T[((intVar1 ^ b[intVar5++]) << 24) >>> 24];
case 2:
intVar1 = (intVar1 >>> 8) ^ T[((intVar1 ^ b[intVar5++]) << 24) >>> 24];
case 1:
intVar1 = (intVar1 >>> 8) ^ T[((intVar1 ^ b[intVar5++]) << 24) >>> 24];
default:
}
crc = intVar1;
}"
1206,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,codec,176,"return null;
","@Override
protected byte[] doDecoding(final byte[] bytes) throws DecoderException {
if (bytes == null) {
return null;
}
boolean hasUnderscores = false;
for (final byte b : bytes) {
if (b == UNDERSCORE) {
hasUnderscores = true;
break;
}
}
if (hasUnderscores) {
final byte[] tmp = new byte[bytes.length];
for (int i = 0; i < bytes.length; i++) {
final byte b = bytes[i];
if (b != UNDERSCORE) {
tmp[i] = b;
} else {
tmp[i] = BLANK;
}
}
return QuotedPrintableCodec.decodeQuotedPrintable(tmp);
}
return QuotedPrintableCodec.decodeQuotedPrintable(bytes);
}","@Override
protected byte[] doDecoding(final byte[] bytes) throws DecoderException {
if (bytes == null) {
return null;
}
boolean booleanVar1 = booleanLiteral2;
for (final byte byteVar3 : bytes) {
if (byteVar3 == UNDERSCORE) {
booleanVar1 = true;
break;
}
}
if (booleanVar1) {
final byte[] byteArrayVar4 = byteArrayLiteral5;
for (int intVar9 = intLiteral10; intVar6 < intLiteral1; intVar6++) {
final byte byteVar3 = byteLiteral8;
if (byteVar3 != UNDERSCORE) {
byteArrayVar4[intVar6] = byteVar3;
} else {
byteArrayVar4[intVar6] = BLANK;
}
}
return QuotedPrintableCodec.decodeQuotedPrintable(byteArrayVar4);
}
return QuotedPrintableCodec.decodeQuotedPrintable(bytes);
}"
1208,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,codec,178,"return null;
","public static final byte[] decodeQuotedPrintable(final byte[] bytes) throws DecoderException {
if (bytes == null) {
return null;
}
final ByteArrayOutputStream buffer = new ByteArrayOutputStream();
for (int i = 0; i < bytes.length; i++) {
final int b = bytes[i];
if (b == ESCAPE_CHAR) {
try {
if (bytes[++i] == CR) {
continue;
}
final int u = Utils.digit16(bytes[i]);
final int l = Utils.digit16(bytes[++i]);
buffer.write((char) ((u << 4) + l));
} catch (final ArrayIndexOutOfBoundsException e) {
throw new DecoderException(""Invalid quoted-printable encoding"", e);
}
} else if (b != CR && b != LF) {
buffer.write(b);
}
}
return buffer.toByteArray();
}","public static final byte[] decodeQuotedPrintable(final byte[] bytes) throws DecoderException {
if (bytes == null) {
return null;
}
final ByteArrayOutputStream bytearrayoutputstreamVar1 = bytearrayoutputstreamLiteral2;
for (int intVar11 = intLiteral12; intVar3 < intLiteral1; intVar3++) {
final int intVar5 = intLiteral6;
if (intVar5 == ESCAPE_CHAR) {
try {
if (bytes[++intVar3] == CR) {
continue;
}
final int intVar7 = intLiteral8;
final int intVar9 = intLiteral10;
bytearrayoutputstreamVar1.write((char) ((intVar7 << 4) + intVar9));
} catch (final ArrayIndexOutOfBoundsException e) {
throw new DecoderException(""Invalid quoted-printable encoding"", e);
}
} else if (intVar5 != CR && intVar5 != LF) {
bytearrayoutputstreamVar1.write(intVar5);
}
}
return bytearrayoutputstreamVar1.toByteArray();
}"
1209,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,codec,179,"return null;
","public static final byte[] encodeQuotedPrintable(BitSet printable, final byte[] bytes, final boolean strict) {
if (bytes == null) {
return null;
}
if (printable == null) {
printable = PRINTABLE_CHARS;
}
final ByteArrayOutputStream buffer = new ByteArrayOutputStream();
if (strict) {
int pos = 1;
for (int i = 0; i < bytes.length - 3; i++) {
final int b = getUnsignedOctet(i, bytes);
if (pos < SAFE_LENGTH) {
pos += encodeByte(b, !printable.get(b), buffer);
} else {
encodeByte(b, !printable.get(b) || isWhitespace(b), buffer);
buffer.write(ESCAPE_CHAR);
buffer.write(CR);
buffer.write(LF);
pos = 1;
}
}
int b = getUnsignedOctet(bytes.length - 3, bytes);
boolean encode = !printable.get(b) || (isWhitespace(b) && pos > SAFE_LENGTH - 5);
pos += encodeByte(b, encode, buffer);
// simplification: if < 6 bytes left, do a soft line break as we may need
if (pos > SAFE_LENGTH - 2) {
buffer.write(ESCAPE_CHAR);
buffer.write(CR);
buffer.write(LF);
}
for (int i = bytes.length - 2; i < bytes.length; i++) {
b = getUnsignedOctet(i, bytes);
encode = !printable.get(b) || (i > bytes.length - 2 && isWhitespace(b));
encodeByte(b, encode, buffer);
}
} else {
for (final byte c : bytes) {
int b = c;
if (b < 0) {
b = 256 + b;
}
if (printable.get(b)) {
buffer.write(b);
} else {
encodeQuotedPrintable(b, buffer);
}
}
}
return buffer.toByteArray();
}","public static final byte[] encodeQuotedPrintable(BitSet printable, final byte[] bytes, final boolean strict) {
if (bytes == null) {
return null;
}
if (printable == null) {
printable = PRINTABLE_CHARS;
}
final ByteArrayOutputStream bytearrayoutputstreamVar1 = bytearrayoutputstreamLiteral2;
if (strict) {
int intVar3 = intLiteral4;
for (int intVar15 = intLiteral16; intVar5 < intLiteral1; intVar5++) {
final int intVar7 = intLiteral8;
if (intVar3 < SAFE_LENGTH) {
intVar3 += encodeByte(intVar7, !printable.get(intVar7), bytearrayoutputstreamVar1);
} else {
encodeByte(intVar7, !printable.get(intVar7) || isWhitespace(intVar7), bytearrayoutputstreamVar1);
bytearrayoutputstreamVar1.write(ESCAPE_CHAR);
bytearrayoutputstreamVar1.write(CR);
bytearrayoutputstreamVar1.write(LF);
intVar3 = 1;
}
}
int intVar7 = intLiteral9;
boolean booleanVar10 = booleanLiteral11;
intVar3 += encodeByte(intVar7, booleanVar10, bytearrayoutputstreamVar1);
// simplification: if < 6 bytes left, do a soft line break as we may need
if (intVar3 > SAFE_LENGTH - 2) {
bytearrayoutputstreamVar1.write(ESCAPE_CHAR);
bytearrayoutputstreamVar1.write(CR);
bytearrayoutputstreamVar1.write(LF);
}
for (int intVar15 = intLiteral17; intVar5 < intLiteral2; intVar5++) {
intVar7 = getUnsignedOctet(intVar5, bytes);
booleanVar10 = !printable.get(intVar7) || (intVar5 > bytes.length - 2 && isWhitespace(intVar7));
encodeByte(intVar7, booleanVar10, bytearrayoutputstreamVar1);
}
} else {
for (final byte byteVar13 : bytes) {
int intVar7 = intLiteral14;
if (intVar7 < 0) {
intVar7 = 256 + intVar7;
}
if (printable.get(intVar7)) {
bytearrayoutputstreamVar1.write(intVar7);
} else {
encodeQuotedPrintable(intVar7, bytearrayoutputstreamVar1);
}
}
}
return bytearrayoutputstreamVar1.toByteArray();
}"
1217,DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,FP,codec,187,"if (m == null || !m.find()) {
","private static String sha2Crypt(final byte[] keyBytes, final String salt, final String saltPrefix, final int blocksize, final String algorithm) {
final int keyLen = keyBytes.length;
int rounds = ROUNDS_DEFAULT;
boolean roundsCustom = false;
if (salt == null) {
throw new IllegalArgumentException(""Salt must not be null"");
}
final Matcher m = SALT_PATTERN.matcher(salt);
if (m == null || !m.find()) {
throw new IllegalArgumentException(""Invalid salt value: "" + salt);
}
if (m.group(3) != null) {
rounds = Integer.parseInt(m.group(3));
rounds = Math.max(ROUNDS_MIN, Math.min(ROUNDS_MAX, rounds));
roundsCustom = true;
}
final String saltString = m.group(4);
final byte[] saltBytes = saltString.getBytes(Charsets.UTF_8);
final int saltLen = saltBytes.length;
MessageDigest ctx = DigestUtils.getDigest(algorithm);
ctx.update(keyBytes);
// NB: the MD5 algorithm did add the $1$ salt_prefix. This is not deemed
ctx.update(saltBytes);
MessageDigest altCtx = DigestUtils.getDigest(algorithm);
altCtx.update(keyBytes);
altCtx.update(saltBytes);
altCtx.update(keyBytes);
byte[] altResult = altCtx.digest();
int cnt = keyBytes.length;
while (cnt > blocksize) {
ctx.update(altResult, 0, blocksize);
cnt -= blocksize;
}
ctx.update(altResult, 0, cnt);
// NB: this step differs significantly from the MD5 algorithm. It
cnt = keyBytes.length;
while (cnt > 0) {
if ((cnt & 1) != 0) {
ctx.update(altResult, 0, blocksize);
} else {
ctx.update(keyBytes);
}
cnt >>= 1;
}
altResult = ctx.digest();
altCtx = DigestUtils.getDigest(algorithm);
for (int i = 1; i <= keyLen; i++) {
altCtx.update(keyBytes);
}
byte[] tempResult = altCtx.digest();
final byte[] pBytes = new byte[keyLen];
int cp = 0;
while (cp < keyLen - blocksize) {
System.arraycopy(tempResult, 0, pBytes, cp, blocksize);
cp += blocksize;
}
System.arraycopy(tempResult, 0, pBytes, cp, keyLen - cp);
altCtx = DigestUtils.getDigest(algorithm);
for (int i = 1; i <= 16 + (altResult[0] & 0xff); i++) {
altCtx.update(saltBytes);
}
tempResult = altCtx.digest();
// Remark: The salt is limited to 16 chars, how does this make sense?
final byte[] sBytes = new byte[saltLen];
cp = 0;
while (cp < saltLen - blocksize) {
System.arraycopy(tempResult, 0, sBytes, cp, blocksize);
cp += blocksize;
}
System.arraycopy(tempResult, 0, sBytes, cp, saltLen - cp);
for (int i = 0; i <= rounds - 1; i++) {
ctx = DigestUtils.getDigest(algorithm);
if ((i & 1) != 0) {
ctx.update(pBytes, 0, keyLen);
} else {
ctx.update(altResult, 0, blocksize);
}
if (i % 3 != 0) {
ctx.update(sBytes, 0, saltLen);
}
if (i % 7 != 0) {
ctx.update(pBytes, 0, keyLen);
}
if ((i & 1) != 0) {
ctx.update(altResult, 0, blocksize);
} else {
ctx.update(pBytes, 0, keyLen);
}
altResult = ctx.digest();
}
// size specified above, consisting of multiple pieces:
final StringBuilder buffer = new StringBuilder(saltPrefix);
if (roundsCustom) {
buffer.append(ROUNDS_PREFIX);
buffer.append(rounds);
buffer.append(""$"");
}
buffer.append(saltString);
buffer.append(""$"");
// follows:
// characters as output:
// 1. character: the six low bits of the first byte
// 2. character: the two high bits of the first byte and the
// 3. character: the four high bytes from the second byte and
// 4. character: the six high bits from the third byte
// This was just a safeguard in the C implementation:
if (blocksize == 32) {
B64.b64from24bit(altResult[0], altResult[10], altResult[20], 4, buffer);
B64.b64from24bit(altResult[21], altResult[1], altResult[11], 4, buffer);
B64.b64from24bit(altResult[12], altResult[22], altResult[2], 4, buffer);
B64.b64from24bit(altResult[3], altResult[13], altResult[23], 4, buffer);
B64.b64from24bit(altResult[24], altResult[4], altResult[14], 4, buffer);
B64.b64from24bit(altResult[15], altResult[25], altResult[5], 4, buffer);
B64.b64from24bit(altResult[6], altResult[16], altResult[26], 4, buffer);
B64.b64from24bit(altResult[27], altResult[7], altResult[17], 4, buffer);
B64.b64from24bit(altResult[18], altResult[28], altResult[8], 4, buffer);
B64.b64from24bit(altResult[9], altResult[19], altResult[29], 4, buffer);
B64.b64from24bit((byte) 0, altResult[31], altResult[30], 3, buffer);
} else {
B64.b64from24bit(altResult[0], altResult[21], altResult[42], 4, buffer);
B64.b64from24bit(altResult[22], altResult[43], altResult[1], 4, buffer);
B64.b64from24bit(altResult[44], altResult[2], altResult[23], 4, buffer);
B64.b64from24bit(altResult[3], altResult[24], altResult[45], 4, buffer);
B64.b64from24bit(altResult[25], altResult[46], altResult[4], 4, buffer);
B64.b64from24bit(altResult[47], altResult[5], altResult[26], 4, buffer);
B64.b64from24bit(altResult[6], altResult[27], altResult[48], 4, buffer);
B64.b64from24bit(altResult[28], altResult[49], altResult[7], 4, buffer);
B64.b64from24bit(altResult[50], altResult[8], altResult[29], 4, buffer);
B64.b64from24bit(altResult[9], altResult[30], altResult[51], 4, buffer);
B64.b64from24bit(altResult[31], altResult[52], altResult[10], 4, buffer);
B64.b64from24bit(altResult[53], altResult[11], altResult[32], 4, buffer);
B64.b64from24bit(altResult[12], altResult[33], altResult[54], 4, buffer);
B64.b64from24bit(altResult[34], altResult[55], altResult[13], 4, buffer);
B64.b64from24bit(altResult[56], altResult[14], altResult[35], 4, buffer);
B64.b64from24bit(altResult[15], altResult[36], altResult[57], 4, buffer);
B64.b64from24bit(altResult[37], altResult[58], altResult[16], 4, buffer);
B64.b64from24bit(altResult[59], altResult[17], altResult[38], 4, buffer);
B64.b64from24bit(altResult[18], altResult[39], altResult[60], 4, buffer);
B64.b64from24bit(altResult[40], altResult[61], altResult[19], 4, buffer);
B64.b64from24bit(altResult[62], altResult[20], altResult[41], 4, buffer);
B64.b64from24bit((byte) 0, (byte) 0, altResult[63], 2, buffer);
}
Arrays.fill(tempResult, (byte) 0);
Arrays.fill(pBytes, (byte) 0);
Arrays.fill(sBytes, (byte) 0);
ctx.reset();
altCtx.reset();
Arrays.fill(keyBytes, (byte) 0);
Arrays.fill(saltBytes, (byte) 0);
return buffer.toString();
}","private static String sha2Crypt(final byte[] keyBytes, final String salt, final String saltPrefix, final int blocksize, final String algorithm) {
final int intVar1 = intLiteral2;
int intVar3 = intLiteral4;
boolean booleanVar5 = booleanLiteral6;
if (salt == null) {
throw new IllegalArgumentException(""Salt must not be null"");
}
final Matcher matcherVar7 = matcherLiteral8;
if (matcherVar7 == null || !matcherVar7.find()) {
throw new IllegalArgumentException(""Invalid salt value: "" + salt);
}
if (matcherVar7.group(3) != null) {
intVar3 = Integer.parseInt(matcherVar7.group(3));
intVar3 = Math.max(ROUNDS_MIN, Math.min(ROUNDS_MAX, intVar3));
booleanVar5 = true;
}
final String stringVar9 = stringLiteral10;
final byte[] byteArrayVar11 = byteArrayLiteral12;
final int intVar13 = intLiteral14;
MessageDigest messagedigestVar15 = messagedigestLiteral16;
messagedigestVar15.update(keyBytes);
// NB: the MD5 algorithm did add the $1$ salt_prefix. This is not deemed
messagedigestVar15.update(byteArrayVar11);
MessageDigest messagedigestVar17 = messagedigestLiteral16;
messagedigestVar17.update(keyBytes);
messagedigestVar17.update(byteArrayVar11);
messagedigestVar17.update(keyBytes);
byte[] byteArrayVar18 = byteArrayLiteral19;
int intVar20 = intLiteral2;
while (intVar20 > blocksize) {
messagedigestVar15.update(byteArrayVar18, 0, blocksize);
intVar20 -= blocksize;
}
messagedigestVar15.update(byteArrayVar18, 0, intVar20);
// NB: this step differs significantly from the MD5 algorithm. It
intVar20 = keyBytes.length;
while (intVar20 > 0) {
if ((intVar20 & 1) != 0) {
messagedigestVar15.update(byteArrayVar18, 0, blocksize);
} else {
messagedigestVar15.update(keyBytes);
}
intVar20 >>= 1;
}
byteArrayVar18 = messagedigestVar15.digest();
messagedigestVar17 = DigestUtils.getDigest(algorithm);
for (int intVar32 = intLiteral33; intVar21 <= intLiteral1; intVar21++) {
messagedigestVar17.update(keyBytes);
}
byte[] byteArrayVar23 = byteArrayLiteral19;
final byte[] byteArrayVar24 = byteArrayLiteral25;
int intVar26 = intLiteral27;
while (intVar26 < intVar1 - blocksize) {
System.arraycopy(byteArrayVar23, 0, byteArrayVar24, intVar26, blocksize);
intVar26 += blocksize;
}
System.arraycopy(byteArrayVar23, 0, byteArrayVar24, intVar26, intVar1 - intVar26);
messagedigestVar17 = DigestUtils.getDigest(algorithm);
for (int intVar32 = intLiteral33; intVar21 <= intLiteral2; intVar21++) {
messagedigestVar17.update(byteArrayVar11);
}
byteArrayVar23 = messagedigestVar17.digest();
// Remark: The salt is limited to 16 chars, how does this make sense?
final byte[] byteArrayVar28 = byteArrayLiteral29;
intVar26 = 0;
while (intVar26 < intVar13 - blocksize) {
System.arraycopy(byteArrayVar23, 0, byteArrayVar28, intVar26, blocksize);
intVar26 += blocksize;
}
System.arraycopy(byteArrayVar23, 0, byteArrayVar28, intVar26, intVar13 - intVar26);
for (int intVar32 = intLiteral34; intVar21 <= intLiteral3; intVar21++) {
messagedigestVar15 = DigestUtils.getDigest(algorithm);
if ((intVar21 & 1) != 0) {
messagedigestVar15.update(byteArrayVar24, 0, intVar1);
} else {
messagedigestVar15.update(byteArrayVar18, 0, blocksize);
}
if (intVar21 % 3 != 0) {
messagedigestVar15.update(byteArrayVar28, 0, intVar13);
}
if (intVar21 % 7 != 0) {
messagedigestVar15.update(byteArrayVar24, 0, intVar1);
}
if ((intVar21 & 1) != 0) {
messagedigestVar15.update(byteArrayVar18, 0, blocksize);
} else {
messagedigestVar15.update(byteArrayVar24, 0, intVar1);
}
byteArrayVar18 = messagedigestVar15.digest();
}
// size specified above, consisting of multiple pieces:
final StringBuilder stringbuilderVar30 = stringbuilderLiteral31;
if (booleanVar5) {
stringbuilderVar30.append(ROUNDS_PREFIX);
stringbuilderVar30.append(intVar3);
stringbuilderVar30.append(""$"");
}
stringbuilderVar30.append(stringVar9);
stringbuilderVar30.append(""$"");
// follows:
// characters as output:
// 1. character: the six low bits of the first byte
// 2. character: the two high bits of the first byte and the
// 3. character: the four high bytes from the second byte and
// 4. character: the six high bits from the third byte
// This was just a safeguard in the C implementation:
if (blocksize == 32) {
B64.b64from24bit(byteArrayVar18[0], byteArrayVar18[10], byteArrayVar18[20], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[21], byteArrayVar18[1], byteArrayVar18[11], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[12], byteArrayVar18[22], byteArrayVar18[2], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[3], byteArrayVar18[13], byteArrayVar18[23], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[24], byteArrayVar18[4], byteArrayVar18[14], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[15], byteArrayVar18[25], byteArrayVar18[5], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[6], byteArrayVar18[16], byteArrayVar18[26], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[27], byteArrayVar18[7], byteArrayVar18[17], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[18], byteArrayVar18[28], byteArrayVar18[8], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[9], byteArrayVar18[19], byteArrayVar18[29], 4, stringbuilderVar30);
B64.b64from24bit((byte) 0, byteArrayVar18[31], byteArrayVar18[30], 3, stringbuilderVar30);
} else {
B64.b64from24bit(byteArrayVar18[0], byteArrayVar18[21], byteArrayVar18[42], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[22], byteArrayVar18[43], byteArrayVar18[1], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[44], byteArrayVar18[2], byteArrayVar18[23], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[3], byteArrayVar18[24], byteArrayVar18[45], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[25], byteArrayVar18[46], byteArrayVar18[4], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[47], byteArrayVar18[5], byteArrayVar18[26], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[6], byteArrayVar18[27], byteArrayVar18[48], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[28], byteArrayVar18[49], byteArrayVar18[7], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[50], byteArrayVar18[8], byteArrayVar18[29], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[9], byteArrayVar18[30], byteArrayVar18[51], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[31], byteArrayVar18[52], byteArrayVar18[10], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[53], byteArrayVar18[11], byteArrayVar18[32], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[12], byteArrayVar18[33], byteArrayVar18[54], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[34], byteArrayVar18[55], byteArrayVar18[13], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[56], byteArrayVar18[14], byteArrayVar18[35], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[15], byteArrayVar18[36], byteArrayVar18[57], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[37], byteArrayVar18[58], byteArrayVar18[16], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[59], byteArrayVar18[17], byteArrayVar18[38], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[18], byteArrayVar18[39], byteArrayVar18[60], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[40], byteArrayVar18[61], byteArrayVar18[19], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[62], byteArrayVar18[20], byteArrayVar18[41], 4, stringbuilderVar30);
B64.b64from24bit((byte) 0, (byte) 0, byteArrayVar18[63], 2, stringbuilderVar30);
}
Arrays.fill(byteArrayVar23, (byte) 0);
Arrays.fill(byteArrayVar24, (byte) 0);
Arrays.fill(byteArrayVar28, (byte) 0);
messagedigestVar15.reset();
messagedigestVar17.reset();
Arrays.fill(keyBytes, (byte) 0);
Arrays.fill(byteArrayVar11, (byte) 0);
return stringbuilderVar30.toString();
}"
1221,DODGY_CODE,UC_USELESS_CONDITION,FP,codec,191,"} else if (sumLength >= FIVE && sumLength <= SEVEN) {
","int getMinRating(final int sumLength) {
int minRating = 0;
if (sumLength <= FOUR) {
minRating = FIVE;
} else if (sumLength >= FIVE && sumLength <= SEVEN) {
minRating = FOUR;
} else if (sumLength >= EIGHT && sumLength <= ELEVEN) {
minRating = THREE;
} else if (sumLength == TWELVE) {
minRating = TWO;
} else {
minRating = ONE;
}
return minRating;
}","int getMinRating(final int sumLength) {
int intVar1 = intLiteral2;
if (sumLength <= FOUR) {
intVar1 = FIVE;
} else if (sumLength >= FIVE && sumLength <= SEVEN) {
intVar1 = FOUR;
} else if (sumLength >= EIGHT && sumLength <= ELEVEN) {
intVar1 = THREE;
} else if (sumLength == TWELVE) {
intVar1 = TWO;
} else {
intVar1 = ONE;
}
return intVar1;
}"
1224,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,codec,194,"return null;
","@Override
protected byte[] doDecoding(final byte[] bytes) {
if (bytes == null) {
return null;
}
return Base64.decodeBase64(bytes);
}","@Override
protected byte[] doDecoding(final byte[] bytes) {
if (bytes == null) {
return null;
}
return Base64.decodeBase64(bytes);
}"
1237,DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,FP,codec,207,"if (m == null || !m.find()) {
","private static String sha2Crypt(final byte[] keyBytes, final String salt, final String saltPrefix, final int blocksize, final String algorithm) {
final int keyLen = keyBytes.length;
int rounds = ROUNDS_DEFAULT;
boolean roundsCustom = false;
if (salt == null) {
throw new IllegalArgumentException(""Salt must not be null"");
}
final Matcher m = SALT_PATTERN.matcher(salt);
if (m == null || !m.find()) {
throw new IllegalArgumentException(""Invalid salt value: "" + salt);
}
if (m.group(3) != null) {
rounds = Integer.parseInt(m.group(3));
rounds = Math.max(ROUNDS_MIN, Math.min(ROUNDS_MAX, rounds));
roundsCustom = true;
}
final String saltString = m.group(4);
final byte[] saltBytes = saltString.getBytes(Charsets.UTF_8);
final int saltLen = saltBytes.length;
MessageDigest ctx = DigestUtils.getDigest(algorithm);
ctx.update(keyBytes);
// NB: the MD5 algorithm did add the $1$ salt_prefix. This is not deemed
ctx.update(saltBytes);
MessageDigest altCtx = DigestUtils.getDigest(algorithm);
altCtx.update(keyBytes);
altCtx.update(saltBytes);
altCtx.update(keyBytes);
byte[] altResult = altCtx.digest();
int cnt = keyBytes.length;
while (cnt > blocksize) {
ctx.update(altResult, 0, blocksize);
cnt -= blocksize;
}
ctx.update(altResult, 0, cnt);
// NB: this step differs significantly from the MD5 algorithm. It
cnt = keyBytes.length;
while (cnt > 0) {
if ((cnt & 1) != 0) {
ctx.update(altResult, 0, blocksize);
} else {
ctx.update(keyBytes);
}
cnt >>= 1;
}
altResult = ctx.digest();
altCtx = DigestUtils.getDigest(algorithm);
for (int i = 1; i <= keyLen; i++) {
altCtx.update(keyBytes);
}
byte[] tempResult = altCtx.digest();
final byte[] pBytes = new byte[keyLen];
int cp = 0;
while (cp < keyLen - blocksize) {
System.arraycopy(tempResult, 0, pBytes, cp, blocksize);
cp += blocksize;
}
System.arraycopy(tempResult, 0, pBytes, cp, keyLen - cp);
altCtx = DigestUtils.getDigest(algorithm);
for (int i = 1; i <= 16 + (altResult[0] & 0xff); i++) {
altCtx.update(saltBytes);
}
tempResult = altCtx.digest();
// Remark: The salt is limited to 16 chars, how does this make sense?
final byte[] sBytes = new byte[saltLen];
cp = 0;
while (cp < saltLen - blocksize) {
System.arraycopy(tempResult, 0, sBytes, cp, blocksize);
cp += blocksize;
}
System.arraycopy(tempResult, 0, sBytes, cp, saltLen - cp);
for (int i = 0; i <= rounds - 1; i++) {
ctx = DigestUtils.getDigest(algorithm);
if ((i & 1) != 0) {
ctx.update(pBytes, 0, keyLen);
} else {
ctx.update(altResult, 0, blocksize);
}
if (i % 3 != 0) {
ctx.update(sBytes, 0, saltLen);
}
if (i % 7 != 0) {
ctx.update(pBytes, 0, keyLen);
}
if ((i & 1) != 0) {
ctx.update(altResult, 0, blocksize);
} else {
ctx.update(pBytes, 0, keyLen);
}
altResult = ctx.digest();
}
// size specified above, consisting of multiple pieces:
final StringBuilder buffer = new StringBuilder(saltPrefix);
if (roundsCustom) {
buffer.append(ROUNDS_PREFIX);
buffer.append(rounds);
buffer.append(""$"");
}
buffer.append(saltString);
buffer.append(""$"");
// follows:
// characters as output:
// 1. character: the six low bits of the first byte
// 2. character: the two high bits of the first byte and the
// 3. character: the four high bytes from the second byte and
// 4. character: the six high bits from the third byte
// This was just a safeguard in the C implementation:
if (blocksize == 32) {
B64.b64from24bit(altResult[0], altResult[10], altResult[20], 4, buffer);
B64.b64from24bit(altResult[21], altResult[1], altResult[11], 4, buffer);
B64.b64from24bit(altResult[12], altResult[22], altResult[2], 4, buffer);
B64.b64from24bit(altResult[3], altResult[13], altResult[23], 4, buffer);
B64.b64from24bit(altResult[24], altResult[4], altResult[14], 4, buffer);
B64.b64from24bit(altResult[15], altResult[25], altResult[5], 4, buffer);
B64.b64from24bit(altResult[6], altResult[16], altResult[26], 4, buffer);
B64.b64from24bit(altResult[27], altResult[7], altResult[17], 4, buffer);
B64.b64from24bit(altResult[18], altResult[28], altResult[8], 4, buffer);
B64.b64from24bit(altResult[9], altResult[19], altResult[29], 4, buffer);
B64.b64from24bit((byte) 0, altResult[31], altResult[30], 3, buffer);
} else {
B64.b64from24bit(altResult[0], altResult[21], altResult[42], 4, buffer);
B64.b64from24bit(altResult[22], altResult[43], altResult[1], 4, buffer);
B64.b64from24bit(altResult[44], altResult[2], altResult[23], 4, buffer);
B64.b64from24bit(altResult[3], altResult[24], altResult[45], 4, buffer);
B64.b64from24bit(altResult[25], altResult[46], altResult[4], 4, buffer);
B64.b64from24bit(altResult[47], altResult[5], altResult[26], 4, buffer);
B64.b64from24bit(altResult[6], altResult[27], altResult[48], 4, buffer);
B64.b64from24bit(altResult[28], altResult[49], altResult[7], 4, buffer);
B64.b64from24bit(altResult[50], altResult[8], altResult[29], 4, buffer);
B64.b64from24bit(altResult[9], altResult[30], altResult[51], 4, buffer);
B64.b64from24bit(altResult[31], altResult[52], altResult[10], 4, buffer);
B64.b64from24bit(altResult[53], altResult[11], altResult[32], 4, buffer);
B64.b64from24bit(altResult[12], altResult[33], altResult[54], 4, buffer);
B64.b64from24bit(altResult[34], altResult[55], altResult[13], 4, buffer);
B64.b64from24bit(altResult[56], altResult[14], altResult[35], 4, buffer);
B64.b64from24bit(altResult[15], altResult[36], altResult[57], 4, buffer);
B64.b64from24bit(altResult[37], altResult[58], altResult[16], 4, buffer);
B64.b64from24bit(altResult[59], altResult[17], altResult[38], 4, buffer);
B64.b64from24bit(altResult[18], altResult[39], altResult[60], 4, buffer);
B64.b64from24bit(altResult[40], altResult[61], altResult[19], 4, buffer);
B64.b64from24bit(altResult[62], altResult[20], altResult[41], 4, buffer);
B64.b64from24bit((byte) 0, (byte) 0, altResult[63], 2, buffer);
}
Arrays.fill(tempResult, (byte) 0);
Arrays.fill(pBytes, (byte) 0);
Arrays.fill(sBytes, (byte) 0);
ctx.reset();
altCtx.reset();
Arrays.fill(keyBytes, (byte) 0);
Arrays.fill(saltBytes, (byte) 0);
return buffer.toString();
}","private static String sha2Crypt(final byte[] keyBytes, final String salt, final String saltPrefix, final int blocksize, final String algorithm) {
final int intVar1 = intLiteral2;
int intVar3 = intLiteral4;
boolean booleanVar5 = booleanLiteral6;
if (salt == null) {
throw new IllegalArgumentException(""Salt must not be null"");
}
final Matcher matcherVar7 = matcherLiteral8;
if (matcherVar7 == null || !matcherVar7.find()) {
throw new IllegalArgumentException(""Invalid salt value: "" + salt);
}
if (matcherVar7.group(3) != null) {
intVar3 = Integer.parseInt(matcherVar7.group(3));
intVar3 = Math.max(ROUNDS_MIN, Math.min(ROUNDS_MAX, intVar3));
booleanVar5 = true;
}
final String stringVar9 = stringLiteral10;
final byte[] byteArrayVar11 = byteArrayLiteral12;
final int intVar13 = intLiteral14;
MessageDigest messagedigestVar15 = messagedigestLiteral16;
messagedigestVar15.update(keyBytes);
// NB: the MD5 algorithm did add the $1$ salt_prefix. This is not deemed
messagedigestVar15.update(byteArrayVar11);
MessageDigest messagedigestVar17 = messagedigestLiteral16;
messagedigestVar17.update(keyBytes);
messagedigestVar17.update(byteArrayVar11);
messagedigestVar17.update(keyBytes);
byte[] byteArrayVar18 = byteArrayLiteral19;
int intVar20 = intLiteral2;
while (intVar20 > blocksize) {
messagedigestVar15.update(byteArrayVar18, 0, blocksize);
intVar20 -= blocksize;
}
messagedigestVar15.update(byteArrayVar18, 0, intVar20);
// NB: this step differs significantly from the MD5 algorithm. It
intVar20 = keyBytes.length;
while (intVar20 > 0) {
if ((intVar20 & 1) != 0) {
messagedigestVar15.update(byteArrayVar18, 0, blocksize);
} else {
messagedigestVar15.update(keyBytes);
}
intVar20 >>= 1;
}
byteArrayVar18 = messagedigestVar15.digest();
messagedigestVar17 = DigestUtils.getDigest(algorithm);
for (int intVar32 = intLiteral33; intVar21 <= intLiteral1; intVar21++) {
messagedigestVar17.update(keyBytes);
}
byte[] byteArrayVar23 = byteArrayLiteral19;
final byte[] byteArrayVar24 = byteArrayLiteral25;
int intVar26 = intLiteral27;
while (intVar26 < intVar1 - blocksize) {
System.arraycopy(byteArrayVar23, 0, byteArrayVar24, intVar26, blocksize);
intVar26 += blocksize;
}
System.arraycopy(byteArrayVar23, 0, byteArrayVar24, intVar26, intVar1 - intVar26);
messagedigestVar17 = DigestUtils.getDigest(algorithm);
for (int intVar32 = intLiteral33; intVar21 <= intLiteral2; intVar21++) {
messagedigestVar17.update(byteArrayVar11);
}
byteArrayVar23 = messagedigestVar17.digest();
// Remark: The salt is limited to 16 chars, how does this make sense?
final byte[] byteArrayVar28 = byteArrayLiteral29;
intVar26 = 0;
while (intVar26 < intVar13 - blocksize) {
System.arraycopy(byteArrayVar23, 0, byteArrayVar28, intVar26, blocksize);
intVar26 += blocksize;
}
System.arraycopy(byteArrayVar23, 0, byteArrayVar28, intVar26, intVar13 - intVar26);
for (int intVar32 = intLiteral34; intVar21 <= intLiteral3; intVar21++) {
messagedigestVar15 = DigestUtils.getDigest(algorithm);
if ((intVar21 & 1) != 0) {
messagedigestVar15.update(byteArrayVar24, 0, intVar1);
} else {
messagedigestVar15.update(byteArrayVar18, 0, blocksize);
}
if (intVar21 % 3 != 0) {
messagedigestVar15.update(byteArrayVar28, 0, intVar13);
}
if (intVar21 % 7 != 0) {
messagedigestVar15.update(byteArrayVar24, 0, intVar1);
}
if ((intVar21 & 1) != 0) {
messagedigestVar15.update(byteArrayVar18, 0, blocksize);
} else {
messagedigestVar15.update(byteArrayVar24, 0, intVar1);
}
byteArrayVar18 = messagedigestVar15.digest();
}
// size specified above, consisting of multiple pieces:
final StringBuilder stringbuilderVar30 = stringbuilderLiteral31;
if (booleanVar5) {
stringbuilderVar30.append(ROUNDS_PREFIX);
stringbuilderVar30.append(intVar3);
stringbuilderVar30.append(""$"");
}
stringbuilderVar30.append(stringVar9);
stringbuilderVar30.append(""$"");
// follows:
// characters as output:
// 1. character: the six low bits of the first byte
// 2. character: the two high bits of the first byte and the
// 3. character: the four high bytes from the second byte and
// 4. character: the six high bits from the third byte
// This was just a safeguard in the C implementation:
if (blocksize == 32) {
B64.b64from24bit(byteArrayVar18[0], byteArrayVar18[10], byteArrayVar18[20], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[21], byteArrayVar18[1], byteArrayVar18[11], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[12], byteArrayVar18[22], byteArrayVar18[2], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[3], byteArrayVar18[13], byteArrayVar18[23], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[24], byteArrayVar18[4], byteArrayVar18[14], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[15], byteArrayVar18[25], byteArrayVar18[5], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[6], byteArrayVar18[16], byteArrayVar18[26], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[27], byteArrayVar18[7], byteArrayVar18[17], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[18], byteArrayVar18[28], byteArrayVar18[8], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[9], byteArrayVar18[19], byteArrayVar18[29], 4, stringbuilderVar30);
B64.b64from24bit((byte) 0, byteArrayVar18[31], byteArrayVar18[30], 3, stringbuilderVar30);
} else {
B64.b64from24bit(byteArrayVar18[0], byteArrayVar18[21], byteArrayVar18[42], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[22], byteArrayVar18[43], byteArrayVar18[1], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[44], byteArrayVar18[2], byteArrayVar18[23], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[3], byteArrayVar18[24], byteArrayVar18[45], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[25], byteArrayVar18[46], byteArrayVar18[4], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[47], byteArrayVar18[5], byteArrayVar18[26], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[6], byteArrayVar18[27], byteArrayVar18[48], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[28], byteArrayVar18[49], byteArrayVar18[7], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[50], byteArrayVar18[8], byteArrayVar18[29], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[9], byteArrayVar18[30], byteArrayVar18[51], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[31], byteArrayVar18[52], byteArrayVar18[10], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[53], byteArrayVar18[11], byteArrayVar18[32], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[12], byteArrayVar18[33], byteArrayVar18[54], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[34], byteArrayVar18[55], byteArrayVar18[13], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[56], byteArrayVar18[14], byteArrayVar18[35], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[15], byteArrayVar18[36], byteArrayVar18[57], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[37], byteArrayVar18[58], byteArrayVar18[16], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[59], byteArrayVar18[17], byteArrayVar18[38], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[18], byteArrayVar18[39], byteArrayVar18[60], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[40], byteArrayVar18[61], byteArrayVar18[19], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[62], byteArrayVar18[20], byteArrayVar18[41], 4, stringbuilderVar30);
B64.b64from24bit((byte) 0, (byte) 0, byteArrayVar18[63], 2, stringbuilderVar30);
}
Arrays.fill(byteArrayVar23, (byte) 0);
Arrays.fill(byteArrayVar24, (byte) 0);
Arrays.fill(byteArrayVar28, (byte) 0);
messagedigestVar15.reset();
messagedigestVar17.reset();
Arrays.fill(keyBytes, (byte) 0);
Arrays.fill(byteArrayVar11, (byte) 0);
return stringbuilderVar30.toString();
}"
1243,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,codec,213,"return null;
","@Override
protected byte[] doEncoding(final byte[] bytes) {
if (bytes == null) {
return null;
}
return Base64.encodeBase64(bytes);
}","@Override
protected byte[] doEncoding(final byte[] bytes) {
if (bytes == null) {
return null;
}
return Base64.encodeBase64(bytes);
}"
1257,DODGY_CODE,SF_SWITCH_FALLTHROUGH,FP,codec,227,"h ^= ((long) data[index + 6] & 0xff) << 48;
case 6:
h ^= ((long) data[index + 5] & 0xff) << 40;
","public static long hash64(final byte[] data, final int length, final int seed) {
long h = (seed & 0xffffffffL) ^ (length * M64);
final int nblocks = length >> 3;
for (int i = 0; i < nblocks; i++) {
final int index = (i << 3);
long k = getLittleEndianLong(data, index);
k *= M64;
k ^= k >>> R64;
k *= M64;
h ^= k;
h *= M64;
}
final int index = (nblocks << 3);
switch(length - index) {
case 7:
h ^= ((long) data[index + 6] & 0xff) << 48;
case 6:
h ^= ((long) data[index + 5] & 0xff) << 40;
case 5:
h ^= ((long) data[index + 4] & 0xff) << 32;
case 4:
h ^= ((long) data[index + 3] & 0xff) << 24;
case 3:
h ^= ((long) data[index + 2] & 0xff) << 16;
case 2:
h ^= ((long) data[index + 1] & 0xff) << 8;
case 1:
h ^= ((long) data[index] & 0xff);
h *= M64;
}
h ^= h >>> R64;
h *= M64;
h ^= h >>> R64;
return h;
}","public static long hash64(final byte[] data, final int length, final int seed) {
long longVar1 = longLiteral2;
final int intVar3 = intLiteral4;
for (int intVar12 = intLiteral13; intVar5 < intLiteral1; intVar5++) {
final int intVar7 = intLiteral8;
long longVar9 = longLiteral10;
longVar9 *= M64;
longVar9 ^= longVar9 >>> R64;
longVar9 *= M64;
longVar1 ^= longVar9;
longVar1 *= M64;
}
final int intVar7 = intLiteral11;
switch(length - intVar7) {
case 7:
longVar1 ^= ((long) data[intVar7 + 6] & 0xff) << 48;
case 6:
longVar1 ^= ((long) data[intVar7 + 5] & 0xff) << 40;
case 5:
longVar1 ^= ((long) data[intVar7 + 4] & 0xff) << 32;
case 4:
longVar1 ^= ((long) data[intVar7 + 3] & 0xff) << 24;
case 3:
longVar1 ^= ((long) data[intVar7 + 2] & 0xff) << 16;
case 2:
longVar1 ^= ((long) data[intVar7 + 1] & 0xff) << 8;
case 1:
longVar1 ^= ((long) data[intVar7] & 0xff);
longVar1 *= M64;
}
longVar1 ^= longVar1 >>> R64;
longVar1 *= M64;
longVar1 ^= longVar1 >>> R64;
return longVar1;
}"
1266,DODGY_CODE,SF_SWITCH_FALLTHROUGH,FP,codec,236,"k1 ^= unprocessed[2] << 16;
case 2:
k1 ^= unprocessed[1] << 8;
","@Override
@Deprecated
int finalise(final int hash, final int unprocessedLength, final byte[] unprocessed, final int totalLen) {
int result = hash;
// Note: This fails to apply masking using 0xff to the 3 remaining bytes.
int k1 = 0;
switch(unprocessedLength) {
case 3:
k1 ^= unprocessed[2] << 16;
case 2:
k1 ^= unprocessed[1] << 8;
case 1:
k1 ^= unprocessed[0];
k1 *= C1_32;
k1 = Integer.rotateLeft(k1, R1_32);
k1 *= C2_32;
result ^= k1;
}
result ^= totalLen;
return fmix32(result);
}","@Override
@Deprecated
int finalise(final int hash, final int unprocessedLength, final byte[] unprocessed, final int totalLen) {
int intVar1 = intLiteral2;
// Note: This fails to apply masking using 0xff to the 3 remaining bytes.
int intVar3 = intLiteral4;
switch(unprocessedLength) {
case 3:
intVar3 ^= unprocessed[2] << 16;
case 2:
intVar3 ^= unprocessed[1] << 8;
case 1:
intVar3 ^= unprocessed[0];
intVar3 *= C1_32;
intVar3 = Integer.rotateLeft(intVar3, R1_32);
intVar3 *= C2_32;
intVar1 ^= intVar3;
}
intVar1 ^= totalLen;
return fmix32(intVar1);
}"
1269,DODGY_CODE,SF_SWITCH_FALLTHROUGH,FP,codec,239,"k1 ^= (data[index + 2] & 0xff) << 16;
case 2:
k1 ^= (data[index + 1] & 0xff) << 8;
","public static int hash32x86(final byte[] data, final int offset, final int length, final int seed) {
int hash = seed;
final int nblocks = length >> 2;
for (int i = 0; i < nblocks; i++) {
final int index = offset + (i << 2);
final int k = getLittleEndianInt(data, index);
hash = mix32(k, hash);
}
final int index = offset + (nblocks << 2);
int k1 = 0;
switch(offset + length - index) {
case 3:
k1 ^= (data[index + 2] & 0xff) << 16;
case 2:
k1 ^= (data[index + 1] & 0xff) << 8;
case 1:
k1 ^= (data[index] & 0xff);
k1 *= C1_32;
k1 = Integer.rotateLeft(k1, R1_32);
k1 *= C2_32;
hash ^= k1;
}
hash ^= length;
return fmix32(hash);
}","public static int hash32x86(final byte[] data, final int offset, final int length, final int seed) {
int intVar1 = intLiteral2;
final int intVar3 = intLiteral4;
for (int intVar13 = intLiteral14; intVar5 < intLiteral1; intVar5++) {
final int intVar7 = intLiteral8;
final int intVar9 = intLiteral10;
intVar1 = mix32(intVar9, intVar1);
}
final int intVar7 = intLiteral11;
int intVar12 = intLiteral6;
switch(offset + length - intVar7) {
case 3:
intVar12 ^= (data[intVar7 + 2] & 0xff) << 16;
case 2:
intVar12 ^= (data[intVar7 + 1] & 0xff) << 8;
case 1:
intVar12 ^= (data[intVar7] & 0xff);
intVar12 *= C1_32;
intVar12 = Integer.rotateLeft(intVar12, R1_32);
intVar12 *= C2_32;
intVar1 ^= intVar12;
}
intVar1 ^= length;
return fmix32(intVar1);
}"
1271,DODGY_CODE,SF_SWITCH_FALLTHROUGH,FP,codec,241,"case 7: localCrc = (localCrc >>> 8) ^ T[((localCrc ^ b[i++]) << 24) >>> 24];
case 6: localCrc = (localCrc >>> 8) ^ T[((localCrc ^ b[i++]) << 24) >>> 24];
","@Override
public void update(final byte[] b, final int offset, final int len) {
int localCrc = crc;
final int remainder = len & 0x7;
int i = offset;
for (final int end = offset + len - remainder; i < end; i += 8) {
final int x = localCrc ^ ((((b[i] << 24) >>> 24) + ((b[i + 1] << 24) >>> 16)) + (((b[i + 2] << 24) >>> 8) + (b[i + 3] << 24)));
localCrc = ((T[((x << 24) >>> 24) + 0x700] ^ T[((x << 16) >>> 24) + 0x600]) ^ (T[((x << 8) >>> 24) + 0x500] ^ T[(x >>> 24) + 0x400])) ^ ((T[((b[i + 4] << 24) >>> 24) + 0x300] ^ T[((b[i + 5] << 24) >>> 24) + 0x200]) ^ (T[((b[i + 6] << 24) >>> 24) + 0x100] ^ T[((b[i + 7] << 24) >>> 24)]));
}
switch(remainder) {
case 7:
localCrc = (localCrc >>> 8) ^ T[((localCrc ^ b[i++]) << 24) >>> 24];
case 6:
localCrc = (localCrc >>> 8) ^ T[((localCrc ^ b[i++]) << 24) >>> 24];
case 5:
localCrc = (localCrc >>> 8) ^ T[((localCrc ^ b[i++]) << 24) >>> 24];
case 4:
localCrc = (localCrc >>> 8) ^ T[((localCrc ^ b[i++]) << 24) >>> 24];
case 3:
localCrc = (localCrc >>> 8) ^ T[((localCrc ^ b[i++]) << 24) >>> 24];
case 2:
localCrc = (localCrc >>> 8) ^ T[((localCrc ^ b[i++]) << 24) >>> 24];
case 1:
localCrc = (localCrc >>> 8) ^ T[((localCrc ^ b[i++]) << 24) >>> 24];
default:
}
crc = localCrc;
}","@Override
public void update(final byte[] b, final int offset, final int len) {
int intVar1 = intLiteral2;
final int intVar3 = intLiteral4;
int intVar5 = intLiteral6;
for (final int intVar11 = intLiteral12; intVar5 < intLiteral1; intVar5 += 8) {
final int intVar9 = intLiteral10;
intVar1 = ((T[((intVar9 << 24) >>> 24) + 0x700] ^ T[((intVar9 << 16) >>> 24) + 0x600]) ^ (T[((intVar9 << 8) >>> 24) + 0x500] ^ T[(intVar9 >>> 24) + 0x400])) ^ ((T[((b[intVar5 + 4] << 24) >>> 24) + 0x300] ^ T[((b[intVar5 + 5] << 24) >>> 24) + 0x200]) ^ (T[((b[intVar5 + 6] << 24) >>> 24) + 0x100] ^ T[((b[intVar5 + 7] << 24) >>> 24)]));
}
switch(intVar3) {
case 7:
intVar1 = (intVar1 >>> 8) ^ T[((intVar1 ^ b[intVar5++]) << 24) >>> 24];
case 6:
intVar1 = (intVar1 >>> 8) ^ T[((intVar1 ^ b[intVar5++]) << 24) >>> 24];
case 5:
intVar1 = (intVar1 >>> 8) ^ T[((intVar1 ^ b[intVar5++]) << 24) >>> 24];
case 4:
intVar1 = (intVar1 >>> 8) ^ T[((intVar1 ^ b[intVar5++]) << 24) >>> 24];
case 3:
intVar1 = (intVar1 >>> 8) ^ T[((intVar1 ^ b[intVar5++]) << 24) >>> 24];
case 2:
intVar1 = (intVar1 >>> 8) ^ T[((intVar1 ^ b[intVar5++]) << 24) >>> 24];
case 1:
intVar1 = (intVar1 >>> 8) ^ T[((intVar1 ^ b[intVar5++]) << 24) >>> 24];
default:
}
crc = intVar1;
}"
1289,DODGY_CODE,SF_SWITCH_NO_DEFAULT,FP,codec,259,"switch (modulus) {
case 1 :
buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
if (encodeTable == STANDARD_ENCODE_TABLE) {
buffer[pos++] = PAD;
buffer[pos++] = PAD;
}
break;
case 2 :
buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
if (encodeTable == STANDARD_ENCODE_TABLE) {
buffer[pos++] = PAD;
","void encode(byte[] in, int inPos, int inAvail) {
if (eof) {
return;
}
if (inAvail < 0) {
eof = true;
if (buffer == null || buffer.length - pos < encodeSize) {
resizeBuffer();
}
switch(modulus) {
case 1:
buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
if (encodeTable == STANDARD_ENCODE_TABLE) {
buffer[pos++] = PAD;
buffer[pos++] = PAD;
}
break;
case 2:
buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
if (encodeTable == STANDARD_ENCODE_TABLE) {
buffer[pos++] = PAD;
}
break;
}
if (lineLength > 0 && pos > 0) {
System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
pos += lineSeparator.length;
}
} else {
for (int i = 0; i < inAvail; i++) {
if (buffer == null || buffer.length - pos < encodeSize) {
resizeBuffer();
}
modulus = (++modulus) % 3;
int b = in[inPos++];
if (b < 0) {
b += 256;
}
x = (x << 8) + b;
if (0 == modulus) {
buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
buffer[pos++] = encodeTable[(x >> 12) & MASK_6BITS];
buffer[pos++] = encodeTable[(x >> 6) & MASK_6BITS];
buffer[pos++] = encodeTable[x & MASK_6BITS];
currentLinePos += 4;
if (lineLength > 0 && lineLength <= currentLinePos) {
System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
pos += lineSeparator.length;
currentLinePos = 0;
}
}
}
}
}","void encode(byte[] in, int inPos, int inAvail) {
if (eof) {
return;
}
if (inAvail < 0) {
eof = true;
if (buffer == null || buffer.length - pos < encodeSize) {
resizeBuffer();
}
switch(modulus) {
case 1:
buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
if (encodeTable == STANDARD_ENCODE_TABLE) {
buffer[pos++] = PAD;
buffer[pos++] = PAD;
}
break;
case 2:
buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
if (encodeTable == STANDARD_ENCODE_TABLE) {
buffer[pos++] = PAD;
}
break;
}
if (lineLength > 0 && pos > 0) {
System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
pos += lineSeparator.length;
}
} else {
for (int intVar5 = intLiteral6; intVar1 < intLiteral1; intVar1++) {
if (buffer == null || buffer.length - pos < encodeSize) {
resizeBuffer();
}
modulus = (++modulus) % 3;
int intVar3 = intLiteral4;
if (intVar3 < 0) {
intVar3 += 256;
}
x = (x << 8) + intVar3;
if (0 == modulus) {
buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
buffer[pos++] = encodeTable[(x >> 12) & MASK_6BITS];
buffer[pos++] = encodeTable[(x >> 6) & MASK_6BITS];
buffer[pos++] = encodeTable[x & MASK_6BITS];
currentLinePos += 4;
if (lineLength > 0 && lineLength <= currentLinePos) {
System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
pos += lineSeparator.length;
currentLinePos = 0;
}
}
}
}
}"
1292,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,codec,262,"return null;
","public static byte[] getBytesUnchecked(String string, String charsetName) {
if (string == null) {
return null;
}
try {
return string.getBytes(charsetName);
} catch (UnsupportedEncodingException e) {
throw StringUtils.newIllegalStateException(charsetName, e);
}
}","public static byte[] getBytesUnchecked(String string, String charsetName) {
if (string == null) {
return null;
}
try {
return string.getBytes(charsetName);
} catch (UnsupportedEncodingException e) {
throw StringUtils.newIllegalStateException(charsetName, e);
}
}"
1297,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,codec,267,"return null;
","protected byte[] doDecoding(byte[] bytes) {
if (bytes == null) {
return null;
}
return Base64.decodeBase64(bytes);
}","protected byte[] doDecoding(byte[] bytes) {
if (bytes == null) {
return null;
}
return Base64.decodeBase64(bytes);
}"
1304,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,codec,274,"return null;
","public static final byte[] encodeUrl(BitSet urlsafe, byte[] bytes) {
if (bytes == null) {
return null;
}
if (urlsafe == null) {
urlsafe = WWW_FORM_URL;
}
ByteArrayOutputStream buffer = new ByteArrayOutputStream();
for (int i = 0; i < bytes.length; i++) {
int b = bytes[i];
if (b < 0) {
b = 256 + b;
}
if (urlsafe.get(b)) {
if (b == ' ') {
b = '+';
}
buffer.write(b);
} else {
buffer.write(ESCAPE_CHAR);
char hex1 = Character.toUpperCase(Character.forDigit((b >> 4) & 0xF, RADIX));
char hex2 = Character.toUpperCase(Character.forDigit(b & 0xF, RADIX));
buffer.write(hex1);
buffer.write(hex2);
}
}
return buffer.toByteArray();
}","public static final byte[] encodeUrl(BitSet urlsafe, byte[] bytes) {
if (bytes == null) {
return null;
}
if (urlsafe == null) {
urlsafe = WWW_FORM_URL;
}
ByteArrayOutputStream bytearrayoutputstreamVar1 = bytearrayoutputstreamLiteral2;
for (int intVar11 = intLiteral12; intVar3 < intLiteral1; intVar3++) {
int intVar5 = intLiteral6;
if (intVar5 < 0) {
intVar5 = 256 + intVar5;
}
if (urlsafe.get(intVar5)) {
if (intVar5 == ' ') {
intVar5 = '+';
}
bytearrayoutputstreamVar1.write(intVar5);
} else {
bytearrayoutputstreamVar1.write(ESCAPE_CHAR);
char charVar7 = charLiteral8;
char charVar9 = charLiteral10;
bytearrayoutputstreamVar1.write(charVar7);
bytearrayoutputstreamVar1.write(charVar9);
}
}
return bytearrayoutputstreamVar1.toByteArray();
}"
1310,PERFORMANCE,SS_SHOULD_BE_STATIC,FP,codec,280,protected final byte PAD = PAD_DEFAULT;,protected final byte PAD = PAD_DEFAULT;,protected final byte byteVar1 = byteLiteral2;
1314,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,codec,284,"return null;
","@Override
protected byte[] doDecoding(byte[] bytes) {
if (bytes == null) {
return null;
}
return Base64.decodeBase64(bytes);
}","@Override
protected byte[] doDecoding(byte[] bytes) {
if (bytes == null) {
return null;
}
return Base64.decodeBase64(bytes);
}"
1321,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,codec,291,"return null;
","public static final byte[] decodeUrl(byte[] bytes) throws DecoderException {
if (bytes == null) {
return null;
}
ByteArrayOutputStream buffer = new ByteArrayOutputStream();
for (int i = 0; i < bytes.length; i++) {
int b = bytes[i];
if (b == '+') {
buffer.write(' ');
} else if (b == ESCAPE_CHAR) {
try {
int u = Utils.digit16(bytes[++i]);
int l = Utils.digit16(bytes[++i]);
buffer.write((char) ((u << 4) + l));
} catch (ArrayIndexOutOfBoundsException e) {
throw new DecoderException(""Invalid URL encoding: "", e);
}
} else {
buffer.write(b);
}
}
return buffer.toByteArray();
}","public static final byte[] decodeUrl(byte[] bytes) throws DecoderException {
if (bytes == null) {
return null;
}
ByteArrayOutputStream bytearrayoutputstreamVar1 = bytearrayoutputstreamLiteral2;
for (int intVar10 = intLiteral11; intVar3 < intLiteral1; intVar3++) {
int intVar5 = intLiteral6;
if (intVar5 == '+') {
bytearrayoutputstreamVar1.write(' ');
} else if (intVar5 == ESCAPE_CHAR) {
try {
int intVar7 = intLiteral8;
int intVar9 = intLiteral8;
bytearrayoutputstreamVar1.write((char) ((intVar7 << 4) + intVar9));
} catch (ArrayIndexOutOfBoundsException e) {
throw new DecoderException(""Invalid URL encoding: "", e);
}
} else {
bytearrayoutputstreamVar1.write(intVar5);
}
}
return bytearrayoutputstreamVar1.toByteArray();
}"
1332,DODGY_CODE,SF_SWITCH_NO_DEFAULT,FP,codec,302,"switch (offset + length - index) {
case 7:
k1 ^= ((long) data[index + 6] & 0xff) << 48;
case 6:
k1 ^= ((long) data[index + 5] & 0xff) << 40;
case 5:
k1 ^= ((long) data[index + 4] & 0xff) << 32;
case 4:
k1 ^= ((long) data[index + 3] & 0xff) << 24;
case 3:
k1 ^= ((long) data[index + 2] & 0xff) << 16;
case 2:
k1 ^= ((long) data[index + 1] & 0xff) << 8;
case 1:
k1 ^= ((long) data[index] & 0xff);
k1 *= C1;
k1 = Long.rotateLeft(k1, R1);
k1 *= C2;
hash ^= k1;
","@Deprecated
public static long hash64(final byte[] data, final int offset, final int length, final int seed) {
// Note: This fails to apply masking using 0xffffffffL to the seed.
long hash = seed;
final int nblocks = length >> 3;
for (int i = 0; i < nblocks; i++) {
final int index = offset + (i << 3);
long k = getLittleEndianLong(data, index);
k *= C1;
k = Long.rotateLeft(k, R1);
k *= C2;
hash ^= k;
hash = Long.rotateLeft(hash, R2) * M + N1;
}
long k1 = 0;
final int index = offset + (nblocks << 3);
switch(offset + length - index) {
case 7:
k1 ^= ((long) data[index + 6] & 0xff) << 48;
case 6:
k1 ^= ((long) data[index + 5] & 0xff) << 40;
case 5:
k1 ^= ((long) data[index + 4] & 0xff) << 32;
case 4:
k1 ^= ((long) data[index + 3] & 0xff) << 24;
case 3:
k1 ^= ((long) data[index + 2] & 0xff) << 16;
case 2:
k1 ^= ((long) data[index + 1] & 0xff) << 8;
case 1:
k1 ^= ((long) data[index] & 0xff);
k1 *= C1;
k1 = Long.rotateLeft(k1, R1);
k1 *= C2;
hash ^= k1;
}
hash ^= length;
hash = fmix64(hash);
return hash;
}","@Deprecated
public static long hash64(final byte[] data, final int offset, final int length, final int seed) {
// Note: This fails to apply masking using 0xffffffffL to the seed.
long longVar1 = longLiteral2;
final int intVar3 = intLiteral4;
for (int intVar13 = intLiteral14; intVar5 < intLiteral1; intVar5++) {
final int intVar7 = intLiteral8;
long longVar9 = longLiteral10;
longVar9 *= C1;
longVar9 = Long.rotateLeft(longVar9, R1);
longVar9 *= C2;
longVar1 ^= longVar9;
longVar1 = Long.rotateLeft(longVar1, R2) * M + N1;
}
long longVar11 = intLiteral6;
final int intVar7 = intLiteral12;
switch(offset + length - intVar7) {
case 7:
longVar11 ^= ((long) data[intVar7 + 6] & 0xff) << 48;
case 6:
longVar11 ^= ((long) data[intVar7 + 5] & 0xff) << 40;
case 5:
longVar11 ^= ((long) data[intVar7 + 4] & 0xff) << 32;
case 4:
longVar11 ^= ((long) data[intVar7 + 3] & 0xff) << 24;
case 3:
longVar11 ^= ((long) data[intVar7 + 2] & 0xff) << 16;
case 2:
longVar11 ^= ((long) data[intVar7 + 1] & 0xff) << 8;
case 1:
longVar11 ^= ((long) data[intVar7] & 0xff);
longVar11 *= C1;
longVar11 = Long.rotateLeft(longVar11, R1);
longVar11 *= C2;
longVar1 ^= longVar11;
}
longVar1 ^= length;
longVar1 = fmix64(longVar1);
return longVar1;
}"
1337,DODGY_CODE,SF_SWITCH_FALLTHROUGH,FP,codec,307,"k1 ^= data[index + 2] << 16;
case 2:
k1 ^= data[index + 1] << 8;
","@Deprecated
public static int hash32(final byte[] data, final int offset, final int length, final int seed) {
int hash = seed;
final int nblocks = length >> 2;
for (int i = 0; i < nblocks; i++) {
final int index = offset + (i << 2);
final int k = getLittleEndianInt(data, index);
hash = mix32(k, hash);
}
// Note: This fails to apply masking using 0xff to the 3 remaining bytes.
final int index = offset + (nblocks << 2);
int k1 = 0;
switch(offset + length - index) {
case 3:
k1 ^= data[index + 2] << 16;
case 2:
k1 ^= data[index + 1] << 8;
case 1:
k1 ^= data[index];
k1 *= C1_32;
k1 = Integer.rotateLeft(k1, R1_32);
k1 *= C2_32;
hash ^= k1;
}
hash ^= length;
return fmix32(hash);
}","@Deprecated
public static int hash32(final byte[] data, final int offset, final int length, final int seed) {
int intVar1 = intLiteral2;
final int intVar3 = intLiteral4;
for (int intVar13 = intLiteral14; intVar5 < intLiteral1; intVar5++) {
final int intVar7 = intLiteral8;
final int intVar9 = intLiteral10;
intVar1 = mix32(intVar9, intVar1);
}
// Note: This fails to apply masking using 0xff to the 3 remaining bytes.
final int intVar7 = intLiteral11;
int intVar12 = intLiteral6;
switch(offset + length - intVar7) {
case 3:
intVar12 ^= data[intVar7 + 2] << 16;
case 2:
intVar12 ^= data[intVar7 + 1] << 8;
case 1:
intVar12 ^= data[intVar7];
intVar12 *= C1_32;
intVar12 = Integer.rotateLeft(intVar12, R1_32);
intVar12 *= C2_32;
intVar1 ^= intVar12;
}
intVar1 ^= length;
return fmix32(intVar1);
}"
1339,DODGY_CODE,SF_SWITCH_NO_DEFAULT,FP,codec,309,"switch (offset + length - index) {
case 15:
k2 ^= ((long) data[index + 14] & 0xff) << 48;
case 14:
k2 ^= ((long) data[index + 13] & 0xff) << 40;
case 13:
k2 ^= ((long) data[index + 12] & 0xff) << 32;
case 12:
k2 ^= ((long) data[index + 11] & 0xff) << 24;
case 11:
k2 ^= ((long) data[index + 10] & 0xff) << 16;
case 10:
k2 ^= ((long) data[index + 9] & 0xff) << 8;
case 9:
k2 ^= data[index + 8] & 0xff;
k2 *= C2;
k2 = Long.rotateLeft(k2, R3);
k2 *= C1;
h2 ^= k2;
case 8:
k1 ^= ((long) data[index + 7] & 0xff) << 56;
case 7:
k1 ^= ((long) data[index + 6] & 0xff) << 48;
case 6:
k1 ^= ((long) data[index + 5] & 0xff) << 40;
case 5:
k1 ^= ((long) data[index + 4] & 0xff) << 32;
case 4:
k1 ^= ((long) data[index + 3] & 0xff) << 24;
case 3:
k1 ^= ((long) data[index + 2] & 0xff) << 16;
case 2:
k1 ^= ((long) data[index + 1] & 0xff) << 8;
case 1:
k1 ^= data[index] & 0xff;
k1 *= C1;
k1 = Long.rotateLeft(k1, R1);
k1 *= C2;
h1 ^= k1;
","private static long[] hash128x64Internal(final byte[] data, final int offset, final int length, final long seed) {
long h1 = seed;
long h2 = seed;
final int nblocks = length >> 4;
for (int i = 0; i < nblocks; i++) {
final int index = offset + (i << 4);
long k1 = getLittleEndianLong(data, index);
long k2 = getLittleEndianLong(data, index + 8);
k1 *= C1;
k1 = Long.rotateLeft(k1, R1);
k1 *= C2;
h1 ^= k1;
h1 = Long.rotateLeft(h1, R2);
h1 += h2;
h1 = h1 * M + N1;
k2 *= C2;
k2 = Long.rotateLeft(k2, R3);
k2 *= C1;
h2 ^= k2;
h2 = Long.rotateLeft(h2, R1);
h2 += h1;
h2 = h2 * M + N2;
}
long k1 = 0;
long k2 = 0;
final int index = offset + (nblocks << 4);
switch(offset + length - index) {
case 15:
k2 ^= ((long) data[index + 14] & 0xff) << 48;
case 14:
k2 ^= ((long) data[index + 13] & 0xff) << 40;
case 13:
k2 ^= ((long) data[index + 12] & 0xff) << 32;
case 12:
k2 ^= ((long) data[index + 11] & 0xff) << 24;
case 11:
k2 ^= ((long) data[index + 10] & 0xff) << 16;
case 10:
k2 ^= ((long) data[index + 9] & 0xff) << 8;
case 9:
k2 ^= data[index + 8] & 0xff;
k2 *= C2;
k2 = Long.rotateLeft(k2, R3);
k2 *= C1;
h2 ^= k2;
case 8:
k1 ^= ((long) data[index + 7] & 0xff) << 56;
case 7:
k1 ^= ((long) data[index + 6] & 0xff) << 48;
case 6:
k1 ^= ((long) data[index + 5] & 0xff) << 40;
case 5:
k1 ^= ((long) data[index + 4] & 0xff) << 32;
case 4:
k1 ^= ((long) data[index + 3] & 0xff) << 24;
case 3:
k1 ^= ((long) data[index + 2] & 0xff) << 16;
case 2:
k1 ^= ((long) data[index + 1] & 0xff) << 8;
case 1:
k1 ^= data[index] & 0xff;
k1 *= C1;
k1 = Long.rotateLeft(k1, R1);
k1 *= C2;
h1 ^= k1;
}
h1 ^= length;
h2 ^= length;
h1 += h2;
h2 += h1;
h1 = fmix64(h1);
h2 = fmix64(h2);
h1 += h2;
h2 += h1;
return new long[] { h1, h2 };
}","private static long[] hash128x64Internal(final byte[] data, final int offset, final int length, final long seed) {
long longVar1 = longLiteral2;
long longVar3 = longLiteral2;
final int intVar4 = intLiteral5;
for (int intVar15 = intLiteral16; intVar6 < intLiteral1; intVar6++) {
final int intVar8 = intLiteral9;
long longVar10 = longLiteral11;
long longVar12 = longLiteral13;
longVar10 *= C1;
longVar10 = Long.rotateLeft(longVar10, R1);
longVar10 *= C2;
longVar1 ^= longVar10;
longVar1 = Long.rotateLeft(longVar1, R2);
longVar1 += longVar3;
longVar1 = longVar1 * M + N1;
longVar12 *= C2;
longVar12 = Long.rotateLeft(longVar12, R3);
longVar12 *= C1;
longVar3 ^= longVar12;
longVar3 = Long.rotateLeft(longVar3, R1);
longVar3 += longVar1;
longVar3 = longVar3 * M + N2;
}
long longVar10 = intLiteral7;
long longVar12 = intLiteral7;
final int intVar8 = intLiteral14;
switch(offset + length - intVar8) {
case 15:
longVar12 ^= ((long) data[intVar8 + 14] & 0xff) << 48;
case 14:
longVar12 ^= ((long) data[intVar8 + 13] & 0xff) << 40;
case 13:
longVar12 ^= ((long) data[intVar8 + 12] & 0xff) << 32;
case 12:
longVar12 ^= ((long) data[intVar8 + 11] & 0xff) << 24;
case 11:
longVar12 ^= ((long) data[intVar8 + 10] & 0xff) << 16;
case 10:
longVar12 ^= ((long) data[intVar8 + 9] & 0xff) << 8;
case 9:
longVar12 ^= data[intVar8 + 8] & 0xff;
longVar12 *= C2;
longVar12 = Long.rotateLeft(longVar12, R3);
longVar12 *= C1;
longVar3 ^= longVar12;
case 8:
longVar10 ^= ((long) data[intVar8 + 7] & 0xff) << 56;
case 7:
longVar10 ^= ((long) data[intVar8 + 6] & 0xff) << 48;
case 6:
longVar10 ^= ((long) data[intVar8 + 5] & 0xff) << 40;
case 5:
longVar10 ^= ((long) data[intVar8 + 4] & 0xff) << 32;
case 4:
longVar10 ^= ((long) data[intVar8 + 3] & 0xff) << 24;
case 3:
longVar10 ^= ((long) data[intVar8 + 2] & 0xff) << 16;
case 2:
longVar10 ^= ((long) data[intVar8 + 1] & 0xff) << 8;
case 1:
longVar10 ^= data[intVar8] & 0xff;
longVar10 *= C1;
longVar10 = Long.rotateLeft(longVar10, R1);
longVar10 *= C2;
longVar1 ^= longVar10;
}
longVar1 ^= length;
longVar3 ^= length;
longVar1 += longVar3;
longVar3 += longVar1;
longVar1 = fmix64(longVar1);
longVar3 = fmix64(longVar3);
longVar1 += longVar3;
longVar3 += longVar1;
return new long[] { longVar1, longVar3 };
}"
1341,DODGY_CODE,SF_SWITCH_NO_DEFAULT,FP,codec,311,"switch (unprocessedLength) {
case 3:
k1 ^= (unprocessed[2] & 0xff) << 16;
case 2:
k1 ^= (unprocessed[1] & 0xff) << 8;
case 1:
k1 ^= (unprocessed[0] & 0xff);
k1 *= C1_32;
k1 = Integer.rotateLeft(k1, R1_32);
k1 *= C2_32;
result ^= k1;
","int finalise(final int hash, final int unprocessedLength, final byte[] unprocessed, final int totalLen) {
int result = hash;
int k1 = 0;
switch(unprocessedLength) {
case 3:
k1 ^= (unprocessed[2] & 0xff) << 16;
case 2:
k1 ^= (unprocessed[1] & 0xff) << 8;
case 1:
k1 ^= (unprocessed[0] & 0xff);
k1 *= C1_32;
k1 = Integer.rotateLeft(k1, R1_32);
k1 *= C2_32;
result ^= k1;
}
result ^= totalLen;
return fmix32(result);
}","int finalise(final int hash, final int unprocessedLength, final byte[] unprocessed, final int totalLen) {
int intVar1 = intLiteral2;
int intVar3 = intLiteral4;
switch(unprocessedLength) {
case 3:
intVar3 ^= (unprocessed[2] & 0xff) << 16;
case 2:
intVar3 ^= (unprocessed[1] & 0xff) << 8;
case 1:
intVar3 ^= (unprocessed[0] & 0xff);
intVar3 *= C1_32;
intVar3 = Integer.rotateLeft(intVar3, R1_32);
intVar3 *= C2_32;
intVar1 ^= intVar3;
}
intVar1 ^= totalLen;
return fmix32(intVar1);
}"
1343,DODGY_CODE,SF_SWITCH_FALLTHROUGH,FP,codec,313,"case 7: localCrc = (localCrc >>> 8) ^ T[((localCrc ^ b[i++]) << 24) >>> 24];
case 6: localCrc = (localCrc >>> 8) ^ T[((localCrc ^ b[i++]) << 24) >>> 24];
","@Override
public void update(final byte[] b, final int offset, final int len) {
int localCrc = crc;
final int remainder = len & 0x7;
int i = offset;
for (final int end = offset + len - remainder; i < end; i += 8) {
final int x = localCrc ^ ((((b[i] << 24) >>> 24) + ((b[i + 1] << 24) >>> 16)) + (((b[i + 2] << 24) >>> 8) + (b[i + 3] << 24)));
localCrc = ((T[((x << 24) >>> 24) + 0x700] ^ T[((x << 16) >>> 24) + 0x600]) ^ (T[((x << 8) >>> 24) + 0x500] ^ T[(x >>> 24) + 0x400])) ^ ((T[((b[i + 4] << 24) >>> 24) + 0x300] ^ T[((b[i + 5] << 24) >>> 24) + 0x200]) ^ (T[((b[i + 6] << 24) >>> 24) + 0x100] ^ T[((b[i + 7] << 24) >>> 24)]));
}
switch(remainder) {
case 7:
localCrc = (localCrc >>> 8) ^ T[((localCrc ^ b[i++]) << 24) >>> 24];
case 6:
localCrc = (localCrc >>> 8) ^ T[((localCrc ^ b[i++]) << 24) >>> 24];
case 5:
localCrc = (localCrc >>> 8) ^ T[((localCrc ^ b[i++]) << 24) >>> 24];
case 4:
localCrc = (localCrc >>> 8) ^ T[((localCrc ^ b[i++]) << 24) >>> 24];
case 3:
localCrc = (localCrc >>> 8) ^ T[((localCrc ^ b[i++]) << 24) >>> 24];
case 2:
localCrc = (localCrc >>> 8) ^ T[((localCrc ^ b[i++]) << 24) >>> 24];
case 1:
localCrc = (localCrc >>> 8) ^ T[((localCrc ^ b[i++]) << 24) >>> 24];
default:
}
crc = localCrc;
}","@Override
public void update(final byte[] b, final int offset, final int len) {
int intVar1 = intLiteral2;
final int intVar3 = intLiteral4;
int intVar5 = intLiteral6;
for (final int intVar11 = intLiteral12; intVar5 < intLiteral1; intVar5 += 8) {
final int intVar9 = intLiteral10;
intVar1 = ((T[((intVar9 << 24) >>> 24) + 0x700] ^ T[((intVar9 << 16) >>> 24) + 0x600]) ^ (T[((intVar9 << 8) >>> 24) + 0x500] ^ T[(intVar9 >>> 24) + 0x400])) ^ ((T[((b[intVar5 + 4] << 24) >>> 24) + 0x300] ^ T[((b[intVar5 + 5] << 24) >>> 24) + 0x200]) ^ (T[((b[intVar5 + 6] << 24) >>> 24) + 0x100] ^ T[((b[intVar5 + 7] << 24) >>> 24)]));
}
switch(intVar3) {
case 7:
intVar1 = (intVar1 >>> 8) ^ T[((intVar1 ^ b[intVar5++]) << 24) >>> 24];
case 6:
intVar1 = (intVar1 >>> 8) ^ T[((intVar1 ^ b[intVar5++]) << 24) >>> 24];
case 5:
intVar1 = (intVar1 >>> 8) ^ T[((intVar1 ^ b[intVar5++]) << 24) >>> 24];
case 4:
intVar1 = (intVar1 >>> 8) ^ T[((intVar1 ^ b[intVar5++]) << 24) >>> 24];
case 3:
intVar1 = (intVar1 >>> 8) ^ T[((intVar1 ^ b[intVar5++]) << 24) >>> 24];
case 2:
intVar1 = (intVar1 >>> 8) ^ T[((intVar1 ^ b[intVar5++]) << 24) >>> 24];
case 1:
intVar1 = (intVar1 >>> 8) ^ T[((intVar1 ^ b[intVar5++]) << 24) >>> 24];
default:
}
crc = intVar1;
}"
1362,DODGY_CODE,SF_SWITCH_NO_DEFAULT,FP,codec,332,"switch (modulus) { 
case 1 : 
buffer[pos++] = encodeTable[(bitWorkArea >> 2) & MASK_6BITS]; 
buffer[pos++] = encodeTable[(bitWorkArea << 4) & MASK_6BITS]; 
if (encodeTable == STANDARD_ENCODE_TABLE) {
buffer[pos++] = PAD;
buffer[pos++] = PAD;
}
break;
case 2 : 
buffer[pos++] = encodeTable[(bitWorkArea >> 10) & MASK_6BITS];
buffer[pos++] = encodeTable[(bitWorkArea >> 4) & MASK_6BITS];
buffer[pos++] = encodeTable[(bitWorkArea << 2) & MASK_6BITS];
if (encodeTable == STANDARD_ENCODE_TABLE) {
buffer[pos++] = PAD;
","@Override
void encode(byte[] in, int inPos, int inAvail) {
if (eof) {
return;
}
if (inAvail < 0) {
eof = true;
if (0 == modulus && lineLength == 0) {
return;
}
ensureBufferSize(encodeSize);
int savedPos = pos;
switch(modulus) {
case 1:
buffer[pos++] = encodeTable[(bitWorkArea >> 2) & MASK_6BITS];
buffer[pos++] = encodeTable[(bitWorkArea << 4) & MASK_6BITS];
if (encodeTable == STANDARD_ENCODE_TABLE) {
buffer[pos++] = PAD;
buffer[pos++] = PAD;
}
break;
case 2:
buffer[pos++] = encodeTable[(bitWorkArea >> 10) & MASK_6BITS];
buffer[pos++] = encodeTable[(bitWorkArea >> 4) & MASK_6BITS];
buffer[pos++] = encodeTable[(bitWorkArea << 2) & MASK_6BITS];
if (encodeTable == STANDARD_ENCODE_TABLE) {
buffer[pos++] = PAD;
}
break;
}
currentLinePos += pos - savedPos;
if (lineLength > 0 && currentLinePos > 0) {
System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
pos += lineSeparator.length;
}
} else {
for (int i = 0; i < inAvail; i++) {
ensureBufferSize(encodeSize);
modulus = (modulus + 1) % BYTES_PER_UNENCODED_BLOCK;
int b = in[inPos++];
if (b < 0) {
b += 256;
}
bitWorkArea = (bitWorkArea << 8) + b;
if (0 == modulus) {
buffer[pos++] = encodeTable[(bitWorkArea >> 18) & MASK_6BITS];
buffer[pos++] = encodeTable[(bitWorkArea >> 12) & MASK_6BITS];
buffer[pos++] = encodeTable[(bitWorkArea >> 6) & MASK_6BITS];
buffer[pos++] = encodeTable[bitWorkArea & MASK_6BITS];
currentLinePos += BYTES_PER_ENCODED_BLOCK;
if (lineLength > 0 && lineLength <= currentLinePos) {
System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
pos += lineSeparator.length;
currentLinePos = 0;
}
}
}
}
}","@Override
void encode(byte[] in, int inPos, int inAvail) {
if (eof) {
return;
}
if (inAvail < 0) {
eof = true;
if (0 == modulus && lineLength == 0) {
return;
}
ensureBufferSize(encodeSize);
int intVar1 = intLiteral2;
switch(modulus) {
case 1:
buffer[pos++] = encodeTable[(bitWorkArea >> 2) & MASK_6BITS];
buffer[pos++] = encodeTable[(bitWorkArea << 4) & MASK_6BITS];
if (encodeTable == STANDARD_ENCODE_TABLE) {
buffer[pos++] = PAD;
buffer[pos++] = PAD;
}
break;
case 2:
buffer[pos++] = encodeTable[(bitWorkArea >> 10) & MASK_6BITS];
buffer[pos++] = encodeTable[(bitWorkArea >> 4) & MASK_6BITS];
buffer[pos++] = encodeTable[(bitWorkArea << 2) & MASK_6BITS];
if (encodeTable == STANDARD_ENCODE_TABLE) {
buffer[pos++] = PAD;
}
break;
}
currentLinePos += pos - intVar1;
if (lineLength > 0 && currentLinePos > 0) {
System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
pos += lineSeparator.length;
}
} else {
for (int intVar7 = intLiteral8; intVar3 < intLiteral1; intVar3++) {
ensureBufferSize(encodeSize);
modulus = (modulus + 1) % BYTES_PER_UNENCODED_BLOCK;
int intVar5 = intLiteral6;
if (intVar5 < 0) {
intVar5 += 256;
}
bitWorkArea = (bitWorkArea << 8) + intVar5;
if (0 == modulus) {
buffer[pos++] = encodeTable[(bitWorkArea >> 18) & MASK_6BITS];
buffer[pos++] = encodeTable[(bitWorkArea >> 12) & MASK_6BITS];
buffer[pos++] = encodeTable[(bitWorkArea >> 6) & MASK_6BITS];
buffer[pos++] = encodeTable[bitWorkArea & MASK_6BITS];
currentLinePos += BYTES_PER_ENCODED_BLOCK;
if (lineLength > 0 && lineLength <= currentLinePos) {
System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
pos += lineSeparator.length;
currentLinePos = 0;
}
}
}
}
}"
1368,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,codec,338,"return null;
","@Override
protected byte[] doDecoding(byte[] bytes) {
if (bytes == null) {
return null;
}
return Base64.decodeBase64(bytes);
}","@Override
protected byte[] doDecoding(byte[] bytes) {
if (bytes == null) {
return null;
}
return Base64.decodeBase64(bytes);
}"
1369,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,codec,339,"return null;
","@Override
protected byte[] doEncoding(byte[] bytes) {
if (bytes == null) {
return null;
}
return Base64.encodeBase64(bytes);
}","@Override
protected byte[] doEncoding(byte[] bytes) {
if (bytes == null) {
return null;
}
return Base64.encodeBase64(bytes);
}"
1372,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,codec,342,"return null;
","public static final byte[] decodeQuotedPrintable(byte[] bytes) throws DecoderException {
if (bytes == null) {
return null;
}
ByteArrayOutputStream buffer = new ByteArrayOutputStream();
for (int i = 0; i < bytes.length; i++) {
int b = bytes[i];
if (b == ESCAPE_CHAR) {
try {
int u = Utils.digit16(bytes[++i]);
int l = Utils.digit16(bytes[++i]);
buffer.write((char) ((u << 4) + l));
} catch (ArrayIndexOutOfBoundsException e) {
throw new DecoderException(""Invalid quoted-printable encoding"", e);
}
} else {
buffer.write(b);
}
}
return buffer.toByteArray();
}","public static final byte[] decodeQuotedPrintable(byte[] bytes) throws DecoderException {
if (bytes == null) {
return null;
}
ByteArrayOutputStream bytearrayoutputstreamVar1 = bytearrayoutputstreamLiteral2;
for (int intVar10 = intLiteral11; intVar3 < intLiteral1; intVar3++) {
int intVar5 = intLiteral6;
if (intVar5 == ESCAPE_CHAR) {
try {
int intVar7 = intLiteral8;
int intVar9 = intLiteral8;
bytearrayoutputstreamVar1.write((char) ((intVar7 << 4) + intVar9));
} catch (ArrayIndexOutOfBoundsException e) {
throw new DecoderException(""Invalid quoted-printable encoding"", e);
}
} else {
bytearrayoutputstreamVar1.write(intVar5);
}
}
return bytearrayoutputstreamVar1.toByteArray();
}"
1376,CORRECTNESS,MF_CLASS_MASKS_FIELD,FP,codec,346,protected final String charset;,protected final String charset;,protected final String stringVar1;
1422,DODGY_CODE,SF_SWITCH_NO_DEFAULT,FP,codec,392,"switch (modulus) {
case 1 :
buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
if (encodeTable == STANDARD_ENCODE_TABLE) {
buffer[pos++] = PAD;
buffer[pos++] = PAD;
}
break;
case 2 :
buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
if (encodeTable == STANDARD_ENCODE_TABLE) {
buffer[pos++] = PAD;
","void encode(byte[] in, int inPos, int inAvail) {
if (eof) {
return;
}
if (inAvail < 0) {
eof = true;
if (buffer == null || buffer.length - pos < encodeSize) {
resizeBuffer();
}
switch(modulus) {
case 1:
buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
if (encodeTable == STANDARD_ENCODE_TABLE) {
buffer[pos++] = PAD;
buffer[pos++] = PAD;
}
break;
case 2:
buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
if (encodeTable == STANDARD_ENCODE_TABLE) {
buffer[pos++] = PAD;
}
break;
}
if (lineLength > 0 && pos > 0) {
System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
pos += lineSeparator.length;
}
} else {
for (int i = 0; i < inAvail; i++) {
if (buffer == null || buffer.length - pos < encodeSize) {
resizeBuffer();
}
modulus = (++modulus) % 3;
int b = in[inPos++];
if (b < 0) {
b += 256;
}
x = (x << 8) + b;
if (0 == modulus) {
buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
buffer[pos++] = encodeTable[(x >> 12) & MASK_6BITS];
buffer[pos++] = encodeTable[(x >> 6) & MASK_6BITS];
buffer[pos++] = encodeTable[x & MASK_6BITS];
currentLinePos += 4;
if (lineLength > 0 && lineLength <= currentLinePos) {
System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
pos += lineSeparator.length;
currentLinePos = 0;
}
}
}
}
}","void encode(byte[] in, int inPos, int inAvail) {
if (eof) {
return;
}
if (inAvail < 0) {
eof = true;
if (buffer == null || buffer.length - pos < encodeSize) {
resizeBuffer();
}
switch(modulus) {
case 1:
buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
if (encodeTable == STANDARD_ENCODE_TABLE) {
buffer[pos++] = PAD;
buffer[pos++] = PAD;
}
break;
case 2:
buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
if (encodeTable == STANDARD_ENCODE_TABLE) {
buffer[pos++] = PAD;
}
break;
}
if (lineLength > 0 && pos > 0) {
System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
pos += lineSeparator.length;
}
} else {
for (int intVar5 = intLiteral6; intVar1 < intLiteral1; intVar1++) {
if (buffer == null || buffer.length - pos < encodeSize) {
resizeBuffer();
}
modulus = (++modulus) % 3;
int intVar3 = intLiteral4;
if (intVar3 < 0) {
intVar3 += 256;
}
x = (x << 8) + intVar3;
if (0 == modulus) {
buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
buffer[pos++] = encodeTable[(x >> 12) & MASK_6BITS];
buffer[pos++] = encodeTable[(x >> 6) & MASK_6BITS];
buffer[pos++] = encodeTable[x & MASK_6BITS];
currentLinePos += 4;
if (lineLength > 0 && lineLength <= currentLinePos) {
System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
pos += lineSeparator.length;
currentLinePos = 0;
}
}
}
}
}"
1425,DODGY_CODE,SA_FIELD_DOUBLE_ASSIGNMENT,FP,codec,395,"modulus = (++modulus) % 3;
","void encode(byte[] in, int inPos, int inAvail) {
if (eof) {
return;
}
if (inAvail < 0) {
eof = true;
if (buffer == null || buffer.length - pos < encodeSize) {
resizeBuffer();
}
switch(modulus) {
case 1:
buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
if (encodeTable == STANDARD_ENCODE_TABLE) {
buffer[pos++] = PAD;
buffer[pos++] = PAD;
}
break;
case 2:
buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
if (encodeTable == STANDARD_ENCODE_TABLE) {
buffer[pos++] = PAD;
}
break;
}
if (lineLength > 0 && pos > 0) {
System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
pos += lineSeparator.length;
}
} else {
for (int i = 0; i < inAvail; i++) {
if (buffer == null || buffer.length - pos < encodeSize) {
resizeBuffer();
}
modulus = (++modulus) % 3;
int b = in[inPos++];
if (b < 0) {
b += 256;
}
x = (x << 8) + b;
if (0 == modulus) {
buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
buffer[pos++] = encodeTable[(x >> 12) & MASK_6BITS];
buffer[pos++] = encodeTable[(x >> 6) & MASK_6BITS];
buffer[pos++] = encodeTable[x & MASK_6BITS];
currentLinePos += 4;
if (lineLength > 0 && lineLength <= currentLinePos) {
System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
pos += lineSeparator.length;
currentLinePos = 0;
}
}
}
}
}","void encode(byte[] in, int inPos, int inAvail) {
if (eof) {
return;
}
if (inAvail < 0) {
eof = true;
if (buffer == null || buffer.length - pos < encodeSize) {
resizeBuffer();
}
switch(modulus) {
case 1:
buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
if (encodeTable == STANDARD_ENCODE_TABLE) {
buffer[pos++] = PAD;
buffer[pos++] = PAD;
}
break;
case 2:
buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
if (encodeTable == STANDARD_ENCODE_TABLE) {
buffer[pos++] = PAD;
}
break;
}
if (lineLength > 0 && pos > 0) {
System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
pos += lineSeparator.length;
}
} else {
for (int intVar5 = intLiteral6; intVar1 < intLiteral1; intVar1++) {
if (buffer == null || buffer.length - pos < encodeSize) {
resizeBuffer();
}
modulus = (++modulus) % 3;
int intVar3 = intLiteral4;
if (intVar3 < 0) {
intVar3 += 256;
}
x = (x << 8) + intVar3;
if (0 == modulus) {
buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
buffer[pos++] = encodeTable[(x >> 12) & MASK_6BITS];
buffer[pos++] = encodeTable[(x >> 6) & MASK_6BITS];
buffer[pos++] = encodeTable[x & MASK_6BITS];
currentLinePos += 4;
if (lineLength > 0 && lineLength <= currentLinePos) {
System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
pos += lineSeparator.length;
currentLinePos = 0;
}
}
}
}
}"
1427,I18N,DM_DEFAULT_ENCODING,FP,codec,397,"return decodeHex(new String(array).toCharArray());
","public byte[] decode(byte[] array) throws DecoderException {
return decodeHex(new String(array).toCharArray());
}","public byte[] decode(byte[] array) throws DecoderException {
return decodeHex(new String(array).toCharArray());
}"
1428,I18N,DM_DEFAULT_ENCODING,FP,codec,398,"byte[] byteArray = object instanceof String ? ((String) object).getBytes() : (byte[]) object;
","public Object encode(Object object) throws EncoderException {
try {
byte[] byteArray = object instanceof String ? ((String) object).getBytes() : (byte[]) object;
return encodeHex(byteArray);
} catch (ClassCastException e) {
throw new EncoderException(e.getMessage());
}
}","public Object encode(Object object) throws EncoderException {
try {
byte[] byteArrayVar1 = byteArrayLiteral2;
return encodeHex(byteArrayVar1);
} catch (ClassCastException e) {
throw new EncoderException(e.getMessage());
}
}"
1450,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,codec,420,"return null;
","private static byte[] getBytes(final String string, final Charset charset) {
if (string == null) {
return null;
}
return string.getBytes(charset);
}","private static byte[] getBytes(final String string, final Charset charset) {
if (string == null) {
return null;
}
return string.getBytes(charset);
}"
1477,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,codec,447,"return null;
","@Override
protected byte[] doEncoding(final byte[] bytes) {
if (bytes == null) {
return null;
}
return Base64.encodeBase64(bytes);
}","@Override
protected byte[] doEncoding(final byte[] bytes) {
if (bytes == null) {
return null;
}
return Base64.encodeBase64(bytes);
}"
1486,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,codec,456,"return null;
","public static final byte[] decodeUrl(final byte[] bytes) throws DecoderException {
if (bytes == null) {
return null;
}
final ByteArrayOutputStream buffer = new ByteArrayOutputStream();
for (int i = 0; i < bytes.length; i++) {
final int b = bytes[i];
if (b == '+') {
buffer.write(' ');
} else if (b == ESCAPE_CHAR) {
try {
final int u = Utils.digit16(bytes[++i]);
final int l = Utils.digit16(bytes[++i]);
buffer.write((char) ((u << 4) + l));
} catch (final ArrayIndexOutOfBoundsException e) {
throw new DecoderException(""Invalid URL encoding: "", e);
}
} else {
buffer.write(b);
}
}
return buffer.toByteArray();
}","public static final byte[] decodeUrl(final byte[] bytes) throws DecoderException {
if (bytes == null) {
return null;
}
final ByteArrayOutputStream bytearrayoutputstreamVar1 = bytearrayoutputstreamLiteral2;
for (int intVar10 = intLiteral11; intVar3 < intLiteral1; intVar3++) {
final int intVar5 = intLiteral6;
if (intVar5 == '+') {
bytearrayoutputstreamVar1.write(' ');
} else if (intVar5 == ESCAPE_CHAR) {
try {
final int intVar7 = intLiteral8;
final int intVar9 = intLiteral8;
bytearrayoutputstreamVar1.write((char) ((intVar7 << 4) + intVar9));
} catch (final ArrayIndexOutOfBoundsException e) {
throw new DecoderException(""Invalid URL encoding: "", e);
}
} else {
bytearrayoutputstreamVar1.write(intVar5);
}
}
return bytearrayoutputstreamVar1.toByteArray();
}"
1493,DODGY_CODE,SF_SWITCH_NO_DEFAULT,FP,codec,463,"switch (modulus) {
case 2 : 
x = x >> 4;
buffer[pos++] = (byte) ((x) & MASK_8BITS);
break;
case 3 : 
x = x >> 2;
buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
buffer[pos++] = (byte) ((x) & MASK_8BITS);
","void decode(byte[] in, int inPos, int inAvail) {
if (eof) {
return;
}
if (inAvail < 0) {
eof = true;
}
for (int i = 0; i < inAvail; i++) {
if (buffer == null || buffer.length - pos < decodeSize) {
resizeBuffer();
}
byte b = in[inPos++];
if (b == PAD) {
eof = true;
break;
} else {
if (b >= 0 && b < DECODE_TABLE.length) {
int result = DECODE_TABLE[b];
if (result >= 0) {
modulus = (++modulus) % 4;
x = (x << 6) + result;
if (modulus == 0) {
buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
buffer[pos++] = (byte) (x & MASK_8BITS);
}
}
}
}
}
// Two forms of EOF as far as base64 decoder is concerned: actual
if (eof && modulus != 0) {
if (buffer == null || buffer.length - pos < decodeSize) {
resizeBuffer();
}
switch(modulus) {
case 2:
x = x >> 4;
buffer[pos++] = (byte) ((x) & MASK_8BITS);
break;
case 3:
x = x >> 2;
buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
buffer[pos++] = (byte) ((x) & MASK_8BITS);
break;
}
}
}","void decode(byte[] in, int inPos, int inAvail) {
if (eof) {
return;
}
if (inAvail < 0) {
eof = true;
}
for (int intVar7 = intLiteral8; intVar1 < intLiteral1; intVar1++) {
if (buffer == null || buffer.length - pos < decodeSize) {
resizeBuffer();
}
byte byteVar3 = byteLiteral4;
if (byteVar3 == PAD) {
eof = true;
break;
} else {
if (byteVar3 >= 0 && byteVar3 < DECODE_TABLE.length) {
int intVar5 = intLiteral6;
if (intVar5 >= 0) {
modulus = (++modulus) % 4;
x = (x << 6) + intVar5;
if (modulus == 0) {
buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
buffer[pos++] = (byte) (x & MASK_8BITS);
}
}
}
}
}
// Two forms of EOF as far as base64 decoder is concerned: actual
if (eof && modulus != 0) {
if (buffer == null || buffer.length - pos < decodeSize) {
resizeBuffer();
}
switch(modulus) {
case 2:
x = x >> 4;
buffer[pos++] = (byte) ((x) & MASK_8BITS);
break;
case 3:
x = x >> 2;
buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
buffer[pos++] = (byte) ((x) & MASK_8BITS);
break;
}
}
}"
1496,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,codec,466,"return null;
","public static byte[] getBytesUnchecked(String string, String charsetName) {
if (string == null) {
return null;
}
try {
return string.getBytes(charsetName);
} catch (UnsupportedEncodingException e) {
throw StringUtils.newIllegalStateException(charsetName, e);
}
}","public static byte[] getBytesUnchecked(String string, String charsetName) {
if (string == null) {
return null;
}
try {
return string.getBytes(charsetName);
} catch (UnsupportedEncodingException e) {
throw StringUtils.newIllegalStateException(charsetName, e);
}
}"
1499,MALICIOUS_CODE,MS_PKGPROTECT,FP,codec,469,public static final char[] US_ENGLISH_MAPPING = US_ENGLISH_MAPPING_STRING.toCharArray();,public static final char[] US_ENGLISH_MAPPING = US_ENGLISH_MAPPING_STRING.toCharArray();,public static final char[] charArrayVar1 = charArrayLiteral2;
1504,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,codec,474,"return null;
","public static final byte[] encodeQuotedPrintable(BitSet printable, byte[] bytes) {
if (bytes == null) {
return null;
}
if (printable == null) {
printable = PRINTABLE_CHARS;
}
ByteArrayOutputStream buffer = new ByteArrayOutputStream();
for (int i = 0; i < bytes.length; i++) {
int b = bytes[i];
if (b < 0) {
b = 256 + b;
}
if (printable.get(b)) {
buffer.write(b);
} else {
encodeQuotedPrintable(b, buffer);
}
}
return buffer.toByteArray();
}","public static final byte[] encodeQuotedPrintable(BitSet printable, byte[] bytes) {
if (bytes == null) {
return null;
}
if (printable == null) {
printable = PRINTABLE_CHARS;
}
ByteArrayOutputStream bytearrayoutputstreamVar1 = bytearrayoutputstreamLiteral2;
for (int intVar7 = intLiteral8; intVar3 < intLiteral1; intVar3++) {
int intVar5 = intLiteral6;
if (intVar5 < 0) {
intVar5 = 256 + intVar5;
}
if (printable.get(intVar5)) {
bytearrayoutputstreamVar1.write(intVar5);
} else {
encodeQuotedPrintable(intVar5, bytearrayoutputstreamVar1);
}
}
return bytearrayoutputstreamVar1.toByteArray();
}"
1548,DODGY_CODE,SF_SWITCH_NO_DEFAULT,FP,codec,518,"switch (modulus) {
case 2 : 
buffer[pos++] = (byte) ((bitWorkArea >> 2) & MASK_8BITS);
break;
case 3 : 
buffer[pos++] = (byte) ((bitWorkArea >> 7) & MASK_8BITS);
break;
case 4 : 
bitWorkArea = bitWorkArea >> 4; 
buffer[pos++] = (byte) ((bitWorkArea >> 8) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea) & MASK_8BITS);
break;
case 5 : 
bitWorkArea = bitWorkArea >> 1;
buffer[pos++] = (byte) ((bitWorkArea >> 16) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea >> 8) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea) & MASK_8BITS);
break;
case 6 : 
bitWorkArea = bitWorkArea >> 6;
buffer[pos++] = (byte) ((bitWorkArea >> 16) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea >> 8) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea) & MASK_8BITS);
break;
case 7 : 
bitWorkArea = bitWorkArea >> 3;
buffer[pos++] = (byte) ((bitWorkArea >> 24) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea >> 16) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea >> 8) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea) & MASK_8BITS);
","void decode(byte[] in, int inPos, int inAvail) {
if (eof) {
return;
}
if (inAvail < 0) {
eof = true;
}
for (int i = 0; i < inAvail; i++) {
byte b = in[inPos++];
if (b == PAD) {
eof = true;
break;
} else {
ensureBufferSize(decodeSize);
if (b >= 0 && b < this.decodeTable.length) {
int result = this.decodeTable[b];
if (result >= 0) {
modulus = (modulus + 1) % BYTES_PER_ENCODED_BLOCK;
bitWorkArea = (bitWorkArea << BITS_PER_ENCODED_BYTE) + result;
if (modulus == 0) {
buffer[pos++] = (byte) ((bitWorkArea >> 32) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea >> 24) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea >> 16) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea >> 8) & MASK_8BITS);
buffer[pos++] = (byte) (bitWorkArea & MASK_8BITS);
}
}
}
}
}
// Two forms of EOF as far as Base32 decoder is concerned: actual
if (eof && modulus >= 2) {
ensureBufferSize(decodeSize);
switch(modulus) {
case 2:
buffer[pos++] = (byte) ((bitWorkArea >> 2) & MASK_8BITS);
break;
case 3:
buffer[pos++] = (byte) ((bitWorkArea >> 7) & MASK_8BITS);
break;
case 4:
bitWorkArea = bitWorkArea >> 4;
buffer[pos++] = (byte) ((bitWorkArea >> 8) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea) & MASK_8BITS);
break;
case 5:
bitWorkArea = bitWorkArea >> 1;
buffer[pos++] = (byte) ((bitWorkArea >> 16) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea >> 8) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea) & MASK_8BITS);
break;
case 6:
bitWorkArea = bitWorkArea >> 6;
buffer[pos++] = (byte) ((bitWorkArea >> 16) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea >> 8) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea) & MASK_8BITS);
break;
case 7:
bitWorkArea = bitWorkArea >> 3;
buffer[pos++] = (byte) ((bitWorkArea >> 24) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea >> 16) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea >> 8) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea) & MASK_8BITS);
break;
}
}
}","void decode(byte[] in, int inPos, int inAvail) {
if (eof) {
return;
}
if (inAvail < 0) {
eof = true;
}
for (int intVar7 = intLiteral8; intVar1 < intLiteral1; intVar1++) {
byte byteVar3 = byteLiteral4;
if (byteVar3 == PAD) {
eof = true;
break;
} else {
ensureBufferSize(decodeSize);
if (byteVar3 >= 0 && byteVar3 < this.decodeTable.length) {
int intVar5 = intLiteral6;
if (intVar5 >= 0) {
modulus = (modulus + 1) % BYTES_PER_ENCODED_BLOCK;
bitWorkArea = (bitWorkArea << BITS_PER_ENCODED_BYTE) + intVar5;
if (modulus == 0) {
buffer[pos++] = (byte) ((bitWorkArea >> 32) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea >> 24) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea >> 16) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea >> 8) & MASK_8BITS);
buffer[pos++] = (byte) (bitWorkArea & MASK_8BITS);
}
}
}
}
}
// Two forms of EOF as far as Base32 decoder is concerned: actual
if (eof && modulus >= 2) {
ensureBufferSize(decodeSize);
switch(modulus) {
case 2:
buffer[pos++] = (byte) ((bitWorkArea >> 2) & MASK_8BITS);
break;
case 3:
buffer[pos++] = (byte) ((bitWorkArea >> 7) & MASK_8BITS);
break;
case 4:
bitWorkArea = bitWorkArea >> 4;
buffer[pos++] = (byte) ((bitWorkArea >> 8) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea) & MASK_8BITS);
break;
case 5:
bitWorkArea = bitWorkArea >> 1;
buffer[pos++] = (byte) ((bitWorkArea >> 16) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea >> 8) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea) & MASK_8BITS);
break;
case 6:
bitWorkArea = bitWorkArea >> 6;
buffer[pos++] = (byte) ((bitWorkArea >> 16) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea >> 8) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea) & MASK_8BITS);
break;
case 7:
bitWorkArea = bitWorkArea >> 3;
buffer[pos++] = (byte) ((bitWorkArea >> 24) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea >> 16) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea >> 8) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea) & MASK_8BITS);
break;
}
}
}"
1554,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,codec,524,"return null;
","protected byte[] doEncoding(byte[] bytes) {
if (bytes == null) {
return null;
}
return Base64.encodeBase64(bytes);
}","protected byte[] doEncoding(byte[] bytes) {
if (bytes == null) {
return null;
}
return Base64.encodeBase64(bytes);
}"
1559,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,codec,529,"return null;
","public static final byte[] encodeQuotedPrintable(BitSet printable, byte[] bytes) {
if (bytes == null) {
return null;
}
if (printable == null) {
printable = PRINTABLE_CHARS;
}
ByteArrayOutputStream buffer = new ByteArrayOutputStream();
for (int i = 0; i < bytes.length; i++) {
int b = bytes[i];
if (b < 0) {
b = 256 + b;
}
if (printable.get(b)) {
buffer.write(b);
} else {
encodeQuotedPrintable(b, buffer);
}
}
return buffer.toByteArray();
}","public static final byte[] encodeQuotedPrintable(BitSet printable, byte[] bytes) {
if (bytes == null) {
return null;
}
if (printable == null) {
printable = PRINTABLE_CHARS;
}
ByteArrayOutputStream bytearrayoutputstreamVar1 = bytearrayoutputstreamLiteral2;
for (int intVar7 = intLiteral8; intVar3 < intLiteral1; intVar3++) {
int intVar5 = intLiteral6;
if (intVar5 < 0) {
intVar5 = 256 + intVar5;
}
if (printable.get(intVar5)) {
bytearrayoutputstreamVar1.write(intVar5);
} else {
encodeQuotedPrintable(intVar5, bytearrayoutputstreamVar1);
}
}
return bytearrayoutputstreamVar1.toByteArray();
}"
1566,PERFORMANCE,SS_SHOULD_BE_STATIC,FP,codec,536,"@Deprecated
protected final byte PAD = PAD_DEFAULT;","@Deprecated
protected final byte PAD = PAD_DEFAULT;","@Deprecated
protected final byte byteVar1 = byteLiteral2;"
1568,DODGY_CODE,ICAST_QUESTIONABLE_UNSIGNED_RIGHT_SHIFT,FP,codec,538,"dst[off + i] = (byte) (value >>> i * Byte.SIZE);
","private static void packInt(final int value, final byte[] dst, final int off, final int len) {
for (int i = 0; i < len; i++) {
dst[off + i] = (byte) (value >>> i * Byte.SIZE);
}
}","private static void packInt(final int value, final byte[] dst, final int off, final int len) {
for (int intVar3 = intLiteral4; intVar1 < intLiteral1; intVar1++) {
dst[off + intVar1] = (byte) (value >>> intVar1 * Byte.SIZE);
}
}"
1570,DODGY_CODE,SF_SWITCH_NO_DEFAULT,FP,codec,540,"switch (length - index) {
case 3:
h ^= (data[index + 2] & 0xff) << 16;
case 2:
h ^= (data[index + 1] & 0xff) << 8;
case 1:
h ^= (data[index] & 0xff);
h *= M32;
","public static int hash32(final byte[] data, final int length, final int seed) {
int h = seed ^ length;
final int nblocks = length >> 2;
for (int i = 0; i < nblocks; i++) {
final int index = (i << 2);
int k = getLittleEndianInt(data, index);
k *= M32;
k ^= k >>> R32;
k *= M32;
h *= M32;
h ^= k;
}
final int index = (nblocks << 2);
switch(length - index) {
case 3:
h ^= (data[index + 2] & 0xff) << 16;
case 2:
h ^= (data[index + 1] & 0xff) << 8;
case 1:
h ^= (data[index] & 0xff);
h *= M32;
}
h ^= h >>> 13;
h *= M32;
h ^= h >>> 15;
return h;
}","public static int hash32(final byte[] data, final int length, final int seed) {
int intVar1 = intLiteral2;
final int intVar3 = intLiteral4;
for (int intVar12 = intLiteral13; intVar5 < intLiteral1; intVar5++) {
final int intVar7 = intLiteral8;
int intVar9 = intLiteral10;
intVar9 *= M32;
intVar9 ^= intVar9 >>> R32;
intVar9 *= M32;
intVar1 *= M32;
intVar1 ^= intVar9;
}
final int intVar7 = intLiteral11;
switch(length - intVar7) {
case 3:
intVar1 ^= (data[intVar7 + 2] & 0xff) << 16;
case 2:
intVar1 ^= (data[intVar7 + 1] & 0xff) << 8;
case 1:
intVar1 ^= (data[intVar7] & 0xff);
intVar1 *= M32;
}
intVar1 ^= intVar1 >>> 13;
intVar1 *= M32;
intVar1 ^= intVar1 >>> 15;
return intVar1;
}"
1585,DODGY_CODE,SF_SWITCH_FALLTHROUGH,FP,codec,555,"case 7: localCrc = (localCrc >>> 8) ^ T[((localCrc ^ b[i++]) << 24) >>> 24];
case 6: localCrc = (localCrc >>> 8) ^ T[((localCrc ^ b[i++]) << 24) >>> 24];
","@Override
public void update(final byte[] b, final int offset, final int len) {
int localCrc = crc;
final int remainder = len & 0x7;
int i = offset;
for (final int end = offset + len - remainder; i < end; i += 8) {
final int x = localCrc ^ ((((b[i] << 24) >>> 24) + ((b[i + 1] << 24) >>> 16)) + (((b[i + 2] << 24) >>> 8) + (b[i + 3] << 24)));
localCrc = ((T[((x << 24) >>> 24) + 0x700] ^ T[((x << 16) >>> 24) + 0x600]) ^ (T[((x << 8) >>> 24) + 0x500] ^ T[(x >>> 24) + 0x400])) ^ ((T[((b[i + 4] << 24) >>> 24) + 0x300] ^ T[((b[i + 5] << 24) >>> 24) + 0x200]) ^ (T[((b[i + 6] << 24) >>> 24) + 0x100] ^ T[((b[i + 7] << 24) >>> 24)]));
}
switch(remainder) {
case 7:
localCrc = (localCrc >>> 8) ^ T[((localCrc ^ b[i++]) << 24) >>> 24];
case 6:
localCrc = (localCrc >>> 8) ^ T[((localCrc ^ b[i++]) << 24) >>> 24];
case 5:
localCrc = (localCrc >>> 8) ^ T[((localCrc ^ b[i++]) << 24) >>> 24];
case 4:
localCrc = (localCrc >>> 8) ^ T[((localCrc ^ b[i++]) << 24) >>> 24];
case 3:
localCrc = (localCrc >>> 8) ^ T[((localCrc ^ b[i++]) << 24) >>> 24];
case 2:
localCrc = (localCrc >>> 8) ^ T[((localCrc ^ b[i++]) << 24) >>> 24];
case 1:
localCrc = (localCrc >>> 8) ^ T[((localCrc ^ b[i++]) << 24) >>> 24];
default:
}
crc = localCrc;
}","@Override
public void update(final byte[] b, final int offset, final int len) {
int intVar1 = intLiteral2;
final int intVar3 = intLiteral4;
int intVar5 = intLiteral6;
for (final int intVar11 = intLiteral12; intVar5 < intLiteral1; intVar5 += 8) {
final int intVar9 = intLiteral10;
intVar1 = ((T[((intVar9 << 24) >>> 24) + 0x700] ^ T[((intVar9 << 16) >>> 24) + 0x600]) ^ (T[((intVar9 << 8) >>> 24) + 0x500] ^ T[(intVar9 >>> 24) + 0x400])) ^ ((T[((b[intVar5 + 4] << 24) >>> 24) + 0x300] ^ T[((b[intVar5 + 5] << 24) >>> 24) + 0x200]) ^ (T[((b[intVar5 + 6] << 24) >>> 24) + 0x100] ^ T[((b[intVar5 + 7] << 24) >>> 24)]));
}
switch(intVar3) {
case 7:
intVar1 = (intVar1 >>> 8) ^ T[((intVar1 ^ b[intVar5++]) << 24) >>> 24];
case 6:
intVar1 = (intVar1 >>> 8) ^ T[((intVar1 ^ b[intVar5++]) << 24) >>> 24];
case 5:
intVar1 = (intVar1 >>> 8) ^ T[((intVar1 ^ b[intVar5++]) << 24) >>> 24];
case 4:
intVar1 = (intVar1 >>> 8) ^ T[((intVar1 ^ b[intVar5++]) << 24) >>> 24];
case 3:
intVar1 = (intVar1 >>> 8) ^ T[((intVar1 ^ b[intVar5++]) << 24) >>> 24];
case 2:
intVar1 = (intVar1 >>> 8) ^ T[((intVar1 ^ b[intVar5++]) << 24) >>> 24];
case 1:
intVar1 = (intVar1 >>> 8) ^ T[((intVar1 ^ b[intVar5++]) << 24) >>> 24];
default:
}
crc = intVar1;
}"
1586,DODGY_CODE,SF_SWITCH_NO_DEFAULT,FP,codec,556,"switch(len) {
case 7: localCrc = (localCrc >>> 8) ^ T[T8_0_start + ((localCrc ^ b[off++]) & 0xff)];
case 6: localCrc = (localCrc >>> 8) ^ T[T8_0_start + ((localCrc ^ b[off++]) & 0xff)];
case 5: localCrc = (localCrc >>> 8) ^ T[T8_0_start + ((localCrc ^ b[off++]) & 0xff)];
case 4: localCrc = (localCrc >>> 8) ^ T[T8_0_start + ((localCrc ^ b[off++]) & 0xff)];
case 3: localCrc = (localCrc >>> 8) ^ T[T8_0_start + ((localCrc ^ b[off++]) & 0xff)];
case 2: localCrc = (localCrc >>> 8) ^ T[T8_0_start + ((localCrc ^ b[off++]) & 0xff)];
case 1: localCrc = (localCrc >>> 8) ^ T[T8_0_start + ((localCrc ^ b[off++]) & 0xff)];
","@Override
public void update(final byte[] b, int off, int len) {
int localCrc = crc;
while (len > 7) {
final int c0 = (b[off + 0] ^ localCrc) & 0xff;
final int c1 = (b[off + 1] ^ (localCrc >>>= 8)) & 0xff;
final int c2 = (b[off + 2] ^ (localCrc >>>= 8)) & 0xff;
final int c3 = (b[off + 3] ^ (localCrc >>>= 8)) & 0xff;
localCrc = (T[T8_7_start + c0] ^ T[T8_6_start + c1]) ^ (T[T8_5_start + c2] ^ T[T8_4_start + c3]);
final int c4 = b[off + 4] & 0xff;
final int c5 = b[off + 5] & 0xff;
final int c6 = b[off + 6] & 0xff;
final int c7 = b[off + 7] & 0xff;
localCrc ^= (T[T8_3_start + c4] ^ T[T8_2_start + c5]) ^ (T[T8_1_start + c6] ^ T[T8_0_start + c7]);
off += 8;
len -= 8;
}
switch(len) {
case 7:
localCrc = (localCrc >>> 8) ^ T[T8_0_start + ((localCrc ^ b[off++]) & 0xff)];
case 6:
localCrc = (localCrc >>> 8) ^ T[T8_0_start + ((localCrc ^ b[off++]) & 0xff)];
case 5:
localCrc = (localCrc >>> 8) ^ T[T8_0_start + ((localCrc ^ b[off++]) & 0xff)];
case 4:
localCrc = (localCrc >>> 8) ^ T[T8_0_start + ((localCrc ^ b[off++]) & 0xff)];
case 3:
localCrc = (localCrc >>> 8) ^ T[T8_0_start + ((localCrc ^ b[off++]) & 0xff)];
case 2:
localCrc = (localCrc >>> 8) ^ T[T8_0_start + ((localCrc ^ b[off++]) & 0xff)];
case 1:
localCrc = (localCrc >>> 8) ^ T[T8_0_start + ((localCrc ^ b[off++]) & 0xff)];
default:
break;
}
crc = localCrc;
}","@Override
public void update(final byte[] b, int off, int len) {
int intVar1 = intLiteral2;
while (len > 7) {
final int intVar3 = intLiteral4;
final int intVar5 = intLiteral6;
final int intVar7 = intLiteral8;
final int intVar9 = intLiteral10;
intVar1 = (T[T8_7_start + intVar3] ^ T[T8_6_start + intVar5]) ^ (T[T8_5_start + intVar7] ^ T[T8_4_start + intVar9]);
final int intVar11 = intLiteral12;
final int intVar13 = intLiteral14;
final int intVar15 = intLiteral16;
final int intVar17 = intLiteral18;
intVar1 ^= (T[T8_3_start + intVar11] ^ T[T8_2_start + intVar13]) ^ (T[T8_1_start + intVar15] ^ T[T8_0_start + intVar17]);
off += 8;
len -= 8;
}
switch(len) {
case 7:
intVar1 = (intVar1 >>> 8) ^ T[T8_0_start + ((intVar1 ^ b[off++]) & 0xff)];
case 6:
intVar1 = (intVar1 >>> 8) ^ T[T8_0_start + ((intVar1 ^ b[off++]) & 0xff)];
case 5:
intVar1 = (intVar1 >>> 8) ^ T[T8_0_start + ((intVar1 ^ b[off++]) & 0xff)];
case 4:
intVar1 = (intVar1 >>> 8) ^ T[T8_0_start + ((intVar1 ^ b[off++]) & 0xff)];
case 3:
intVar1 = (intVar1 >>> 8) ^ T[T8_0_start + ((intVar1 ^ b[off++]) & 0xff)];
case 2:
intVar1 = (intVar1 >>> 8) ^ T[T8_0_start + ((intVar1 ^ b[off++]) & 0xff)];
case 1:
intVar1 = (intVar1 >>> 8) ^ T[T8_0_start + ((intVar1 ^ b[off++]) & 0xff)];
default:
break;
}
crc = intVar1;
}"
1589,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,codec,559,"final SomeLanguages someLanguages = (SomeLanguages) other;
","@Override
public LanguageSet restrictTo(final LanguageSet other) {
if (other == NO_LANGUAGES) {
return other;
}
if (other == ANY_LANGUAGE) {
return this;
}
final SomeLanguages someLanguages = (SomeLanguages) other;
return from(languages.stream().filter(lang -> someLanguages.languages.contains(lang)).collect(Collectors.toSet()));
}","@Override
public LanguageSet restrictTo(final LanguageSet other) {
if (other == NO_LANGUAGES) {
return other;
}
if (other == ANY_LANGUAGE) {
return this;
}
final SomeLanguages somelanguagesVar1 = somelanguagesLiteral2;
return from(languages.stream().filter(lang -> somelanguagesVar1.languages.contains(lang)).collect(Collectors.toSet()));
}"
1590,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,codec,560,"final SomeLanguages someLanguages = (SomeLanguages) other;
","@Override
public LanguageSet merge(final LanguageSet other) {
if (other == NO_LANGUAGES) {
return this;
}
if (other == ANY_LANGUAGE) {
return other;
}
final SomeLanguages someLanguages = (SomeLanguages) other;
final Set<String> set = new HashSet<>(languages);
set.addAll(someLanguages.languages);
return from(set);
}","@Override
public LanguageSet merge(final LanguageSet other) {
if (other == NO_LANGUAGES) {
return this;
}
if (other == ANY_LANGUAGE) {
return other;
}
final SomeLanguages somelanguagesVar1 = somelanguagesLiteral2;
final Set<String> set<string>Var3 = set<string>Literal4;
set<string>Var3.addAll(somelanguagesVar1.languages);
return from(set<string>Var3);
}"
1597,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,codec,567,"return null;
","public static final byte[] encodeQuotedPrintable(BitSet printable, final byte[] bytes, final boolean strict) {
if (bytes == null) {
return null;
}
if (printable == null) {
printable = PRINTABLE_CHARS;
}
final ByteArrayOutputStream buffer = new ByteArrayOutputStream();
final int bytesLength = bytes.length;
if (strict) {
int pos = 1;
for (int i = 0; i < bytesLength - 3; i++) {
final int b = getUnsignedOctet(i, bytes);
if (pos < SAFE_LENGTH) {
pos += encodeByte(b, !printable.get(b), buffer);
} else {
encodeByte(b, !printable.get(b) || isWhitespace(b), buffer);
buffer.write(ESCAPE_CHAR);
buffer.write(CR);
buffer.write(LF);
pos = 1;
}
}
int b = getUnsignedOctet(bytesLength - 3, bytes);
boolean encode = !printable.get(b) || (isWhitespace(b) && pos > SAFE_LENGTH - 5);
pos += encodeByte(b, encode, buffer);
// simplification: if < 6 bytes left, do a soft line break as we may need
if (pos > SAFE_LENGTH - 2) {
buffer.write(ESCAPE_CHAR);
buffer.write(CR);
buffer.write(LF);
}
for (int i = bytesLength - 2; i < bytesLength; i++) {
b = getUnsignedOctet(i, bytes);
encode = !printable.get(b) || (i > bytesLength - 2 && isWhitespace(b));
encodeByte(b, encode, buffer);
}
} else {
for (final byte c : bytes) {
int b = c;
if (b < 0) {
b = 256 + b;
}
if (printable.get(b)) {
buffer.write(b);
} else {
encodeQuotedPrintable(b, buffer);
}
}
}
return buffer.toByteArray();
}","public static final byte[] encodeQuotedPrintable(BitSet printable, final byte[] bytes, final boolean strict) {
if (bytes == null) {
return null;
}
if (printable == null) {
printable = PRINTABLE_CHARS;
}
final ByteArrayOutputStream bytearrayoutputstreamVar1 = bytearrayoutputstreamLiteral2;
final int intVar3 = intLiteral4;
if (strict) {
int intVar5 = intLiteral6;
for (int intVar17 = intLiteral18; intVar7 < intLiteral1; intVar7++) {
final int intVar9 = intLiteral10;
if (intVar5 < SAFE_LENGTH) {
intVar5 += encodeByte(intVar9, !printable.get(intVar9), bytearrayoutputstreamVar1);
} else {
encodeByte(intVar9, !printable.get(intVar9) || isWhitespace(intVar9), bytearrayoutputstreamVar1);
bytearrayoutputstreamVar1.write(ESCAPE_CHAR);
bytearrayoutputstreamVar1.write(CR);
bytearrayoutputstreamVar1.write(LF);
intVar5 = 1;
}
}
int intVar9 = intLiteral11;
boolean booleanVar12 = booleanLiteral13;
intVar5 += encodeByte(intVar9, booleanVar12, bytearrayoutputstreamVar1);
// simplification: if < 6 bytes left, do a soft line break as we may need
if (intVar5 > SAFE_LENGTH - 2) {
bytearrayoutputstreamVar1.write(ESCAPE_CHAR);
bytearrayoutputstreamVar1.write(CR);
bytearrayoutputstreamVar1.write(LF);
}
for (int intVar17 = intLiteral19; intVar7 < intLiteral2; intVar7++) {
intVar9 = getUnsignedOctet(intVar7, bytes);
booleanVar12 = !printable.get(intVar9) || (intVar7 > intVar3 - 2 && isWhitespace(intVar9));
encodeByte(intVar9, booleanVar12, bytearrayoutputstreamVar1);
}
} else {
for (final byte byteVar15 : bytes) {
int intVar9 = intLiteral16;
if (intVar9 < 0) {
intVar9 = 256 + intVar9;
}
if (printable.get(intVar9)) {
bytearrayoutputstreamVar1.write(intVar9);
} else {
encodeQuotedPrintable(intVar9, bytearrayoutputstreamVar1);
}
}
}
return bytearrayoutputstreamVar1.toByteArray();
}"
1607,DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,FP,codec,577,"if (m == null || !m.find()) {
","private static String sha2Crypt(byte[] keyBytes, String salt, String saltPrefix, int blocksize, String algorithm) {
int keyLen = keyBytes.length;
int rounds = ROUNDS_DEFAULT;
boolean roundsCustom = false;
if (salt == null) {
throw new IllegalArgumentException(""Salt must not be null"");
}
Matcher m = SALT_PATTERN.matcher(salt);
if (m == null || !m.find()) {
throw new IllegalArgumentException(""Invalid salt value: "" + salt);
}
if (m.group(3) != null) {
rounds = Integer.parseInt(m.group(3));
rounds = Math.max(ROUNDS_MIN, Math.min(ROUNDS_MAX, rounds));
roundsCustom = true;
}
String saltString = m.group(4);
byte[] saltBytes = saltString.getBytes(Charsets.UTF_8);
int saltLen = saltBytes.length;
MessageDigest ctx = DigestUtils.getDigest(algorithm);
ctx.update(keyBytes);
// NB: the MD5 algorithm did add the $1$ salt_prefix. This is not deemed
ctx.update(saltBytes);
MessageDigest altCtx = DigestUtils.getDigest(algorithm);
altCtx.update(keyBytes);
altCtx.update(saltBytes);
altCtx.update(keyBytes);
byte[] altResult = altCtx.digest();
int cnt = keyBytes.length;
while (cnt > blocksize) {
ctx.update(altResult, 0, blocksize);
cnt -= blocksize;
}
ctx.update(altResult, 0, cnt);
// NB: this step differs significantly from the MD5 algorithm. It
cnt = keyBytes.length;
while (cnt > 0) {
if ((cnt & 1) != 0) {
ctx.update(altResult, 0, blocksize);
} else {
ctx.update(keyBytes);
}
cnt >>= 1;
}
altResult = ctx.digest();
altCtx = DigestUtils.getDigest(algorithm);
for (int i = 1; i <= keyLen; i++) {
altCtx.update(keyBytes);
}
byte[] tempResult = altCtx.digest();
byte[] pBytes = new byte[keyLen];
int cp = 0;
while (cp < keyLen - blocksize) {
System.arraycopy(tempResult, 0, pBytes, cp, blocksize);
cp += blocksize;
}
System.arraycopy(tempResult, 0, pBytes, cp, keyLen - cp);
altCtx = DigestUtils.getDigest(algorithm);
for (int i = 1; i <= 16 + (altResult[0] & 0xff); i++) {
altCtx.update(saltBytes);
}
tempResult = altCtx.digest();
// Remark: The salt is limited to 16 chars, how does this make sense?
byte[] sBytes = new byte[saltLen];
cp = 0;
while (cp < saltLen - blocksize) {
System.arraycopy(tempResult, 0, sBytes, cp, blocksize);
cp += blocksize;
}
System.arraycopy(tempResult, 0, sBytes, cp, saltLen - cp);
for (int i = 0; i <= rounds - 1; i++) {
ctx = DigestUtils.getDigest(algorithm);
if ((i & 1) != 0) {
ctx.update(pBytes, 0, keyLen);
} else {
ctx.update(altResult, 0, blocksize);
}
if (i % 3 != 0) {
ctx.update(sBytes, 0, saltLen);
}
if (i % 7 != 0) {
ctx.update(pBytes, 0, keyLen);
}
if ((i & 1) != 0) {
ctx.update(altResult, 0, blocksize);
} else {
ctx.update(pBytes, 0, keyLen);
}
altResult = ctx.digest();
}
// size specified above, consisting of multiple pieces:
StringBuilder buffer = new StringBuilder(saltPrefix);
if (roundsCustom) {
buffer.append(ROUNDS_PREFIX);
buffer.append(rounds);
buffer.append(""$"");
}
buffer.append(saltString);
buffer.append(""$"");
// follows:
// characters as output:
// 1. character: the six low bits of the first byte
// 2. character: the two high bits of the first byte and the
// 3. character: the four high bytes from the second byte and
// 4. character: the six high bits from the third byte
// This was just a safeguard in the C implementation:
if (blocksize == 32) {
B64.b64from24bit(altResult[0], altResult[10], altResult[20], 4, buffer);
B64.b64from24bit(altResult[21], altResult[1], altResult[11], 4, buffer);
B64.b64from24bit(altResult[12], altResult[22], altResult[2], 4, buffer);
B64.b64from24bit(altResult[3], altResult[13], altResult[23], 4, buffer);
B64.b64from24bit(altResult[24], altResult[4], altResult[14], 4, buffer);
B64.b64from24bit(altResult[15], altResult[25], altResult[5], 4, buffer);
B64.b64from24bit(altResult[6], altResult[16], altResult[26], 4, buffer);
B64.b64from24bit(altResult[27], altResult[7], altResult[17], 4, buffer);
B64.b64from24bit(altResult[18], altResult[28], altResult[8], 4, buffer);
B64.b64from24bit(altResult[9], altResult[19], altResult[29], 4, buffer);
B64.b64from24bit((byte) 0, altResult[31], altResult[30], 3, buffer);
} else {
B64.b64from24bit(altResult[0], altResult[21], altResult[42], 4, buffer);
B64.b64from24bit(altResult[22], altResult[43], altResult[1], 4, buffer);
B64.b64from24bit(altResult[44], altResult[2], altResult[23], 4, buffer);
B64.b64from24bit(altResult[3], altResult[24], altResult[45], 4, buffer);
B64.b64from24bit(altResult[25], altResult[46], altResult[4], 4, buffer);
B64.b64from24bit(altResult[47], altResult[5], altResult[26], 4, buffer);
B64.b64from24bit(altResult[6], altResult[27], altResult[48], 4, buffer);
B64.b64from24bit(altResult[28], altResult[49], altResult[7], 4, buffer);
B64.b64from24bit(altResult[50], altResult[8], altResult[29], 4, buffer);
B64.b64from24bit(altResult[9], altResult[30], altResult[51], 4, buffer);
B64.b64from24bit(altResult[31], altResult[52], altResult[10], 4, buffer);
B64.b64from24bit(altResult[53], altResult[11], altResult[32], 4, buffer);
B64.b64from24bit(altResult[12], altResult[33], altResult[54], 4, buffer);
B64.b64from24bit(altResult[34], altResult[55], altResult[13], 4, buffer);
B64.b64from24bit(altResult[56], altResult[14], altResult[35], 4, buffer);
B64.b64from24bit(altResult[15], altResult[36], altResult[57], 4, buffer);
B64.b64from24bit(altResult[37], altResult[58], altResult[16], 4, buffer);
B64.b64from24bit(altResult[59], altResult[17], altResult[38], 4, buffer);
B64.b64from24bit(altResult[18], altResult[39], altResult[60], 4, buffer);
B64.b64from24bit(altResult[40], altResult[61], altResult[19], 4, buffer);
B64.b64from24bit(altResult[62], altResult[20], altResult[41], 4, buffer);
B64.b64from24bit((byte) 0, (byte) 0, altResult[63], 2, buffer);
}
Arrays.fill(tempResult, (byte) 0);
Arrays.fill(pBytes, (byte) 0);
Arrays.fill(sBytes, (byte) 0);
ctx.reset();
altCtx.reset();
Arrays.fill(keyBytes, (byte) 0);
Arrays.fill(saltBytes, (byte) 0);
return buffer.toString();
}","private static String sha2Crypt(byte[] keyBytes, String salt, String saltPrefix, int blocksize, String algorithm) {
int intVar1 = intLiteral2;
int intVar3 = intLiteral4;
boolean booleanVar5 = booleanLiteral6;
if (salt == null) {
throw new IllegalArgumentException(""Salt must not be null"");
}
Matcher matcherVar7 = matcherLiteral8;
if (matcherVar7 == null || !matcherVar7.find()) {
throw new IllegalArgumentException(""Invalid salt value: "" + salt);
}
if (matcherVar7.group(3) != null) {
intVar3 = Integer.parseInt(matcherVar7.group(3));
intVar3 = Math.max(ROUNDS_MIN, Math.min(ROUNDS_MAX, intVar3));
booleanVar5 = true;
}
String stringVar9 = stringLiteral10;
byte[] byteArrayVar11 = byteArrayLiteral12;
int intVar13 = intLiteral14;
MessageDigest messagedigestVar15 = messagedigestLiteral16;
messagedigestVar15.update(keyBytes);
// NB: the MD5 algorithm did add the $1$ salt_prefix. This is not deemed
messagedigestVar15.update(byteArrayVar11);
MessageDigest messagedigestVar17 = messagedigestLiteral16;
messagedigestVar17.update(keyBytes);
messagedigestVar17.update(byteArrayVar11);
messagedigestVar17.update(keyBytes);
byte[] byteArrayVar18 = byteArrayLiteral19;
int intVar20 = intLiteral2;
while (intVar20 > blocksize) {
messagedigestVar15.update(byteArrayVar18, 0, blocksize);
intVar20 -= blocksize;
}
messagedigestVar15.update(byteArrayVar18, 0, intVar20);
// NB: this step differs significantly from the MD5 algorithm. It
intVar20 = keyBytes.length;
while (intVar20 > 0) {
if ((intVar20 & 1) != 0) {
messagedigestVar15.update(byteArrayVar18, 0, blocksize);
} else {
messagedigestVar15.update(keyBytes);
}
intVar20 >>= 1;
}
byteArrayVar18 = messagedigestVar15.digest();
messagedigestVar17 = DigestUtils.getDigest(algorithm);
for (int intVar32 = intLiteral33; intVar21 <= intLiteral1; intVar21++) {
messagedigestVar17.update(keyBytes);
}
byte[] byteArrayVar23 = byteArrayLiteral19;
byte[] byteArrayVar24 = byteArrayLiteral25;
int intVar26 = intLiteral27;
while (intVar26 < intVar1 - blocksize) {
System.arraycopy(byteArrayVar23, 0, byteArrayVar24, intVar26, blocksize);
intVar26 += blocksize;
}
System.arraycopy(byteArrayVar23, 0, byteArrayVar24, intVar26, intVar1 - intVar26);
messagedigestVar17 = DigestUtils.getDigest(algorithm);
for (int intVar32 = intLiteral33; intVar21 <= intLiteral2; intVar21++) {
messagedigestVar17.update(byteArrayVar11);
}
byteArrayVar23 = messagedigestVar17.digest();
// Remark: The salt is limited to 16 chars, how does this make sense?
byte[] byteArrayVar28 = byteArrayLiteral29;
intVar26 = 0;
while (intVar26 < intVar13 - blocksize) {
System.arraycopy(byteArrayVar23, 0, byteArrayVar28, intVar26, blocksize);
intVar26 += blocksize;
}
System.arraycopy(byteArrayVar23, 0, byteArrayVar28, intVar26, intVar13 - intVar26);
for (int intVar32 = intLiteral34; intVar21 <= intLiteral3; intVar21++) {
messagedigestVar15 = DigestUtils.getDigest(algorithm);
if ((intVar21 & 1) != 0) {
messagedigestVar15.update(byteArrayVar24, 0, intVar1);
} else {
messagedigestVar15.update(byteArrayVar18, 0, blocksize);
}
if (intVar21 % 3 != 0) {
messagedigestVar15.update(byteArrayVar28, 0, intVar13);
}
if (intVar21 % 7 != 0) {
messagedigestVar15.update(byteArrayVar24, 0, intVar1);
}
if ((intVar21 & 1) != 0) {
messagedigestVar15.update(byteArrayVar18, 0, blocksize);
} else {
messagedigestVar15.update(byteArrayVar24, 0, intVar1);
}
byteArrayVar18 = messagedigestVar15.digest();
}
// size specified above, consisting of multiple pieces:
StringBuilder stringbuilderVar30 = stringbuilderLiteral31;
if (booleanVar5) {
stringbuilderVar30.append(ROUNDS_PREFIX);
stringbuilderVar30.append(intVar3);
stringbuilderVar30.append(""$"");
}
stringbuilderVar30.append(stringVar9);
stringbuilderVar30.append(""$"");
// follows:
// characters as output:
// 1. character: the six low bits of the first byte
// 2. character: the two high bits of the first byte and the
// 3. character: the four high bytes from the second byte and
// 4. character: the six high bits from the third byte
// This was just a safeguard in the C implementation:
if (blocksize == 32) {
B64.b64from24bit(byteArrayVar18[0], byteArrayVar18[10], byteArrayVar18[20], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[21], byteArrayVar18[1], byteArrayVar18[11], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[12], byteArrayVar18[22], byteArrayVar18[2], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[3], byteArrayVar18[13], byteArrayVar18[23], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[24], byteArrayVar18[4], byteArrayVar18[14], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[15], byteArrayVar18[25], byteArrayVar18[5], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[6], byteArrayVar18[16], byteArrayVar18[26], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[27], byteArrayVar18[7], byteArrayVar18[17], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[18], byteArrayVar18[28], byteArrayVar18[8], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[9], byteArrayVar18[19], byteArrayVar18[29], 4, stringbuilderVar30);
B64.b64from24bit((byte) 0, byteArrayVar18[31], byteArrayVar18[30], 3, stringbuilderVar30);
} else {
B64.b64from24bit(byteArrayVar18[0], byteArrayVar18[21], byteArrayVar18[42], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[22], byteArrayVar18[43], byteArrayVar18[1], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[44], byteArrayVar18[2], byteArrayVar18[23], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[3], byteArrayVar18[24], byteArrayVar18[45], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[25], byteArrayVar18[46], byteArrayVar18[4], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[47], byteArrayVar18[5], byteArrayVar18[26], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[6], byteArrayVar18[27], byteArrayVar18[48], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[28], byteArrayVar18[49], byteArrayVar18[7], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[50], byteArrayVar18[8], byteArrayVar18[29], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[9], byteArrayVar18[30], byteArrayVar18[51], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[31], byteArrayVar18[52], byteArrayVar18[10], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[53], byteArrayVar18[11], byteArrayVar18[32], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[12], byteArrayVar18[33], byteArrayVar18[54], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[34], byteArrayVar18[55], byteArrayVar18[13], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[56], byteArrayVar18[14], byteArrayVar18[35], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[15], byteArrayVar18[36], byteArrayVar18[57], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[37], byteArrayVar18[58], byteArrayVar18[16], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[59], byteArrayVar18[17], byteArrayVar18[38], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[18], byteArrayVar18[39], byteArrayVar18[60], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[40], byteArrayVar18[61], byteArrayVar18[19], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[62], byteArrayVar18[20], byteArrayVar18[41], 4, stringbuilderVar30);
B64.b64from24bit((byte) 0, (byte) 0, byteArrayVar18[63], 2, stringbuilderVar30);
}
Arrays.fill(byteArrayVar23, (byte) 0);
Arrays.fill(byteArrayVar24, (byte) 0);
Arrays.fill(byteArrayVar28, (byte) 0);
messagedigestVar15.reset();
messagedigestVar17.reset();
Arrays.fill(keyBytes, (byte) 0);
Arrays.fill(byteArrayVar11, (byte) 0);
return stringbuilderVar30.toString();
}"
1619,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,codec,589,"return null;
","public static byte[] getBytesUnchecked(final String string, final String charsetName) {
if (string == null) {
return null;
}
try {
return string.getBytes(charsetName);
} catch (final UnsupportedEncodingException e) {
throw StringUtils.newIllegalStateException(charsetName, e);
}
}","public static byte[] getBytesUnchecked(final String string, final String charsetName) {
if (string == null) {
return null;
}
try {
return string.getBytes(charsetName);
} catch (final UnsupportedEncodingException e) {
throw StringUtils.newIllegalStateException(charsetName, e);
}
}"
1632,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,codec,602,"return null;
","public static final byte[] decodeQuotedPrintable(final byte[] bytes) throws DecoderException {
if (bytes == null) {
return null;
}
final ByteArrayOutputStream buffer = new ByteArrayOutputStream();
for (int i = 0; i < bytes.length; i++) {
final int b = bytes[i];
if (b == ESCAPE_CHAR) {
try {
if (bytes[++i] == CR) {
continue;
}
final int u = Utils.digit16(bytes[i]);
final int l = Utils.digit16(bytes[++i]);
buffer.write((char) ((u << 4) + l));
} catch (final ArrayIndexOutOfBoundsException e) {
throw new DecoderException(""Invalid quoted-printable encoding"", e);
}
} else if (b != CR && b != LF) {
buffer.write(b);
}
}
return buffer.toByteArray();
}","public static final byte[] decodeQuotedPrintable(final byte[] bytes) throws DecoderException {
if (bytes == null) {
return null;
}
final ByteArrayOutputStream bytearrayoutputstreamVar1 = bytearrayoutputstreamLiteral2;
for (int intVar11 = intLiteral12; intVar3 < intLiteral1; intVar3++) {
final int intVar5 = intLiteral6;
if (intVar5 == ESCAPE_CHAR) {
try {
if (bytes[++intVar3] == CR) {
continue;
}
final int intVar7 = intLiteral8;
final int intVar9 = intLiteral10;
bytearrayoutputstreamVar1.write((char) ((intVar7 << 4) + intVar9));
} catch (final ArrayIndexOutOfBoundsException e) {
throw new DecoderException(""Invalid quoted-printable encoding"", e);
}
} else if (intVar5 != CR && intVar5 != LF) {
bytearrayoutputstreamVar1.write(intVar5);
}
}
return bytearrayoutputstreamVar1.toByteArray();
}"
1637,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,codec,607,"return null;
","private static byte[] getBytes(final String string, final Charset charset) {
if (string == null) {
return null;
}
return string.getBytes(charset);
}","private static byte[] getBytes(final String string, final Charset charset) {
if (string == null) {
return null;
}
return string.getBytes(charset);
}"
1641,I18N,DM_CONVERT_CASE,FP,codec,611,"String replacedName = name.toUpperCase();
","String removeDoubleConsonants(final String name) {
String replacedName = name.toUpperCase();
for (final String dc : DOUBLE_CONSONANT) {
if (replacedName.contains(dc)) {
final String singleLetter = dc.substring(0, 1);
replacedName = replacedName.replace(dc, singleLetter);
}
}
return replacedName;
}","String removeDoubleConsonants(final String name) {
String stringVar1 = stringLiteral2;
for (final String stringVar3 : DOUBLE_CONSONANT) {
if (stringVar1.contains(stringVar3)) {
final String stringVar4 = stringLiteral5;
stringVar1 = stringVar1.replace(stringVar3, stringVar4);
}
}
return stringVar1;
}"
1646,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,codec,616,"return null;
","@Override
protected byte[] doDecoding(final byte[] bytes) {
if (bytes == null) {
return null;
}
return Base64.decodeBase64(bytes);
}","@Override
protected byte[] doDecoding(final byte[] bytes) {
if (bytes == null) {
return null;
}
return Base64.decodeBase64(bytes);
}"
1649,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,codec,619,"return null;
","public static final byte[] encodeQuotedPrintable(BitSet printable, final byte[] bytes) {
if (bytes == null) {
return null;
}
if (printable == null) {
printable = PRINTABLE_CHARS;
}
final ByteArrayOutputStream buffer = new ByteArrayOutputStream();
for (final byte c : bytes) {
int b = c;
if (b < 0) {
b = 256 + b;
}
if (printable.get(b)) {
buffer.write(b);
} else {
encodeQuotedPrintable(b, buffer);
}
}
return buffer.toByteArray();
}","public static final byte[] encodeQuotedPrintable(BitSet printable, final byte[] bytes) {
if (bytes == null) {
return null;
}
if (printable == null) {
printable = PRINTABLE_CHARS;
}
final ByteArrayOutputStream bytearrayoutputstreamVar1 = bytearrayoutputstreamLiteral2;
for (final byte byteVar3 : bytes) {
int intVar4 = intLiteral5;
if (intVar4 < 0) {
intVar4 = 256 + intVar4;
}
if (printable.get(intVar4)) {
bytearrayoutputstreamVar1.write(intVar4);
} else {
encodeQuotedPrintable(intVar4, bytearrayoutputstreamVar1);
}
}
return bytearrayoutputstreamVar1.toByteArray();
}"
1650,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,codec,620,"return null;
","public static final byte[] decodeQuotedPrintable(final byte[] bytes) throws DecoderException {
if (bytes == null) {
return null;
}
final ByteArrayOutputStream buffer = new ByteArrayOutputStream();
for (int i = 0; i < bytes.length; i++) {
final int b = bytes[i];
if (b == ESCAPE_CHAR) {
try {
final int u = Utils.digit16(bytes[++i]);
final int l = Utils.digit16(bytes[++i]);
buffer.write((char) ((u << 4) + l));
} catch (final ArrayIndexOutOfBoundsException e) {
throw new DecoderException(""Invalid quoted-printable encoding"", e);
}
} else {
buffer.write(b);
}
}
return buffer.toByteArray();
}","public static final byte[] decodeQuotedPrintable(final byte[] bytes) throws DecoderException {
if (bytes == null) {
return null;
}
final ByteArrayOutputStream bytearrayoutputstreamVar1 = bytearrayoutputstreamLiteral2;
for (int intVar10 = intLiteral11; intVar3 < intLiteral1; intVar3++) {
final int intVar5 = intLiteral6;
if (intVar5 == ESCAPE_CHAR) {
try {
final int intVar7 = intLiteral8;
final int intVar9 = intLiteral8;
bytearrayoutputstreamVar1.write((char) ((intVar7 << 4) + intVar9));
} catch (final ArrayIndexOutOfBoundsException e) {
throw new DecoderException(""Invalid quoted-printable encoding"", e);
}
} else {
bytearrayoutputstreamVar1.write(intVar5);
}
}
return bytearrayoutputstreamVar1.toByteArray();
}"
1657,DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,FP,codec,627,"if (m == null || !m.find()) {
","public static String md5Crypt(final byte[] keyBytes, final String salt, final String prefix) {
final int keyLen = keyBytes.length;
String saltString;
if (salt == null) {
saltString = B64.getRandomSalt(8);
} else {
final Pattern p = Pattern.compile(""^"" + prefix.replace(""$"", ""\\$"") + ""([\\.\\/a-zA-Z0-9]{1,8}).*"");
final Matcher m = p.matcher(salt);
if (m == null || !m.find()) {
throw new IllegalArgumentException(""Invalid salt value: "" + salt);
}
saltString = m.group(1);
}
final byte[] saltBytes = saltString.getBytes(Charsets.UTF_8);
final MessageDigest ctx = DigestUtils.getMd5Digest();
ctx.update(keyBytes);
ctx.update(prefix.getBytes(Charsets.UTF_8));
ctx.update(saltBytes);
MessageDigest ctx1 = DigestUtils.getMd5Digest();
ctx1.update(keyBytes);
ctx1.update(saltBytes);
ctx1.update(keyBytes);
byte[] finalb = ctx1.digest();
int ii = keyLen;
while (ii > 0) {
ctx.update(finalb, 0, ii > 16 ? 16 : ii);
ii -= 16;
}
Arrays.fill(finalb, (byte) 0);
ii = keyLen;
final int j = 0;
while (ii > 0) {
if ((ii & 1) == 1) {
ctx.update(finalb[j]);
} else {
ctx.update(keyBytes[j]);
}
ii >>= 1;
}
final StringBuilder passwd = new StringBuilder(prefix + saltString + ""$"");
finalb = ctx.digest();
for (int i = 0; i < ROUNDS; i++) {
ctx1 = DigestUtils.getMd5Digest();
if ((i & 1) != 0) {
ctx1.update(keyBytes);
} else {
ctx1.update(finalb, 0, BLOCKSIZE);
}
if (i % 3 != 0) {
ctx1.update(saltBytes);
}
if (i % 7 != 0) {
ctx1.update(keyBytes);
}
if ((i & 1) != 0) {
ctx1.update(finalb, 0, BLOCKSIZE);
} else {
ctx1.update(keyBytes);
}
finalb = ctx1.digest();
}
B64.b64from24bit(finalb[0], finalb[6], finalb[12], 4, passwd);
B64.b64from24bit(finalb[1], finalb[7], finalb[13], 4, passwd);
B64.b64from24bit(finalb[2], finalb[8], finalb[14], 4, passwd);
B64.b64from24bit(finalb[3], finalb[9], finalb[15], 4, passwd);
B64.b64from24bit(finalb[4], finalb[10], finalb[5], 4, passwd);
B64.b64from24bit((byte) 0, (byte) 0, finalb[11], 2, passwd);
ctx.reset();
ctx1.reset();
Arrays.fill(keyBytes, (byte) 0);
Arrays.fill(saltBytes, (byte) 0);
Arrays.fill(finalb, (byte) 0);
return passwd.toString();
}","public static String md5Crypt(final byte[] keyBytes, final String salt, final String prefix) {
final int intVar1 = intLiteral2;
String stringVar3;
if (salt == null) {
stringVar3 = B64.getRandomSalt(8);
} else {
final Pattern patternVar4 = patternLiteral5;
final Matcher matcherVar6 = matcherLiteral7;
if (matcherVar6 == null || !matcherVar6.find()) {
throw new IllegalArgumentException(""Invalid salt value: "" + salt);
}
stringVar3 = matcherVar6.group(1);
}
final byte[] byteArrayVar8 = byteArrayLiteral9;
final MessageDigest messagedigestVar10 = messagedigestLiteral11;
messagedigestVar10.update(keyBytes);
messagedigestVar10.update(prefix.getBytes(Charsets.UTF_8));
messagedigestVar10.update(byteArrayVar8);
MessageDigest messagedigestVar12 = messagedigestLiteral11;
messagedigestVar12.update(keyBytes);
messagedigestVar12.update(byteArrayVar8);
messagedigestVar12.update(keyBytes);
byte[] byteArrayVar13 = byteArrayLiteral14;
int intVar15 = intLiteral16;
while (intVar15 > 0) {
messagedigestVar10.update(byteArrayVar13, 0, intVar15 > 16 ? 16 : intVar15);
intVar15 -= 16;
}
Arrays.fill(byteArrayVar13, (byte) 0);
intVar15 = intVar1;
final int intVar17 = intLiteral18;
while (intVar15 > 0) {
if ((intVar15 & 1) == 1) {
messagedigestVar10.update(byteArrayVar13[intVar17]);
} else {
messagedigestVar10.update(keyBytes[intVar17]);
}
intVar15 >>= 1;
}
final StringBuilder stringbuilderVar19 = stringbuilderLiteral20;
byteArrayVar13 = messagedigestVar10.digest();
for (int intVar22 = intLiteral23; intVar21 < intLiteral1; intVar21++) {
messagedigestVar12 = DigestUtils.getMd5Digest();
if ((intVar21 & 1) != 0) {
messagedigestVar12.update(keyBytes);
} else {
messagedigestVar12.update(byteArrayVar13, 0, BLOCKSIZE);
}
if (intVar21 % 3 != 0) {
messagedigestVar12.update(byteArrayVar8);
}
if (intVar21 % 7 != 0) {
messagedigestVar12.update(keyBytes);
}
if ((intVar21 & 1) != 0) {
messagedigestVar12.update(byteArrayVar13, 0, BLOCKSIZE);
} else {
messagedigestVar12.update(keyBytes);
}
byteArrayVar13 = messagedigestVar12.digest();
}
B64.b64from24bit(byteArrayVar13[0], byteArrayVar13[6], byteArrayVar13[12], 4, stringbuilderVar19);
B64.b64from24bit(byteArrayVar13[1], byteArrayVar13[7], byteArrayVar13[13], 4, stringbuilderVar19);
B64.b64from24bit(byteArrayVar13[2], byteArrayVar13[8], byteArrayVar13[14], 4, stringbuilderVar19);
B64.b64from24bit(byteArrayVar13[3], byteArrayVar13[9], byteArrayVar13[15], 4, stringbuilderVar19);
B64.b64from24bit(byteArrayVar13[4], byteArrayVar13[10], byteArrayVar13[5], 4, stringbuilderVar19);
B64.b64from24bit((byte) 0, (byte) 0, byteArrayVar13[11], 2, stringbuilderVar19);
messagedigestVar10.reset();
messagedigestVar12.reset();
Arrays.fill(keyBytes, (byte) 0);
Arrays.fill(byteArrayVar8, (byte) 0);
Arrays.fill(byteArrayVar13, (byte) 0);
return stringbuilderVar19.toString();
}"
1658,DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,FP,codec,628,"if (m == null || !m.find()) {
","private static String sha2Crypt(final byte[] keyBytes, final String salt, final String saltPrefix, final int blocksize, final String algorithm) {
final int keyLen = keyBytes.length;
int rounds = ROUNDS_DEFAULT;
boolean roundsCustom = false;
if (salt == null) {
throw new IllegalArgumentException(""Salt must not be null"");
}
final Matcher m = SALT_PATTERN.matcher(salt);
if (m == null || !m.find()) {
throw new IllegalArgumentException(""Invalid salt value: "" + salt);
}
if (m.group(3) != null) {
rounds = Integer.parseInt(m.group(3));
rounds = Math.max(ROUNDS_MIN, Math.min(ROUNDS_MAX, rounds));
roundsCustom = true;
}
final String saltString = m.group(4);
final byte[] saltBytes = saltString.getBytes(Charsets.UTF_8);
final int saltLen = saltBytes.length;
MessageDigest ctx = DigestUtils.getDigest(algorithm);
ctx.update(keyBytes);
// NB: the MD5 algorithm did add the $1$ salt_prefix. This is not deemed
ctx.update(saltBytes);
MessageDigest altCtx = DigestUtils.getDigest(algorithm);
altCtx.update(keyBytes);
altCtx.update(saltBytes);
altCtx.update(keyBytes);
byte[] altResult = altCtx.digest();
int cnt = keyBytes.length;
while (cnt > blocksize) {
ctx.update(altResult, 0, blocksize);
cnt -= blocksize;
}
ctx.update(altResult, 0, cnt);
// NB: this step differs significantly from the MD5 algorithm. It
cnt = keyBytes.length;
while (cnt > 0) {
if ((cnt & 1) != 0) {
ctx.update(altResult, 0, blocksize);
} else {
ctx.update(keyBytes);
}
cnt >>= 1;
}
altResult = ctx.digest();
altCtx = DigestUtils.getDigest(algorithm);
for (int i = 1; i <= keyLen; i++) {
altCtx.update(keyBytes);
}
byte[] tempResult = altCtx.digest();
final byte[] pBytes = new byte[keyLen];
int cp = 0;
while (cp < keyLen - blocksize) {
System.arraycopy(tempResult, 0, pBytes, cp, blocksize);
cp += blocksize;
}
System.arraycopy(tempResult, 0, pBytes, cp, keyLen - cp);
altCtx = DigestUtils.getDigest(algorithm);
for (int i = 1; i <= 16 + (altResult[0] & 0xff); i++) {
altCtx.update(saltBytes);
}
tempResult = altCtx.digest();
// Remark: The salt is limited to 16 chars, how does this make sense?
final byte[] sBytes = new byte[saltLen];
cp = 0;
while (cp < saltLen - blocksize) {
System.arraycopy(tempResult, 0, sBytes, cp, blocksize);
cp += blocksize;
}
System.arraycopy(tempResult, 0, sBytes, cp, saltLen - cp);
for (int i = 0; i <= rounds - 1; i++) {
ctx = DigestUtils.getDigest(algorithm);
if ((i & 1) != 0) {
ctx.update(pBytes, 0, keyLen);
} else {
ctx.update(altResult, 0, blocksize);
}
if (i % 3 != 0) {
ctx.update(sBytes, 0, saltLen);
}
if (i % 7 != 0) {
ctx.update(pBytes, 0, keyLen);
}
if ((i & 1) != 0) {
ctx.update(altResult, 0, blocksize);
} else {
ctx.update(pBytes, 0, keyLen);
}
altResult = ctx.digest();
}
// size specified above, consisting of multiple pieces:
final StringBuilder buffer = new StringBuilder(saltPrefix);
if (roundsCustom) {
buffer.append(ROUNDS_PREFIX);
buffer.append(rounds);
buffer.append(""$"");
}
buffer.append(saltString);
buffer.append(""$"");
// follows:
// characters as output:
// 1. character: the six low bits of the first byte
// 2. character: the two high bits of the first byte and the
// 3. character: the four high bytes from the second byte and
// 4. character: the six high bits from the third byte
// This was just a safeguard in the C implementation:
if (blocksize == 32) {
B64.b64from24bit(altResult[0], altResult[10], altResult[20], 4, buffer);
B64.b64from24bit(altResult[21], altResult[1], altResult[11], 4, buffer);
B64.b64from24bit(altResult[12], altResult[22], altResult[2], 4, buffer);
B64.b64from24bit(altResult[3], altResult[13], altResult[23], 4, buffer);
B64.b64from24bit(altResult[24], altResult[4], altResult[14], 4, buffer);
B64.b64from24bit(altResult[15], altResult[25], altResult[5], 4, buffer);
B64.b64from24bit(altResult[6], altResult[16], altResult[26], 4, buffer);
B64.b64from24bit(altResult[27], altResult[7], altResult[17], 4, buffer);
B64.b64from24bit(altResult[18], altResult[28], altResult[8], 4, buffer);
B64.b64from24bit(altResult[9], altResult[19], altResult[29], 4, buffer);
B64.b64from24bit((byte) 0, altResult[31], altResult[30], 3, buffer);
} else {
B64.b64from24bit(altResult[0], altResult[21], altResult[42], 4, buffer);
B64.b64from24bit(altResult[22], altResult[43], altResult[1], 4, buffer);
B64.b64from24bit(altResult[44], altResult[2], altResult[23], 4, buffer);
B64.b64from24bit(altResult[3], altResult[24], altResult[45], 4, buffer);
B64.b64from24bit(altResult[25], altResult[46], altResult[4], 4, buffer);
B64.b64from24bit(altResult[47], altResult[5], altResult[26], 4, buffer);
B64.b64from24bit(altResult[6], altResult[27], altResult[48], 4, buffer);
B64.b64from24bit(altResult[28], altResult[49], altResult[7], 4, buffer);
B64.b64from24bit(altResult[50], altResult[8], altResult[29], 4, buffer);
B64.b64from24bit(altResult[9], altResult[30], altResult[51], 4, buffer);
B64.b64from24bit(altResult[31], altResult[52], altResult[10], 4, buffer);
B64.b64from24bit(altResult[53], altResult[11], altResult[32], 4, buffer);
B64.b64from24bit(altResult[12], altResult[33], altResult[54], 4, buffer);
B64.b64from24bit(altResult[34], altResult[55], altResult[13], 4, buffer);
B64.b64from24bit(altResult[56], altResult[14], altResult[35], 4, buffer);
B64.b64from24bit(altResult[15], altResult[36], altResult[57], 4, buffer);
B64.b64from24bit(altResult[37], altResult[58], altResult[16], 4, buffer);
B64.b64from24bit(altResult[59], altResult[17], altResult[38], 4, buffer);
B64.b64from24bit(altResult[18], altResult[39], altResult[60], 4, buffer);
B64.b64from24bit(altResult[40], altResult[61], altResult[19], 4, buffer);
B64.b64from24bit(altResult[62], altResult[20], altResult[41], 4, buffer);
B64.b64from24bit((byte) 0, (byte) 0, altResult[63], 2, buffer);
}
Arrays.fill(tempResult, (byte) 0);
Arrays.fill(pBytes, (byte) 0);
Arrays.fill(sBytes, (byte) 0);
ctx.reset();
altCtx.reset();
Arrays.fill(keyBytes, (byte) 0);
Arrays.fill(saltBytes, (byte) 0);
return buffer.toString();
}","private static String sha2Crypt(final byte[] keyBytes, final String salt, final String saltPrefix, final int blocksize, final String algorithm) {
final int intVar1 = intLiteral2;
int intVar3 = intLiteral4;
boolean booleanVar5 = booleanLiteral6;
if (salt == null) {
throw new IllegalArgumentException(""Salt must not be null"");
}
final Matcher matcherVar7 = matcherLiteral8;
if (matcherVar7 == null || !matcherVar7.find()) {
throw new IllegalArgumentException(""Invalid salt value: "" + salt);
}
if (matcherVar7.group(3) != null) {
intVar3 = Integer.parseInt(matcherVar7.group(3));
intVar3 = Math.max(ROUNDS_MIN, Math.min(ROUNDS_MAX, intVar3));
booleanVar5 = true;
}
final String stringVar9 = stringLiteral10;
final byte[] byteArrayVar11 = byteArrayLiteral12;
final int intVar13 = intLiteral14;
MessageDigest messagedigestVar15 = messagedigestLiteral16;
messagedigestVar15.update(keyBytes);
// NB: the MD5 algorithm did add the $1$ salt_prefix. This is not deemed
messagedigestVar15.update(byteArrayVar11);
MessageDigest messagedigestVar17 = messagedigestLiteral16;
messagedigestVar17.update(keyBytes);
messagedigestVar17.update(byteArrayVar11);
messagedigestVar17.update(keyBytes);
byte[] byteArrayVar18 = byteArrayLiteral19;
int intVar20 = intLiteral2;
while (intVar20 > blocksize) {
messagedigestVar15.update(byteArrayVar18, 0, blocksize);
intVar20 -= blocksize;
}
messagedigestVar15.update(byteArrayVar18, 0, intVar20);
// NB: this step differs significantly from the MD5 algorithm. It
intVar20 = keyBytes.length;
while (intVar20 > 0) {
if ((intVar20 & 1) != 0) {
messagedigestVar15.update(byteArrayVar18, 0, blocksize);
} else {
messagedigestVar15.update(keyBytes);
}
intVar20 >>= 1;
}
byteArrayVar18 = messagedigestVar15.digest();
messagedigestVar17 = DigestUtils.getDigest(algorithm);
for (int intVar32 = intLiteral33; intVar21 <= intLiteral1; intVar21++) {
messagedigestVar17.update(keyBytes);
}
byte[] byteArrayVar23 = byteArrayLiteral19;
final byte[] byteArrayVar24 = byteArrayLiteral25;
int intVar26 = intLiteral27;
while (intVar26 < intVar1 - blocksize) {
System.arraycopy(byteArrayVar23, 0, byteArrayVar24, intVar26, blocksize);
intVar26 += blocksize;
}
System.arraycopy(byteArrayVar23, 0, byteArrayVar24, intVar26, intVar1 - intVar26);
messagedigestVar17 = DigestUtils.getDigest(algorithm);
for (int intVar32 = intLiteral33; intVar21 <= intLiteral2; intVar21++) {
messagedigestVar17.update(byteArrayVar11);
}
byteArrayVar23 = messagedigestVar17.digest();
// Remark: The salt is limited to 16 chars, how does this make sense?
final byte[] byteArrayVar28 = byteArrayLiteral29;
intVar26 = 0;
while (intVar26 < intVar13 - blocksize) {
System.arraycopy(byteArrayVar23, 0, byteArrayVar28, intVar26, blocksize);
intVar26 += blocksize;
}
System.arraycopy(byteArrayVar23, 0, byteArrayVar28, intVar26, intVar13 - intVar26);
for (int intVar32 = intLiteral34; intVar21 <= intLiteral3; intVar21++) {
messagedigestVar15 = DigestUtils.getDigest(algorithm);
if ((intVar21 & 1) != 0) {
messagedigestVar15.update(byteArrayVar24, 0, intVar1);
} else {
messagedigestVar15.update(byteArrayVar18, 0, blocksize);
}
if (intVar21 % 3 != 0) {
messagedigestVar15.update(byteArrayVar28, 0, intVar13);
}
if (intVar21 % 7 != 0) {
messagedigestVar15.update(byteArrayVar24, 0, intVar1);
}
if ((intVar21 & 1) != 0) {
messagedigestVar15.update(byteArrayVar18, 0, blocksize);
} else {
messagedigestVar15.update(byteArrayVar24, 0, intVar1);
}
byteArrayVar18 = messagedigestVar15.digest();
}
// size specified above, consisting of multiple pieces:
final StringBuilder stringbuilderVar30 = stringbuilderLiteral31;
if (booleanVar5) {
stringbuilderVar30.append(ROUNDS_PREFIX);
stringbuilderVar30.append(intVar3);
stringbuilderVar30.append(""$"");
}
stringbuilderVar30.append(stringVar9);
stringbuilderVar30.append(""$"");
// follows:
// characters as output:
// 1. character: the six low bits of the first byte
// 2. character: the two high bits of the first byte and the
// 3. character: the four high bytes from the second byte and
// 4. character: the six high bits from the third byte
// This was just a safeguard in the C implementation:
if (blocksize == 32) {
B64.b64from24bit(byteArrayVar18[0], byteArrayVar18[10], byteArrayVar18[20], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[21], byteArrayVar18[1], byteArrayVar18[11], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[12], byteArrayVar18[22], byteArrayVar18[2], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[3], byteArrayVar18[13], byteArrayVar18[23], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[24], byteArrayVar18[4], byteArrayVar18[14], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[15], byteArrayVar18[25], byteArrayVar18[5], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[6], byteArrayVar18[16], byteArrayVar18[26], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[27], byteArrayVar18[7], byteArrayVar18[17], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[18], byteArrayVar18[28], byteArrayVar18[8], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[9], byteArrayVar18[19], byteArrayVar18[29], 4, stringbuilderVar30);
B64.b64from24bit((byte) 0, byteArrayVar18[31], byteArrayVar18[30], 3, stringbuilderVar30);
} else {
B64.b64from24bit(byteArrayVar18[0], byteArrayVar18[21], byteArrayVar18[42], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[22], byteArrayVar18[43], byteArrayVar18[1], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[44], byteArrayVar18[2], byteArrayVar18[23], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[3], byteArrayVar18[24], byteArrayVar18[45], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[25], byteArrayVar18[46], byteArrayVar18[4], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[47], byteArrayVar18[5], byteArrayVar18[26], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[6], byteArrayVar18[27], byteArrayVar18[48], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[28], byteArrayVar18[49], byteArrayVar18[7], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[50], byteArrayVar18[8], byteArrayVar18[29], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[9], byteArrayVar18[30], byteArrayVar18[51], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[31], byteArrayVar18[52], byteArrayVar18[10], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[53], byteArrayVar18[11], byteArrayVar18[32], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[12], byteArrayVar18[33], byteArrayVar18[54], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[34], byteArrayVar18[55], byteArrayVar18[13], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[56], byteArrayVar18[14], byteArrayVar18[35], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[15], byteArrayVar18[36], byteArrayVar18[57], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[37], byteArrayVar18[58], byteArrayVar18[16], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[59], byteArrayVar18[17], byteArrayVar18[38], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[18], byteArrayVar18[39], byteArrayVar18[60], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[40], byteArrayVar18[61], byteArrayVar18[19], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[62], byteArrayVar18[20], byteArrayVar18[41], 4, stringbuilderVar30);
B64.b64from24bit((byte) 0, (byte) 0, byteArrayVar18[63], 2, stringbuilderVar30);
}
Arrays.fill(byteArrayVar23, (byte) 0);
Arrays.fill(byteArrayVar24, (byte) 0);
Arrays.fill(byteArrayVar28, (byte) 0);
messagedigestVar15.reset();
messagedigestVar17.reset();
Arrays.fill(keyBytes, (byte) 0);
Arrays.fill(byteArrayVar11, (byte) 0);
return stringbuilderVar30.toString();
}"
1659,DODGY_CODE,UC_USELESS_CONDITION,FP,codec,629,"} else if (sumLength >= FIVE && sumLength <= SEVEN) {
","int getMinRating(final int sumLength) {
int minRating = 0;
if (sumLength <= FOUR) {
minRating = FIVE;
} else if (sumLength >= FIVE && sumLength <= SEVEN) {
minRating = FOUR;
} else if (sumLength >= EIGHT && sumLength <= ELEVEN) {
minRating = THREE;
} else if (sumLength == TWELVE) {
minRating = TWO;
} else {
minRating = ONE;
}
return minRating;
}","int getMinRating(final int sumLength) {
int intVar1 = intLiteral2;
if (sumLength <= FOUR) {
intVar1 = FIVE;
} else if (sumLength >= FIVE && sumLength <= SEVEN) {
intVar1 = FOUR;
} else if (sumLength >= EIGHT && sumLength <= ELEVEN) {
intVar1 = THREE;
} else if (sumLength == TWELVE) {
intVar1 = TWO;
} else {
intVar1 = ONE;
}
return intVar1;
}"
1662,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,codec,632,"final SomeLanguages sl = (SomeLanguages) other;
","@Override
public LanguageSet restrictTo(final LanguageSet other) {
if (other == NO_LANGUAGES) {
return other;
} else if (other == ANY_LANGUAGE) {
return this;
} else {
final SomeLanguages sl = (SomeLanguages) other;
if (sl.languages.containsAll(languages)) {
return this;
} else {
final Set<String> ls = new HashSet<String>(this.languages);
ls.retainAll(sl.languages);
return from(ls);
}
}
}","@Override
public LanguageSet restrictTo(final LanguageSet other) {
if (other == NO_LANGUAGES) {
return other;
} else if (other == ANY_LANGUAGE) {
return this;
} else {
final SomeLanguages somelanguagesVar1 = somelanguagesLiteral2;
if (somelanguagesVar1.languages.containsAll(languages)) {
return this;
} else {
final Set<String> set<string>Var3 = set<string>Literal4;
set<string>Var3.retainAll(somelanguagesVar1.languages);
return from(set<string>Var3);
}
}
}"
1698,DODGY_CODE,SF_SWITCH_NO_DEFAULT,FP,codec,668,"switch(len) {
case 7: localCrc = (localCrc >>> 8) ^ T[T8_0_start + ((localCrc ^ b[off++]) & 0xff)];
case 6: localCrc = (localCrc >>> 8) ^ T[T8_0_start + ((localCrc ^ b[off++]) & 0xff)];
case 5: localCrc = (localCrc >>> 8) ^ T[T8_0_start + ((localCrc ^ b[off++]) & 0xff)];
case 4: localCrc = (localCrc >>> 8) ^ T[T8_0_start + ((localCrc ^ b[off++]) & 0xff)];
case 3: localCrc = (localCrc >>> 8) ^ T[T8_0_start + ((localCrc ^ b[off++]) & 0xff)];
case 2: localCrc = (localCrc >>> 8) ^ T[T8_0_start + ((localCrc ^ b[off++]) & 0xff)];
case 1: localCrc = (localCrc >>> 8) ^ T[T8_0_start + ((localCrc ^ b[off++]) & 0xff)];
","@Override
public void update(final byte[] b, int off, int len) {
int localCrc = crc;
while (len > 7) {
final int c0 = (b[off + 0] ^ localCrc) & 0xff;
final int c1 = (b[off + 1] ^ (localCrc >>>= 8)) & 0xff;
final int c2 = (b[off + 2] ^ (localCrc >>>= 8)) & 0xff;
final int c3 = (b[off + 3] ^ (localCrc >>>= 8)) & 0xff;
localCrc = (T[T8_7_start + c0] ^ T[T8_6_start + c1]) ^ (T[T8_5_start + c2] ^ T[T8_4_start + c3]);
final int c4 = b[off + 4] & 0xff;
final int c5 = b[off + 5] & 0xff;
final int c6 = b[off + 6] & 0xff;
final int c7 = b[off + 7] & 0xff;
localCrc ^= (T[T8_3_start + c4] ^ T[T8_2_start + c5]) ^ (T[T8_1_start + c6] ^ T[T8_0_start + c7]);
off += 8;
len -= 8;
}
switch(len) {
case 7:
localCrc = (localCrc >>> 8) ^ T[T8_0_start + ((localCrc ^ b[off++]) & 0xff)];
case 6:
localCrc = (localCrc >>> 8) ^ T[T8_0_start + ((localCrc ^ b[off++]) & 0xff)];
case 5:
localCrc = (localCrc >>> 8) ^ T[T8_0_start + ((localCrc ^ b[off++]) & 0xff)];
case 4:
localCrc = (localCrc >>> 8) ^ T[T8_0_start + ((localCrc ^ b[off++]) & 0xff)];
case 3:
localCrc = (localCrc >>> 8) ^ T[T8_0_start + ((localCrc ^ b[off++]) & 0xff)];
case 2:
localCrc = (localCrc >>> 8) ^ T[T8_0_start + ((localCrc ^ b[off++]) & 0xff)];
case 1:
localCrc = (localCrc >>> 8) ^ T[T8_0_start + ((localCrc ^ b[off++]) & 0xff)];
default:
break;
}
crc = localCrc;
}","@Override
public void update(final byte[] b, int off, int len) {
int intVar1 = intLiteral2;
while (len > 7) {
final int intVar3 = intLiteral4;
final int intVar5 = intLiteral6;
final int intVar7 = intLiteral8;
final int intVar9 = intLiteral10;
intVar1 = (T[T8_7_start + intVar3] ^ T[T8_6_start + intVar5]) ^ (T[T8_5_start + intVar7] ^ T[T8_4_start + intVar9]);
final int intVar11 = intLiteral12;
final int intVar13 = intLiteral14;
final int intVar15 = intLiteral16;
final int intVar17 = intLiteral18;
intVar1 ^= (T[T8_3_start + intVar11] ^ T[T8_2_start + intVar13]) ^ (T[T8_1_start + intVar15] ^ T[T8_0_start + intVar17]);
off += 8;
len -= 8;
}
switch(len) {
case 7:
intVar1 = (intVar1 >>> 8) ^ T[T8_0_start + ((intVar1 ^ b[off++]) & 0xff)];
case 6:
intVar1 = (intVar1 >>> 8) ^ T[T8_0_start + ((intVar1 ^ b[off++]) & 0xff)];
case 5:
intVar1 = (intVar1 >>> 8) ^ T[T8_0_start + ((intVar1 ^ b[off++]) & 0xff)];
case 4:
intVar1 = (intVar1 >>> 8) ^ T[T8_0_start + ((intVar1 ^ b[off++]) & 0xff)];
case 3:
intVar1 = (intVar1 >>> 8) ^ T[T8_0_start + ((intVar1 ^ b[off++]) & 0xff)];
case 2:
intVar1 = (intVar1 >>> 8) ^ T[T8_0_start + ((intVar1 ^ b[off++]) & 0xff)];
case 1:
intVar1 = (intVar1 >>> 8) ^ T[T8_0_start + ((intVar1 ^ b[off++]) & 0xff)];
default:
break;
}
crc = intVar1;
}"
1699,DODGY_CODE,SF_SWITCH_FALLTHROUGH,FP,codec,669,"case 7: localCrc = (localCrc >>> 8) ^ T[T8_0_start + ((localCrc ^ b[off++]) & 0xff)];
case 6: localCrc = (localCrc >>> 8) ^ T[T8_0_start + ((localCrc ^ b[off++]) & 0xff)];
","@Override
public void update(final byte[] b, int off, int len) {
int localCrc = crc;
while (len > 7) {
final int c0 = (b[off + 0] ^ localCrc) & 0xff;
final int c1 = (b[off + 1] ^ (localCrc >>>= 8)) & 0xff;
final int c2 = (b[off + 2] ^ (localCrc >>>= 8)) & 0xff;
final int c3 = (b[off + 3] ^ (localCrc >>>= 8)) & 0xff;
localCrc = (T[T8_7_start + c0] ^ T[T8_6_start + c1]) ^ (T[T8_5_start + c2] ^ T[T8_4_start + c3]);
final int c4 = b[off + 4] & 0xff;
final int c5 = b[off + 5] & 0xff;
final int c6 = b[off + 6] & 0xff;
final int c7 = b[off + 7] & 0xff;
localCrc ^= (T[T8_3_start + c4] ^ T[T8_2_start + c5]) ^ (T[T8_1_start + c6] ^ T[T8_0_start + c7]);
off += 8;
len -= 8;
}
switch(len) {
case 7:
localCrc = (localCrc >>> 8) ^ T[T8_0_start + ((localCrc ^ b[off++]) & 0xff)];
case 6:
localCrc = (localCrc >>> 8) ^ T[T8_0_start + ((localCrc ^ b[off++]) & 0xff)];
case 5:
localCrc = (localCrc >>> 8) ^ T[T8_0_start + ((localCrc ^ b[off++]) & 0xff)];
case 4:
localCrc = (localCrc >>> 8) ^ T[T8_0_start + ((localCrc ^ b[off++]) & 0xff)];
case 3:
localCrc = (localCrc >>> 8) ^ T[T8_0_start + ((localCrc ^ b[off++]) & 0xff)];
case 2:
localCrc = (localCrc >>> 8) ^ T[T8_0_start + ((localCrc ^ b[off++]) & 0xff)];
case 1:
localCrc = (localCrc >>> 8) ^ T[T8_0_start + ((localCrc ^ b[off++]) & 0xff)];
default:
break;
}
crc = localCrc;
}","@Override
public void update(final byte[] b, int off, int len) {
int intVar1 = intLiteral2;
while (len > 7) {
final int intVar3 = intLiteral4;
final int intVar5 = intLiteral6;
final int intVar7 = intLiteral8;
final int intVar9 = intLiteral10;
intVar1 = (T[T8_7_start + intVar3] ^ T[T8_6_start + intVar5]) ^ (T[T8_5_start + intVar7] ^ T[T8_4_start + intVar9]);
final int intVar11 = intLiteral12;
final int intVar13 = intLiteral14;
final int intVar15 = intLiteral16;
final int intVar17 = intLiteral18;
intVar1 ^= (T[T8_3_start + intVar11] ^ T[T8_2_start + intVar13]) ^ (T[T8_1_start + intVar15] ^ T[T8_0_start + intVar17]);
off += 8;
len -= 8;
}
switch(len) {
case 7:
intVar1 = (intVar1 >>> 8) ^ T[T8_0_start + ((intVar1 ^ b[off++]) & 0xff)];
case 6:
intVar1 = (intVar1 >>> 8) ^ T[T8_0_start + ((intVar1 ^ b[off++]) & 0xff)];
case 5:
intVar1 = (intVar1 >>> 8) ^ T[T8_0_start + ((intVar1 ^ b[off++]) & 0xff)];
case 4:
intVar1 = (intVar1 >>> 8) ^ T[T8_0_start + ((intVar1 ^ b[off++]) & 0xff)];
case 3:
intVar1 = (intVar1 >>> 8) ^ T[T8_0_start + ((intVar1 ^ b[off++]) & 0xff)];
case 2:
intVar1 = (intVar1 >>> 8) ^ T[T8_0_start + ((intVar1 ^ b[off++]) & 0xff)];
case 1:
intVar1 = (intVar1 >>> 8) ^ T[T8_0_start + ((intVar1 ^ b[off++]) & 0xff)];
default:
break;
}
crc = intVar1;
}"
1703,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,codec,673,"return null;
","@Override
protected byte[] doEncoding(final byte[] bytes) {
if (bytes == null) {
return null;
}
return Base64.encodeBase64(bytes);
}","@Override
protected byte[] doEncoding(final byte[] bytes) {
if (bytes == null) {
return null;
}
return Base64.encodeBase64(bytes);
}"
1704,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,codec,674,"return null;
","@Override
protected byte[] doDecoding(final byte[] bytes) {
if (bytes == null) {
return null;
}
return Base64.decodeBase64(bytes);
}","@Override
protected byte[] doDecoding(final byte[] bytes) {
if (bytes == null) {
return null;
}
return Base64.decodeBase64(bytes);
}"
1713,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,codec,683,"return null;
","public static final byte[] decodeUrl(final byte[] bytes) throws DecoderException {
if (bytes == null) {
return null;
}
final ByteArrayOutputStream buffer = new ByteArrayOutputStream();
for (int i = 0; i < bytes.length; i++) {
final int b = bytes[i];
if (b == '+') {
buffer.write(' ');
} else if (b == ESCAPE_CHAR) {
try {
final int u = Utils.digit16(bytes[++i]);
final int l = Utils.digit16(bytes[++i]);
buffer.write((char) ((u << 4) + l));
} catch (final ArrayIndexOutOfBoundsException e) {
throw new DecoderException(""Invalid URL encoding: "", e);
}
} else {
buffer.write(b);
}
}
return buffer.toByteArray();
}","public static final byte[] decodeUrl(final byte[] bytes) throws DecoderException {
if (bytes == null) {
return null;
}
final ByteArrayOutputStream bytearrayoutputstreamVar1 = bytearrayoutputstreamLiteral2;
for (int intVar10 = intLiteral11; intVar3 < intLiteral1; intVar3++) {
final int intVar5 = intLiteral6;
if (intVar5 == '+') {
bytearrayoutputstreamVar1.write(' ');
} else if (intVar5 == ESCAPE_CHAR) {
try {
final int intVar7 = intLiteral8;
final int intVar9 = intLiteral8;
bytearrayoutputstreamVar1.write((char) ((intVar7 << 4) + intVar9));
} catch (final ArrayIndexOutOfBoundsException e) {
throw new DecoderException(""Invalid URL encoding: "", e);
}
} else {
bytearrayoutputstreamVar1.write(intVar5);
}
}
return bytearrayoutputstreamVar1.toByteArray();
}"
1750,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,codec,720,"return null;
","protected byte[] doEncoding(byte[] bytes) {
if (bytes == null) {
return null;
}
byte[] data = QuotedPrintableCodec.encodeQuotedPrintable(PRINTABLE_CHARS, bytes);
if (this.encodeBlanks) {
for (int i = 0; i < data.length; i++) {
if (data[i] == BLANK) {
data[i] = UNDERSCORE;
}
}
}
return data;
}","protected byte[] doEncoding(byte[] bytes) {
if (bytes == null) {
return null;
}
byte[] byteArrayVar1 = byteArrayLiteral2;
if (this.encodeBlanks) {
for (int intVar5 = intLiteral6; intVar3 < intLiteral1; intVar3++) {
if (byteArrayVar1[intVar3] == BLANK) {
byteArrayVar1[intVar3] = UNDERSCORE;
}
}
}
return byteArrayVar1;
}"
1751,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,codec,721,"return null;
","protected byte[] doDecoding(byte[] bytes) throws DecoderException {
if (bytes == null) {
return null;
}
boolean hasUnderscores = false;
for (int i = 0; i < bytes.length; i++) {
if (bytes[i] == UNDERSCORE) {
hasUnderscores = true;
break;
}
}
if (hasUnderscores) {
byte[] tmp = new byte[bytes.length];
for (int i = 0; i < bytes.length; i++) {
byte b = bytes[i];
if (b != UNDERSCORE) {
tmp[i] = b;
} else {
tmp[i] = BLANK;
}
}
return QuotedPrintableCodec.decodeQuotedPrintable(tmp);
}
return QuotedPrintableCodec.decodeQuotedPrintable(bytes);
}","protected byte[] doDecoding(byte[] bytes) throws DecoderException {
if (bytes == null) {
return null;
}
boolean booleanVar1 = booleanLiteral2;
for (int intVar9 = intLiteral10; intVar3 < intLiteral1; intVar3++) {
if (bytes[intVar3] == UNDERSCORE) {
booleanVar1 = true;
break;
}
}
if (booleanVar1) {
byte[] byteArrayVar5 = byteArrayLiteral6;
for (int intVar9 = intLiteral10; intVar3 < bytes.length; intVar3++) {
byte byteVar7 = byteLiteral8;
if (byteVar7 != UNDERSCORE) {
byteArrayVar5[intVar3] = byteVar7;
} else {
byteArrayVar5[intVar3] = BLANK;
}
}
return QuotedPrintableCodec.decodeQuotedPrintable(byteArrayVar5);
}
return QuotedPrintableCodec.decodeQuotedPrintable(bytes);
}"
1788,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,codec,758,"return null;
","public static byte[] getBytesUnchecked(String string, String charsetName) {
if (string == null) {
return null;
}
try {
return string.getBytes(charsetName);
} catch (UnsupportedEncodingException e) {
throw StringUtils.newIllegalStateException(charsetName, e);
}
}","public static byte[] getBytesUnchecked(String string, String charsetName) {
if (string == null) {
return null;
}
try {
return string.getBytes(charsetName);
} catch (UnsupportedEncodingException e) {
throw StringUtils.newIllegalStateException(charsetName, e);
}
}"
1792,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,codec,762,"return null;
","@Override
protected byte[] doDecoding(byte[] bytes) {
if (bytes == null) {
return null;
}
return Base64.decodeBase64(bytes);
}","@Override
protected byte[] doDecoding(byte[] bytes) {
if (bytes == null) {
return null;
}
return Base64.decodeBase64(bytes);
}"
1795,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,codec,765,"return null;
","public static final byte[] decodeQuotedPrintable(byte[] bytes) throws DecoderException {
if (bytes == null) {
return null;
}
ByteArrayOutputStream buffer = new ByteArrayOutputStream();
for (int i = 0; i < bytes.length; i++) {
int b = bytes[i];
if (b == ESCAPE_CHAR) {
try {
int u = Utils.digit16(bytes[++i]);
int l = Utils.digit16(bytes[++i]);
buffer.write((char) ((u << 4) + l));
} catch (ArrayIndexOutOfBoundsException e) {
throw new DecoderException(""Invalid quoted-printable encoding"", e);
}
} else {
buffer.write(b);
}
}
return buffer.toByteArray();
}","public static final byte[] decodeQuotedPrintable(byte[] bytes) throws DecoderException {
if (bytes == null) {
return null;
}
ByteArrayOutputStream bytearrayoutputstreamVar1 = bytearrayoutputstreamLiteral2;
for (int intVar10 = intLiteral11; intVar3 < intLiteral1; intVar3++) {
int intVar5 = intLiteral6;
if (intVar5 == ESCAPE_CHAR) {
try {
int intVar7 = intLiteral8;
int intVar9 = intLiteral8;
bytearrayoutputstreamVar1.write((char) ((intVar7 << 4) + intVar9));
} catch (ArrayIndexOutOfBoundsException e) {
throw new DecoderException(""Invalid quoted-printable encoding"", e);
}
} else {
bytearrayoutputstreamVar1.write(intVar5);
}
}
return bytearrayoutputstreamVar1.toByteArray();
}"
1797,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,codec,767,"return null;
","public static final byte[] encodeUrl(BitSet urlsafe, byte[] bytes) {
if (bytes == null) {
return null;
}
if (urlsafe == null) {
urlsafe = WWW_FORM_URL;
}
ByteArrayOutputStream buffer = new ByteArrayOutputStream();
for (byte c : bytes) {
int b = c;
if (b < 0) {
b = 256 + b;
}
if (urlsafe.get(b)) {
if (b == ' ') {
b = '+';
}
buffer.write(b);
} else {
buffer.write(ESCAPE_CHAR);
char hex1 = Character.toUpperCase(Character.forDigit((b >> 4) & 0xF, RADIX));
char hex2 = Character.toUpperCase(Character.forDigit(b & 0xF, RADIX));
buffer.write(hex1);
buffer.write(hex2);
}
}
return buffer.toByteArray();
}","public static final byte[] encodeUrl(BitSet urlsafe, byte[] bytes) {
if (bytes == null) {
return null;
}
if (urlsafe == null) {
urlsafe = WWW_FORM_URL;
}
ByteArrayOutputStream bytearrayoutputstreamVar1 = bytearrayoutputstreamLiteral2;
for (byte byteVar3 : bytes) {
int intVar4 = intLiteral5;
if (intVar4 < 0) {
intVar4 = 256 + intVar4;
}
if (urlsafe.get(intVar4)) {
if (intVar4 == ' ') {
intVar4 = '+';
}
bytearrayoutputstreamVar1.write(intVar4);
} else {
bytearrayoutputstreamVar1.write(ESCAPE_CHAR);
char charVar6 = charLiteral7;
char charVar8 = charLiteral9;
bytearrayoutputstreamVar1.write(charVar6);
bytearrayoutputstreamVar1.write(charVar8);
}
}
return bytearrayoutputstreamVar1.toByteArray();
}"
1809,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,codec,779,"return null;
","@Override
protected byte[] doEncoding(final byte[] bytes) {
if (bytes == null) {
return null;
}
return Base64.encodeBase64(bytes);
}","@Override
protected byte[] doEncoding(final byte[] bytes) {
if (bytes == null) {
return null;
}
return Base64.encodeBase64(bytes);
}"
1823,DODGY_CODE,INT_VACUOUS_BIT_OPERATION,TP,codec,793,"schedule[j++] = s & 0xffffffff;
","private static int[] desSetKey(byte[] key) {
int[] schedule = new int[32];
int c = fourBytesToInt(key, 0);
int d = fourBytesToInt(key, 4);
int[] results = new int[2];
permOp(d, c, 4, 0xf0f0f0f, results);
d = results[0];
c = results[1];
c = hPermOp(c, -2, 0xcccc0000);
d = hPermOp(d, -2, 0xcccc0000);
permOp(d, c, 1, 0x55555555, results);
d = results[0];
c = results[1];
permOp(c, d, 8, 0xff00ff, results);
c = results[0];
d = results[1];
permOp(d, c, 1, 0x55555555, results);
d = results[0];
c = results[1];
d = (d & 0xff) << 16 | d & 0xff00 | (d & 0xff0000) >>> 16 | (c & 0xf0000000) >>> 4;
c &= 0xfffffff;
int j = 0;
for (int i = 0; i < 16; i++) {
if (SHIFT2[i]) {
c = c >>> 2 | c << 26;
d = d >>> 2 | d << 26;
} else {
c = c >>> 1 | c << 27;
d = d >>> 1 | d << 27;
}
c &= 0xfffffff;
d &= 0xfffffff;
int s = SKB[0][c & 0x3f] | SKB[1][c >>> 6 & 0x3 | c >>> 7 & 0x3c] | SKB[2][c >>> 13 & 0xf | c >>> 14 & 0x30] | SKB[3][c >>> 20 & 0x1 | c >>> 21 & 0x6 | c >>> 22 & 0x38];
int t = SKB[4][d & 0x3f] | SKB[5][d >>> 7 & 0x3 | d >>> 8 & 0x3c] | SKB[6][d >>> 15 & 0x3f] | SKB[7][d >>> 21 & 0xf | d >>> 22 & 0x30];
schedule[j++] = (t << 16 | s & 0xffff) & 0xffffffff;
s = s >>> 16 | t & 0xffff0000;
s = s << 4 | s >>> 28;
schedule[j++] = s & 0xffffffff;
}
return schedule;
}","private static int[] desSetKey(byte[] key) {
int[] intArrayVar1 = intArrayLiteral2;
int intVar3 = intLiteral4;
int intVar5 = intLiteral6;
int[] intArrayVar7 = intArrayLiteral8;
permOp(intVar5, intVar3, 4, 0xf0f0f0f, intArrayVar7);
intVar5 = intArrayVar7[0];
intVar3 = intArrayVar7[1];
intVar3 = hPermOp(intVar3, -2, 0xcccc0000);
intVar5 = hPermOp(intVar5, -2, 0xcccc0000);
permOp(intVar5, intVar3, 1, 0x55555555, intArrayVar7);
intVar5 = intArrayVar7[0];
intVar3 = intArrayVar7[1];
permOp(intVar3, intVar5, 8, 0xff00ff, intArrayVar7);
intVar3 = intArrayVar7[0];
intVar5 = intArrayVar7[1];
permOp(intVar5, intVar3, 1, 0x55555555, intArrayVar7);
intVar5 = intArrayVar7[0];
intVar3 = intArrayVar7[1];
intVar5 = (intVar5 & 0xff) << 16 | intVar5 & 0xff00 | (intVar5 & 0xff0000) >>> 16 | (intVar3 & 0xf0000000) >>> 4;
intVar3 &= 0xfffffff;
int intVar9 = intLiteral10;
for (int intVar16 = intLiteral17; intVar11 < intLiteral1; intVar11++) {
if (SHIFT2[intVar11]) {
intVar3 = intVar3 >>> 2 | intVar3 << 26;
intVar5 = intVar5 >>> 2 | intVar5 << 26;
} else {
intVar3 = intVar3 >>> 1 | intVar3 << 27;
intVar5 = intVar5 >>> 1 | intVar5 << 27;
}
intVar3 &= 0xfffffff;
intVar5 &= 0xfffffff;
int intVar12 = intLiteral13;
int intVar14 = intLiteral15;
intArrayVar1[intVar9++] = (intVar14 << 16 | intVar12 & 0xffff) & 0xffffffff;
intVar12 = intVar12 >>> 16 | intVar14 & 0xffff0000;
intVar12 = intVar12 << 4 | intVar12 >>> 28;
intArrayVar1[intVar9++] = intVar12 & 0xffffffff;
}
return intArrayVar1;
}"
1828,CORRECTNESS,RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE,TP,codec,798,"final int txtLength = txt.length();
","public String metaphone(final String txt) {
boolean hard = false;
final int txtLength = txt.length();
if (txt == null || txtLength == 0) {
return """";
}
if (txtLength == 1) {
return txt.toUpperCase(java.util.Locale.ENGLISH);
}
final char[] inwd = txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray();
final StringBuilder local = new StringBuilder(40);
final StringBuilder code = new StringBuilder(10);
switch(inwd[0]) {
case 'K':
case 'G':
case 'P':
if (inwd[1] == 'N') {
local.append(inwd, 1, inwd.length - 1);
} else {
local.append(inwd);
}
break;
case 'A':
if (inwd[1] == 'E') {
local.append(inwd, 1, inwd.length - 1);
} else {
local.append(inwd);
}
break;
case 'W':
if (inwd[1] == 'R') {
local.append(inwd, 1, inwd.length - 1);
break;
}
if (inwd[1] == 'H') {
local.append(inwd, 1, inwd.length - 1);
local.setCharAt(0, 'W');
} else {
local.append(inwd);
}
break;
case 'X':
inwd[0] = 'S';
local.append(inwd);
break;
default:
local.append(inwd);
}
final int wdsz = local.length();
int n = 0;
while (code.length() < this.getMaxCodeLen() && n < wdsz) {
final char symb = local.charAt(n);
if (symb != 'C' && isPreviousChar(local, n, symb)) {
n++;
} else {
switch(symb) {
case 'A':
case 'E':
case 'I':
case 'O':
case 'U':
if (n == 0) {
code.append(symb);
}
break;
case 'B':
if (isPreviousChar(local, n, 'M') && isLastChar(wdsz, n)) {
break;
}
code.append(symb);
break;
case 'C':
if (isPreviousChar(local, n, 'S') && !isLastChar(wdsz, n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {
break;
}
if (regionMatch(local, n, ""CIA"")) {
code.append('X');
break;
}
if (!isLastChar(wdsz, n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0) {
code.append('S');
break;
}
if (isPreviousChar(local, n, 'S') && isNextChar(local, n, 'H')) {
code.append('K');
break;
}
if (isNextChar(local, n, 'H')) {
if (n == 0 && wdsz >= 3 && isVowel(local, 2)) {
code.append('K');
} else {
code.append('X');
}
} else {
code.append('K');
}
break;
case 'D':
if (!isLastChar(wdsz, n + 1) && isNextChar(local, n, 'G') && FRONTV.indexOf(local.charAt(n + 2)) >= 0) {
code.append('J');
n += 2;
} else {
code.append('T');
}
break;
case 'G':
if (isLastChar(wdsz, n + 1) && isNextChar(local, n, 'H')) {
break;
}
if (!isLastChar(wdsz, n + 1) && isNextChar(local, n, 'H') && !isVowel(local, n + 2)) {
break;
}
if (n > 0 && (regionMatch(local, n, ""GN"") || regionMatch(local, n, ""GNED""))) {
break;
}
if (isPreviousChar(local, n, 'G')) {
// NOTE: Given that duplicated chars are removed, I don't see how this can ever be true
hard = true;
} else {
hard = false;
}
if (!isLastChar(wdsz, n) && FRONTV.indexOf(local.charAt(n + 1)) >= 0 && !hard) {
code.append('J');
} else {
code.append('K');
}
break;
case 'H':
if (isLastChar(wdsz, n)) {
break;
}
if (n > 0 && VARSON.indexOf(local.charAt(n - 1)) >= 0) {
break;
}
if (isVowel(local, n + 1)) {
code.append('H');
}
break;
case 'F':
case 'J':
case 'L':
case 'M':
case 'N':
case 'R':
code.append(symb);
break;
case 'K':
if (n > 0) {
if (!isPreviousChar(local, n, 'C')) {
code.append(symb);
}
} else {
code.append(symb);
}
break;
case 'P':
if (isNextChar(local, n, 'H')) {
code.append('F');
} else {
code.append(symb);
}
break;
case 'Q':
code.append('K');
break;
case 'S':
if (regionMatch(local, n, ""SH"") || regionMatch(local, n, ""SIO"") || regionMatch(local, n, ""SIA"")) {
code.append('X');
} else {
code.append('S');
}
break;
case 'T':
if (regionMatch(local, n, ""TIA"") || regionMatch(local, n, ""TIO"")) {
code.append('X');
break;
}
if (regionMatch(local, n, ""TCH"")) {
break;
}
if (regionMatch(local, n, ""TH"")) {
code.append('0');
} else {
code.append('T');
}
break;
case 'V':
code.append('F');
break;
case 'W':
case 'Y':
if (!isLastChar(wdsz, n) && isVowel(local, n + 1)) {
code.append(symb);
}
break;
case 'X':
code.append('K');
code.append('S');
break;
case 'Z':
code.append('S');
break;
default:
break;
}
n++;
}
if (code.length() > this.getMaxCodeLen()) {
code.setLength(this.getMaxCodeLen());
}
}
return code.toString();
}","public String metaphone(final String txt) {
boolean booleanVar1 = booleanLiteral2;
final int intVar3 = intLiteral4;
if (txt == null || intVar3 == 0) {
return """";
}
if (intVar3 == 1) {
return txt.toUpperCase(java.util.Locale.ENGLISH);
}
final char[] charArrayVar5 = charArrayLiteral6;
final StringBuilder stringbuilderVar7 = stringbuilderLiteral8;
final StringBuilder stringbuilderVar9 = stringbuilderLiteral10;
switch(charArrayVar5[0]) {
case 'K':
case 'G':
case 'P':
if (charArrayVar5[1] == 'N') {
stringbuilderVar7.append(charArrayVar5, 1, charArrayVar5.length - 1);
} else {
stringbuilderVar7.append(charArrayVar5);
}
break;
case 'A':
if (charArrayVar5[1] == 'E') {
stringbuilderVar7.append(charArrayVar5, 1, charArrayVar5.length - 1);
} else {
stringbuilderVar7.append(charArrayVar5);
}
break;
case 'W':
if (charArrayVar5[1] == 'R') {
stringbuilderVar7.append(charArrayVar5, 1, charArrayVar5.length - 1);
break;
}
if (charArrayVar5[1] == 'H') {
stringbuilderVar7.append(charArrayVar5, 1, charArrayVar5.length - 1);
stringbuilderVar7.setCharAt(0, 'W');
} else {
stringbuilderVar7.append(charArrayVar5);
}
break;
case 'X':
charArrayVar5[0] = 'S';
stringbuilderVar7.append(charArrayVar5);
break;
default:
stringbuilderVar7.append(charArrayVar5);
}
final int intVar11 = intLiteral12;
int intVar13 = intLiteral14;
while (stringbuilderVar9.length() < this.getMaxCodeLen() && intVar13 < intVar11) {
final char charVar15 = charLiteral16;
if (charVar15 != 'C' && isPreviousChar(stringbuilderVar7, intVar13, charVar15)) {
intVar13++;
} else {
switch(charVar15) {
case 'A':
case 'E':
case 'I':
case 'O':
case 'U':
if (intVar13 == 0) {
stringbuilderVar9.append(charVar15);
}
break;
case 'B':
if (isPreviousChar(stringbuilderVar7, intVar13, 'M') && isLastChar(intVar11, intVar13)) {
break;
}
stringbuilderVar9.append(charVar15);
break;
case 'C':
if (isPreviousChar(stringbuilderVar7, intVar13, 'S') && !isLastChar(intVar11, intVar13) && FRONTV.indexOf(stringbuilderVar7.charAt(intVar13 + 1)) >= 0) {
break;
}
if (regionMatch(stringbuilderVar7, intVar13, ""CIA"")) {
stringbuilderVar9.append('X');
break;
}
if (!isLastChar(intVar11, intVar13) && FRONTV.indexOf(stringbuilderVar7.charAt(intVar13 + 1)) >= 0) {
stringbuilderVar9.append('S');
break;
}
if (isPreviousChar(stringbuilderVar7, intVar13, 'S') && isNextChar(stringbuilderVar7, intVar13, 'H')) {
stringbuilderVar9.append('K');
break;
}
if (isNextChar(stringbuilderVar7, intVar13, 'H')) {
if (intVar13 == 0 && intVar11 >= 3 && isVowel(stringbuilderVar7, 2)) {
stringbuilderVar9.append('K');
} else {
stringbuilderVar9.append('X');
}
} else {
stringbuilderVar9.append('K');
}
break;
case 'D':
if (!isLastChar(intVar11, intVar13 + 1) && isNextChar(stringbuilderVar7, intVar13, 'G') && FRONTV.indexOf(stringbuilderVar7.charAt(intVar13 + 2)) >= 0) {
stringbuilderVar9.append('J');
intVar13 += 2;
} else {
stringbuilderVar9.append('T');
}
break;
case 'G':
if (isLastChar(intVar11, intVar13 + 1) && isNextChar(stringbuilderVar7, intVar13, 'H')) {
break;
}
if (!isLastChar(intVar11, intVar13 + 1) && isNextChar(stringbuilderVar7, intVar13, 'H') && !isVowel(stringbuilderVar7, intVar13 + 2)) {
break;
}
if (intVar13 > 0 && (regionMatch(stringbuilderVar7, intVar13, ""GN"") || regionMatch(stringbuilderVar7, intVar13, ""GNED""))) {
break;
}
if (isPreviousChar(stringbuilderVar7, intVar13, 'G')) {
// NOTE: Given that duplicated chars are removed, I don't see how this can ever be true
booleanVar1 = true;
} else {
booleanVar1 = false;
}
if (!isLastChar(intVar11, intVar13) && FRONTV.indexOf(stringbuilderVar7.charAt(intVar13 + 1)) >= 0 && !booleanVar1) {
stringbuilderVar9.append('J');
} else {
stringbuilderVar9.append('K');
}
break;
case 'H':
if (isLastChar(intVar11, intVar13)) {
break;
}
if (intVar13 > 0 && VARSON.indexOf(stringbuilderVar7.charAt(intVar13 - 1)) >= 0) {
break;
}
if (isVowel(stringbuilderVar7, intVar13 + 1)) {
stringbuilderVar9.append('H');
}
break;
case 'F':
case 'J':
case 'L':
case 'M':
case 'N':
case 'R':
stringbuilderVar9.append(charVar15);
break;
case 'K':
if (intVar13 > 0) {
if (!isPreviousChar(stringbuilderVar7, intVar13, 'C')) {
stringbuilderVar9.append(charVar15);
}
} else {
stringbuilderVar9.append(charVar15);
}
break;
case 'P':
if (isNextChar(stringbuilderVar7, intVar13, 'H')) {
stringbuilderVar9.append('F');
} else {
stringbuilderVar9.append(charVar15);
}
break;
case 'Q':
stringbuilderVar9.append('K');
break;
case 'S':
if (regionMatch(stringbuilderVar7, intVar13, ""SH"") || regionMatch(stringbuilderVar7, intVar13, ""SIO"") || regionMatch(stringbuilderVar7, intVar13, ""SIA"")) {
stringbuilderVar9.append('X');
} else {
stringbuilderVar9.append('S');
}
break;
case 'T':
if (regionMatch(stringbuilderVar7, intVar13, ""TIA"") || regionMatch(stringbuilderVar7, intVar13, ""TIO"")) {
stringbuilderVar9.append('X');
break;
}
if (regionMatch(stringbuilderVar7, intVar13, ""TCH"")) {
break;
}
if (regionMatch(stringbuilderVar7, intVar13, ""TH"")) {
stringbuilderVar9.append('0');
} else {
stringbuilderVar9.append('T');
}
break;
case 'V':
stringbuilderVar9.append('F');
break;
case 'W':
case 'Y':
if (!isLastChar(intVar11, intVar13) && isVowel(stringbuilderVar7, intVar13 + 1)) {
stringbuilderVar9.append(charVar15);
}
break;
case 'X':
stringbuilderVar9.append('K');
stringbuilderVar9.append('S');
break;
case 'Z':
stringbuilderVar9.append('S');
break;
default:
break;
}
intVar13++;
}
if (stringbuilderVar9.length() > this.getMaxCodeLen()) {
stringbuilderVar9.setLength(this.getMaxCodeLen());
}
}
return stringbuilderVar9.toString();
}"
1832,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,codec,802,"return null;
","private static byte[] getBytes(final String string, final Charset charset) {
if (string == null) {
return null;
}
return string.getBytes(charset);
}","private static byte[] getBytes(final String string, final Charset charset) {
if (string == null) {
return null;
}
return string.getBytes(charset);
}"
1835,MALICIOUS_CODE,EI_EXPOSE_REP2,TP,codec,805,"this.soundexMapping= mapping;
","public Soundex(char[] mapping) {
this.soundexMapping = mapping;
}","public Soundex(char[] mapping) {
this.soundexMapping = mapping;
}"
1836,DODGY_CODE,SF_SWITCH_NO_DEFAULT,TP,codec,806,"switch (context.modulus) {
case 2 : 
context.ibitWorkArea = context.ibitWorkArea >> 4; 
buffer[context.pos++] = (byte) ((context.ibitWorkArea) & MASK_8BITS);
break;
case 3 : 
context.ibitWorkArea = context.ibitWorkArea >> 2; 
buffer[context.pos++] = (byte) ((context.ibitWorkArea >> 8) & MASK_8BITS);
buffer[context.pos++] = (byte) ((context.ibitWorkArea) & MASK_8BITS);
","@Override
void decode(byte[] in, int inPos, int inAvail, Context context) {
if (context.eof) {
return;
}
if (inAvail < 0) {
context.eof = true;
}
for (int i = 0; i < inAvail; i++) {
final byte[] buffer = ensureBufferSize(decodeSize, context);
final byte b = in[inPos++];
if (b == PAD) {
context.eof = true;
break;
} else {
if (b >= 0 && b < DECODE_TABLE.length) {
final int result = DECODE_TABLE[b];
if (result >= 0) {
context.modulus = (context.modulus + 1) % BYTES_PER_ENCODED_BLOCK;
context.ibitWorkArea = (context.ibitWorkArea << BITS_PER_ENCODED_BYTE) + result;
if (context.modulus == 0) {
buffer[context.pos++] = (byte) ((context.ibitWorkArea >> 16) & MASK_8BITS);
buffer[context.pos++] = (byte) ((context.ibitWorkArea >> 8) & MASK_8BITS);
buffer[context.pos++] = (byte) (context.ibitWorkArea & MASK_8BITS);
}
}
}
}
}
// Two forms of EOF as far as base64 decoder is concerned: actual
if (context.eof && context.modulus != 0) {
final byte[] buffer = ensureBufferSize(decodeSize, context);
switch(context.modulus) {
case 2:
context.ibitWorkArea = context.ibitWorkArea >> 4;
buffer[context.pos++] = (byte) ((context.ibitWorkArea) & MASK_8BITS);
break;
case 3:
context.ibitWorkArea = context.ibitWorkArea >> 2;
buffer[context.pos++] = (byte) ((context.ibitWorkArea >> 8) & MASK_8BITS);
buffer[context.pos++] = (byte) ((context.ibitWorkArea) & MASK_8BITS);
break;
}
}
}","@Override
void decode(byte[] in, int inPos, int inAvail, Context context) {
if (context.eof) {
return;
}
if (inAvail < 0) {
context.eof = true;
}
for (int intVar9 = intLiteral10; intVar1 < intLiteral1; intVar1++) {
final byte[] byteArrayVar3 = byteArrayLiteral4;
final byte byteVar5 = byteLiteral6;
if (byteVar5 == PAD) {
context.eof = true;
break;
} else {
if (byteVar5 >= 0 && byteVar5 < DECODE_TABLE.length) {
final int intVar7 = intLiteral8;
if (intVar7 >= 0) {
context.modulus = (context.modulus + 1) % BYTES_PER_ENCODED_BLOCK;
context.ibitWorkArea = (context.ibitWorkArea << BITS_PER_ENCODED_BYTE) + intVar7;
if (context.modulus == 0) {
byteArrayVar3[context.pos++] = (byte) ((context.ibitWorkArea >> 16) & MASK_8BITS);
byteArrayVar3[context.pos++] = (byte) ((context.ibitWorkArea >> 8) & MASK_8BITS);
byteArrayVar3[context.pos++] = (byte) (context.ibitWorkArea & MASK_8BITS);
}
}
}
}
}
// Two forms of EOF as far as base64 decoder is concerned: actual
if (context.eof && context.modulus != 0) {
final byte[] byteArrayVar3 = byteArrayLiteral4;
switch(context.modulus) {
case 2:
context.ibitWorkArea = context.ibitWorkArea >> 4;
byteArrayVar3[context.pos++] = (byte) ((context.ibitWorkArea) & MASK_8BITS);
break;
case 3:
context.ibitWorkArea = context.ibitWorkArea >> 2;
byteArrayVar3[context.pos++] = (byte) ((context.ibitWorkArea >> 8) & MASK_8BITS);
byteArrayVar3[context.pos++] = (byte) ((context.ibitWorkArea) & MASK_8BITS);
break;
}
}
}"
1840,DODGY_CODE,UC_USELESS_CONDITION,TP,codec,810,"} else if (sumLength >= EIGHT && sumLength <= ELEVEN) {
","int getMinRating(final int sumLength) {
int minRating = 0;
if (sumLength <= FOUR) {
minRating = FIVE;
} else if (sumLength >= FIVE && sumLength <= SEVEN) {
minRating = FOUR;
} else if (sumLength >= EIGHT && sumLength <= ELEVEN) {
minRating = THREE;
} else if (sumLength == TWELVE) {
minRating = TWO;
} else {
minRating = ONE;
}
return minRating;
}","int getMinRating(final int sumLength) {
int intVar1 = intLiteral2;
if (sumLength <= FOUR) {
intVar1 = FIVE;
} else if (sumLength >= FIVE && sumLength <= SEVEN) {
intVar1 = FOUR;
} else if (sumLength >= EIGHT && sumLength <= ELEVEN) {
intVar1 = THREE;
} else if (sumLength == TWELVE) {
intVar1 = TWO;
} else {
intVar1 = ONE;
}
return intVar1;
}"
1853,DODGY_CODE,SF_SWITCH_NO_DEFAULT,FP,codec,823,"switch (context.modulus) { 
case 1 : 
context.buffer[context.pos++] = encodeTable[(context.ibitWorkArea >> 2) & MASK_6BITS]; 
context.buffer[context.pos++] = encodeTable[(context.ibitWorkArea << 4) & MASK_6BITS]; 
if (encodeTable == STANDARD_ENCODE_TABLE) {
context.buffer[context.pos++] = PAD;
context.buffer[context.pos++] = PAD;
}
break;
case 2 : 
context.buffer[context.pos++] = encodeTable[(context.ibitWorkArea >> 10) & MASK_6BITS];
context.buffer[context.pos++] = encodeTable[(context.ibitWorkArea >> 4) & MASK_6BITS];
context.buffer[context.pos++] = encodeTable[(context.ibitWorkArea << 2) & MASK_6BITS];
if (encodeTable == STANDARD_ENCODE_TABLE) {
context.buffer[context.pos++] = PAD;
","@Override
void encode(byte[] in, int inPos, int inAvail, Context context) {
if (context.eof) {
return;
}
if (inAvail < 0) {
context.eof = true;
if (0 == context.modulus && lineLength == 0) {
return;
}
ensureBufferSize(encodeSize, context);
int savedPos = context.pos;
switch(context.modulus) {
case 1:
context.buffer[context.pos++] = encodeTable[(context.ibitWorkArea >> 2) & MASK_6BITS];
context.buffer[context.pos++] = encodeTable[(context.ibitWorkArea << 4) & MASK_6BITS];
if (encodeTable == STANDARD_ENCODE_TABLE) {
context.buffer[context.pos++] = PAD;
context.buffer[context.pos++] = PAD;
}
break;
case 2:
context.buffer[context.pos++] = encodeTable[(context.ibitWorkArea >> 10) & MASK_6BITS];
context.buffer[context.pos++] = encodeTable[(context.ibitWorkArea >> 4) & MASK_6BITS];
context.buffer[context.pos++] = encodeTable[(context.ibitWorkArea << 2) & MASK_6BITS];
if (encodeTable == STANDARD_ENCODE_TABLE) {
context.buffer[context.pos++] = PAD;
}
break;
}
context.currentLinePos += context.pos - savedPos;
if (lineLength > 0 && context.currentLinePos > 0) {
System.arraycopy(lineSeparator, 0, context.buffer, context.pos, lineSeparator.length);
context.pos += lineSeparator.length;
}
} else {
for (int i = 0; i < inAvail; i++) {
ensureBufferSize(encodeSize, context);
context.modulus = (context.modulus + 1) % BYTES_PER_UNENCODED_BLOCK;
int b = in[inPos++];
if (b < 0) {
b += 256;
}
context.ibitWorkArea = (context.ibitWorkArea << 8) + b;
if (0 == context.modulus) {
context.buffer[context.pos++] = encodeTable[(context.ibitWorkArea >> 18) & MASK_6BITS];
context.buffer[context.pos++] = encodeTable[(context.ibitWorkArea >> 12) & MASK_6BITS];
context.buffer[context.pos++] = encodeTable[(context.ibitWorkArea >> 6) & MASK_6BITS];
context.buffer[context.pos++] = encodeTable[context.ibitWorkArea & MASK_6BITS];
context.currentLinePos += BYTES_PER_ENCODED_BLOCK;
if (lineLength > 0 && lineLength <= context.currentLinePos) {
System.arraycopy(lineSeparator, 0, context.buffer, context.pos, lineSeparator.length);
context.pos += lineSeparator.length;
context.currentLinePos = 0;
}
}
}
}
}","@Override
void encode(byte[] in, int inPos, int inAvail, Context context) {
if (context.eof) {
return;
}
if (inAvail < 0) {
context.eof = true;
if (0 == context.modulus && lineLength == 0) {
return;
}
ensureBufferSize(encodeSize, context);
int intVar1 = intLiteral2;
switch(context.modulus) {
case 1:
context.buffer[context.pos++] = encodeTable[(context.ibitWorkArea >> 2) & MASK_6BITS];
context.buffer[context.pos++] = encodeTable[(context.ibitWorkArea << 4) & MASK_6BITS];
if (encodeTable == STANDARD_ENCODE_TABLE) {
context.buffer[context.pos++] = PAD;
context.buffer[context.pos++] = PAD;
}
break;
case 2:
context.buffer[context.pos++] = encodeTable[(context.ibitWorkArea >> 10) & MASK_6BITS];
context.buffer[context.pos++] = encodeTable[(context.ibitWorkArea >> 4) & MASK_6BITS];
context.buffer[context.pos++] = encodeTable[(context.ibitWorkArea << 2) & MASK_6BITS];
if (encodeTable == STANDARD_ENCODE_TABLE) {
context.buffer[context.pos++] = PAD;
}
break;
}
context.currentLinePos += context.pos - intVar1;
if (lineLength > 0 && context.currentLinePos > 0) {
System.arraycopy(lineSeparator, 0, context.buffer, context.pos, lineSeparator.length);
context.pos += lineSeparator.length;
}
} else {
for (int intVar7 = intLiteral8; intVar3 < intLiteral1; intVar3++) {
ensureBufferSize(encodeSize, context);
context.modulus = (context.modulus + 1) % BYTES_PER_UNENCODED_BLOCK;
int intVar5 = intLiteral6;
if (intVar5 < 0) {
intVar5 += 256;
}
context.ibitWorkArea = (context.ibitWorkArea << 8) + intVar5;
if (0 == context.modulus) {
context.buffer[context.pos++] = encodeTable[(context.ibitWorkArea >> 18) & MASK_6BITS];
context.buffer[context.pos++] = encodeTable[(context.ibitWorkArea >> 12) & MASK_6BITS];
context.buffer[context.pos++] = encodeTable[(context.ibitWorkArea >> 6) & MASK_6BITS];
context.buffer[context.pos++] = encodeTable[context.ibitWorkArea & MASK_6BITS];
context.currentLinePos += BYTES_PER_ENCODED_BLOCK;
if (lineLength > 0 && lineLength <= context.currentLinePos) {
System.arraycopy(lineSeparator, 0, context.buffer, context.pos, lineSeparator.length);
context.pos += lineSeparator.length;
context.currentLinePos = 0;
}
}
}
}
}"
1856,MALICIOUS_CODE,MS_PKGPROTECT,TP,codec,826,"public static final char[] US_ENGLISH_MAPPING = ""01360240043788015936020505"".toCharArray();","public static final char[] US_ENGLISH_MAPPING = ""01360240043788015936020505"".toCharArray();",public static final char[] charArrayVar1 = charArrayLiteral2;
1862,I18N,DM_DEFAULT_ENCODING,TP,codec,832,"return sha512(data.getBytes());
","public static byte[] sha512(String data) {
return sha512(data.getBytes());
}","public static byte[] sha512(String data) {
return sha512(data.getBytes());
}"
1870,DODGY_CODE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,FP,codec,840,protected static byte ESCAPE_CHAR = '%';,protected static byte ESCAPE_CHAR = '%';,protected static byte byteVar1 = byteLiteral2;
1887,MALICIOUS_CODE,MS_SHOULD_BE_FINAL,TP,codec,857,"public static LanguageSet NO_LANGUAGES = new LanguageSet() {
@Override
public LanguageSet restrictTo(LanguageSet other) {
return this;
}
@Override
public boolean contains(String language) {
return false;
}
@Override
public boolean isSingleton() {
return false;
}
@Override
public String getAny() {
throw new NoSuchElementException(""Can't fetch any language from the empty language set."");
}
@Override
public boolean isEmpty() {
return true;
}
};","public static LanguageSet NO_LANGUAGES = new LanguageSet() {
@Override
public LanguageSet restrictTo(LanguageSet other) {
return this;
}
@Override
public boolean contains(String language) {
return false;
}
@Override
public boolean isSingleton() {
return false;
}
@Override
public String getAny() {
throw new NoSuchElementException(""Can't fetch any language from the empty language set."");
}
@Override
public boolean isEmpty() {
return true;
}
};",public static LanguageSet languagesetVar1 = languagesetLiteral2;
1894,MALICIOUS_CODE,MS_PKGPROTECT,TP,codec,864,public static final char[] US_ENGLISH_MAPPING = US_ENGLISH_MAPPING_STRING.toCharArray();,public static final char[] US_ENGLISH_MAPPING = US_ENGLISH_MAPPING_STRING.toCharArray();,public static final char[] charArrayVar1 = charArrayLiteral2;
1902,MALICIOUS_CODE,MS_SHOULD_BE_FINAL,TP,codec,872,protected static byte ESCAPE_CHAR = '%';,protected static byte ESCAPE_CHAR = '%';,protected static byte byteVar1 = byteLiteral2;
1908,DODGY_CODE,SF_SWITCH_NO_DEFAULT,FP,codec,878,"switch (context.modulus) {
case 2 : 
context.buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 2) & MASK_8BITS);
break;
case 3 : 
context.buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 7) & MASK_8BITS);
break;
case 4 : 
context.lbitWorkArea = context.lbitWorkArea >> 4; 
context.buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 8) & MASK_8BITS);
context.buffer[context.pos++] = (byte) ((context.lbitWorkArea) & MASK_8BITS);
break;
case 5 : 
context.lbitWorkArea = context.lbitWorkArea >> 1;
context.buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 16) & MASK_8BITS);
context.buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 8) & MASK_8BITS);
context.buffer[context.pos++] = (byte) ((context.lbitWorkArea) & MASK_8BITS);
break;
case 6 : 
context.lbitWorkArea = context.lbitWorkArea >> 6;
context.buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 16) & MASK_8BITS);
context.buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 8) & MASK_8BITS);
context.buffer[context.pos++] = (byte) ((context.lbitWorkArea) & MASK_8BITS);
break;
case 7 : 
context.lbitWorkArea = context.lbitWorkArea >> 3;
context.buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 24) & MASK_8BITS);
context.buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 16) & MASK_8BITS);
context.buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 8) & MASK_8BITS);
context.buffer[context.pos++] = (byte) ((context.lbitWorkArea) & MASK_8BITS);
","@Override
void decode(byte[] in, int inPos, int inAvail, Context context) {
if (context.eof) {
return;
}
if (inAvail < 0) {
context.eof = true;
}
for (int i = 0; i < inAvail; i++) {
byte b = in[inPos++];
if (b == PAD) {
context.eof = true;
break;
} else {
ensureBufferSize(decodeSize, context);
if (b >= 0 && b < this.decodeTable.length) {
int result = this.decodeTable[b];
if (result >= 0) {
context.modulus = (context.modulus + 1) % BYTES_PER_ENCODED_BLOCK;
context.lbitWorkArea = (context.lbitWorkArea << BITS_PER_ENCODED_BYTE) + result;
if (context.modulus == 0) {
context.buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 32) & MASK_8BITS);
context.buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 24) & MASK_8BITS);
context.buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 16) & MASK_8BITS);
context.buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 8) & MASK_8BITS);
context.buffer[context.pos++] = (byte) (context.lbitWorkArea & MASK_8BITS);
}
}
}
}
}
// Two forms of EOF as far as Base32 decoder is concerned: actual
if (context.eof && context.modulus >= 2) {
ensureBufferSize(decodeSize, context);
switch(context.modulus) {
case 2:
context.buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 2) & MASK_8BITS);
break;
case 3:
context.buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 7) & MASK_8BITS);
break;
case 4:
context.lbitWorkArea = context.lbitWorkArea >> 4;
context.buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 8) & MASK_8BITS);
context.buffer[context.pos++] = (byte) ((context.lbitWorkArea) & MASK_8BITS);
break;
case 5:
context.lbitWorkArea = context.lbitWorkArea >> 1;
context.buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 16) & MASK_8BITS);
context.buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 8) & MASK_8BITS);
context.buffer[context.pos++] = (byte) ((context.lbitWorkArea) & MASK_8BITS);
break;
case 6:
context.lbitWorkArea = context.lbitWorkArea >> 6;
context.buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 16) & MASK_8BITS);
context.buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 8) & MASK_8BITS);
context.buffer[context.pos++] = (byte) ((context.lbitWorkArea) & MASK_8BITS);
break;
case 7:
context.lbitWorkArea = context.lbitWorkArea >> 3;
context.buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 24) & MASK_8BITS);
context.buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 16) & MASK_8BITS);
context.buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 8) & MASK_8BITS);
context.buffer[context.pos++] = (byte) ((context.lbitWorkArea) & MASK_8BITS);
break;
}
}
}","@Override
void decode(byte[] in, int inPos, int inAvail, Context context) {
if (context.eof) {
return;
}
if (inAvail < 0) {
context.eof = true;
}
for (int intVar7 = intLiteral8; intVar1 < intLiteral1; intVar1++) {
byte byteVar3 = byteLiteral4;
if (byteVar3 == PAD) {
context.eof = true;
break;
} else {
ensureBufferSize(decodeSize, context);
if (byteVar3 >= 0 && byteVar3 < this.decodeTable.length) {
int intVar5 = intLiteral6;
if (intVar5 >= 0) {
context.modulus = (context.modulus + 1) % BYTES_PER_ENCODED_BLOCK;
context.lbitWorkArea = (context.lbitWorkArea << BITS_PER_ENCODED_BYTE) + intVar5;
if (context.modulus == 0) {
context.buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 32) & MASK_8BITS);
context.buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 24) & MASK_8BITS);
context.buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 16) & MASK_8BITS);
context.buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 8) & MASK_8BITS);
context.buffer[context.pos++] = (byte) (context.lbitWorkArea & MASK_8BITS);
}
}
}
}
}
// Two forms of EOF as far as Base32 decoder is concerned: actual
if (context.eof && context.modulus >= 2) {
ensureBufferSize(decodeSize, context);
switch(context.modulus) {
case 2:
context.buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 2) & MASK_8BITS);
break;
case 3:
context.buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 7) & MASK_8BITS);
break;
case 4:
context.lbitWorkArea = context.lbitWorkArea >> 4;
context.buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 8) & MASK_8BITS);
context.buffer[context.pos++] = (byte) ((context.lbitWorkArea) & MASK_8BITS);
break;
case 5:
context.lbitWorkArea = context.lbitWorkArea >> 1;
context.buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 16) & MASK_8BITS);
context.buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 8) & MASK_8BITS);
context.buffer[context.pos++] = (byte) ((context.lbitWorkArea) & MASK_8BITS);
break;
case 6:
context.lbitWorkArea = context.lbitWorkArea >> 6;
context.buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 16) & MASK_8BITS);
context.buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 8) & MASK_8BITS);
context.buffer[context.pos++] = (byte) ((context.lbitWorkArea) & MASK_8BITS);
break;
case 7:
context.lbitWorkArea = context.lbitWorkArea >> 3;
context.buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 24) & MASK_8BITS);
context.buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 16) & MASK_8BITS);
context.buffer[context.pos++] = (byte) ((context.lbitWorkArea >> 8) & MASK_8BITS);
context.buffer[context.pos++] = (byte) ((context.lbitWorkArea) & MASK_8BITS);
break;
}
}
}"
1909,PERFORMANCE,SS_SHOULD_BE_STATIC,FP,codec,879,"@Deprecated
protected final byte PAD = PAD_DEFAULT;","@Deprecated
protected final byte PAD = PAD_DEFAULT;","@Deprecated
protected final byte byteVar1 = byteLiteral2;"
1923,DODGY_CODE,ICAST_INTEGER_MULTIPLY_CAST_TO_LONG,TP,codec,893,"long len = ((pArray.length + unencodedBlockSize-1)  / unencodedBlockSize) * encodedBlockSize;
","public long getEncodedLength(byte[] pArray) {
long len = ((pArray.length + unencodedBlockSize - 1) / unencodedBlockSize) * encodedBlockSize;
if (lineLength > 0) {
len += ((len + lineLength - 1) / lineLength) * chunkSeparatorLength;
}
return len;
}","public long getEncodedLength(byte[] pArray) {
long longVar1 = longLiteral2;
if (lineLength > 0) {
longVar1 += ((longVar1 + lineLength - 1) / lineLength) * chunkSeparatorLength;
}
return longVar1;
}"
1978,BAD_PRACTICE,SE_BAD_FIELD,FP,collections,42,private final Predicate<? super T> iPredicate1;,private final Predicate<? super T> iPredicate1;,private final Predicate<? super T> predicate<? super t>Var1;
1982,BAD_PRACTICE,SE_BAD_FIELD,FP,collections,46,private final Factory<? extends O> iFactory;,private final Factory<? extends O> iFactory;,private final Factory<? extends O> factory<? extends o>Var1;
1992,BAD_PRACTICE,SE_BAD_FIELD,FP,collections,56,private final Predicate<? super T> iPredicate2;,private final Predicate<? super T> iPredicate2;,private final Predicate<? super T> predicate<? super t>Var1;
1993,BAD_PRACTICE,SE_BAD_FIELD,FP,collections,57,private final Predicate<? super T> iPredicate;,private final Predicate<? super T> iPredicate;,private final Predicate<? super T> predicate<? super t>Var1;
2003,BAD_PRACTICE,SE_BAD_FIELD,FP,collections,67,private final Factory<? extends E> factory;,private final Factory<? extends E> factory;,private final Factory<? extends E> factory<? extends e>Var1;
2005,DODGY_CODE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,FP,collections,69,"return (List<E>) decorated();
","protected List<E> getList() {
return (List<E>) decorated();
}","protected List<E> getList() {
return (List<E>) decorated();
}"
2010,DODGY_CODE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,FP,collections,74,"return (LinkEntry<K, V>) super.getEntry(key);
","@Override
protected LinkEntry<K, V> getEntry(final Object key) {
return (LinkEntry<K, V>) super.getEntry(key);
}","@Override
protected LinkEntry<K, V> getEntry(final Object key) {
return (LinkEntry<K, V>) super.getEntry(key);
}"
2016,BAD_PRACTICE,HE_HASHCODE_USE_OBJECT_EQUALS,FP,collections,80,"return hash;
","@Override
public int hashCode() {
return hash;
}","@Override
public int hashCode() {
return hash;
}"
2024,DODGY_CODE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,FP,collections,88,"final ArrayList<V> list = (ArrayList<V>) coll;
","public void trimToSize() {
for (Collection<V> coll : getMap().values()) {
final ArrayList<V> list = (ArrayList<V>) coll;
list.trimToSize();
}
}","public void trimToSize() {
for (Collection<V> collection<v>Var1 : getMap().values()) {
final ArrayList<V> arraylist<v>Var2 = arraylist<v>Literal3;
arraylist<v>Var2.trimToSize();
}
}"
2029,DODGY_CODE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,FP,collections,93,"return (Set<E>) super.decorated();
","@Override
protected Set<E> decorated() {
return (Set<E>) super.decorated();
}","@Override
protected Set<E> decorated() {
return (Set<E>) super.decorated();
}"
2030,DODGY_CODE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,FP,collections,94,"return (SortedSet<E>) decorated();
","protected SortedSet<E> getSortedSet() {
return (SortedSet<E>) decorated();
}","protected SortedSet<E> getSortedSet() {
return (SortedSet<E>) decorated();
}"
2116,BAD_PRACTICE,SE_BAD_FIELD,FP,collections,180,"protected final Transformer<? super E, ? extends E> transformer;","protected final Transformer<? super E, ? extends E> transformer;","protected final Transformer<? super E, ? extends E> transformer<? super e,? extends e>Var1;"
2119,BAD_PRACTICE,SE_BAD_FIELD,FP,collections,183,private final Comparator<? super E> comparator;,private final Comparator<? super E> comparator;,private final Comparator<? super E> comparator<? super e>Var1;
2122,BAD_PRACTICE,SE_BAD_FIELD,FP,collections,186,private final Closure<? super E>[] iClosures;,private final Closure<? super E>[] iClosures;,private final Closure<? super E>[] closure<? super e>ArrayVar1;
2127,BAD_PRACTICE,SE_BAD_FIELD,FP,collections,191,private final Factory<? extends O> iFactory;,private final Factory<? extends O> iFactory;,private final Factory<? extends O> factory<? extends o>Var1;
2132,BAD_PRACTICE,SE_BAD_FIELD,FP,collections,196,"private final Transformer<? super I, ? extends O> iFalseTransformer;","private final Transformer<? super I, ? extends O> iFalseTransformer;","private final Transformer<? super I, ? extends O> transformer<? super i,? extends o>Var1;"
2133,BAD_PRACTICE,SE_BAD_FIELD,FP,collections,197,private final Predicate<? super T> iPredicate;,private final Predicate<? super T> iPredicate;,private final Predicate<? super T> predicate<? super t>Var1;
2139,BAD_PRACTICE,SE_BAD_FIELD,FP,collections,203,private final Predicate<? super E>[] iPredicates;,private final Predicate<? super E>[] iPredicates;,private final Predicate<? super E>[] predicate<? super e>ArrayVar1;
2141,BAD_PRACTICE,SE_BAD_FIELD,FP,collections,205,private final Predicate<? super T> iPredicate;,private final Predicate<? super T> iPredicate;,private final Predicate<? super T> predicate<? super t>Var1;
2142,BAD_PRACTICE,SE_BAD_FIELD,FP,collections,206,"private final Transformer<? super E, ?> iTransformer;","private final Transformer<? super E, ?> iTransformer;","private final Transformer<? super E, ?> transformer<? super e,?>Var1;"
2147,BAD_PRACTICE,SE_BAD_FIELD,FP,collections,211,private final Factory<? extends E> factory;,private final Factory<? extends E> factory;,private final Factory<? extends E> factory<? extends e>Var1;
2155,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,collections,219,"final ReferenceEntry<K, V> refEntry = (ReferenceEntry<K, V>) entry;
","protected void purge(final Reference<?> ref) {
final int hash = ref.hashCode();
final int index = hashIndex(hash, data.length);
HashEntry<K, V> previous = null;
HashEntry<K, V> entry = data[index];
while (entry != null) {
final ReferenceEntry<K, V> refEntry = (ReferenceEntry<K, V>) entry;
if (refEntry.purge(ref)) {
if (previous == null) {
data[index] = entry.next;
} else {
previous.next = entry.next;
}
this.size--;
refEntry.onPurge();
return;
}
previous = entry;
entry = entry.next;
}
}","protected void purge(final Reference<?> ref) {
final int intVar1 = intLiteral2;
final int intVar3 = intLiteral4;
HashEntry<K, V> hashentry<k,v>Var5 = hashentry<k,v>Literal6;
HashEntry<K, V> hashentry<k,v>Var7 = hashentry<k,v>Literal8;
while (hashentry<k,v>Var7 != null) {
final ReferenceEntry<K, V> referenceentry<k,v>Var9 = referenceentry<k,v>Literal10;
if (referenceentry<k,v>Var9.purge(ref)) {
if (hashentry<k,v>Var5 == null) {
data[intVar3] = hashentry<k,v>Var7.next;
} else {
hashentry<k,v>Var5.next = hashentry<k,v>Var7.next;
}
this.size--;
referenceentry<k,v>Var9.onPurge();
return;
}
hashentry<k,v>Var5 = hashentry<k,v>Var7;
hashentry<k,v>Var7 = hashentry<k,v>Var7.next;
}
}"
2156,BAD_PRACTICE,HE_HASHCODE_USE_OBJECT_EQUALS,FP,collections,220,"return hash;
","@Override
public int hashCode() {
return hash;
}","@Override
public int hashCode() {
return hash;
}"
2157,BAD_PRACTICE,HE_HASHCODE_USE_OBJECT_EQUALS,FP,collections,221,"return hash;
","@Override
public int hashCode() {
return hash;
}","@Override
public int hashCode() {
return hash;
}"
2159,PERFORMANCE,URF_UNREAD_FIELD,FP,collections,223,"V currentValue, nextValue;","V currentValue, nextValue;","V vVar1, vVar2;"
2169,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,collections,233,"return (UnmodifiableMultiValuedMap<K, V>) map;
","@SuppressWarnings(""unchecked"")
public static <K, V> UnmodifiableMultiValuedMap<K, V> unmodifiableMultiValuedMap(final MultiValuedMap<? extends K, ? extends V> map) {
if (map instanceof Unmodifiable) {
return (UnmodifiableMultiValuedMap<K, V>) map;
}
return new UnmodifiableMultiValuedMap<>(map);
}","@SuppressWarnings(""unchecked"")
public static <K, V> UnmodifiableMultiValuedMap<K, V> unmodifiableMultiValuedMap(final MultiValuedMap<? extends K, ? extends V> map) {
if (map instanceof Unmodifiable) {
return (UnmodifiableMultiValuedMap<K, V>) map;
}
return new UnmodifiableMultiValuedMap<>(map);
}"
2173,DODGY_CODE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,FP,collections,237,"return (Set<E>) super.decorated();
","@Override
protected Set<E> decorated() {
return (Set<E>) super.decorated();
}","@Override
protected Set<E> decorated() {
return (Set<E>) super.decorated();
}"
2180,DODGY_CODE,DMI_NONSERIALIZABLE_OBJECT_WRITTEN,FP,collections,244,"out.writeObject(comparator());
","private void writeObject(final ObjectOutputStream out) throws IOException {
out.defaultWriteObject();
out.writeObject(comparator());
super.doWriteObject(out);
}","private void writeObject(final ObjectOutputStream out) throws IOException {
out.defaultWriteObject();
out.writeObject(comparator());
super.doWriteObject(out);
}"
2183,Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,collections,247,"private UnmodifiableBidiMap<V, K> inverse;","private UnmodifiableBidiMap<V, K> inverse;","private UnmodifiableBidiMap<V, K> unmodifiablebidimap<v,k>Var1;"
2184,BAD_PRACTICE,SE_BAD_FIELD,FP,collections,248,"private final Transformer<C, K> keyTransformer;","private final Transformer<C, K> keyTransformer;","private final Transformer<C, K> transformer<c,k>Var1;"
2198,BAD_PRACTICE,SE_BAD_FIELD,FP,collections,262,"private final Transformer<? super E, ?> iTransformer;","private final Transformer<? super E, ?> iTransformer;","private final Transformer<? super E, ?> transformer<? super e,?>Var1;"
2205,DODGY_CODE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,FP,collections,269,"return (List<E>) decorated();
","protected List<E> getList() {
return (List<E>) decorated();
}","protected List<E> getList() {
return (List<E>) decorated();
}"
2211,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,collections,275,"final LinkEntry<K, V> link = (LinkEntry<K, V>) entry;
","@Override
protected void removeEntry(final HashEntry<K, V> entry, final int hashIndex, final HashEntry<K, V> previous) {
final LinkEntry<K, V> link = (LinkEntry<K, V>) entry;
link.before.after = link.after;
link.after.before = link.before;
link.after = null;
link.before = null;
super.removeEntry(entry, hashIndex, previous);
}","@Override
protected void removeEntry(final HashEntry<K, V> entry, final int hashIndex, final HashEntry<K, V> previous) {
final LinkEntry<K, V> linkentry<k,v>Var1 = linkentry<k,v>Literal2;
linkentry<k,v>Var1.before.after = linkentry<k,v>Var1.after;
linkentry<k,v>Var1.after.before = linkentry<k,v>Var1.before;
linkentry<k,v>Var1.after = null;
linkentry<k,v>Var1.before = null;
super.removeEntry(entry, hashIndex, previous);
}"
2215,BAD_PRACTICE,HE_HASHCODE_USE_OBJECT_EQUALS,FP,collections,279,"return hash;
","@Override
public int hashCode() {
return hash;
}","@Override
public int hashCode() {
return hash;
}"
2222,DODGY_CODE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,FP,collections,286,"return (Set<E>) super.decorated();
","@Override
protected Set<E> decorated() {
return (Set<E>) super.decorated();
}","@Override
protected Set<E> decorated() {
return (Set<E>) super.decorated();
}"
2223,DODGY_CODE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,FP,collections,287,"return (Set<E>) super.decorated();
","@Override
protected Set<E> decorated() {
return (Set<E>) super.decorated();
}","@Override
protected Set<E> decorated() {
return (Set<E>) super.decorated();
}"
2227,BAD_PRACTICE,SE_INNER_CLASS,FP,collections,291,"SynchronizedBagSet(final Set<E> set, final Object lock) {
super(set, lock);
}
","@Override
public boolean equals(final Object object) {
if (object == this) {
return true;
}
synchronized (lock) {
return getBag().equals(object);
}
}","@Override
public boolean equals(final Object object) {
if (object == this) {
return true;
}
synchronized (lock) {
return getBag().equals(object);
}
}"
2233,BAD_PRACTICE,SE_BAD_FIELD,FP,collections,297,"protected final Transformer<? super E, ? extends E> transformer;","protected final Transformer<? super E, ? extends E> transformer;","protected final Transformer<? super E, ? extends E> transformer<? super e,? extends e>Var1;"
2234,BAD_PRACTICE,SE_BAD_FIELD,FP,collections,298,"private final Transformer<? super I, ? extends O> transformer;","private final Transformer<? super I, ? extends O> transformer;","private final Transformer<? super I, ? extends O> transformer<? super i,? extends o>Var1;"
2241,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,collections,305,"return null;
","@SuppressWarnings(""unchecked"")
static <T> Predicate<T>[] copy(final Predicate<? super T>... predicates) {
if (predicates == null) {
return null;
}
return (Predicate<T>[]) predicates.clone();
}","@SuppressWarnings(""unchecked"")
static <T> Predicate<T>[] copy(final Predicate<? super T>... predicates) {
if (predicates == null) {
return null;
}
return (Predicate<T>[]) predicates.clone();
}"
2243,BAD_PRACTICE,SE_BAD_FIELD,FP,collections,307,private final Closure<? super E> iFalseClosure;,private final Closure<? super E> iFalseClosure;,private final Closure<? super E> closure<? super e>Var1;
2246,BAD_PRACTICE,SE_BAD_FIELD,FP,collections,310,private final Predicate<? super T> iPredicate;,private final Predicate<? super T> iPredicate;,private final Predicate<? super T> predicate<? super t>Var1;
2256,MALICIOUS_CODE,EI_EXPOSE_REP2,FP,collections,320,"this.array = array;
","public ObjectArrayIterator(final E[] array, final int start, final int end) {
super();
if (start < 0) {
throw new ArrayIndexOutOfBoundsException(""Start index must not be less than zero"");
}
if (end > array.length) {
throw new ArrayIndexOutOfBoundsException(""End index must not be greater than the array length"");
}
if (start > array.length) {
throw new ArrayIndexOutOfBoundsException(""Start index must not be greater than the array length"");
}
if (end < start) {
throw new IllegalArgumentException(""End index must not be less than start index"");
}
this.array = array;
this.startIndex = start;
this.endIndex = end;
this.index = start;
}","public ObjectArrayIterator(final E[] array, final int start, final int end) {
super();
if (start < 0) {
throw new ArrayIndexOutOfBoundsException(""Start index must not be less than zero"");
}
if (end > array.length) {
throw new ArrayIndexOutOfBoundsException(""End index must not be greater than the array length"");
}
if (start > array.length) {
throw new ArrayIndexOutOfBoundsException(""Start index must not be greater than the array length"");
}
if (end < start) {
throw new IllegalArgumentException(""End index must not be less than start index"");
}
this.array = array;
this.startIndex = start;
this.endIndex = end;
this.index = start;
}"
2258,MALICIOUS_CODE,EI_EXPOSE_REP2,FP,collections,322,"this.keys = keys;
","public MultiKey(final K[] keys, final boolean makeClone) {
super();
if (keys == null) {
throw new IllegalArgumentException(""The array of keys must not be null"");
}
if (makeClone) {
this.keys = keys.clone();
} else {
this.keys = keys;
}
calculateHashCode(keys);
}","public MultiKey(final K[] keys, final boolean makeClone) {
super();
if (keys == null) {
throw new IllegalArgumentException(""The array of keys must not be null"");
}
if (makeClone) {
this.keys = keys.clone();
} else {
this.keys = keys;
}
calculateHashCode(keys);
}"
2269,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,collections,333,"if (((ReferenceEntry<K, V>) entry).purge(ref)) {
","protected void purge(final Reference<?> ref) {
final int hash = ref.hashCode();
final int index = hashIndex(hash, data.length);
HashEntry<K, V> previous = null;
HashEntry<K, V> entry = data[index];
while (entry != null) {
if (((ReferenceEntry<K, V>) entry).purge(ref)) {
if (previous == null) {
data[index] = entry.next;
} else {
previous.next = entry.next;
}
this.size--;
return;
}
previous = entry;
entry = entry.next;
}
}","protected void purge(final Reference<?> ref) {
final int intVar1 = intLiteral2;
final int intVar3 = intLiteral4;
HashEntry<K, V> hashentry<k,v>Var5 = hashentry<k,v>Literal6;
HashEntry<K, V> hashentry<k,v>Var7 = hashentry<k,v>Literal8;
while (hashentry<k,v>Var7 != null) {
if (((ReferenceEntry<K, V>) hashentry<k,v>Var7).purge(ref)) {
if (hashentry<k,v>Var5 == null) {
data[intVar3] = hashentry<k,v>Var7.next;
} else {
hashentry<k,v>Var5.next = hashentry<k,v>Var7.next;
}
this.size--;
return;
}
hashentry<k,v>Var5 = hashentry<k,v>Var7;
hashentry<k,v>Var7 = hashentry<k,v>Var7.next;
}
}"
2273,PERFORMANCE,URF_UNREAD_FIELD,FP,collections,337,"V currentValue, nextValue;","V currentValue, nextValue;","V vVar1, vVar2;"
2276,DODGY_CODE,SF_SWITCH_FALLTHROUGH,FP,collections,340,"delegateMap.put(key3, value3);
case 2:
delegateMap.put(key2, value2);
","private void convertToMap() {
delegateMap = createDelegateMap();
switch(size) {
case 3:
delegateMap.put(key3, value3);
case 2:
delegateMap.put(key2, value2);
case 1:
delegateMap.put(key1, value1);
case 0:
break;
default:
throw new IllegalStateException(""Invalid map index: "" + size);
}
size = 0;
hash1 = hash2 = hash3 = 0;
key1 = key2 = key3 = null;
value1 = value2 = value3 = null;
}","private void convertToMap() {
delegateMap = createDelegateMap();
switch(size) {
case 3:
delegateMap.put(key3, value3);
case 2:
delegateMap.put(key2, value2);
case 1:
delegateMap.put(key1, value1);
case 0:
break;
default:
throw new IllegalStateException(""Invalid map index: "" + size);
}
size = 0;
hash1 = hash2 = hash3 = 0;
key1 = key2 = key3 = null;
value1 = value2 = value3 = null;
}"
2277,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,collections,341,"moveToMRU((LinkEntry<K, V>) entry);  
","@Override
protected void updateEntry(final HashEntry<K, V> entry, final V newValue) {
moveToMRU((LinkEntry<K, V>) entry);
entry.setValue(newValue);
}","@Override
protected void updateEntry(final HashEntry<K, V> entry, final V newValue) {
moveToMRU((LinkEntry<K, V>) entry);
entry.setValue(newValue);
}"
2278,DODGY_CODE,CI_CONFUSED_INHERITANCE,FP,collections,342,"protected Node<K, V> next;","protected Node<K, V> next;","protected Node<K, V> node<k,v>Var1;"
2284,DODGY_CODE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,FP,collections,348,protected final AbstractMapMultiSet<E> parent;,protected final AbstractMapMultiSet<E> parent;,protected final AbstractMapMultiSet<E> abstractmapmultiset<e>Var1;
2285,DODGY_CODE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,FP,collections,349,"return (Set<E>) super.decorated();
","@Override
protected Set<E> decorated() {
return (Set<E>) super.decorated();
}","@Override
protected Set<E> decorated() {
return (Set<E>) super.decorated();
}"
2301,BAD_PRACTICE,SE_BAD_FIELD,FP,collections,365,"private final Transformer<? super I, ? extends O> transformer;","private final Transformer<? super I, ? extends O> transformer;","private final Transformer<? super I, ? extends O> transformer<? super i,? extends o>Var1;"
2320,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,collections,384,"final LinkEntry<K, V> link = (LinkEntry<K, V>) entry;
","@Override
protected void removeEntry(final HashEntry<K, V> entry, final int hashIndex, final HashEntry<K, V> previous) {
final LinkEntry<K, V> link = (LinkEntry<K, V>) entry;
link.before.after = link.after;
link.after.before = link.before;
link.after = null;
link.before = null;
super.removeEntry(entry, hashIndex, previous);
}","@Override
protected void removeEntry(final HashEntry<K, V> entry, final int hashIndex, final HashEntry<K, V> previous) {
final LinkEntry<K, V> linkentry<k,v>Var1 = linkentry<k,v>Literal2;
linkentry<k,v>Var1.before.after = linkentry<k,v>Var1.after;
linkentry<k,v>Var1.after.before = linkentry<k,v>Var1.before;
linkentry<k,v>Var1.after = null;
linkentry<k,v>Var1.before = null;
super.removeEntry(entry, hashIndex, previous);
}"
2325,DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,collections,389,"entry = entry.next();
","protected ReferenceEntry<K, V> nextEntry() {
checkMod();
if (nextNull() && !hasNext()) {
throw new NoSuchElementException();
}
previous = entry;
entry = entry.next();
currentKey = nextKey;
currentValue = nextValue;
nextKey = null;
nextValue = null;
return previous;
}","protected ReferenceEntry<K, V> nextEntry() {
checkMod();
if (nextNull() && !hasNext()) {
throw new NoSuchElementException();
}
previous = entry;
entry = entry.next();
currentKey = nextKey;
currentValue = nextValue;
nextKey = null;
nextValue = null;
return previous;
}"
2331,DODGY_CODE,SF_SWITCH_FALLTHROUGH,FP,collections,395,"delegateMap.put(key3, value3);
case 2:
delegateMap.put(key2, value2);
","private void convertToMap() {
delegateMap = createDelegateMap();
switch(size) {
case 3:
delegateMap.put(key3, value3);
case 2:
delegateMap.put(key2, value2);
case 1:
delegateMap.put(key1, value1);
case 0:
break;
default:
throw new IllegalStateException(""Invalid map index: "" + size);
}
size = 0;
hash1 = hash2 = hash3 = 0;
key1 = key2 = key3 = null;
value1 = value2 = value3 = null;
}","private void convertToMap() {
delegateMap = createDelegateMap();
switch(size) {
case 3:
delegateMap.put(key3, value3);
case 2:
delegateMap.put(key2, value2);
case 1:
delegateMap.put(key1, value1);
case 0:
break;
default:
throw new IllegalStateException(""Invalid map index: "" + size);
}
size = 0;
hash1 = hash2 = hash3 = 0;
key1 = key2 = key3 = null;
value1 = value2 = value3 = null;
}"
2332,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,collections,396,"moveToMRU((LinkEntry<K, V>) entry);  
","@Override
protected void updateEntry(final HashEntry<K, V> entry, final V newValue) {
moveToMRU((LinkEntry<K, V>) entry);
entry.setValue(newValue);
}","@Override
protected void updateEntry(final HashEntry<K, V> entry, final V newValue) {
moveToMRU((LinkEntry<K, V>) entry);
entry.setValue(newValue);
}"
2335,DODGY_CODE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,FP,collections,399,"final List<V> list = ListUtils.emptyIfNull((List<V>) getMapping());
","public V remove(int index) {
final List<V> list = ListUtils.emptyIfNull((List<V>) getMapping());
V value = list.remove(index);
if (list.isEmpty()) {
AbstractListValuedMap.this.remove(key);
}
return value;
}","public V remove(int index) {
final List<V> list<v>Var1 = list<v>Literal2;
V vVar3 = vLiteral4;
if (list<v>Var1.isEmpty()) {
AbstractListValuedMap.this.remove(key);
}
return vVar3;
}"
2340,DODGY_CODE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,FP,collections,404,"final List<V> list = ListUtils.emptyIfNull((List<V>) getMapping());
","public int lastIndexOf(Object o) {
final List<V> list = ListUtils.emptyIfNull((List<V>) getMapping());
return list.indexOf(o);
}","public int lastIndexOf(Object o) {
final List<V> list<v>Var1 = list<v>Literal2;
return list<v>Var1.indexOf(o);
}"
2342,DODGY_CODE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,FP,collections,406,"List<V> list = (List<V>) getMapping();
","@SuppressWarnings(""unchecked"")
public void add(int index, V value) {
List<V> list = (List<V>) getMapping();
if (list == null) {
list = (List<V>) AbstractListValuedMap.this.createCollection();
list.add(index, value);
getMap().put((K) key, list);
}
list.add(index, value);
}","@SuppressWarnings(""unchecked"")
public void add(int index, V value) {
List<V> list<v>Var1 = list<v>Literal2;
if (list<v>Var1 == null) {
list<v>Var1 = (List<V>) AbstractListValuedMap.this.createCollection();
list<v>Var1.add(index, value);
getMap().put((K) key, list<v>Var1);
}
list<v>Var1.add(index, value);
}"
2345,DODGY_CODE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,FP,collections,409,"final List<V> list = ListUtils.emptyIfNull((List<V>) getMapping());
","public V get(int index) {
final List<V> list = ListUtils.emptyIfNull((List<V>) getMapping());
return list.get(index);
}","public V get(int index) {
final List<V> list<v>Var1 = list<v>Literal2;
return list<v>Var1.get(index);
}"
2349,PERFORMANCE,DM_NUMBER_CTOR,FP,collections,413,"this.collectionFactory = new InstantiateFactory<C>(collectionClazz, new Class[] { Integer.TYPE },
","@SuppressWarnings(""unchecked"")
protected <C extends Collection<V>> AbstractMultiValuedMap(final Map<K, ? super C> map, final Class<C> collectionClazz, final int initialCollectionCapacity) {
if (map == null) {
throw new IllegalArgumentException(""Map must not be null"");
}
if (initialCollectionCapacity < 0) {
throw new IllegalArgumentException(""Illegal Capacity: "" + initialCollectionCapacity);
}
this.map = (Map<K, Collection<V>>) map;
this.collectionFactory = new InstantiateFactory<C>(collectionClazz, new Class[] { Integer.TYPE }, new Object[] { new Integer(initialCollectionCapacity) });
}","@SuppressWarnings(""unchecked"")
protected <C extends Collection<V>> AbstractMultiValuedMap(final Map<K, ? super C> map, final Class<C> collectionClazz, final int initialCollectionCapacity) {
if (map == null) {
throw new IllegalArgumentException(""Map must not be null"");
}
if (initialCollectionCapacity < 0) {
throw new IllegalArgumentException(""Illegal Capacity: "" + initialCollectionCapacity);
}
this.map = (Map<K, Collection<V>>) map;
this.collectionFactory = new InstantiateFactory<C>(collectionClazz, new Class[] { Integer.TYPE }, new Object[] { new Integer(initialCollectionCapacity) });
}"
2353,BAD_PRACTICE,SE_BAD_FIELD,FP,collections,417,"private final Transformer<? super K, ? extends K> keyTransformer;","private final Transformer<? super K, ? extends K> keyTransformer;","private final Transformer<? super K, ? extends K> transformer<? super k,? extends k>Var1;"
2363,BAD_PRACTICE,SE_BAD_FIELD,FP,collections,427,private final Comparator<O> decorated;,private final Comparator<O> decorated;,private final Comparator<O> comparator<o>Var1;
2364,BAD_PRACTICE,SE_BAD_FIELD,FP,collections,428,private final Predicate<? super T> iPredicate1;,private final Predicate<? super T> iPredicate1;,private final Predicate<? super T> predicate<? super t>Var1;
2370,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,collections,434,"return null;
","@SuppressWarnings(""unchecked"")
static <T> Predicate<T>[] copy(final Predicate<? super T>... predicates) {
if (predicates == null) {
return null;
}
return (Predicate<T>[]) predicates.clone();
}","@SuppressWarnings(""unchecked"")
static <T> Predicate<T>[] copy(final Predicate<? super T>... predicates) {
if (predicates == null) {
return null;
}
return (Predicate<T>[]) predicates.clone();
}"
2373,BAD_PRACTICE,SE_BAD_FIELD,FP,collections,437,private final Predicate<? super T> iPredicate;,private final Predicate<? super T> iPredicate;,private final Predicate<? super T> predicate<? super t>Var1;
2374,BAD_PRACTICE,SE_BAD_FIELD,FP,collections,438,private final Predicate<? super T> iPredicate;,private final Predicate<? super T> iPredicate;,private final Predicate<? super T> predicate<? super t>Var1;
2377,BAD_PRACTICE,SE_BAD_FIELD,FP,collections,441,private final Closure<? super E> iDefault;,private final Closure<? super E> iDefault;,private final Closure<? super E> closure<? super e>Var1;
2379,BAD_PRACTICE,SE_BAD_FIELD,FP,collections,443,private final Predicate<? super T> iPredicate;,private final Predicate<? super T> iPredicate;,private final Predicate<? super T> predicate<? super t>Var1;
2382,DODGY_CODE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,FP,collections,446,"return (List<E>) super.decorated();
","@Override
protected List<E> decorated() {
return (List<E>) super.decorated();
}","@Override
protected List<E> decorated() {
return (List<E>) super.decorated();
}"
2386,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,collections,450,"final LinkEntry<K, V> link = (LinkEntry<K, V>) entry;
","@Override
protected void addEntry(final HashEntry<K, V> entry, final int hashIndex) {
final LinkEntry<K, V> link = (LinkEntry<K, V>) entry;
link.after = header;
link.before = header.before;
header.before.after = link;
header.before = link;
data[hashIndex] = link;
}","@Override
protected void addEntry(final HashEntry<K, V> entry, final int hashIndex) {
final LinkEntry<K, V> linkentry<k,v>Var1 = linkentry<k,v>Literal2;
linkentry<k,v>Var1.after = header;
linkentry<k,v>Var1.before = header.before;
header.before.after = linkentry<k,v>Var1;
header.before = linkentry<k,v>Var1;
data[hashIndex] = linkentry<k,v>Var1;
}"
2392,BAD_PRACTICE,HE_HASHCODE_USE_OBJECT_EQUALS,FP,collections,456,"return hash;
","@Override
public int hashCode() {
return hash;
}","@Override
public int hashCode() {
return hash;
}"
2393,DODGY_CODE,SF_SWITCH_FALLTHROUGH,FP,collections,457,"buf.append(',');
case 2:
buf.append(key2 == this ? ""(this Map)"" : key2);
","@Override
public String toString() {
if (delegateMap != null) {
return delegateMap.toString();
}
if (size == 0) {
return ""{}"";
}
final StringBuilder buf = new StringBuilder(128);
buf.append('{');
switch(size) {
case 3:
buf.append(key3 == this ? ""(this Map)"" : key3);
buf.append('=');
buf.append(value3 == this ? ""(this Map)"" : value3);
buf.append(',');
case 2:
buf.append(key2 == this ? ""(this Map)"" : key2);
buf.append('=');
buf.append(value2 == this ? ""(this Map)"" : value2);
buf.append(',');
case 1:
buf.append(key1 == this ? ""(this Map)"" : key1);
buf.append('=');
buf.append(value1 == this ? ""(this Map)"" : value1);
break;
default:
throw new IllegalStateException(""Invalid map index: "" + size);
}
buf.append('}');
return buf.toString();
}","@Override
public String toString() {
if (delegateMap != null) {
return delegateMap.toString();
}
if (size == 0) {
return ""{}"";
}
final StringBuilder stringbuilderVar1 = stringbuilderLiteral2;
stringbuilderVar1.append('{');
switch(size) {
case 3:
stringbuilderVar1.append(key3 == this ? ""(this Map)"" : key3);
stringbuilderVar1.append('=');
stringbuilderVar1.append(value3 == this ? ""(this Map)"" : value3);
stringbuilderVar1.append(',');
case 2:
stringbuilderVar1.append(key2 == this ? ""(this Map)"" : key2);
stringbuilderVar1.append('=');
stringbuilderVar1.append(value2 == this ? ""(this Map)"" : value2);
stringbuilderVar1.append(',');
case 1:
stringbuilderVar1.append(key1 == this ? ""(this Map)"" : key1);
stringbuilderVar1.append('=');
stringbuilderVar1.append(value1 == this ? ""(this Map)"" : value1);
break;
default:
throw new IllegalStateException(""Invalid map index: "" + size);
}
stringbuilderVar1.append('}');
return stringbuilderVar1.toString();
}"
2399,BAD_PRACTICE,SE_BAD_FIELD,FP,collections,463,"private final Transformer<? super K, ? extends K> keyTransformer;","private final Transformer<? super K, ? extends K> keyTransformer;","private final Transformer<? super K, ? extends K> transformer<? super k,? extends k>Var1;"
2401,DODGY_CODE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,FP,collections,465,"return (Set<E>) super.decorated();
","@Override
protected Set<E> decorated() {
return (Set<E>) super.decorated();
}","@Override
protected Set<E> decorated() {
return (Set<E>) super.decorated();
}"
2479,DODGY_CODE,DMI_NONSERIALIZABLE_OBJECT_WRITTEN,FP,collections,543,"out.writeObject(comparator());
","private void writeObject(final ObjectOutputStream out) throws IOException {
out.defaultWriteObject();
out.writeObject(comparator());
super.doWriteObject(out);
}","private void writeObject(final ObjectOutputStream out) throws IOException {
out.defaultWriteObject();
out.writeObject(comparator());
super.doWriteObject(out);
}"
2480,DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,collections,544,"final V value = last.getValue();
","@Override
public void remove() {
if (canRemove == false) {
throw new IllegalStateException(""Iterator remove() can only be called once after next()"");
}
final V value = last.getValue();
iterator.remove();
parent.reverseMap.remove(value);
last = null;
canRemove = false;
}","@Override
public void remove() {
if (canRemove == false) {
throw new IllegalStateException(""Iterator remove() can only be called once after next()"");
}
final V vVar1 = vLiteral2;
iterator.remove();
parent.reverseMap.remove(vVar1);
last = null;
canRemove = false;
}"
2483,DODGY_CODE,EQ_UNUSUAL,FP,collections,547,"return TreeBidiMap.this.doEquals(obj, DataElement.VALUE);
","@Override
public boolean equals(final Object obj) {
return TreeBidiMap.this.doEquals(obj, DataElement.VALUE);
}","@Override
public boolean equals(final Object obj) {
return TreeBidiMap.this.doEquals(obj, DataElement.VALUE);
}"
2488,BAD_PRACTICE,SE_BAD_FIELD,FP,collections,552,"protected final Transformer<? super E, ? extends E> transformer;","protected final Transformer<? super E, ? extends E> transformer;","protected final Transformer<? super E, ? extends E> transformer<? super e,? extends e>Var1;"
2505,BAD_PRACTICE,SE_BAD_FIELD,FP,collections,569,private final Predicate<? super T> iPredicate;,private final Predicate<? super T> iPredicate;,private final Predicate<? super T> predicate<? super t>Var1;
2513,BAD_PRACTICE,SE_BAD_FIELD,FP,collections,577,"private final Transformer<? super T, ? extends T> iTransformer;","private final Transformer<? super T, ? extends T> iTransformer;","private final Transformer<? super T, ? extends T> transformer<? super t,? extends t>Var1;"
2515,BAD_PRACTICE,SE_BAD_FIELD,FP,collections,579,"private final Transformer<? super T, Boolean> iTransformer;","private final Transformer<? super T, Boolean> iTransformer;","private final Transformer<? super T, Boolean> transformer<? super t,boolean>Var1;"
2516,MALICIOUS_CODE,EI_EXPOSE_REP2,FP,collections,580,"this.array = array;
","public ObjectArrayIterator(final E[] array, final int start, final int end) {
if (start < 0) {
throw new ArrayIndexOutOfBoundsException(""Start index must not be less than zero"");
}
if (end > array.length) {
throw new ArrayIndexOutOfBoundsException(""End index must not be greater than the array length"");
}
if (start > array.length) {
throw new ArrayIndexOutOfBoundsException(""Start index must not be greater than the array length"");
}
if (end < start) {
throw new IllegalArgumentException(""End index must not be less than start index"");
}
this.array = array;
this.startIndex = start;
this.endIndex = end;
this.index = start;
}","public ObjectArrayIterator(final E[] array, final int start, final int end) {
if (start < 0) {
throw new ArrayIndexOutOfBoundsException(""Start index must not be less than zero"");
}
if (end > array.length) {
throw new ArrayIndexOutOfBoundsException(""End index must not be greater than the array length"");
}
if (start > array.length) {
throw new ArrayIndexOutOfBoundsException(""Start index must not be greater than the array length"");
}
if (end < start) {
throw new IllegalArgumentException(""End index must not be less than start index"");
}
this.array = array;
this.startIndex = start;
this.endIndex = end;
this.index = start;
}"
2519,BAD_PRACTICE,SE_BAD_FIELD,FP,collections,583,private final Factory<? extends E> factory;,private final Factory<? extends E> factory;,private final Factory<? extends E> factory<? extends e>Var1;
2521,DODGY_CODE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,FP,collections,585,"return (List<E>) decorated();
","protected List<E> getList() {
return (List<E>) decorated();
}","protected List<E> getList() {
return (List<E>) decorated();
}"
2536,DODGY_CODE,CI_CONFUSED_INHERITANCE,FP,collections,600,protected K key;,protected K key;,protected K kVar1;
2539,DODGY_CODE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,FP,collections,603,"final ArrayList<V> list = (ArrayList<V>) coll;
","public void trimToSize() {
for (final Collection<V> coll : getMap().values()) {
final ArrayList<V> list = (ArrayList<V>) coll;
list.trimToSize();
}
}","public void trimToSize() {
for (final Collection<V> collection<v>Var1 : getMap().values()) {
final ArrayList<V> arraylist<v>Var2 = arraylist<v>Literal3;
arraylist<v>Var2.trimToSize();
}
}"
2541,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,collections,605,"return (UnmodifiableMultiValuedMap<K, V>) map;
","@SuppressWarnings(""unchecked"")
public static <K, V> UnmodifiableMultiValuedMap<K, V> unmodifiableMultiValuedMap(final MultiValuedMap<? extends K, ? extends V> map) {
if (map instanceof Unmodifiable) {
return (UnmodifiableMultiValuedMap<K, V>) map;
}
return new UnmodifiableMultiValuedMap<>(map);
}","@SuppressWarnings(""unchecked"")
public static <K, V> UnmodifiableMultiValuedMap<K, V> unmodifiableMultiValuedMap(final MultiValuedMap<? extends K, ? extends V> map) {
if (map instanceof Unmodifiable) {
return (UnmodifiableMultiValuedMap<K, V>) map;
}
return new UnmodifiableMultiValuedMap<>(map);
}"
2542,DODGY_CODE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,FP,collections,606,protected final AbstractMapMultiSet<E> parent;,protected final AbstractMapMultiSet<E> parent;,protected final AbstractMapMultiSet<E> abstractmapmultiset<e>Var1;
2546,DODGY_CODE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,FP,collections,610,"return (SortedSet<E>) decorated();
","protected SortedSet<E> getSortedSet() {
return (SortedSet<E>) decorated();
}","protected SortedSet<E> getSortedSet() {
return (SortedSet<E>) decorated();
}"
2551,DODGY_CODE,EQ_UNUSUAL,FP,collections,615,"return this.doEquals(obj, KEY);
","@Override
public boolean equals(final Object obj) {
return this.doEquals(obj, KEY);
}","@Override
public boolean equals(final Object obj) {
return this.doEquals(obj, KEY);
}"
2557,BAD_PRACTICE,SE_BAD_FIELD,FP,collections,621,"private final Transformer<? super T, ? extends T>[] iTransformers;","private final Transformer<? super T, ? extends T>[] iTransformers;","private final Transformer<? super T, ? extends T>[] transformer<? super t,? extends t>ArrayVar1;"
2561,BAD_PRACTICE,SE_BAD_FIELD,FP,collections,625,"private final Transformer<? super I, ? extends O> iFalseTransformer;","private final Transformer<? super I, ? extends O> iFalseTransformer;","private final Transformer<? super I, ? extends O> transformer<? super i,? extends o>Var1;"
2562,BAD_PRACTICE,SE_TRANSIENT_FIELD_NOT_RESTORED,FP,collections,626,private transient Method iCloneMethod;,private transient Method iCloneMethod;,private transient Method methodVar1;
2564,BAD_PRACTICE,SE_BAD_FIELD,FP,collections,628,"private final Transformer<? super T, ? extends T> iTransformer;","private final Transformer<? super T, ? extends T> iTransformer;","private final Transformer<? super T, ? extends T> transformer<? super t,? extends t>Var1;"
2569,MALICIOUS_CODE,EI_EXPOSE_REP2,FP,collections,633,"this.keys = keys;
","public MultiKey(final K[] keys, final boolean makeClone) {
super();
if (keys == null) {
throw new IllegalArgumentException(""The array of keys must not be null"");
}
if (makeClone) {
this.keys = keys.clone();
} else {
this.keys = keys;
}
calculateHashCode(keys);
}","public MultiKey(final K[] keys, final boolean makeClone) {
super();
if (keys == null) {
throw new IllegalArgumentException(""The array of keys must not be null"");
}
if (makeClone) {
this.keys = keys.clone();
} else {
this.keys = keys;
}
calculateHashCode(keys);
}"
2571,DODGY_CODE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,FP,collections,635,"return (List<E>) super.decorated();
","@Override
protected List<E> decorated() {
return (List<E>) super.decorated();
}","@Override
protected List<E> decorated() {
return (List<E>) super.decorated();
}"
2572,DODGY_CODE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,FP,collections,636,"return (List<E>) decorated();
","protected List<E> getList() {
return (List<E>) decorated();
}","protected List<E> getList() {
return (List<E>) decorated();
}"
2577,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,collections,641,"final LinkEntry<K, V> link = (LinkEntry<K, V>) entry;
","@Override
protected void addEntry(final HashEntry<K, V> entry, final int hashIndex) {
final LinkEntry<K, V> link = (LinkEntry<K, V>) entry;
link.after = header;
link.before = header.before;
header.before.after = link;
header.before = link;
data[hashIndex] = link;
}","@Override
protected void addEntry(final HashEntry<K, V> entry, final int hashIndex) {
final LinkEntry<K, V> linkentry<k,v>Var1 = linkentry<k,v>Literal2;
linkentry<k,v>Var1.after = header;
linkentry<k,v>Var1.before = header.before;
header.before.after = linkentry<k,v>Var1;
header.before = linkentry<k,v>Var1;
data[hashIndex] = linkentry<k,v>Var1;
}"
2579,DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,collections,643,"entry = entry.next();
","protected ReferenceEntry<K, V> nextEntry() {
checkMod();
if (nextNull() && !hasNext()) {
throw new NoSuchElementException();
}
previous = entry;
entry = entry.next();
currentKey = nextKey;
currentValue = nextValue;
nextKey = null;
nextValue = null;
return previous;
}","protected ReferenceEntry<K, V> nextEntry() {
checkMod();
if (nextNull() && !hasNext()) {
throw new NoSuchElementException();
}
previous = entry;
entry = entry.next();
currentKey = nextKey;
currentValue = nextValue;
nextKey = null;
nextValue = null;
return previous;
}"
2609,DODGY_CODE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,FP,collections,673,"return (Set<E>) super.decorated();
","@Override
protected Set<E> decorated() {
return (Set<E>) super.decorated();
}","@Override
protected Set<E> decorated() {
return (Set<E>) super.decorated();
}"
2611,DODGY_CODE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,FP,collections,675,"return (SortedSet<E>) decorated();
","protected SortedSet<E> getSortedSet() {
return (SortedSet<E>) decorated();
}","protected SortedSet<E> getSortedSet() {
return (SortedSet<E>) decorated();
}"
2618,BAD_PRACTICE,SE_BAD_FIELD,FP,collections,682,"private final Transformer<C, K> keyTransformer;","private final Transformer<C, K> keyTransformer;","private final Transformer<C, K> transformer<c,k>Var1;"
2622,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,collections,686,"return null;
","@SuppressWarnings(""unchecked"")
static <T> Predicate<T>[] copy(final Predicate<? super T>... predicates) {
if (predicates == null) {
return null;
}
return (Predicate<T>[]) predicates.clone();
}","@SuppressWarnings(""unchecked"")
static <T> Predicate<T>[] copy(final Predicate<? super T>... predicates) {
if (predicates == null) {
return null;
}
return (Predicate<T>[]) predicates.clone();
}"
2625,BAD_PRACTICE,SE_BAD_FIELD,FP,collections,689,"private final Transformer<? super I, ? extends O> iFalseTransformer;","private final Transformer<? super I, ? extends O> iFalseTransformer;","private final Transformer<? super I, ? extends O> transformer<? super i,? extends o>Var1;"
2645,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,collections,709,"if (((ReferenceEntry<K, V>) entry).purge(ref)) {
","protected void purge(final Reference<?> ref) {
final int hash = ref.hashCode();
final int index = hashIndex(hash, data.length);
HashEntry<K, V> previous = null;
HashEntry<K, V> entry = data[index];
while (entry != null) {
if (((ReferenceEntry<K, V>) entry).purge(ref)) {
if (previous == null) {
data[index] = entry.next;
} else {
previous.next = entry.next;
}
this.size--;
return;
}
previous = entry;
entry = entry.next;
}
}","protected void purge(final Reference<?> ref) {
final int intVar1 = intLiteral2;
final int intVar3 = intLiteral4;
HashEntry<K, V> hashentry<k,v>Var5 = hashentry<k,v>Literal6;
HashEntry<K, V> hashentry<k,v>Var7 = hashentry<k,v>Literal8;
while (hashentry<k,v>Var7 != null) {
if (((ReferenceEntry<K, V>) hashentry<k,v>Var7).purge(ref)) {
if (hashentry<k,v>Var5 == null) {
data[intVar3] = hashentry<k,v>Var7.next;
} else {
hashentry<k,v>Var5.next = hashentry<k,v>Var7.next;
}
this.size--;
return;
}
hashentry<k,v>Var5 = hashentry<k,v>Var7;
hashentry<k,v>Var7 = hashentry<k,v>Var7.next;
}
}"
2647,BAD_PRACTICE,HE_HASHCODE_USE_OBJECT_EQUALS,FP,collections,711,"return hash;
","@Override
public int hashCode() {
return hash;
}","@Override
public int hashCode() {
return hash;
}"
2658,DODGY_CODE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,FP,collections,722,"final List<V> list = (List<V>) getMapping();
","@Override
public boolean equals(Object other) {
final List<V> list = (List<V>) getMapping();
if (list == null) {
return Collections.emptyList().equals(other);
}
if (other == null) {
return false;
}
if (!(other instanceof List)) {
return false;
}
List<?> otherList = (List<?>) other;
if (ListUtils.isEqualList(list, otherList) == false) {
return false;
}
return true;
}","@Override
public boolean equals(Object other) {
final List<V> list<v>Var1 = list<v>Literal2;
if (list<v>Var1 == null) {
return Collections.emptyList().equals(other);
}
if (other == null) {
return false;
}
if (!(other instanceof List)) {
return false;
}
List<?> list<?>Var3 = list<?>Literal4;
if (ListUtils.isEqualList(list<v>Var1, list<?>Var3) == false) {
return false;
}
return true;
}"
2662,DODGY_CODE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,FP,collections,726,"final List<V> list = (List<V>) getMapping();
","@Override
public int hashCode() {
final List<V> list = (List<V>) getMapping();
if (list == null) {
return Collections.emptyList().hashCode();
}
return ListUtils.hashCodeForList(list);
}","@Override
public int hashCode() {
final List<V> list<v>Var1 = list<v>Literal2;
if (list<v>Var1 == null) {
return Collections.emptyList().hashCode();
}
return ListUtils.hashCodeForList(list<v>Var1);
}"
2669,DODGY_CODE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,FP,collections,733,"final Set<V> set = (Set<V>) getMapping();
","@Override
public boolean equals(Object other) {
final Set<V> set = (Set<V>) getMapping();
if (set == null) {
return Collections.emptySet().equals(other);
}
if (other == null) {
return false;
}
if (!(other instanceof Set)) {
return false;
}
Set<?> otherSet = (Set<?>) other;
if (SetUtils.isEqualSet(set, otherSet) == false) {
return false;
}
return true;
}","@Override
public boolean equals(Object other) {
final Set<V> set<v>Var1 = set<v>Literal2;
if (set<v>Var1 == null) {
return Collections.emptySet().equals(other);
}
if (other == null) {
return false;
}
if (!(other instanceof Set)) {
return false;
}
Set<?> set<?>Var3 = set<?>Literal4;
if (SetUtils.isEqualSet(set<v>Var1, set<?>Var3) == false) {
return false;
}
return true;
}"
2670,DODGY_CODE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,FP,collections,734,"Set<V> valueSet = (Set<V>) entry.getValue();
","@Override
public int hashCode() {
int h = 0;
Iterator<Entry<K, Collection<V>>> it = getMap().entrySet().iterator();
while (it.hasNext()) {
Entry<K, Collection<V>> entry = it.next();
K key = entry.getKey();
Set<V> valueSet = (Set<V>) entry.getValue();
h += (key == null ? 0 : key.hashCode()) ^ SetUtils.hashCodeForSet(valueSet);
}
return h;
}","@Override
public int hashCode() {
int intVar1 = intLiteral2;
Iterator<Entry<K, Collection<V>>> iterator<entry<k,collection<v>>>Var3 = iterator<entry<k,collection<v>>>Literal4;
while (iterator<entry<k,collection<v>>>Var3.hasNext()) {
Entry<K, Collection<V>> entry<k,collection<v>>Var5 = entry<k,collection<v>>Literal6;
K kVar7 = kLiteral8;
Set<V> set<v>Var9 = set<v>Literal10;
intVar1 += (kVar7 == null ? 0 : kVar7.hashCode()) ^ SetUtils.hashCodeForSet(set<v>Var9);
}
return intVar1;
}"
2675,DODGY_CODE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,FP,collections,739,"return (SortedSet<E>) decorated();
","protected SortedSet<E> getSortedSet() {
return (SortedSet<E>) decorated();
}","protected SortedSet<E> getSortedSet() {
return (SortedSet<E>) decorated();
}"
2685,BAD_PRACTICE,SE_BAD_FIELD,FP,collections,749,"private final Transformer<? super T, ? extends T>[] iTransformers;","private final Transformer<? super T, ? extends T>[] iTransformers;","private final Transformer<? super T, ? extends T>[] transformer<? super t,? extends t>ArrayVar1;"
2704,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,collections,768,"final LinkEntry<K, V> link = (LinkEntry<K, V>) entry;
","@Override
protected void addEntry(final HashEntry<K, V> entry, final int hashIndex) {
final LinkEntry<K, V> link = (LinkEntry<K, V>) entry;
link.after = header;
link.before = header.before;
header.before.after = link;
header.before = link;
data[hashIndex] = link;
}","@Override
protected void addEntry(final HashEntry<K, V> entry, final int hashIndex) {
final LinkEntry<K, V> linkentry<k,v>Var1 = linkentry<k,v>Literal2;
linkentry<k,v>Var1.after = header;
linkentry<k,v>Var1.before = header.before;
header.before.after = linkentry<k,v>Var1;
header.before = linkentry<k,v>Var1;
data[hashIndex] = linkentry<k,v>Var1;
}"
2710,BAD_PRACTICE,HE_HASHCODE_USE_OBJECT_EQUALS,FP,collections,774,"return hash;
","@Override
public int hashCode() {
return hash;
}","@Override
public int hashCode() {
return hash;
}"
2711,BAD_PRACTICE,HE_HASHCODE_USE_OBJECT_EQUALS,FP,collections,775,"return hash;
","@Override
public int hashCode() {
return hash;
}","@Override
public int hashCode() {
return hash;
}"
2713,DODGY_CODE,SF_SWITCH_FALLTHROUGH,FP,collections,777,"buf.append(',');
case 2:
buf.append(key2 == this ? ""(this Map)"" : key2);
","@Override
public String toString() {
if (delegateMap != null) {
return delegateMap.toString();
}
if (size == 0) {
return ""{}"";
}
final StringBuilder buf = new StringBuilder(128);
buf.append('{');
switch(size) {
case 3:
buf.append(key3 == this ? ""(this Map)"" : key3);
buf.append('=');
buf.append(value3 == this ? ""(this Map)"" : value3);
buf.append(',');
case 2:
buf.append(key2 == this ? ""(this Map)"" : key2);
buf.append('=');
buf.append(value2 == this ? ""(this Map)"" : value2);
buf.append(',');
case 1:
buf.append(key1 == this ? ""(this Map)"" : key1);
buf.append('=');
buf.append(value1 == this ? ""(this Map)"" : value1);
break;
default:
throw new IllegalStateException(""Invalid map index: "" + size);
}
buf.append('}');
return buf.toString();
}","@Override
public String toString() {
if (delegateMap != null) {
return delegateMap.toString();
}
if (size == 0) {
return ""{}"";
}
final StringBuilder stringbuilderVar1 = stringbuilderLiteral2;
stringbuilderVar1.append('{');
switch(size) {
case 3:
stringbuilderVar1.append(key3 == this ? ""(this Map)"" : key3);
stringbuilderVar1.append('=');
stringbuilderVar1.append(value3 == this ? ""(this Map)"" : value3);
stringbuilderVar1.append(',');
case 2:
stringbuilderVar1.append(key2 == this ? ""(this Map)"" : key2);
stringbuilderVar1.append('=');
stringbuilderVar1.append(value2 == this ? ""(this Map)"" : value2);
stringbuilderVar1.append(',');
case 1:
stringbuilderVar1.append(key1 == this ? ""(this Map)"" : key1);
stringbuilderVar1.append('=');
stringbuilderVar1.append(value1 == this ? ""(this Map)"" : value1);
break;
default:
throw new IllegalStateException(""Invalid map index: "" + size);
}
stringbuilderVar1.append('}');
return stringbuilderVar1.toString();
}"
2716,DODGY_CODE,CI_CONFUSED_INHERITANCE,FP,collections,780,"protected Node<K, V> next;","protected Node<K, V> next;","protected Node<K, V> node<k,v>Var1;"
2723,DODGY_CODE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,FP,collections,787,"final List<V> list = ListUtils.emptyIfNull((List<V>) getMapping());
","public int lastIndexOf(Object o) {
final List<V> list = ListUtils.emptyIfNull((List<V>) getMapping());
return list.indexOf(o);
}","public int lastIndexOf(Object o) {
final List<V> list<v>Var1 = list<v>Literal2;
return list<v>Var1.indexOf(o);
}"
2724,DODGY_CODE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,FP,collections,788,"final List<V> list = ListUtils.emptyIfNull((List<V>) getMapping());
","public List<V> subList(int fromIndex, int toIndex) {
final List<V> list = ListUtils.emptyIfNull((List<V>) getMapping());
return list.subList(fromIndex, toIndex);
}","public List<V> subList(int fromIndex, int toIndex) {
final List<V> list<v>Var1 = list<v>Literal2;
return list<v>Var1.subList(fromIndex, toIndex);
}"
2727,DODGY_CODE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,FP,collections,791,"final List<V> list = (List<V>) getMapping();
","@Override
public int hashCode() {
final List<V> list = (List<V>) getMapping();
if (list == null) {
return Collections.emptyList().hashCode();
}
return ListUtils.hashCodeForList(list);
}","@Override
public int hashCode() {
final List<V> list<v>Var1 = list<v>Literal2;
if (list<v>Var1 == null) {
return Collections.emptyList().hashCode();
}
return ListUtils.hashCodeForList(list<v>Var1);
}"
2729,DODGY_CODE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,FP,collections,793,"final List<V> list = ListUtils.emptyIfNull((List<V>) getMapping());
","public V get(int index) {
final List<V> list = ListUtils.emptyIfNull((List<V>) getMapping());
return list.get(index);
}","public V get(int index) {
final List<V> list<v>Var1 = list<v>Literal2;
return list<v>Var1.get(index);
}"
2742,BAD_PRACTICE,NP_BOOLEAN_RETURN_NULL,FP,collections,806,"return null;
","public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key) {
if (map != null) {
final Object answer = map.get(key);
if (answer != null) {
if (answer instanceof Boolean) {
return (Boolean) answer;
}
if (answer instanceof String) {
return Boolean.valueOf((String) answer);
}
if (answer instanceof Number) {
final Number n = (Number) answer;
return n.intValue() != 0 ? Boolean.TRUE : Boolean.FALSE;
}
}
}
return null;
}","public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key) {
if (map != null) {
final Object objectVar1 = objectLiteral2;
if (objectVar1 != null) {
if (objectVar1 instanceof Boolean) {
return (Boolean) objectVar1;
}
if (objectVar1 instanceof String) {
return Boolean.valueOf((String) objectVar1);
}
if (objectVar1 instanceof Number) {
final Number numberVar3 = numberLiteral4;
return numberVar3.intValue() != 0 ? Boolean.TRUE : Boolean.FALSE;
}
}
}
return null;
}"
2762,BAD_PRACTICE,SE_BAD_FIELD,FP,collections,826,"private final Transformer<? super T, ? extends T> iTransformer;","private final Transformer<? super T, ? extends T> iTransformer;","private final Transformer<? super T, ? extends T> transformer<? super t,? extends t>Var1;"
2763,BAD_PRACTICE,SE_BAD_FIELD,FP,collections,827,"private final Transformer<? super E, ?> iTransformer;","private final Transformer<? super E, ?> iTransformer;","private final Transformer<? super E, ?> transformer<? super e,?>Var1;"
2774,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,collections,838,"final LinkEntry<K, V> link = (LinkEntry<K, V>) entry;
","@Override
protected void addEntry(final HashEntry<K, V> entry, final int hashIndex) {
final LinkEntry<K, V> link = (LinkEntry<K, V>) entry;
link.after = header;
link.before = header.before;
header.before.after = link;
header.before = link;
data[hashIndex] = link;
}","@Override
protected void addEntry(final HashEntry<K, V> entry, final int hashIndex) {
final LinkEntry<K, V> linkentry<k,v>Var1 = linkentry<k,v>Literal2;
linkentry<k,v>Var1.after = header;
linkentry<k,v>Var1.before = header.before;
header.before.after = linkentry<k,v>Var1;
header.before = linkentry<k,v>Var1;
data[hashIndex] = linkentry<k,v>Var1;
}"
2777,DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,collections,841,"entry = entry.next();
","protected ReferenceEntry<K, V> nextEntry() {
checkMod();
if (nextNull() && !hasNext()) {
throw new NoSuchElementException();
}
previous = entry;
entry = entry.next();
currentKey = nextKey;
currentValue = nextValue;
nextKey = null;
nextValue = null;
return previous;
}","protected ReferenceEntry<K, V> nextEntry() {
checkMod();
if (nextNull() && !hasNext()) {
throw new NoSuchElementException();
}
previous = entry;
entry = entry.next();
currentKey = nextKey;
currentValue = nextValue;
nextKey = null;
nextValue = null;
return previous;
}"
2784,DODGY_CODE,SF_SWITCH_FALLTHROUGH,FP,collections,848,"total += hash3 ^ (value3 == null ? 0 : value3.hashCode());
case 2:
total += hash2 ^ (value2 == null ? 0 : value2.hashCode());
","@Override
public int hashCode() {
if (delegateMap != null) {
return delegateMap.hashCode();
}
int total = 0;
switch(size) {
case 3:
total += hash3 ^ (value3 == null ? 0 : value3.hashCode());
case 2:
total += hash2 ^ (value2 == null ? 0 : value2.hashCode());
case 1:
total += hash1 ^ (value1 == null ? 0 : value1.hashCode());
case 0:
break;
default:
throw new IllegalStateException(""Invalid map index: "" + size);
}
return total;
}","@Override
public int hashCode() {
if (delegateMap != null) {
return delegateMap.hashCode();
}
int intVar1 = intLiteral2;
switch(size) {
case 3:
intVar1 += hash3 ^ (value3 == null ? 0 : value3.hashCode());
case 2:
intVar1 += hash2 ^ (value2 == null ? 0 : value2.hashCode());
case 1:
intVar1 += hash1 ^ (value1 == null ? 0 : value1.hashCode());
case 0:
break;
default:
throw new IllegalStateException(""Invalid map index: "" + size);
}
return intVar1;
}"
2790,DODGY_CODE,REC_CATCH_EXCEPTION,FP,configuration,1,"catch (Exception e)
","public InputSource resolveEntity(String publicId, String systemId) throws SAXException {
String resolved = resolver.getResolvedEntity(publicId, systemId);
if (resolved != null) {
String badFilePrefix = ""file://"";
String correctFilePrefix = ""file:///"";
if (resolved.startsWith(badFilePrefix) && !resolved.startsWith(correctFilePrefix)) {
resolved = correctFilePrefix + resolved.substring(badFilePrefix.length());
}
try {
InputSource iSource = new InputSource(resolved);
iSource.setPublicId(publicId);
URL url = new URL(resolved);
InputStream iStream = url.openStream();
iSource.setByteStream(iStream);
return iSource;
} catch (Exception e) {
log.debug(""Failed to create InputSource for "" + resolved + "" ("" + e.toString() + "")"");
return null;
}
}
return null;
}","public InputSource resolveEntity(String publicId, String systemId) throws SAXException {
String stringVar1 = stringLiteral2;
if (stringVar1 != null) {
String stringVar3 = stringLiteral4;
String stringVar5 = stringLiteral6;
if (stringVar1.startsWith(stringVar3) && !stringVar1.startsWith(stringVar5)) {
stringVar1 = stringVar5 + stringVar1.substring(stringVar3.length());
}
try {
InputSource inputsourceVar7 = inputsourceLiteral8;
inputsourceVar7.setPublicId(publicId);
URL urlVar9 = urlLiteral10;
InputStream inputstreamVar11 = inputstreamLiteral12;
inputsourceVar7.setByteStream(inputstreamVar11);
return inputsourceVar7;
} catch (Exception e) {
log.debug(""Failed to create InputSource for "" + stringVar1 + "" ("" + e.toString() + "")"");
return null;
}
}
return null;
}"
2798,DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,TP,configuration,9,".get(positionToIndex(getPosition())));
","public NodePointer getNodePointer() {
if (getPosition() < 1 && !setPosition(1)) {
return null;
}
return createNodePointer((ConfigurationNode) subNodes.get(positionToIndex(getPosition())));
}","public NodePointer getNodePointer() {
if (getPosition() < 1 && !setPosition(1)) {
return null;
}
return createNodePointer((ConfigurationNode) subNodes.get(positionToIndex(getPosition())));
}"
2807,PERFORMANCE,DM_NUMBER_CTOR,TP,configuration,18,"value = array.length == 0 ? null : new Byte(array[0]);
","protected Object resolveContainerStore(String key) {
Object value = getProperty(key);
if (value != null) {
if (value instanceof List) {
List list = (List) value;
value = list.isEmpty() ? null : list.get(0);
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
value = array.length == 0 ? null : array[0];
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
value = array.length == 0 ? null : array[0] ? Boolean.TRUE : Boolean.FALSE;
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
value = array.length == 0 ? null : new Byte(array[0]);
} else if (value instanceof short[]) {
short[] array = (short[]) value;
value = array.length == 0 ? null : new Short(array[0]);
} else if (value instanceof int[]) {
int[] array = (int[]) value;
value = array.length == 0 ? null : new Integer(array[0]);
} else if (value instanceof long[]) {
long[] array = (long[]) value;
value = array.length == 0 ? null : new Long(array[0]);
} else if (value instanceof float[]) {
float[] array = (float[]) value;
value = array.length == 0 ? null : new Float(array[0]);
} else if (value instanceof double[]) {
double[] array = (double[]) value;
value = array.length == 0 ? null : new Double(array[0]);
}
}
return value;
}","protected Object resolveContainerStore(String key) {
Object objectVar1 = objectLiteral2;
if (objectVar1 != null) {
if (objectVar1 instanceof List) {
List listVar3 = listLiteral4;
objectVar1 = listVar3.isEmpty() ? null : listVar3.get(0);
} else if (objectVar1 instanceof Object[]) {
Object[] objectArrayVar5 = objectArrayLiteral6;
objectVar1 = objectArrayVar5.length == 0 ? null : objectArrayVar5[0];
} else if (objectVar1 instanceof boolean[]) {
boolean[] objectArrayVar5 = booleanArrayLiteral7;
objectVar1 = objectArrayVar5.length == 0 ? null : objectArrayVar5[0] ? Boolean.TRUE : Boolean.FALSE;
} else if (objectVar1 instanceof byte[]) {
byte[] objectArrayVar5 = byteArrayLiteral8;
objectVar1 = objectArrayVar5.length == 0 ? null : new Byte(objectArrayVar5[0]);
} else if (objectVar1 instanceof short[]) {
short[] objectArrayVar5 = shortArrayLiteral9;
objectVar1 = objectArrayVar5.length == 0 ? null : new Short(objectArrayVar5[0]);
} else if (objectVar1 instanceof int[]) {
int[] objectArrayVar5 = intArrayLiteral10;
objectVar1 = objectArrayVar5.length == 0 ? null : new Integer(objectArrayVar5[0]);
} else if (objectVar1 instanceof long[]) {
long[] objectArrayVar5 = longArrayLiteral11;
objectVar1 = objectArrayVar5.length == 0 ? null : new Long(objectArrayVar5[0]);
} else if (objectVar1 instanceof float[]) {
float[] objectArrayVar5 = floatArrayLiteral12;
objectVar1 = objectArrayVar5.length == 0 ? null : new Float(objectArrayVar5[0]);
} else if (objectVar1 instanceof double[]) {
double[] objectArrayVar5 = doubleArrayLiteral13;
objectVar1 = objectArrayVar5.length == 0 ? null : new Double(objectArrayVar5[0]);
}
}
return objectVar1;
}"
2812,PERFORMANCE,DM_NUMBER_CTOR,TP,configuration,23,"value = array.length == 0 ? null : new Integer(array[0]);
","protected Object resolveContainerStore(String key) {
Object value = getProperty(key);
if (value != null) {
if (value instanceof List) {
List list = (List) value;
value = list.isEmpty() ? null : list.get(0);
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
value = array.length == 0 ? null : array[0];
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
value = array.length == 0 ? null : array[0] ? Boolean.TRUE : Boolean.FALSE;
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
value = array.length == 0 ? null : new Byte(array[0]);
} else if (value instanceof short[]) {
short[] array = (short[]) value;
value = array.length == 0 ? null : new Short(array[0]);
} else if (value instanceof int[]) {
int[] array = (int[]) value;
value = array.length == 0 ? null : new Integer(array[0]);
} else if (value instanceof long[]) {
long[] array = (long[]) value;
value = array.length == 0 ? null : new Long(array[0]);
} else if (value instanceof float[]) {
float[] array = (float[]) value;
value = array.length == 0 ? null : new Float(array[0]);
} else if (value instanceof double[]) {
double[] array = (double[]) value;
value = array.length == 0 ? null : new Double(array[0]);
}
}
return value;
}","protected Object resolveContainerStore(String key) {
Object objectVar1 = objectLiteral2;
if (objectVar1 != null) {
if (objectVar1 instanceof List) {
List listVar3 = listLiteral4;
objectVar1 = listVar3.isEmpty() ? null : listVar3.get(0);
} else if (objectVar1 instanceof Object[]) {
Object[] objectArrayVar5 = objectArrayLiteral6;
objectVar1 = objectArrayVar5.length == 0 ? null : objectArrayVar5[0];
} else if (objectVar1 instanceof boolean[]) {
boolean[] objectArrayVar5 = booleanArrayLiteral7;
objectVar1 = objectArrayVar5.length == 0 ? null : objectArrayVar5[0] ? Boolean.TRUE : Boolean.FALSE;
} else if (objectVar1 instanceof byte[]) {
byte[] objectArrayVar5 = byteArrayLiteral8;
objectVar1 = objectArrayVar5.length == 0 ? null : new Byte(objectArrayVar5[0]);
} else if (objectVar1 instanceof short[]) {
short[] objectArrayVar5 = shortArrayLiteral9;
objectVar1 = objectArrayVar5.length == 0 ? null : new Short(objectArrayVar5[0]);
} else if (objectVar1 instanceof int[]) {
int[] objectArrayVar5 = intArrayLiteral10;
objectVar1 = objectArrayVar5.length == 0 ? null : new Integer(objectArrayVar5[0]);
} else if (objectVar1 instanceof long[]) {
long[] objectArrayVar5 = longArrayLiteral11;
objectVar1 = objectArrayVar5.length == 0 ? null : new Long(objectArrayVar5[0]);
} else if (objectVar1 instanceof float[]) {
float[] objectArrayVar5 = floatArrayLiteral12;
objectVar1 = objectArrayVar5.length == 0 ? null : new Float(objectArrayVar5[0]);
} else if (objectVar1 instanceof double[]) {
double[] objectArrayVar5 = doubleArrayLiteral13;
objectVar1 = objectArrayVar5.length == 0 ? null : new Double(objectArrayVar5[0]);
}
}
return objectVar1;
}"
2813,CORRECTNESS,NP_GUARANTEED_DEREF,FP,configuration,24,"file = new File(fileName);
","static File constructFile(String basePath, String fileName) {
File file;
File absolute = null;
if (fileName != null) {
absolute = new File(fileName);
}
if (StringUtils.isEmpty(basePath) || (absolute != null && absolute.isAbsolute())) {
file = new File(fileName);
} else {
file = new File(appendPath(basePath, fileName));
}
return file;
}","static File constructFile(String basePath, String fileName) {
File fileVar1;
File fileVar2 = fileLiteral3;
if (fileName != null) {
fileVar2 = new File(fileName);
}
if (StringUtils.isEmpty(basePath) || (fileVar2 != null && fileVar2.isAbsolute())) {
fileVar1 = new File(fileName);
} else {
fileVar1 = new File(appendPath(basePath, fileName));
}
return fileVar1;
}"
2822,SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,TP,configuration,33,"pstmt = conn.prepareStatement(query.toString());
","public Object getProperty(String key) {
Object result = null;
StringBuilder query = new StringBuilder(""SELECT * FROM "");
query.append(table).append("" WHERE "");
query.append(keyColumn).append(""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
ResultSet rs = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
rs = pstmt.executeQuery();
List<Object> results = new ArrayList<Object>();
while (rs.next()) {
Object value = rs.getObject(valueColumn);
if (isDelimiterParsingDisabled()) {
results.add(value);
} else {
Iterator<?> it = PropertyConverter.toIterator(value, getListDelimiter());
while (it.hasNext()) {
results.add(it.next());
}
}
}
if (!results.isEmpty()) {
result = (results.size() > 1) ? results : results.get(0);
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
close(conn, pstmt, rs);
}
return result;
}","public Object getProperty(String key) {
Object objectVar1 = objectLiteral2;
StringBuilder stringbuilderVar3 = stringbuilderLiteral4;
stringbuilderVar3.append(table).append("" WHERE "");
stringbuilderVar3.append(keyColumn).append(""=?"");
if (nameColumn != null) {
stringbuilderVar3.append("" AND "" + nameColumn + ""=?"");
}
Connection connectionVar5 = objectLiteral2;
PreparedStatement preparedstatementVar6 = objectLiteral2;
ResultSet resultsetVar7 = objectLiteral2;
try {
connectionVar5 = getConnection();
preparedstatementVar6 = connectionVar5.prepareStatement(stringbuilderVar3.toString());
preparedstatementVar6.setString(1, key);
if (nameColumn != null) {
preparedstatementVar6.setString(2, name);
}
resultsetVar7 = preparedstatementVar6.executeQuery();
List<Object> list<object>Var8 = list<object>Literal9;
while (resultsetVar7.next()) {
Object objectVar10 = objectLiteral11;
if (isDelimiterParsingDisabled()) {
list<object>Var8.add(objectVar10);
} else {
Iterator<?> iterator<?>Var12 = iterator<?>Literal13;
while (iterator<?>Var12.hasNext()) {
list<object>Var8.add(iterator<?>Var12.next());
}
}
}
if (!list<object>Var8.isEmpty()) {
objectVar1 = (list<object>Var8.size() > 1) ? list<object>Var8 : list<object>Var8.get(0);
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
close(connectionVar5, preparedstatementVar6, resultsetVar7);
}
return objectVar1;
}"
2826,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,configuration,37,"return new ConfigurationNodePointer((ConfigurationNodePointer) parent,
","@Override
@SuppressWarnings(""unchecked"")
public NodePointer createNodePointer(final NodePointer parent, final QName name, final Object bean) {
if (bean instanceof NodeWrapper) {
final NodeWrapper<?> wrapper = (NodeWrapper<?>) bean;
return new ConfigurationNodePointer((ConfigurationNodePointer) parent, wrapper.getNode(), wrapper.getNodeHandler());
}
return null;
}","@Override
@SuppressWarnings(""unchecked"")
public NodePointer createNodePointer(final NodePointer parent, final QName name, final Object bean) {
if (bean instanceof NodeWrapper) {
final NodeWrapper<?> nodewrapper<?>Var1 = nodewrapper<?>Literal2;
return new ConfigurationNodePointer((ConfigurationNodePointer) parent, nodewrapper<?>Var1.getNode(), nodewrapper<?>Var1.getNodeHandler());
}
return null;
}"
2827,PERFORMANCE,DM_FP_NUMBER_CTOR,TP,configuration,38,"return new Float(n.floatValue());
","public static Float toFloat(final Object value) throws ConversionException {
final Number n = toNumber(value, Float.class);
if (n instanceof Float) {
return (Float) n;
}
return new Float(n.floatValue());
}","public static Float toFloat(final Object value) throws ConversionException {
final Number numberVar1 = numberLiteral2;
if (numberVar1 instanceof Float) {
return (Float) numberVar1;
}
return new Float(numberVar1.floatValue());
}"
2828,BAD_PRACTICE,DE_MIGHT_IGNORE,TP,configuration,39,"catch (Exception ex)
","protected void performReloadCheck() {
for (Iterator it = configurations.iterator(); it.hasNext(); ) {
try {
((ConfigData) it.next()).getConfiguration().getProperty(PROP_RELOAD_CHECK);
} catch (Exception ex) {
;
}
}
}","protected void performReloadCheck() {
for (Iterator iteratorVar3 = iteratorLiteral4; iteratorVar1.hasNext(); ) {
try {
((ConfigData) iteratorVar1.next()).getConfiguration().getProperty(PROP_RELOAD_CHECK);
} catch (Exception ex) {
;
}
}
}"
2832,BAD_PRACTICE,SE_BAD_FIELD_STORE,TP,configuration,43,private final ConversionHandler dataConversionHandler;,private final ConversionHandler dataConversionHandler;,private final ConversionHandler conversionhandlerVar1;
2843,CORRECTNESS,NP_GUARANTEED_DEREF,FP,configuration,54,"if (fileName.startsWith(""."" + File.separator))
","static File constructFile(String basePath, String fileName) {
File file = null;
File absolute = null;
if (fileName != null) {
absolute = new File(fileName);
}
if (StringUtils.isEmpty(basePath) || (absolute != null && absolute.isAbsolute())) {
file = new File(fileName);
} else {
StringBuffer fName = new StringBuffer();
fName.append(basePath);
if (!basePath.endsWith(File.separator)) {
fName.append(File.separator);
}
if (fileName.startsWith(""."" + File.separator)) {
fName.append(fileName.substring(2));
} else {
fName.append(fileName);
}
file = new File(fName.toString());
}
return file;
}","static File constructFile(String basePath, String fileName) {
File fileVar1 = fileLiteral2;
File fileVar3 = fileLiteral2;
if (fileName != null) {
fileVar3 = new File(fileName);
}
if (StringUtils.isEmpty(basePath) || (fileVar3 != null && fileVar3.isAbsolute())) {
fileVar1 = new File(fileName);
} else {
StringBuffer stringbufferVar4 = stringbufferLiteral5;
stringbufferVar4.append(basePath);
if (!basePath.endsWith(File.separator)) {
stringbufferVar4.append(File.separator);
}
if (fileName.startsWith(""."" + File.separator)) {
stringbufferVar4.append(fileName.substring(2));
} else {
stringbufferVar4.append(fileName);
}
fileVar1 = new File(stringbufferVar4.toString());
}
return fileVar1;
}"
2851,SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,TP,configuration,62,"pstmt = conn.prepareStatement(query.toString());
","@Override
protected void clearPropertyDirect(String key) {
StringBuilder query = new StringBuilder(""DELETE FROM "" + table + "" WHERE "" + keyColumn + ""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
pstmt.executeUpdate();
commitIfRequired(conn);
} catch (SQLException e) {
fireError(EVENT_CLEAR_PROPERTY, key, null, e);
} finally {
close(conn, pstmt, null);
}
}","@Override
protected void clearPropertyDirect(String key) {
StringBuilder stringbuilderVar1 = stringbuilderLiteral2;
if (nameColumn != null) {
stringbuilderVar1.append("" AND "" + nameColumn + ""=?"");
}
Connection connectionVar3 = connectionLiteral4;
PreparedStatement preparedstatementVar5 = connectionLiteral4;
try {
connectionVar3 = getConnection();
preparedstatementVar5 = connectionVar3.prepareStatement(stringbuilderVar1.toString());
preparedstatementVar5.setString(1, key);
if (nameColumn != null) {
preparedstatementVar5.setString(2, name);
}
preparedstatementVar5.executeUpdate();
commitIfRequired(connectionVar3);
} catch (SQLException e) {
fireError(EVENT_CLEAR_PROPERTY, key, null, e);
} finally {
close(connectionVar3, preparedstatementVar5, null);
}
}"
2868,DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,TP,configuration,79,"return createNodePointer(subNodes.get(positionToIndex(getPosition())));
","@Override
public NodePointer getNodePointer() {
if (getPosition() < 1 && !setPosition(1)) {
return null;
}
return createNodePointer(subNodes.get(positionToIndex(getPosition())));
}","@Override
public NodePointer getNodePointer() {
if (getPosition() < 1 && !setPosition(1)) {
return null;
}
return createNodePointer(subNodes.get(positionToIndex(getPosition())));
}"
2872,CORRECTNESS,NP_GUARANTEED_DEREF,FP,configuration,83,"file = new File(fileName);
","static File constructFile(String basePath, String fileName) {
File file;
File absolute = null;
if (fileName != null) {
absolute = new File(fileName);
}
if (StringUtils.isEmpty(basePath) || (absolute != null && absolute.isAbsolute())) {
file = new File(fileName);
} else {
StringBuilder fName = new StringBuilder();
fName.append(basePath);
if (!basePath.endsWith(File.separator)) {
fName.append(File.separator);
}
if (fileName.startsWith(""."" + File.separator)) {
fName.append(fileName.substring(2));
} else {
fName.append(fileName);
}
file = new File(fName.toString());
}
return file;
}","static File constructFile(String basePath, String fileName) {
File fileVar1;
File fileVar2 = fileLiteral3;
if (fileName != null) {
fileVar2 = new File(fileName);
}
if (StringUtils.isEmpty(basePath) || (fileVar2 != null && fileVar2.isAbsolute())) {
fileVar1 = new File(fileName);
} else {
StringBuilder stringbuilderVar4 = stringbuilderLiteral5;
stringbuilderVar4.append(basePath);
if (!basePath.endsWith(File.separator)) {
stringbuilderVar4.append(File.separator);
}
if (fileName.startsWith(""."" + File.separator)) {
stringbuilderVar4.append(fileName.substring(2));
} else {
stringbuilderVar4.append(fileName);
}
fileVar1 = new File(stringbuilderVar4.toString());
}
return fileVar1;
}"
2874,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,configuration,85,"Token token = null;
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
{
case QUOTED_STRING:
token = jj_consume_token(QUOTED_STRING);
return unescapeQuotes(removeQuotes(token.image));
case STRING:
token = jj_consume_token(STRING);
return token.image;
default:
jj_la1[5] = jj_gen;
jj_consume_token(-1);
throw new ParseException();
","final public String String() throws ParseException {
Token token = null;
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case QUOTED_STRING:
token = jj_consume_token(QUOTED_STRING);
return unescapeQuotes(removeQuotes(token.image));
case STRING:
token = jj_consume_token(STRING);
return token.image;
default:
jj_la1[5] = jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
}","final public String String() throws ParseException {
Token tokenVar1 = tokenLiteral2;
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case QUOTED_STRING:
tokenVar1 = jj_consume_token(QUOTED_STRING);
return unescapeQuotes(removeQuotes(tokenVar1.image));
case STRING:
tokenVar1 = jj_consume_token(STRING);
return tokenVar1.image;
default:
jj_la1[5] = jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
}"
2877,DODGY_CODE,REC_CATCH_EXCEPTION,FP,configuration,88,"catch (final Exception e)
","@Override
public void read(final Reader in) throws ConfigurationException {
final SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setNamespaceAware(false);
factory.setValidating(true);
try {
final SAXParser parser = factory.newSAXParser();
final XMLReader xmlReader = parser.getXMLReader();
xmlReader.setEntityResolver((publicId, systemId) -> new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd"")));
xmlReader.setContentHandler(new XMLPropertiesHandler());
xmlReader.parse(new InputSource(in));
} catch (final Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
// todo: support included properties ?
}","@Override
public void read(final Reader in) throws ConfigurationException {
final SAXParserFactory saxparserfactoryVar1 = saxparserfactoryLiteral2;
saxparserfactoryVar1.setNamespaceAware(false);
saxparserfactoryVar1.setValidating(true);
try {
final SAXParser saxparserVar3 = saxparserLiteral4;
final XMLReader xmlreaderVar5 = xmlreaderLiteral6;
xmlreaderVar5.setEntityResolver((publicId, systemId) -> new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd"")));
xmlreaderVar5.setContentHandler(new XMLPropertiesHandler());
xmlreaderVar5.parse(new InputSource(in));
} catch (final Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
// todo: support included properties ?
}"
2890,CORRECTNESS,NP_GUARANTEED_DEREF,FP,configuration,101,"if (fileName.startsWith(""."" + File.separator))
","static File constructFile(String basePath, String fileName) {
File file;
File absolute = null;
if (fileName != null) {
absolute = new File(fileName);
}
if (StringUtils.isEmpty(basePath) || (absolute != null && absolute.isAbsolute())) {
file = new File(fileName);
} else {
StringBuilder fName = new StringBuilder();
fName.append(basePath);
if (!basePath.endsWith(File.separator)) {
fName.append(File.separator);
}
if (fileName.startsWith(""."" + File.separator)) {
fName.append(fileName.substring(2));
} else {
fName.append(fileName);
}
file = new File(fName.toString());
}
return file;
}","static File constructFile(String basePath, String fileName) {
File fileVar1;
File fileVar2 = fileLiteral3;
if (fileName != null) {
fileVar2 = new File(fileName);
}
if (StringUtils.isEmpty(basePath) || (fileVar2 != null && fileVar2.isAbsolute())) {
fileVar1 = new File(fileName);
} else {
StringBuilder stringbuilderVar4 = stringbuilderLiteral5;
stringbuilderVar4.append(basePath);
if (!basePath.endsWith(File.separator)) {
stringbuilderVar4.append(File.separator);
}
if (fileName.startsWith(""."" + File.separator)) {
stringbuilderVar4.append(fileName.substring(2));
} else {
stringbuilderVar4.append(fileName);
}
fileVar1 = new File(stringbuilderVar4.toString());
}
return fileVar1;
}"
2928,DODGY_CODE,REC_CATCH_EXCEPTION,FP,configuration,139,"catch (final Exception e)
","static Object toInternetAddress(final Object value) throws ConversionException {
if (value.getClass().getName().equals(INTERNET_ADDRESS_CLASSNAME)) {
return value;
}
if (!(value instanceof String)) {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"");
}
try {
final Constructor<?> ctor = Class.forName(INTERNET_ADDRESS_CLASSNAME).getConstructor(String.class);
return ctor.newInstance(value);
} catch (final Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"", e);
}
}","static Object toInternetAddress(final Object value) throws ConversionException {
if (value.getClass().getName().equals(INTERNET_ADDRESS_CLASSNAME)) {
return value;
}
if (!(value instanceof String)) {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"");
}
try {
final Constructor<?> constructor<?>Var1 = constructor<?>Literal2;
return constructor<?>Var1.newInstance(value);
} catch (final Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"", e);
}
}"
2932,CORRECTNESS,NP_GUARANTEED_DEREF,FP,configuration,143,"if (fileName.startsWith(""."" + File.separator))
","static File constructFile(String basePath, String fileName) {
File file;
File absolute = null;
if (fileName != null) {
absolute = new File(fileName);
}
if (StringUtils.isEmpty(basePath) || (absolute != null && absolute.isAbsolute())) {
file = new File(fileName);
} else {
StringBuilder fName = new StringBuilder();
fName.append(basePath);
if (!basePath.endsWith(File.separator)) {
fName.append(File.separator);
}
if (fileName.startsWith(""."" + File.separator)) {
fName.append(fileName.substring(2));
} else {
fName.append(fileName);
}
file = new File(fName.toString());
}
return file;
}","static File constructFile(String basePath, String fileName) {
File fileVar1;
File fileVar2 = fileLiteral3;
if (fileName != null) {
fileVar2 = new File(fileName);
}
if (StringUtils.isEmpty(basePath) || (fileVar2 != null && fileVar2.isAbsolute())) {
fileVar1 = new File(fileName);
} else {
StringBuilder stringbuilderVar4 = stringbuilderLiteral5;
stringbuilderVar4.append(basePath);
if (!basePath.endsWith(File.separator)) {
stringbuilderVar4.append(File.separator);
}
if (fileName.startsWith(""."" + File.separator)) {
stringbuilderVar4.append(fileName.substring(2));
} else {
stringbuilderVar4.append(fileName);
}
fileVar1 = new File(stringbuilderVar4.toString());
}
return fileVar1;
}"
2936,MALICIOUS_CODE,EI_EXPOSE_REP,TP,configuration,147,"return configurations;
","public Configuration[] getConfigurations() {
return configurations;
}","public Configuration[] getConfigurations() {
return configurations;
}"
2937,DODGY_CODE,BC_UNCONFIRMED_CAST,TP,configuration,148,"hc = new BaseHierarchicalConfiguration((HierarchicalConfiguration) conf);
","public static HierarchicalConfiguration convertToHierarchical(Configuration conf, ExpressionEngine engine) {
if (conf == null) {
return null;
}
if (conf instanceof HierarchicalConfiguration) {
HierarchicalConfiguration hc;
if (conf instanceof Reloadable) {
Object lock = ((Reloadable) conf).getReloadLock();
synchronized (lock) {
hc = new BaseHierarchicalConfiguration((HierarchicalConfiguration) conf);
}
} else {
hc = (HierarchicalConfiguration) conf;
}
if (engine != null) {
hc.setExpressionEngine(engine);
}
return hc;
} else {
BaseHierarchicalConfiguration hc = new BaseHierarchicalConfiguration();
if (engine != null) {
hc.setExpressionEngine(engine);
}
hc.append(conf);
return hc;
}
}","public static HierarchicalConfiguration convertToHierarchical(Configuration conf, ExpressionEngine engine) {
if (conf == null) {
return null;
}
if (conf instanceof HierarchicalConfiguration) {
HierarchicalConfiguration hierarchicalconfigurationVar1;
if (conf instanceof Reloadable) {
Object objectVar2 = objectLiteral3;
synchronized (objectVar2) {
hierarchicalconfigurationVar1 = new BaseHierarchicalConfiguration((HierarchicalConfiguration) conf);
}
} else {
hierarchicalconfigurationVar1 = (HierarchicalConfiguration) conf;
}
if (engine != null) {
hierarchicalconfigurationVar1.setExpressionEngine(engine);
}
return hierarchicalconfigurationVar1;
} else {
BaseHierarchicalConfiguration hierarchicalconfigurationVar1 = basehierarchicalconfigurationLiteral4;
if (engine != null) {
hierarchicalconfigurationVar1.setExpressionEngine(engine);
}
hierarchicalconfigurationVar1.append(conf);
return hierarchicalconfigurationVar1;
}
}"
2938,CORRECTNESS,NP_GUARANTEED_DEREF,FP,configuration,149,"file = new File(fileName);
","static File constructFile(String basePath, String fileName) {
File file;
File absolute = null;
if (fileName != null) {
absolute = new File(fileName);
}
if (StringUtils.isEmpty(basePath) || (absolute != null && absolute.isAbsolute())) {
file = new File(fileName);
} else {
StringBuilder fName = new StringBuilder();
fName.append(basePath);
if (!basePath.endsWith(File.separator)) {
fName.append(File.separator);
}
if (fileName.startsWith(""."" + File.separator)) {
fName.append(fileName.substring(2));
} else {
fName.append(fileName);
}
file = new File(fName.toString());
}
return file;
}","static File constructFile(String basePath, String fileName) {
File fileVar1;
File fileVar2 = fileLiteral3;
if (fileName != null) {
fileVar2 = new File(fileName);
}
if (StringUtils.isEmpty(basePath) || (fileVar2 != null && fileVar2.isAbsolute())) {
fileVar1 = new File(fileName);
} else {
StringBuilder stringbuilderVar4 = stringbuilderLiteral5;
stringbuilderVar4.append(basePath);
if (!basePath.endsWith(File.separator)) {
stringbuilderVar4.append(File.separator);
}
if (fileName.startsWith(""."" + File.separator)) {
stringbuilderVar4.append(fileName.substring(2));
} else {
stringbuilderVar4.append(fileName);
}
fileVar1 = new File(stringbuilderVar4.toString());
}
return fileVar1;
}"
2948,SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,TP,configuration,159,"pstmt = conn.prepareStatement(query.toString());
","public Iterator<String> getKeys() {
Collection<String> keys = new ArrayList<String>();
StringBuilder query = new StringBuilder(""SELECT DISTINCT "" + keyColumn + "" FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
ResultSet rs = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
rs = pstmt.executeQuery();
while (rs.next()) {
keys.add(rs.getString(1));
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(conn, pstmt, rs);
}
return keys.iterator();
}","public Iterator<String> getKeys() {
Collection<String> collection<string>Var1 = collection<string>Literal2;
StringBuilder stringbuilderVar3 = stringbuilderLiteral4;
if (nameColumn != null) {
stringbuilderVar3.append("" WHERE "" + nameColumn + ""=?"");
}
Connection connectionVar5 = connectionLiteral6;
PreparedStatement preparedstatementVar7 = connectionLiteral6;
ResultSet resultsetVar8 = connectionLiteral6;
try {
connectionVar5 = getConnection();
preparedstatementVar7 = connectionVar5.prepareStatement(stringbuilderVar3.toString());
if (nameColumn != null) {
preparedstatementVar7.setString(1, name);
}
resultsetVar8 = preparedstatementVar7.executeQuery();
while (resultsetVar8.next()) {
collection<string>Var1.add(resultsetVar8.getString(1));
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(connectionVar5, preparedstatementVar7, resultsetVar8);
}
return collection<string>Var1.iterator();
}"
2953,DODGY_CODE,IM_BAD_CHECK_FOR_ODD,TP,configuration,164,"return count % 2 == 1;
","private boolean hasDelimiter() {
int count = 0;
for (int idx = keyBuffer.length() - 1; idx >= 0 && keyBuffer.charAt(idx) == PROPERTY_DELIMITER; idx--) {
count++;
}
return count % 2 == 1;
}","private boolean hasDelimiter() {
int intVar1 = intLiteral2;
for (int intVar5 = intLiteral6; intVar3 >= 0 && intLiteral1; intVar3--) {
intVar1++;
}
return intVar1 % 2 == 1;
}"
2954,DODGY_CODE,REC_CATCH_EXCEPTION,FP,configuration,165,"catch (Exception e)
","public boolean reload(boolean checkReload) {
synchronized (reloadLock) {
if (noReload == 0) {
try {
enterNoReload();
if (strategy.reloadingRequired()) {
if (getLogger().isInfoEnabled()) {
getLogger().info(""Reloading configuration. URL is "" + getURL());
}
fireEvent(EVENT_RELOAD, null, getURL(), true);
setDetailEvents(false);
boolean autoSaveBak = this.isAutoSave();
this.setAutoSave(false);
try {
clear();
load();
} finally {
this.setAutoSave(autoSaveBak);
setDetailEvents(true);
}
fireEvent(EVENT_RELOAD, null, getURL(), false);
strategy.reloadingPerformed();
}
} catch (Exception e) {
fireError(EVENT_RELOAD, null, null, e);
if (checkReload) {
return false;
}
} finally {
exitNoReload();
}
}
}
return true;
}","public boolean reload(boolean checkReload) {
synchronized (reloadLock) {
if (noReload == 0) {
try {
enterNoReload();
if (strategy.reloadingRequired()) {
if (getLogger().isInfoEnabled()) {
getLogger().info(""Reloading configuration. URL is "" + getURL());
}
fireEvent(EVENT_RELOAD, null, getURL(), true);
setDetailEvents(false);
boolean booleanVar1 = booleanLiteral2;
this.setAutoSave(false);
try {
clear();
load();
} finally {
this.setAutoSave(booleanVar1);
setDetailEvents(true);
}
fireEvent(EVENT_RELOAD, null, getURL(), false);
strategy.reloadingPerformed();
}
} catch (Exception e) {
fireError(EVENT_RELOAD, null, null, e);
if (checkReload) {
return false;
}
} finally {
exitNoReload();
}
}
}
return true;
}"
2960,DODGY_CODE,REC_CATCH_EXCEPTION,FP,configuration,171,"catch (final Exception ex)
","public static Synchronizer cloneSynchronizer(final Synchronizer sync) {
if (sync == null) {
throw new IllegalArgumentException(""Synchronizer must not be null!"");
}
if (NoOpSynchronizer.INSTANCE == sync) {
return sync;
}
try {
return sync.getClass().newInstance();
} catch (final Exception ex) {
LOG.info(""Cannot create new instance of "" + sync.getClass());
}
try {
return (Synchronizer) clone(sync);
} catch (final CloneNotSupportedException cnex) {
throw new ConfigurationRuntimeException(""Cannot clone Synchronizer "" + sync);
}
}","public static Synchronizer cloneSynchronizer(final Synchronizer sync) {
if (sync == null) {
throw new IllegalArgumentException(""Synchronizer must not be null!"");
}
if (NoOpSynchronizer.INSTANCE == sync) {
return sync;
}
try {
return sync.getClass().newInstance();
} catch (final Exception ex) {
LOG.info(""Cannot create new instance of "" + sync.getClass());
}
try {
return (Synchronizer) clone(sync);
} catch (final CloneNotSupportedException cnex) {
throw new ConfigurationRuntimeException(""Cannot clone Synchronizer "" + sync);
}
}"
2984,BAD_PRACTICE,SE_BAD_FIELD,FP,configuration,195,private ExpressionEngine conversionExpressionEngine;,private ExpressionEngine conversionExpressionEngine;,private ExpressionEngine expressionengineVar1;
2986,BAD_PRACTICE,SE_BAD_FIELD,FP,configuration,197,private List<ConfigData> configurations = new ArrayList<ConfigData>();,private List<ConfigData> configurations = new ArrayList<ConfigData>();,private List<ConfigData> list<configdata>Var1 = list<configdata>Literal2;
2987,PERFORMANCE,DM_FP_NUMBER_CTOR,TP,configuration,198,"value = array.length == 0 ? null : new Double(array[0]);
","protected Object resolveContainerStore(String key) {
Object value = getProperty(key);
if (value != null) {
if (value instanceof List) {
List list = (List) value;
value = list.isEmpty() ? null : list.get(0);
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
value = array.length == 0 ? null : array[0];
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
value = array.length == 0 ? null : array[0] ? Boolean.TRUE : Boolean.FALSE;
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
value = array.length == 0 ? null : new Byte(array[0]);
} else if (value instanceof short[]) {
short[] array = (short[]) value;
value = array.length == 0 ? null : new Short(array[0]);
} else if (value instanceof int[]) {
int[] array = (int[]) value;
value = array.length == 0 ? null : new Integer(array[0]);
} else if (value instanceof long[]) {
long[] array = (long[]) value;
value = array.length == 0 ? null : new Long(array[0]);
} else if (value instanceof float[]) {
float[] array = (float[]) value;
value = array.length == 0 ? null : new Float(array[0]);
} else if (value instanceof double[]) {
double[] array = (double[]) value;
value = array.length == 0 ? null : new Double(array[0]);
}
}
return value;
}","protected Object resolveContainerStore(String key) {
Object objectVar1 = objectLiteral2;
if (objectVar1 != null) {
if (objectVar1 instanceof List) {
List listVar3 = listLiteral4;
objectVar1 = listVar3.isEmpty() ? null : listVar3.get(0);
} else if (objectVar1 instanceof Object[]) {
Object[] objectArrayVar5 = objectArrayLiteral6;
objectVar1 = objectArrayVar5.length == 0 ? null : objectArrayVar5[0];
} else if (objectVar1 instanceof boolean[]) {
boolean[] objectArrayVar5 = booleanArrayLiteral7;
objectVar1 = objectArrayVar5.length == 0 ? null : objectArrayVar5[0] ? Boolean.TRUE : Boolean.FALSE;
} else if (objectVar1 instanceof byte[]) {
byte[] objectArrayVar5 = byteArrayLiteral8;
objectVar1 = objectArrayVar5.length == 0 ? null : new Byte(objectArrayVar5[0]);
} else if (objectVar1 instanceof short[]) {
short[] objectArrayVar5 = shortArrayLiteral9;
objectVar1 = objectArrayVar5.length == 0 ? null : new Short(objectArrayVar5[0]);
} else if (objectVar1 instanceof int[]) {
int[] objectArrayVar5 = intArrayLiteral10;
objectVar1 = objectArrayVar5.length == 0 ? null : new Integer(objectArrayVar5[0]);
} else if (objectVar1 instanceof long[]) {
long[] objectArrayVar5 = longArrayLiteral11;
objectVar1 = objectArrayVar5.length == 0 ? null : new Long(objectArrayVar5[0]);
} else if (objectVar1 instanceof float[]) {
float[] objectArrayVar5 = floatArrayLiteral12;
objectVar1 = objectArrayVar5.length == 0 ? null : new Float(objectArrayVar5[0]);
} else if (objectVar1 instanceof double[]) {
double[] objectArrayVar5 = doubleArrayLiteral13;
objectVar1 = objectArrayVar5.length == 0 ? null : new Double(objectArrayVar5[0]);
}
}
return objectVar1;
}"
2989,CORRECTNESS,UR_UNINIT_READ_CALLED_FROM_SUPER_CONSTRUCTOR,FP,configuration,200,"if (configs != null)
","@Override
public void setRootNode(ConfigurationNode rootNode) {
if (configs != null) {
this.getCurrentConfig().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}","@Override
public void setRootNode(ConfigurationNode rootNode) {
if (configs != null) {
this.getCurrentConfig().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}"
2992,CORRECTNESS,NP_GUARANTEED_DEREF,FP,configuration,203,"file = new File(fileName);
","static File constructFile(String basePath, String fileName) {
File file = null;
File absolute = null;
if (fileName != null) {
absolute = new File(fileName);
}
if (StringUtils.isEmpty(basePath) || (absolute != null && absolute.isAbsolute())) {
file = new File(fileName);
} else {
StringBuffer fName = new StringBuffer();
fName.append(basePath);
if (!basePath.endsWith(File.separator)) {
fName.append(File.separator);
}
if (fileName.startsWith(""."" + File.separator)) {
fName.append(fileName.substring(2));
} else {
fName.append(fileName);
}
file = new File(fName.toString());
}
return file;
}","static File constructFile(String basePath, String fileName) {
File fileVar1 = fileLiteral2;
File fileVar3 = fileLiteral2;
if (fileName != null) {
fileVar3 = new File(fileName);
}
if (StringUtils.isEmpty(basePath) || (fileVar3 != null && fileVar3.isAbsolute())) {
fileVar1 = new File(fileName);
} else {
StringBuffer stringbufferVar4 = stringbufferLiteral5;
stringbufferVar4.append(basePath);
if (!basePath.endsWith(File.separator)) {
stringbufferVar4.append(File.separator);
}
if (fileName.startsWith(""."" + File.separator)) {
stringbufferVar4.append(fileName.substring(2));
} else {
stringbufferVar4.append(fileName);
}
fileVar1 = new File(stringbufferVar4.toString());
}
return fileVar1;
}"
2994,DODGY_CODE,DB_DUPLICATE_SWITCH_CLAUSES,FP,configuration,205,"if ((jjbitVec0[i2] & l2) == 0L)
break;
if (kind > 19)
kind = 19;
jjCheckNAdd(3);
break;
","private final int jjMoveNfa_0(int startState, int curPos) {
int startsAt = 0;
jjnewStateCnt = 9;
int i = 1;
jjstateSet[0] = startState;
int kind = 0x7fffffff;
for (; ; ) {
if (++jjround == 0x7fffffff)
ReInitRounds();
if (curChar < 64) {
long l = 1L << curChar;
MatchLoop: do {
switch(jjstateSet[--i]) {
case 9:
if ((0xfffffffbffffffffL & l) != 0L)
jjCheckNAddStates(0, 2);
else if (curChar == 34) {
if (kind > 20)
kind = 20;
}
break;
case 10:
if ((0xd7ffecfaffffd9ffL & l) != 0L) {
if (kind > 19)
kind = 19;
jjCheckNAdd(3);
}
if ((0x3ff000100002600L & l) != 0L)
jjCheckNAddTwoStates(1, 2);
else if (curChar == 62) {
if (kind > 18)
kind = 18;
}
break;
case 0:
if ((0xd7ffecfaffffd9ffL & l) != 0L) {
if (kind > 19)
kind = 19;
jjCheckNAdd(3);
} else if (curChar == 34)
jjCheckNAddStates(0, 2);
if (curChar == 60)
jjCheckNAddTwoStates(1, 2);
break;
case 1:
if ((0x3ff000100002600L & l) != 0L)
jjCheckNAddTwoStates(1, 2);
break;
case 2:
if (curChar == 62 && kind > 18)
kind = 18;
break;
case 3:
if ((0xd7ffecfaffffd9ffL & l) == 0L)
break;
if (kind > 19)
kind = 19;
jjCheckNAdd(3);
break;
case 4:
case 6:
if (curChar == 34)
jjCheckNAddStates(0, 2);
break;
case 5:
if ((0xfffffffbffffffffL & l) != 0L)
jjCheckNAddStates(0, 2);
break;
case 8:
if (curChar == 34 && kind > 20)
kind = 20;
break;
default:
break;
}
} while (i != startsAt);
} else if (curChar < 128) {
long l = 1L << (curChar & 077);
MatchLoop: do {
switch(jjstateSet[--i]) {
case 9:
jjCheckNAddStates(0, 2);
if (curChar == 92)
jjstateSet[jjnewStateCnt++] = 6;
break;
case 10:
if ((0xd7ffffffffffffffL & l) != 0L) {
if (kind > 19)
kind = 19;
jjCheckNAdd(3);
}
if ((0x7e0000007eL & l) != 0L)
jjCheckNAddTwoStates(1, 2);
break;
case 0:
case 3:
if ((0xd7ffffffffffffffL & l) == 0L)
break;
if (kind > 19)
kind = 19;
jjCheckNAdd(3);
break;
case 1:
if ((0x7e0000007eL & l) != 0L)
jjCheckNAddTwoStates(1, 2);
break;
case 5:
jjCheckNAddStates(0, 2);
break;
case 7:
if (curChar == 92)
jjstateSet[jjnewStateCnt++] = 6;
break;
default:
break;
}
} while (i != startsAt);
} else {
int i2 = (curChar & 0xff) >> 6;
long l2 = 1L << (curChar & 077);
MatchLoop: do {
switch(jjstateSet[--i]) {
case 9:
case 5:
if ((jjbitVec0[i2] & l2) != 0L)
jjCheckNAddStates(0, 2);
break;
case 10:
case 3:
if ((jjbitVec0[i2] & l2) == 0L)
break;
if (kind > 19)
kind = 19;
jjCheckNAdd(3);
break;
case 0:
if ((jjbitVec0[i2] & l2) == 0L)
break;
if (kind > 19)
kind = 19;
jjCheckNAdd(3);
break;
default:
break;
}
} while (i != startsAt);
}
if (kind != 0x7fffffff) {
jjmatchedKind = kind;
jjmatchedPos = curPos;
kind = 0x7fffffff;
}
++curPos;
if ((i = jjnewStateCnt) == (startsAt = 9 - (jjnewStateCnt = startsAt)))
return curPos;
try {
curChar = input_stream.readChar();
} catch (IOException e) {
return curPos;
}
}
}","private final int jjMoveNfa_0(int startState, int curPos) {
int intVar1 = intLiteral2;
jjnewStateCnt = 9;
int intVar3 = intLiteral4;
jjstateSet[0] = startState;
int intVar5 = intLiteral6;
for (; ; ) {
if (++jjround == 0x7fffffff)
ReInitRounds();
if (curChar < 64) {
long longVar7 = longLiteral8;
MatchLoop: do {
switch(jjstateSet[--intVar3]) {
case 9:
if ((0xfffffffbffffffffL & longVar7) != 0L)
jjCheckNAddStates(0, 2);
else if (curChar == 34) {
if (intVar5 > 20)
intVar5 = 20;
}
break;
case 10:
if ((0xd7ffecfaffffd9ffL & longVar7) != 0L) {
if (intVar5 > 19)
intVar5 = 19;
jjCheckNAdd(3);
}
if ((0x3ff000100002600L & longVar7) != 0L)
jjCheckNAddTwoStates(1, 2);
else if (curChar == 62) {
if (intVar5 > 18)
intVar5 = 18;
}
break;
case 0:
if ((0xd7ffecfaffffd9ffL & longVar7) != 0L) {
if (intVar5 > 19)
intVar5 = 19;
jjCheckNAdd(3);
} else if (curChar == 34)
jjCheckNAddStates(0, 2);
if (curChar == 60)
jjCheckNAddTwoStates(1, 2);
break;
case 1:
if ((0x3ff000100002600L & longVar7) != 0L)
jjCheckNAddTwoStates(1, 2);
break;
case 2:
if (curChar == 62 && intVar5 > 18)
intVar5 = 18;
break;
case 3:
if ((0xd7ffecfaffffd9ffL & longVar7) == 0L)
break;
if (intVar5 > 19)
intVar5 = 19;
jjCheckNAdd(3);
break;
case 4:
case 6:
if (curChar == 34)
jjCheckNAddStates(0, 2);
break;
case 5:
if ((0xfffffffbffffffffL & longVar7) != 0L)
jjCheckNAddStates(0, 2);
break;
case 8:
if (curChar == 34 && intVar5 > 20)
intVar5 = 20;
break;
default:
break;
}
} while (intVar3 != intVar1);
} else if (curChar < 128) {
long longVar7 = longLiteral9;
MatchLoop: do {
switch(jjstateSet[--intVar3]) {
case 9:
jjCheckNAddStates(0, 2);
if (curChar == 92)
jjstateSet[jjnewStateCnt++] = 6;
break;
case 10:
if ((0xd7ffffffffffffffL & longVar7) != 0L) {
if (intVar5 > 19)
intVar5 = 19;
jjCheckNAdd(3);
}
if ((0x7e0000007eL & longVar7) != 0L)
jjCheckNAddTwoStates(1, 2);
break;
case 0:
case 3:
if ((0xd7ffffffffffffffL & longVar7) == 0L)
break;
if (intVar5 > 19)
intVar5 = 19;
jjCheckNAdd(3);
break;
case 1:
if ((0x7e0000007eL & longVar7) != 0L)
jjCheckNAddTwoStates(1, 2);
break;
case 5:
jjCheckNAddStates(0, 2);
break;
case 7:
if (curChar == 92)
jjstateSet[jjnewStateCnt++] = 6;
break;
default:
break;
}
} while (intVar3 != intVar1);
} else {
int intVar10 = intLiteral11;
long longVar12 = longLiteral9;
MatchLoop: do {
switch(jjstateSet[--intVar3]) {
case 9:
case 5:
if ((jjbitVec0[intVar10] & longVar12) != 0L)
jjCheckNAddStates(0, 2);
break;
case 10:
case 3:
if ((jjbitVec0[intVar10] & longVar12) == 0L)
break;
if (intVar5 > 19)
intVar5 = 19;
jjCheckNAdd(3);
break;
case 0:
if ((jjbitVec0[intVar10] & longVar12) == 0L)
break;
if (intVar5 > 19)
intVar5 = 19;
jjCheckNAdd(3);
break;
default:
break;
}
} while (intVar3 != intVar1);
}
if (intVar5 != 0x7fffffff) {
jjmatchedKind = intVar5;
jjmatchedPos = curPos;
intVar5 = 0x7fffffff;
}
++curPos;
if ((intVar3 = jjnewStateCnt) == (intVar1 = 9 - (jjnewStateCnt = intVar1)))
return curPos;
try {
curChar = input_stream.readChar();
} catch (IOException e) {
return curPos;
}
}
}"
3012,Multithreaded correctness,JLM_JSR166_UTILCONCURRENT_MONITORENTER,FP,configuration,223,"synchronized (listeners)
","public void setDetailEvents(boolean enable) {
synchronized (listeners) {
if (enable) {
detailEvents++;
} else {
detailEvents--;
}
}
}","public void setDetailEvents(boolean enable) {
synchronized (listeners) {
if (enable) {
detailEvents++;
} else {
detailEvents--;
}
}
}"
3411,PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,configuration,622,"{
@Override
protected Object interpolate(Object value)
{
return parent.interpolate(value);
}
@Override
public ConfigurationInterpolator getInterpolator()
{
return parent.getInterpolator();
","private void insertNewChildNodes(ImmutableNode node, ReferenceNodeHandler refHandler) {
Collection<ImmutableNode> subNodes = new LinkedList<ImmutableNode>(refHandler.getChildren(node));
Iterator<ImmutableNode> children = subNodes.iterator();
ImmutableNode sibling1;
ImmutableNode nd = null;
while (children.hasNext()) {
do {
sibling1 = nd;
nd = children.next();
} while (refHandler.getReference(nd) != null && children.hasNext());
if (refHandler.getReference(nd) == null) {
List<ImmutableNode> newNodes = new LinkedList<ImmutableNode>();
newNodes.add(nd);
while (children.hasNext()) {
nd = children.next();
if (refHandler.getReference(nd) == null) {
newNodes.add(nd);
} else {
break;
}
}
ImmutableNode sibling2 = (refHandler.getReference(nd) == null) ? null : nd;
for (ImmutableNode insertNode : newNodes) {
if (refHandler.getReference(insertNode) == null) {
insert(insertNode, node, sibling1, sibling2, refHandler);
sibling1 = insertNode;
}
}
}
}
}","private void insertNewChildNodes(ImmutableNode node, ReferenceNodeHandler refHandler) {
Collection<ImmutableNode> collection<immutablenode>Var1 = collection<immutablenode>Literal2;
Iterator<ImmutableNode> iterator<immutablenode>Var3 = iterator<immutablenode>Literal4;
ImmutableNode immutablenodeVar5;
ImmutableNode immutablenodeVar6 = immutablenodeLiteral7;
while (iterator<immutablenode>Var3.hasNext()) {
do {
immutablenodeVar5 = immutablenodeVar6;
immutablenodeVar6 = iterator<immutablenode>Var3.next();
} while (refHandler.getReference(immutablenodeVar6) != null && iterator<immutablenode>Var3.hasNext());
if (refHandler.getReference(immutablenodeVar6) == null) {
List<ImmutableNode> list<immutablenode>Var8 = list<immutablenode>Literal9;
list<immutablenode>Var8.add(immutablenodeVar6);
while (iterator<immutablenode>Var3.hasNext()) {
immutablenodeVar6 = iterator<immutablenode>Var3.next();
if (refHandler.getReference(immutablenodeVar6) == null) {
list<immutablenode>Var8.add(immutablenodeVar6);
} else {
break;
}
}
ImmutableNode immutablenodeVar10 = immutablenodeLiteral11;
for (ImmutableNode immutablenodeVar12 : list<immutablenode>Var8) {
if (refHandler.getReference(immutablenodeVar12) == null) {
insert(immutablenodeVar12, node, immutablenodeVar5, immutablenodeVar10, refHandler);
immutablenodeVar5 = immutablenodeVar12;
}
}
}
}
}"
3418,PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,configuration,629,"{
@Override
public void error(SAXParseException ex) throws SAXException
{
throw ex;
","@Override
public void read(InputStream in) throws ConfigurationException, IOException {
load(new InputSource(in));
}","@Override
public void read(InputStream in) throws ConfigurationException, IOException {
load(new InputSource(in));
}"
3425,Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,configuration,636,private AutoSaveListener autoSaveListener;,private AutoSaveListener autoSaveListener;,private AutoSaveListener autosavelistenerVar1;
3429,Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,configuration,640,private ReloadingController reloadingController;,private ReloadingController reloadingController;,private ReloadingController reloadingcontrollerVar1;
3431,PERFORMANCE,DM_FP_NUMBER_CTOR,FP,configuration,642,"return new Double(n.doubleValue());
","public static Double toDouble(Object value) throws ConversionException {
Number n = toNumber(value, Double.class);
if (n instanceof Double) {
return (Double) n;
} else {
return new Double(n.doubleValue());
}
}","public static Double toDouble(Object value) throws ConversionException {
Number numberVar1 = numberLiteral2;
if (numberVar1 instanceof Double) {
return (Double) numberVar1;
} else {
return new Double(numberVar1.doubleValue());
}
}"
3434,PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,configuration,645,"{
@Override
public String lookup(String key)
{
Object value = ip.resolve(key);
return (value != null) ? value.toString() : null;
","public void setValue(Object value) throws ConfigurationRuntimeException {
try {
if (!(value instanceof String)) {
this.value = value;
return;
}
String val = (String) value;
String name = StringUtils.removeStartIgnoreCase(val, CLASS);
Class<?> clazz = ClassUtils.getClass(name);
if (name.length() == val.length()) {
this.value = clazz.newInstance();
} else {
this.value = clazz;
}
} catch (Exception e) {
throw new ConfigurationRuntimeException(""Unable to create "" + value, e);
}
}","public void setValue(Object value) throws ConfigurationRuntimeException {
try {
if (!(value instanceof String)) {
this.value = value;
return;
}
String stringVar1 = stringLiteral2;
String stringVar3 = stringLiteral4;
Class<?> class<?>Var5 = class<?>Literal6;
if (stringVar3.length() == stringVar1.length()) {
this.value = class<?>Var5.newInstance();
} else {
this.value = class<?>Var5;
}
} catch (Exception e) {
throw new ConfigurationRuntimeException(""Unable to create "" + value, e);
}
}"
3442,PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,configuration,653,"{
@Override
public InputSource resolveEntity(String publicId, String systemId)
{
return new InputSource(getClass().getClassLoader()
.getResourceAsStream(""PropertyList-1.0.dtd""));
","@Override
public void read(Reader in) throws ConfigurationException {
EntityResolver resolver = new EntityResolver() {
@Override
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
};
XMLPropertyListHandler handler = new XMLPropertyListHandler();
try {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
getNodeModel().mergeRoot(handler.getResultBuilder().createNode(), null, null, null, this);
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}","@Override
public void read(Reader in) throws ConfigurationException {
EntityResolver entityresolverVar1 = entityresolverLiteral2;
XMLPropertyListHandler xmlpropertylisthandlerVar3 = xmlpropertylisthandlerLiteral4;
try {
SAXParserFactory saxparserfactoryVar5 = saxparserfactoryLiteral6;
saxparserfactoryVar5.setValidating(true);
SAXParser saxparserVar7 = saxparserLiteral8;
saxparserVar7.getXMLReader().setEntityResolver(entityresolverVar1);
saxparserVar7.getXMLReader().setContentHandler(xmlpropertylisthandlerVar3);
saxparserVar7.getXMLReader().parse(new InputSource(in));
getNodeModel().mergeRoot(xmlpropertylisthandlerVar3.getResultBuilder().createNode(), null, null, null, this);
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}"
3445,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,configuration,656,"ConfigurationInterpolator ci = ((CatalogManager) catalogManager).getInterpolator();
","@Override
protected String normalizeURI(String uriref) {
ConfigurationInterpolator ci = ((CatalogManager) catalogManager).getInterpolator();
String resolved = (ci != null) ? String.valueOf(ci.interpolate(uriref)) : uriref;
return super.normalizeURI(resolved);
}","@Override
protected String normalizeURI(String uriref) {
ConfigurationInterpolator configurationinterpolatorVar1 = configurationinterpolatorLiteral2;
String stringVar3 = stringLiteral4;
return super.normalizeURI(stringVar3);
}"
3447,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,configuration,658,"return (src != null) ? src.clone() : null;
","private static <T> T[] defensiveCopy(T[] src) {
return (src != null) ? src.clone() : null;
}","private static <T> T[] defensiveCopy(T[] src) {
return (src != null) ? src.clone() : null;
}"
3463,PERFORMANCE,DM_NUMBER_CTOR,FP,configuration,674,"return getByte(key, new Byte(defaultValue)).byteValue();
","public byte getByte(String key, byte defaultValue) {
return getByte(key, new Byte(defaultValue)).byteValue();
}","public byte getByte(String key, byte defaultValue) {
return getByte(key, new Byte(defaultValue)).byteValue();
}"
3469,I18N,DM_DEFAULT_ENCODING,FP,configuration,680,"writer = new OutputStreamWriter(out);
","public void save(OutputStream out, String encoding) throws ConfigurationException {
Writer writer = null;
if (encoding != null) {
try {
writer = new OutputStreamWriter(out, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (writer == null) {
writer = new OutputStreamWriter(out);
}
save(writer);
}","public void save(OutputStream out, String encoding) throws ConfigurationException {
Writer writerVar1 = writerLiteral2;
if (encoding != null) {
try {
writerVar1 = new OutputStreamWriter(out, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (writerVar1 == null) {
writerVar1 = new OutputStreamWriter(out);
}
save(writerVar1);
}"
3479,BAD_PRACTICE,SE_BAD_FIELD,FP,configuration,690,protected Configuration configuration;,protected Configuration configuration;,protected Configuration configurationVar1;
3486,SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,configuration,697,"pstmt = conn.prepareStatement(query.toString());
","@Override
protected void addPropertyDirect(String key, Object obj) {
StringBuilder query = new StringBuilder(""INSERT INTO "" + table);
if (nameColumn != null) {
query.append("" ("" + nameColumn + "", "" + keyColumn + "", "" + valueColumn + "") VALUES (?, ?, ?)"");
} else {
query.append("" ("" + keyColumn + "", "" + valueColumn + "") VALUES (?, ?)"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
int index = 1;
if (nameColumn != null) {
pstmt.setString(index++, name);
}
pstmt.setString(index++, key);
pstmt.setString(index++, String.valueOf(obj));
pstmt.executeUpdate();
commitIfRequired(conn);
} catch (SQLException e) {
fireError(EVENT_ADD_PROPERTY, key, obj, e);
} finally {
close(conn, pstmt, null);
}
}","@Override
protected void addPropertyDirect(String key, Object obj) {
StringBuilder stringbuilderVar1 = stringbuilderLiteral2;
if (nameColumn != null) {
stringbuilderVar1.append("" ("" + nameColumn + "", "" + keyColumn + "", "" + valueColumn + "") VALUES (?, ?, ?)"");
} else {
stringbuilderVar1.append("" ("" + keyColumn + "", "" + valueColumn + "") VALUES (?, ?)"");
}
Connection connectionVar3 = connectionLiteral4;
PreparedStatement preparedstatementVar5 = connectionLiteral4;
try {
connectionVar3 = getConnection();
preparedstatementVar5 = connectionVar3.prepareStatement(stringbuilderVar1.toString());
int intVar6 = intLiteral7;
if (nameColumn != null) {
preparedstatementVar5.setString(intVar6++, name);
}
preparedstatementVar5.setString(intVar6++, key);
preparedstatementVar5.setString(intVar6++, String.valueOf(obj));
preparedstatementVar5.executeUpdate();
commitIfRequired(connectionVar3);
} catch (SQLException e) {
fireError(EVENT_ADD_PROPERTY, key, obj, e);
} finally {
close(connectionVar3, preparedstatementVar5, null);
}
}"
3495,Multithreaded correctness,JLM_JSR166_UTILCONCURRENT_MONITORENTER,FP,configuration,706,"synchronized (configs)
","private CombinedConfiguration getCurrentConfig() {
String key = localSubst.replace(keyPattern);
CombinedConfiguration config = configs.get(key);
if (config == null) {
synchronized (configs) {
config = configs.get(key);
if (config == null) {
config = new CombinedConfiguration(getNodeCombiner());
if (loggerName != null) {
Log log = LogFactory.getLog(loggerName);
if (log != null) {
config.setLogger(log);
}
}
config.setIgnoreReloadExceptions(isIgnoreReloadExceptions());
config.setExpressionEngine(this.getExpressionEngine());
config.setDelimiterParsingDisabled(isDelimiterParsingDisabled());
config.setConversionExpressionEngine(getConversionExpressionEngine());
config.setListDelimiter(getListDelimiter());
for (ConfigurationErrorListener listener : getErrorListeners()) {
config.addErrorListener(listener);
}
for (ConfigurationListener listener : getConfigurationListeners()) {
config.addConfigurationListener(listener);
}
config.setForceReloadCheck(isForceReloadCheck());
for (ConfigData data : configurations) {
config.addConfiguration(data.getConfiguration(), data.getName(), data.getAt());
}
configs.put(key, config);
}
}
}
if (getLogger().isDebugEnabled()) {
getLogger().debug(""Returning config for "" + key + "": "" + config);
}
return config;
}","private CombinedConfiguration getCurrentConfig() {
String stringVar1 = stringLiteral2;
CombinedConfiguration combinedconfigurationVar3 = combinedconfigurationLiteral4;
if (combinedconfigurationVar3 == null) {
synchronized (configs) {
combinedconfigurationVar3 = configs.get(stringVar1);
if (combinedconfigurationVar3 == null) {
combinedconfigurationVar3 = new CombinedConfiguration(getNodeCombiner());
if (loggerName != null) {
Log logVar5 = logLiteral6;
if (logVar5 != null) {
combinedconfigurationVar3.setLogger(logVar5);
}
}
combinedconfigurationVar3.setIgnoreReloadExceptions(isIgnoreReloadExceptions());
combinedconfigurationVar3.setExpressionEngine(this.getExpressionEngine());
combinedconfigurationVar3.setDelimiterParsingDisabled(isDelimiterParsingDisabled());
combinedconfigurationVar3.setConversionExpressionEngine(getConversionExpressionEngine());
combinedconfigurationVar3.setListDelimiter(getListDelimiter());
for (ConfigurationErrorListener configurationerrorlistenerVar7 : getErrorListeners()) {
combinedconfigurationVar3.addErrorListener(configurationerrorlistenerVar7);
}
for (ConfigurationListener configurationerrorlistenerVar7 : getConfigurationListeners()) {
combinedconfigurationVar3.addConfigurationListener(configurationerrorlistenerVar7);
}
combinedconfigurationVar3.setForceReloadCheck(isForceReloadCheck());
for (ConfigData configdataVar8 : configurations) {
combinedconfigurationVar3.addConfiguration(configdataVar8.getConfiguration(), configdataVar8.getName(), configdataVar8.getAt());
}
configs.put(stringVar1, combinedconfigurationVar3);
}
}
}
if (getLogger().isDebugEnabled()) {
getLogger().debug(""Returning config for "" + stringVar1 + "": "" + combinedconfigurationVar3);
}
return combinedconfigurationVar3;
}"
3504,Multithreaded correctness,DL_SYNCHRONIZATION_ON_SHARED_CONSTANT,FP,configuration,715,"synchronized (counterLock)
","public Lock(String name) {
this.name = name;
synchronized (counterLock) {
instanceId = ++counter;
}
}","public Lock(String name) {
this.name = name;
synchronized (counterLock) {
instanceId = ++counter;
}
}"
3516,PERFORMANCE,DM_NUMBER_CTOR,FP,configuration,727,"return new Short(n.shortValue());
","public static Short toShort(Object value) throws ConversionException {
Number n = toNumber(value, Short.class);
if (n instanceof Short) {
return (Short) n;
} else {
return new Short(n.shortValue());
}
}","public static Short toShort(Object value) throws ConversionException {
Number numberVar1 = numberLiteral2;
if (numberVar1 instanceof Short) {
return (Short) numberVar1;
} else {
return new Short(numberVar1.shortValue());
}
}"
3519,PERFORMANCE,DM_NUMBER_CTOR,FP,configuration,730,"return new Byte(n.byteValue());
","public static Byte toByte(Object value) throws ConversionException {
Number n = toNumber(value, Byte.class);
if (n instanceof Byte) {
return (Byte) n;
} else {
return new Byte(n.byteValue());
}
}","public static Byte toByte(Object value) throws ConversionException {
Number numberVar1 = numberLiteral2;
if (numberVar1 instanceof Byte) {
return (Byte) numberVar1;
} else {
return new Byte(numberVar1.byteValue());
}
}"
3522,DODGY_CODE,REC_CATCH_EXCEPTION,FP,configuration,733,"catch (Exception ex)
","@Override
public ConfigurationNode getRootNode() {
if (getSubnodeKey() != null) {
try {
List<ConfigurationNode> nodes = getParent().fetchNodeList(getSubnodeKey());
if (nodes.size() != 1) {
setSubnodeKey(null);
} else {
ConfigurationNode currentRoot = nodes.get(0);
if (currentRoot != super.getRootNode()) {
fireEvent(EVENT_SUBNODE_CHANGED, null, null, true);
setRootNode(currentRoot);
fireEvent(EVENT_SUBNODE_CHANGED, null, null, false);
}
return currentRoot;
}
} catch (Exception ex) {
setSubnodeKey(null);
}
}
return super.getRootNode();
}","@Override
public ConfigurationNode getRootNode() {
if (getSubnodeKey() != null) {
try {
List<ConfigurationNode> list<configurationnode>Var1 = list<configurationnode>Literal2;
if (list<configurationnode>Var1.size() != 1) {
setSubnodeKey(null);
} else {
ConfigurationNode configurationnodeVar3 = configurationnodeLiteral4;
if (configurationnodeVar3 != super.getRootNode()) {
fireEvent(EVENT_SUBNODE_CHANGED, null, null, true);
setRootNode(configurationnodeVar3);
fireEvent(EVENT_SUBNODE_CHANGED, null, null, false);
}
return configurationnodeVar3;
}
} catch (Exception ex) {
setSubnodeKey(null);
}
}
return super.getRootNode();
}"
3527,I18N,DM_CONVERT_CASE,FP,configuration,738,"String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
return;
}
}","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String stringVar1 = stringLiteral2;
Class<?>[] class<?>ArrayVar3 = class<?>ArrayLiteral4;
class<?>ArrayVar3[0] = FileSystemOptions.class;
class<?>ArrayVar3[1] = value.getClass();
try {
Method methodVar5 = methodLiteral6;
Object[] objectArrayVar7 = objectArrayLiteral8;
objectArrayVar7[0] = options;
objectArrayVar7[1] = value;
methodVar5.invoke(builder, objectArrayVar7);
} catch (Exception ex) {
return;
}
}"
3528,BAD_PRACTICE,SE_BAD_FIELD,FP,configuration,739,private EntityResolver entityResolver = new DefaultEntityResolver();,private EntityResolver entityResolver = new DefaultEntityResolver();,private EntityResolver entityresolverVar1 = entityresolverLiteral2;
3534,DODGY_CODE,REC_CATCH_EXCEPTION,FP,configuration,745,"catch (Exception e)
","@Override
public void load(Reader in) throws ConfigurationException {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setNamespaceAware(false);
factory.setValidating(true);
try {
SAXParser parser = factory.newSAXParser();
XMLReader xmlReader = parser.getXMLReader();
xmlReader.setEntityResolver(new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlReader.setContentHandler(new XMLPropertiesHandler());
xmlReader.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
// todo: support included properties ?
}","@Override
public void load(Reader in) throws ConfigurationException {
SAXParserFactory saxparserfactoryVar1 = saxparserfactoryLiteral2;
saxparserfactoryVar1.setNamespaceAware(false);
saxparserfactoryVar1.setValidating(true);
try {
SAXParser saxparserVar3 = saxparserLiteral4;
XMLReader xmlreaderVar5 = xmlreaderLiteral6;
xmlreaderVar5.setEntityResolver(new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlreaderVar5.setContentHandler(new XMLPropertiesHandler());
xmlreaderVar5.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
// todo: support included properties ?
}"
3537,DODGY_CODE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,FP,configuration,748,"SubnodeConfiguration config = (SubnodeConfiguration) iter.next();
","protected BeanDeclaration createBeanDeclaration(ConfigurationNode node) {
List<HierarchicalConfiguration> list = getConfiguration().configurationsAt(node.getName());
if (list.size() == 1) {
return new XMLBeanDeclaration((SubnodeConfiguration) list.get(0), node);
} else {
Iterator<HierarchicalConfiguration> iter = list.iterator();
while (iter.hasNext()) {
SubnodeConfiguration config = (SubnodeConfiguration) iter.next();
if (config.getRootNode().equals(node)) {
return new XMLBeanDeclaration(config, node);
}
}
throw new ConfigurationRuntimeException(""Unable to match node for "" + node.getName());
}
}","protected BeanDeclaration createBeanDeclaration(ConfigurationNode node) {
List<HierarchicalConfiguration> list<hierarchicalconfiguration>Var1 = list<hierarchicalconfiguration>Literal2;
if (list<hierarchicalconfiguration>Var1.size() == 1) {
return new XMLBeanDeclaration((SubnodeConfiguration) list<hierarchicalconfiguration>Var1.get(0), node);
} else {
Iterator<HierarchicalConfiguration> iterator<hierarchicalconfiguration>Var3 = iterator<hierarchicalconfiguration>Literal4;
while (iterator<hierarchicalconfiguration>Var3.hasNext()) {
SubnodeConfiguration subnodeconfigurationVar5 = subnodeconfigurationLiteral6;
if (subnodeconfigurationVar5.getRootNode().equals(node)) {
return new XMLBeanDeclaration(subnodeconfigurationVar5, node);
}
}
throw new ConfigurationRuntimeException(""Unable to match node for "" + node.getName());
}
}"
3540,PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,configuration,751,"{
public InputSource resolveEntity(String publicId, String systemId)
{
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
","private void printValue(PrintWriter out, int indentLevel, Object value) {
String padding = StringUtils.repeat("" "", indentLevel * INDENT_SIZE);
if (value instanceof Date) {
synchronized (PListNode.FORMAT) {
out.println(padding + ""<date>"" + PListNode.FORMAT.format((Date) value) + ""</date>"");
}
} else if (value instanceof Calendar) {
printValue(out, indentLevel, ((Calendar) value).getTime());
} else if (value instanceof Number) {
if (value instanceof Double || value instanceof Float || value instanceof BigDecimal) {
out.println(padding + ""<real>"" + value.toString() + ""</real>"");
} else {
out.println(padding + ""<integer>"" + value.toString() + ""</integer>"");
}
} else if (value instanceof Boolean) {
if (((Boolean) value).booleanValue()) {
out.println(padding + ""<true/>"");
} else {
out.println(padding + ""<false/>"");
}
} else if (value instanceof List) {
out.println(padding + ""<array>"");
Iterator<?> it = ((List<?>) value).iterator();
while (it.hasNext()) {
printValue(out, indentLevel + 1, it.next());
}
out.println(padding + ""</array>"");
} else if (value instanceof HierarchicalConfiguration) {
printNode(out, indentLevel, ((HierarchicalConfiguration) value).getRoot());
} else if (value instanceof Configuration) {
out.println(padding + ""<dict>"");
Configuration config = (Configuration) value;
Iterator<String> it = config.getKeys();
while (it.hasNext()) {
String key = it.next();
Node node = new Node(key);
node.setValue(config.getProperty(key));
printNode(out, indentLevel + 1, node);
if (it.hasNext()) {
out.println();
}
}
out.println(padding + ""</dict>"");
} else if (value instanceof Map) {
Map<String, Object> map = transformMap((Map<?, ?>) value);
printValue(out, indentLevel, new MapConfiguration(map));
} else if (value instanceof byte[]) {
String base64 = new String(Base64.encodeBase64((byte[]) value));
out.println(padding + ""<data>"" + StringEscapeUtils.escapeXml(base64) + ""</data>"");
} else if (value != null) {
out.println(padding + ""<string>"" + StringEscapeUtils.escapeXml(String.valueOf(value)) + ""</string>"");
} else {
out.println(padding + ""<string/>"");
}
}","private void printValue(PrintWriter out, int indentLevel, Object value) {
String stringVar1 = stringLiteral2;
if (value instanceof Date) {
synchronized (PListNode.FORMAT) {
out.println(stringVar1 + ""<date>"" + PListNode.FORMAT.format((Date) value) + ""</date>"");
}
} else if (value instanceof Calendar) {
printValue(out, indentLevel, ((Calendar) value).getTime());
} else if (value instanceof Number) {
if (value instanceof Double || value instanceof Float || value instanceof BigDecimal) {
out.println(stringVar1 + ""<real>"" + value.toString() + ""</real>"");
} else {
out.println(stringVar1 + ""<integer>"" + value.toString() + ""</integer>"");
}
} else if (value instanceof Boolean) {
if (((Boolean) value).booleanValue()) {
out.println(stringVar1 + ""<true/>"");
} else {
out.println(stringVar1 + ""<false/>"");
}
} else if (value instanceof List) {
out.println(stringVar1 + ""<array>"");
Iterator<?> iterator<?>Var3 = iterator<?>Literal4;
while (iterator<?>Var3.hasNext()) {
printValue(out, indentLevel + 1, iterator<?>Var3.next());
}
out.println(stringVar1 + ""</array>"");
} else if (value instanceof HierarchicalConfiguration) {
printNode(out, indentLevel, ((HierarchicalConfiguration) value).getRoot());
} else if (value instanceof Configuration) {
out.println(stringVar1 + ""<dict>"");
Configuration configurationVar5 = configurationLiteral6;
Iterator<String> iterator<?>Var3 = iterator<string>Literal7;
while (iterator<?>Var3.hasNext()) {
String stringVar8 = stringLiteral9;
Node nodeVar10 = nodeLiteral11;
nodeVar10.setValue(configurationVar5.getProperty(stringVar8));
printNode(out, indentLevel + 1, nodeVar10);
if (iterator<?>Var3.hasNext()) {
out.println();
}
}
out.println(stringVar1 + ""</dict>"");
} else if (value instanceof Map) {
Map<String, Object> map<string,object>Var12 = map<string,object>Literal13;
printValue(out, indentLevel, new MapConfiguration(map<string,object>Var12));
} else if (value instanceof byte[]) {
String stringVar14 = stringLiteral15;
out.println(stringVar1 + ""<data>"" + StringEscapeUtils.escapeXml(stringVar14) + ""</data>"");
} else if (value != null) {
out.println(stringVar1 + ""<string>"" + StringEscapeUtils.escapeXml(String.valueOf(value)) + ""</string>"");
} else {
out.println(stringVar1 + ""<string/>"");
}
}"
3543,DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,FP,configuration,754,"if (name == null)
","private String getName(File file) {
String name = configuration.getURL().toString();
if (name == null) {
if (file != null) {
name = file.getAbsolutePath();
} else {
name = ""base: "" + configuration.getBasePath() + ""file: "" + configuration.getFileName();
}
}
return name;
}","private String getName(File file) {
String stringVar1 = stringLiteral2;
if (stringVar1 == null) {
if (file != null) {
stringVar1 = file.getAbsolutePath();
} else {
stringVar1 = ""base: "" + configuration.getBasePath() + ""file: "" + configuration.getFileName();
}
}
return stringVar1;
}"
3545,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,configuration,756,"StrSubstitutor substitutor = ((CatalogManager) catalogManager).getStrSubstitutor();
","@Override
protected String normalizeURI(String uriref) {
StrSubstitutor substitutor = ((CatalogManager) catalogManager).getStrSubstitutor();
String resolved = substitutor != null ? substitutor.replace(uriref) : uriref;
return super.normalizeURI(resolved);
}","@Override
protected String normalizeURI(String uriref) {
StrSubstitutor strsubstitutorVar1 = strsubstitutorLiteral2;
String stringVar3 = stringLiteral4;
return super.normalizeURI(stringVar3);
}"
3554,BAD_PRACTICE,SE_BAD_FIELD,FP,configuration,765,private ConfigurationNode node;,private ConfigurationNode node;,private ConfigurationNode configurationnodeVar1;
3696,DODGY_CODE,REC_CATCH_EXCEPTION,FP,configuration,907,"} catch (final Exception ex) {
","public static Synchronizer cloneSynchronizer(final Synchronizer sync) {
if (sync == null) {
throw new IllegalArgumentException(""Synchronizer must not be null!"");
}
if (NoOpSynchronizer.INSTANCE == sync) {
return sync;
}
try {
return sync.getClass().newInstance();
} catch (final Exception ex) {
LOG.info(""Cannot create new instance of "" + sync.getClass());
}
try {
return (Synchronizer) clone(sync);
} catch (final CloneNotSupportedException cnex) {
throw new ConfigurationRuntimeException(""Cannot clone Synchronizer "" + sync);
}
}","public static Synchronizer cloneSynchronizer(final Synchronizer sync) {
if (sync == null) {
throw new IllegalArgumentException(""Synchronizer must not be null!"");
}
if (NoOpSynchronizer.INSTANCE == sync) {
return sync;
}
try {
return sync.getClass().newInstance();
} catch (final Exception ex) {
LOG.info(""Cannot create new instance of "" + sync.getClass());
}
try {
return (Synchronizer) clone(sync);
} catch (final CloneNotSupportedException cnex) {
throw new ConfigurationRuntimeException(""Cannot clone Synchronizer "" + sync);
}
}"
3699,SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,configuration,910,"pstmt = getConnection().prepareStatement(statement);
","protected PreparedStatement createStatement(final String sql, final boolean nameCol) throws SQLException {
final String statement;
if (nameCol && configurationNameColumn != null) {
final StringBuilder buf = new StringBuilder(sql);
buf.append("" AND "").append(configurationNameColumn).append(""=?"");
statement = buf.toString();
} else {
statement = sql;
}
pstmt = getConnection().prepareStatement(statement);
return pstmt;
}","protected PreparedStatement createStatement(final String sql, final boolean nameCol) throws SQLException {
final String stringVar1;
if (nameCol && configurationNameColumn != null) {
final StringBuilder stringbuilderVar2 = stringbuilderLiteral3;
stringbuilderVar2.append("" AND "").append(configurationNameColumn).append(""=?"");
stringVar1 = stringbuilderVar2.toString();
} else {
stringVar1 = sql;
}
pstmt = getConnection().prepareStatement(stringVar1);
return pstmt;
}"
3715,DODGY_CODE,REC_CATCH_EXCEPTION,FP,configuration,926,"} catch (final Exception ex) {
","private FileSystemOptions getOptions(final String scheme) {
if (scheme == null) {
return null;
}
final FileSystemOptions opts = new FileSystemOptions();
final FileSystemConfigBuilder builder;
try {
builder = getManager().getFileSystemConfigBuilder(scheme);
} catch (final Exception ex) {
return null;
}
final FileOptionsProvider provider = getFileOptionsProvider();
if (provider != null) {
final Map<String, Object> map = provider.getOptions();
if (map == null) {
return null;
}
int count = 0;
for (final Map.Entry<String, Object> entry : map.entrySet()) {
try {
String key = entry.getKey();
if (FileOptionsProvider.CURRENT_USER.equals(key)) {
key = ""creatorName"";
}
setProperty(builder, opts, key, entry.getValue());
++count;
} catch (final Exception ex) {
continue;
}
}
if (count > 0) {
return opts;
}
}
return null;
}","private FileSystemOptions getOptions(final String scheme) {
if (scheme == null) {
return null;
}
final FileSystemOptions filesystemoptionsVar1 = filesystemoptionsLiteral2;
final FileSystemConfigBuilder filesystemconfigbuilderVar3;
try {
filesystemconfigbuilderVar3 = getManager().getFileSystemConfigBuilder(scheme);
} catch (final Exception ex) {
return null;
}
final FileOptionsProvider fileoptionsproviderVar4 = fileoptionsproviderLiteral5;
if (fileoptionsproviderVar4 != null) {
final Map<String, Object> map<string,object>Var6 = map<string,object>Literal7;
if (map<string,object>Var6 == null) {
return null;
}
int intVar8 = intLiteral9;
for (final Map.Entry<String, Object> map.entry<string,object>Var10 : map<string,object>Var6.entrySet()) {
try {
String stringVar11 = stringLiteral12;
if (FileOptionsProvider.CURRENT_USER.equals(stringVar11)) {
stringVar11 = ""creatorName"";
}
setProperty(filesystemconfigbuilderVar3, filesystemoptionsVar1, stringVar11, map.entry<string,object>Var10.getValue());
++intVar8;
} catch (final Exception ex) {
continue;
}
}
if (intVar8 > 0) {
return filesystemoptionsVar1;
}
}
return null;
}"
3835,PERFORMANCE,DM_NUMBER_CTOR,FP,configuration,1046,"return getShort(key, new Short(defaultValue)).shortValue();
","public short getShort(String key, short defaultValue) {
return getShort(key, new Short(defaultValue)).shortValue();
}","public short getShort(String key, short defaultValue) {
return getShort(key, new Short(defaultValue)).shortValue();
}"
3841,I18N,DM_DEFAULT_ENCODING,FP,configuration,1052,"PrintStream stream = new PrintStream(os);
","private ConfigurationNode constructCombinedNode() {
if (getNumberOfConfigurations() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return new ViewNode();
} else {
Iterator<ConfigData> it = configurations.iterator();
ConfigurationNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = getNodeCombiner().combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}","private ConfigurationNode constructCombinedNode() {
if (getNumberOfConfigurations() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return new ViewNode();
} else {
Iterator<ConfigData> iterator<configdata>Var1 = iterator<configdata>Literal2;
ConfigurationNode configurationnodeVar3 = configurationnodeLiteral4;
while (iterator<configdata>Var1.hasNext()) {
configurationnodeVar3 = getNodeCombiner().combine(configurationnodeVar3, iterator<configdata>Var1.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream bytearrayoutputstreamVar5 = bytearrayoutputstreamLiteral6;
PrintStream printstreamVar7 = printstreamLiteral8;
TreeUtils.printTree(printstreamVar7, configurationnodeVar3);
getLogger().debug(bytearrayoutputstreamVar5.toString());
}
return configurationnodeVar3;
}
}"
3851,EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,FP,configuration,1062,"ResultSet rs = pstmt.executeQuery();
","public Iterator<String> getKeys() {
Collection<String> keys = new ArrayList<String>();
StringBuilder query = new StringBuilder(""SELECT DISTINCT "" + keyColumn + "" FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
ResultSet rs = pstmt.executeQuery();
while (rs.next()) {
keys.add(rs.getString(1));
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(conn, pstmt);
}
return keys.iterator();
}","public Iterator<String> getKeys() {
Collection<String> collection<string>Var1 = collection<string>Literal2;
StringBuilder stringbuilderVar3 = stringbuilderLiteral4;
if (nameColumn != null) {
stringbuilderVar3.append("" WHERE "" + nameColumn + ""=?"");
}
Connection connectionVar5 = connectionLiteral6;
PreparedStatement preparedstatementVar7 = connectionLiteral6;
try {
connectionVar5 = getConnection();
preparedstatementVar7 = connectionVar5.prepareStatement(stringbuilderVar3.toString());
if (nameColumn != null) {
preparedstatementVar7.setString(1, name);
}
ResultSet resultsetVar8 = resultsetLiteral9;
while (resultsetVar8.next()) {
collection<string>Var1.add(resultsetVar8.getString(1));
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(connectionVar5, preparedstatementVar7);
}
return collection<string>Var1.iterator();
}"
3853,SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,configuration,1064,"pstmt = conn.prepareStatement(query.toString());
","public Iterator<String> getKeys() {
Collection<String> keys = new ArrayList<String>();
StringBuilder query = new StringBuilder(""SELECT DISTINCT "" + keyColumn + "" FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
ResultSet rs = pstmt.executeQuery();
while (rs.next()) {
keys.add(rs.getString(1));
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(conn, pstmt);
}
return keys.iterator();
}","public Iterator<String> getKeys() {
Collection<String> collection<string>Var1 = collection<string>Literal2;
StringBuilder stringbuilderVar3 = stringbuilderLiteral4;
if (nameColumn != null) {
stringbuilderVar3.append("" WHERE "" + nameColumn + ""=?"");
}
Connection connectionVar5 = connectionLiteral6;
PreparedStatement preparedstatementVar7 = connectionLiteral6;
try {
connectionVar5 = getConnection();
preparedstatementVar7 = connectionVar5.prepareStatement(stringbuilderVar3.toString());
if (nameColumn != null) {
preparedstatementVar7.setString(1, name);
}
ResultSet resultsetVar8 = resultsetLiteral9;
while (resultsetVar8.next()) {
collection<string>Var1.add(resultsetVar8.getString(1));
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(connectionVar5, preparedstatementVar7);
}
return collection<string>Var1.iterator();
}"
3857,EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,FP,configuration,1068,"ResultSet rs = pstmt.executeQuery();
","public boolean containsKey(String key) {
boolean found = false;
StringBuilder query = new StringBuilder(""SELECT * FROM "" + table + "" WHERE "" + keyColumn + ""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
ResultSet rs = pstmt.executeQuery();
found = rs.next();
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
close(conn, pstmt);
}
return found;
}","public boolean containsKey(String key) {
boolean booleanVar1 = booleanLiteral2;
StringBuilder stringbuilderVar3 = stringbuilderLiteral4;
if (nameColumn != null) {
stringbuilderVar3.append("" AND "" + nameColumn + ""=?"");
}
Connection connectionVar5 = connectionLiteral6;
PreparedStatement preparedstatementVar7 = connectionLiteral6;
try {
connectionVar5 = getConnection();
preparedstatementVar7 = connectionVar5.prepareStatement(stringbuilderVar3.toString());
preparedstatementVar7.setString(1, key);
if (nameColumn != null) {
preparedstatementVar7.setString(2, name);
}
ResultSet resultsetVar8 = resultsetLiteral9;
booleanVar1 = resultsetVar8.next();
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
close(connectionVar5, preparedstatementVar7);
}
return booleanVar1;
}"
3871,BAD_PRACTICE,SE_BAD_FIELD_STORE,FP,configuration,1082,private final Object reloadLock;,private final Object reloadLock;,private final Object objectVar1;
3873,BAD_PRACTICE,SE_BAD_FIELD_STORE,FP,configuration,1084,private final Object reloadLock;,private final Object reloadLock;,private final Object objectVar1;
3874,DODGY_CODE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,FP,configuration,1085,"instanceId = ++counter;
","public Lock(String name) {
this.name = name;
synchronized (counterLock) {
instanceId = ++counter;
}
}","public Lock(String name) {
this.name = name;
synchronized (counterLock) {
instanceId = ++counter;
}
}"
3879,DODGY_CODE,REC_CATCH_EXCEPTION,FP,configuration,1090,"catch (Exception ex)
","private ReloadingStrategy createReloadingStrategy() {
if (fileStrategy == null) {
return null;
}
try {
ReloadingStrategy strategy = (ReloadingStrategy) BeanUtils.cloneBean(fileStrategy);
strategy.setConfiguration(null);
return strategy;
} catch (Exception ex) {
return null;
}
}","private ReloadingStrategy createReloadingStrategy() {
if (fileStrategy == null) {
return null;
}
try {
ReloadingStrategy reloadingstrategyVar1 = reloadingstrategyLiteral2;
reloadingstrategyVar1.setConfiguration(null);
return reloadingstrategyVar1;
} catch (Exception ex) {
return null;
}
}"
3884,CORRECTNESS,UR_UNINIT_READ_CALLED_FROM_SUPER_CONSTRUCTOR,FP,configuration,1095,"if (init)
","@Override
public void setRootNode(ConfigurationNode rootNode) {
if (init) {
getConfig().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}","@Override
public void setRootNode(ConfigurationNode rootNode) {
if (init) {
getConfig().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}"
3889,PERFORMANCE,DM_NUMBER_CTOR,FP,configuration,1100,"return new Byte(n.byteValue());
","public static Byte toByte(Object value) throws ConversionException {
Number n = toNumber(value, Byte.class);
if (n instanceof Byte) {
return (Byte) n;
} else {
return new Byte(n.byteValue());
}
}","public static Byte toByte(Object value) throws ConversionException {
Number numberVar1 = numberLiteral2;
if (numberVar1 instanceof Byte) {
return (Byte) numberVar1;
} else {
return new Byte(numberVar1.byteValue());
}
}"
3891,PERFORMANCE,DM_NUMBER_CTOR,FP,configuration,1102,"return new Integer(n.intValue());
","public static Integer toInteger(Object value) throws ConversionException {
Number n = toNumber(value, Integer.class);
if (n instanceof Integer) {
return (Integer) n;
} else {
return new Integer(n.intValue());
}
}","public static Integer toInteger(Object value) throws ConversionException {
Number numberVar1 = numberLiteral2;
if (numberVar1 instanceof Integer) {
return (Integer) numberVar1;
} else {
return new Integer(numberVar1.intValue());
}
}"
3900,DODGY_CODE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,FP,configuration,1111,"XMLNode nd = (XMLNode) createNode(node.getName());
","private XMLNode convertToXMLNode(ConfigurationNode node) {
if (node instanceof XMLNode) {
return (XMLNode) node;
}
XMLNode nd = (XMLNode) createNode(node.getName());
nd.setValue(node.getValue());
nd.setAttribute(node.isAttribute());
for (ConfigurationNode child : node.getChildren()) {
nd.addChild(convertToXMLNode(child));
}
for (ConfigurationNode attr : node.getAttributes()) {
nd.addAttribute(convertToXMLNode(attr));
}
return nd;
}","private XMLNode convertToXMLNode(ConfigurationNode node) {
if (node instanceof XMLNode) {
return (XMLNode) node;
}
XMLNode xmlnodeVar1 = xmlnodeLiteral2;
xmlnodeVar1.setValue(node.getValue());
xmlnodeVar1.setAttribute(node.isAttribute());
for (ConfigurationNode configurationnodeVar3 : node.getChildren()) {
xmlnodeVar1.addChild(convertToXMLNode(configurationnodeVar3));
}
for (ConfigurationNode configurationnodeVar4 : node.getAttributes()) {
xmlnodeVar1.addAttribute(convertToXMLNode(configurationnodeVar4));
}
return xmlnodeVar1;
}"
3903,BAD_PRACTICE,SE_INNER_CLASS,FP,configuration,1114,"{
super(name);
setReference(elem);
}
@Override
public void setValue(Object value)
{
super.setValue(value);
if (getReference() != null && document != null)
{
if (isAttribute())
{
updateAttribute();
}
else
{
updateElement(value);
}
}
}
@Override
protected void removeReference()
{
if (getReference() != null)
{
Element element = (Element) getReference();
if (isAttribute())
{
updateAttribute();
}
else
{
org.w3c.dom.Node parentElem = element.getParentNode();
if (parentElem != null)
{
parentElem.removeChild(element);
}
}
}
}
private void updateElement(Object value)
{
Text txtNode = findTextNodeForUpdate();
if (value == null)
{
if (txtNode != null)
{
((Element) getReference()).removeChild(txtNode);
}
}
else
{
if (txtNode == null)
{
String newValue = isDelimiterParsingDisabled() ? value.toString()
: PropertyConverter.escapeDelimiters(value.toString(), getListDelimiter());
txtNode = document.createTextNode(newValue);
if (((Element) getReference()).getFirstChild() != null)
{
((Element) getReference()).insertBefore(txtNode,
((Element) getReference()).getFirstChild());
}
else
{
((Element) getReference()).appendChild(txtNode);
}
}
else
{
String newValue = isDelimiterParsingDisabled() ? value.toString()
: PropertyConverter.escapeDelimiters(value.toString(), getListDelimiter());
txtNode.setNodeValue(newValue);
}
}
}
private void updateAttribute()
{
XMLBuilderVisitor.updateAttribute(getParent(), getName(), getListDelimiter(),
isAttributeSplittingDisabled());
}
private Text findTextNodeForUpdate()
{
Text result = null;
Element elem = (Element) getReference();
NodeList children = elem.getChildNodes();
Collection<org.w3c.dom.Node> textNodes = new ArrayList<org.w3c.dom.Node>();
for (int i = 0; i < children.getLength(); i++)
{
org.w3c.dom.Node nd = children.item(i);
if (nd instanceof Text)
{
if (result == null)
{
result = (Text) nd;
}
else
{
textNodes.add(nd);
}
}
}
if (result instanceof CDATASection)
{
textNodes.add(result);
result = null;
}
for (org.w3c.dom.Node tn : textNodes)
{
elem.removeChild(tn);
}
return result;
","public void save(Writer writer) throws ConfigurationException {
try {
Transformer transformer = createTransformer();
Source source = new DOMSource(createDocument());
Result result = new StreamResult(writer);
transformer.transform(source, result);
} catch (TransformerException e) {
throw new ConfigurationException(""Unable to save the configuration"", e);
} catch (TransformerFactoryConfigurationError e) {
throw new ConfigurationException(""Unable to save the configuration"", e);
}
}","public void save(Writer writer) throws ConfigurationException {
try {
Transformer transformerVar1 = transformerLiteral2;
Source sourceVar3 = sourceLiteral4;
Result resultVar5 = resultLiteral6;
transformerVar1.transform(sourceVar3, resultVar5);
} catch (TransformerException e) {
throw new ConfigurationException(""Unable to save the configuration"", e);
} catch (TransformerFactoryConfigurationError e) {
throw new ConfigurationException(""Unable to save the configuration"", e);
}
}"
3906,PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,configuration,1117,"{
public InputSource resolveEntity(String publicId, String systemId)
{
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
","@Override
public void startElement(String uri, String localName, String qName, Attributes attrs) {
if (""comment"".equals(qName)) {
inCommentElement = true;
}
if (""entry"".equals(qName)) {
key = attrs.getValue(""key"");
inEntryElement = true;
}
}","@Override
public void startElement(String uri, String localName, String qName, Attributes attrs) {
if (""comment"".equals(qName)) {
inCommentElement = true;
}
if (""entry"".equals(qName)) {
key = attrs.getValue(""key"");
inEntryElement = true;
}
}"
3908,DODGY_CODE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,FP,configuration,1119,"SubnodeConfiguration config = (SubnodeConfiguration) iter.next();
","protected BeanDeclaration createBeanDeclaration(ConfigurationNode node) {
List<HierarchicalConfiguration> list = getConfiguration().configurationsAt(node.getName());
if (list.size() == 1) {
return new XMLBeanDeclaration((SubnodeConfiguration) list.get(0), node);
} else {
Iterator<HierarchicalConfiguration> iter = list.iterator();
while (iter.hasNext()) {
SubnodeConfiguration config = (SubnodeConfiguration) iter.next();
if (config.getRootNode().equals(node)) {
return new XMLBeanDeclaration(config, node);
}
}
throw new ConfigurationRuntimeException(""Unable to match node for "" + node.getName());
}
}","protected BeanDeclaration createBeanDeclaration(ConfigurationNode node) {
List<HierarchicalConfiguration> list<hierarchicalconfiguration>Var1 = list<hierarchicalconfiguration>Literal2;
if (list<hierarchicalconfiguration>Var1.size() == 1) {
return new XMLBeanDeclaration((SubnodeConfiguration) list<hierarchicalconfiguration>Var1.get(0), node);
} else {
Iterator<HierarchicalConfiguration> iterator<hierarchicalconfiguration>Var3 = iterator<hierarchicalconfiguration>Literal4;
while (iterator<hierarchicalconfiguration>Var3.hasNext()) {
SubnodeConfiguration subnodeconfigurationVar5 = subnodeconfigurationLiteral6;
if (subnodeconfigurationVar5.getRootNode().equals(node)) {
return new XMLBeanDeclaration(subnodeconfigurationVar5, node);
}
}
throw new ConfigurationRuntimeException(""Unable to match node for "" + node.getName());
}
}"
3909,DODGY_CODE,REC_CATCH_EXCEPTION,FP,configuration,1120,"catch (Exception e)
","public void setValue(Object value) throws ConfigurationRuntimeException {
try {
if (!(value instanceof String)) {
this.value = value;
return;
}
String val = (String) value;
String name = StringUtils.removeStartIgnoreCase(val, CLASS);
Class<?> clazz = ClassUtils.getClass(name);
if (name.length() == val.length()) {
this.value = clazz.newInstance();
} else {
this.value = clazz;
}
} catch (Exception e) {
throw new ConfigurationRuntimeException(""Unable to create "" + value, e);
}
}","public void setValue(Object value) throws ConfigurationRuntimeException {
try {
if (!(value instanceof String)) {
this.value = value;
return;
}
String stringVar1 = stringLiteral2;
String stringVar3 = stringLiteral4;
Class<?> class<?>Var5 = class<?>Literal6;
if (stringVar3.length() == stringVar1.length()) {
this.value = class<?>Var5.newInstance();
} else {
this.value = class<?>Var5;
}
} catch (Exception e) {
throw new ConfigurationRuntimeException(""Unable to create "" + value, e);
}
}"
4013,I18N,DM_DEFAULT_ENCODING,FP,configuration,1224,"reader = new InputStreamReader(in);
","public void load(InputStream in, String encoding) throws ConfigurationException {
Reader reader = null;
if (encoding != null) {
try {
reader = new InputStreamReader(in, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (reader == null) {
reader = new InputStreamReader(in);
}
load(reader);
}","public void load(InputStream in, String encoding) throws ConfigurationException {
Reader readerVar1 = readerLiteral2;
if (encoding != null) {
try {
readerVar1 = new InputStreamReader(in, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (readerVar1 == null) {
readerVar1 = new InputStreamReader(in);
}
load(readerVar1);
}"
4036,BAD_PRACTICE,SE_BAD_FIELD,FP,configuration,1247,private StrSubstitutor localSubst = new StrSubstitutor(new ConfigurationInterpolator());,private StrSubstitutor localSubst = new StrSubstitutor(new ConfigurationInterpolator());,private StrSubstitutor strsubstitutorVar1 = strsubstitutorLiteral2;
4038,Multithreaded correctness,JLM_JSR166_UTILCONCURRENT_MONITORENTER,FP,configuration,1249,"synchronized (configs)
","private CombinedConfiguration getCurrentConfig() {
String key = localSubst.replace(keyPattern);
CombinedConfiguration config = configs.get(key);
if (config == null) {
synchronized (configs) {
config = configs.get(key);
if (config == null) {
config = new CombinedConfiguration(getNodeCombiner());
if (loggerName != null) {
Log log = LogFactory.getLog(loggerName);
if (log != null) {
config.setLogger(log);
}
}
config.setIgnoreReloadExceptions(isIgnoreReloadExceptions());
config.setExpressionEngine(this.getExpressionEngine());
config.setDelimiterParsingDisabled(isDelimiterParsingDisabled());
config.setConversionExpressionEngine(getConversionExpressionEngine());
config.setListDelimiter(getListDelimiter());
for (ConfigurationErrorListener listener : getErrorListeners()) {
config.addErrorListener(listener);
}
for (ConfigurationListener listener : getConfigurationListeners()) {
config.addConfigurationListener(listener);
}
config.setForceReloadCheck(isForceReloadCheck());
for (ConfigData data : configurations) {
config.addConfiguration(data.getConfiguration(), data.getName(), data.getAt());
}
configs.put(key, config);
}
}
}
if (getLogger().isDebugEnabled()) {
getLogger().debug(""Returning config for "" + key + "": "" + config);
}
return config;
}","private CombinedConfiguration getCurrentConfig() {
String stringVar1 = stringLiteral2;
CombinedConfiguration combinedconfigurationVar3 = combinedconfigurationLiteral4;
if (combinedconfigurationVar3 == null) {
synchronized (configs) {
combinedconfigurationVar3 = configs.get(stringVar1);
if (combinedconfigurationVar3 == null) {
combinedconfigurationVar3 = new CombinedConfiguration(getNodeCombiner());
if (loggerName != null) {
Log logVar5 = logLiteral6;
if (logVar5 != null) {
combinedconfigurationVar3.setLogger(logVar5);
}
}
combinedconfigurationVar3.setIgnoreReloadExceptions(isIgnoreReloadExceptions());
combinedconfigurationVar3.setExpressionEngine(this.getExpressionEngine());
combinedconfigurationVar3.setDelimiterParsingDisabled(isDelimiterParsingDisabled());
combinedconfigurationVar3.setConversionExpressionEngine(getConversionExpressionEngine());
combinedconfigurationVar3.setListDelimiter(getListDelimiter());
for (ConfigurationErrorListener configurationerrorlistenerVar7 : getErrorListeners()) {
combinedconfigurationVar3.addErrorListener(configurationerrorlistenerVar7);
}
for (ConfigurationListener configurationerrorlistenerVar7 : getConfigurationListeners()) {
combinedconfigurationVar3.addConfigurationListener(configurationerrorlistenerVar7);
}
combinedconfigurationVar3.setForceReloadCheck(isForceReloadCheck());
for (ConfigData configdataVar8 : configurations) {
combinedconfigurationVar3.addConfiguration(configdataVar8.getConfiguration(), configdataVar8.getName(), configdataVar8.getAt());
}
configs.put(stringVar1, combinedconfigurationVar3);
}
}
}
if (getLogger().isDebugEnabled()) {
getLogger().debug(""Returning config for "" + stringVar1 + "": "" + combinedconfigurationVar3);
}
return combinedconfigurationVar3;
}"
4042,BAD_PRACTICE,SE_BAD_FIELD,FP,configuration,1253,private ConfigurationNode rootNode;,private ConfigurationNode rootNode;,private ConfigurationNode configurationnodeVar1;
4045,BAD_PRACTICE,SE_BAD_FIELD_STORE,FP,configuration,1256,private final Object reloadLock;,private final Object reloadLock;,private final Object objectVar1;
4050,DODGY_CODE,RI_REDUNDANT_INTERFACES,FP,configuration,1261,"private static ThreadLocal<Boolean> recursive = new ThreadLocal<Boolean>()
{
@Override
protected synchronized Boolean initialValue()
{
return Boolean.FALSE;
}
};
private final ConcurrentMap<String, XMLConfiguration> configurationsMap =
new ConcurrentHashMap<String, XMLConfiguration>();
private String pattern;
private boolean init;
private boolean ignoreException = true;
private boolean schemaValidation;
private boolean validating;
private boolean attributeSplittingDisabled;
private String loggerName = MultiFileHierarchicalConfiguration.class.getName();
private ReloadingStrategy fileStrategy;
private EntityResolver entityResolver;
private StrSubstitutor localSubst = new StrSubstitutor(new ConfigurationInterpolator());
public MultiFileHierarchicalConfiguration()
{
super();
this.init = true;
setLogger(LogFactory.getLog(loggerName));
}
public MultiFileHierarchicalConfiguration(String pathPattern)
{
super();
this.pattern = pathPattern;
this.init = true;
setLogger(LogFactory.getLog(loggerName));
}
public void setLoggerName(String name)
{
this.loggerName = name;
}
public void setFilePattern(String pathPattern)
{
this.pattern = pathPattern;
}
public boolean isSchemaValidation()
{
return schemaValidation;
}
public void setSchemaValidation(boolean schemaValidation)
{
this.schemaValidation = schemaValidation;
}
public boolean isValidating()
{
return validating;
}
public void setValidating(boolean validating)
{
this.validating = validating;
}
public boolean isAttributeSplittingDisabled()
{
return attributeSplittingDisabled;
}
public void setAttributeSplittingDisabled(boolean attributeSplittingDisabled)
{
this.attributeSplittingDisabled = attributeSplittingDisabled;
}
@Override
public ReloadingStrategy getReloadingStrategy()
{
return fileStrategy;
}
@Override
public void setReloadingStrategy(ReloadingStrategy strategy)
{
this.fileStrategy = strategy;
}
public void setEntityResolver(EntityResolver entityResolver)
{
this.entityResolver = entityResolver;
}
public EntityResolver getEntityResolver()
{
return this.entityResolver;
}
public void setIgnoreException(boolean ignoreException)
{
this.ignoreException = ignoreException;
}
@Override
public void addProperty(String key, Object value)
{
this.getConfiguration().addProperty(key, value);
}
@Override
public void clear()
{
this.getConfiguration().clear();
}
@Override
public void clearProperty(String key)
{
this.getConfiguration().clearProperty(key);
}
@Override
public boolean containsKey(String key)
{
return this.getConfiguration().containsKey(key);
}
@Override
public BigDecimal getBigDecimal(String key, BigDecimal defaultValue)
{
return this.getConfiguration().getBigDecimal(key, defaultValue);
}
@Override
public BigDecimal getBigDecimal(String key)
{
return this.getConfiguration().getBigDecimal(key);
}
@Override
public BigInteger getBigInteger(String key, BigInteger defaultValue)
{
return this.getConfiguration().getBigInteger(key, defaultValue);
}
@Override
public BigInteger getBigInteger(String key)
{
return this.getConfiguration().getBigInteger(key);
}
@Override
public boolean getBoolean(String key, boolean defaultValue)
{
return this.getConfiguration().getBoolean(key, defaultValue);
}
@Override
public Boolean getBoolean(String key, Boolean defaultValue)
{
return this.getConfiguration().getBoolean(key, defaultValue);
}
@Override
public boolean getBoolean(String key)
{
return this.getConfiguration().getBoolean(key);
}
@Override
public byte getByte(String key, byte defaultValue)
{
return this.getConfiguration().getByte(key, defaultValue);
}
@Override
public Byte getByte(String key, Byte defaultValue)
{
return this.getConfiguration().getByte(key, defaultValue);
}
@Override
public byte getByte(String key)
{
return this.getConfiguration().getByte(key);
}
@Override
public double getDouble(String key, double defaultValue)
{
return this.getConfiguration().getDouble(key, defaultValue);
}
@Override
public Double getDouble(String key, Double defaultValue)
{
return this.getConfiguration().getDouble(key, defaultValue);
}
@Override
public double getDouble(String key)
{
return this.getConfiguration().getDouble(key);
}
@Override
public float getFloat(String key, float defaultValue)
{
return this.getConfiguration().getFloat(key, defaultValue);
}
@Override
public Float getFloat(String key, Float defaultValue)
{
return this.getConfiguration().getFloat(key, defaultValue);
}
@Override
public float getFloat(String key)
{
return this.getConfiguration().getFloat(key);
}
@Override
public int getInt(String key, int defaultValue)
{
return this.getConfiguration().getInt(key, defaultValue);
}
@Override
public int getInt(String key)
{
return this.getConfiguration().getInt(key);
}
@Override
public Integer getInteger(String key, Integer defaultValue)
{
return this.getConfiguration().getInteger(key, defaultValue);
}
@Override
public Iterator<String> getKeys()
{
return this.getConfiguration().getKeys();
}
@Override
public Iterator<String> getKeys(String prefix)
{
return this.getConfiguration().getKeys(prefix);
}
@Override
public List<Object> getList(String key, List<?> defaultValue)
{
return this.getConfiguration().getList(key, defaultValue);
}
@Override
public List<Object> getList(String key)
{
return this.getConfiguration().getList(key);
}
@Override
public long getLong(String key, long defaultValue)
{
return this.getConfiguration().getLong(key, defaultValue);
}
@Override
public Long getLong(String key, Long defaultValue)
{
return this.getConfiguration().getLong(key, defaultValue);
}
@Override
public long getLong(String key)
{
return this.getConfiguration().getLong(key);
}
@Override
public Properties getProperties(String key)
{
return this.getConfiguration().getProperties(key);
}
@Override
public Object getProperty(String key)
{
return this.getConfiguration().getProperty(key);
}
@Override
public short getShort(String key, short defaultValue)
{
return this.getConfiguration().getShort(key, defaultValue);
}
@Override
public Short getShort(String key, Short defaultValue)
{
return this.getConfiguration().getShort(key, defaultValue);
}
@Override
public short getShort(String key)
{
return this.getConfiguration().getShort(key);
}
@Override
public String getString(String key, String defaultValue)
{
return this.getConfiguration().getString(key, defaultValue);
}
@Override
public String getString(String key)
{
return this.getConfiguration().getString(key);
}
@Override
public String[] getStringArray(String key)
{
return this.getConfiguration().getStringArray(key);
}
@Override
public boolean isEmpty()
{
return this.getConfiguration().isEmpty();
}
@Override
public void setProperty(String key, Object value)
{
if (init)
{
this.getConfiguration().setProperty(key, value);
}
}
@Override
public Configuration subset(String prefix)
{
return this.getConfiguration().subset(prefix);
}
@Override
public Object getReloadLock()
{
return this.getConfiguration().getReloadLock();
}
@Override
public Node getRoot()
{
return this.getConfiguration().getRoot();
}
@Override
public void setRoot(Node node)
{
if (init)
{
this.getConfiguration().setRoot(node);
}
else
{
super.setRoot(node);
}
}
@Override
public ConfigurationNode getRootNode()
{
return this.getConfiguration().getRootNode();
}
@Override
public void setRootNode(ConfigurationNode rootNode)
{
if (init)
{
this.getConfiguration().setRootNode(rootNode);
}
else
{
super.setRootNode(rootNode);
}
}
@Override
public ExpressionEngine getExpressionEngine()
{
return super.getExpressionEngine();
}
@Override
public void setExpressionEngine(ExpressionEngine expressionEngine)
{
super.setExpressionEngine(expressionEngine);
}
@Override
public void addNodes(String key, Collection<? extends ConfigurationNode> nodes)
{
this.getConfiguration().addNodes(key, nodes);
}
@Override
public SubnodeConfiguration configurationAt(String key, boolean supportUpdates)
{
return this.getConfiguration().configurationAt(key, supportUpdates);
}
@Override
public SubnodeConfiguration configurationAt(String key)
{
return this.getConfiguration().configurationAt(key);
}
@Override
public List<HierarchicalConfiguration> configurationsAt(String key)
{
return this.getConfiguration().configurationsAt(key);
}
@Override
public void clearTree(String key)
{
this.getConfiguration().clearTree(key);
}
@Override
public int getMaxIndex(String key)
{
return this.getConfiguration().getMaxIndex(key);
}
@Override
public Configuration interpolatedConfiguration()
{
return this.getConfiguration().interpolatedConfiguration();
}
@Override
public void addConfigurationListener(ConfigurationListener l)
{
super.addConfigurationListener(l);
}
@Override
public boolean removeConfigurationListener(ConfigurationListener l)
{
return super.removeConfigurationListener(l);
}
@Override
public Collection<ConfigurationListener> getConfigurationListeners()
{
return super.getConfigurationListeners();
}
@Override
public void clearConfigurationListeners()
{
super.clearConfigurationListeners();
}
@Override
public void addErrorListener(ConfigurationErrorListener l)
{
super.addErrorListener(l);
}
@Override
public boolean removeErrorListener(ConfigurationErrorListener l)
{
return super.removeErrorListener(l);
}
@Override
public void clearErrorListeners()
{
super.clearErrorListeners();
}
@Override
public Collection<ConfigurationErrorListener> getErrorListeners()
{
return super.getErrorListeners();
}
public void save(Writer writer) throws ConfigurationException
{
if (init)
{
this.getConfiguration().save(writer);
}
}
public void load(Reader reader) throws ConfigurationException
{
if (init)
{
this.getConfiguration().load(reader);
}
}
@Override
public void load() throws ConfigurationException
{
this.getConfiguration();
}
@Override
public void load(String fileName) throws ConfigurationException
{
this.getConfiguration().load(fileName);
}
@Override
public void load(File file) throws ConfigurationException
{
this.getConfiguration().load(file);
}
@Override
public void load(URL url) throws ConfigurationException
{
this.getConfiguration().load(url);
}
@Override
public void load(InputStream in) throws ConfigurationException
{
this.getConfiguration().load(in);
}
@Override
public void load(InputStream in, String encoding) throws ConfigurationException
{
this.getConfiguration().load(in, encoding);
}
@Override
public void save() throws ConfigurationException
{
this.getConfiguration().save();
}
@Override
public void save(String fileName) throws ConfigurationException
{
this.getConfiguration().save(fileName);
}
@Override
public void save(File file) throws ConfigurationException
{
this.getConfiguration().save(file);
}
@Override
public void save(URL url) throws ConfigurationException
{
this.getConfiguration().save(url);
}
@Override
public void save(OutputStream out) throws ConfigurationException
{
this.getConfiguration().save(out);
}
@Override
public void save(OutputStream out, String encoding) throws ConfigurationException
{
this.getConfiguration().save(out, encoding);
}
@Override
public void configurationChanged(ConfigurationEvent event)
{
if (event.getSource() instanceof XMLConfiguration)
{
for (ConfigurationListener listener : getConfigurationListeners())
{
listener.configurationChanged(event);
}
}
}
@Override
public void configurationError(ConfigurationErrorEvent event)
{
if (event.getSource() instanceof XMLConfiguration)
{
for (ConfigurationErrorListener listener : getErrorListeners())
{
listener.configurationError(event);
}
}
if (event.getType() == AbstractFileConfiguration.EVENT_RELOAD)
{
if (isThrowable(event.getCause()))
{
throw new ConfigurationRuntimeException(event.getCause());
}
}
}
@Override
protected Object resolveContainerStore(String key)
{
if (recursive.get().booleanValue())
{
return null;
}
recursive.set(Boolean.TRUE);
try
{
return super.resolveContainerStore(key);
}
finally
{
recursive.set(Boolean.FALSE);
}
}
public void removeConfiguration()
{
String path = getSubstitutor().replace(pattern);
configurationsMap.remove(path);
}
private AbstractHierarchicalFileConfiguration getConfiguration()
{
if (pattern == null)
{
throw new ConfigurationRuntimeException(""File pattern must be defined"");
}
String path = localSubst.replace(pattern);
if (configurationsMap.containsKey(path))
{
return configurationsMap.get(path);
}
if (path.equals(pattern))
{
XMLConfiguration configuration = new XMLConfiguration()
{
@Override
public void load() throws ConfigurationException
{
}
@Override
public void save() throws ConfigurationException
{
}
};
configurationsMap.putIfAbsent(pattern, configuration);
return configuration;
}
XMLConfiguration configuration = new XMLConfiguration();
if (loggerName != null)
{
Log log = LogFactory.getLog(loggerName);
if (log != null)
{
configuration.setLogger(log);
}
}
configuration.setBasePath(getBasePath());
configuration.setFileName(path);
configuration.setFileSystem(getFileSystem());
configuration.setExpressionEngine(getExpressionEngine());
ReloadingStrategy strategy = createReloadingStrategy();
if (strategy != null)
{
configuration.setReloadingStrategy(strategy);
}
configuration.setDelimiterParsingDisabled(isDelimiterParsingDisabled());
configuration.setAttributeSplittingDisabled(isAttributeSplittingDisabled());
configuration.setValidating(validating);
configuration.setSchemaValidation(schemaValidation);
configuration.setEntityResolver(entityResolver);
configuration.setListDelimiter(getListDelimiter());
configuration.addConfigurationListener(this);
configuration.addErrorListener(this);
try
{
configuration.load();
}
catch (ConfigurationException ce)
{
if (isThrowable(ce))
{
throw new ConfigurationRuntimeException(ce);
}
}
configurationsMap.putIfAbsent(path, configuration);
return configurationsMap.get(path);
}
private boolean isThrowable(Throwable throwable)
{
if (!ignoreException)
{
return true;
}
Throwable cause = throwable.getCause();
while (cause != null && !(cause instanceof SAXParseException))
{
cause = cause.getCause();
}
return cause != null;
}
private ReloadingStrategy createReloadingStrategy()
{
if (fileStrategy == null)
{
return null;
}
try
{
ReloadingStrategy strategy = (ReloadingStrategy) BeanUtils.cloneBean(fileStrategy);
strategy.setConfiguration(null);
return strategy;
}
catch (Exception ex)
{
return null;
",private StrSubstitutor localSubst = new StrSubstitutor(new ConfigurationInterpolator());,private StrSubstitutor strsubstitutorVar1 = strsubstitutorLiteral2;
4051,BAD_PRACTICE,SE_BAD_FIELD,FP,configuration,1262,private StrSubstitutor localSubst = new StrSubstitutor(new ConfigurationInterpolator());,private StrSubstitutor localSubst = new StrSubstitutor(new ConfigurationInterpolator());,private StrSubstitutor strsubstitutorVar1 = strsubstitutorLiteral2;
4052,DODGY_CODE,REC_CATCH_EXCEPTION,FP,configuration,1263,"catch (Exception ex)
","private ReloadingStrategy createReloadingStrategy() {
if (fileStrategy == null) {
return null;
}
try {
ReloadingStrategy strategy = (ReloadingStrategy) BeanUtils.cloneBean(fileStrategy);
strategy.setConfiguration(null);
return strategy;
} catch (Exception ex) {
return null;
}
}","private ReloadingStrategy createReloadingStrategy() {
if (fileStrategy == null) {
return null;
}
try {
ReloadingStrategy reloadingstrategyVar1 = reloadingstrategyLiteral2;
reloadingstrategyVar1.setConfiguration(null);
return reloadingstrategyVar1;
} catch (Exception ex) {
return null;
}
}"
4060,PERFORMANCE,DM_NUMBER_CTOR,FP,configuration,1271,"return new Byte(n.byteValue());
","public static Byte toByte(Object value) throws ConversionException {
Number n = toNumber(value, Byte.class);
if (n instanceof Byte) {
return (Byte) n;
} else {
return new Byte(n.byteValue());
}
}","public static Byte toByte(Object value) throws ConversionException {
Number numberVar1 = numberLiteral2;
if (numberVar1 instanceof Byte) {
return (Byte) numberVar1;
} else {
return new Byte(numberVar1.byteValue());
}
}"
4062,DODGY_CODE,REC_CATCH_EXCEPTION,FP,configuration,1273,"catch (Exception e)
","static Object toInternetAddress(Object value) throws ConversionException {
if (value.getClass().getName().equals(INTERNET_ADDRESS_CLASSNAME)) {
return value;
} else if (value instanceof String) {
try {
Constructor<?> ctor = Class.forName(INTERNET_ADDRESS_CLASSNAME).getConstructor(new Class[] { String.class });
return ctor.newInstance(new Object[] { value });
} catch (Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"", e);
}
} else {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"");
}
}","static Object toInternetAddress(Object value) throws ConversionException {
if (value.getClass().getName().equals(INTERNET_ADDRESS_CLASSNAME)) {
return value;
} else if (value instanceof String) {
try {
Constructor<?> constructor<?>Var1 = constructor<?>Literal2;
return constructor<?>Var1.newInstance(new Object[] { value });
} catch (Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"", e);
}
} else {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"");
}
}"
4063,PERFORMANCE,DM_FP_NUMBER_CTOR,FP,configuration,1274,"return new Float(n.floatValue());
","public static Float toFloat(Object value) throws ConversionException {
Number n = toNumber(value, Float.class);
if (n instanceof Float) {
return (Float) n;
} else {
return new Float(n.floatValue());
}
}","public static Float toFloat(Object value) throws ConversionException {
Number numberVar1 = numberLiteral2;
if (numberVar1 instanceof Float) {
return (Float) numberVar1;
} else {
return new Float(numberVar1.floatValue());
}
}"
4064,PERFORMANCE,DM_NUMBER_CTOR,FP,configuration,1275,"return new Long(n.longValue());
","public static Long toLong(Object value) throws ConversionException {
Number n = toNumber(value, Long.class);
if (n instanceof Long) {
return (Long) n;
} else {
return new Long(n.longValue());
}
}","public static Long toLong(Object value) throws ConversionException {
Number numberVar1 = numberLiteral2;
if (numberVar1 instanceof Long) {
return (Long) numberVar1;
} else {
return new Long(numberVar1.longValue());
}
}"
4065,PERFORMANCE,DM_NUMBER_CTOR,FP,configuration,1276,"return new Integer(n.intValue());
","public static Integer toInteger(Object value) throws ConversionException {
Number n = toNumber(value, Integer.class);
if (n instanceof Integer) {
return (Integer) n;
} else {
return new Integer(n.intValue());
}
}","public static Integer toInteger(Object value) throws ConversionException {
Number numberVar1 = numberLiteral2;
if (numberVar1 instanceof Integer) {
return (Integer) numberVar1;
} else {
return new Integer(numberVar1.intValue());
}
}"
4066,DODGY_CODE,REC_CATCH_EXCEPTION,FP,configuration,1277,"catch (Exception ex)
","@Override
public ConfigurationNode getRootNode() {
if (getSubnodeKey() != null) {
try {
List<ConfigurationNode> nodes = getParent().fetchNodeList(getSubnodeKey());
if (nodes.size() != 1) {
setSubnodeKey(null);
} else {
ConfigurationNode currentRoot = nodes.get(0);
if (currentRoot != super.getRootNode()) {
fireEvent(EVENT_SUBNODE_CHANGED, null, null, true);
setRootNode(currentRoot);
fireEvent(EVENT_SUBNODE_CHANGED, null, null, false);
}
return currentRoot;
}
} catch (Exception ex) {
setSubnodeKey(null);
}
}
return super.getRootNode();
}","@Override
public ConfigurationNode getRootNode() {
if (getSubnodeKey() != null) {
try {
List<ConfigurationNode> list<configurationnode>Var1 = list<configurationnode>Literal2;
if (list<configurationnode>Var1.size() != 1) {
setSubnodeKey(null);
} else {
ConfigurationNode configurationnodeVar3 = configurationnodeLiteral4;
if (configurationnodeVar3 != super.getRootNode()) {
fireEvent(EVENT_SUBNODE_CHANGED, null, null, true);
setRootNode(configurationnodeVar3);
fireEvent(EVENT_SUBNODE_CHANGED, null, null, false);
}
return configurationnodeVar3;
}
} catch (Exception ex) {
setSubnodeKey(null);
}
}
return super.getRootNode();
}"
4067,DODGY_CODE,REC_CATCH_EXCEPTION,FP,configuration,1278,"catch (Exception ex)
","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
return;
}
}","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String stringVar1 = stringLiteral2;
Class<?>[] class<?>ArrayVar3 = class<?>ArrayLiteral4;
class<?>ArrayVar3[0] = FileSystemOptions.class;
class<?>ArrayVar3[1] = value.getClass();
try {
Method methodVar5 = methodLiteral6;
Object[] objectArrayVar7 = objectArrayLiteral8;
objectArrayVar7[0] = options;
objectArrayVar7[1] = value;
methodVar5.invoke(builder, objectArrayVar7);
} catch (Exception ex) {
return;
}
}"
4068,PERFORMANCE,URF_UNREAD_FIELD,FP,configuration,1279,private final String protocol;,private final String protocol;,private final String stringVar1;
4070,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,configuration,1281,"catch (Exception ex)
","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
return;
}
}","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String stringVar1 = stringLiteral2;
Class<?>[] class<?>ArrayVar3 = class<?>ArrayLiteral4;
class<?>ArrayVar3[0] = FileSystemOptions.class;
class<?>ArrayVar3[1] = value.getClass();
try {
Method methodVar5 = methodLiteral6;
Object[] objectArrayVar7 = objectArrayLiteral8;
objectArrayVar7[0] = options;
objectArrayVar7[1] = value;
methodVar5.invoke(builder, objectArrayVar7);
} catch (Exception ex) {
return;
}
}"
4079,DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,FP,configuration,1290,"String encoding = getEncoding() != null ? getEncoding() : DEFAULT_ENCODING;
","@Override
public void save(Writer out) throws ConfigurationException {
PrintWriter writer = new PrintWriter(out);
String encoding = getEncoding() != null ? getEncoding() : DEFAULT_ENCODING;
writer.println(""<?xml version=\""1.0\"" encoding=\"""" + encoding + ""\""?>"");
writer.println(""<!DOCTYPE properties SYSTEM \""http://java.sun.com/dtd/properties.dtd\"">"");
writer.println(""<properties>"");
if (getHeader() != null) {
writer.println(""  <comment>"" + StringEscapeUtils.escapeXml(getHeader()) + ""</comment>"");
}
Iterator<String> keys = getKeys();
while (keys.hasNext()) {
String key = keys.next();
Object value = getProperty(key);
if (value instanceof List) {
writeProperty(writer, key, (List<?>) value);
} else {
writeProperty(writer, key, value);
}
}
writer.println(""</properties>"");
writer.flush();
}","@Override
public void save(Writer out) throws ConfigurationException {
PrintWriter printwriterVar1 = printwriterLiteral2;
String stringVar3 = stringLiteral4;
printwriterVar1.println(""<?xml version=\""1.0\"" encoding=\"""" + stringVar3 + ""\""?>"");
printwriterVar1.println(""<!DOCTYPE properties SYSTEM \""http://java.sun.com/dtd/properties.dtd\"">"");
printwriterVar1.println(""<properties>"");
if (getHeader() != null) {
printwriterVar1.println(""  <comment>"" + StringEscapeUtils.escapeXml(getHeader()) + ""</comment>"");
}
Iterator<String> iterator<string>Var5 = iterator<string>Literal6;
while (iterator<string>Var5.hasNext()) {
String stringVar7 = stringLiteral8;
Object objectVar9 = objectLiteral10;
if (objectVar9 instanceof List) {
writeProperty(printwriterVar1, stringVar7, (List<?>) objectVar9);
} else {
writeProperty(printwriterVar1, stringVar7, objectVar9);
}
}
printwriterVar1.println(""</properties>"");
printwriterVar1.flush();
}"
4081,DODGY_CODE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,FP,configuration,1292,"SubnodeConfiguration config = (SubnodeConfiguration) iter.next();
","protected BeanDeclaration createBeanDeclaration(ConfigurationNode node) {
List<HierarchicalConfiguration> list = getConfiguration().configurationsAt(node.getName());
if (list.size() == 1) {
return new XMLBeanDeclaration((SubnodeConfiguration) list.get(0), node);
} else {
Iterator<HierarchicalConfiguration> iter = list.iterator();
while (iter.hasNext()) {
SubnodeConfiguration config = (SubnodeConfiguration) iter.next();
if (config.getRootNode().equals(node)) {
return new XMLBeanDeclaration(config, node);
}
}
throw new ConfigurationRuntimeException(""Unable to match node for "" + node.getName());
}
}","protected BeanDeclaration createBeanDeclaration(ConfigurationNode node) {
List<HierarchicalConfiguration> list<hierarchicalconfiguration>Var1 = list<hierarchicalconfiguration>Literal2;
if (list<hierarchicalconfiguration>Var1.size() == 1) {
return new XMLBeanDeclaration((SubnodeConfiguration) list<hierarchicalconfiguration>Var1.get(0), node);
} else {
Iterator<HierarchicalConfiguration> iterator<hierarchicalconfiguration>Var3 = iterator<hierarchicalconfiguration>Literal4;
while (iterator<hierarchicalconfiguration>Var3.hasNext()) {
SubnodeConfiguration subnodeconfigurationVar5 = subnodeconfigurationLiteral6;
if (subnodeconfigurationVar5.getRootNode().equals(node)) {
return new XMLBeanDeclaration(subnodeconfigurationVar5, node);
}
}
throw new ConfigurationRuntimeException(""Unable to match node for "" + node.getName());
}
}"
4086,DODGY_CODE,REC_CATCH_EXCEPTION,FP,configuration,1297,"catch (Exception e)
","public void load(Reader in) throws ConfigurationException {
if (!(getRootNode() instanceof PListNode)) {
initRoot();
}
EntityResolver resolver = new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
};
XMLPropertyListHandler handler = new XMLPropertyListHandler(getRoot());
try {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}","public void load(Reader in) throws ConfigurationException {
if (!(getRootNode() instanceof PListNode)) {
initRoot();
}
EntityResolver entityresolverVar1 = entityresolverLiteral2;
XMLPropertyListHandler xmlpropertylisthandlerVar3 = xmlpropertylisthandlerLiteral4;
try {
SAXParserFactory saxparserfactoryVar5 = saxparserfactoryLiteral6;
saxparserfactoryVar5.setValidating(true);
SAXParser saxparserVar7 = saxparserLiteral8;
saxparserVar7.getXMLReader().setEntityResolver(entityresolverVar1);
saxparserVar7.getXMLReader().setContentHandler(xmlpropertylisthandlerVar3);
saxparserVar7.getXMLReader().parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}"
4101,PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,configuration,1312,"{
@Override
protected Object interpolate(Object value)
{
return parent.interpolate(value);
}
@Override
public ConfigurationInterpolator getInterpolator()
{
return parent.getInterpolator();
","@Override
public void visitBeforeChildren(ImmutableNode node, NodeHandler<ImmutableNode> handler) {
ReferenceNodeHandler refHandler = (ReferenceNodeHandler) handler;
updateNode(node, refHandler);
insertNewChildNodes(node, refHandler);
}","@Override
public void visitBeforeChildren(ImmutableNode node, NodeHandler<ImmutableNode> handler) {
ReferenceNodeHandler referencenodehandlerVar1 = referencenodehandlerLiteral2;
updateNode(node, referencenodehandlerVar1);
insertNewChildNodes(node, referencenodehandlerVar1);
}"
4110,PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,configuration,1321,"{
@Override
public void error(SAXParseException ex) throws SAXException
{
throw ex;
","@Override
public void read(InputStream in) throws ConfigurationException, IOException {
load(new InputSource(in));
}","@Override
public void read(InputStream in) throws ConfigurationException, IOException {
load(new InputSource(in));
}"
4111,DODGY_CODE,REC_CATCH_EXCEPTION,FP,configuration,1322,"catch (Exception e)
","@Override
public void read(Reader in) throws ConfigurationException {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setNamespaceAware(false);
factory.setValidating(true);
try {
SAXParser parser = factory.newSAXParser();
XMLReader xmlReader = parser.getXMLReader();
xmlReader.setEntityResolver(new EntityResolver() {
@Override
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlReader.setContentHandler(new XMLPropertiesHandler());
xmlReader.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
// todo: support included properties ?
}","@Override
public void read(Reader in) throws ConfigurationException {
SAXParserFactory saxparserfactoryVar1 = saxparserfactoryLiteral2;
saxparserfactoryVar1.setNamespaceAware(false);
saxparserfactoryVar1.setValidating(true);
try {
SAXParser saxparserVar3 = saxparserLiteral4;
XMLReader xmlreaderVar5 = xmlreaderLiteral6;
xmlreaderVar5.setEntityResolver(new EntityResolver() {
@Override
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlreaderVar5.setContentHandler(new XMLPropertiesHandler());
xmlreaderVar5.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
// todo: support included properties ?
}"
4113,DODGY_CODE,REC_CATCH_EXCEPTION,FP,configuration,1324,"catch (Exception ex)
","private static Class<?> getDefaultClass(Object bean, String propName) {
try {
PropertyDescriptor desc = BEAN_UTILS_BEAN.getPropertyUtils().getPropertyDescriptor(bean, propName);
if (desc == null) {
return null;
}
return desc.getPropertyType();
} catch (Exception ex) {
return null;
}
}","private static Class<?> getDefaultClass(Object bean, String propName) {
try {
PropertyDescriptor propertydescriptorVar1 = propertydescriptorLiteral2;
if (propertydescriptorVar1 == null) {
return null;
}
return propertydescriptorVar1.getPropertyType();
} catch (Exception ex) {
return null;
}
}"
4122,DODGY_CODE,REC_CATCH_EXCEPTION,FP,configuration,1333,"catch (Exception e)
","static Object toInternetAddress(Object value) throws ConversionException {
if (value.getClass().getName().equals(INTERNET_ADDRESS_CLASSNAME)) {
return value;
} else if (value instanceof String) {
try {
Constructor<?> ctor = Class.forName(INTERNET_ADDRESS_CLASSNAME).getConstructor(String.class);
return ctor.newInstance(value);
} catch (Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"", e);
}
} else {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"");
}
}","static Object toInternetAddress(Object value) throws ConversionException {
if (value.getClass().getName().equals(INTERNET_ADDRESS_CLASSNAME)) {
return value;
} else if (value instanceof String) {
try {
Constructor<?> constructor<?>Var1 = constructor<?>Literal2;
return constructor<?>Var1.newInstance(value);
} catch (Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"", e);
}
} else {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"");
}
}"
4143,BAD_PRACTICE,SE_BAD_FIELD,FP,configuration,1354,private final QueryResult<T> attributeResult;,private final QueryResult<T> attributeResult;,private final QueryResult<T> queryresult<t>Var1;
4194,I18N,DM_DEFAULT_ENCODING,FP,configuration,1405,"writer = new OutputStreamWriter(out);
","public void save(OutputStream out, String encoding) throws ConfigurationException {
Writer writer = null;
if (encoding != null) {
try {
writer = new OutputStreamWriter(out, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (writer == null) {
writer = new OutputStreamWriter(out);
}
save(writer);
}","public void save(OutputStream out, String encoding) throws ConfigurationException {
Writer writerVar1 = writerLiteral2;
if (encoding != null) {
try {
writerVar1 = new OutputStreamWriter(out, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (writerVar1 == null) {
writerVar1 = new OutputStreamWriter(out);
}
save(writerVar1);
}"
4196,DODGY_CODE,RI_REDUNDANT_INTERFACES,FP,configuration,1407,"public class CombinedConfiguration extends HierarchicalReloadableConfiguration implements
ConfigurationListener, Cloneable
{
public static final int EVENT_COMBINED_INVALIDATE = 40;
private static final long serialVersionUID = 8338574525528692307L;
private static final DefaultExpressionEngine AT_ENGINE = new DefaultExpressionEngine();
private static final NodeCombiner DEFAULT_COMBINER = new UnionCombiner();
private static final String PROP_RELOAD_CHECK = ""CombinedConfigurationReloadCheck"";
private NodeCombiner nodeCombiner;
private volatile ConfigurationNode combinedRoot;
private List configurations;
private Map namedConfigurations;
private boolean ignoreReloadExceptions = true;
private boolean reloadRequired = false;
private ExpressionEngine conversionExpressionEngine;
private boolean forceReloadCheck;
public CombinedConfiguration(NodeCombiner comb)
{
setNodeCombiner((comb != null) ? comb : DEFAULT_COMBINER);
clear();
}
public CombinedConfiguration(NodeCombiner comb, Lock lock)
{
super(lock);
setNodeCombiner((comb != null) ? comb : DEFAULT_COMBINER);
clear();
}
public CombinedConfiguration(Lock lock)
{
this(null, lock);
}
public CombinedConfiguration()
{
this(null, null);
}
public NodeCombiner getNodeCombiner()
{
return nodeCombiner;
}
public void setNodeCombiner(NodeCombiner nodeCombiner)
{
if (nodeCombiner == null)
{
throw new IllegalArgumentException(
""Node combiner must not be null!"");
}
this.nodeCombiner = nodeCombiner;
invalidate();
}
public boolean isForceReloadCheck()
{
return forceReloadCheck;
}
public void setForceReloadCheck(boolean forceReloadCheck)
{
this.forceReloadCheck = forceReloadCheck;
}
public ExpressionEngine getConversionExpressionEngine()
{
return conversionExpressionEngine;
}
public void setConversionExpressionEngine(
ExpressionEngine conversionExpressionEngine)
{
this.conversionExpressionEngine = conversionExpressionEngine;
}
public boolean isIgnoreReloadExceptions()
{
return ignoreReloadExceptions;
}
public void setIgnoreReloadExceptions(boolean ignoreReloadExceptions)
{
this.ignoreReloadExceptions = ignoreReloadExceptions;
}
public void addConfiguration(AbstractConfiguration config, String name,
String at)
{
if (config == null)
{
throw new IllegalArgumentException(
""Added configuration must not be null!"");
}
if (name != null && namedConfigurations.containsKey(name))
{
throw new ConfigurationRuntimeException(
""A configuration with the name '""
+ name
+ ""' already exists in this combined configuration!"");
}
ConfigData cd = new ConfigData(config, name, at);
if (getLogger().isDebugEnabled())
{
getLogger().debug(""Adding configuration "" + config + "" with name "" + name);
}
configurations.add(cd);
if (name != null)
{
namedConfigurations.put(name, config);
}
config.addConfigurationListener(this);
invalidate();
}
public void addConfiguration(AbstractConfiguration config, String name)
{
addConfiguration(config, name, null);
}
public void addConfiguration(AbstractConfiguration config)
{
addConfiguration(config, null, null);
}
public int getNumberOfConfigurations()
{
return configurations.size();
}
public Configuration getConfiguration(int index)
{
ConfigData cd = (ConfigData) configurations.get(index);
return cd.getConfiguration();
}
public Configuration getConfiguration(String name)
{
return (Configuration) namedConfigurations.get(name);
}
public List getConfigurations()
{
List list = new ArrayList();
Iterator iter = configurations.iterator();
while (iter.hasNext())
{
list.add(((ConfigData) iter.next()).getConfiguration());
}
return list;
}
public List getConfigurationNameList()
{
List list = new ArrayList();
Iterator iter = configurations.iterator();
while (iter.hasNext())
{
list.add(((ConfigData) iter.next()).getName());
}
return list;
}
public boolean removeConfiguration(Configuration config)
{
for (int index = 0; index < getNumberOfConfigurations(); index++)
{
if (((ConfigData) configurations.get(index)).getConfiguration() == config)
{
removeConfigurationAt(index);
return true;
}
}
return false;
}
public Configuration removeConfigurationAt(int index)
{
ConfigData cd = (ConfigData) configurations.remove(index);
if (cd.getName() != null)
{
namedConfigurations.remove(cd.getName());
}
cd.getConfiguration().removeConfigurationListener(this);
invalidate();
return cd.getConfiguration();
}
public Configuration removeConfiguration(String name)
{
Configuration conf = getConfiguration(name);
if (conf != null)
{
removeConfiguration(conf);
}
return conf;
}
public Set getConfigurationNames()
{
return namedConfigurations.keySet();
}
public void invalidate()
{
reloadRequired = true;
fireEvent(EVENT_COMBINED_INVALIDATE, null, null, false);
}
public void configurationChanged(ConfigurationEvent event)
{
if (event.getType() == AbstractFileConfiguration.EVENT_CONFIG_CHANGED)
{
fireEvent(event.getType(), event.getPropertyName(), event.getPropertyValue(), event.isBeforeUpdate());
}
else if (!event.isBeforeUpdate())
{
invalidate();
}
}
public ConfigurationNode getRootNode()
{
synchronized(getReloadLock())
{
if (reloadRequired || combinedRoot == null)
{
combinedRoot = constructCombinedNode();
reloadRequired = false;
}
return combinedRoot;
}
}
public void clear()
{
fireEvent(EVENT_CLEAR, null, null, true);
configurations = new ArrayList();
namedConfigurations = new HashMap();
fireEvent(EVENT_CLEAR, null, null, false);
invalidate();
}
public Object clone()
{
CombinedConfiguration copy = (CombinedConfiguration) super.clone();
copy.clear();
for (Iterator it = configurations.iterator(); it.hasNext();)
{
ConfigData cd = (ConfigData) it.next();
copy.addConfiguration((AbstractConfiguration) ConfigurationUtils
.cloneConfiguration(cd.getConfiguration()), cd.getName(),
cd.getAt());
}
copy.setRootNode(new DefaultConfigurationNode());
return copy;
}
public Configuration getSource(String key)
{
if (key == null)
{
throw new IllegalArgumentException(""Key must not be null!"");
}
List nodes = fetchNodeList(key);
if (nodes.isEmpty())
{
return null;
}
Iterator it = nodes.iterator();
Configuration source = findSourceConfiguration((ConfigurationNode) it
.next());
while (it.hasNext())
{
Configuration src = findSourceConfiguration((ConfigurationNode) it
.next());
if (src != source)
{
throw new IllegalArgumentException(""The key "" + key
+ "" is defined by multiple sources!"");
}
}
return source;
}
protected List fetchNodeList(String key)
{
if (isForceReloadCheck())
{
performReloadCheck();
}
return super.fetchNodeList(key);
}
protected void performReloadCheck()
{
for (Iterator it = configurations.iterator(); it.hasNext();)
{
try
{
((ConfigData) it.next()).getConfiguration().getProperty(
PROP_RELOAD_CHECK);
}
catch (Exception ex)
{
if (!ignoreReloadExceptions)
{
throw new ConfigurationRuntimeException(ex);
}
}
}
}
private ConfigurationNode constructCombinedNode()
{
if (getNumberOfConfigurations() < 1)
{
if (getLogger().isDebugEnabled())
{
getLogger().debug(""No configurations defined for "" + this);
}
return new ViewNode();
}
else
{
Iterator it = configurations.iterator();
ConfigurationNode node = ((ConfigData) it.next())
.getTransformedRoot();
while (it.hasNext())
{
node = getNodeCombiner().combine(node,
((ConfigData) it.next()).getTransformedRoot());
}
if (getLogger().isDebugEnabled())
{
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}
private Configuration findSourceConfiguration(ConfigurationNode node)
{
synchronized(getReloadLock())
{
ConfigurationNode root = null;
ConfigurationNode current = node;
while (current != null)
{
root = current;
current = current.getParentNode();
}
for (Iterator it = configurations.iterator(); it.hasNext();)
{
ConfigData cd = (ConfigData) it.next();
if (root == cd.getRootNode())
{
return cd.getConfiguration();
}
}
}
return this;
","private ConfigurationNode constructCombinedNode() {
if (getNumberOfConfigurations() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return new ViewNode();
} else {
Iterator it = configurations.iterator();
ConfigurationNode node = ((ConfigData) it.next()).getTransformedRoot();
while (it.hasNext()) {
node = getNodeCombiner().combine(node, ((ConfigData) it.next()).getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}","private ConfigurationNode constructCombinedNode() {
if (getNumberOfConfigurations() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return new ViewNode();
} else {
Iterator iteratorVar1 = iteratorLiteral2;
ConfigurationNode configurationnodeVar3 = configurationnodeLiteral4;
while (iteratorVar1.hasNext()) {
configurationnodeVar3 = getNodeCombiner().combine(configurationnodeVar3, ((ConfigData) iteratorVar1.next()).getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream bytearrayoutputstreamVar5 = bytearrayoutputstreamLiteral6;
PrintStream printstreamVar7 = printstreamLiteral8;
TreeUtils.printTree(printstreamVar7, configurationnodeVar3);
getLogger().debug(bytearrayoutputstreamVar5.toString());
}
return configurationnodeVar3;
}
}"
4201,DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,FP,configuration,1412,"if (file != null && file.exists())
","public static URL locate(FileSystem fileSystem, String base, String name) {
if (log.isDebugEnabled()) {
StringBuffer buf = new StringBuffer();
buf.append(""ConfigurationUtils.locate(): base is "").append(base);
buf.append("", name is "").append(name);
log.debug(buf.toString());
}
if (name == null) {
return null;
}
URL url = fileSystem.locateFromURL(base, name);
if (url == null) {
File file = new File(name);
if (file.isAbsolute() && file.exists()) {
try {
url = toURL(file);
log.debug(""Loading configuration from the absolute path "" + name);
} catch (MalformedURLException e) {
log.warn(""Could not obtain URL from file"", e);
}
}
}
if (url == null) {
try {
File file = constructFile(base, name);
if (file != null && file.exists()) {
url = toURL(file);
}
if (url != null) {
log.debug(""Loading configuration from the path "" + file);
}
} catch (MalformedURLException e) {
log.warn(""Could not obtain URL from file"", e);
}
}
if (url == null) {
try {
File file = constructFile(System.getProperty(""user.home""), name);
if (file != null && file.exists()) {
url = toURL(file);
}
if (url != null) {
log.debug(""Loading configuration from the home path "" + file);
}
} catch (MalformedURLException e) {
log.warn(""Could not obtain URL from file"", e);
}
}
if (url == null) {
url = locateFromClasspath(name);
}
return url;
}","public static URL locate(FileSystem fileSystem, String base, String name) {
if (log.isDebugEnabled()) {
StringBuffer stringbufferVar1 = stringbufferLiteral2;
stringbufferVar1.append(""ConfigurationUtils.locate(): base is "").append(base);
stringbufferVar1.append("", name is "").append(name);
log.debug(stringbufferVar1.toString());
}
if (name == null) {
return null;
}
URL urlVar3 = urlLiteral4;
if (urlVar3 == null) {
File fileVar5 = fileLiteral6;
if (fileVar5.isAbsolute() && fileVar5.exists()) {
try {
urlVar3 = toURL(fileVar5);
log.debug(""Loading configuration from the absolute path "" + name);
} catch (MalformedURLException e) {
log.warn(""Could not obtain URL from file"", e);
}
}
}
if (urlVar3 == null) {
try {
File fileVar5 = fileLiteral7;
if (fileVar5 != null && fileVar5.exists()) {
urlVar3 = toURL(fileVar5);
}
if (urlVar3 != null) {
log.debug(""Loading configuration from the path "" + fileVar5);
}
} catch (MalformedURLException e) {
log.warn(""Could not obtain URL from file"", e);
}
}
if (urlVar3 == null) {
try {
File fileVar5 = fileLiteral8;
if (fileVar5 != null && fileVar5.exists()) {
urlVar3 = toURL(fileVar5);
}
if (urlVar3 != null) {
log.debug(""Loading configuration from the home path "" + fileVar5);
}
} catch (MalformedURLException e) {
log.warn(""Could not obtain URL from file"", e);
}
}
if (urlVar3 == null) {
urlVar3 = locateFromClasspath(name);
}
return urlVar3;
}"
4213,SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,configuration,1424,"pstmt = conn.prepareStatement(query.toString());
","public Object getProperty(String key) {
Object result = null;
StringBuffer query = new StringBuffer(""SELECT * FROM "");
query.append(table).append("" WHERE "");
query.append(keyColumn).append(""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
ResultSet rs = pstmt.executeQuery();
List results = new ArrayList();
while (rs.next()) {
Object value = rs.getObject(valueColumn);
if (isDelimiterParsingDisabled()) {
results.add(value);
} else {
CollectionUtils.addAll(results, PropertyConverter.toIterator(value, getListDelimiter()));
}
}
if (!results.isEmpty()) {
result = (results.size() > 1) ? results : results.get(0);
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
close(conn, pstmt);
}
return result;
}","public Object getProperty(String key) {
Object objectVar1 = objectLiteral2;
StringBuffer stringbufferVar3 = stringbufferLiteral4;
stringbufferVar3.append(table).append("" WHERE "");
stringbufferVar3.append(keyColumn).append(""=?"");
if (nameColumn != null) {
stringbufferVar3.append("" AND "" + nameColumn + ""=?"");
}
Connection connectionVar5 = objectLiteral2;
PreparedStatement preparedstatementVar6 = objectLiteral2;
try {
connectionVar5 = getConnection();
preparedstatementVar6 = connectionVar5.prepareStatement(stringbufferVar3.toString());
preparedstatementVar6.setString(1, key);
if (nameColumn != null) {
preparedstatementVar6.setString(2, name);
}
ResultSet resultsetVar7 = resultsetLiteral8;
List listVar9 = listLiteral10;
while (resultsetVar7.next()) {
Object objectVar11 = objectLiteral12;
if (isDelimiterParsingDisabled()) {
listVar9.add(objectVar11);
} else {
CollectionUtils.addAll(listVar9, PropertyConverter.toIterator(objectVar11, getListDelimiter()));
}
}
if (!listVar9.isEmpty()) {
objectVar1 = (listVar9.size() > 1) ? listVar9 : listVar9.get(0);
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
close(connectionVar5, preparedstatementVar6);
}
return objectVar1;
}"
4223,DODGY_CODE,REC_CATCH_EXCEPTION,FP,configuration,1434,"catch (Exception ex)
","void extractProperties15() {
try {
Method method = System.class.getMethod(METHOD_NAME, null);
environment = (Map) method.invoke(null, null);
} catch (Exception ex) {
throw new ConfigurationRuntimeException(""Error when accessing environment properties"", ex);
}
}","void extractProperties15() {
try {
Method methodVar1 = methodLiteral2;
environment = (Map) methodVar1.invoke(null, null);
} catch (Exception ex) {
throw new ConfigurationRuntimeException(""Error when accessing environment properties"", ex);
}
}"
4226,BAD_PRACTICE,SE_NO_SERIALVERSIONID,FP,configuration,1437,"super();
reloadLock = new Lock(LOCK_NAME);
}
public HierarchicalReloadableConfiguration(Object lock)
{
super();
reloadLock = lock == null ? new Lock(LOCK_NAME) : lock;
}
public HierarchicalReloadableConfiguration(HierarchicalConfiguration c)
{
super(c);
reloadLock = new Lock(LOCK_NAME);
}
public Object getReloadLock()
{
return reloadLock;
",private final Object reloadLock;,private final Object objectVar1;
4230,DODGY_CODE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,FP,configuration,1441,"instanceId = ++counter;
","public Lock(String name) {
this.name = name;
synchronized (counterLock) {
instanceId = ++counter;
}
}","public Lock(String name) {
this.name = name;
synchronized (counterLock) {
instanceId = ++counter;
}
}"
4233,BAD_PRACTICE,SE_BAD_FIELD,FP,configuration,1444,private ReloadingStrategy fileStrategy;,private ReloadingStrategy fileStrategy;,private ReloadingStrategy reloadingstrategyVar1;
4235,DODGY_CODE,REC_CATCH_EXCEPTION,FP,configuration,1446,"catch (Exception ex)
","private ReloadingStrategy createReloadingStrategy() {
if (fileStrategy == null) {
return null;
}
try {
ReloadingStrategy strategy = (ReloadingStrategy) BeanUtils.cloneBean(fileStrategy);
strategy.setConfiguration(null);
return strategy;
} catch (Exception ex) {
return null;
}
}","private ReloadingStrategy createReloadingStrategy() {
if (fileStrategy == null) {
return null;
}
try {
ReloadingStrategy reloadingstrategyVar1 = reloadingstrategyLiteral2;
reloadingstrategyVar1.setConfiguration(null);
return reloadingstrategyVar1;
} catch (Exception ex) {
return null;
}
}"
4245,I18N,DM_CONVERT_CASE,FP,configuration,1456,"String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class[] paramTypes = new Class[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
return;
}
}","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String stringVar1 = stringLiteral2;
Class[] classArrayVar3 = classArrayLiteral4;
classArrayVar3[0] = FileSystemOptions.class;
classArrayVar3[1] = value.getClass();
try {
Method methodVar5 = methodLiteral6;
Object[] objectArrayVar7 = objectArrayLiteral8;
objectArrayVar7[0] = options;
objectArrayVar7[1] = value;
methodVar5.invoke(builder, objectArrayVar7);
} catch (Exception ex) {
return;
}
}"
4249,PERFORMANCE,URF_UNREAD_FIELD,FP,configuration,1460,private final String protocol;,private final String protocol;,private final String stringVar1;
4253,PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,configuration,1464,"{
public void error(SAXParseException ex) throws SAXException
{
throw ex;
","private XMLNode convertToXMLNode(ConfigurationNode node) {
if (node instanceof XMLNode) {
return (XMLNode) node;
}
XMLNode nd = (XMLNode) createNode(node.getName());
nd.setValue(node.getValue());
nd.setAttribute(node.isAttribute());
for (Iterator it = node.getChildren().iterator(); it.hasNext(); ) {
nd.addChild(convertToXMLNode((ConfigurationNode) it.next()));
}
for (Iterator it = node.getAttributes().iterator(); it.hasNext(); ) {
nd.addAttribute(convertToXMLNode((ConfigurationNode) it.next()));
}
return nd;
}","private XMLNode convertToXMLNode(ConfigurationNode node) {
if (node instanceof XMLNode) {
return (XMLNode) node;
}
XMLNode xmlnodeVar1 = xmlnodeLiteral2;
xmlnodeVar1.setValue(node.getValue());
xmlnodeVar1.setAttribute(node.isAttribute());
for (Iterator iteratorVar6 = iteratorLiteral7; iteratorVar3.hasNext(); ) {
xmlnodeVar1.addChild(convertToXMLNode((ConfigurationNode) iteratorVar3.next()));
}
for (Iterator iteratorVar6 = iteratorLiteral8; iteratorVar3.hasNext(); ) {
xmlnodeVar1.addAttribute(convertToXMLNode((ConfigurationNode) iteratorVar3.next()));
}
return xmlnodeVar1;
}"
4255,PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,configuration,1466,"{
public InputSource resolveEntity(String publicId, String systemId)
{
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
","public void save(Writer out) throws ConfigurationException {
PrintWriter writer = new PrintWriter(out);
String encoding = getEncoding() != null ? getEncoding() : DEFAULT_ENCODING;
writer.println(""<?xml version=\""1.0\"" encoding=\"""" + encoding + ""\""?>"");
writer.println(""<!DOCTYPE properties SYSTEM \""http://java.sun.com/dtd/properties.dtd\"">"");
writer.println(""<properties>"");
if (getHeader() != null) {
writer.println(""  <comment>"" + StringEscapeUtils.escapeXml(getHeader()) + ""</comment>"");
}
Iterator keys = getKeys();
while (keys.hasNext()) {
String key = (String) keys.next();
Object value = getProperty(key);
if (value instanceof List) {
writeProperty(writer, key, (List) value);
} else {
writeProperty(writer, key, value);
}
}
writer.println(""</properties>"");
writer.flush();
}","public void save(Writer out) throws ConfigurationException {
PrintWriter printwriterVar1 = printwriterLiteral2;
String stringVar3 = stringLiteral4;
printwriterVar1.println(""<?xml version=\""1.0\"" encoding=\"""" + stringVar3 + ""\""?>"");
printwriterVar1.println(""<!DOCTYPE properties SYSTEM \""http://java.sun.com/dtd/properties.dtd\"">"");
printwriterVar1.println(""<properties>"");
if (getHeader() != null) {
printwriterVar1.println(""  <comment>"" + StringEscapeUtils.escapeXml(getHeader()) + ""</comment>"");
}
Iterator iteratorVar5 = iteratorLiteral6;
while (iteratorVar5.hasNext()) {
String stringVar7 = stringLiteral8;
Object objectVar9 = objectLiteral10;
if (objectVar9 instanceof List) {
writeProperty(printwriterVar1, stringVar7, (List) objectVar9);
} else {
writeProperty(printwriterVar1, stringVar7, objectVar9);
}
}
printwriterVar1.println(""</properties>"");
printwriterVar1.flush();
}"
4258,DODGY_CODE,REC_CATCH_EXCEPTION,FP,configuration,1469,"catch (Exception ex)
","private static Class getDefaultClass(Object bean, String propName) {
try {
PropertyDescriptor desc = PropertyUtils.getPropertyDescriptor(bean, propName);
if (desc == null) {
return null;
}
return desc.getPropertyType();
} catch (Exception ex) {
return null;
}
}","private static Class getDefaultClass(Object bean, String propName) {
try {
PropertyDescriptor propertydescriptorVar1 = propertydescriptorLiteral2;
if (propertydescriptorVar1 == null) {
return null;
}
return propertydescriptorVar1.getPropertyType();
} catch (Exception ex) {
return null;
}
}"
4261,BAD_PRACTICE,SE_BAD_FIELD,FP,configuration,1472,public Token currentToken;,public Token currentToken;,public Token tokenVar1;
4262,PERFORMANCE,SBSC_USE_STRINGBUFFER_CONCATENATION,FP,configuration,1473,"expected += tokenImage[expectedTokenSequences[i][j]] + "" "";
","public String getMessage() {
if (!specialConstructor) {
return super.getMessage();
}
String expected = """";
int maxSize = 0;
for (int i = 0; i < expectedTokenSequences.length; i++) {
if (maxSize < expectedTokenSequences[i].length) {
maxSize = expectedTokenSequences[i].length;
}
for (int j = 0; j < expectedTokenSequences[i].length; j++) {
expected += tokenImage[expectedTokenSequences[i][j]] + "" "";
}
if (expectedTokenSequences[i][expectedTokenSequences[i].length - 1] != 0) {
expected += ""..."";
}
expected += eol + ""    "";
}
String retval = ""Encountered \"""";
Token tok = currentToken.next;
for (int i = 0; i < maxSize; i++) {
if (i != 0)
retval += "" "";
if (tok.kind == 0) {
retval += tokenImage[0];
break;
}
retval += add_escapes(tok.image);
tok = tok.next;
}
retval += ""\"" at line "" + currentToken.next.beginLine + "", column "" + currentToken.next.beginColumn;
retval += ""."" + eol;
if (expectedTokenSequences.length == 1) {
retval += ""Was expecting:"" + eol + ""    "";
} else {
retval += ""Was expecting one of:"" + eol + ""    "";
}
retval += expected;
return retval;
}","public String getMessage() {
if (!specialConstructor) {
return super.getMessage();
}
String stringVar1 = stringLiteral2;
int intVar3 = intLiteral4;
for (int intVar11 = intLiteral12; intVar5 < intLiteral1; intVar5++) {
if (intVar3 < expectedTokenSequences[intVar5].length) {
intVar3 = expectedTokenSequences[intVar5].length;
}
for (int intVar13 = intLiteral12; intVar6 < intLiteral2; intVar6++) {
stringVar1 += tokenImage[expectedTokenSequences[intVar5][intVar6]] + "" "";
}
if (expectedTokenSequences[intVar5][expectedTokenSequences[intVar5].length - 1] != 0) {
stringVar1 += ""..."";
}
stringVar1 += eol + ""    "";
}
String stringVar7 = stringLiteral8;
Token tokenVar9 = tokenLiteral10;
for (int intVar11 = intLiteral12; intVar5 < intLiteral3; intVar5++) {
if (intVar5 != 0)
stringVar7 += "" "";
if (tokenVar9.kind == 0) {
stringVar7 += tokenImage[0];
break;
}
stringVar7 += add_escapes(tokenVar9.image);
tokenVar9 = tokenVar9.next;
}
stringVar7 += ""\"" at line "" + currentToken.next.beginLine + "", column "" + currentToken.next.beginColumn;
stringVar7 += ""."" + eol;
if (expectedTokenSequences.length == 1) {
stringVar7 += ""Was expecting:"" + eol + ""    "";
} else {
stringVar7 += ""Was expecting one of:"" + eol + ""    "";
}
stringVar7 += stringVar1;
return stringVar7;
}"
4264,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,configuration,1475,"token_source = tm;
token = new Token();
jj_ntk = -1;
jj_gen = 0;
for (int i = 0; i < 6; i++) jj_la1[i] = -1;
for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
}
","public void ReInit(PropertyListParserTokenManager tm) {
token_source = tm;
token = new Token();
jj_ntk = -1;
jj_gen = 0;
for (int i = 0; i < 6; i++) jj_la1[i] = -1;
for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
}","public void ReInit(PropertyListParserTokenManager tm) {
token_source = tm;
token = new Token();
jj_ntk = -1;
jj_gen = 0;
for (int intVar3 = intLiteral4; intVar1 < intLiteral1; intVar1++) jj_la1[intVar1] = -1;
for (int intVar3 = intLiteral4; intVar1 < intLiteral2; intVar1++) jj_2_rtns[intVar1] = new JJCalls();
}"
4269,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,configuration,1480,"String key = null;
Object value = null;
Node node = new Node();
key = String();
node.setName(key);
jj_consume_token(EQUAL);
value = Element();
node.setValue(value);
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
case DICT_SEPARATOR:
jj_consume_token(DICT_SEPARATOR);
break;
default:
jj_la1[1] = jj_gen;
;
}
{if (true) return node;}
","final public Node Property() throws ParseException {
String key = null;
Object value = null;
Node node = new Node();
key = String();
node.setName(key);
jj_consume_token(EQUAL);
value = Element();
node.setValue(value);
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case DICT_SEPARATOR:
jj_consume_token(DICT_SEPARATOR);
break;
default:
jj_la1[1] = jj_gen;
;
}
{
if (true)
return node;
}
throw new Error(""Missing return statement in function"");
}","final public Node Property() throws ParseException {
String stringVar1 = stringLiteral2;
Object objectVar3 = stringLiteral2;
Node nodeVar4 = nodeLiteral5;
stringVar1 = String();
nodeVar4.setName(stringVar1);
jj_consume_token(EQUAL);
objectVar3 = Element();
nodeVar4.setValue(objectVar3);
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case DICT_SEPARATOR:
jj_consume_token(DICT_SEPARATOR);
break;
default:
jj_la1[1] = jj_gen;
;
}
{
if (true)
return nodeVar4;
}
throw new Error(""Missing return statement in function"");
}"
4272,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,configuration,1483,"jj_input_stream.ReInit(stream, 1, 1);
token_source.ReInit(jj_input_stream);
token = new Token();
jj_ntk = -1;
jj_gen = 0;
for (int i = 0; i < 6; i++) jj_la1[i] = -1;
for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
}
","public void ReInit(java.io.Reader stream) {
jj_input_stream.ReInit(stream, 1, 1);
token_source.ReInit(jj_input_stream);
token = new Token();
jj_ntk = -1;
jj_gen = 0;
for (int i = 0; i < 6; i++) jj_la1[i] = -1;
for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
}","public void ReInit(java.io.Reader stream) {
jj_input_stream.ReInit(stream, 1, 1);
token_source.ReInit(jj_input_stream);
token = new Token();
jj_ntk = -1;
jj_gen = 0;
for (int intVar3 = intLiteral4; intVar1 < intLiteral1; intVar1++) jj_la1[intVar1] = -1;
for (int intVar3 = intLiteral4; intVar1 < intLiteral2; intVar1++) jj_2_rtns[intVar1] = new JJCalls();
}"
4274,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,configuration,1485,"Token token = null;
String value = null;
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
case QUOTED_STRING:
token = jj_consume_token(QUOTED_STRING);
{if (true) return unescapeQuotes(removeQuotes(token.image));}
break;
case STRING:
token = jj_consume_token(STRING);
{if (true) return token.image;}
break;
default:
jj_la1[5] = jj_gen;
jj_consume_token(-1);
throw new ParseException();
","final public String String() throws ParseException {
Token token = null;
String value = null;
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case QUOTED_STRING:
token = jj_consume_token(QUOTED_STRING);
{
if (true)
return unescapeQuotes(removeQuotes(token.image));
}
break;
case STRING:
token = jj_consume_token(STRING);
{
if (true)
return token.image;
}
break;
default:
jj_la1[5] = jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
throw new Error(""Missing return statement in function"");
}","final public String String() throws ParseException {
Token tokenVar1 = tokenLiteral2;
String stringVar3 = tokenLiteral2;
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case QUOTED_STRING:
tokenVar1 = jj_consume_token(QUOTED_STRING);
{
if (true)
return unescapeQuotes(removeQuotes(tokenVar1.image));
}
break;
case STRING:
tokenVar1 = jj_consume_token(STRING);
{
if (true)
return tokenVar1.image;
}
break;
default:
jj_la1[5] = jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
throw new Error(""Missing return statement in function"");
}"
4275,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,configuration,1486,"token = jj_consume_token(DATA);
{if (true) return filterData(token.image);}
","final public byte[] Data() throws ParseException {
Token token;
token = jj_consume_token(DATA);
{
if (true)
return filterData(token.image);
}
throw new Error(""Missing return statement in function"");
}","final public byte[] Data() throws ParseException {
Token tokenVar1;
tokenVar1 = jj_consume_token(DATA);
{
if (true)
return filterData(tokenVar1.image);
}
throw new Error(""Missing return statement in function"");
}"
4289,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,configuration,1500,"tokenBegin = -1;
char c = readChar();
tokenBegin = bufpos;
return c;
","public char BeginToken() throws java.io.IOException {
tokenBegin = -1;
char c = readChar();
tokenBegin = bufpos;
return c;
}","public char BeginToken() throws java.io.IOException {
tokenBegin = -1;
char charVar1 = charLiteral2;
tokenBegin = bufpos;
return charVar1;
}"
4301,DODGY_CODE,UUF_UNUSED_PUBLIC_OR_PROTECTED_FIELD,FP,configuration,1512,public Token specialToken;,public Token specialToken;,public Token tokenVar1;
4303,I18N,DM_DEFAULT_ENCODING,FP,configuration,1514,"addValue(Base64.decodeBase64(value.getBytes()));
","public void addDataValue(String value) {
addValue(Base64.decodeBase64(value.getBytes()));
}","public void addDataValue(String value) {
addValue(Base64.decodeBase64(value.getBytes()));
}"
4311,DODGY_CODE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,FP,configuration,1522,"staticCatalog = catalog;
","public org.apache.xml.resolver.Catalog getPrivateCatalog() {
org.apache.xml.resolver.Catalog catalog = staticCatalog;
if (catalog == null || !getUseStaticCatalog()) {
try {
catalog = new Catalog();
catalog.setCatalogManager(this);
catalog.setupReaders();
catalog.loadSystemCatalogs();
} catch (Exception ex) {
ex.printStackTrace();
}
if (getUseStaticCatalog()) {
staticCatalog = catalog;
}
}
return catalog;
}","public org.apache.xml.resolver.Catalog getPrivateCatalog() {
org.apache.xml.resolver.Catalog org.apache.xml.resolver.catalogVar1 = org.apache.xml.resolver.catalogLiteral2;
if (org.apache.xml.resolver.catalogVar1 == null || !getUseStaticCatalog()) {
try {
org.apache.xml.resolver.catalogVar1 = new Catalog();
org.apache.xml.resolver.catalogVar1.setCatalogManager(this);
org.apache.xml.resolver.catalogVar1.setupReaders();
org.apache.xml.resolver.catalogVar1.loadSystemCatalogs();
} catch (Exception ex) {
ex.printStackTrace();
}
if (getUseStaticCatalog()) {
staticCatalog = org.apache.xml.resolver.catalogVar1;
}
}
return org.apache.xml.resolver.catalogVar1;
}"
4314,DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,configuration,1525,"List lst = (List) namedNodes.get(node.getName());
","public boolean removeNode(ConfigurationNode node) {
if (nodes != null && node != null && nodes.contains(node)) {
detachNode(node);
nodes.remove(node);
List lst = (List) namedNodes.get(node.getName());
if (lst != null) {
lst.remove(node);
if (lst.isEmpty()) {
namedNodes.remove(node.getName());
}
}
return true;
} else {
return false;
}
}","public boolean removeNode(ConfigurationNode node) {
if (nodes != null && node != null && nodes.contains(node)) {
detachNode(node);
nodes.remove(node);
List listVar1 = listLiteral2;
if (listVar1 != null) {
listVar1.remove(node);
if (listVar1.isEmpty()) {
namedNodes.remove(node.getName());
}
}
return true;
} else {
return false;
}
}"
4494,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,configuration,1705,"catch (Exception ex)
","public Object getProperty(String key) {
if (isForceReloadCheck()) {
for (Iterator it = configurations.iterator(); it.hasNext(); ) {
try {
((ConfigData) it.next()).getConfiguration().getProperty(PROP_RELOAD_CHECK);
} catch (Exception ex) {
;
}
}
}
return super.getProperty(key);
}","public Object getProperty(String key) {
if (isForceReloadCheck()) {
for (Iterator iteratorVar3 = iteratorLiteral4; iteratorVar1.hasNext(); ) {
try {
((ConfigData) iteratorVar1.next()).getConfiguration().getProperty(PROP_RELOAD_CHECK);
} catch (Exception ex) {
;
}
}
}
return super.getProperty(key);
}"
4501,I18N,DM_DEFAULT_ENCODING,FP,configuration,1712,"dump(configuration, new PrintWriter(out));
","public static void dump(Configuration configuration, PrintStream out) {
dump(configuration, new PrintWriter(out));
}","public static void dump(Configuration configuration, PrintStream out) {
dump(configuration, new PrintWriter(out));
}"
4508,SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,configuration,1719,"pstmt = conn.prepareStatement(query.toString());
","public void clearProperty(String key) {
StringBuffer query = new StringBuffer(""DELETE FROM "" + table + "" WHERE "" + keyColumn + ""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
pstmt.executeUpdate();
} catch (SQLException e) {
fireError(EVENT_CLEAR_PROPERTY, key, null, e);
} finally {
close(conn, pstmt);
}
}","public void clearProperty(String key) {
StringBuffer stringbufferVar1 = stringbufferLiteral2;
if (nameColumn != null) {
stringbufferVar1.append("" AND "" + nameColumn + ""=?"");
}
Connection connectionVar3 = connectionLiteral4;
PreparedStatement preparedstatementVar5 = connectionLiteral4;
try {
connectionVar3 = getConnection();
preparedstatementVar5 = connectionVar3.prepareStatement(stringbufferVar1.toString());
preparedstatementVar5.setString(1, key);
if (nameColumn != null) {
preparedstatementVar5.setString(2, name);
}
preparedstatementVar5.executeUpdate();
} catch (SQLException e) {
fireError(EVENT_CLEAR_PROPERTY, key, null, e);
} finally {
close(connectionVar3, preparedstatementVar5);
}
}"
4516,PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,configuration,1727,"{
protected Object interpolate(Object value)
{
return parent.interpolate(value);
",private ExpressionEngine expressionEngine;,private ExpressionEngine expressionengineVar1;
4521,DODGY_CODE,IM_BAD_CHECK_FOR_ODD,FP,configuration,1732,"return bsCount % 2 == 1;
","private static boolean checkCombineLines(String line) {
int bsCount = 0;
for (int idx = line.length() - 1; idx >= 0 && line.charAt(idx) == '\\'; idx--) {
bsCount++;
}
return bsCount % 2 == 1;
}","private static boolean checkCombineLines(String line) {
int intVar1 = intLiteral2;
for (int intVar5 = intLiteral6; intVar3 >= 0 && intLiteral1; intVar3--) {
intVar1++;
}
return intVar1 % 2 == 1;
}"
4529,DODGY_CODE,REC_CATCH_EXCEPTION,FP,configuration,1740,"catch (Exception e)
","static Object toEnum(Object value, Class cls) throws ConversionException {
if (value.getClass().equals(cls)) {
return value;
} else if (value instanceof String) {
try {
Method valueOfMethod = cls.getMethod(""valueOf"", new Class[] { String.class });
return valueOfMethod.invoke(null, new Object[] { value });
} catch (Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a "" + cls.getName());
}
} else if (value instanceof Number) {
try {
Method valuesMethod = cls.getMethod(""values"", new Class[] {});
Object valuesArray = valuesMethod.invoke(null, new Object[] {});
return Array.get(valuesArray, ((Number) value).intValue());
} catch (Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a "" + cls.getName());
}
} else {
throw new ConversionException(""The value "" + value + "" can't be converted to a "" + cls.getName());
}
}","static Object toEnum(Object value, Class cls) throws ConversionException {
if (value.getClass().equals(cls)) {
return value;
} else if (value instanceof String) {
try {
Method methodVar1 = methodLiteral2;
return methodVar1.invoke(null, new Object[] { value });
} catch (Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a "" + cls.getName());
}
} else if (value instanceof Number) {
try {
Method methodVar3 = methodLiteral4;
Object objectVar5 = objectLiteral6;
return Array.get(objectVar5, ((Number) value).intValue());
} catch (Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a "" + cls.getName());
}
} else {
throw new ConversionException(""The value "" + value + "" can't be converted to a "" + cls.getName());
}
}"
4532,BAD_PRACTICE,SE_BAD_FIELD,FP,configuration,1743,private DocumentBuilder documentBuilder;,private DocumentBuilder documentBuilder;,private DocumentBuilder documentbuilderVar1;
4539,PERFORMANCE,WMI_WRONG_MAP_ITERATOR,FP,configuration,1750,"initProperty(bean, propName, properties.get(propName));
","public static void initBean(Object bean, BeanDeclaration data) throws ConfigurationRuntimeException {
Map properties = data.getBeanProperties();
if (properties != null) {
for (Iterator it = properties.keySet().iterator(); it.hasNext(); ) {
String propName = (String) it.next();
initProperty(bean, propName, properties.get(propName));
}
}
Map nestedBeans = data.getNestedBeanDeclarations();
if (nestedBeans != null) {
for (Iterator it = nestedBeans.keySet().iterator(); it.hasNext(); ) {
String propName = (String) it.next();
initProperty(bean, propName, createBean((BeanDeclaration) nestedBeans.get(propName), null));
}
}
}","public static void initBean(Object bean, BeanDeclaration data) throws ConfigurationRuntimeException {
Map mapVar1 = mapLiteral2;
if (mapVar1 != null) {
for (Iterator iteratorVar10 = iteratorLiteral11; iteratorVar3.hasNext(); ) {
String stringVar5 = stringLiteral6;
initProperty(bean, stringVar5, mapVar1.get(stringVar5));
}
}
Map mapVar7 = mapLiteral8;
if (mapVar7 != null) {
for (Iterator iteratorVar10 = iteratorLiteral12; iteratorVar3.hasNext(); ) {
String stringVar5 = stringLiteral6;
initProperty(bean, stringVar5, createBean((BeanDeclaration) mapVar7.get(stringVar5), null));
}
}
}"
4540,DODGY_CODE,NP_LOAD_OF_KNOWN_NULL_VALUE,FP,configuration,1751,"throw new IllegalArgumentException(""No such property name=["" + name + ""]"");
","public DynaProperty getDynaProperty(String name) {
if (log.isTraceEnabled()) {
log.trace(""getDynaProperty("" + name + "")"");
}
if (name == null) {
throw new IllegalArgumentException(""No such property name=["" + name + ""]"");
}
Object value = configuration.getProperty(name);
if (value == null) {
return null;
} else {
Class type = value.getClass();
if (type == Byte.class) {
type = Byte.TYPE;
}
if (type == Character.class) {
type = Character.TYPE;
} else if (type == Boolean.class) {
type = Boolean.TYPE;
} else if (type == Double.class) {
type = Double.TYPE;
} else if (type == Float.class) {
type = Float.TYPE;
} else if (type == Integer.class) {
type = Integer.TYPE;
} else if (type == Long.class) {
type = Long.TYPE;
} else if (type == Short.class) {
type = Short.TYPE;
}
return new DynaProperty(name, type);
}
}","public DynaProperty getDynaProperty(String name) {
if (log.isTraceEnabled()) {
log.trace(""getDynaProperty("" + name + "")"");
}
if (name == null) {
throw new IllegalArgumentException(""No such property name=["" + name + ""]"");
}
Object objectVar1 = objectLiteral2;
if (objectVar1 == null) {
return null;
} else {
Class classVar3 = classLiteral4;
if (classVar3 == Byte.class) {
classVar3 = Byte.TYPE;
}
if (classVar3 == Character.class) {
classVar3 = Character.TYPE;
} else if (classVar3 == Boolean.class) {
classVar3 = Boolean.TYPE;
} else if (classVar3 == Double.class) {
classVar3 = Double.TYPE;
} else if (classVar3 == Float.class) {
classVar3 = Float.TYPE;
} else if (classVar3 == Integer.class) {
classVar3 = Integer.TYPE;
} else if (classVar3 == Long.class) {
classVar3 = Long.TYPE;
} else if (classVar3 == Short.class) {
classVar3 = Short.TYPE;
}
return new DynaProperty(name, classVar3);
}
}"
4548,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,configuration,1759,"token_source = tm;
token = new Token();
jj_ntk = -1;
jj_gen = 0;
for (int i = 0; i < 6; i++) jj_la1[i] = -1;
for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
}
","public void ReInit(PropertyListParserTokenManager tm) {
token_source = tm;
token = new Token();
jj_ntk = -1;
jj_gen = 0;
for (int i = 0; i < 6; i++) jj_la1[i] = -1;
for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
}","public void ReInit(PropertyListParserTokenManager tm) {
token_source = tm;
token = new Token();
jj_ntk = -1;
jj_gen = 0;
for (int intVar3 = intLiteral4; intVar1 < intLiteral1; intVar1++) jj_la1[intVar1] = -1;
for (int intVar3 = intLiteral4; intVar1 < intLiteral2; intVar1++) jj_2_rtns[intVar1] = new JJCalls();
}"
4549,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,configuration,1760,"PropertyListConfiguration configuration = new PropertyListConfiguration();
List children = new ArrayList();
Node child = null;
jj_consume_token(DICT_BEGIN);
label_1:
while (true) {
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
case STRING:
case QUOTED_STRING:
;
break;
default:
jj_la1[0] = jj_gen;
break label_1;
}
child = Property();
if (child.getValue() instanceof HierarchicalConfiguration)
{
HierarchicalConfiguration conf = (HierarchicalConfiguration) child.getValue();
Node root = conf.getRoot();
root.setName(child.getName());
children.add(root);
}
else
{
children.add(child);
}
}
jj_consume_token(DICT_END);
for (int i = 0; i < children.size(); i++)
{
child = (Node) children.get(i);
configuration.getRoot().addChild(child);
}
{if (true) return configuration;}
","final public PropertyListConfiguration Dictionary() throws ParseException {
PropertyListConfiguration configuration = new PropertyListConfiguration();
List children = new ArrayList();
Node child = null;
jj_consume_token(DICT_BEGIN);
label_1: while (true) {
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case STRING:
case QUOTED_STRING:
;
break;
default:
jj_la1[0] = jj_gen;
break label_1;
}
child = Property();
if (child.getValue() instanceof HierarchicalConfiguration) {
HierarchicalConfiguration conf = (HierarchicalConfiguration) child.getValue();
Node root = conf.getRoot();
root.setName(child.getName());
children.add(root);
} else {
children.add(child);
}
}
jj_consume_token(DICT_END);
for (int i = 0; i < children.size(); i++) {
child = (Node) children.get(i);
configuration.getRoot().addChild(child);
}
{
if (true)
return configuration;
}
throw new Error(""Missing return statement in function"");
}","final public PropertyListConfiguration Dictionary() throws ParseException {
PropertyListConfiguration propertylistconfigurationVar1 = propertylistconfigurationLiteral2;
List listVar3 = listLiteral4;
Node nodeVar5 = nodeLiteral6;
jj_consume_token(DICT_BEGIN);
label_1: while (true) {
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case STRING:
case QUOTED_STRING:
;
break;
default:
jj_la1[0] = jj_gen;
break label_1;
}
nodeVar5 = Property();
if (nodeVar5.getValue() instanceof HierarchicalConfiguration) {
HierarchicalConfiguration hierarchicalconfigurationVar7 = hierarchicalconfigurationLiteral8;
Node nodeVar9 = nodeLiteral10;
nodeVar9.setName(nodeVar5.getName());
listVar3.add(nodeVar9);
} else {
listVar3.add(nodeVar5);
}
}
jj_consume_token(DICT_END);
for (int intVar13 = intLiteral14; intVar11 < intLiteral1; intVar11++) {
nodeVar5 = (Node) listVar3.get(intVar11);
propertylistconfigurationVar1.getRoot().addChild(nodeVar5);
}
{
if (true)
return propertylistconfigurationVar1;
}
throw new Error(""Missing return statement in function"");
}"
4553,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,configuration,1764,"return null;
","protected byte[] filterData(String s) throws ParseException {
if (s == null) {
return null;
}
if (s.startsWith(""<"") && s.endsWith("">"") && s.length() >= 2) {
s = s.substring(1, s.length() - 1);
}
s = StringUtils.replaceChars(s, "" \t\n\r"", """");
if (s.length() % 2 != 0) {
s = ""0"" + s;
}
try {
return Hex.decodeHex(s.toCharArray());
} catch (Exception e) {
throw (ParseException) new ParseException(""Unable to parse the byte[] : "" + e.getMessage());
}
}","protected byte[] filterData(String s) throws ParseException {
if (s == null) {
return null;
}
if (s.startsWith(""<"") && s.endsWith("">"") && s.length() >= 2) {
s = s.substring(1, s.length() - 1);
}
s = StringUtils.replaceChars(s, "" \t\n\r"", """");
if (s.length() % 2 != 0) {
s = ""0"" + s;
}
try {
return Hex.decodeHex(s.toCharArray());
} catch (Exception e) {
throw (ParseException) new ParseException(""Unable to parse the byte[] : "" + e.getMessage());
}
}"
4560,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,configuration,1771,"ReInit(stream);
SwitchTo(lexState);
}
","public void ReInit(SimpleCharStream stream, int lexState) {
ReInit(stream);
SwitchTo(lexState);
}","public void ReInit(SimpleCharStream stream, int lexState) {
ReInit(stream);
SwitchTo(lexState);
}"
4564,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,configuration,1775,"if (lexState >= 1 || lexState < 0)
{
throw new TokenMgrError(""Error: Ignoring invalid lexical state : "" + lexState + "". State unchanged."", TokenMgrError.INVALID_LEXICAL_STATE);
}
else
{
curLexState = lexState;
}
}
","public void SwitchTo(int lexState) {
if (lexState >= 1 || lexState < 0) {
throw new TokenMgrError(""Error: Ignoring invalid lexical state : "" + lexState + "". State unchanged."", TokenMgrError.INVALID_LEXICAL_STATE);
} else {
curLexState = lexState;
}
}","public void SwitchTo(int lexState) {
if (lexState >= 1 || lexState < 0) {
throw new TokenMgrError(""Error: Ignoring invalid lexical state : "" + lexState + "". State unchanged."", TokenMgrError.INVALID_LEXICAL_STATE);
} else {
curLexState = lexState;
}
}"
4565,PERFORMANCE,UPM_UNCALLED_PRIVATE_METHOD,FP,configuration,1776,"jjstateSet[jjnewStateCnt++] = jjnextStates[start];
}
while (start++ != end);
}
","private final void jjAddStates(int start, int end) {
do {
jjstateSet[jjnewStateCnt++] = jjnextStates[start];
} while (start++ != end);
}","private final void jjAddStates(int start, int end) {
do {
jjstateSet[jjnewStateCnt++] = jjnextStates[start];
} while (start++ != end);
}"
4581,DODGY_CODE,UUF_UNUSED_PUBLIC_OR_PROTECTED_FIELD,FP,configuration,1792,public Token specialToken;,public Token specialToken;,public Token tokenVar1;
4582,DODGY_CODE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,FP,configuration,1793,"public int beginLine, beginColumn, endLine, endColumn;","public int beginLine, beginColumn, endLine, endColumn;","public int intVar1, intVar2, intVar3, intVar4;"
4603,PERFORMANCE,DM_FP_NUMBER_CTOR,FP,configuration,1814,"return getDouble(key, new Double(defaultValue)).doubleValue();
","public double getDouble(String key, double defaultValue) {
return getDouble(key, new Double(defaultValue)).doubleValue();
}","public double getDouble(String key, double defaultValue) {
return getDouble(key, new Double(defaultValue)).doubleValue();
}"
4609,I18N,DM_DEFAULT_ENCODING,FP,configuration,1820,"reader = new InputStreamReader(in);
","public void load(InputStream in, String encoding) throws ConfigurationException {
Reader reader = null;
if (encoding != null) {
try {
reader = new InputStreamReader(in, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (reader == null) {
reader = new InputStreamReader(in);
}
load(reader);
}","public void load(InputStream in, String encoding) throws ConfigurationException {
Reader readerVar1 = readerLiteral2;
if (encoding != null) {
try {
readerVar1 = new InputStreamReader(in, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (readerVar1 == null) {
readerVar1 = new InputStreamReader(in);
}
load(readerVar1);
}"
4614,I18N,DM_DEFAULT_ENCODING,FP,configuration,1825,"PrintStream stream = new PrintStream(os);
","private ConfigurationNode constructCombinedNode() {
if (getNumberOfConfigurations() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return new ViewNode();
} else {
Iterator<ConfigData> it = configurations.iterator();
ConfigurationNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = getNodeCombiner().combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}","private ConfigurationNode constructCombinedNode() {
if (getNumberOfConfigurations() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return new ViewNode();
} else {
Iterator<ConfigData> iterator<configdata>Var1 = iterator<configdata>Literal2;
ConfigurationNode configurationnodeVar3 = configurationnodeLiteral4;
while (iterator<configdata>Var1.hasNext()) {
configurationnodeVar3 = getNodeCombiner().combine(configurationnodeVar3, iterator<configdata>Var1.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream bytearrayoutputstreamVar5 = bytearrayoutputstreamLiteral6;
PrintStream printstreamVar7 = printstreamLiteral8;
TreeUtils.printTree(printstreamVar7, configurationnodeVar3);
getLogger().debug(bytearrayoutputstreamVar5.toString());
}
return configurationnodeVar3;
}
}"
4615,I18N,DM_DEFAULT_ENCODING,FP,configuration,1826,"getLogger().debug(os.toString());
","private ConfigurationNode constructCombinedNode() {
if (getNumberOfConfigurations() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return new ViewNode();
} else {
Iterator<ConfigData> it = configurations.iterator();
ConfigurationNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = getNodeCombiner().combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}","private ConfigurationNode constructCombinedNode() {
if (getNumberOfConfigurations() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return new ViewNode();
} else {
Iterator<ConfigData> iterator<configdata>Var1 = iterator<configdata>Literal2;
ConfigurationNode configurationnodeVar3 = configurationnodeLiteral4;
while (iterator<configdata>Var1.hasNext()) {
configurationnodeVar3 = getNodeCombiner().combine(configurationnodeVar3, iterator<configdata>Var1.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream bytearrayoutputstreamVar5 = bytearrayoutputstreamLiteral6;
PrintStream printstreamVar7 = printstreamLiteral8;
TreeUtils.printTree(printstreamVar7, configurationnodeVar3);
getLogger().debug(bytearrayoutputstreamVar5.toString());
}
return configurationnodeVar3;
}
}"
4628,SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,configuration,1839,"pstmt = conn.prepareStatement(query.toString());
","public boolean containsKey(String key) {
boolean found = false;
StringBuilder query = new StringBuilder(""SELECT * FROM "" + table + "" WHERE "" + keyColumn + ""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
ResultSet rs = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
rs = pstmt.executeQuery();
found = rs.next();
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
close(conn, pstmt, rs);
}
return found;
}","public boolean containsKey(String key) {
boolean booleanVar1 = booleanLiteral2;
StringBuilder stringbuilderVar3 = stringbuilderLiteral4;
if (nameColumn != null) {
stringbuilderVar3.append("" AND "" + nameColumn + ""=?"");
}
Connection connectionVar5 = connectionLiteral6;
PreparedStatement preparedstatementVar7 = connectionLiteral6;
ResultSet resultsetVar8 = connectionLiteral6;
try {
connectionVar5 = getConnection();
preparedstatementVar7 = connectionVar5.prepareStatement(stringbuilderVar3.toString());
preparedstatementVar7.setString(1, key);
if (nameColumn != null) {
preparedstatementVar7.setString(2, name);
}
resultsetVar8 = preparedstatementVar7.executeQuery();
booleanVar1 = resultsetVar8.next();
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
close(connectionVar5, preparedstatementVar7, resultsetVar8);
}
return booleanVar1;
}"
4630,BAD_PRACTICE,SE_BAD_FIELD,FP,configuration,1841,"private final StrLookup combinedConfigLookup = new StrLookup() {
@Override
public String lookup(String key) {
if (constructedConfiguration != null) {
Object value = constructedConfiguration.resolveContainerStore(key);
return (value != null) ? value.toString() : null;
}
return null;
}
};","private final StrLookup combinedConfigLookup = new StrLookup() {
@Override
public String lookup(String key) {
if (constructedConfiguration != null) {
Object value = constructedConfiguration.resolveContainerStore(key);
return (value != null) ? value.toString() : null;
}
return null;
}
};",private final StrLookup strlookupVar1 = strlookupLiteral2;
4632,BAD_PRACTICE,SE_BAD_FIELD_STORE,FP,configuration,1843,"private final StrLookup combinedConfigLookup = new StrLookup() {
@Override
public String lookup(String key) {
if (constructedConfiguration != null) {
Object value = constructedConfiguration.resolveContainerStore(key);
return (value != null) ? value.toString() : null;
}
return null;
}
};","private final StrLookup combinedConfigLookup = new StrLookup() {
@Override
public String lookup(String key) {
if (constructedConfiguration != null) {
Object value = constructedConfiguration.resolveContainerStore(key);
return (value != null) ? value.toString() : null;
}
return null;
}
};",private final StrLookup strlookupVar1 = strlookupLiteral2;
4634,BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,configuration,1845,"parent.mkdirs();
","private void createPath(File file) {
if (file != null) {
if (!file.exists()) {
File parent = file.getParentFile();
if (parent != null && !parent.exists()) {
parent.mkdirs();
}
}
}
}","private void createPath(File file) {
if (file != null) {
if (!file.exists()) {
File fileVar1 = fileLiteral2;
if (fileVar1 != null && !fileVar1.exists()) {
fileVar1.mkdirs();
}
}
}
}"
4635,BAD_PRACTICE,SE_BAD_FIELD,FP,configuration,1846,private StrSubstitutor localSubst = new StrSubstitutor(new ConfigurationInterpolator());,private StrSubstitutor localSubst = new StrSubstitutor(new ConfigurationInterpolator());,private StrSubstitutor strsubstitutorVar1 = strsubstitutorLiteral2;
4656,PERFORMANCE,DM_FP_NUMBER_CTOR,FP,configuration,1867,"return new Float(n.floatValue());
","public static Float toFloat(Object value) throws ConversionException {
Number n = toNumber(value, Float.class);
if (n instanceof Float) {
return (Float) n;
} else {
return new Float(n.floatValue());
}
}","public static Float toFloat(Object value) throws ConversionException {
Number numberVar1 = numberLiteral2;
if (numberVar1 instanceof Float) {
return (Float) numberVar1;
} else {
return new Float(numberVar1.floatValue());
}
}"
4659,PERFORMANCE,DM_NUMBER_CTOR,FP,configuration,1870,"return new Byte(n.byteValue());
","public static Byte toByte(Object value) throws ConversionException {
Number n = toNumber(value, Byte.class);
if (n instanceof Byte) {
return (Byte) n;
} else {
return new Byte(n.byteValue());
}
}","public static Byte toByte(Object value) throws ConversionException {
Number numberVar1 = numberLiteral2;
if (numberVar1 instanceof Byte) {
return (Byte) numberVar1;
} else {
return new Byte(numberVar1.byteValue());
}
}"
4662,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,configuration,1873,"catch (Exception ex)
","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
return;
}
}","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String stringVar1 = stringLiteral2;
Class<?>[] class<?>ArrayVar3 = class<?>ArrayLiteral4;
class<?>ArrayVar3[0] = FileSystemOptions.class;
class<?>ArrayVar3[1] = value.getClass();
try {
Method methodVar5 = methodLiteral6;
Object[] objectArrayVar7 = objectArrayLiteral8;
objectArrayVar7[0] = options;
objectArrayVar7[1] = value;
methodVar5.invoke(builder, objectArrayVar7);
} catch (Exception ex) {
return;
}
}"
4672,PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,configuration,1883,"{
public InputSource resolveEntity(String publicId, String systemId)
{
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
","@Override
public void startElement(String uri, String localName, String qName, Attributes attrs) {
if (""comment"".equals(qName)) {
inCommentElement = true;
}
if (""entry"".equals(qName)) {
key = attrs.getValue(""key"");
inEntryElement = true;
}
}","@Override
public void startElement(String uri, String localName, String qName, Attributes attrs) {
if (""comment"".equals(qName)) {
inCommentElement = true;
}
if (""entry"".equals(qName)) {
key = attrs.getValue(""key"");
inEntryElement = true;
}
}"
4682,I18N,DM_DEFAULT_ENCODING,FP,configuration,1893,"String base64 = new String(Base64.encodeBase64((byte[]) value));
","private void printValue(PrintWriter out, int indentLevel, Object value) {
String padding = StringUtils.repeat("" "", indentLevel * INDENT_SIZE);
if (value instanceof Date) {
synchronized (PListNode.FORMAT) {
out.println(padding + ""<date>"" + PListNode.FORMAT.format((Date) value) + ""</date>"");
}
} else if (value instanceof Calendar) {
printValue(out, indentLevel, ((Calendar) value).getTime());
} else if (value instanceof Number) {
if (value instanceof Double || value instanceof Float || value instanceof BigDecimal) {
out.println(padding + ""<real>"" + value.toString() + ""</real>"");
} else {
out.println(padding + ""<integer>"" + value.toString() + ""</integer>"");
}
} else if (value instanceof Boolean) {
if (((Boolean) value).booleanValue()) {
out.println(padding + ""<true/>"");
} else {
out.println(padding + ""<false/>"");
}
} else if (value instanceof List) {
out.println(padding + ""<array>"");
Iterator<?> it = ((List<?>) value).iterator();
while (it.hasNext()) {
printValue(out, indentLevel + 1, it.next());
}
out.println(padding + ""</array>"");
} else if (value instanceof HierarchicalConfiguration) {
printNode(out, indentLevel, ((HierarchicalConfiguration) value).getRootNode());
} else if (value instanceof Configuration) {
out.println(padding + ""<dict>"");
Configuration config = (Configuration) value;
Iterator<String> it = config.getKeys();
while (it.hasNext()) {
String key = it.next();
ConfigurationNode node = new DefaultConfigurationNode(key);
node.setValue(config.getProperty(key));
printNode(out, indentLevel + 1, node);
if (it.hasNext()) {
out.println();
}
}
out.println(padding + ""</dict>"");
} else if (value instanceof Map) {
Map<String, Object> map = transformMap((Map<?, ?>) value);
printValue(out, indentLevel, new MapConfiguration(map));
} else if (value instanceof byte[]) {
String base64 = new String(Base64.encodeBase64((byte[]) value));
out.println(padding + ""<data>"" + StringEscapeUtils.escapeXml(base64) + ""</data>"");
} else if (value != null) {
out.println(padding + ""<string>"" + StringEscapeUtils.escapeXml(String.valueOf(value)) + ""</string>"");
} else {
out.println(padding + ""<string/>"");
}
}","private void printValue(PrintWriter out, int indentLevel, Object value) {
String stringVar1 = stringLiteral2;
if (value instanceof Date) {
synchronized (PListNode.FORMAT) {
out.println(stringVar1 + ""<date>"" + PListNode.FORMAT.format((Date) value) + ""</date>"");
}
} else if (value instanceof Calendar) {
printValue(out, indentLevel, ((Calendar) value).getTime());
} else if (value instanceof Number) {
if (value instanceof Double || value instanceof Float || value instanceof BigDecimal) {
out.println(stringVar1 + ""<real>"" + value.toString() + ""</real>"");
} else {
out.println(stringVar1 + ""<integer>"" + value.toString() + ""</integer>"");
}
} else if (value instanceof Boolean) {
if (((Boolean) value).booleanValue()) {
out.println(stringVar1 + ""<true/>"");
} else {
out.println(stringVar1 + ""<false/>"");
}
} else if (value instanceof List) {
out.println(stringVar1 + ""<array>"");
Iterator<?> iterator<?>Var3 = iterator<?>Literal4;
while (iterator<?>Var3.hasNext()) {
printValue(out, indentLevel + 1, iterator<?>Var3.next());
}
out.println(stringVar1 + ""</array>"");
} else if (value instanceof HierarchicalConfiguration) {
printNode(out, indentLevel, ((HierarchicalConfiguration) value).getRootNode());
} else if (value instanceof Configuration) {
out.println(stringVar1 + ""<dict>"");
Configuration configurationVar5 = configurationLiteral6;
Iterator<String> iterator<?>Var3 = iterator<string>Literal7;
while (iterator<?>Var3.hasNext()) {
String stringVar8 = stringLiteral9;
ConfigurationNode configurationnodeVar10 = configurationnodeLiteral11;
configurationnodeVar10.setValue(configurationVar5.getProperty(stringVar8));
printNode(out, indentLevel + 1, configurationnodeVar10);
if (iterator<?>Var3.hasNext()) {
out.println();
}
}
out.println(stringVar1 + ""</dict>"");
} else if (value instanceof Map) {
Map<String, Object> map<string,object>Var12 = map<string,object>Literal13;
printValue(out, indentLevel, new MapConfiguration(map<string,object>Var12));
} else if (value instanceof byte[]) {
String stringVar14 = stringLiteral15;
out.println(stringVar1 + ""<data>"" + StringEscapeUtils.escapeXml(stringVar14) + ""</data>"");
} else if (value != null) {
out.println(stringVar1 + ""<string>"" + StringEscapeUtils.escapeXml(String.valueOf(value)) + ""</string>"");
} else {
out.println(stringVar1 + ""<string/>"");
}
}"
4685,CORRECTNESS,RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE,FP,configuration,1896,"if (configuration.getURL() == null && configuration.getFileName() == null)
","public void init() {
if (configuration.getURL() == null && configuration.getFileName() == null) {
return;
}
if (this.configuration == null) {
throw new IllegalStateException(""No configuration has been set for this strategy"");
}
updateLastModified();
}","public void init() {
if (configuration.getURL() == null && configuration.getFileName() == null) {
return;
}
if (this.configuration == null) {
throw new IllegalStateException(""No configuration has been set for this strategy"");
}
updateLastModified();
}"
4686,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,configuration,1897,"fs = ((CatalogManager) catalogManager).getFileSystem();
","@Override
public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
String base = ((CatalogManager) catalogManager).getBaseDir();
@SuppressWarnings(""unchecked"")
Vector<String> catalogs = catalogManager.getCatalogFiles();
if (catalogs != null) {
for (int count = 0; count < catalogs.size(); count++) {
String fileName = catalogs.elementAt(count);
URL url = null;
InputStream is = null;
try {
url = ConfigurationUtils.locate(fs, base, fileName);
if (url != null) {
is = fs.getInputStream(url);
}
} catch (ConfigurationException ce) {
String name = (url == null) ? fileName : url.toString();
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + name + "". "" + ce.getMessage());
}
if (is != null) {
String mimeType = fileNameMap.getContentTypeFor(fileName);
try {
if (mimeType != null) {
parseCatalog(mimeType, is);
continue;
}
} catch (Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + fileName + "". "" + ex.getMessage());
} finally {
is.close();
}
}
parseCatalog(base, fileName);
}
}
}","@Override
public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
String stringVar1 = stringLiteral2;
@SuppressWarnings(""unchecked"")
Vector<String> vector<string>Var3 = vector<string>Literal4;
if (vector<string>Var3 != null) {
for (int intVar16 = intLiteral17; intVar5 < intLiteral1; intVar5++) {
String stringVar7 = stringLiteral8;
URL urlVar9 = urlLiteral10;
InputStream inputstreamVar11 = urlLiteral10;
try {
urlVar9 = ConfigurationUtils.locate(fs, stringVar1, stringVar7);
if (urlVar9 != null) {
inputstreamVar11 = fs.getInputStream(urlVar9);
}
} catch (ConfigurationException ce) {
String stringVar12 = stringLiteral13;
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + stringVar12 + "". "" + ce.getMessage());
}
if (inputstreamVar11 != null) {
String stringVar14 = stringLiteral15;
try {
if (stringVar14 != null) {
parseCatalog(stringVar14, inputstreamVar11);
continue;
}
} catch (Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + stringVar7 + "". "" + ex.getMessage());
} finally {
inputstreamVar11.close();
}
}
parseCatalog(stringVar1, stringVar7);
}
}
}"
4734,I18N,DM_DEFAULT_ENCODING,FP,configuration,1945,"getLogger().debug(os.toString());
","private ConfigurationNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return new ViewNode();
} else {
Iterator<ConfigData> it = configurations.iterator();
ConfigurationNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = nodeCombiner.combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}","private ConfigurationNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return new ViewNode();
} else {
Iterator<ConfigData> iterator<configdata>Var1 = iterator<configdata>Literal2;
ConfigurationNode configurationnodeVar3 = configurationnodeLiteral4;
while (iterator<configdata>Var1.hasNext()) {
configurationnodeVar3 = nodeCombiner.combine(configurationnodeVar3, iterator<configdata>Var1.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream bytearrayoutputstreamVar5 = bytearrayoutputstreamLiteral6;
PrintStream printstreamVar7 = printstreamLiteral8;
TreeUtils.printTree(printstreamVar7, configurationnodeVar3);
getLogger().debug(bytearrayoutputstreamVar5.toString());
}
return configurationnodeVar3;
}
}"
4743,EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,FP,configuration,1954,"ResultSet rs = pstmt.executeQuery();
","@Override
protected Boolean performOperation() throws SQLException {
PreparedStatement pstmt = initStatement(String.format(SQL_GET_PROPERTY, table, keyColumn), true, key);
ResultSet rs = pstmt.executeQuery();
return rs.next();
}","@Override
protected Boolean performOperation() throws SQLException {
PreparedStatement preparedstatementVar1 = preparedstatementLiteral2;
ResultSet resultsetVar3 = resultsetLiteral4;
return resultsetVar3.next();
}"
4751,PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,configuration,1962,"{
@Override
public void error(SAXParseException ex) throws SAXException
{
throw ex;
",private FileLocator locator;,private FileLocator filelocatorVar1;
4752,BAD_PRACTICE,SE_BAD_FIELD,FP,configuration,1963,private FileLocator locator;,private FileLocator locator;,private FileLocator filelocatorVar1;
4763,PERFORMANCE,DM_FP_NUMBER_CTOR,FP,configuration,1974,"return new Float(n.floatValue());
","public static Float toFloat(Object value) throws ConversionException {
Number n = toNumber(value, Float.class);
if (n instanceof Float) {
return (Float) n;
} else {
return new Float(n.floatValue());
}
}","public static Float toFloat(Object value) throws ConversionException {
Number numberVar1 = numberLiteral2;
if (numberVar1 instanceof Float) {
return (Float) numberVar1;
} else {
return new Float(numberVar1.floatValue());
}
}"
4776,DODGY_CODE,REC_CATCH_EXCEPTION,FP,configuration,1987,"catch (Exception ex)
","private FileSystemOptions getOptions(String scheme) {
FileSystemOptions opts = new FileSystemOptions();
FileSystemConfigBuilder builder;
try {
builder = VFS.getManager().getFileSystemConfigBuilder(scheme);
} catch (Exception ex) {
return null;
}
FileOptionsProvider provider = getFileOptionsProvider();
if (provider != null) {
Map<String, Object> map = provider.getOptions();
if (map == null) {
return null;
}
int count = 0;
for (Map.Entry<String, Object> entry : map.entrySet()) {
try {
String key = entry.getKey();
if (FileOptionsProvider.CURRENT_USER.equals(key)) {
key = ""creatorName"";
}
setProperty(builder, opts, key, entry.getValue());
++count;
} catch (Exception ex) {
continue;
}
}
if (count > 0) {
return opts;
}
}
return null;
}","private FileSystemOptions getOptions(String scheme) {
FileSystemOptions filesystemoptionsVar1 = filesystemoptionsLiteral2;
FileSystemConfigBuilder filesystemconfigbuilderVar3;
try {
filesystemconfigbuilderVar3 = VFS.getManager().getFileSystemConfigBuilder(scheme);
} catch (Exception ex) {
return null;
}
FileOptionsProvider fileoptionsproviderVar4 = fileoptionsproviderLiteral5;
if (fileoptionsproviderVar4 != null) {
Map<String, Object> map<string,object>Var6 = map<string,object>Literal7;
if (map<string,object>Var6 == null) {
return null;
}
int intVar8 = intLiteral9;
for (Map.Entry<String, Object> map.entry<string,object>Var10 : map<string,object>Var6.entrySet()) {
try {
String stringVar11 = stringLiteral12;
if (FileOptionsProvider.CURRENT_USER.equals(stringVar11)) {
stringVar11 = ""creatorName"";
}
setProperty(filesystemconfigbuilderVar3, filesystemoptionsVar1, stringVar11, map.entry<string,object>Var10.getValue());
++intVar8;
} catch (Exception ex) {
continue;
}
}
if (intVar8 > 0) {
return filesystemoptionsVar1;
}
}
return null;
}"
4782,I18N,DM_DEFAULT_ENCODING,FP,configuration,1993,"String base64 = new String(Base64.encodeBase64((byte[]) value));
","private void printValue(PrintWriter out, int indentLevel, Object value) {
String padding = StringUtils.repeat("" "", indentLevel * INDENT_SIZE);
if (value instanceof Date) {
synchronized (PListNode.FORMAT) {
out.println(padding + ""<date>"" + PListNode.FORMAT.format((Date) value) + ""</date>"");
}
} else if (value instanceof Calendar) {
printValue(out, indentLevel, ((Calendar) value).getTime());
} else if (value instanceof Number) {
if (value instanceof Double || value instanceof Float || value instanceof BigDecimal) {
out.println(padding + ""<real>"" + value.toString() + ""</real>"");
} else {
out.println(padding + ""<integer>"" + value.toString() + ""</integer>"");
}
} else if (value instanceof Boolean) {
if (((Boolean) value).booleanValue()) {
out.println(padding + ""<true/>"");
} else {
out.println(padding + ""<false/>"");
}
} else if (value instanceof List) {
out.println(padding + ""<array>"");
Iterator<?> it = ((List<?>) value).iterator();
while (it.hasNext()) {
printValue(out, indentLevel + 1, it.next());
}
out.println(padding + ""</array>"");
} else if (value instanceof HierarchicalConfiguration) {
printNode(out, indentLevel, ((HierarchicalConfiguration) value).getRootNode());
} else if (value instanceof Configuration) {
out.println(padding + ""<dict>"");
Configuration config = (Configuration) value;
Iterator<String> it = config.getKeys();
while (it.hasNext()) {
String key = it.next();
ConfigurationNode node = new DefaultConfigurationNode(key);
node.setValue(config.getProperty(key));
printNode(out, indentLevel + 1, node);
if (it.hasNext()) {
out.println();
}
}
out.println(padding + ""</dict>"");
} else if (value instanceof Map) {
Map<String, Object> map = transformMap((Map<?, ?>) value);
printValue(out, indentLevel, new MapConfiguration(map));
} else if (value instanceof byte[]) {
String base64 = new String(Base64.encodeBase64((byte[]) value));
out.println(padding + ""<data>"" + StringEscapeUtils.escapeXml(base64) + ""</data>"");
} else if (value != null) {
out.println(padding + ""<string>"" + StringEscapeUtils.escapeXml(String.valueOf(value)) + ""</string>"");
} else {
out.println(padding + ""<string/>"");
}
}","private void printValue(PrintWriter out, int indentLevel, Object value) {
String stringVar1 = stringLiteral2;
if (value instanceof Date) {
synchronized (PListNode.FORMAT) {
out.println(stringVar1 + ""<date>"" + PListNode.FORMAT.format((Date) value) + ""</date>"");
}
} else if (value instanceof Calendar) {
printValue(out, indentLevel, ((Calendar) value).getTime());
} else if (value instanceof Number) {
if (value instanceof Double || value instanceof Float || value instanceof BigDecimal) {
out.println(stringVar1 + ""<real>"" + value.toString() + ""</real>"");
} else {
out.println(stringVar1 + ""<integer>"" + value.toString() + ""</integer>"");
}
} else if (value instanceof Boolean) {
if (((Boolean) value).booleanValue()) {
out.println(stringVar1 + ""<true/>"");
} else {
out.println(stringVar1 + ""<false/>"");
}
} else if (value instanceof List) {
out.println(stringVar1 + ""<array>"");
Iterator<?> iterator<?>Var3 = iterator<?>Literal4;
while (iterator<?>Var3.hasNext()) {
printValue(out, indentLevel + 1, iterator<?>Var3.next());
}
out.println(stringVar1 + ""</array>"");
} else if (value instanceof HierarchicalConfiguration) {
printNode(out, indentLevel, ((HierarchicalConfiguration) value).getRootNode());
} else if (value instanceof Configuration) {
out.println(stringVar1 + ""<dict>"");
Configuration configurationVar5 = configurationLiteral6;
Iterator<String> iterator<?>Var3 = iterator<string>Literal7;
while (iterator<?>Var3.hasNext()) {
String stringVar8 = stringLiteral9;
ConfigurationNode configurationnodeVar10 = configurationnodeLiteral11;
configurationnodeVar10.setValue(configurationVar5.getProperty(stringVar8));
printNode(out, indentLevel + 1, configurationnodeVar10);
if (iterator<?>Var3.hasNext()) {
out.println();
}
}
out.println(stringVar1 + ""</dict>"");
} else if (value instanceof Map) {
Map<String, Object> map<string,object>Var12 = map<string,object>Literal13;
printValue(out, indentLevel, new MapConfiguration(map<string,object>Var12));
} else if (value instanceof byte[]) {
String stringVar14 = stringLiteral15;
out.println(stringVar1 + ""<data>"" + StringEscapeUtils.escapeXml(stringVar14) + ""</data>"");
} else if (value != null) {
out.println(stringVar1 + ""<string>"" + StringEscapeUtils.escapeXml(String.valueOf(value)) + ""</string>"");
} else {
out.println(stringVar1 + ""<string/>"");
}
}"
4784,I18N,DM_DEFAULT_ENCODING,FP,configuration,1995,"addValue(Base64.decodeBase64(value.getBytes()));
","public void addDataValue(String value) {
addValue(Base64.decodeBase64(value.getBytes()));
}","public void addDataValue(String value) {
addValue(Base64.decodeBase64(value.getBytes()));
}"
4785,DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,FP,configuration,1996,"String name = (url == null) ? fileName : url.toString();
","@Override
public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
String base = ((CatalogManager) catalogManager).getBaseDir();
@SuppressWarnings(""unchecked"")
Vector<String> catalogs = catalogManager.getCatalogFiles();
if (catalogs != null) {
for (int count = 0; count < catalogs.size(); count++) {
String fileName = catalogs.elementAt(count);
URL url = null;
InputStream is = null;
try {
url = locate(fs, base, fileName);
if (url != null) {
is = fs.getInputStream(url);
}
} catch (ConfigurationException ce) {
String name = (url == null) ? fileName : url.toString();
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + name + "". "" + ce.getMessage());
}
if (is != null) {
String mimeType = fileNameMap.getContentTypeFor(fileName);
try {
if (mimeType != null) {
parseCatalog(mimeType, is);
continue;
}
} catch (Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + fileName + "". "" + ex.getMessage());
} finally {
is.close();
}
}
parseCatalog(base, fileName);
}
}
}","@Override
public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
String stringVar1 = stringLiteral2;
@SuppressWarnings(""unchecked"")
Vector<String> vector<string>Var3 = vector<string>Literal4;
if (vector<string>Var3 != null) {
for (int intVar16 = intLiteral17; intVar5 < intLiteral1; intVar5++) {
String stringVar7 = stringLiteral8;
URL urlVar9 = urlLiteral10;
InputStream inputstreamVar11 = urlLiteral10;
try {
urlVar9 = locate(fs, stringVar1, stringVar7);
if (urlVar9 != null) {
inputstreamVar11 = fs.getInputStream(urlVar9);
}
} catch (ConfigurationException ce) {
String stringVar12 = stringLiteral13;
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + stringVar12 + "". "" + ce.getMessage());
}
if (inputstreamVar11 != null) {
String stringVar14 = stringLiteral15;
try {
if (stringVar14 != null) {
parseCatalog(stringVar14, inputstreamVar11);
continue;
}
} catch (Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + stringVar7 + "". "" + ex.getMessage());
} finally {
inputstreamVar11.close();
}
}
parseCatalog(stringVar1, stringVar7);
}
}
}"
4794,BAD_PRACTICE,SE_BAD_FIELD,FP,configuration,2005,private ConfigurationNode node;,private ConfigurationNode node;,private ConfigurationNode configurationnodeVar1;
4803,DODGY_CODE,RI_REDUNDANT_INTERFACES,FP,configuration,2014,"public class CombinedConfiguration extends BaseHierarchicalConfiguration implements
EventListener<ConfigurationEvent>, Cloneable
{
public static final EventType<ConfigurationEvent> COMBINED_INVALIDATE =
new EventType<ConfigurationEvent>(ConfigurationEvent.ANY,
""COMBINED_INVALIDATE"");
private static final DefaultExpressionEngine AT_ENGINE = DefaultExpressionEngine.INSTANCE;
private static final NodeCombiner DEFAULT_COMBINER = new UnionCombiner();
private static final ImmutableNode EMPTY_ROOT = new ImmutableNode.Builder()
.create();
private NodeCombiner nodeCombiner;
private List<ConfigData> configurations;
private Map<String, Configuration> namedConfigurations;
private ExpressionEngine conversionExpressionEngine;
private boolean upToDate;
public CombinedConfiguration(NodeCombiner comb)
{
nodeCombiner = (comb != null) ? comb : DEFAULT_COMBINER;
initChildCollections();
}
public CombinedConfiguration()
{
this(null);
}
public NodeCombiner getNodeCombiner()
{
beginRead(true);
try
{
return nodeCombiner;
}
finally
{
endRead();
}
}
public void setNodeCombiner(NodeCombiner nodeCombiner)
{
if (nodeCombiner == null)
{
throw new IllegalArgumentException(
""Node combiner must not be null!"");
}
beginWrite(true);
try
{
this.nodeCombiner = nodeCombiner;
invalidateInternal();
}
finally
{
endWrite();
}
}
public ExpressionEngine getConversionExpressionEngine()
{
beginRead(true);
try
{
return conversionExpressionEngine;
}
finally
{
endRead();
}
}
public void setConversionExpressionEngine(
ExpressionEngine conversionExpressionEngine)
{
beginWrite(true);
try
{
this.conversionExpressionEngine = conversionExpressionEngine;
}
finally
{
endWrite();
}
}
public void addConfiguration(Configuration config, String name,
String at)
{
if (config == null)
{
throw new IllegalArgumentException(
""Added configuration must not be null!"");
}
beginWrite(true);
try
{
if (name != null && namedConfigurations.containsKey(name))
{
throw new ConfigurationRuntimeException(
""A configuration with the name '""
+ name
+ ""' already exists in this combined configuration!"");
}
ConfigData cd = new ConfigData(config, name, at);
if (getLogger().isDebugEnabled())
{
getLogger()
.debug(""Adding configuration "" + config + "" with name ""
+ name);
}
configurations.add(cd);
if (name != null)
{
namedConfigurations.put(name, config);
}
invalidateInternal();
}
finally
{
endWrite();
}
registerListenerAt(config);
}
public void addConfiguration(Configuration config, String name)
{
addConfiguration(config, name, null);
}
public void addConfiguration(Configuration config)
{
addConfiguration(config, null, null);
}
public int getNumberOfConfigurations()
{
beginRead(true);
try
{
return getNumberOfConfigurationsInternal();
}
finally
{
endRead();
}
}
public Configuration getConfiguration(int index)
{
beginRead(true);
try
{
ConfigData cd = configurations.get(index);
return cd.getConfiguration();
}
finally
{
endRead();
}
}
public Configuration getConfiguration(String name)
{
beginRead(true);
try
{
return namedConfigurations.get(name);
}
finally
{
endRead();
}
}
public List<Configuration> getConfigurations()
{
beginRead(true);
try
{
List<Configuration> list =
new ArrayList<Configuration>(getNumberOfConfigurationsInternal());
for (ConfigData cd : configurations)
{
list.add(cd.getConfiguration());
}
return list;
}
finally
{
endRead();
}
}
public List<String> getConfigurationNameList()
{
beginRead(true);
try
{
List<String> list = new ArrayList<String>(getNumberOfConfigurationsInternal());
for (ConfigData cd : configurations)
{
list.add(cd.getName());
}
return list;
}
finally
{
endRead();
}
}
public boolean removeConfiguration(Configuration config)
{
for (int index = 0; index < getNumberOfConfigurations(); index++)
{
if (configurations.get(index).getConfiguration() == config)
{
removeConfigurationAt(index);
return true;
}
}
return false;
}
public Configuration removeConfigurationAt(int index)
{
ConfigData cd = configurations.remove(index);
if (cd.getName() != null)
{
namedConfigurations.remove(cd.getName());
}
unregisterListenerAt(cd.getConfiguration());
invalidateInternal();
return cd.getConfiguration();
}
public Configuration removeConfiguration(String name)
{
Configuration conf = getConfiguration(name);
if (conf != null)
{
removeConfiguration(conf);
}
return conf;
}
public Set<String> getConfigurationNames()
{
beginRead(true);
try
{
return namedConfigurations.keySet();
}
finally
{
endRead();
}
}
public void invalidate()
{
beginWrite(true);
try
{
invalidateInternal();
}
finally
{
endWrite();
}
}
@Override
public void onEvent(ConfigurationEvent event)
{
if (event.isBeforeUpdate())
{
invalidate();
}
}
@Override
protected void clearInternal()
{
unregisterListenerAtChildren();
initChildCollections();
invalidateInternal();
}
@Override
public Object clone()
{
beginRead(false);
try
{
CombinedConfiguration copy = (CombinedConfiguration) super.clone();
copy.initChildCollections();
for (ConfigData cd : configurations)
{
copy.addConfiguration(ConfigurationUtils.cloneConfiguration(cd
.getConfiguration()), cd.getName(), cd.getAt());
}
return copy;
}
finally
{
endRead();
}
}
public Configuration getSource(String key)
{
if (key == null)
{
throw new IllegalArgumentException(""Key must not be null!"");
}
Set<Configuration> sources = getSources(key);
if (sources.isEmpty())
{
return null;
}
Iterator<Configuration> iterator = sources.iterator();
Configuration source = iterator.next();
if (iterator.hasNext())
{
throw new IllegalArgumentException(""The key "" + key
+ "" is defined by multiple sources!"");
}
return source;
}
public Set<Configuration> getSources(String key)
{
beginRead(false);
try
{
List<QueryResult<ImmutableNode>> results = fetchNodeList(key);
Set<Configuration> sources = new HashSet<Configuration>();
for (QueryResult<ImmutableNode> result : results)
{
Set<Configuration> resultSources =
findSourceConfigurations(result.getNode());
if (resultSources.isEmpty())
{
sources.add(this);
}
else
{
sources.addAll(resultSources);
}
}
return sources;
}
finally
{
endRead();
}
}
@Override
protected void beginRead(boolean optimize)
{
if (optimize)
{
super.beginRead(true);
return;
}
boolean lockObtained = false;
do
{
super.beginRead(false);
if (isUpToDate())
{
lockObtained = true;
}
else
{
endRead();
beginWrite(false); 
endWrite();
}
} while (!lockObtained);
}
@Override
protected void beginWrite(boolean optimize)
{
super.beginWrite(true);
if (optimize)
{
return;
}
try
{
if (!isUpToDate())
{
getSubConfigurationParentModel().replaceRoot(
constructCombinedNode(), this);
upToDate = true;
}
}
catch (RuntimeException rex)
{
endWrite();
throw rex;
}
}
private boolean isUpToDate()
{
return upToDate;
}
private void invalidateInternal()
{
upToDate = false;
fireEvent(COMBINED_INVALIDATE, null, null, false);
}
private void initChildCollections()
{
configurations = new ArrayList<ConfigData>();
namedConfigurations = new HashMap<String, Configuration>();
}
private ImmutableNode constructCombinedNode()
{
if (getNumberOfConfigurationsInternal() < 1)
{
if (getLogger().isDebugEnabled())
{
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
}
else
{
Iterator<ConfigData> it = configurations.iterator();
ImmutableNode node = it.next().getTransformedRoot();
while (it.hasNext())
{
node = nodeCombiner.combine(node,
it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled())
{
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}
private Set<Configuration> findSourceConfigurations(ImmutableNode node)
{
Set<Configuration> result = new HashSet<Configuration>();
FindNodeVisitor<ImmutableNode> visitor =
new FindNodeVisitor<ImmutableNode>(node);
for (ConfigData cd : configurations)
{
NodeTreeWalker.INSTANCE.walkBFS(cd.getRootNode(), visitor,
getModel().getNodeHandler());
if (visitor.isFound())
{
result.add(cd.getConfiguration());
visitor.reset();
}
}
return result;
}
private void registerListenerAt(Configuration configuration)
{
if (configuration instanceof EventSource)
{
((EventSource) configuration).addEventListener(
ConfigurationEvent.ANY, this);
}
}
private void unregisterListenerAt(Configuration configuration)
{
if (configuration instanceof EventSource)
{
((EventSource) configuration).removeEventListener(
ConfigurationEvent.ANY, this);
}
}
private void unregisterListenerAtChildren()
{
if (configurations != null)
{
for (ConfigData child : configurations)
{
unregisterListenerAt(child.getConfiguration());
}
}
}
private int getNumberOfConfigurationsInternal()
{
return configurations.size();
","private ImmutableNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
} else {
Iterator<ConfigData> it = configurations.iterator();
ImmutableNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = nodeCombiner.combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}","private ImmutableNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
} else {
Iterator<ConfigData> iterator<configdata>Var1 = iterator<configdata>Literal2;
ImmutableNode immutablenodeVar3 = immutablenodeLiteral4;
while (iterator<configdata>Var1.hasNext()) {
immutablenodeVar3 = nodeCombiner.combine(immutablenodeVar3, iterator<configdata>Var1.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream bytearrayoutputstreamVar5 = bytearrayoutputstreamLiteral6;
PrintStream printstreamVar7 = printstreamLiteral8;
TreeUtils.printTree(printstreamVar7, immutablenodeVar3);
getLogger().debug(bytearrayoutputstreamVar5.toString());
}
return immutablenodeVar3;
}
}"
4808,SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,configuration,2019,"pstmt = getConnection().prepareStatement(statement);
","protected PreparedStatement createStatement(String sql, boolean nameCol) throws SQLException {
String statement;
if (nameCol && configurationNameColumn != null) {
StringBuilder buf = new StringBuilder(sql);
buf.append("" AND "").append(configurationNameColumn).append(""=?"");
statement = buf.toString();
} else {
statement = sql;
}
pstmt = getConnection().prepareStatement(statement);
return pstmt;
}","protected PreparedStatement createStatement(String sql, boolean nameCol) throws SQLException {
String stringVar1;
if (nameCol && configurationNameColumn != null) {
StringBuilder stringbuilderVar2 = stringbuilderLiteral3;
stringbuilderVar2.append("" AND "").append(configurationNameColumn).append(""=?"");
stringVar1 = stringbuilderVar2.toString();
} else {
stringVar1 = sql;
}
pstmt = getConnection().prepareStatement(stringVar1);
return pstmt;
}"
4811,DODGY_CODE,REC_CATCH_EXCEPTION,FP,configuration,2022,"catch (Exception e)
","@Override
public void read(Reader in) throws ConfigurationException {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setNamespaceAware(false);
factory.setValidating(true);
try {
SAXParser parser = factory.newSAXParser();
XMLReader xmlReader = parser.getXMLReader();
xmlReader.setEntityResolver(new EntityResolver() {
@Override
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlReader.setContentHandler(new XMLPropertiesHandler());
xmlReader.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
// todo: support included properties ?
}","@Override
public void read(Reader in) throws ConfigurationException {
SAXParserFactory saxparserfactoryVar1 = saxparserfactoryLiteral2;
saxparserfactoryVar1.setNamespaceAware(false);
saxparserfactoryVar1.setValidating(true);
try {
SAXParser saxparserVar3 = saxparserLiteral4;
XMLReader xmlreaderVar5 = xmlreaderLiteral6;
xmlreaderVar5.setEntityResolver(new EntityResolver() {
@Override
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlreaderVar5.setContentHandler(new XMLPropertiesHandler());
xmlreaderVar5.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
// todo: support included properties ?
}"
4822,DODGY_CODE,REC_CATCH_EXCEPTION,FP,configuration,2033,"catch (Exception e)
","static Object toInternetAddress(Object value) throws ConversionException {
if (value.getClass().getName().equals(INTERNET_ADDRESS_CLASSNAME)) {
return value;
} else if (value instanceof String) {
try {
Constructor<?> ctor = Class.forName(INTERNET_ADDRESS_CLASSNAME).getConstructor(String.class);
return ctor.newInstance(value);
} catch (Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"", e);
}
} else {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"");
}
}","static Object toInternetAddress(Object value) throws ConversionException {
if (value.getClass().getName().equals(INTERNET_ADDRESS_CLASSNAME)) {
return value;
} else if (value instanceof String) {
try {
Constructor<?> constructor<?>Var1 = constructor<?>Literal2;
return constructor<?>Var1.newInstance(value);
} catch (Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"", e);
}
} else {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"");
}
}"
4825,DODGY_CODE,REC_CATCH_EXCEPTION,FP,configuration,2036,"catch (Exception e)
","public void setValue(Object value) throws ConfigurationRuntimeException {
try {
if (!(value instanceof String)) {
this.value = value;
return;
}
String val = (String) value;
String name = StringUtils.removeStartIgnoreCase(val, CLASS);
Class<?> clazz = ClassUtils.getClass(name);
if (name.length() == val.length()) {
this.value = clazz.newInstance();
} else {
this.value = clazz;
}
} catch (Exception e) {
throw new ConfigurationRuntimeException(""Unable to create "" + value, e);
}
}","public void setValue(Object value) throws ConfigurationRuntimeException {
try {
if (!(value instanceof String)) {
this.value = value;
return;
}
String stringVar1 = stringLiteral2;
String stringVar3 = stringLiteral4;
Class<?> class<?>Var5 = class<?>Literal6;
if (stringVar3.length() == stringVar1.length()) {
this.value = class<?>Var5.newInstance();
} else {
this.value = class<?>Var5;
}
} catch (Exception e) {
throw new ConfigurationRuntimeException(""Unable to create "" + value, e);
}
}"
4831,DODGY_CODE,REC_CATCH_EXCEPTION,FP,configuration,2042,"catch (Exception ex)
","private FileSystemOptions getOptions(String scheme) {
FileSystemOptions opts = new FileSystemOptions();
FileSystemConfigBuilder builder;
try {
builder = VFS.getManager().getFileSystemConfigBuilder(scheme);
} catch (Exception ex) {
return null;
}
FileOptionsProvider provider = getFileOptionsProvider();
if (provider != null) {
Map<String, Object> map = provider.getOptions();
if (map == null) {
return null;
}
int count = 0;
for (Map.Entry<String, Object> entry : map.entrySet()) {
try {
String key = entry.getKey();
if (FileOptionsProvider.CURRENT_USER.equals(key)) {
key = ""creatorName"";
}
setProperty(builder, opts, key, entry.getValue());
++count;
} catch (Exception ex) {
continue;
}
}
if (count > 0) {
return opts;
}
}
return null;
}","private FileSystemOptions getOptions(String scheme) {
FileSystemOptions filesystemoptionsVar1 = filesystemoptionsLiteral2;
FileSystemConfigBuilder filesystemconfigbuilderVar3;
try {
filesystemconfigbuilderVar3 = VFS.getManager().getFileSystemConfigBuilder(scheme);
} catch (Exception ex) {
return null;
}
FileOptionsProvider fileoptionsproviderVar4 = fileoptionsproviderLiteral5;
if (fileoptionsproviderVar4 != null) {
Map<String, Object> map<string,object>Var6 = map<string,object>Literal7;
if (map<string,object>Var6 == null) {
return null;
}
int intVar8 = intLiteral9;
for (Map.Entry<String, Object> map.entry<string,object>Var10 : map<string,object>Var6.entrySet()) {
try {
String stringVar11 = stringLiteral12;
if (FileOptionsProvider.CURRENT_USER.equals(stringVar11)) {
stringVar11 = ""creatorName"";
}
setProperty(filesystemconfigbuilderVar3, filesystemoptionsVar1, stringVar11, map.entry<string,object>Var10.getValue());
++intVar8;
} catch (Exception ex) {
continue;
}
}
if (intVar8 > 0) {
return filesystemoptionsVar1;
}
}
return null;
}"
4837,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,configuration,2048,"ConfigurationInterpolator ci = ((CatalogManager) catalogManager).getInterpolator();
","@Override
protected String normalizeURI(String uriref) {
ConfigurationInterpolator ci = ((CatalogManager) catalogManager).getInterpolator();
String resolved = (ci != null) ? String.valueOf(ci.interpolate(uriref)) : uriref;
return super.normalizeURI(resolved);
}","@Override
protected String normalizeURI(String uriref) {
ConfigurationInterpolator configurationinterpolatorVar1 = configurationinterpolatorLiteral2;
String stringVar3 = stringLiteral4;
return super.normalizeURI(stringVar3);
}"
5152,DODGY_CODE,RI_REDUNDANT_INTERFACES,FP,configuration,2363,"public class CombinedConfiguration extends HierarchicalReloadableConfiguration implements
ConfigurationListener, Cloneable
{
public static final int EVENT_COMBINED_INVALIDATE = 40;
private static final long serialVersionUID = 8338574525528692307L;
private static final DefaultExpressionEngine AT_ENGINE = new DefaultExpressionEngine();
private static final NodeCombiner DEFAULT_COMBINER = new UnionCombiner();
private static final String PROP_RELOAD_CHECK = ""CombinedConfigurationReloadCheck"";
private NodeCombiner nodeCombiner;
private volatile ConfigurationNode combinedRoot;
private List configurations;
private Map namedConfigurations;
private boolean ignoreReloadExceptions = true;
private boolean reloadRequired;
private ExpressionEngine conversionExpressionEngine;
private boolean forceReloadCheck;
public CombinedConfiguration(NodeCombiner comb)
{
setNodeCombiner((comb != null) ? comb : DEFAULT_COMBINER);
clear();
}
public CombinedConfiguration(NodeCombiner comb, Lock lock)
{
super(lock);
setNodeCombiner((comb != null) ? comb : DEFAULT_COMBINER);
clear();
}
public CombinedConfiguration(Lock lock)
{
this(null, lock);
}
public CombinedConfiguration()
{
this(null, null);
}
public NodeCombiner getNodeCombiner()
{
return nodeCombiner;
}
public void setNodeCombiner(NodeCombiner nodeCombiner)
{
if (nodeCombiner == null)
{
throw new IllegalArgumentException(
""Node combiner must not be null!"");
}
this.nodeCombiner = nodeCombiner;
invalidate();
}
public boolean isForceReloadCheck()
{
return forceReloadCheck;
}
public void setForceReloadCheck(boolean forceReloadCheck)
{
this.forceReloadCheck = forceReloadCheck;
}
public ExpressionEngine getConversionExpressionEngine()
{
return conversionExpressionEngine;
}
public void setConversionExpressionEngine(
ExpressionEngine conversionExpressionEngine)
{
this.conversionExpressionEngine = conversionExpressionEngine;
}
public boolean isIgnoreReloadExceptions()
{
return ignoreReloadExceptions;
}
public void setIgnoreReloadExceptions(boolean ignoreReloadExceptions)
{
this.ignoreReloadExceptions = ignoreReloadExceptions;
}
public void addConfiguration(AbstractConfiguration config, String name,
String at)
{
if (config == null)
{
throw new IllegalArgumentException(
""Added configuration must not be null!"");
}
if (name != null && namedConfigurations.containsKey(name))
{
throw new ConfigurationRuntimeException(
""A configuration with the name '""
+ name
+ ""' already exists in this combined configuration!"");
}
ConfigData cd = new ConfigData(config, name, at);
if (getLogger().isDebugEnabled())
{
getLogger().debug(""Adding configuration "" + config + "" with name "" + name);
}
configurations.add(cd);
if (name != null)
{
namedConfigurations.put(name, config);
}
config.addConfigurationListener(this);
invalidate();
}
public void addConfiguration(AbstractConfiguration config, String name)
{
addConfiguration(config, name, null);
}
public void addConfiguration(AbstractConfiguration config)
{
addConfiguration(config, null, null);
}
public int getNumberOfConfigurations()
{
return configurations.size();
}
public Configuration getConfiguration(int index)
{
ConfigData cd = (ConfigData) configurations.get(index);
return cd.getConfiguration();
}
public Configuration getConfiguration(String name)
{
return (Configuration) namedConfigurations.get(name);
}
public List getConfigurations()
{
List list = new ArrayList();
Iterator iter = configurations.iterator();
while (iter.hasNext())
{
list.add(((ConfigData) iter.next()).getConfiguration());
}
return list;
}
public List getConfigurationNameList()
{
List list = new ArrayList();
Iterator iter = configurations.iterator();
while (iter.hasNext())
{
list.add(((ConfigData) iter.next()).getName());
}
return list;
}
public boolean removeConfiguration(Configuration config)
{
for (int index = 0; index < getNumberOfConfigurations(); index++)
{
if (((ConfigData) configurations.get(index)).getConfiguration() == config)
{
removeConfigurationAt(index);
return true;
}
}
return false;
}
public Configuration removeConfigurationAt(int index)
{
ConfigData cd = (ConfigData) configurations.remove(index);
if (cd.getName() != null)
{
namedConfigurations.remove(cd.getName());
}
cd.getConfiguration().removeConfigurationListener(this);
invalidate();
return cd.getConfiguration();
}
public Configuration removeConfiguration(String name)
{
Configuration conf = getConfiguration(name);
if (conf != null)
{
removeConfiguration(conf);
}
return conf;
}
public Set getConfigurationNames()
{
return namedConfigurations.keySet();
}
public void invalidate()
{
reloadRequired = true;
fireEvent(EVENT_COMBINED_INVALIDATE, null, null, false);
}
public void configurationChanged(ConfigurationEvent event)
{
if (event.getType() == AbstractFileConfiguration.EVENT_CONFIG_CHANGED)
{
fireEvent(event.getType(), event.getPropertyName(), event.getPropertyValue(), event.isBeforeUpdate());
}
else if (!event.isBeforeUpdate())
{
invalidate();
}
}
public ConfigurationNode getRootNode()
{
synchronized (getReloadLock())
{
if (reloadRequired || combinedRoot == null)
{
combinedRoot = constructCombinedNode();
reloadRequired = false;
}
return combinedRoot;
}
}
public void clear()
{
fireEvent(EVENT_CLEAR, null, null, true);
configurations = new ArrayList();
namedConfigurations = new HashMap();
fireEvent(EVENT_CLEAR, null, null, false);
invalidate();
}
public Object clone()
{
CombinedConfiguration copy = (CombinedConfiguration) super.clone();
copy.clear();
for (Iterator it = configurations.iterator(); it.hasNext();)
{
ConfigData cd = (ConfigData) it.next();
copy.addConfiguration((AbstractConfiguration) ConfigurationUtils
.cloneConfiguration(cd.getConfiguration()), cd.getName(),
cd.getAt());
}
copy.setRootNode(new DefaultConfigurationNode());
return copy;
}
public Configuration getSource(String key)
{
if (key == null)
{
throw new IllegalArgumentException(""Key must not be null!"");
}
List nodes = fetchNodeList(key);
if (nodes.isEmpty())
{
return null;
}
Iterator it = nodes.iterator();
Configuration source = findSourceConfiguration((ConfigurationNode) it
.next());
while (it.hasNext())
{
Configuration src = findSourceConfiguration((ConfigurationNode) it
.next());
if (src != source)
{
throw new IllegalArgumentException(""The key "" + key
+ "" is defined by multiple sources!"");
}
}
return source;
}
protected List fetchNodeList(String key)
{
if (isForceReloadCheck())
{
performReloadCheck();
}
return super.fetchNodeList(key);
}
protected void performReloadCheck()
{
for (Iterator it = configurations.iterator(); it.hasNext();)
{
try
{
((ConfigData) it.next()).getConfiguration().getProperty(
PROP_RELOAD_CHECK);
}
catch (Exception ex)
{
if (!ignoreReloadExceptions)
{
throw new ConfigurationRuntimeException(ex);
}
}
}
}
private ConfigurationNode constructCombinedNode()
{
if (getNumberOfConfigurations() < 1)
{
if (getLogger().isDebugEnabled())
{
getLogger().debug(""No configurations defined for "" + this);
}
return new ViewNode();
}
else
{
Iterator it = configurations.iterator();
ConfigurationNode node = ((ConfigData) it.next())
.getTransformedRoot();
while (it.hasNext())
{
node = getNodeCombiner().combine(node,
((ConfigData) it.next()).getTransformedRoot());
}
if (getLogger().isDebugEnabled())
{
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}
private Configuration findSourceConfiguration(ConfigurationNode node)
{
synchronized (getReloadLock())
{
ConfigurationNode root = null;
ConfigurationNode current = node;
while (current != null)
{
root = current;
current = current.getParentNode();
}
for (Iterator it = configurations.iterator(); it.hasNext();)
{
ConfigData cd = (ConfigData) it.next();
if (root == cd.getRootNode())
{
return cd.getConfiguration();
}
}
}
return this;
","private ConfigurationNode constructCombinedNode() {
if (getNumberOfConfigurations() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return new ViewNode();
} else {
Iterator it = configurations.iterator();
ConfigurationNode node = ((ConfigData) it.next()).getTransformedRoot();
while (it.hasNext()) {
node = getNodeCombiner().combine(node, ((ConfigData) it.next()).getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}","private ConfigurationNode constructCombinedNode() {
if (getNumberOfConfigurations() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return new ViewNode();
} else {
Iterator iteratorVar1 = iteratorLiteral2;
ConfigurationNode configurationnodeVar3 = configurationnodeLiteral4;
while (iteratorVar1.hasNext()) {
configurationnodeVar3 = getNodeCombiner().combine(configurationnodeVar3, ((ConfigData) iteratorVar1.next()).getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream bytearrayoutputstreamVar5 = bytearrayoutputstreamLiteral6;
PrintStream printstreamVar7 = printstreamLiteral8;
TreeUtils.printTree(printstreamVar7, configurationnodeVar3);
getLogger().debug(bytearrayoutputstreamVar5.toString());
}
return configurationnodeVar3;
}
}"
5154,I18N,DM_CONVERT_CASE,FP,configuration,2365,"if (filename != null && filename.toLowerCase().trim().endsWith("".xml""))
","protected FileConfiguration createConfiguration(Attributes attributes) throws Exception {
String filename = attributes.getValue(ATTR_FILENAME);
if (filename != null && filename.toLowerCase().trim().endsWith("".xml"")) {
return new XMLPropertyListConfiguration();
} else {
return new PropertyListConfiguration();
}
}","protected FileConfiguration createConfiguration(Attributes attributes) throws Exception {
String stringVar1 = stringLiteral2;
if (stringVar1 != null && stringVar1.toLowerCase().trim().endsWith("".xml"")) {
return new XMLPropertyListConfiguration();
} else {
return new PropertyListConfiguration();
}
}"
5155,I18N,DM_CONVERT_CASE,FP,configuration,2366,"if (filename != null && filename.toLowerCase().trim().endsWith("".xml""))
","protected FileConfiguration createConfiguration(Attributes attributes) throws Exception {
String filename = attributes.getValue(ATTR_FILENAME);
if (filename != null && filename.toLowerCase().trim().endsWith("".xml"")) {
return new XMLPropertiesConfiguration();
} else {
return new PropertiesConfiguration();
}
}","protected FileConfiguration createConfiguration(Attributes attributes) throws Exception {
String stringVar1 = stringLiteral2;
if (stringVar1 != null && stringVar1.toLowerCase().trim().endsWith("".xml"")) {
return new XMLPropertiesConfiguration();
} else {
return new PropertiesConfiguration();
}
}"
5161,EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,FP,configuration,2372,"ResultSet rs = pstmt.executeQuery();
","public boolean containsKey(String key) {
boolean found = false;
StringBuffer query = new StringBuffer(""SELECT * FROM "" + table + "" WHERE "" + keyColumn + ""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
ResultSet rs = pstmt.executeQuery();
found = rs.next();
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
close(conn, pstmt);
}
return found;
}","public boolean containsKey(String key) {
boolean booleanVar1 = booleanLiteral2;
StringBuffer stringbufferVar3 = stringbufferLiteral4;
if (nameColumn != null) {
stringbufferVar3.append("" AND "" + nameColumn + ""=?"");
}
Connection connectionVar5 = connectionLiteral6;
PreparedStatement preparedstatementVar7 = connectionLiteral6;
try {
connectionVar5 = getConnection();
preparedstatementVar7 = connectionVar5.prepareStatement(stringbufferVar3.toString());
preparedstatementVar7.setString(1, key);
if (nameColumn != null) {
preparedstatementVar7.setString(2, name);
}
ResultSet resultsetVar8 = resultsetLiteral9;
booleanVar1 = resultsetVar8.next();
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
close(connectionVar5, preparedstatementVar7);
}
return booleanVar1;
}"
5163,SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,configuration,2374,"pstmt = conn.prepareStatement(query.toString());
","public void clear() {
fireEvent(EVENT_CLEAR, null, null, true);
StringBuffer query = new StringBuffer(""DELETE FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
pstmt.executeUpdate();
commitIfRequired(conn);
} catch (SQLException e) {
fireError(EVENT_CLEAR, null, null, e);
} finally {
close(conn, pstmt);
}
fireEvent(EVENT_CLEAR, null, null, false);
}","public void clear() {
fireEvent(EVENT_CLEAR, null, null, true);
StringBuffer stringbufferVar1 = stringbufferLiteral2;
if (nameColumn != null) {
stringbufferVar1.append("" WHERE "" + nameColumn + ""=?"");
}
Connection connectionVar3 = connectionLiteral4;
PreparedStatement preparedstatementVar5 = connectionLiteral4;
try {
connectionVar3 = getConnection();
preparedstatementVar5 = connectionVar3.prepareStatement(stringbufferVar1.toString());
if (nameColumn != null) {
preparedstatementVar5.setString(1, name);
}
preparedstatementVar5.executeUpdate();
commitIfRequired(connectionVar3);
} catch (SQLException e) {
fireError(EVENT_CLEAR, null, null, e);
} finally {
close(connectionVar3, preparedstatementVar5);
}
fireEvent(EVENT_CLEAR, null, null, false);
}"
5170,EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,FP,configuration,2381,"ResultSet rs = pstmt.executeQuery();
","public Object getProperty(String key) {
Object result = null;
StringBuffer query = new StringBuffer(""SELECT * FROM "");
query.append(table).append("" WHERE "");
query.append(keyColumn).append(""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
ResultSet rs = pstmt.executeQuery();
List results = new ArrayList();
while (rs.next()) {
Object value = rs.getObject(valueColumn);
if (isDelimiterParsingDisabled()) {
results.add(value);
} else {
Iterator it = PropertyConverter.toIterator(value, getListDelimiter());
while (it.hasNext()) {
results.add(it.next());
}
}
}
if (!results.isEmpty()) {
result = (results.size() > 1) ? results : results.get(0);
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
close(conn, pstmt);
}
return result;
}","public Object getProperty(String key) {
Object objectVar1 = objectLiteral2;
StringBuffer stringbufferVar3 = stringbufferLiteral4;
stringbufferVar3.append(table).append("" WHERE "");
stringbufferVar3.append(keyColumn).append(""=?"");
if (nameColumn != null) {
stringbufferVar3.append("" AND "" + nameColumn + ""=?"");
}
Connection connectionVar5 = objectLiteral2;
PreparedStatement preparedstatementVar6 = objectLiteral2;
try {
connectionVar5 = getConnection();
preparedstatementVar6 = connectionVar5.prepareStatement(stringbufferVar3.toString());
preparedstatementVar6.setString(1, key);
if (nameColumn != null) {
preparedstatementVar6.setString(2, name);
}
ResultSet resultsetVar7 = resultsetLiteral8;
List listVar9 = listLiteral10;
while (resultsetVar7.next()) {
Object objectVar11 = objectLiteral12;
if (isDelimiterParsingDisabled()) {
listVar9.add(objectVar11);
} else {
Iterator iteratorVar13 = iteratorLiteral14;
while (iteratorVar13.hasNext()) {
listVar9.add(iteratorVar13.next());
}
}
}
if (!listVar9.isEmpty()) {
objectVar1 = (listVar9.size() > 1) ? listVar9 : listVar9.get(0);
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
close(connectionVar5, preparedstatementVar6);
}
return objectVar1;
}"
5171,I18N,DM_CONVERT_CASE,FP,configuration,2382,"&& fileName.toLowerCase().trim().endsWith(fileExtension))
","protected Object createBeanInstance(Class beanClass, BeanDeclaration data) throws Exception {
String fileName = ((ConfigurationDeclaration) data).getConfiguration().getString(ATTR_FILENAME);
if (fileName != null && fileName.toLowerCase().trim().endsWith(fileExtension)) {
return super.createBeanInstance(fetchMatchingClass(), data);
} else {
return super.createBeanInstance(fetchDefaultClass(), data);
}
}","protected Object createBeanInstance(Class beanClass, BeanDeclaration data) throws Exception {
String stringVar1 = stringLiteral2;
if (stringVar1 != null && stringVar1.toLowerCase().trim().endsWith(fileExtension)) {
return super.createBeanInstance(fetchMatchingClass(), data);
} else {
return super.createBeanInstance(fetchDefaultClass(), data);
}
}"
5175,BAD_PRACTICE,SE_BAD_FIELD,FP,configuration,2386,private NodeCombiner nodeCombiner;,private NodeCombiner nodeCombiner;,private NodeCombiner nodecombinerVar1;
5176,CORRECTNESS,UR_UNINIT_READ_CALLED_FROM_SUPER_CONSTRUCTOR,FP,configuration,2387,"if (configs != null)
","public void setRootNode(ConfigurationNode rootNode) {
if (configs != null) {
this.getCurrentConfig().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}","public void setRootNode(ConfigurationNode rootNode) {
if (configs != null) {
this.getCurrentConfig().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}"
5184,BAD_PRACTICE,SE_BAD_FIELD_STORE,FP,configuration,2395,private final Object reloadLock;,private final Object reloadLock;,private final Object objectVar1;
5186,DODGY_CODE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,FP,configuration,2397,"instanceId = ++counter;
","public Lock(String name) {
this.name = name;
synchronized (counterLock) {
instanceId = ++counter;
}
}","public Lock(String name) {
this.name = name;
synchronized (counterLock) {
instanceId = ++counter;
}
}"
5189,DODGY_CODE,REC_CATCH_EXCEPTION,FP,configuration,2400,"catch (Exception ex)
","private ReloadingStrategy createReloadingStrategy() {
if (fileStrategy == null) {
return null;
}
try {
ReloadingStrategy strategy = (ReloadingStrategy) BeanUtils.cloneBean(fileStrategy);
strategy.setConfiguration(null);
return strategy;
} catch (Exception ex) {
return null;
}
}","private ReloadingStrategy createReloadingStrategy() {
if (fileStrategy == null) {
return null;
}
try {
ReloadingStrategy reloadingstrategyVar1 = reloadingstrategyLiteral2;
reloadingstrategyVar1.setConfiguration(null);
return reloadingstrategyVar1;
} catch (Exception ex) {
return null;
}
}"
5190,CORRECTNESS,UR_UNINIT_READ_CALLED_FROM_SUPER_CONSTRUCTOR,FP,configuration,2401,"if (init)
","public void setRootNode(ConfigurationNode rootNode) {
if (init) {
this.getConfiguration().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}","public void setRootNode(ConfigurationNode rootNode) {
if (init) {
this.getConfiguration().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}"
5192,BAD_PRACTICE,SE_NO_SERIALVERSIONID,FP,configuration,2403,"private static ThreadLocal recursive = new ThreadLocal()
{
protected synchronized Object initialValue()
{
return Boolean.FALSE;
}
};
private final Map configurationsMap = new HashMap();
private String pattern;
private boolean init;
private boolean ignoreException = true;
private boolean schemaValidation;
private boolean validating;
private boolean attributeSplittingDisabled;
private String loggerName = MultiFileHierarchicalConfiguration.class.getName();
private ReloadingStrategy fileStrategy;
private EntityResolver entityResolver;
private StrSubstitutor localSubst = new StrSubstitutor(new ConfigurationInterpolator());
public MultiFileHierarchicalConfiguration()
{
super();
this.init = true;
setLogger(LogFactory.getLog(loggerName));
}
public MultiFileHierarchicalConfiguration(String pathPattern)
{
super();
this.pattern = pathPattern;
this.init = true;
setLogger(LogFactory.getLog(loggerName));
}
public void setLoggerName(String name)
{
this.loggerName = name;
}
public void setFilePattern(String pathPattern)
{
this.pattern = pathPattern;
}
public boolean isSchemaValidation()
{
return schemaValidation;
}
public void setSchemaValidation(boolean schemaValidation)
{
this.schemaValidation = schemaValidation;
}
public boolean isValidating()
{
return validating;
}
public void setValidating(boolean validating)
{
this.validating = validating;
}
public boolean isAttributeSplittingDisabled()
{
return attributeSplittingDisabled;
}
public void setAttributeSplittingDisabled(boolean attributeSplittingDisabled)
{
this.attributeSplittingDisabled = attributeSplittingDisabled;
}
public ReloadingStrategy getReloadingStrategy()
{
return fileStrategy;
}
public void setReloadingStrategy(ReloadingStrategy strategy)
{
this.fileStrategy = strategy;
}
public void setEntityResolver(EntityResolver entityResolver)
{
this.entityResolver = entityResolver;
}
public EntityResolver getEntityResolver()
{
return this.entityResolver;
}
public void setIgnoreException(boolean ignoreException)
{
this.ignoreException = ignoreException;
}
public void addProperty(String key, Object value)
{
this.getConfiguration().addProperty(key, value);
}
public void clear()
{
this.getConfiguration().clear();
}
public void clearProperty(String key)
{
this.getConfiguration().clearProperty(key);
}
public boolean containsKey(String key)
{
return this.getConfiguration().containsKey(key);
}
public BigDecimal getBigDecimal(String key, BigDecimal defaultValue)
{
return this.getConfiguration().getBigDecimal(key, defaultValue);
}
public BigDecimal getBigDecimal(String key)
{
return this.getConfiguration().getBigDecimal(key);
}
public BigInteger getBigInteger(String key, BigInteger defaultValue)
{
return this.getConfiguration().getBigInteger(key, defaultValue);
}
public BigInteger getBigInteger(String key)
{
return this.getConfiguration().getBigInteger(key);
}
public boolean getBoolean(String key, boolean defaultValue)
{
return this.getConfiguration().getBoolean(key, defaultValue);
}
public Boolean getBoolean(String key, Boolean defaultValue)
{
return this.getConfiguration().getBoolean(key, defaultValue);
}
public boolean getBoolean(String key)
{
return this.getConfiguration().getBoolean(key);
}
public byte getByte(String key, byte defaultValue)
{
return this.getConfiguration().getByte(key, defaultValue);
}
public Byte getByte(String key, Byte defaultValue)
{
return this.getConfiguration().getByte(key, defaultValue);
}
public byte getByte(String key)
{
return this.getConfiguration().getByte(key);
}
public double getDouble(String key, double defaultValue)
{
return this.getConfiguration().getDouble(key, defaultValue);
}
public Double getDouble(String key, Double defaultValue)
{
return this.getConfiguration().getDouble(key, defaultValue);
}
public double getDouble(String key)
{
return this.getConfiguration().getDouble(key);
}
public float getFloat(String key, float defaultValue)
{
return this.getConfiguration().getFloat(key, defaultValue);
}
public Float getFloat(String key, Float defaultValue)
{
return this.getConfiguration().getFloat(key, defaultValue);
}
public float getFloat(String key)
{
return this.getConfiguration().getFloat(key);
}
public int getInt(String key, int defaultValue)
{
return this.getConfiguration().getInt(key, defaultValue);
}
public int getInt(String key)
{
return this.getConfiguration().getInt(key);
}
public Integer getInteger(String key, Integer defaultValue)
{
return this.getConfiguration().getInteger(key, defaultValue);
}
public Iterator getKeys()
{
return this.getConfiguration().getKeys();
}
public Iterator getKeys(String prefix)
{
return this.getConfiguration().getKeys(prefix);
}
public List getList(String key, List defaultValue)
{
return this.getConfiguration().getList(key, defaultValue);
}
public List getList(String key)
{
return this.getConfiguration().getList(key);
}
public long getLong(String key, long defaultValue)
{
return this.getConfiguration().getLong(key, defaultValue);
}
public Long getLong(String key, Long defaultValue)
{
return this.getConfiguration().getLong(key, defaultValue);
}
public long getLong(String key)
{
return this.getConfiguration().getLong(key);
}
public Properties getProperties(String key)
{
return this.getConfiguration().getProperties(key);
}
public Object getProperty(String key)
{
return this.getConfiguration().getProperty(key);
}
public short getShort(String key, short defaultValue)
{
return this.getConfiguration().getShort(key, defaultValue);
}
public Short getShort(String key, Short defaultValue)
{
return this.getConfiguration().getShort(key, defaultValue);
}
public short getShort(String key)
{
return this.getConfiguration().getShort(key);
}
public String getString(String key, String defaultValue)
{
return this.getConfiguration().getString(key, defaultValue);
}
public String getString(String key)
{
return this.getConfiguration().getString(key);
}
public String[] getStringArray(String key)
{
return this.getConfiguration().getStringArray(key);
}
public boolean isEmpty()
{
return this.getConfiguration().isEmpty();
}
public void setProperty(String key, Object value)
{
if (init)
{
this.getConfiguration().setProperty(key, value);
}
}
public Configuration subset(String prefix)
{
return this.getConfiguration().subset(prefix);
}
public Object getReloadLock()
{
return this.getConfiguration().getReloadLock();
}
public Node getRoot()
{
return this.getConfiguration().getRoot();
}
public void setRoot(Node node)
{
if (init)
{
this.getConfiguration().setRoot(node);
}
else
{
super.setRoot(node);
}
}
public ConfigurationNode getRootNode()
{
return this.getConfiguration().getRootNode();
}
public void setRootNode(ConfigurationNode rootNode)
{
if (init)
{
this.getConfiguration().setRootNode(rootNode);
}
else
{
super.setRootNode(rootNode);
}
}
public ExpressionEngine getExpressionEngine()
{
return super.getExpressionEngine();
}
public void setExpressionEngine(ExpressionEngine expressionEngine)
{
super.setExpressionEngine(expressionEngine);
}
public void addNodes(String key, Collection nodes)
{
this.getConfiguration().addNodes(key, nodes);
}
public SubnodeConfiguration configurationAt(String key, boolean supportUpdates)
{
return this.getConfiguration().configurationAt(key, supportUpdates);
}
public SubnodeConfiguration configurationAt(String key)
{
return this.getConfiguration().configurationAt(key);
}
public List configurationsAt(String key)
{
return this.getConfiguration().configurationsAt(key);
}
public void clearTree(String key)
{
this.getConfiguration().clearTree(key);
}
public int getMaxIndex(String key)
{
return this.getConfiguration().getMaxIndex(key);
}
public Configuration interpolatedConfiguration()
{
return this.getConfiguration().interpolatedConfiguration();
}
public void addConfigurationListener(ConfigurationListener l)
{
super.addConfigurationListener(l);
}
public boolean removeConfigurationListener(ConfigurationListener l)
{
return super.removeConfigurationListener(l);
}
public Collection getConfigurationListeners()
{
return super.getConfigurationListeners();
}
public void clearConfigurationListeners()
{
super.clearConfigurationListeners();
}
public void addErrorListener(ConfigurationErrorListener l)
{
super.addErrorListener(l);
}
public boolean removeErrorListener(ConfigurationErrorListener l)
{
return super.removeErrorListener(l);
}
public void clearErrorListeners()
{
super.clearErrorListeners();
}
public Collection getErrorListeners()
{
return super.getErrorListeners();
}
public void save(Writer writer) throws ConfigurationException
{
if (init)
{
this.getConfiguration().save(writer);
}
}
public void load(Reader reader) throws ConfigurationException
{
if (init)
{
this.getConfiguration().load(reader);
}
}
public void load() throws ConfigurationException
{
this.getConfiguration();
}
public void load(String fileName) throws ConfigurationException
{
this.getConfiguration().load(fileName);
}
public void load(File file) throws ConfigurationException
{
this.getConfiguration().load(file);
}
public void load(URL url) throws ConfigurationException
{
this.getConfiguration().load(url);
}
public void load(InputStream in) throws ConfigurationException
{
this.getConfiguration().load(in);
}
public void load(InputStream in, String encoding) throws ConfigurationException
{
this.getConfiguration().load(in, encoding);
}
public void save() throws ConfigurationException
{
this.getConfiguration().save();
}
public void save(String fileName) throws ConfigurationException
{
this.getConfiguration().save(fileName);
}
public void save(File file) throws ConfigurationException
{
this.getConfiguration().save(file);
}
public void save(URL url) throws ConfigurationException
{
this.getConfiguration().save(url);
}
public void save(OutputStream out) throws ConfigurationException
{
this.getConfiguration().save(out);
}
public void save(OutputStream out, String encoding) throws ConfigurationException
{
this.getConfiguration().save(out, encoding);
}
public void configurationChanged(ConfigurationEvent event)
{
if (event.getSource() instanceof XMLConfiguration)
{
Iterator iter = getConfigurationListeners().iterator();
while (iter.hasNext())
{
ConfigurationListener listener = (ConfigurationListener) iter.next();
listener.configurationChanged(event);
}
}
}
public void configurationError(ConfigurationErrorEvent event)
{
if (event.getSource() instanceof XMLConfiguration)
{
Iterator iter = getErrorListeners().iterator();
while (iter.hasNext())
{
ConfigurationErrorListener listener = (ConfigurationErrorListener) iter.next();
listener.configurationError(event);
}
}
if (event.getType() == AbstractFileConfiguration.EVENT_RELOAD)
{
if (isThrowable(event.getCause()))
{
throw new ConfigurationRuntimeException(event.getCause());
}
}
}
protected Object resolveContainerStore(String key)
{
if (((Boolean) recursive.get()).booleanValue())
{
return null;
}
recursive.set(Boolean.TRUE);
try
{
return super.resolveContainerStore(key);
}
finally
{
recursive.set(Boolean.FALSE);
}
}
public void removeConfiguration()
{
String path = getSubstitutor().replace(pattern);
synchronized (configurationsMap)
{
configurationsMap.remove(path);
}
}
private AbstractHierarchicalFileConfiguration getConfiguration()
{
if (pattern == null)
{
throw new ConfigurationRuntimeException(""File pattern must be defined"");
}
String path = localSubst.replace(pattern);
synchronized (configurationsMap)
{
if (configurationsMap.containsKey(path))
{
return (AbstractHierarchicalFileConfiguration) configurationsMap.get(path);
}
}
if (path.equals(pattern))
{
XMLConfiguration configuration = new XMLConfiguration()
{
public void load() throws ConfigurationException
{
}
public void save() throws ConfigurationException
{
}
};
synchronized (configurationsMap)
{
configurationsMap.put(pattern, configuration);
}
return configuration;
}
XMLConfiguration configuration = new XMLConfiguration();
if (loggerName != null)
{
Log log = LogFactory.getLog(loggerName);
if (log != null)
{
configuration.setLogger(log);
}
}
configuration.setBasePath(getBasePath());
configuration.setFileName(path);
configuration.setFileSystem(getFileSystem());
configuration.setExpressionEngine(getExpressionEngine());
ReloadingStrategy strategy = createReloadingStrategy();
if (strategy != null)
{
configuration.setReloadingStrategy(strategy);
}
configuration.setDelimiterParsingDisabled(isDelimiterParsingDisabled());
configuration.setValidating(validating);
configuration.setSchemaValidation(schemaValidation);
configuration.setEntityResolver(entityResolver);
configuration.setAttributeSplittingDisabled(attributeSplittingDisabled);
configuration.setListDelimiter(getListDelimiter());
configuration.addConfigurationListener(this);
configuration.addErrorListener(this);
try
{
configuration.load();
}
catch (ConfigurationException ce)
{
if (isThrowable(ce))
{
throw new ConfigurationRuntimeException(ce);
}
}
synchronized (configurationsMap)
{
if (!configurationsMap.containsKey(path))
{
configurationsMap.put(path, configuration);
}
}
return configuration;
}
private boolean isThrowable(Throwable throwable)
{
if (!ignoreException)
{
return true;
}
Throwable cause = throwable.getCause();
while (cause != null && !(cause instanceof SAXParseException))
{
cause = cause.getCause();
}
return cause != null;
}
private ReloadingStrategy createReloadingStrategy()
{
if (fileStrategy == null)
{
return null;
}
try
{
ReloadingStrategy strategy = (ReloadingStrategy) BeanUtils.cloneBean(fileStrategy);
strategy.setConfiguration(null);
return strategy;
}
catch (Exception ex)
{
return null;
",private StrSubstitutor localSubst = new StrSubstitutor(new ConfigurationInterpolator());,private StrSubstitutor strsubstitutorVar1 = strsubstitutorLiteral2;
5205,I18N,DM_CONVERT_CASE,FP,configuration,2416,"String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class[] paramTypes = new Class[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
return;
}
}","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String stringVar1 = stringLiteral2;
Class[] classArrayVar3 = classArrayLiteral4;
classArrayVar3[0] = FileSystemOptions.class;
classArrayVar3[1] = value.getClass();
try {
Method methodVar5 = methodLiteral6;
Object[] objectArrayVar7 = objectArrayLiteral8;
objectArrayVar7[0] = options;
objectArrayVar7[1] = value;
methodVar5.invoke(builder, objectArrayVar7);
} catch (Exception ex) {
return;
}
}"
5207,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,configuration,2418,"catch (Exception ex)
","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class[] paramTypes = new Class[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
return;
}
}","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String stringVar1 = stringLiteral2;
Class[] classArrayVar3 = classArrayLiteral4;
classArrayVar3[0] = FileSystemOptions.class;
classArrayVar3[1] = value.getClass();
try {
Method methodVar5 = methodLiteral6;
Object[] objectArrayVar7 = objectArrayLiteral8;
objectArrayVar7[0] = options;
objectArrayVar7[1] = value;
methodVar5.invoke(builder, objectArrayVar7);
} catch (Exception ex) {
return;
}
}"
5210,BAD_PRACTICE,SE_BAD_FIELD_STORE,FP,configuration,2421,private EntityResolver entityResolver = new DefaultEntityResolver();,private EntityResolver entityResolver = new DefaultEntityResolver();,private EntityResolver entityresolverVar1 = entityresolverLiteral2;
5216,DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,FP,configuration,2427,"String encoding = getEncoding() != null ? getEncoding() : DEFAULT_ENCODING;
","public void save(Writer out) throws ConfigurationException {
PrintWriter writer = new PrintWriter(out);
String encoding = getEncoding() != null ? getEncoding() : DEFAULT_ENCODING;
writer.println(""<?xml version=\""1.0\"" encoding=\"""" + encoding + ""\""?>"");
writer.println(""<!DOCTYPE properties SYSTEM \""http://java.sun.com/dtd/properties.dtd\"">"");
writer.println(""<properties>"");
if (getHeader() != null) {
writer.println(""  <comment>"" + StringEscapeUtils.escapeXml(getHeader()) + ""</comment>"");
}
Iterator keys = getKeys();
while (keys.hasNext()) {
String key = (String) keys.next();
Object value = getProperty(key);
if (value instanceof List) {
writeProperty(writer, key, (List) value);
} else {
writeProperty(writer, key, value);
}
}
writer.println(""</properties>"");
writer.flush();
}","public void save(Writer out) throws ConfigurationException {
PrintWriter printwriterVar1 = printwriterLiteral2;
String stringVar3 = stringLiteral4;
printwriterVar1.println(""<?xml version=\""1.0\"" encoding=\"""" + stringVar3 + ""\""?>"");
printwriterVar1.println(""<!DOCTYPE properties SYSTEM \""http://java.sun.com/dtd/properties.dtd\"">"");
printwriterVar1.println(""<properties>"");
if (getHeader() != null) {
printwriterVar1.println(""  <comment>"" + StringEscapeUtils.escapeXml(getHeader()) + ""</comment>"");
}
Iterator iteratorVar5 = iteratorLiteral6;
while (iteratorVar5.hasNext()) {
String stringVar7 = stringLiteral8;
Object objectVar9 = objectLiteral10;
if (objectVar9 instanceof List) {
writeProperty(printwriterVar1, stringVar7, (List) objectVar9);
} else {
writeProperty(printwriterVar1, stringVar7, objectVar9);
}
}
printwriterVar1.println(""</properties>"");
printwriterVar1.flush();
}"
5221,PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,configuration,2432,"{
public InputSource resolveEntity(String publicId, String systemId)
{
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
","public void load(Reader in) throws ConfigurationException {
if (!(getRootNode() instanceof PListNode)) {
initRoot();
}
EntityResolver resolver = new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
};
XMLPropertyListHandler handler = new XMLPropertyListHandler(getRoot());
try {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}","public void load(Reader in) throws ConfigurationException {
if (!(getRootNode() instanceof PListNode)) {
initRoot();
}
EntityResolver entityresolverVar1 = entityresolverLiteral2;
XMLPropertyListHandler xmlpropertylisthandlerVar3 = xmlpropertylisthandlerLiteral4;
try {
SAXParserFactory saxparserfactoryVar5 = saxparserfactoryLiteral6;
saxparserfactoryVar5.setValidating(true);
SAXParser saxparserVar7 = saxparserLiteral8;
saxparserVar7.getXMLReader().setEntityResolver(entityresolverVar1);
saxparserVar7.getXMLReader().setContentHandler(xmlpropertylisthandlerVar3);
saxparserVar7.getXMLReader().parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}"
5225,DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,FP,configuration,2436,"if (name == null)
","private String getName(File file) {
String name = configuration.getURL().toString();
if (name == null) {
if (file != null) {
name = file.getAbsolutePath();
} else {
name = ""base: "" + configuration.getBasePath() + ""file: "" + configuration.getFileName();
}
}
return name;
}","private String getName(File file) {
String stringVar1 = stringLiteral2;
if (stringVar1 == null) {
if (file != null) {
stringVar1 = file.getAbsolutePath();
} else {
stringVar1 = ""base: "" + configuration.getBasePath() + ""file: "" + configuration.getFileName();
}
}
return stringVar1;
}"
5226,CORRECTNESS,RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE,FP,configuration,2437,"if (configuration.getURL() == null && configuration.getFileName() == null)
","public void init() {
if (configuration.getURL() == null && configuration.getFileName() == null) {
return;
}
if (this.configuration == null) {
throw new IllegalStateException(""No configuration has been set for this strategy"");
}
updateLastModified();
}","public void init() {
if (configuration.getURL() == null && configuration.getFileName() == null) {
return;
}
if (this.configuration == null) {
throw new IllegalStateException(""No configuration has been set for this strategy"");
}
updateLastModified();
}"
5234,DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,configuration,2445,"return reverse ? getStartOffset() + 1 : subNodes.size()
","protected int getMaxPosition() {
return reverse ? getStartOffset() + 1 : subNodes.size() - getStartOffset();
}","protected int getMaxPosition() {
return reverse ? getStartOffset() + 1 : subNodes.size() - getStartOffset();
}"
5255,I18N,DM_DEFAULT_ENCODING,FP,configuration,2466,"writer = new OutputStreamWriter(out);
","public void save(OutputStream out, String encoding) throws ConfigurationException {
Writer writer = null;
if (encoding != null) {
try {
writer = new OutputStreamWriter(out, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (writer == null) {
writer = new OutputStreamWriter(out);
}
save(writer);
}","public void save(OutputStream out, String encoding) throws ConfigurationException {
Writer writerVar1 = writerLiteral2;
if (encoding != null) {
try {
writerVar1 = new OutputStreamWriter(out, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (writerVar1 == null) {
writerVar1 = new OutputStreamWriter(out);
}
save(writerVar1);
}"
5259,I18N,DM_DEFAULT_ENCODING,FP,configuration,2470,"PrintStream stream = new PrintStream(os);
","private ConfigurationNode constructCombinedNode() {
if (getNumberOfConfigurations() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return new ViewNode();
} else {
Iterator<ConfigData> it = configurations.iterator();
ConfigurationNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = getNodeCombiner().combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}","private ConfigurationNode constructCombinedNode() {
if (getNumberOfConfigurations() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return new ViewNode();
} else {
Iterator<ConfigData> iterator<configdata>Var1 = iterator<configdata>Literal2;
ConfigurationNode configurationnodeVar3 = configurationnodeLiteral4;
while (iterator<configdata>Var1.hasNext()) {
configurationnodeVar3 = getNodeCombiner().combine(configurationnodeVar3, iterator<configdata>Var1.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream bytearrayoutputstreamVar5 = bytearrayoutputstreamLiteral6;
PrintStream printstreamVar7 = printstreamLiteral8;
TreeUtils.printTree(printstreamVar7, configurationnodeVar3);
getLogger().debug(bytearrayoutputstreamVar5.toString());
}
return configurationnodeVar3;
}
}"
5261,I18N,DM_CONVERT_CASE,FP,configuration,2472,"if (filename != null && filename.toLowerCase().trim().endsWith("".xml""))
","@Override
protected FileConfiguration createConfiguration(Attributes attributes) throws Exception {
String filename = attributes.getValue(ATTR_FILENAME);
if (filename != null && filename.toLowerCase().trim().endsWith("".xml"")) {
return new XMLPropertiesConfiguration();
} else {
return new PropertiesConfiguration();
}
}","@Override
protected FileConfiguration createConfiguration(Attributes attributes) throws Exception {
String stringVar1 = stringLiteral2;
if (stringVar1 != null && stringVar1.toLowerCase().trim().endsWith("".xml"")) {
return new XMLPropertiesConfiguration();
} else {
return new PropertiesConfiguration();
}
}"
5272,EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,FP,configuration,2483,"ResultSet rs = pstmt.executeQuery();
","public boolean containsKey(String key) {
boolean found = false;
StringBuilder query = new StringBuilder(""SELECT * FROM "" + table + "" WHERE "" + keyColumn + ""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
ResultSet rs = pstmt.executeQuery();
found = rs.next();
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
close(conn, pstmt);
}
return found;
}","public boolean containsKey(String key) {
boolean booleanVar1 = booleanLiteral2;
StringBuilder stringbuilderVar3 = stringbuilderLiteral4;
if (nameColumn != null) {
stringbuilderVar3.append("" AND "" + nameColumn + ""=?"");
}
Connection connectionVar5 = connectionLiteral6;
PreparedStatement preparedstatementVar7 = connectionLiteral6;
try {
connectionVar5 = getConnection();
preparedstatementVar7 = connectionVar5.prepareStatement(stringbuilderVar3.toString());
preparedstatementVar7.setString(1, key);
if (nameColumn != null) {
preparedstatementVar7.setString(2, name);
}
ResultSet resultsetVar8 = resultsetLiteral9;
booleanVar1 = resultsetVar8.next();
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
close(connectionVar5, preparedstatementVar7);
}
return booleanVar1;
}"
5278,I18N,DM_CONVERT_CASE,FP,configuration,2489,"&& fileName.toLowerCase().trim().endsWith(fileExtension))
","@Override
protected Object createBeanInstance(Class<?> beanClass, BeanDeclaration data) throws Exception {
String fileName = ((ConfigurationDeclaration) data).getConfiguration().getString(ATTR_FILENAME);
if (fileName != null && fileName.toLowerCase().trim().endsWith(fileExtension)) {
return super.createBeanInstance(fetchMatchingClass(), data);
} else {
return super.createBeanInstance(fetchDefaultClass(), data);
}
}","@Override
protected Object createBeanInstance(Class<?> beanClass, BeanDeclaration data) throws Exception {
String stringVar1 = stringLiteral2;
if (stringVar1 != null && stringVar1.toLowerCase().trim().endsWith(fileExtension)) {
return super.createBeanInstance(fetchMatchingClass(), data);
} else {
return super.createBeanInstance(fetchDefaultClass(), data);
}
}"
5280,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,configuration,2491,"catch (Exception e)
","public String getPath(File file, URL url, String basePath, String fileName) {
String path = null;
if (file != null) {
path = file.getAbsolutePath();
}
if (path == null) {
if (url != null) {
path = url.getPath();
} else {
try {
path = getURL(basePath, fileName).getPath();
} catch (Exception e) {
;
}
}
}
return path;
}","public String getPath(File file, URL url, String basePath, String fileName) {
String stringVar1 = stringLiteral2;
if (file != null) {
stringVar1 = file.getAbsolutePath();
}
if (stringVar1 == null) {
if (url != null) {
stringVar1 = url.getPath();
} else {
try {
stringVar1 = getURL(basePath, fileName).getPath();
} catch (Exception e) {
;
}
}
}
return stringVar1;
}"
5293,Multithreaded correctness,DL_SYNCHRONIZATION_ON_SHARED_CONSTANT,FP,configuration,2504,"synchronized (counterLock)
","public Lock(String name) {
this.name = name;
synchronized (counterLock) {
instanceId = ++counter;
}
}","public Lock(String name) {
this.name = name;
synchronized (counterLock) {
instanceId = ++counter;
}
}"
5300,DODGY_CODE,RI_REDUNDANT_INTERFACES,FP,configuration,2511,"private static ThreadLocal<Boolean> recursive = new ThreadLocal<Boolean>()
{
@Override
protected synchronized Boolean initialValue()
{
return Boolean.FALSE;
}
};
private final ConcurrentMap<String, XMLConfiguration> configurationsMap =
new ConcurrentHashMap<String, XMLConfiguration>();
private String pattern;
private boolean init;
private boolean ignoreException = true;
private boolean schemaValidation;
private boolean validating;
private boolean attributeSplittingDisabled;
private String loggerName = MultiFileHierarchicalConfiguration.class.getName();
private ReloadingStrategy fileStrategy;
private EntityResolver entityResolver;
private StrSubstitutor localSubst = new StrSubstitutor(new ConfigurationInterpolator());
public MultiFileHierarchicalConfiguration()
{
super();
this.init = true;
setLogger(LogFactory.getLog(loggerName));
}
public MultiFileHierarchicalConfiguration(String pathPattern)
{
super();
this.pattern = pathPattern;
this.init = true;
setLogger(LogFactory.getLog(loggerName));
}
public void setLoggerName(String name)
{
this.loggerName = name;
}
public void setFilePattern(String pathPattern)
{
this.pattern = pathPattern;
}
public boolean isSchemaValidation()
{
return schemaValidation;
}
public void setSchemaValidation(boolean schemaValidation)
{
this.schemaValidation = schemaValidation;
}
public boolean isValidating()
{
return validating;
}
public void setValidating(boolean validating)
{
this.validating = validating;
}
public boolean isAttributeSplittingDisabled()
{
return attributeSplittingDisabled;
}
public void setAttributeSplittingDisabled(boolean attributeSplittingDisabled)
{
this.attributeSplittingDisabled = attributeSplittingDisabled;
}
@Override
public ReloadingStrategy getReloadingStrategy()
{
return fileStrategy;
}
@Override
public void setReloadingStrategy(ReloadingStrategy strategy)
{
this.fileStrategy = strategy;
}
public void setEntityResolver(EntityResolver entityResolver)
{
this.entityResolver = entityResolver;
}
public EntityResolver getEntityResolver()
{
return this.entityResolver;
}
public void setIgnoreException(boolean ignoreException)
{
this.ignoreException = ignoreException;
}
@Override
public void addProperty(String key, Object value)
{
this.getConfiguration().addProperty(key, value);
}
@Override
public void clear()
{
this.getConfiguration().clear();
}
@Override
public void clearProperty(String key)
{
this.getConfiguration().clearProperty(key);
}
@Override
public boolean containsKey(String key)
{
return this.getConfiguration().containsKey(key);
}
@Override
public BigDecimal getBigDecimal(String key, BigDecimal defaultValue)
{
return this.getConfiguration().getBigDecimal(key, defaultValue);
}
@Override
public BigDecimal getBigDecimal(String key)
{
return this.getConfiguration().getBigDecimal(key);
}
@Override
public BigInteger getBigInteger(String key, BigInteger defaultValue)
{
return this.getConfiguration().getBigInteger(key, defaultValue);
}
@Override
public BigInteger getBigInteger(String key)
{
return this.getConfiguration().getBigInteger(key);
}
@Override
public boolean getBoolean(String key, boolean defaultValue)
{
return this.getConfiguration().getBoolean(key, defaultValue);
}
@Override
public Boolean getBoolean(String key, Boolean defaultValue)
{
return this.getConfiguration().getBoolean(key, defaultValue);
}
@Override
public boolean getBoolean(String key)
{
return this.getConfiguration().getBoolean(key);
}
@Override
public byte getByte(String key, byte defaultValue)
{
return this.getConfiguration().getByte(key, defaultValue);
}
@Override
public Byte getByte(String key, Byte defaultValue)
{
return this.getConfiguration().getByte(key, defaultValue);
}
@Override
public byte getByte(String key)
{
return this.getConfiguration().getByte(key);
}
@Override
public double getDouble(String key, double defaultValue)
{
return this.getConfiguration().getDouble(key, defaultValue);
}
@Override
public Double getDouble(String key, Double defaultValue)
{
return this.getConfiguration().getDouble(key, defaultValue);
}
@Override
public double getDouble(String key)
{
return this.getConfiguration().getDouble(key);
}
@Override
public float getFloat(String key, float defaultValue)
{
return this.getConfiguration().getFloat(key, defaultValue);
}
@Override
public Float getFloat(String key, Float defaultValue)
{
return this.getConfiguration().getFloat(key, defaultValue);
}
@Override
public float getFloat(String key)
{
return this.getConfiguration().getFloat(key);
}
@Override
public int getInt(String key, int defaultValue)
{
return this.getConfiguration().getInt(key, defaultValue);
}
@Override
public int getInt(String key)
{
return this.getConfiguration().getInt(key);
}
@Override
public Integer getInteger(String key, Integer defaultValue)
{
return this.getConfiguration().getInteger(key, defaultValue);
}
@Override
public Iterator<String> getKeys()
{
return this.getConfiguration().getKeys();
}
@Override
public Iterator<String> getKeys(String prefix)
{
return this.getConfiguration().getKeys(prefix);
}
@Override
public List<Object> getList(String key, List<Object> defaultValue)
{
return this.getConfiguration().getList(key, defaultValue);
}
@Override
public List<Object> getList(String key)
{
return this.getConfiguration().getList(key);
}
@Override
public long getLong(String key, long defaultValue)
{
return this.getConfiguration().getLong(key, defaultValue);
}
@Override
public Long getLong(String key, Long defaultValue)
{
return this.getConfiguration().getLong(key, defaultValue);
}
@Override
public long getLong(String key)
{
return this.getConfiguration().getLong(key);
}
@Override
public Properties getProperties(String key)
{
return this.getConfiguration().getProperties(key);
}
@Override
public Object getProperty(String key)
{
return this.getConfiguration().getProperty(key);
}
@Override
public short getShort(String key, short defaultValue)
{
return this.getConfiguration().getShort(key, defaultValue);
}
@Override
public Short getShort(String key, Short defaultValue)
{
return this.getConfiguration().getShort(key, defaultValue);
}
@Override
public short getShort(String key)
{
return this.getConfiguration().getShort(key);
}
@Override
public String getString(String key, String defaultValue)
{
return this.getConfiguration().getString(key, defaultValue);
}
@Override
public String getString(String key)
{
return this.getConfiguration().getString(key);
}
@Override
public String[] getStringArray(String key)
{
return this.getConfiguration().getStringArray(key);
}
@Override
public boolean isEmpty()
{
return this.getConfiguration().isEmpty();
}
@Override
public void setProperty(String key, Object value)
{
if (init)
{
this.getConfiguration().setProperty(key, value);
}
}
@Override
public Configuration subset(String prefix)
{
return this.getConfiguration().subset(prefix);
}
@Override
public Object getReloadLock()
{
return this.getConfiguration().getReloadLock();
}
@Override
public Node getRoot()
{
return this.getConfiguration().getRoot();
}
@Override
public void setRoot(Node node)
{
if (init)
{
this.getConfiguration().setRoot(node);
}
else
{
super.setRoot(node);
}
}
@Override
public ConfigurationNode getRootNode()
{
return this.getConfiguration().getRootNode();
}
@Override
public void setRootNode(ConfigurationNode rootNode)
{
if (init)
{
this.getConfiguration().setRootNode(rootNode);
}
else
{
super.setRootNode(rootNode);
}
}
@Override
public ExpressionEngine getExpressionEngine()
{
return super.getExpressionEngine();
}
@Override
public void setExpressionEngine(ExpressionEngine expressionEngine)
{
super.setExpressionEngine(expressionEngine);
}
@Override
public void addNodes(String key, Collection<? extends ConfigurationNode> nodes)
{
this.getConfiguration().addNodes(key, nodes);
}
@Override
public SubnodeConfiguration configurationAt(String key, boolean supportUpdates)
{
return this.getConfiguration().configurationAt(key, supportUpdates);
}
@Override
public SubnodeConfiguration configurationAt(String key)
{
return this.getConfiguration().configurationAt(key);
}
@Override
public List<HierarchicalConfiguration> configurationsAt(String key)
{
return this.getConfiguration().configurationsAt(key);
}
@Override
public void clearTree(String key)
{
this.getConfiguration().clearTree(key);
}
@Override
public int getMaxIndex(String key)
{
return this.getConfiguration().getMaxIndex(key);
}
@Override
public Configuration interpolatedConfiguration()
{
return this.getConfiguration().interpolatedConfiguration();
}
@Override
public void addConfigurationListener(ConfigurationListener l)
{
super.addConfigurationListener(l);
}
@Override
public boolean removeConfigurationListener(ConfigurationListener l)
{
return super.removeConfigurationListener(l);
}
@Override
public Collection<ConfigurationListener> getConfigurationListeners()
{
return super.getConfigurationListeners();
}
@Override
public void clearConfigurationListeners()
{
super.clearConfigurationListeners();
}
@Override
public void addErrorListener(ConfigurationErrorListener l)
{
super.addErrorListener(l);
}
@Override
public boolean removeErrorListener(ConfigurationErrorListener l)
{
return super.removeErrorListener(l);
}
@Override
public void clearErrorListeners()
{
super.clearErrorListeners();
}
@Override
public Collection<ConfigurationErrorListener> getErrorListeners()
{
return super.getErrorListeners();
}
public void save(Writer writer) throws ConfigurationException
{
if (init)
{
this.getConfiguration().save(writer);
}
}
public void load(Reader reader) throws ConfigurationException
{
if (init)
{
this.getConfiguration().load(reader);
}
}
@Override
public void load() throws ConfigurationException
{
this.getConfiguration();
}
@Override
public void load(String fileName) throws ConfigurationException
{
this.getConfiguration().load(fileName);
}
@Override
public void load(File file) throws ConfigurationException
{
this.getConfiguration().load(file);
}
@Override
public void load(URL url) throws ConfigurationException
{
this.getConfiguration().load(url);
}
@Override
public void load(InputStream in) throws ConfigurationException
{
this.getConfiguration().load(in);
}
@Override
public void load(InputStream in, String encoding) throws ConfigurationException
{
this.getConfiguration().load(in, encoding);
}
@Override
public void save() throws ConfigurationException
{
this.getConfiguration().save();
}
@Override
public void save(String fileName) throws ConfigurationException
{
this.getConfiguration().save(fileName);
}
@Override
public void save(File file) throws ConfigurationException
{
this.getConfiguration().save(file);
}
@Override
public void save(URL url) throws ConfigurationException
{
this.getConfiguration().save(url);
}
@Override
public void save(OutputStream out) throws ConfigurationException
{
this.getConfiguration().save(out);
}
@Override
public void save(OutputStream out, String encoding) throws ConfigurationException
{
this.getConfiguration().save(out, encoding);
}
@Override
public void configurationChanged(ConfigurationEvent event)
{
if (event.getSource() instanceof XMLConfiguration)
{
for (ConfigurationListener listener : getConfigurationListeners())
{
listener.configurationChanged(event);
}
}
}
@Override
public void configurationError(ConfigurationErrorEvent event)
{
if (event.getSource() instanceof XMLConfiguration)
{
for (ConfigurationErrorListener listener : getErrorListeners())
{
listener.configurationError(event);
}
}
if (event.getType() == AbstractFileConfiguration.EVENT_RELOAD)
{
if (isThrowable(event.getCause()))
{
throw new ConfigurationRuntimeException(event.getCause());
}
}
}
@Override
protected Object resolveContainerStore(String key)
{
if (recursive.get().booleanValue())
{
return null;
}
recursive.set(Boolean.TRUE);
try
{
return super.resolveContainerStore(key);
}
finally
{
recursive.set(Boolean.FALSE);
}
}
public void removeConfiguration()
{
String path = getSubstitutor().replace(pattern);
configurationsMap.remove(path);
}
private AbstractHierarchicalFileConfiguration getConfiguration()
{
if (pattern == null)
{
throw new ConfigurationRuntimeException(""File pattern must be defined"");
}
String path = localSubst.replace(pattern);
if (configurationsMap.containsKey(path))
{
return configurationsMap.get(path);
}
if (path.equals(pattern))
{
XMLConfiguration configuration = new XMLConfiguration()
{
@Override
public void load() throws ConfigurationException
{
}
@Override
public void save() throws ConfigurationException
{
}
};
configurationsMap.putIfAbsent(pattern, configuration);
return configuration;
}
XMLConfiguration configuration = new XMLConfiguration();
if (loggerName != null)
{
Log log = LogFactory.getLog(loggerName);
if (log != null)
{
configuration.setLogger(log);
}
}
configuration.setBasePath(getBasePath());
configuration.setFileName(path);
configuration.setFileSystem(getFileSystem());
configuration.setExpressionEngine(getExpressionEngine());
ReloadingStrategy strategy = createReloadingStrategy();
if (strategy != null)
{
configuration.setReloadingStrategy(strategy);
}
configuration.setDelimiterParsingDisabled(isDelimiterParsingDisabled());
configuration.setAttributeSplittingDisabled(isAttributeSplittingDisabled());
configuration.setValidating(validating);
configuration.setSchemaValidation(schemaValidation);
configuration.setEntityResolver(entityResolver);
configuration.setListDelimiter(getListDelimiter());
configuration.addConfigurationListener(this);
configuration.addErrorListener(this);
try
{
configuration.load();
}
catch (ConfigurationException ce)
{
if (isThrowable(ce))
{
throw new ConfigurationRuntimeException(ce);
}
}
configurationsMap.putIfAbsent(path, configuration);
return configurationsMap.get(path);
}
private boolean isThrowable(Throwable throwable)
{
if (!ignoreException)
{
return true;
}
Throwable cause = throwable.getCause();
while (cause != null && !(cause instanceof SAXParseException))
{
cause = cause.getCause();
}
return cause != null;
}
private ReloadingStrategy createReloadingStrategy()
{
if (fileStrategy == null)
{
return null;
}
try
{
ReloadingStrategy strategy = (ReloadingStrategy) BeanUtils.cloneBean(fileStrategy);
strategy.setConfiguration(null);
return strategy;
}
catch (Exception ex)
{
return null;
","private ReloadingStrategy createReloadingStrategy() {
if (fileStrategy == null) {
return null;
}
try {
ReloadingStrategy strategy = (ReloadingStrategy) BeanUtils.cloneBean(fileStrategy);
strategy.setConfiguration(null);
return strategy;
} catch (Exception ex) {
return null;
}
}","private ReloadingStrategy createReloadingStrategy() {
if (fileStrategy == null) {
return null;
}
try {
ReloadingStrategy reloadingstrategyVar1 = reloadingstrategyLiteral2;
reloadingstrategyVar1.setConfiguration(null);
return reloadingstrategyVar1;
} catch (Exception ex) {
return null;
}
}"
5306,DODGY_CODE,REC_CATCH_EXCEPTION,FP,configuration,2517,"catch (Exception e)
","static Object toInternetAddress(Object value) throws ConversionException {
if (value.getClass().getName().equals(INTERNET_ADDRESS_CLASSNAME)) {
return value;
} else if (value instanceof String) {
try {
Constructor<?> ctor = Class.forName(INTERNET_ADDRESS_CLASSNAME).getConstructor(new Class[] { String.class });
return ctor.newInstance(new Object[] { value });
} catch (Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"", e);
}
} else {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"");
}
}","static Object toInternetAddress(Object value) throws ConversionException {
if (value.getClass().getName().equals(INTERNET_ADDRESS_CLASSNAME)) {
return value;
} else if (value instanceof String) {
try {
Constructor<?> constructor<?>Var1 = constructor<?>Literal2;
return constructor<?>Var1.newInstance(new Object[] { value });
} catch (Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"", e);
}
} else {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"");
}
}"
5308,PERFORMANCE,DM_NUMBER_CTOR,FP,configuration,2519,"return new Byte(n.byteValue());
","public static Byte toByte(Object value) throws ConversionException {
Number n = toNumber(value, Byte.class);
if (n instanceof Byte) {
return (Byte) n;
} else {
return new Byte(n.byteValue());
}
}","public static Byte toByte(Object value) throws ConversionException {
Number numberVar1 = numberLiteral2;
if (numberVar1 instanceof Byte) {
return (Byte) numberVar1;
} else {
return new Byte(numberVar1.byteValue());
}
}"
5310,PERFORMANCE,DM_FP_NUMBER_CTOR,FP,configuration,2521,"return new Double(n.doubleValue());
","public static Double toDouble(Object value) throws ConversionException {
Number n = toNumber(value, Double.class);
if (n instanceof Double) {
return (Double) n;
} else {
return new Double(n.doubleValue());
}
}","public static Double toDouble(Object value) throws ConversionException {
Number numberVar1 = numberLiteral2;
if (numberVar1 instanceof Double) {
return (Double) numberVar1;
} else {
return new Double(numberVar1.doubleValue());
}
}"
5312,I18N,DM_CONVERT_CASE,FP,configuration,2523,"String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
return;
}
}","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String stringVar1 = stringLiteral2;
Class<?>[] class<?>ArrayVar3 = class<?>ArrayLiteral4;
class<?>ArrayVar3[0] = FileSystemOptions.class;
class<?>ArrayVar3[1] = value.getClass();
try {
Method methodVar5 = methodLiteral6;
Object[] objectArrayVar7 = objectArrayLiteral8;
objectArrayVar7[0] = options;
objectArrayVar7[1] = value;
methodVar5.invoke(builder, objectArrayVar7);
} catch (Exception ex) {
return;
}
}"
5316,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,configuration,2527,"catch (Exception ex)
","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
return;
}
}","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String stringVar1 = stringLiteral2;
Class<?>[] class<?>ArrayVar3 = class<?>ArrayLiteral4;
class<?>ArrayVar3[0] = FileSystemOptions.class;
class<?>ArrayVar3[1] = value.getClass();
try {
Method methodVar5 = methodLiteral6;
Object[] objectArrayVar7 = objectArrayLiteral8;
objectArrayVar7[0] = options;
objectArrayVar7[1] = value;
methodVar5.invoke(builder, objectArrayVar7);
} catch (Exception ex) {
return;
}
}"
5318,BAD_PRACTICE,SE_INNER_CLASS,FP,configuration,2529,"{
super(name);
setReference(elem);
}
@Override
public void setValue(Object value)
{
super.setValue(value);
if (getReference() != null && document != null)
{
if (isAttribute())
{
updateAttribute();
}
else
{
updateElement(value);
}
}
}
@Override
protected void removeReference()
{
if (getReference() != null)
{
Element element = (Element) getReference();
if (isAttribute())
{
updateAttribute();
}
else
{
org.w3c.dom.Node parentElem = element.getParentNode();
if (parentElem != null)
{
parentElem.removeChild(element);
}
}
}
}
private void updateElement(Object value)
{
Text txtNode = findTextNodeForUpdate();
if (value == null)
{
if (txtNode != null)
{
((Element) getReference()).removeChild(txtNode);
}
}
else
{
if (txtNode == null)
{
String newValue = isDelimiterParsingDisabled() ? value.toString()
: PropertyConverter.escapeDelimiters(value.toString(), getListDelimiter());
txtNode = document.createTextNode(newValue);
if (((Element) getReference()).getFirstChild() != null)
{
((Element) getReference()).insertBefore(txtNode,
((Element) getReference()).getFirstChild());
}
else
{
((Element) getReference()).appendChild(txtNode);
}
}
else
{
String newValue = isDelimiterParsingDisabled() ? value.toString()
: PropertyConverter.escapeDelimiters(value.toString(), getListDelimiter());
txtNode.setNodeValue(newValue);
}
}
}
private void updateAttribute()
{
XMLBuilderVisitor.updateAttribute(getParent(), getName(), getListDelimiter(),
isAttributeSplittingDisabled());
}
private Text findTextNodeForUpdate()
{
Text result = null;
Element elem = (Element) getReference();
NodeList children = elem.getChildNodes();
Collection<org.w3c.dom.Node> textNodes = new ArrayList<org.w3c.dom.Node>();
for (int i = 0; i < children.getLength(); i++)
{
org.w3c.dom.Node nd = children.item(i);
if (nd instanceof Text)
{
if (result == null)
{
result = (Text) nd;
}
else
{
textNodes.add(nd);
}
}
}
if (result instanceof CDATASection)
{
textNodes.add(result);
result = null;
}
for (org.w3c.dom.Node tn : textNodes)
{
elem.removeChild(tn);
}
return result;
",private EntityResolver entityResolver = new DefaultEntityResolver();,private EntityResolver entityresolverVar1 = entityresolverLiteral2;
5320,PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,configuration,2531,"{
@Override
public void error(SAXParseException ex) throws SAXException
{
throw ex;
","private XMLNode convertToXMLNode(ConfigurationNode node) {
if (node instanceof XMLNode) {
return (XMLNode) node;
}
XMLNode nd = (XMLNode) createNode(node.getName());
nd.setValue(node.getValue());
nd.setAttribute(node.isAttribute());
for (ConfigurationNode child : node.getChildren()) {
nd.addChild(convertToXMLNode(child));
}
for (ConfigurationNode attr : node.getAttributes()) {
nd.addAttribute(convertToXMLNode(attr));
}
return nd;
}","private XMLNode convertToXMLNode(ConfigurationNode node) {
if (node instanceof XMLNode) {
return (XMLNode) node;
}
XMLNode xmlnodeVar1 = xmlnodeLiteral2;
xmlnodeVar1.setValue(node.getValue());
xmlnodeVar1.setAttribute(node.isAttribute());
for (ConfigurationNode configurationnodeVar3 : node.getChildren()) {
xmlnodeVar1.addChild(convertToXMLNode(configurationnodeVar3));
}
for (ConfigurationNode configurationnodeVar4 : node.getAttributes()) {
xmlnodeVar1.addAttribute(convertToXMLNode(configurationnodeVar4));
}
return xmlnodeVar1;
}"
5322,DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,FP,configuration,2533,"String encoding = getEncoding() != null ? getEncoding() : DEFAULT_ENCODING;
","@Override
public void save(Writer out) throws ConfigurationException {
PrintWriter writer = new PrintWriter(out);
String encoding = getEncoding() != null ? getEncoding() : DEFAULT_ENCODING;
writer.println(""<?xml version=\""1.0\"" encoding=\"""" + encoding + ""\""?>"");
writer.println(""<!DOCTYPE properties SYSTEM \""http://java.sun.com/dtd/properties.dtd\"">"");
writer.println(""<properties>"");
if (getHeader() != null) {
writer.println(""  <comment>"" + StringEscapeUtils.escapeXml(getHeader()) + ""</comment>"");
}
Iterator<String> keys = getKeys();
while (keys.hasNext()) {
String key = keys.next();
Object value = getProperty(key);
if (value instanceof List) {
writeProperty(writer, key, (List<?>) value);
} else {
writeProperty(writer, key, value);
}
}
writer.println(""</properties>"");
writer.flush();
}","@Override
public void save(Writer out) throws ConfigurationException {
PrintWriter printwriterVar1 = printwriterLiteral2;
String stringVar3 = stringLiteral4;
printwriterVar1.println(""<?xml version=\""1.0\"" encoding=\"""" + stringVar3 + ""\""?>"");
printwriterVar1.println(""<!DOCTYPE properties SYSTEM \""http://java.sun.com/dtd/properties.dtd\"">"");
printwriterVar1.println(""<properties>"");
if (getHeader() != null) {
printwriterVar1.println(""  <comment>"" + StringEscapeUtils.escapeXml(getHeader()) + ""</comment>"");
}
Iterator<String> iterator<string>Var5 = iterator<string>Literal6;
while (iterator<string>Var5.hasNext()) {
String stringVar7 = stringLiteral8;
Object objectVar9 = objectLiteral10;
if (objectVar9 instanceof List) {
writeProperty(printwriterVar1, stringVar7, (List<?>) objectVar9);
} else {
writeProperty(printwriterVar1, stringVar7, objectVar9);
}
}
printwriterVar1.println(""</properties>"");
printwriterVar1.flush();
}"
5324,DODGY_CODE,REC_CATCH_EXCEPTION,FP,configuration,2535,"catch (Exception e)
","@Override
public void load(Reader in) throws ConfigurationException {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setNamespaceAware(false);
factory.setValidating(true);
try {
SAXParser parser = factory.newSAXParser();
XMLReader xmlReader = parser.getXMLReader();
xmlReader.setEntityResolver(new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlReader.setContentHandler(new XMLPropertiesHandler());
xmlReader.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
// todo: support included properties ?
}","@Override
public void load(Reader in) throws ConfigurationException {
SAXParserFactory saxparserfactoryVar1 = saxparserfactoryLiteral2;
saxparserfactoryVar1.setNamespaceAware(false);
saxparserfactoryVar1.setValidating(true);
try {
SAXParser saxparserVar3 = saxparserLiteral4;
XMLReader xmlreaderVar5 = xmlreaderLiteral6;
xmlreaderVar5.setEntityResolver(new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlreaderVar5.setContentHandler(new XMLPropertiesHandler());
xmlreaderVar5.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
// todo: support included properties ?
}"
5327,DODGY_CODE,REC_CATCH_EXCEPTION,FP,configuration,2538,"catch (Exception e)
","public void setValue(Object value) throws ConfigurationRuntimeException {
try {
if (!(value instanceof String)) {
this.value = value;
return;
}
String val = (String) value;
String name = StringUtils.removeStartIgnoreCase(val, CLASS);
Class<?> clazz = ClassUtils.getClass(name);
if (name.length() == val.length()) {
this.value = clazz.newInstance();
} else {
this.value = clazz;
}
} catch (Exception e) {
throw new ConfigurationRuntimeException(""Unable to create "" + value, e);
}
}","public void setValue(Object value) throws ConfigurationRuntimeException {
try {
if (!(value instanceof String)) {
this.value = value;
return;
}
String stringVar1 = stringLiteral2;
String stringVar3 = stringLiteral4;
Class<?> class<?>Var5 = class<?>Literal6;
if (stringVar3.length() == stringVar1.length()) {
this.value = class<?>Var5.newInstance();
} else {
this.value = class<?>Var5;
}
} catch (Exception e) {
throw new ConfigurationRuntimeException(""Unable to create "" + value, e);
}
}"
5329,I18N,DM_DEFAULT_ENCODING,FP,configuration,2540,"String base64 = new String(Base64.encodeBase64((byte[]) value));
","private void printValue(PrintWriter out, int indentLevel, Object value) {
String padding = StringUtils.repeat("" "", indentLevel * INDENT_SIZE);
if (value instanceof Date) {
synchronized (PListNode.format) {
out.println(padding + ""<date>"" + PListNode.format.format((Date) value) + ""</date>"");
}
} else if (value instanceof Calendar) {
printValue(out, indentLevel, ((Calendar) value).getTime());
} else if (value instanceof Number) {
if (value instanceof Double || value instanceof Float || value instanceof BigDecimal) {
out.println(padding + ""<real>"" + value.toString() + ""</real>"");
} else {
out.println(padding + ""<integer>"" + value.toString() + ""</integer>"");
}
} else if (value instanceof Boolean) {
if (((Boolean) value).booleanValue()) {
out.println(padding + ""<true/>"");
} else {
out.println(padding + ""<false/>"");
}
} else if (value instanceof List) {
out.println(padding + ""<array>"");
Iterator<?> it = ((List<?>) value).iterator();
while (it.hasNext()) {
printValue(out, indentLevel + 1, it.next());
}
out.println(padding + ""</array>"");
} else if (value instanceof HierarchicalConfiguration) {
printNode(out, indentLevel, ((HierarchicalConfiguration) value).getRoot());
} else if (value instanceof Configuration) {
out.println(padding + ""<dict>"");
Configuration config = (Configuration) value;
Iterator<String> it = config.getKeys();
while (it.hasNext()) {
String key = it.next();
Node node = new Node(key);
node.setValue(config.getProperty(key));
printNode(out, indentLevel + 1, node);
if (it.hasNext()) {
out.println();
}
}
out.println(padding + ""</dict>"");
} else if (value instanceof Map) {
Map<String, Object> map = transformMap((Map<?, ?>) value);
;
printValue(out, indentLevel, new MapConfiguration(map));
} else if (value instanceof byte[]) {
String base64 = new String(Base64.encodeBase64((byte[]) value));
out.println(padding + ""<data>"" + StringEscapeUtils.escapeXml(base64) + ""</data>"");
} else if (value != null) {
out.println(padding + ""<string>"" + StringEscapeUtils.escapeXml(String.valueOf(value)) + ""</string>"");
} else {
out.println(padding + ""<string/>"");
}
}","private void printValue(PrintWriter out, int indentLevel, Object value) {
String stringVar1 = stringLiteral2;
if (value instanceof Date) {
synchronized (PListNode.format) {
out.println(stringVar1 + ""<date>"" + PListNode.format.format((Date) value) + ""</date>"");
}
} else if (value instanceof Calendar) {
printValue(out, indentLevel, ((Calendar) value).getTime());
} else if (value instanceof Number) {
if (value instanceof Double || value instanceof Float || value instanceof BigDecimal) {
out.println(stringVar1 + ""<real>"" + value.toString() + ""</real>"");
} else {
out.println(stringVar1 + ""<integer>"" + value.toString() + ""</integer>"");
}
} else if (value instanceof Boolean) {
if (((Boolean) value).booleanValue()) {
out.println(stringVar1 + ""<true/>"");
} else {
out.println(stringVar1 + ""<false/>"");
}
} else if (value instanceof List) {
out.println(stringVar1 + ""<array>"");
Iterator<?> iterator<?>Var3 = iterator<?>Literal4;
while (iterator<?>Var3.hasNext()) {
printValue(out, indentLevel + 1, iterator<?>Var3.next());
}
out.println(stringVar1 + ""</array>"");
} else if (value instanceof HierarchicalConfiguration) {
printNode(out, indentLevel, ((HierarchicalConfiguration) value).getRoot());
} else if (value instanceof Configuration) {
out.println(stringVar1 + ""<dict>"");
Configuration configurationVar5 = configurationLiteral6;
Iterator<String> iterator<?>Var3 = iterator<string>Literal7;
while (iterator<?>Var3.hasNext()) {
String stringVar8 = stringLiteral9;
Node nodeVar10 = nodeLiteral11;
nodeVar10.setValue(configurationVar5.getProperty(stringVar8));
printNode(out, indentLevel + 1, nodeVar10);
if (iterator<?>Var3.hasNext()) {
out.println();
}
}
out.println(stringVar1 + ""</dict>"");
} else if (value instanceof Map) {
Map<String, Object> map<string,object>Var12 = map<string,object>Literal13;
;
printValue(out, indentLevel, new MapConfiguration(map<string,object>Var12));
} else if (value instanceof byte[]) {
String stringVar14 = stringLiteral15;
out.println(stringVar1 + ""<data>"" + StringEscapeUtils.escapeXml(stringVar14) + ""</data>"");
} else if (value != null) {
out.println(stringVar1 + ""<string>"" + StringEscapeUtils.escapeXml(String.valueOf(value)) + ""</string>"");
} else {
out.println(stringVar1 + ""<string/>"");
}
}"
5331,PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,configuration,2542,"{
public InputSource resolveEntity(String publicId, String systemId)
{
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
","public void load(Reader in) throws ConfigurationException {
if (!(getRootNode() instanceof PListNode)) {
initRoot();
}
EntityResolver resolver = new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
};
XMLPropertyListHandler handler = new XMLPropertyListHandler(getRoot());
try {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}","public void load(Reader in) throws ConfigurationException {
if (!(getRootNode() instanceof PListNode)) {
initRoot();
}
EntityResolver entityresolverVar1 = entityresolverLiteral2;
XMLPropertyListHandler xmlpropertylisthandlerVar3 = xmlpropertylisthandlerLiteral4;
try {
SAXParserFactory saxparserfactoryVar5 = saxparserfactoryLiteral6;
saxparserfactoryVar5.setValidating(true);
SAXParser saxparserVar7 = saxparserLiteral8;
saxparserVar7.getXMLReader().setEntityResolver(entityresolverVar1);
saxparserVar7.getXMLReader().setContentHandler(xmlpropertylisthandlerVar3);
saxparserVar7.getXMLReader().parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}"
5332,DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,FP,configuration,2543,"if (name == null)
","private String getName(File file) {
String name = configuration.getURL().toString();
if (name == null) {
if (file != null) {
name = file.getAbsolutePath();
} else {
name = ""base: "" + configuration.getBasePath() + ""file: "" + configuration.getFileName();
}
}
return name;
}","private String getName(File file) {
String stringVar1 = stringLiteral2;
if (stringVar1 == null) {
if (file != null) {
stringVar1 = file.getAbsolutePath();
} else {
stringVar1 = ""base: "" + configuration.getBasePath() + ""file: "" + configuration.getFileName();
}
}
return stringVar1;
}"
5333,CORRECTNESS,RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE,FP,configuration,2544,"if (configuration.getURL() == null && configuration.getFileName() == null)
","public void init() {
if (configuration.getURL() == null && configuration.getFileName() == null) {
return;
}
if (this.configuration == null) {
throw new IllegalStateException(""No configuration has been set for this strategy"");
}
updateLastModified();
}","public void init() {
if (configuration.getURL() == null && configuration.getFileName() == null) {
return;
}
if (this.configuration == null) {
throw new IllegalStateException(""No configuration has been set for this strategy"");
}
updateLastModified();
}"
5334,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,configuration,2545,"StrSubstitutor substitutor = ((CatalogManager) catalogManager).getStrSubstitutor();
","@Override
protected String normalizeURI(String uriref) {
StrSubstitutor substitutor = ((CatalogManager) catalogManager).getStrSubstitutor();
String resolved = substitutor != null ? substitutor.replace(uriref) : uriref;
return super.normalizeURI(resolved);
}","@Override
protected String normalizeURI(String uriref) {
StrSubstitutor strsubstitutorVar1 = strsubstitutorLiteral2;
String stringVar3 = stringLiteral4;
return super.normalizeURI(stringVar3);
}"
5339,DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,configuration,2550,"List<ConfigurationNode> lst = namedNodes.remove(name);
","public boolean removeNodes(String name) {
if (nodes != null && name != null) {
List<ConfigurationNode> lst = namedNodes.remove(name);
if (lst != null) {
detachNodes(lst);
nodes.removeAll(lst);
return true;
}
}
return false;
}","public boolean removeNodes(String name) {
if (nodes != null && name != null) {
List<ConfigurationNode> list<configurationnode>Var1 = list<configurationnode>Literal2;
if (list<configurationnode>Var1 != null) {
detachNodes(list<configurationnode>Var1);
nodes.removeAll(list<configurationnode>Var1);
return true;
}
}
return false;
}"
5342,DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,configuration,2553,"return reverse ? getStartOffset() + 1 : subNodes.size()
","protected int getMaxPosition() {
return reverse ? getStartOffset() + 1 : subNodes.size() - getStartOffset();
}","protected int getMaxPosition() {
return reverse ? getStartOffset() + 1 : subNodes.size() - getStartOffset();
}"
5359,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,configuration,2570,"final ReferenceNodeHandler refHandler = (ReferenceNodeHandler) handler;
","@Override
public void visitBeforeChildren(final ImmutableNode node, final NodeHandler<ImmutableNode> handler) {
final ReferenceNodeHandler refHandler = (ReferenceNodeHandler) handler;
updateNode(node, refHandler);
insertNewChildNodes(node, refHandler);
}","@Override
public void visitBeforeChildren(final ImmutableNode node, final NodeHandler<ImmutableNode> handler) {
final ReferenceNodeHandler referencenodehandlerVar1 = referencenodehandlerLiteral2;
updateNode(node, referencenodehandlerVar1);
insertNewChildNodes(node, referencenodehandlerVar1);
}"
5363,I18N,DM_DEFAULT_ENCODING,FP,configuration,2574,"dump(configuration, new PrintWriter(out));
","public static void dump(final ImmutableConfiguration configuration, final PrintStream out) {
dump(configuration, new PrintWriter(out));
}","public static void dump(final ImmutableConfiguration configuration, final PrintStream out) {
dump(configuration, new PrintWriter(out));
}"
5386,PERFORMANCE,URF_UNREAD_FIELD,FP,configuration,2597,private final String protocol;,private final String protocol;,private final String stringVar1;
5388,DODGY_CODE,REC_CATCH_EXCEPTION,FP,configuration,2599,"catch (final Exception ex)
","private FileSystemOptions getOptions(final String scheme) {
final FileSystemOptions opts = new FileSystemOptions();
FileSystemConfigBuilder builder;
try {
builder = VFS.getManager().getFileSystemConfigBuilder(scheme);
} catch (final Exception ex) {
return null;
}
final FileOptionsProvider provider = getFileOptionsProvider();
if (provider != null) {
final Map<String, Object> map = provider.getOptions();
if (map == null) {
return null;
}
int count = 0;
for (final Map.Entry<String, Object> entry : map.entrySet()) {
try {
String key = entry.getKey();
if (FileOptionsProvider.CURRENT_USER.equals(key)) {
key = ""creatorName"";
}
setProperty(builder, opts, key, entry.getValue());
++count;
} catch (final Exception ex) {
continue;
}
}
if (count > 0) {
return opts;
}
}
return null;
}","private FileSystemOptions getOptions(final String scheme) {
final FileSystemOptions filesystemoptionsVar1 = filesystemoptionsLiteral2;
FileSystemConfigBuilder filesystemconfigbuilderVar3;
try {
filesystemconfigbuilderVar3 = VFS.getManager().getFileSystemConfigBuilder(scheme);
} catch (final Exception ex) {
return null;
}
final FileOptionsProvider fileoptionsproviderVar4 = fileoptionsproviderLiteral5;
if (fileoptionsproviderVar4 != null) {
final Map<String, Object> map<string,object>Var6 = map<string,object>Literal7;
if (map<string,object>Var6 == null) {
return null;
}
int intVar8 = intLiteral9;
for (final Map.Entry<String, Object> map.entry<string,object>Var10 : map<string,object>Var6.entrySet()) {
try {
String stringVar11 = stringLiteral12;
if (FileOptionsProvider.CURRENT_USER.equals(stringVar11)) {
stringVar11 = ""creatorName"";
}
setProperty(filesystemconfigbuilderVar3, filesystemoptionsVar1, stringVar11, map.entry<string,object>Var10.getValue());
++intVar8;
} catch (final Exception ex) {
continue;
}
}
if (intVar8 > 0) {
return filesystemoptionsVar1;
}
}
return null;
}"
5390,PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,configuration,2601,"{
@Override
public InputSource resolveEntity(final String publicId, final String systemId)
{
return new InputSource(getClass().getClassLoader()
.getResourceAsStream(""PropertyList-1.0.dtd""));
","@Override
public void read(final Reader in) throws ConfigurationException {
final EntityResolver resolver = new EntityResolver() {
@Override
public InputSource resolveEntity(final String publicId, final String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
};
final XMLPropertyListHandler handler = new XMLPropertyListHandler();
try {
final SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
final SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
getNodeModel().mergeRoot(handler.getResultBuilder().createNode(), null, null, null, this);
} catch (final Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}","@Override
public void read(final Reader in) throws ConfigurationException {
final EntityResolver entityresolverVar1 = entityresolverLiteral2;
final XMLPropertyListHandler xmlpropertylisthandlerVar3 = xmlpropertylisthandlerLiteral4;
try {
final SAXParserFactory saxparserfactoryVar5 = saxparserfactoryLiteral6;
saxparserfactoryVar5.setValidating(true);
final SAXParser saxparserVar7 = saxparserLiteral8;
saxparserVar7.getXMLReader().setEntityResolver(entityresolverVar1);
saxparserVar7.getXMLReader().setContentHandler(xmlpropertylisthandlerVar3);
saxparserVar7.getXMLReader().parse(new InputSource(in));
getNodeModel().mergeRoot(xmlpropertylisthandlerVar3.getResultBuilder().createNode(), null, null, null, this);
} catch (final Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}"
5392,DODGY_CODE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,FP,configuration,2603,"staticCatalog = catalog;
","@Override
public org.apache.xml.resolver.Catalog getPrivateCatalog() {
org.apache.xml.resolver.Catalog catalog = staticCatalog;
if (catalog == null || !getUseStaticCatalog()) {
try {
catalog = new Catalog();
catalog.setCatalogManager(this);
catalog.setupReaders();
catalog.loadSystemCatalogs();
} catch (final Exception ex) {
ex.printStackTrace();
}
if (getUseStaticCatalog()) {
staticCatalog = catalog;
}
}
return catalog;
}","@Override
public org.apache.xml.resolver.Catalog getPrivateCatalog() {
org.apache.xml.resolver.Catalog org.apache.xml.resolver.catalogVar1 = org.apache.xml.resolver.catalogLiteral2;
if (org.apache.xml.resolver.catalogVar1 == null || !getUseStaticCatalog()) {
try {
org.apache.xml.resolver.catalogVar1 = new Catalog();
org.apache.xml.resolver.catalogVar1.setCatalogManager(this);
org.apache.xml.resolver.catalogVar1.setupReaders();
org.apache.xml.resolver.catalogVar1.loadSystemCatalogs();
} catch (final Exception ex) {
ex.printStackTrace();
}
if (getUseStaticCatalog()) {
staticCatalog = org.apache.xml.resolver.catalogVar1;
}
}
return org.apache.xml.resolver.catalogVar1;
}"
5393,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,configuration,2604,"fs = ((CatalogManager) catalogManager).getFileSystem();
","@Override
public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
final String base = ((CatalogManager) catalogManager).getBaseDir();
@SuppressWarnings(""unchecked"")
final Vector<String> catalogs = catalogManager.getCatalogFiles();
if (catalogs != null) {
for (int count = 0; count < catalogs.size(); count++) {
final String fileName = catalogs.elementAt(count);
URL url = null;
InputStream is = null;
try {
url = locate(fs, base, fileName);
if (url != null) {
is = fs.getInputStream(url);
}
} catch (final ConfigurationException ce) {
final String name = url.toString();
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + name + "". "" + ce.getMessage());
}
if (is != null) {
final String mimeType = fileNameMap.getContentTypeFor(fileName);
try {
if (mimeType != null) {
parseCatalog(mimeType, is);
continue;
}
} catch (final Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + fileName + "". "" + ex.getMessage());
} finally {
is.close();
}
}
parseCatalog(base, fileName);
}
}
}","@Override
public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
final String stringVar1 = stringLiteral2;
@SuppressWarnings(""unchecked"")
final Vector<String> vector<string>Var3 = vector<string>Literal4;
if (vector<string>Var3 != null) {
for (int intVar16 = intLiteral17; intVar5 < intLiteral1; intVar5++) {
final String stringVar7 = stringLiteral8;
URL urlVar9 = urlLiteral10;
InputStream inputstreamVar11 = urlLiteral10;
try {
urlVar9 = locate(fs, stringVar1, stringVar7);
if (urlVar9 != null) {
inputstreamVar11 = fs.getInputStream(urlVar9);
}
} catch (final ConfigurationException ce) {
final String stringVar12 = stringLiteral13;
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + stringVar12 + "". "" + ce.getMessage());
}
if (inputstreamVar11 != null) {
final String stringVar14 = stringLiteral15;
try {
if (stringVar14 != null) {
parseCatalog(stringVar14, inputstreamVar11);
continue;
}
} catch (final Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + stringVar7 + "". "" + ex.getMessage());
} finally {
inputstreamVar11.close();
}
}
parseCatalog(stringVar1, stringVar7);
}
}
}"
5399,BAD_PRACTICE,SE_BAD_FIELD,FP,configuration,2610,private final QueryResult<T> attributeResult;,private final QueryResult<T> attributeResult;,private final QueryResult<T> queryresult<t>Var1;
5401,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,configuration,2612,"return new ConfigurationNodePointer((ConfigurationNodePointer) parent,
","@Override
@SuppressWarnings(""unchecked"")
public NodePointer createNodePointer(final NodePointer parent, final QName name, final Object bean) {
if (bean instanceof NodeWrapper) {
final NodeWrapper<?> wrapper = (NodeWrapper<?>) bean;
return new ConfigurationNodePointer((ConfigurationNodePointer) parent, wrapper.getNode(), wrapper.getNodeHandler());
}
return null;
}","@Override
@SuppressWarnings(""unchecked"")
public NodePointer createNodePointer(final NodePointer parent, final QName name, final Object bean) {
if (bean instanceof NodeWrapper) {
final NodeWrapper<?> nodewrapper<?>Var1 = nodewrapper<?>Literal2;
return new ConfigurationNodePointer((ConfigurationNodePointer) parent, nodewrapper<?>Var1.getNode(), nodewrapper<?>Var1.getNodeHandler());
}
return null;
}"
5410,I18N,DM_DEFAULT_ENCODING,FP,configuration,2621,"reader = new InputStreamReader(in);
","public void load(InputStream in, String encoding) throws ConfigurationException {
Reader reader = null;
if (encoding != null) {
try {
reader = new InputStreamReader(in, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (reader == null) {
reader = new InputStreamReader(in);
}
load(reader);
}","public void load(InputStream in, String encoding) throws ConfigurationException {
Reader readerVar1 = readerLiteral2;
if (encoding != null) {
try {
readerVar1 = new InputStreamReader(in, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (readerVar1 == null) {
readerVar1 = new InputStreamReader(in);
}
load(readerVar1);
}"
5411,I18N,DM_DEFAULT_ENCODING,FP,configuration,2622,"writer = new OutputStreamWriter(out);
","public void save(OutputStream out, String encoding) throws ConfigurationException {
Writer writer = null;
if (encoding != null) {
try {
writer = new OutputStreamWriter(out, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (writer == null) {
writer = new OutputStreamWriter(out);
}
save(writer);
}","public void save(OutputStream out, String encoding) throws ConfigurationException {
Writer writerVar1 = writerLiteral2;
if (encoding != null) {
try {
writerVar1 = new OutputStreamWriter(out, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (writerVar1 == null) {
writerVar1 = new OutputStreamWriter(out);
}
save(writerVar1);
}"
5419,DODGY_CODE,RI_REDUNDANT_INTERFACES,FP,configuration,2630,"public class CombinedConfiguration extends HierarchicalConfiguration implements
ConfigurationListener, Cloneable
{
public static final int EVENT_COMBINED_INVALIDATE = 40;
private static final long serialVersionUID = 8338574525528692307L;
private static final DefaultExpressionEngine AT_ENGINE = new DefaultExpressionEngine();
private static final NodeCombiner DEFAULT_COMBINER = new UnionCombiner();
private static final String PROP_RELOAD_CHECK = ""CombinedConfigurationReloadCheck"";
private NodeCombiner nodeCombiner;
private ConfigurationNode combinedRoot;
private List<ConfigData> configurations;
private Map<String, Configuration> namedConfigurations;
private boolean forceReloadCheck;
public CombinedConfiguration(NodeCombiner comb)
{
setNodeCombiner((comb != null) ? comb : DEFAULT_COMBINER);
clear();
}
public CombinedConfiguration()
{
this(null);
}
public NodeCombiner getNodeCombiner()
{
return nodeCombiner;
}
public void setNodeCombiner(NodeCombiner nodeCombiner)
{
if (nodeCombiner == null)
{
throw new IllegalArgumentException(
""Node combiner must not be null!"");
}
this.nodeCombiner = nodeCombiner;
invalidate();
}
public boolean isForceReloadCheck()
{
return forceReloadCheck;
}
public void setForceReloadCheck(boolean forceReloadCheck)
{
this.forceReloadCheck = forceReloadCheck;
}
public void addConfiguration(AbstractConfiguration config, String name,
String at)
{
if (config == null)
{
throw new IllegalArgumentException(
""Added configuration must not be null!"");
}
if (name != null && namedConfigurations.containsKey(name))
{
throw new ConfigurationRuntimeException(
""A configuration with the name '""
+ name
+ ""' already exists in this combined configuration!"");
}
ConfigData cd = new ConfigData(config, name, at);
configurations.add(cd);
if (name != null)
{
namedConfigurations.put(name, config);
}
config.addConfigurationListener(this);
invalidate();
}
public void addConfiguration(AbstractConfiguration config, String name)
{
addConfiguration(config, name, null);
}
public void addConfiguration(AbstractConfiguration config)
{
addConfiguration(config, null, null);
}
public int getNumberOfConfigurations()
{
return configurations.size();
}
public Configuration getConfiguration(int index)
{
ConfigData cd = configurations.get(index);
return cd.getConfiguration();
}
public Configuration getConfiguration(String name)
{
return namedConfigurations.get(name);
}
public List<AbstractConfiguration> getConfigurations()
{
List<AbstractConfiguration> list = new ArrayList<AbstractConfiguration>();
for (ConfigData config : configurations)
{
list.add(config.getConfiguration());
}
return list;
}
public List<String> getConfigurationNameList()
{
List<String> list = new ArrayList<String>();
for (ConfigData config : configurations)
{
list.add(config.getName());
}
return list;
}
public boolean removeConfiguration(Configuration config)
{
for (int index = 0; index < getNumberOfConfigurations(); index++)
{
if ((configurations.get(index)).getConfiguration() == config)
{
removeConfigurationAt(index);
return true;
}
}
return false;
}
public Configuration removeConfigurationAt(int index)
{
ConfigData cd = configurations.remove(index);
if (cd.getName() != null)
{
namedConfigurations.remove(cd.getName());
}
cd.getConfiguration().removeConfigurationListener(this);
invalidate();
return cd.getConfiguration();
}
public Configuration removeConfiguration(String name)
{
Configuration conf = getConfiguration(name);
if (conf != null)
{
removeConfiguration(conf);
}
return conf;
}
public Set<String> getConfigurationNames()
{
return namedConfigurations.keySet();
}
public void invalidate()
{
synchronized (getNodeCombiner()) 
{
combinedRoot = null;
}
fireEvent(EVENT_COMBINED_INVALIDATE, null, null, false);
}
public void configurationChanged(ConfigurationEvent event)
{
if (event.getType() == AbstractFileConfiguration.EVENT_CONFIG_CHANGED)
{
fireEvent(event.getType(), event.getPropertyName(), event.getPropertyValue(), event.isBeforeUpdate());
}
else if (!event.isBeforeUpdate())
{
invalidate();
}
}
public ConfigurationNode getRootNode()
{
synchronized (getNodeCombiner())
{
if (combinedRoot == null)
{
combinedRoot = constructCombinedNode();
}
return combinedRoot;
}
}
public void clear()
{
fireEvent(EVENT_CLEAR, null, null, true);
configurations = new ArrayList<ConfigData>();
namedConfigurations = new HashMap<String, Configuration>();
fireEvent(EVENT_CLEAR, null, null, false);
invalidate();
}
public Object clone()
{
CombinedConfiguration copy = (CombinedConfiguration) super.clone();
copy.clear();
for (ConfigData cd : configurations)
{
copy.addConfiguration((AbstractConfiguration) ConfigurationUtils
.cloneConfiguration(cd.getConfiguration()), cd.getName(),
cd.getAt());
}
copy.setRootNode(new DefaultConfigurationNode());
return copy;
}
public Object getProperty(String key)
{
if (isForceReloadCheck())
{
for (ConfigData cd : configurations)
{
try
{
cd.getConfiguration().getProperty(PROP_RELOAD_CHECK);
}
catch (Exception ex)
{
;
}
}
}
return super.getProperty(key);
}
public Configuration getSource(String key)
{
if (key == null)
{
throw new IllegalArgumentException(""Key must not be null!"");
}
List<ConfigurationNode> nodes = fetchNodeList(key);
if (nodes.isEmpty())
{
return null;
}
Iterator<ConfigurationNode> it = nodes.iterator();
Configuration source = findSourceConfiguration(it.next());
while (it.hasNext())
{
Configuration src = findSourceConfiguration(it.next());
if (src != source)
{
throw new IllegalArgumentException(""The key "" + key + "" is defined by multiple sources!"");
}
}
return source;
}
private ConfigurationNode constructCombinedNode()
{
if (getNumberOfConfigurations() < 1)
{
return new ViewNode();
}
else
{
Iterator<ConfigData> it = configurations.iterator();
ConfigurationNode node = it.next().getTransformedRoot();
while (it.hasNext())
{
node = getNodeCombiner().combine(node, it.next().getTransformedRoot());
}
if (getLogger().isLoggable(Level.FINEST))
{
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().finest(os.toString());
}
return node;
}
}
private Configuration findSourceConfiguration(ConfigurationNode node)
{
ConfigurationNode root = null;
ConfigurationNode current = node;
while (current != null)
{
root = current;
current = current.getParentNode();
}
for (ConfigData cd : configurations)
{
if (root == cd.getRootNode())
{
return cd.getConfiguration();
}
}
return this;
","private ConfigurationNode constructCombinedNode() {
if (getNumberOfConfigurations() < 1) {
return new ViewNode();
} else {
Iterator<ConfigData> it = configurations.iterator();
ConfigurationNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = getNodeCombiner().combine(node, it.next().getTransformedRoot());
}
if (getLogger().isLoggable(Level.FINEST)) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().finest(os.toString());
}
return node;
}
}","private ConfigurationNode constructCombinedNode() {
if (getNumberOfConfigurations() < 1) {
return new ViewNode();
} else {
Iterator<ConfigData> iterator<configdata>Var1 = iterator<configdata>Literal2;
ConfigurationNode configurationnodeVar3 = configurationnodeLiteral4;
while (iterator<configdata>Var1.hasNext()) {
configurationnodeVar3 = getNodeCombiner().combine(configurationnodeVar3, iterator<configdata>Var1.next().getTransformedRoot());
}
if (getLogger().isLoggable(Level.FINEST)) {
ByteArrayOutputStream bytearrayoutputstreamVar5 = bytearrayoutputstreamLiteral6;
PrintStream printstreamVar7 = printstreamLiteral8;
TreeUtils.printTree(printstreamVar7, configurationnodeVar3);
getLogger().finest(bytearrayoutputstreamVar5.toString());
}
return configurationnodeVar3;
}
}"
5424,BAD_PRACTICE,SE_BAD_FIELD,FP,configuration,2635,protected Configuration configuration;,protected Configuration configuration;,protected Configuration configurationVar1;
5426,EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,FP,configuration,2637,"ResultSet rs = ps.executeQuery();
","@Override
protected Object performOperation() throws SQLException {
PreparedStatement ps = initStatement(String.format(SQL_GET_KEYS, keyColumn, table), true);
ResultSet rs = ps.executeQuery();
while (rs.next()) {
keys.add(rs.getString(1));
}
return null;
}","@Override
protected Object performOperation() throws SQLException {
PreparedStatement preparedstatementVar1 = preparedstatementLiteral2;
ResultSet resultsetVar3 = resultsetLiteral4;
while (resultsetVar3.next()) {
keys.add(resultsetVar3.getString(1));
}
return null;
}"
5427,EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,FP,configuration,2638,"ResultSet rs = pstmt.executeQuery();
","@Override
protected Object performOperation() throws SQLException {
PreparedStatement pstmt = initStatement(String.format(SQL_GET_PROPERTY, table, keyColumn), true, key);
ResultSet rs = pstmt.executeQuery();
return rs.next();
}","@Override
protected Object performOperation() throws SQLException {
PreparedStatement preparedstatementVar1 = preparedstatementLiteral2;
ResultSet resultsetVar3 = resultsetLiteral4;
return resultsetVar3.next();
}"
5428,EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,FP,configuration,2639,"ResultSet rs = ps.executeQuery();
","@Override
protected Object performOperation() throws SQLException {
PreparedStatement ps = initStatement(String.format(SQL_IS_EMPTY, table), true);
ResultSet rs = ps.executeQuery();
return rs.next() ? rs.getInt(1) : null;
}","@Override
protected Object performOperation() throws SQLException {
PreparedStatement preparedstatementVar1 = preparedstatementLiteral2;
ResultSet resultsetVar3 = resultsetLiteral4;
return resultsetVar3.next() ? resultsetVar3.getInt(1) : null;
}"
5448,CORRECTNESS,UR_UNINIT_READ_CALLED_FROM_SUPER_CONSTRUCTOR,FP,configuration,2659,"if (init)
","@Override
public void setRootNode(ConfigurationNode rootNode) {
if (init) {
getConfiguration().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}","@Override
public void setRootNode(ConfigurationNode rootNode) {
if (init) {
getConfiguration().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}"
5467,PERFORMANCE,DM_NUMBER_CTOR,FP,configuration,2678,"return new Long(n.longValue());
","public Long convert(Object value, Object... params) throws ConversionException {
Number n = toNumber(value, Long.class);
if (n instanceof Long) {
return (Long) n;
} else {
return new Long(n.longValue());
}
}","public Long convert(Object value, Object... params) throws ConversionException {
Number numberVar1 = numberLiteral2;
if (numberVar1 instanceof Long) {
return (Long) numberVar1;
} else {
return new Long(numberVar1.longValue());
}
}"
5472,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,configuration,2683,"T node2 = ((ConfigurationNodePointer<T>) pointer2).getConfigurationNode();
","@SuppressWarnings(""unchecked"")
@Override
public int compareChildNodePointers(NodePointer pointer1, NodePointer pointer2) {
T node1 = ((ConfigurationNodePointer<T>) pointer1).getConfigurationNode();
T node2 = ((ConfigurationNodePointer<T>) pointer2).getConfigurationNode();
for (T child : getNodeHandler().getChildren(getConfigurationNode())) {
if (child == node1) {
return -1;
} else if (child == node2) {
return 1;
}
}
return 0;
}","@Override
public int compareChildNodePointers(NodePointer pointer1, NodePointer pointer2) {
T TVar1 = ((ConfigurationNodePointer<T>) pointer1).getConfigurationNode();
T TVar2 = ((ConfigurationNodePointer<T>) pointer2).getConfigurationNode();
for (T TVar3 : getNodeHandler().getChildren(getConfigurationNode())) {
if (TVar3 == TVar1) {
return -1;
} else if (TVar3 == TVar2) {
return 1;
}
}
return 0;"
5522,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,configuration,2733,"token = jj_consume_token(DATE);
{if (true) return parseDate(token.image);}
","final public Date Date() throws ParseException {
Token token;
token = jj_consume_token(DATE);
{
if (true)
return parseDate(token.image);
}
throw new Error(""Missing return statement in function"");
}","final public Date Date() throws ParseException {
Token tokenVar1;
tokenVar1 = jj_consume_token(DATE);
{
if (true)
return parseDate(tokenVar1.image);
}
throw new Error(""Missing return statement in function"");
}"
5526,DODGY_CODE,SF_SWITCH_NO_DEFAULT,FP,configuration,2737,"switch (i) {
case 0: jj_3_1(); break;
","private void jj_rescan_token() {
jj_rescan = true;
for (int i = 0; i < 1; i++) {
try {
JJCalls p = jj_2_rtns[i];
do {
if (p.gen > jj_gen) {
jj_la = p.arg;
jj_lastpos = jj_scanpos = p.first;
switch(i) {
case 0:
jj_3_1();
break;
}
}
p = p.next;
} while (p != null);
} catch (LookaheadSuccess ls) {
}
}
jj_rescan = false;
}","private void jj_rescan_token() {
jj_rescan = true;
for (int intVar5 = intLiteral6; intVar1 < intLiteral1; intVar1++) {
try {
JJCalls jjcallsVar3 = jjcallsLiteral4;
do {
if (jjcallsVar3.gen > jj_gen) {
jj_la = jjcallsVar3.arg;
jj_lastpos = jj_scanpos = jjcallsVar3.first;
switch(intVar1) {
case 0:
jj_3_1();
break;
}
}
jjcallsVar3 = jjcallsVar3.next;
} while (jjcallsVar3 != null);
} catch (LookaheadSuccess ls) {
}
}
jj_rescan = false;
}"
5537,I18N,DM_DEFAULT_ENCODING,FP,configuration,2748,"ReInit(encoding == null ? new java.io.InputStreamReader(dstream) : new java.io.InputStreamReader(dstream, encoding), startline, startcolumn, buffersize);
","public void ReInit(java.io.InputStream dstream, String encoding, int startline, int startcolumn, int buffersize) throws java.io.UnsupportedEncodingException {
ReInit(encoding == null ? new java.io.InputStreamReader(dstream) : new java.io.InputStreamReader(dstream, encoding), startline, startcolumn, buffersize);
}","public void ReInit(java.io.InputStream dstream, String encoding, int startline, int startcolumn, int buffersize) throws java.io.UnsupportedEncodingException {
ReInit(encoding == null ? new java.io.InputStreamReader(dstream) : new java.io.InputStreamReader(dstream, encoding), startline, startcolumn, buffersize);
}"
5538,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,configuration,2749,"tokenBegin = -1;
char c = readChar();
tokenBegin = bufpos;
return c;
","public char BeginToken() throws java.io.IOException {
tokenBegin = -1;
char c = readChar();
tokenBegin = bufpos;
return c;
}","public char BeginToken() throws java.io.IOException {
tokenBegin = -1;
char charVar1 = charLiteral2;
tokenBegin = bufpos;
return charVar1;
}"
5542,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,configuration,2753,"column++;
if (prevCharIsLF)
{
prevCharIsLF = false;
line += (column = 1);
}
else if (prevCharIsCR)
{
prevCharIsCR = false;
if (c == '\n')
{
prevCharIsLF = true;
}
else
line += (column = 1);
}
switch (c)
{
case '\r' :
prevCharIsCR = true;
break;
case '\n' :
prevCharIsLF = true;
break;
case '\t' :
column--;
column += (tabSize - (column % tabSize));
break;
default :
break;
}
bufline[bufpos] = line;
bufcolumn[bufpos] = column;
}
","protected void UpdateLineColumn(char c) {
column++;
if (prevCharIsLF) {
prevCharIsLF = false;
line += (column = 1);
} else if (prevCharIsCR) {
prevCharIsCR = false;
if (c == '\n') {
prevCharIsLF = true;
} else
line += (column = 1);
}
switch(c) {
case '\r':
prevCharIsCR = true;
break;
case '\n':
prevCharIsLF = true;
break;
case '\t':
column--;
column += (tabSize - (column % tabSize));
break;
default:
break;
}
bufline[bufpos] = line;
bufcolumn[bufpos] = column;
}","protected void UpdateLineColumn(char c) {
column++;
if (prevCharIsLF) {
prevCharIsLF = false;
line += (column = 1);
} else if (prevCharIsCR) {
prevCharIsCR = false;
if (c == '\n') {
prevCharIsLF = true;
} else
line += (column = 1);
}
switch(c) {
case '\r':
prevCharIsCR = true;
break;
case '\n':
prevCharIsLF = true;
break;
case '\t':
column--;
column += (tabSize - (column % tabSize));
break;
default:
break;
}
bufline[bufpos] = line;
bufcolumn[bufpos] = column;
}"
5565,DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,configuration,2776,"List<ConfigurationNode> nodes = namedNodes.get(node.getName());
","public boolean removeNode(ConfigurationNode node) {
if (nodes != null && node != null && nodes.contains(node)) {
detachNode(node);
this.nodes.remove(node);
List<ConfigurationNode> nodes = namedNodes.get(node.getName());
if (nodes != null) {
nodes.remove(node);
if (nodes.isEmpty()) {
namedNodes.remove(node.getName());
}
}
return true;
} else {
return false;
}
}","public boolean removeNode(ConfigurationNode node) {
if (list<configurationnode>Var1 != null && node != null && list<configurationnode>Var1.contains(node)) {
detachNode(node);
this.nodes.remove(node);
List<ConfigurationNode> list<configurationnode>Var1 = list<configurationnode>Literal2;
if (list<configurationnode>Var1 != null) {
list<configurationnode>Var1.remove(node);
if (list<configurationnode>Var1.isEmpty()) {
namedNodes.remove(node.getName());
}
}
return true;
} else {
return false;
}
}"
5746,BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,configuration,2957,"parent.mkdirs();
","private void createPath(File file) {
if (file != null) {
if (!file.exists()) {
File parent = file.getParentFile();
if (parent != null && !parent.exists()) {
parent.mkdirs();
}
}
}
}","private void createPath(File file) {
if (file != null) {
if (!file.exists()) {
File fileVar1 = fileLiteral2;
if (fileVar1 != null && !fileVar1.exists()) {
fileVar1.mkdirs();
}
}
}
}"
5749,DODGY_CODE,RI_REDUNDANT_INTERFACES,FP,configuration,2960,"public class CombinedConfiguration extends HierarchicalConfiguration implements
ConfigurationListener, Cloneable
{
public static final int EVENT_COMBINED_INVALIDATE = 40;
private static final long serialVersionUID = 8338574525528692307L;
private static final DefaultExpressionEngine AT_ENGINE = new DefaultExpressionEngine();
private static final NodeCombiner DEFAULT_COMBINER = new UnionCombiner();
private static final String PROP_RELOAD_CHECK = ""CombinedConfigurationReloadCheck"";
private NodeCombiner nodeCombiner;
private volatile ConfigurationNode combinedRoot;
private List configurations;
private Map namedConfigurations;
private ExpressionEngine conversionExpressionEngine;
private boolean forceReloadCheck;
public CombinedConfiguration(NodeCombiner comb)
{
setNodeCombiner((comb != null) ? comb : DEFAULT_COMBINER);
clear();
}
public CombinedConfiguration()
{
this(null);
}
public NodeCombiner getNodeCombiner()
{
return nodeCombiner;
}
public void setNodeCombiner(NodeCombiner nodeCombiner)
{
if (nodeCombiner == null)
{
throw new IllegalArgumentException(
""Node combiner must not be null!"");
}
this.nodeCombiner = nodeCombiner;
invalidate();
}
public boolean isForceReloadCheck()
{
return forceReloadCheck;
}
public void setForceReloadCheck(boolean forceReloadCheck)
{
this.forceReloadCheck = forceReloadCheck;
}
public ExpressionEngine getConversionExpressionEngine()
{
return conversionExpressionEngine;
}
public void setConversionExpressionEngine(
ExpressionEngine conversionExpressionEngine)
{
this.conversionExpressionEngine = conversionExpressionEngine;
}
public void addConfiguration(AbstractConfiguration config, String name,
String at)
{
if (config == null)
{
throw new IllegalArgumentException(
""Added configuration must not be null!"");
}
if (name != null && namedConfigurations.containsKey(name))
{
throw new ConfigurationRuntimeException(
""A configuration with the name '""
+ name
+ ""' already exists in this combined configuration!"");
}
ConfigData cd = new ConfigData(config, name, at);
configurations.add(cd);
if (name != null)
{
namedConfigurations.put(name, config);
}
config.addConfigurationListener(this);
invalidate();
}
public void addConfiguration(AbstractConfiguration config, String name)
{
addConfiguration(config, name, null);
}
public void addConfiguration(AbstractConfiguration config)
{
addConfiguration(config, null, null);
}
public int getNumberOfConfigurations()
{
return configurations.size();
}
public Configuration getConfiguration(int index)
{
ConfigData cd = (ConfigData) configurations.get(index);
return cd.getConfiguration();
}
public Configuration getConfiguration(String name)
{
return (Configuration) namedConfigurations.get(name);
}
public boolean removeConfiguration(Configuration config)
{
for (int index = 0; index < getNumberOfConfigurations(); index++)
{
if (((ConfigData) configurations.get(index)).getConfiguration() == config)
{
removeConfigurationAt(index);
return true;
}
}
return false;
}
public Configuration removeConfigurationAt(int index)
{
ConfigData cd = (ConfigData) configurations.remove(index);
if (cd.getName() != null)
{
namedConfigurations.remove(cd.getName());
}
cd.getConfiguration().removeConfigurationListener(this);
invalidate();
return cd.getConfiguration();
}
public Configuration removeConfiguration(String name)
{
Configuration conf = getConfiguration(name);
if (conf != null)
{
removeConfiguration(conf);
}
return conf;
}
public Set getConfigurationNames()
{
return namedConfigurations.keySet();
}
public void invalidate()
{
combinedRoot = null;
fireEvent(EVENT_COMBINED_INVALIDATE, null, null, false);
}
public void configurationChanged(ConfigurationEvent event)
{
if (!event.isBeforeUpdate())
{
invalidate();
}
}
public ConfigurationNode getRootNode()
{
if (combinedRoot == null)
{
combinedRoot = constructCombinedNode();
}
return combinedRoot;
}
public void clear()
{
fireEvent(EVENT_CLEAR, null, null, true);
configurations = new ArrayList();
namedConfigurations = new HashMap();
fireEvent(EVENT_CLEAR, null, null, false);
invalidate();
}
public Object clone()
{
CombinedConfiguration copy = (CombinedConfiguration) super.clone();
copy.clear();
for (Iterator it = configurations.iterator(); it.hasNext();)
{
ConfigData cd = (ConfigData) it.next();
copy.addConfiguration((AbstractConfiguration) ConfigurationUtils
.cloneConfiguration(cd.getConfiguration()), cd.getName(),
cd.getAt());
}
copy.setRootNode(new DefaultConfigurationNode());
return copy;
}
public Configuration getSource(String key)
{
if (key == null)
{
throw new IllegalArgumentException(""Key must not be null!"");
}
List nodes = fetchNodeList(key);
if (nodes.isEmpty())
{
return null;
}
Iterator it = nodes.iterator();
Configuration source = findSourceConfiguration((ConfigurationNode) it
.next());
while (it.hasNext())
{
Configuration src = findSourceConfiguration((ConfigurationNode) it
.next());
if (src != source)
{
throw new IllegalArgumentException(""The key "" + key
+ "" is defined by multiple sources!"");
}
}
return source;
}
protected List fetchNodeList(String key)
{
if (isForceReloadCheck())
{
performReloadCheck();
}
return super.fetchNodeList(key);
}
protected void performReloadCheck()
{
for (Iterator it = configurations.iterator(); it.hasNext();)
{
try
{
((ConfigData) it.next()).getConfiguration().getProperty(
PROP_RELOAD_CHECK);
}
catch (Exception ex)
{
;
}
}
}
private ConfigurationNode constructCombinedNode()
{
if (getNumberOfConfigurations() < 1)
{
return new ViewNode();
}
else
{
Iterator it = configurations.iterator();
ConfigurationNode node = ((ConfigData) it.next())
.getTransformedRoot();
while (it.hasNext())
{
node = getNodeCombiner().combine(node,
((ConfigData) it.next()).getTransformedRoot());
}
return node;
}
}
private Configuration findSourceConfiguration(ConfigurationNode node)
{
ConfigurationNode root = null;
ConfigurationNode current = node;
while (current != null)
{
root = current;
current = current.getParentNode();
}
for (Iterator it = configurations.iterator(); it.hasNext();)
{
ConfigData cd = (ConfigData) it.next();
if (root == cd.getRootNode())
{
return cd.getConfiguration();
}
}
return this;
",private volatile ConfigurationNode combinedRoot;,private volatile ConfigurationNode configurationnodeVar1;
5752,I18N,DM_CONVERT_CASE,FP,configuration,2963,"if (filename != null && filename.toLowerCase().trim().endsWith("".xml""))
","protected FileConfiguration createConfiguration(Attributes attributes) throws Exception {
String filename = attributes.getValue(ATTR_FILENAME);
if (filename != null && filename.toLowerCase().trim().endsWith("".xml"")) {
return new XMLPropertyListConfiguration();
} else {
return new PropertyListConfiguration();
}
}","protected FileConfiguration createConfiguration(Attributes attributes) throws Exception {
String stringVar1 = stringLiteral2;
if (stringVar1 != null && stringVar1.toLowerCase().trim().endsWith("".xml"")) {
return new XMLPropertyListConfiguration();
} else {
return new PropertyListConfiguration();
}
}"
5754,DODGY_CODE,IM_BAD_CHECK_FOR_ODD,FP,configuration,2965,"return count % 2 == 1;
","private boolean hasDelimiter() {
int count = 0;
for (int idx = keyBuffer.length() - 1; idx >= 0 && keyBuffer.charAt(idx) == PROPERTY_DELIMITER; idx--) {
count++;
}
return count % 2 == 1;
}","private boolean hasDelimiter() {
int intVar1 = intLiteral2;
for (int intVar5 = intLiteral6; intVar3 >= 0 && intLiteral1; intVar3--) {
intVar1++;
}
return intVar1 % 2 == 1;
}"
5762,SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,configuration,2973,"pstmt = conn.prepareStatement(query.toString());
","public Iterator getKeys() {
Collection keys = new ArrayList();
StringBuffer query = new StringBuffer(""SELECT DISTINCT "" + keyColumn + "" FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
ResultSet rs = pstmt.executeQuery();
while (rs.next()) {
keys.add(rs.getString(1));
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(conn, pstmt);
}
return keys.iterator();
}","public Iterator getKeys() {
Collection collectionVar1 = collectionLiteral2;
StringBuffer stringbufferVar3 = stringbufferLiteral4;
if (nameColumn != null) {
stringbufferVar3.append("" WHERE "" + nameColumn + ""=?"");
}
Connection connectionVar5 = connectionLiteral6;
PreparedStatement preparedstatementVar7 = connectionLiteral6;
try {
connectionVar5 = getConnection();
preparedstatementVar7 = connectionVar5.prepareStatement(stringbufferVar3.toString());
if (nameColumn != null) {
preparedstatementVar7.setString(1, name);
}
ResultSet resultsetVar8 = resultsetLiteral9;
while (resultsetVar8.next()) {
collectionVar1.add(resultsetVar8.getString(1));
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(connectionVar5, preparedstatementVar7);
}
return collectionVar1.iterator();
}"
5766,SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,configuration,2977,"pstmt = conn.prepareStatement(query.toString());
","public boolean isEmpty() {
boolean empty = true;
StringBuffer query = new StringBuffer(""SELECT count(*) FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
ResultSet rs = pstmt.executeQuery();
if (rs.next()) {
empty = rs.getInt(1) == 0;
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(conn, pstmt);
}
return empty;
}","public boolean isEmpty() {
boolean booleanVar1 = booleanLiteral2;
StringBuffer stringbufferVar3 = stringbufferLiteral4;
if (nameColumn != null) {
stringbufferVar3.append("" WHERE "" + nameColumn + ""=?"");
}
Connection connectionVar5 = connectionLiteral6;
PreparedStatement preparedstatementVar7 = connectionLiteral6;
try {
connectionVar5 = getConnection();
preparedstatementVar7 = connectionVar5.prepareStatement(stringbufferVar3.toString());
if (nameColumn != null) {
preparedstatementVar7.setString(1, name);
}
ResultSet resultsetVar8 = resultsetLiteral9;
if (resultsetVar8.next()) {
booleanVar1 = resultsetVar8.getInt(1) == 0;
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(connectionVar5, preparedstatementVar7);
}
return booleanVar1;
}"
5772,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,configuration,2983,"ConfigurationDeclaration decl = (ConfigurationDeclaration) data;
","public Object createBean(Class beanClass, BeanDeclaration data, Object param) throws Exception {
ConfigurationDeclaration decl = (ConfigurationDeclaration) data;
String tagName = decl.getNode().getName();
ConfigurationProvider provider = decl.getConfigurationBuilder().providerForTag(tagName);
if (provider == null) {
throw new ConfigurationRuntimeException(""No ConfigurationProvider registered for tag "" + tagName);
}
try {
return provider.getConfiguration(decl);
} catch (Exception ex) {
if (!decl.isOptional()) {
throw ex;
} else {
decl.getConfigurationBuilder().fireError(EVENT_ERR_LOAD_OPTIONAL, decl.getConfiguration().getString(ATTR_NAME), null, ex);
if (decl.isForceCreate()) {
try {
return provider.getEmptyConfiguration(decl);
} catch (Exception ex2) {
;
}
}
return null;
}
}
}","public Object createBean(Class beanClass, BeanDeclaration data, Object param) throws Exception {
ConfigurationDeclaration configurationdeclarationVar1 = configurationdeclarationLiteral2;
String stringVar3 = stringLiteral4;
ConfigurationProvider configurationproviderVar5 = configurationproviderLiteral6;
if (configurationproviderVar5 == null) {
throw new ConfigurationRuntimeException(""No ConfigurationProvider registered for tag "" + stringVar3);
}
try {
return configurationproviderVar5.getConfiguration(configurationdeclarationVar1);
} catch (Exception ex) {
if (!configurationdeclarationVar1.isOptional()) {
throw ex;
} else {
configurationdeclarationVar1.getConfigurationBuilder().fireError(EVENT_ERR_LOAD_OPTIONAL, configurationdeclarationVar1.getConfiguration().getString(ATTR_NAME), null, ex);
if (configurationdeclarationVar1.isForceCreate()) {
try {
return configurationproviderVar5.getEmptyConfiguration(configurationdeclarationVar1);
} catch (Exception ex2) {
;
}
}
return null;
}
}
}"
5789,DODGY_CODE,SF_SWITCH_NO_DEFAULT,FP,configuration,3000,"switch (state)
{
case 0:
if (c == '\\')
{
state = 1;
}
else if (ArrayUtils.contains(WHITE_SPACE, c))
{
state = 2;
}
else if (ArrayUtils.contains(SEPARATORS, c))
{
state = 3;
}
else
{
key.append(c);
}
break;
case 1:
if (ArrayUtils.contains(SEPARATORS, c) || ArrayUtils.contains(WHITE_SPACE, c))
{
key.append(c);
}
else
{
key.append('\\');
key.append(c);
}
state = 0;
break;
case 2:
if (ArrayUtils.contains(WHITE_SPACE, c))
{
state = 2;
}
else if (ArrayUtils.contains(SEPARATORS, c))
{
state = 3;
}
else
{
value.append(c);
state = 3;
}
break;
case 3:
value.append(c);
","private static String[] parseProperty(String line) {
String[] result = new String[2];
StringBuffer key = new StringBuffer();
StringBuffer value = new StringBuffer();
// state of the automaton:
int state = 0;
for (int pos = 0; pos < line.length(); pos++) {
char c = line.charAt(pos);
switch(state) {
case 0:
if (c == '\\') {
state = 1;
} else if (ArrayUtils.contains(WHITE_SPACE, c)) {
state = 2;
} else if (ArrayUtils.contains(SEPARATORS, c)) {
state = 3;
} else {
key.append(c);
}
break;
case 1:
if (ArrayUtils.contains(SEPARATORS, c) || ArrayUtils.contains(WHITE_SPACE, c)) {
key.append(c);
} else {
key.append('\\');
key.append(c);
}
state = 0;
break;
case 2:
if (ArrayUtils.contains(WHITE_SPACE, c)) {
state = 2;
} else if (ArrayUtils.contains(SEPARATORS, c)) {
state = 3;
} else {
value.append(c);
state = 3;
}
break;
case 3:
value.append(c);
break;
}
}
result[0] = key.toString().trim();
result[1] = value.toString().trim();
return result;
}","private static String[] parseProperty(String line) {
String[] stringArrayVar1 = stringArrayLiteral2;
StringBuffer stringbufferVar3 = stringbufferLiteral4;
StringBuffer stringbufferVar5 = stringbufferLiteral4;
// state of the automaton:
int intVar6 = intLiteral7;
for (int intVar11 = intLiteral12; intVar8 < intLiteral1; intVar8++) {
char charVar9 = charLiteral10;
switch(intVar6) {
case 0:
if (charVar9 == '\\') {
intVar6 = 1;
} else if (ArrayUtils.contains(WHITE_SPACE, charVar9)) {
intVar6 = 2;
} else if (ArrayUtils.contains(SEPARATORS, charVar9)) {
intVar6 = 3;
} else {
stringbufferVar3.append(charVar9);
}
break;
case 1:
if (ArrayUtils.contains(SEPARATORS, charVar9) || ArrayUtils.contains(WHITE_SPACE, charVar9)) {
stringbufferVar3.append(charVar9);
} else {
stringbufferVar3.append('\\');
stringbufferVar3.append(charVar9);
}
intVar6 = 0;
break;
case 2:
if (ArrayUtils.contains(WHITE_SPACE, charVar9)) {
intVar6 = 2;
} else if (ArrayUtils.contains(SEPARATORS, charVar9)) {
intVar6 = 3;
} else {
stringbufferVar5.append(charVar9);
intVar6 = 3;
}
break;
case 3:
stringbufferVar5.append(charVar9);
break;
}
}
stringArrayVar1[0] = stringbufferVar3.toString().trim();
stringArrayVar1[1] = stringbufferVar5.toString().trim();
return stringArrayVar1;
}"
5797,PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,configuration,3008,"{
public void error(SAXParseException ex) throws SAXException
{
throw ex;
",private DocumentBuilder documentBuilder;,private DocumentBuilder documentbuilderVar1;
5799,DODGY_CODE,REC_CATCH_EXCEPTION,FP,configuration,3010,"catch (Exception e)
","private void load(InputSource source) throws ConfigurationException {
try {
URL sourceURL = getDelegate().getURL();
if (sourceURL != null) {
source.setSystemId(sourceURL.toString());
}
DocumentBuilder builder = createDocumentBuilder();
Document newDocument = builder.parse(source);
Document oldDocument = document;
document = null;
initProperties(newDocument, oldDocument == null);
document = (oldDocument == null) ? newDocument : oldDocument;
} catch (Exception e) {
throw new ConfigurationException(""Unable to load the configuration"", e);
}
}","private void load(InputSource source) throws ConfigurationException {
try {
URL urlVar1 = urlLiteral2;
if (urlVar1 != null) {
source.setSystemId(urlVar1.toString());
}
DocumentBuilder documentbuilderVar3 = documentbuilderLiteral4;
Document documentVar5 = documentLiteral6;
Document documentVar7 = documentLiteral8;
document = null;
initProperties(documentVar5, documentVar7 == null);
document = (documentVar7 == null) ? documentVar5 : documentVar7;
} catch (Exception e) {
throw new ConfigurationException(""Unable to load the configuration"", e);
}
}"
5806,BAD_PRACTICE,SE_BAD_FIELD,FP,configuration,3017,public Token currentToken;,public Token currentToken;,public Token tokenVar1;
5808,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,configuration,3019,"jj_input_stream.ReInit(stream, 1, 1);
token_source.ReInit(jj_input_stream);
token = new Token();
jj_ntk = -1;
jj_gen = 0;
for (int i = 0; i < 6; i++) jj_la1[i] = -1;
for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
}
","public void ReInit(java.io.Reader stream) {
jj_input_stream.ReInit(stream, 1, 1);
token_source.ReInit(jj_input_stream);
token = new Token();
jj_ntk = -1;
jj_gen = 0;
for (int i = 0; i < 6; i++) jj_la1[i] = -1;
for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
}","public void ReInit(java.io.Reader stream) {
jj_input_stream.ReInit(stream, 1, 1);
token_source.ReInit(jj_input_stream);
token = new Token();
jj_ntk = -1;
jj_gen = 0;
for (int intVar3 = intLiteral4; intVar1 < intLiteral1; intVar1++) jj_la1[intVar1] = -1;
for (int intVar3 = intLiteral4; intVar1 < intLiteral2; intVar1++) jj_2_rtns[intVar1] = new JJCalls();
}"
5814,DODGY_CODE,SF_SWITCH_NO_DEFAULT,FP,configuration,3025,"switch (i) {
case 0: jj_3_1(); break;
","final private void jj_rescan_token() {
jj_rescan = true;
for (int i = 0; i < 1; i++) {
JJCalls p = jj_2_rtns[i];
do {
if (p.gen > jj_gen) {
jj_la = p.arg;
jj_lastpos = jj_scanpos = p.first;
switch(i) {
case 0:
jj_3_1();
break;
}
}
p = p.next;
} while (p != null);
}
jj_rescan = false;
}","final private void jj_rescan_token() {
jj_rescan = true;
for (int intVar5 = intLiteral6; intVar1 < intLiteral1; intVar1++) {
JJCalls jjcallsVar3 = jjcallsLiteral4;
do {
if (jjcallsVar3.gen > jj_gen) {
jj_la = jjcallsVar3.arg;
jj_lastpos = jj_scanpos = jjcallsVar3.first;
switch(intVar1) {
case 0:
jj_3_1();
break;
}
}
jjcallsVar3 = jjcallsVar3.next;
} while (jjcallsVar3 != null);
}
jj_rescan = false;
}"
5824,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,configuration,3035,"jjmatchedPos = jjnewStateCnt = 0;
curLexState = defaultLexState;
input_stream = stream;
ReInitRounds();
}
","public void ReInit(SimpleCharStream stream) {
jjmatchedPos = jjnewStateCnt = 0;
curLexState = defaultLexState;
input_stream = stream;
ReInitRounds();
}","public void ReInit(SimpleCharStream stream) {
jjmatchedPos = jjnewStateCnt = 0;
curLexState = defaultLexState;
input_stream = stream;
ReInitRounds();
}"
5827,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,configuration,3038,"if (lexState >= 1 || lexState < 0)
{
throw new TokenMgrError(""Error: Ignoring invalid lexical state : "" + lexState + "". State unchanged."", TokenMgrError.INVALID_LEXICAL_STATE);
}
else
{
curLexState = lexState;
}
}
","public void SwitchTo(int lexState) {
if (lexState >= 1 || lexState < 0) {
throw new TokenMgrError(""Error: Ignoring invalid lexical state : "" + lexState + "". State unchanged."", TokenMgrError.INVALID_LEXICAL_STATE);
} else {
curLexState = lexState;
}
}","public void SwitchTo(int lexState) {
if (lexState >= 1 || lexState < 0) {
throw new TokenMgrError(""Error: Ignoring invalid lexical state : "" + lexState + "". State unchanged."", TokenMgrError.INVALID_LEXICAL_STATE);
} else {
curLexState = lexState;
}
}"
5829,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,configuration,3040,"column++;
if (prevCharIsLF)
{
prevCharIsLF = false;
line += (column = 1);
}
else if (prevCharIsCR)
{
prevCharIsCR = false;
if (c == '\n')
{
prevCharIsLF = true;
}
else
line += (column = 1);
}
switch (c)
{
case '\r' :
prevCharIsCR = true;
break;
case '\n' :
prevCharIsLF = true;
break;
case '\t' :
column--;
column += (8 - (column & 07));
break;
default :
break;
}
bufline[bufpos] = line;
bufcolumn[bufpos] = column;
}
","protected void UpdateLineColumn(char c) {
column++;
if (prevCharIsLF) {
prevCharIsLF = false;
line += (column = 1);
} else if (prevCharIsCR) {
prevCharIsCR = false;
if (c == '\n') {
prevCharIsLF = true;
} else
line += (column = 1);
}
switch(c) {
case '\r':
prevCharIsCR = true;
break;
case '\n':
prevCharIsLF = true;
break;
case '\t':
column--;
column += (8 - (column & 07));
break;
default:
break;
}
bufline[bufpos] = line;
bufcolumn[bufpos] = column;
}","protected void UpdateLineColumn(char c) {
column++;
if (prevCharIsLF) {
prevCharIsLF = false;
line += (column = 1);
} else if (prevCharIsCR) {
prevCharIsCR = false;
if (c == '\n') {
prevCharIsLF = true;
} else
line += (column = 1);
}
switch(c) {
case '\r':
prevCharIsCR = true;
break;
case '\n':
prevCharIsLF = true;
break;
case '\t':
column--;
column += (8 - (column & 07));
break;
default:
break;
}
bufline[bufpos] = line;
bufcolumn[bufpos] = column;
}"
5830,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,configuration,3041,"ReInit(dstream, 1, 1, 4096);
}
","public void ReInit(java.io.InputStream dstream) {
ReInit(dstream, 1, 1, 4096);
}","public void ReInit(java.io.InputStream dstream) {
ReInit(dstream, 1, 1, 4096);
}"
5832,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,configuration,3043,"inputStream = dstream;
line = startline;
column = startcolumn - 1;
if (buffer == null || buffersize != buffer.length)
{
available = bufsize = buffersize;
buffer = new char[buffersize];
bufline = new int[buffersize];
bufcolumn = new int[buffersize];
}
prevCharIsLF = prevCharIsCR = false;
tokenBegin = inBuf = maxNextCharInd = 0;
bufpos = -1;
}
","public void ReInit(java.io.Reader dstream, int startline, int startcolumn, int buffersize) {
inputStream = dstream;
line = startline;
column = startcolumn - 1;
if (buffer == null || buffersize != buffer.length) {
available = bufsize = buffersize;
buffer = new char[buffersize];
bufline = new int[buffersize];
bufcolumn = new int[buffersize];
}
prevCharIsLF = prevCharIsCR = false;
tokenBegin = inBuf = maxNextCharInd = 0;
bufpos = -1;
}","public void ReInit(java.io.Reader dstream, int startline, int startcolumn, int buffersize) {
inputStream = dstream;
line = startline;
column = startcolumn - 1;
if (buffer == null || buffersize != buffer.length) {
available = bufsize = buffersize;
buffer = new char[buffersize];
bufline = new int[buffersize];
bufcolumn = new int[buffersize];
}
prevCharIsLF = prevCharIsCR = false;
tokenBegin = inBuf = maxNextCharInd = 0;
bufpos = -1;
}"
5840,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,configuration,3051,"ReInit(new java.io.InputStreamReader(dstream), startline, startcolumn, 4096);
}
","public void ReInit(java.io.InputStream dstream, int startline, int startcolumn, int buffersize) {
ReInit(new java.io.InputStreamReader(dstream), startline, startcolumn, 4096);
}","public void ReInit(java.io.InputStream dstream, int startline, int startcolumn, int buffersize) {
ReInit(new java.io.InputStreamReader(dstream), startline, startcolumn, 4096);
}"
5845,DODGY_CODE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,FP,configuration,3056,"public int beginLine, beginColumn, endLine, endColumn;","public int beginLine, beginColumn, endLine, endColumn;","public int intVar1, intVar2, intVar3, intVar4;"
5848,I18N,DM_DEFAULT_ENCODING,FP,configuration,3059,"String base64 = new String(Base64.encodeBase64((byte[]) value));
","private void printValue(PrintWriter out, int indentLevel, Object value) {
String padding = StringUtils.repeat("" "", indentLevel * INDENT_SIZE);
if (value instanceof Date) {
synchronized (PListNode.format) {
out.println(padding + ""<date>"" + PListNode.format.format((Date) value) + ""</date>"");
}
} else if (value instanceof Calendar) {
printValue(out, indentLevel, ((Calendar) value).getTime());
} else if (value instanceof Number) {
if (value instanceof Double || value instanceof Float || value instanceof BigDecimal) {
out.println(padding + ""<real>"" + value.toString() + ""</real>"");
} else {
out.println(padding + ""<integer>"" + value.toString() + ""</integer>"");
}
} else if (value instanceof Boolean) {
if (((Boolean) value).booleanValue()) {
out.println(padding + ""<true/>"");
} else {
out.println(padding + ""<false/>"");
}
} else if (value instanceof List) {
out.println(padding + ""<array>"");
Iterator it = ((List) value).iterator();
while (it.hasNext()) {
printValue(out, indentLevel + 1, it.next());
}
out.println(padding + ""</array>"");
} else if (value instanceof HierarchicalConfiguration) {
printNode(out, indentLevel, ((HierarchicalConfiguration) value).getRoot());
} else if (value instanceof Configuration) {
out.println(padding + ""<dict>"");
Configuration config = (Configuration) value;
Iterator it = config.getKeys();
while (it.hasNext()) {
String key = (String) it.next();
Node node = new Node(key);
node.setValue(config.getProperty(key));
printNode(out, indentLevel + 1, node);
if (it.hasNext()) {
out.println();
}
}
out.println(padding + ""</dict>"");
} else if (value instanceof Map) {
Map map = (Map) value;
printValue(out, indentLevel, new MapConfiguration(map));
} else if (value instanceof byte[]) {
String base64 = new String(Base64.encodeBase64((byte[]) value));
out.println(padding + ""<data>"" + StringEscapeUtils.escapeXml(base64) + ""</data>"");
} else {
out.println(padding + ""<string>"" + StringEscapeUtils.escapeXml(String.valueOf(value)) + ""</string>"");
}
}","private void printValue(PrintWriter out, int indentLevel, Object value) {
String stringVar1 = stringLiteral2;
if (value instanceof Date) {
synchronized (PListNode.format) {
out.println(stringVar1 + ""<date>"" + PListNode.format.format((Date) value) + ""</date>"");
}
} else if (value instanceof Calendar) {
printValue(out, indentLevel, ((Calendar) value).getTime());
} else if (value instanceof Number) {
if (value instanceof Double || value instanceof Float || value instanceof BigDecimal) {
out.println(stringVar1 + ""<real>"" + value.toString() + ""</real>"");
} else {
out.println(stringVar1 + ""<integer>"" + value.toString() + ""</integer>"");
}
} else if (value instanceof Boolean) {
if (((Boolean) value).booleanValue()) {
out.println(stringVar1 + ""<true/>"");
} else {
out.println(stringVar1 + ""<false/>"");
}
} else if (value instanceof List) {
out.println(stringVar1 + ""<array>"");
Iterator iteratorVar3 = iteratorLiteral4;
while (iteratorVar3.hasNext()) {
printValue(out, indentLevel + 1, iteratorVar3.next());
}
out.println(stringVar1 + ""</array>"");
} else if (value instanceof HierarchicalConfiguration) {
printNode(out, indentLevel, ((HierarchicalConfiguration) value).getRoot());
} else if (value instanceof Configuration) {
out.println(stringVar1 + ""<dict>"");
Configuration configurationVar5 = configurationLiteral6;
Iterator iteratorVar3 = iteratorLiteral7;
while (iteratorVar3.hasNext()) {
String stringVar8 = stringLiteral9;
Node nodeVar10 = nodeLiteral11;
nodeVar10.setValue(configurationVar5.getProperty(stringVar8));
printNode(out, indentLevel + 1, nodeVar10);
if (iteratorVar3.hasNext()) {
out.println();
}
}
out.println(stringVar1 + ""</dict>"");
} else if (value instanceof Map) {
Map mapVar12 = mapLiteral13;
printValue(out, indentLevel, new MapConfiguration(mapVar12));
} else if (value instanceof byte[]) {
String stringVar14 = stringLiteral15;
out.println(stringVar1 + ""<data>"" + StringEscapeUtils.escapeXml(stringVar14) + ""</data>"");
} else {
out.println(stringVar1 + ""<string>"" + StringEscapeUtils.escapeXml(String.valueOf(value)) + ""</string>"");
}
}"
5851,PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,FP,configuration,3062,"private StringBuffer buffer = new StringBuffer();
private List stack = new ArrayList();
public XMLPropertyListHandler(Node root)
{
push(root);
}
private Node peek()
{
if (!stack.isEmpty())
{
return (Node) stack.get(stack.size() - 1);
}
else
{
return null;
}
}
private Node pop()
{
if (!stack.isEmpty())
{
return (Node) stack.remove(stack.size() - 1);
}
else
{
return null;
}
}
private void push(Node node)
{
stack.add(node);
}
public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException
{
if (""array"".equals(qName))
{
push(new ArrayNode());
}
else if (""dict"".equals(qName))
{
if (peek() instanceof ArrayNode)
{
XMLPropertyListConfiguration config = new XMLPropertyListConfiguration();
ArrayNode node = (ArrayNode) peek();
node.addValue(config);
push(config.getRoot());
}
}
}
public void endElement(String uri, String localName, String qName) throws SAXException
{
if (""key"".equals(qName))
{
PListNode node = new PListNode();
node.setName(buffer.toString());
peek().addChild(node);
push(node);
}
else if (""dict"".equals(qName))
{
pop();
}
else
{
if (""string"".equals(qName))
{
((PListNode) peek()).addValue(buffer.toString());
}
else if (""integer"".equals(qName))
{
((PListNode) peek()).addIntegerValue(buffer.toString());
}
else if (""real"".equals(qName))
{
((PListNode) peek()).addRealValue(buffer.toString());
}
else if (""true"".equals(qName))
{
((PListNode) peek()).addTrueValue();
}
else if (""false"".equals(qName))
{
((PListNode) peek()).addFalseValue();
}
else if (""data"".equals(qName))
{
((PListNode) peek()).addDataValue(buffer.toString());
}
else if (""date"".equals(qName))
{
((PListNode) peek()).addDateValue(buffer.toString());
}
else if (""array"".equals(qName))
{
ArrayNode array = (ArrayNode) pop();
((PListNode) peek()).addList(array);
}
if (!(peek() instanceof ArrayNode))
{
pop();
}
}
buffer.setLength(0);
}
public void characters(char[] ch, int start, int length) throws SAXException
{
buffer.append(ch, start, length);
}
","public void setProperty(String key, Object value) {
if (value instanceof byte[]) {
fireEvent(EVENT_SET_PROPERTY, key, value, true);
setDetailEvents(false);
try {
clearProperty(key);
addPropertyDirect(key, value);
} finally {
setDetailEvents(true);
}
fireEvent(EVENT_SET_PROPERTY, key, value, false);
} else {
super.setProperty(key, value);
}
}","public void setProperty(String key, Object value) {
if (value instanceof byte[]) {
fireEvent(EVENT_SET_PROPERTY, key, value, true);
setDetailEvents(false);
try {
clearProperty(key);
addPropertyDirect(key, value);
} finally {
setDetailEvents(true);
}
fireEvent(EVENT_SET_PROPERTY, key, value, false);
} else {
super.setProperty(key, value);
}
}"
5856,DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,configuration,3067,".get(positionToIndex(getPosition())));
","public NodePointer getNodePointer() {
if (getPosition() < 1 && !setPosition(1)) {
return null;
}
return createNodePointer((ConfigurationNode) subNodes.get(positionToIndex(getPosition())));
}","public NodePointer getNodePointer() {
if (getPosition() < 1 && !setPosition(1)) {
return null;
}
return createNodePointer((ConfigurationNode) subNodes.get(positionToIndex(getPosition())));
}"
5946,I18N,DM_DEFAULT_ENCODING,FP,configuration,3157,"dump(configuration, new PrintWriter(out));
","public static void dump(ImmutableConfiguration configuration, PrintStream out) {
dump(configuration, new PrintWriter(out));
}","public static void dump(ImmutableConfiguration configuration, PrintStream out) {
dump(configuration, new PrintWriter(out));
}"
5959,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,configuration,3170,"return new ConfigurationBuilderResultCreatedEvent(this,
","private ConfigurationBuilderEvent createEventWithChangedSource(ConfigurationBuilderEvent event) {
if (ConfigurationBuilderResultCreatedEvent.RESULT_CREATED.equals(event.getEventType())) {
return new ConfigurationBuilderResultCreatedEvent(this, ConfigurationBuilderResultCreatedEvent.RESULT_CREATED, ((ConfigurationBuilderResultCreatedEvent) event).getConfiguration());
}
@SuppressWarnings(""unchecked"")
EventType<? extends ConfigurationBuilderEvent> type = (EventType<? extends ConfigurationBuilderEvent>) event.getEventType();
return new ConfigurationBuilderEvent(this, type);
}","private ConfigurationBuilderEvent createEventWithChangedSource(ConfigurationBuilderEvent event) {
if (ConfigurationBuilderResultCreatedEvent.RESULT_CREATED.equals(event.getEventType())) {
return new ConfigurationBuilderResultCreatedEvent(this, ConfigurationBuilderResultCreatedEvent.RESULT_CREATED, ((ConfigurationBuilderResultCreatedEvent) event).getConfiguration());
}
@SuppressWarnings(""unchecked"")
EventType<? extends ConfigurationBuilderEvent> eventtype<? extends configurationbuilderevent>Var1 = eventtype<? extends configurationbuilderevent>Literal2;
return new ConfigurationBuilderEvent(this, eventtype<? extends configurationbuilderevent>Var1);
}"
5971,PERFORMANCE,URF_UNREAD_FIELD,FP,configuration,3182,private final String protocol;,private final String protocol;,private final String stringVar1;
5973,DODGY_CODE,REC_CATCH_EXCEPTION,FP,configuration,3184,"catch (Exception ex)
","private FileSystemOptions getOptions(String scheme) {
FileSystemOptions opts = new FileSystemOptions();
FileSystemConfigBuilder builder;
try {
builder = VFS.getManager().getFileSystemConfigBuilder(scheme);
} catch (Exception ex) {
return null;
}
FileOptionsProvider provider = getFileOptionsProvider();
if (provider != null) {
Map<String, Object> map = provider.getOptions();
if (map == null) {
return null;
}
int count = 0;
for (Map.Entry<String, Object> entry : map.entrySet()) {
try {
String key = entry.getKey();
if (FileOptionsProvider.CURRENT_USER.equals(key)) {
key = ""creatorName"";
}
setProperty(builder, opts, key, entry.getValue());
++count;
} catch (Exception ex) {
continue;
}
}
if (count > 0) {
return opts;
}
}
return null;
}","private FileSystemOptions getOptions(String scheme) {
FileSystemOptions filesystemoptionsVar1 = filesystemoptionsLiteral2;
FileSystemConfigBuilder filesystemconfigbuilderVar3;
try {
filesystemconfigbuilderVar3 = VFS.getManager().getFileSystemConfigBuilder(scheme);
} catch (Exception ex) {
return null;
}
FileOptionsProvider fileoptionsproviderVar4 = fileoptionsproviderLiteral5;
if (fileoptionsproviderVar4 != null) {
Map<String, Object> map<string,object>Var6 = map<string,object>Literal7;
if (map<string,object>Var6 == null) {
return null;
}
int intVar8 = intLiteral9;
for (Map.Entry<String, Object> map.entry<string,object>Var10 : map<string,object>Var6.entrySet()) {
try {
String stringVar11 = stringLiteral12;
if (FileOptionsProvider.CURRENT_USER.equals(stringVar11)) {
stringVar11 = ""creatorName"";
}
setProperty(filesystemconfigbuilderVar3, filesystemoptionsVar1, stringVar11, map.entry<string,object>Var10.getValue());
++intVar8;
} catch (Exception ex) {
continue;
}
}
if (intVar8 > 0) {
return filesystemoptionsVar1;
}
}
return null;
}"
5985,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,configuration,3196,"return new ConfigurationNodePointer((ConfigurationNodePointer) parent,
","@Override
@SuppressWarnings(""unchecked"")
public NodePointer createNodePointer(NodePointer parent, QName name, Object bean) {
if (bean instanceof NodeWrapper) {
NodeWrapper<?> wrapper = (NodeWrapper<?>) bean;
return new ConfigurationNodePointer((ConfigurationNodePointer) parent, wrapper.getNode(), wrapper.getNodeHandler());
}
return null;
}","@Override
@SuppressWarnings(""unchecked"")
public NodePointer createNodePointer(NodePointer parent, QName name, Object bean) {
if (bean instanceof NodeWrapper) {
NodeWrapper<?> nodewrapper<?>Var1 = nodewrapper<?>Literal2;
return new ConfigurationNodePointer((ConfigurationNodePointer) parent, nodewrapper<?>Var1.getNode(), nodewrapper<?>Var1.getNodeHandler());
}
return null;
}"
6180,DODGY_CODE,REC_CATCH_EXCEPTION,FP,configuration,3391,"catch (Exception e)
","@Override
public void read(Reader in) throws ConfigurationException {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setNamespaceAware(false);
factory.setValidating(true);
try {
SAXParser parser = factory.newSAXParser();
XMLReader xmlReader = parser.getXMLReader();
xmlReader.setEntityResolver(new EntityResolver() {
@Override
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlReader.setContentHandler(new XMLPropertiesHandler());
xmlReader.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
// todo: support included properties ?
}","@Override
public void read(Reader in) throws ConfigurationException {
SAXParserFactory saxparserfactoryVar1 = saxparserfactoryLiteral2;
saxparserfactoryVar1.setNamespaceAware(false);
saxparserfactoryVar1.setValidating(true);
try {
SAXParser saxparserVar3 = saxparserLiteral4;
XMLReader xmlreaderVar5 = xmlreaderLiteral6;
xmlreaderVar5.setEntityResolver(new EntityResolver() {
@Override
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlreaderVar5.setContentHandler(new XMLPropertiesHandler());
xmlreaderVar5.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
// todo: support included properties ?
}"
6213,PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,configuration,3424,"{
@Override
public InputSource resolveEntity(String publicId, String systemId)
{
return new InputSource(getClass().getClassLoader()
.getResourceAsStream(""PropertyList-1.0.dtd""));
","@Override
public void read(Reader in) throws ConfigurationException {
EntityResolver resolver = new EntityResolver() {
@Override
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
};
XMLPropertyListHandler handler = new XMLPropertyListHandler();
try {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
getNodeModel().mergeRoot(handler.getResultBuilder().createNode(), null, null, null, this);
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}","@Override
public void read(Reader in) throws ConfigurationException {
EntityResolver entityresolverVar1 = entityresolverLiteral2;
XMLPropertyListHandler xmlpropertylisthandlerVar3 = xmlpropertylisthandlerLiteral4;
try {
SAXParserFactory saxparserfactoryVar5 = saxparserfactoryLiteral6;
saxparserfactoryVar5.setValidating(true);
SAXParser saxparserVar7 = saxparserLiteral8;
saxparserVar7.getXMLReader().setEntityResolver(entityresolverVar1);
saxparserVar7.getXMLReader().setContentHandler(xmlpropertylisthandlerVar3);
saxparserVar7.getXMLReader().parse(new InputSource(in));
getNodeModel().mergeRoot(xmlpropertylisthandlerVar3.getResultBuilder().createNode(), null, null, null, this);
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}"
6216,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,configuration,3427,"ConfigurationInterpolator ci = ((CatalogManager) catalogManager).getInterpolator();
","@Override
protected String normalizeURI(String uriref) {
ConfigurationInterpolator ci = ((CatalogManager) catalogManager).getInterpolator();
String resolved = (ci != null) ? String.valueOf(ci.interpolate(uriref)) : uriref;
return super.normalizeURI(resolved);
}","@Override
protected String normalizeURI(String uriref) {
ConfigurationInterpolator configurationinterpolatorVar1 = configurationinterpolatorLiteral2;
String stringVar3 = stringLiteral4;
return super.normalizeURI(stringVar3);
}"
6367,PERFORMANCE,DM_FP_NUMBER_CTOR,FP,configuration,3578,"return getFloat(key, new Float(defaultValue)).floatValue();
","public float getFloat(String key, float defaultValue) {
return getFloat(key, new Float(defaultValue)).floatValue();
}","public float getFloat(String key, float defaultValue) {
return getFloat(key, new Float(defaultValue)).floatValue();
}"
6368,PERFORMANCE,DM_NUMBER_CTOR,FP,configuration,3579,"return getByte(key, new Byte(defaultValue)).byteValue();
","public byte getByte(String key, byte defaultValue) {
return getByte(key, new Byte(defaultValue)).byteValue();
}","public byte getByte(String key, byte defaultValue) {
return getByte(key, new Byte(defaultValue)).byteValue();
}"
6369,PERFORMANCE,DM_NUMBER_CTOR,FP,configuration,3580,"return getLong(key, new Long(defaultValue)).longValue();
","public long getLong(String key, long defaultValue) {
return getLong(key, new Long(defaultValue)).longValue();
}","public long getLong(String key, long defaultValue) {
return getLong(key, new Long(defaultValue)).longValue();
}"
6384,EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,FP,configuration,3595,"ResultSet rs = pstmt.executeQuery();
","public boolean containsKey(String key) {
boolean found = false;
StringBuilder query = new StringBuilder(""SELECT * FROM "" + table + "" WHERE "" + keyColumn + ""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
ResultSet rs = pstmt.executeQuery();
found = rs.next();
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
close(conn, pstmt);
}
return found;
}","public boolean containsKey(String key) {
boolean booleanVar1 = booleanLiteral2;
StringBuilder stringbuilderVar3 = stringbuilderLiteral4;
if (nameColumn != null) {
stringbuilderVar3.append("" AND "" + nameColumn + ""=?"");
}
Connection connectionVar5 = connectionLiteral6;
PreparedStatement preparedstatementVar7 = connectionLiteral6;
try {
connectionVar5 = getConnection();
preparedstatementVar7 = connectionVar5.prepareStatement(stringbuilderVar3.toString());
preparedstatementVar7.setString(1, key);
if (nameColumn != null) {
preparedstatementVar7.setString(2, name);
}
ResultSet resultsetVar8 = resultsetLiteral9;
booleanVar1 = resultsetVar8.next();
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
close(connectionVar5, preparedstatementVar7);
}
return booleanVar1;
}"
6390,EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,FP,configuration,3601,"ResultSet rs = pstmt.executeQuery();
","public boolean isEmpty() {
boolean empty = true;
StringBuilder query = new StringBuilder(""SELECT count(*) FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
ResultSet rs = pstmt.executeQuery();
if (rs.next()) {
empty = rs.getInt(1) == 0;
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(conn, pstmt);
}
return empty;
}","public boolean isEmpty() {
boolean booleanVar1 = booleanLiteral2;
StringBuilder stringbuilderVar3 = stringbuilderLiteral4;
if (nameColumn != null) {
stringbuilderVar3.append("" WHERE "" + nameColumn + ""=?"");
}
Connection connectionVar5 = connectionLiteral6;
PreparedStatement preparedstatementVar7 = connectionLiteral6;
try {
connectionVar5 = getConnection();
preparedstatementVar7 = connectionVar5.prepareStatement(stringbuilderVar3.toString());
if (nameColumn != null) {
preparedstatementVar7.setString(1, name);
}
ResultSet resultsetVar8 = resultsetLiteral9;
if (resultsetVar8.next()) {
booleanVar1 = resultsetVar8.getInt(1) == 0;
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(connectionVar5, preparedstatementVar7);
}
return booleanVar1;
}"
6394,BAD_PRACTICE,SE_BAD_FIELD,FP,configuration,3605,"private Map<String, ConfigurationProvider> providers;","private Map<String, ConfigurationProvider> providers;","private Map<String, ConfigurationProvider> map<string,configurationprovider>Var1;"
6401,BAD_PRACTICE,SE_INNER_CLASS,FP,configuration,3612,"{
@Override
protected Object interpolate(Object value)
{
return parent.interpolate(value);
",private ConfigurationNode rootNode;,private ConfigurationNode configurationnodeVar1;
6406,BAD_PRACTICE,SE_NO_SERIALVERSIONID,FP,configuration,3617,"super();
reloadLock = new Lock(LOCK_NAME);
}
public HierarchicalReloadableConfiguration(Object lock)
{
super();
reloadLock = lock == null ? new Lock(LOCK_NAME) : lock;
}
public HierarchicalReloadableConfiguration(HierarchicalConfiguration c)
{
super(c);
reloadLock = new Lock(LOCK_NAME);
}
@Override
public Object getReloadLock()
{
return reloadLock;
",private final Object reloadLock;,private final Object objectVar1;
6409,DODGY_CODE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,FP,configuration,3620,"instanceId = ++counter;
","public Lock(String name) {
this.name = name;
synchronized (counterLock) {
instanceId = ++counter;
}
}","public Lock(String name) {
this.name = name;
synchronized (counterLock) {
instanceId = ++counter;
}
}"
6411,PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,configuration,3622,"{
@Override
public void load() throws ConfigurationException
{
}
@Override
public void save() throws ConfigurationException
{
}
",private ReloadingStrategy fileStrategy;,private ReloadingStrategy reloadingstrategyVar1;
6412,BAD_PRACTICE,SE_BAD_FIELD,FP,configuration,3623,private ReloadingStrategy fileStrategy;,private ReloadingStrategy fileStrategy;,private ReloadingStrategy reloadingstrategyVar1;
6415,Multithreaded correctness,RV_RETURN_VALUE_OF_PUTIFABSENT_IGNORED,FP,configuration,3626,"configurationsMap.putIfAbsent(pattern, configuration);
","private AbstractHierarchicalFileConfiguration getConfiguration() {
if (pattern == null) {
throw new ConfigurationRuntimeException(""File pattern must be defined"");
}
String path = localSubst.replace(pattern);
if (configurationsMap.containsKey(path)) {
return configurationsMap.get(path);
}
if (path.equals(pattern)) {
XMLConfiguration configuration = new XMLConfiguration() {
@Override
public void load() throws ConfigurationException {
}
@Override
public void save() throws ConfigurationException {
}
};
configurationsMap.putIfAbsent(pattern, configuration);
return configuration;
}
XMLConfiguration configuration = new XMLConfiguration();
if (loggerName != null) {
Log log = LogFactory.getLog(loggerName);
if (log != null) {
configuration.setLogger(log);
}
}
configuration.setBasePath(getBasePath());
configuration.setFileName(path);
configuration.setFileSystem(getFileSystem());
configuration.setExpressionEngine(getExpressionEngine());
ReloadingStrategy strategy = createReloadingStrategy();
if (strategy != null) {
configuration.setReloadingStrategy(strategy);
}
configuration.setDelimiterParsingDisabled(isDelimiterParsingDisabled());
configuration.setAttributeSplittingDisabled(isAttributeSplittingDisabled());
configuration.setValidating(validating);
configuration.setSchemaValidation(schemaValidation);
configuration.setEntityResolver(entityResolver);
configuration.setListDelimiter(getListDelimiter());
configuration.addConfigurationListener(this);
configuration.addErrorListener(this);
try {
configuration.load();
} catch (ConfigurationException ce) {
if (isThrowable(ce)) {
throw new ConfigurationRuntimeException(ce);
}
}
configurationsMap.putIfAbsent(path, configuration);
return configurationsMap.get(path);
}","private AbstractHierarchicalFileConfiguration getConfiguration() {
if (pattern == null) {
throw new ConfigurationRuntimeException(""File pattern must be defined"");
}
String stringVar1 = stringLiteral2;
if (configurationsMap.containsKey(stringVar1)) {
return configurationsMap.get(stringVar1);
}
if (stringVar1.equals(pattern)) {
XMLConfiguration xmlconfigurationVar3 = xmlconfigurationLiteral4;
configurationsMap.putIfAbsent(pattern, xmlconfigurationVar3);
return xmlconfigurationVar3;
}
XMLConfiguration xmlconfigurationVar3 = xmlconfigurationLiteral5;
if (loggerName != null) {
Log logVar6 = logLiteral7;
if (logVar6 != null) {
xmlconfigurationVar3.setLogger(logVar6);
}
}
xmlconfigurationVar3.setBasePath(getBasePath());
xmlconfigurationVar3.setFileName(stringVar1);
xmlconfigurationVar3.setFileSystem(getFileSystem());
xmlconfigurationVar3.setExpressionEngine(getExpressionEngine());
ReloadingStrategy reloadingstrategyVar8 = reloadingstrategyLiteral9;
if (reloadingstrategyVar8 != null) {
xmlconfigurationVar3.setReloadingStrategy(reloadingstrategyVar8);
}
xmlconfigurationVar3.setDelimiterParsingDisabled(isDelimiterParsingDisabled());
xmlconfigurationVar3.setAttributeSplittingDisabled(isAttributeSplittingDisabled());
xmlconfigurationVar3.setValidating(validating);
xmlconfigurationVar3.setSchemaValidation(schemaValidation);
xmlconfigurationVar3.setEntityResolver(entityResolver);
xmlconfigurationVar3.setListDelimiter(getListDelimiter());
xmlconfigurationVar3.addConfigurationListener(this);
xmlconfigurationVar3.addErrorListener(this);
try {
xmlconfigurationVar3.load();
} catch (ConfigurationException ce) {
if (isThrowable(ce)) {
throw new ConfigurationRuntimeException(ce);
}
}
configurationsMap.putIfAbsent(stringVar1, xmlconfigurationVar3);
return configurationsMap.get(stringVar1);
}"
6417,CORRECTNESS,UR_UNINIT_READ_CALLED_FROM_SUPER_CONSTRUCTOR,FP,configuration,3628,"if (init)
","@Override
public void setRootNode(ConfigurationNode rootNode) {
if (init) {
this.getConfiguration().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}","@Override
public void setRootNode(ConfigurationNode rootNode) {
if (init) {
this.getConfiguration().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}"
6420,PERFORMANCE,DM_NUMBER_CTOR,FP,configuration,3631,"return new Long(n.longValue());
","public static Long toLong(Object value) throws ConversionException {
Number n = toNumber(value, Long.class);
if (n instanceof Long) {
return (Long) n;
} else {
return new Long(n.longValue());
}
}","public static Long toLong(Object value) throws ConversionException {
Number numberVar1 = numberLiteral2;
if (numberVar1 instanceof Long) {
return (Long) numberVar1;
} else {
return new Long(numberVar1.longValue());
}
}"
6428,DODGY_CODE,REC_CATCH_EXCEPTION,FP,configuration,3639,"catch (Exception ex)
","private FileSystemOptions getOptions(String scheme) {
FileSystemOptions opts = new FileSystemOptions();
FileSystemConfigBuilder builder;
try {
builder = VFS.getManager().getFileSystemConfigBuilder(scheme);
} catch (Exception ex) {
return null;
}
FileOptionsProvider provider = getFileOptionsProvider();
if (provider != null) {
Map<String, Object> map = provider.getOptions();
if (map == null) {
return null;
}
int count = 0;
for (Map.Entry<String, Object> entry : map.entrySet()) {
try {
String key = entry.getKey();
if (FileOptionsProvider.CURRENT_USER.equals(key)) {
key = ""creatorName"";
}
setProperty(builder, opts, key, entry.getValue());
++count;
} catch (Exception ex) {
continue;
}
}
if (count > 0) {
return opts;
}
}
return null;
}","private FileSystemOptions getOptions(String scheme) {
FileSystemOptions filesystemoptionsVar1 = filesystemoptionsLiteral2;
FileSystemConfigBuilder filesystemconfigbuilderVar3;
try {
filesystemconfigbuilderVar3 = VFS.getManager().getFileSystemConfigBuilder(scheme);
} catch (Exception ex) {
return null;
}
FileOptionsProvider fileoptionsproviderVar4 = fileoptionsproviderLiteral5;
if (fileoptionsproviderVar4 != null) {
Map<String, Object> map<string,object>Var6 = map<string,object>Literal7;
if (map<string,object>Var6 == null) {
return null;
}
int intVar8 = intLiteral9;
for (Map.Entry<String, Object> map.entry<string,object>Var10 : map<string,object>Var6.entrySet()) {
try {
String stringVar11 = stringLiteral12;
if (FileOptionsProvider.CURRENT_USER.equals(stringVar11)) {
stringVar11 = ""creatorName"";
}
setProperty(filesystemconfigbuilderVar3, filesystemoptionsVar1, stringVar11, map.entry<string,object>Var10.getValue());
++intVar8;
} catch (Exception ex) {
continue;
}
}
if (intVar8 > 0) {
return filesystemoptionsVar1;
}
}
return null;
}"
6436,PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,configuration,3647,"{
@Override
public void error(SAXParseException ex) throws SAXException
{
throw ex;
",private EntityResolver entityResolver = new DefaultEntityResolver();,private EntityResolver entityresolverVar1 = entityresolverLiteral2;
6441,DODGY_CODE,REC_CATCH_EXCEPTION,FP,configuration,3652,"catch (Exception ex)
","private static Class<?> getDefaultClass(Object bean, String propName) {
try {
PropertyDescriptor desc = PropertyUtils.getPropertyDescriptor(bean, propName);
if (desc == null) {
return null;
}
return desc.getPropertyType();
} catch (Exception ex) {
return null;
}
}","private static Class<?> getDefaultClass(Object bean, String propName) {
try {
PropertyDescriptor propertydescriptorVar1 = propertydescriptorLiteral2;
if (propertydescriptorVar1 == null) {
return null;
}
return propertydescriptorVar1.getPropertyType();
} catch (Exception ex) {
return null;
}
}"
6450,DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,FP,configuration,3661,"String name = (url == null) ? fileName : url.toString();
","@Override
public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
String base = ((CatalogManager) catalogManager).getBaseDir();
@SuppressWarnings(""unchecked"")
Vector<String> catalogs = catalogManager.getCatalogFiles();
if (catalogs != null) {
for (int count = 0; count < catalogs.size(); count++) {
String fileName = (String) catalogs.elementAt(count);
URL url = null;
InputStream is = null;
try {
url = ConfigurationUtils.locate(fs, base, fileName);
if (url != null) {
is = fs.getInputStream(url);
}
} catch (ConfigurationException ce) {
String name = (url == null) ? fileName : url.toString();
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + name + "". "" + ce.getMessage());
}
if (is != null) {
String mimeType = fileNameMap.getContentTypeFor(fileName);
try {
if (mimeType != null) {
parseCatalog(mimeType, is);
continue;
}
} catch (Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + fileName + "". "" + ex.getMessage());
} finally {
is.close();
}
}
parseCatalog(base, fileName);
}
}
}","@Override
public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
String stringVar1 = stringLiteral2;
@SuppressWarnings(""unchecked"")
Vector<String> vector<string>Var3 = vector<string>Literal4;
if (vector<string>Var3 != null) {
for (int intVar16 = intLiteral17; intVar5 < intLiteral1; intVar5++) {
String stringVar7 = stringLiteral8;
URL urlVar9 = urlLiteral10;
InputStream inputstreamVar11 = urlLiteral10;
try {
urlVar9 = ConfigurationUtils.locate(fs, stringVar1, stringVar7);
if (urlVar9 != null) {
inputstreamVar11 = fs.getInputStream(urlVar9);
}
} catch (ConfigurationException ce) {
String stringVar12 = stringLiteral13;
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + stringVar12 + "". "" + ce.getMessage());
}
if (inputstreamVar11 != null) {
String stringVar14 = stringLiteral15;
try {
if (stringVar14 != null) {
parseCatalog(stringVar14, inputstreamVar11);
continue;
}
} catch (Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + stringVar7 + "". "" + ex.getMessage());
} finally {
inputstreamVar11.close();
}
}
parseCatalog(stringVar1, stringVar7);
}
}
}"
6453,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,configuration,3664,"fs = ((CatalogManager) catalogManager).getFileSystem();
","@Override
public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
String base = ((CatalogManager) catalogManager).getBaseDir();
@SuppressWarnings(""unchecked"")
Vector<String> catalogs = catalogManager.getCatalogFiles();
if (catalogs != null) {
for (int count = 0; count < catalogs.size(); count++) {
String fileName = (String) catalogs.elementAt(count);
URL url = null;
InputStream is = null;
try {
url = ConfigurationUtils.locate(fs, base, fileName);
if (url != null) {
is = fs.getInputStream(url);
}
} catch (ConfigurationException ce) {
String name = (url == null) ? fileName : url.toString();
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + name + "". "" + ce.getMessage());
}
if (is != null) {
String mimeType = fileNameMap.getContentTypeFor(fileName);
try {
if (mimeType != null) {
parseCatalog(mimeType, is);
continue;
}
} catch (Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + fileName + "". "" + ex.getMessage());
} finally {
is.close();
}
}
parseCatalog(base, fileName);
}
}
}","@Override
public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
String stringVar1 = stringLiteral2;
@SuppressWarnings(""unchecked"")
Vector<String> vector<string>Var3 = vector<string>Literal4;
if (vector<string>Var3 != null) {
for (int intVar16 = intLiteral17; intVar5 < intLiteral1; intVar5++) {
String stringVar7 = stringLiteral8;
URL urlVar9 = urlLiteral10;
InputStream inputstreamVar11 = urlLiteral10;
try {
urlVar9 = ConfigurationUtils.locate(fs, stringVar1, stringVar7);
if (urlVar9 != null) {
inputstreamVar11 = fs.getInputStream(urlVar9);
}
} catch (ConfigurationException ce) {
String stringVar12 = stringLiteral13;
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + stringVar12 + "". "" + ce.getMessage());
}
if (inputstreamVar11 != null) {
String stringVar14 = stringLiteral15;
try {
if (stringVar14 != null) {
parseCatalog(stringVar14, inputstreamVar11);
continue;
}
} catch (Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + stringVar7 + "". "" + ex.getMessage());
} finally {
inputstreamVar11.close();
}
}
parseCatalog(stringVar1, stringVar7);
}
}
}"
6455,DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,configuration,3666,"List<ConfigurationNode> lst = namedNodes.get(node.getName());
","public boolean removeNode(ConfigurationNode node) {
if (nodes != null && node != null && nodes.contains(node)) {
detachNode(node);
nodes.remove(node);
List<ConfigurationNode> lst = namedNodes.get(node.getName());
if (lst != null) {
lst.remove(node);
if (lst.isEmpty()) {
namedNodes.remove(node.getName());
}
}
return true;
} else {
return false;
}
}","public boolean removeNode(ConfigurationNode node) {
if (nodes != null && node != null && nodes.contains(node)) {
detachNode(node);
nodes.remove(node);
List<ConfigurationNode> list<configurationnode>Var1 = list<configurationnode>Literal2;
if (list<configurationnode>Var1 != null) {
list<configurationnode>Var1.remove(node);
if (list<configurationnode>Var1.isEmpty()) {
namedNodes.remove(node.getName());
}
}
return true;
} else {
return false;
}
}"
6457,DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,configuration,3668,"return createNodePointer(subNodes.get(positionToIndex(getPosition())));
","public NodePointer getNodePointer() {
if (getPosition() < 1 && !setPosition(1)) {
return null;
}
return createNodePointer(subNodes.get(positionToIndex(getPosition())));
}","public NodePointer getNodePointer() {
if (getPosition() < 1 && !setPosition(1)) {
return null;
}
return createNodePointer(subNodes.get(positionToIndex(getPosition())));
}"
6458,DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,configuration,3669,"return reverse ? getStartOffset() + 1 : subNodes.size()
","protected int getMaxPosition() {
return reverse ? getStartOffset() + 1 : subNodes.size() - getStartOffset();
}","protected int getMaxPosition() {
return reverse ? getStartOffset() + 1 : subNodes.size() - getStartOffset();
}"
6471,DODGY_CODE,RI_REDUNDANT_INTERFACES,FP,configuration,3682,"public class CombinedConfiguration extends BaseHierarchicalConfiguration implements
EventListener<ConfigurationEvent>, Cloneable
{
public static final EventType<ConfigurationEvent> COMBINED_INVALIDATE =
new EventType<ConfigurationEvent>(ConfigurationEvent.ANY,
""COMBINED_INVALIDATE"");
private static final DefaultExpressionEngine AT_ENGINE = DefaultExpressionEngine.INSTANCE;
private static final NodeCombiner DEFAULT_COMBINER = new UnionCombiner();
private static final ImmutableNode EMPTY_ROOT = new ImmutableNode.Builder()
.create();
private NodeCombiner nodeCombiner;
private List<ConfigData> configurations;
private Map<String, Configuration> namedConfigurations;
private ExpressionEngine conversionExpressionEngine;
private boolean upToDate;
public CombinedConfiguration(NodeCombiner comb)
{
nodeCombiner = (comb != null) ? comb : DEFAULT_COMBINER;
initChildCollections();
}
public CombinedConfiguration()
{
this(null);
}
public NodeCombiner getNodeCombiner()
{
beginRead(true);
try
{
return nodeCombiner;
}
finally
{
endRead();
}
}
public void setNodeCombiner(NodeCombiner nodeCombiner)
{
if (nodeCombiner == null)
{
throw new IllegalArgumentException(
""Node combiner must not be null!"");
}
beginWrite(true);
try
{
this.nodeCombiner = nodeCombiner;
invalidateInternal();
}
finally
{
endWrite();
}
}
public ExpressionEngine getConversionExpressionEngine()
{
beginRead(true);
try
{
return conversionExpressionEngine;
}
finally
{
endRead();
}
}
public void setConversionExpressionEngine(
ExpressionEngine conversionExpressionEngine)
{
beginWrite(true);
try
{
this.conversionExpressionEngine = conversionExpressionEngine;
}
finally
{
endWrite();
}
}
public void addConfiguration(Configuration config, String name,
String at)
{
if (config == null)
{
throw new IllegalArgumentException(
""Added configuration must not be null!"");
}
beginWrite(true);
try
{
if (name != null && namedConfigurations.containsKey(name))
{
throw new ConfigurationRuntimeException(
""A configuration with the name '""
+ name
+ ""' already exists in this combined configuration!"");
}
ConfigData cd = new ConfigData(config, name, at);
if (getLogger().isDebugEnabled())
{
getLogger()
.debug(""Adding configuration "" + config + "" with name ""
+ name);
}
configurations.add(cd);
if (name != null)
{
namedConfigurations.put(name, config);
}
invalidateInternal();
}
finally
{
endWrite();
}
registerListenerAt(config);
}
public void addConfiguration(Configuration config, String name)
{
addConfiguration(config, name, null);
}
public void addConfiguration(Configuration config)
{
addConfiguration(config, null, null);
}
public int getNumberOfConfigurations()
{
beginRead(true);
try
{
return getNumberOfConfigurationsInternal();
}
finally
{
endRead();
}
}
public Configuration getConfiguration(int index)
{
beginRead(true);
try
{
ConfigData cd = configurations.get(index);
return cd.getConfiguration();
}
finally
{
endRead();
}
}
public Configuration getConfiguration(String name)
{
beginRead(true);
try
{
return namedConfigurations.get(name);
}
finally
{
endRead();
}
}
public List<Configuration> getConfigurations()
{
beginRead(true);
try
{
List<Configuration> list =
new ArrayList<Configuration>(getNumberOfConfigurationsInternal());
for (ConfigData cd : configurations)
{
list.add(cd.getConfiguration());
}
return list;
}
finally
{
endRead();
}
}
public List<String> getConfigurationNameList()
{
beginRead(true);
try
{
List<String> list = new ArrayList<String>(getNumberOfConfigurationsInternal());
for (ConfigData cd : configurations)
{
list.add(cd.getName());
}
return list;
}
finally
{
endRead();
}
}
public boolean removeConfiguration(Configuration config)
{
for (int index = 0; index < getNumberOfConfigurations(); index++)
{
if (configurations.get(index).getConfiguration() == config)
{
removeConfigurationAt(index);
return true;
}
}
return false;
}
public Configuration removeConfigurationAt(int index)
{
ConfigData cd = configurations.remove(index);
if (cd.getName() != null)
{
namedConfigurations.remove(cd.getName());
}
unregisterListenerAt(cd.getConfiguration());
invalidateInternal();
return cd.getConfiguration();
}
public Configuration removeConfiguration(String name)
{
Configuration conf = getConfiguration(name);
if (conf != null)
{
removeConfiguration(conf);
}
return conf;
}
public Set<String> getConfigurationNames()
{
beginRead(true);
try
{
return namedConfigurations.keySet();
}
finally
{
endRead();
}
}
public void invalidate()
{
beginWrite(true);
try
{
invalidateInternal();
}
finally
{
endWrite();
}
}
@Override
public void onEvent(ConfigurationEvent event)
{
if (event.isBeforeUpdate())
{
invalidate();
}
}
@Override
protected void clearInternal()
{
unregisterListenerAtChildren();
initChildCollections();
invalidateInternal();
}
@Override
public Object clone()
{
beginRead(false);
try
{
CombinedConfiguration copy = (CombinedConfiguration) super.clone();
copy.initChildCollections();
for (ConfigData cd : configurations)
{
copy.addConfiguration(ConfigurationUtils.cloneConfiguration(cd
.getConfiguration()), cd.getName(), cd.getAt());
}
return copy;
}
finally
{
endRead();
}
}
public Configuration getSource(String key)
{
if (key == null)
{
throw new IllegalArgumentException(""Key must not be null!"");
}
Set<Configuration> sources = getSources(key);
if (sources.isEmpty())
{
return null;
}
Iterator<Configuration> iterator = sources.iterator();
Configuration source = iterator.next();
if (iterator.hasNext())
{
throw new IllegalArgumentException(""The key "" + key
+ "" is defined by multiple sources!"");
}
return source;
}
public Set<Configuration> getSources(String key)
{
beginRead(false);
try
{
List<QueryResult<ImmutableNode>> results = fetchNodeList(key);
Set<Configuration> sources = new HashSet<Configuration>();
for (QueryResult<ImmutableNode> result : results)
{
Set<Configuration> resultSources =
findSourceConfigurations(result.getNode());
if (resultSources.isEmpty())
{
sources.add(this);
}
else
{
sources.addAll(resultSources);
}
}
return sources;
}
finally
{
endRead();
}
}
@Override
protected void beginRead(boolean optimize)
{
if (optimize)
{
super.beginRead(true);
return;
}
boolean lockObtained = false;
do
{
super.beginRead(false);
if (isUpToDate())
{
lockObtained = true;
}
else
{
endRead();
beginWrite(false); 
endWrite();
}
} while (!lockObtained);
}
@Override
protected void beginWrite(boolean optimize)
{
super.beginWrite(true);
if (optimize)
{
return;
}
try
{
if (!isUpToDate())
{
getSubConfigurationParentModel().replaceRoot(
constructCombinedNode(), this);
upToDate = true;
}
}
catch (RuntimeException rex)
{
endWrite();
throw rex;
}
}
private boolean isUpToDate()
{
return upToDate;
}
private void invalidateInternal()
{
upToDate = false;
fireEvent(COMBINED_INVALIDATE, null, null, false);
}
private void initChildCollections()
{
configurations = new ArrayList<ConfigData>();
namedConfigurations = new HashMap<String, Configuration>();
}
private ImmutableNode constructCombinedNode()
{
if (getNumberOfConfigurationsInternal() < 1)
{
if (getLogger().isDebugEnabled())
{
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
}
else
{
Iterator<ConfigData> it = configurations.iterator();
ImmutableNode node = it.next().getTransformedRoot();
while (it.hasNext())
{
node = nodeCombiner.combine(node,
it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled())
{
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}
private Set<Configuration> findSourceConfigurations(ImmutableNode node)
{
Set<Configuration> result = new HashSet<Configuration>();
FindNodeVisitor<ImmutableNode> visitor =
new FindNodeVisitor<ImmutableNode>(node);
for (ConfigData cd : configurations)
{
NodeTreeWalker.INSTANCE.walkBFS(cd.getRootNode(), visitor,
getModel().getNodeHandler());
if (visitor.isFound())
{
result.add(cd.getConfiguration());
visitor.reset();
}
}
return result;
}
private void registerListenerAt(Configuration configuration)
{
if (configuration instanceof EventSource)
{
((EventSource) configuration).addEventListener(
ConfigurationEvent.ANY, this);
}
}
private void unregisterListenerAt(Configuration configuration)
{
if (configuration instanceof EventSource)
{
((EventSource) configuration).removeEventListener(
ConfigurationEvent.ANY, this);
}
}
private void unregisterListenerAtChildren()
{
if (configurations != null)
{
for (ConfigData child : configurations)
{
unregisterListenerAt(child.getConfiguration());
}
}
}
private int getNumberOfConfigurationsInternal()
{
return configurations.size();
","public List<Configuration> getConfigurations() {
beginRead(true);
try {
List<Configuration> list = new ArrayList<Configuration>(getNumberOfConfigurationsInternal());
for (ConfigData cd : configurations) {
list.add(cd.getConfiguration());
}
return list;
} finally {
endRead();
}
}","public List<Configuration> getConfigurations() {
beginRead(true);
try {
List<Configuration> list<configuration>Var1 = list<configuration>Literal2;
for (ConfigData configdataVar3 : configurations) {
list<configuration>Var1.add(configdataVar3.getConfiguration());
}
return list<configuration>Var1;
} finally {
endRead();
}
}"
6472,DODGY_CODE,REC_CATCH_EXCEPTION,FP,configuration,3683,"catch (Exception ex)
","public static Synchronizer cloneSynchronizer(Synchronizer sync) {
if (sync == null) {
throw new IllegalArgumentException(""Synchronizer must not be null!"");
}
if (NoOpSynchronizer.INSTANCE == sync) {
return sync;
}
try {
return sync.getClass().newInstance();
} catch (Exception ex) {
LOG.info(""Cannot create new instance of "" + sync.getClass());
}
try {
return (Synchronizer) clone(sync);
} catch (CloneNotSupportedException cnex) {
throw new ConfigurationRuntimeException(""Cannot clone Synchronizer "" + sync);
}
}","public static Synchronizer cloneSynchronizer(Synchronizer sync) {
if (sync == null) {
throw new IllegalArgumentException(""Synchronizer must not be null!"");
}
if (NoOpSynchronizer.INSTANCE == sync) {
return sync;
}
try {
return sync.getClass().newInstance();
} catch (Exception ex) {
LOG.info(""Cannot create new instance of "" + sync.getClass());
}
try {
return (Synchronizer) clone(sync);
} catch (CloneNotSupportedException cnex) {
throw new ConfigurationRuntimeException(""Cannot clone Synchronizer "" + sync);
}
}"
6481,BAD_PRACTICE,SE_BAD_FIELD,FP,configuration,3692,private final ImmutableConfiguration configuration;,private final ImmutableConfiguration configuration;,private final ImmutableConfiguration immutableconfigurationVar1;
6487,PERFORMANCE,DM_FP_NUMBER_CTOR,FP,configuration,3698,"return new Double(n.doubleValue());
","public static Double toDouble(Object value) throws ConversionException {
Number n = toNumber(value, Double.class);
if (n instanceof Double) {
return (Double) n;
} else {
return new Double(n.doubleValue());
}
}","public static Double toDouble(Object value) throws ConversionException {
Number numberVar1 = numberLiteral2;
if (numberVar1 instanceof Double) {
return (Double) numberVar1;
} else {
return new Double(numberVar1.doubleValue());
}
}"
6503,DODGY_CODE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,FP,configuration,3714,"staticCatalog = catalog;
","@Override
public org.apache.xml.resolver.Catalog getPrivateCatalog() {
org.apache.xml.resolver.Catalog catalog = staticCatalog;
if (catalog == null || !getUseStaticCatalog()) {
try {
catalog = new Catalog();
catalog.setCatalogManager(this);
catalog.setupReaders();
catalog.loadSystemCatalogs();
} catch (Exception ex) {
ex.printStackTrace();
}
if (getUseStaticCatalog()) {
staticCatalog = catalog;
}
}
return catalog;
}","@Override
public org.apache.xml.resolver.Catalog getPrivateCatalog() {
org.apache.xml.resolver.Catalog org.apache.xml.resolver.catalogVar1 = org.apache.xml.resolver.catalogLiteral2;
if (org.apache.xml.resolver.catalogVar1 == null || !getUseStaticCatalog()) {
try {
org.apache.xml.resolver.catalogVar1 = new Catalog();
org.apache.xml.resolver.catalogVar1.setCatalogManager(this);
org.apache.xml.resolver.catalogVar1.setupReaders();
org.apache.xml.resolver.catalogVar1.loadSystemCatalogs();
} catch (Exception ex) {
ex.printStackTrace();
}
if (getUseStaticCatalog()) {
staticCatalog = org.apache.xml.resolver.catalogVar1;
}
}
return org.apache.xml.resolver.catalogVar1;
}"
6508,BAD_PRACTICE,SE_BAD_FIELD,FP,configuration,3719,private final QueryResult<T> attributeResult;,private final QueryResult<T> attributeResult;,private final QueryResult<T> queryresult<t>Var1;
6649,PERFORMANCE,DM_NUMBER_CTOR,FP,configuration,3860,"return getLong(key, new Long(defaultValue)).longValue();
","public long getLong(String key, long defaultValue) {
return getLong(key, new Long(defaultValue)).longValue();
}","public long getLong(String key, long defaultValue) {
return getLong(key, new Long(defaultValue)).longValue();
}"
6652,PERFORMANCE,DM_FP_NUMBER_CTOR,FP,configuration,3863,"value = array.length == 0 ? null : new Float(array[0]);
","protected Object resolveContainerStore(String key) {
Object value = getProperty(key);
if (value != null) {
if (value instanceof List) {
List list = (List) value;
value = list.isEmpty() ? null : list.get(0);
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
value = array.length == 0 ? null : array[0];
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
value = array.length == 0 ? null : array[0] ? Boolean.TRUE : Boolean.FALSE;
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
value = array.length == 0 ? null : new Byte(array[0]);
} else if (value instanceof short[]) {
short[] array = (short[]) value;
value = array.length == 0 ? null : new Short(array[0]);
} else if (value instanceof int[]) {
int[] array = (int[]) value;
value = array.length == 0 ? null : new Integer(array[0]);
} else if (value instanceof long[]) {
long[] array = (long[]) value;
value = array.length == 0 ? null : new Long(array[0]);
} else if (value instanceof float[]) {
float[] array = (float[]) value;
value = array.length == 0 ? null : new Float(array[0]);
} else if (value instanceof double[]) {
double[] array = (double[]) value;
value = array.length == 0 ? null : new Double(array[0]);
}
}
return value;
}","protected Object resolveContainerStore(String key) {
Object objectVar1 = objectLiteral2;
if (objectVar1 != null) {
if (objectVar1 instanceof List) {
List listVar3 = listLiteral4;
objectVar1 = listVar3.isEmpty() ? null : listVar3.get(0);
} else if (objectVar1 instanceof Object[]) {
Object[] objectArrayVar5 = objectArrayLiteral6;
objectVar1 = objectArrayVar5.length == 0 ? null : objectArrayVar5[0];
} else if (objectVar1 instanceof boolean[]) {
boolean[] objectArrayVar5 = booleanArrayLiteral7;
objectVar1 = objectArrayVar5.length == 0 ? null : objectArrayVar5[0] ? Boolean.TRUE : Boolean.FALSE;
} else if (objectVar1 instanceof byte[]) {
byte[] objectArrayVar5 = byteArrayLiteral8;
objectVar1 = objectArrayVar5.length == 0 ? null : new Byte(objectArrayVar5[0]);
} else if (objectVar1 instanceof short[]) {
short[] objectArrayVar5 = shortArrayLiteral9;
objectVar1 = objectArrayVar5.length == 0 ? null : new Short(objectArrayVar5[0]);
} else if (objectVar1 instanceof int[]) {
int[] objectArrayVar5 = intArrayLiteral10;
objectVar1 = objectArrayVar5.length == 0 ? null : new Integer(objectArrayVar5[0]);
} else if (objectVar1 instanceof long[]) {
long[] objectArrayVar5 = longArrayLiteral11;
objectVar1 = objectArrayVar5.length == 0 ? null : new Long(objectArrayVar5[0]);
} else if (objectVar1 instanceof float[]) {
float[] objectArrayVar5 = floatArrayLiteral12;
objectVar1 = objectArrayVar5.length == 0 ? null : new Float(objectArrayVar5[0]);
} else if (objectVar1 instanceof double[]) {
double[] objectArrayVar5 = doubleArrayLiteral13;
objectVar1 = objectArrayVar5.length == 0 ? null : new Double(objectArrayVar5[0]);
}
}
return objectVar1;
}"
6656,PERFORMANCE,DM_NUMBER_CTOR,FP,configuration,3867,"value = array.length == 0 ? null : new Short(array[0]);
","protected Object resolveContainerStore(String key) {
Object value = getProperty(key);
if (value != null) {
if (value instanceof List) {
List list = (List) value;
value = list.isEmpty() ? null : list.get(0);
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
value = array.length == 0 ? null : array[0];
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
value = array.length == 0 ? null : array[0] ? Boolean.TRUE : Boolean.FALSE;
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
value = array.length == 0 ? null : new Byte(array[0]);
} else if (value instanceof short[]) {
short[] array = (short[]) value;
value = array.length == 0 ? null : new Short(array[0]);
} else if (value instanceof int[]) {
int[] array = (int[]) value;
value = array.length == 0 ? null : new Integer(array[0]);
} else if (value instanceof long[]) {
long[] array = (long[]) value;
value = array.length == 0 ? null : new Long(array[0]);
} else if (value instanceof float[]) {
float[] array = (float[]) value;
value = array.length == 0 ? null : new Float(array[0]);
} else if (value instanceof double[]) {
double[] array = (double[]) value;
value = array.length == 0 ? null : new Double(array[0]);
}
}
return value;
}","protected Object resolveContainerStore(String key) {
Object objectVar1 = objectLiteral2;
if (objectVar1 != null) {
if (objectVar1 instanceof List) {
List listVar3 = listLiteral4;
objectVar1 = listVar3.isEmpty() ? null : listVar3.get(0);
} else if (objectVar1 instanceof Object[]) {
Object[] objectArrayVar5 = objectArrayLiteral6;
objectVar1 = objectArrayVar5.length == 0 ? null : objectArrayVar5[0];
} else if (objectVar1 instanceof boolean[]) {
boolean[] objectArrayVar5 = booleanArrayLiteral7;
objectVar1 = objectArrayVar5.length == 0 ? null : objectArrayVar5[0] ? Boolean.TRUE : Boolean.FALSE;
} else if (objectVar1 instanceof byte[]) {
byte[] objectArrayVar5 = byteArrayLiteral8;
objectVar1 = objectArrayVar5.length == 0 ? null : new Byte(objectArrayVar5[0]);
} else if (objectVar1 instanceof short[]) {
short[] objectArrayVar5 = shortArrayLiteral9;
objectVar1 = objectArrayVar5.length == 0 ? null : new Short(objectArrayVar5[0]);
} else if (objectVar1 instanceof int[]) {
int[] objectArrayVar5 = intArrayLiteral10;
objectVar1 = objectArrayVar5.length == 0 ? null : new Integer(objectArrayVar5[0]);
} else if (objectVar1 instanceof long[]) {
long[] objectArrayVar5 = longArrayLiteral11;
objectVar1 = objectArrayVar5.length == 0 ? null : new Long(objectArrayVar5[0]);
} else if (objectVar1 instanceof float[]) {
float[] objectArrayVar5 = floatArrayLiteral12;
objectVar1 = objectArrayVar5.length == 0 ? null : new Float(objectArrayVar5[0]);
} else if (objectVar1 instanceof double[]) {
double[] objectArrayVar5 = doubleArrayLiteral13;
objectVar1 = objectArrayVar5.length == 0 ? null : new Double(objectArrayVar5[0]);
}
}
return objectVar1;
}"
6660,I18N,DM_DEFAULT_ENCODING,FP,configuration,3871,"writer = new OutputStreamWriter(out);
","public void save(OutputStream out, String encoding) throws ConfigurationException {
Writer writer = null;
if (encoding != null) {
try {
writer = new OutputStreamWriter(out, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (writer == null) {
writer = new OutputStreamWriter(out);
}
save(writer);
}","public void save(OutputStream out, String encoding) throws ConfigurationException {
Writer writerVar1 = writerLiteral2;
if (encoding != null) {
try {
writerVar1 = new OutputStreamWriter(out, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (writerVar1 == null) {
writerVar1 = new OutputStreamWriter(out);
}
save(writerVar1);
}"
6666,I18N,DM_CONVERT_CASE,FP,configuration,3877,"if (filename != null && filename.toLowerCase().trim().endsWith("".xml""))
","protected FileConfiguration createConfiguration(Attributes attributes) throws Exception {
String filename = attributes.getValue(ATTR_FILENAME);
if (filename != null && filename.toLowerCase().trim().endsWith("".xml"")) {
return new XMLPropertyListConfiguration();
} else {
return new PropertyListConfiguration();
}
}","protected FileConfiguration createConfiguration(Attributes attributes) throws Exception {
String stringVar1 = stringLiteral2;
if (stringVar1 != null && stringVar1.toLowerCase().trim().endsWith("".xml"")) {
return new XMLPropertyListConfiguration();
} else {
return new PropertyListConfiguration();
}
}"
6676,EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,FP,configuration,3887,"ResultSet rs = pstmt.executeQuery();
","public boolean isEmpty() {
boolean empty = true;
StringBuffer query = new StringBuffer(""SELECT count(*) FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
ResultSet rs = pstmt.executeQuery();
if (rs.next()) {
empty = rs.getInt(1) == 0;
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
closeQuietly(conn, pstmt);
}
return empty;
}","public boolean isEmpty() {
boolean booleanVar1 = booleanLiteral2;
StringBuffer stringbufferVar3 = stringbufferLiteral4;
if (nameColumn != null) {
stringbufferVar3.append("" WHERE "" + nameColumn + ""=?"");
}
Connection connectionVar5 = connectionLiteral6;
PreparedStatement preparedstatementVar7 = connectionLiteral6;
try {
connectionVar5 = getConnection();
preparedstatementVar7 = connectionVar5.prepareStatement(stringbufferVar3.toString());
if (nameColumn != null) {
preparedstatementVar7.setString(1, name);
}
ResultSet resultsetVar8 = resultsetLiteral9;
if (resultsetVar8.next()) {
booleanVar1 = resultsetVar8.getInt(1) == 0;
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
closeQuietly(connectionVar5, preparedstatementVar7);
}
return booleanVar1;
}"
6677,EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,FP,configuration,3888,"ResultSet rs = pstmt.executeQuery();
","public boolean containsKey(String key) {
boolean found = false;
StringBuffer query = new StringBuffer(""SELECT * FROM "" + table + "" WHERE "" + keyColumn + ""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
ResultSet rs = pstmt.executeQuery();
found = rs.next();
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
closeQuietly(conn, pstmt);
}
return found;
}","public boolean containsKey(String key) {
boolean booleanVar1 = booleanLiteral2;
StringBuffer stringbufferVar3 = stringbufferLiteral4;
if (nameColumn != null) {
stringbufferVar3.append("" AND "" + nameColumn + ""=?"");
}
Connection connectionVar5 = connectionLiteral6;
PreparedStatement preparedstatementVar7 = connectionLiteral6;
try {
connectionVar5 = getConnection();
preparedstatementVar7 = connectionVar5.prepareStatement(stringbufferVar3.toString());
preparedstatementVar7.setString(1, key);
if (nameColumn != null) {
preparedstatementVar7.setString(2, name);
}
ResultSet resultsetVar8 = resultsetLiteral9;
booleanVar1 = resultsetVar8.next();
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
closeQuietly(connectionVar5, preparedstatementVar7);
}
return booleanVar1;
}"
6680,SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,configuration,3891,"pstmt = conn.prepareStatement(query.toString());
","public Object getProperty(String key) {
Object result = null;
StringBuffer query = new StringBuffer(""SELECT * FROM "");
query.append(table).append("" WHERE "");
query.append(keyColumn).append(""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
ResultSet rs = pstmt.executeQuery();
List results = new ArrayList();
while (rs.next()) {
Object val = rs.getObject(valueColumn);
if (isDelimiterParsingDisabled()) {
results.add(val);
} else {
CollectionUtils.addAll(results, PropertyConverter.toIterator(val, getListDelimiter()));
}
}
if (!results.isEmpty()) {
result = (results.size() > 1) ? results : results.get(0);
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
closeQuietly(conn, pstmt);
}
return result;
}","public Object getProperty(String key) {
Object objectVar1 = objectLiteral2;
StringBuffer stringbufferVar3 = stringbufferLiteral4;
stringbufferVar3.append(table).append("" WHERE "");
stringbufferVar3.append(keyColumn).append(""=?"");
if (nameColumn != null) {
stringbufferVar3.append("" AND "" + nameColumn + ""=?"");
}
Connection connectionVar5 = objectLiteral2;
PreparedStatement preparedstatementVar6 = objectLiteral2;
try {
connectionVar5 = getConnection();
preparedstatementVar6 = connectionVar5.prepareStatement(stringbufferVar3.toString());
preparedstatementVar6.setString(1, key);
if (nameColumn != null) {
preparedstatementVar6.setString(2, name);
}
ResultSet resultsetVar7 = resultsetLiteral8;
List listVar9 = listLiteral10;
while (resultsetVar7.next()) {
Object objectVar11 = objectLiteral12;
if (isDelimiterParsingDisabled()) {
listVar9.add(objectVar11);
} else {
CollectionUtils.addAll(listVar9, PropertyConverter.toIterator(objectVar11, getListDelimiter()));
}
}
if (!listVar9.isEmpty()) {
objectVar1 = (listVar9.size() > 1) ? listVar9 : listVar9.get(0);
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
closeQuietly(connectionVar5, preparedstatementVar6);
}
return objectVar1;
}"
6682,EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,FP,configuration,3893,"ResultSet rs = pstmt.executeQuery();
","public Iterator getKeys() {
Collection keys = new ArrayList();
StringBuffer query = new StringBuffer(""SELECT DISTINCT "" + keyColumn + "" FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
ResultSet rs = pstmt.executeQuery();
while (rs.next()) {
keys.add(rs.getString(1));
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
closeQuietly(conn, pstmt);
}
return keys.iterator();
}","public Iterator getKeys() {
Collection collectionVar1 = collectionLiteral2;
StringBuffer stringbufferVar3 = stringbufferLiteral4;
if (nameColumn != null) {
stringbufferVar3.append("" WHERE "" + nameColumn + ""=?"");
}
Connection connectionVar5 = connectionLiteral6;
PreparedStatement preparedstatementVar7 = connectionLiteral6;
try {
connectionVar5 = getConnection();
preparedstatementVar7 = connectionVar5.prepareStatement(stringbufferVar3.toString());
if (nameColumn != null) {
preparedstatementVar7.setString(1, name);
}
ResultSet resultsetVar8 = resultsetLiteral9;
while (resultsetVar8.next()) {
collectionVar1.add(resultsetVar8.getString(1));
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
closeQuietly(connectionVar5, preparedstatementVar7);
}
return collectionVar1.iterator();
}"
6683,I18N,DM_CONVERT_CASE,FP,configuration,3894,"&& fileName.toLowerCase().trim().endsWith(fileExtension))
","protected Object createBeanInstance(Class beanClass, BeanDeclaration data) throws Exception {
String fileName = ((ConfigurationDeclaration) data).getConfiguration().getString(ATTR_FILENAME);
if (fileName != null && fileName.toLowerCase().trim().endsWith(fileExtension)) {
return super.createBeanInstance(fetchMatchingClass(), data);
} else {
return super.createBeanInstance(fetchDefaultClass(), data);
}
}","protected Object createBeanInstance(Class beanClass, BeanDeclaration data) throws Exception {
String stringVar1 = stringLiteral2;
if (stringVar1 != null && stringVar1.toLowerCase().trim().endsWith(fileExtension)) {
return super.createBeanInstance(fetchMatchingClass(), data);
} else {
return super.createBeanInstance(fetchDefaultClass(), data);
}
}"
6690,PERFORMANCE,DM_FP_NUMBER_CTOR,FP,configuration,3901,"return new Float(n.floatValue());
","public static Float toFloat(Object value) throws ConversionException {
Number n = toNumber(value, Float.class);
if (n instanceof Float) {
return (Float) n;
} else {
return new Float(n.floatValue());
}
}","public static Float toFloat(Object value) throws ConversionException {
Number numberVar1 = numberLiteral2;
if (numberVar1 instanceof Float) {
return (Float) numberVar1;
} else {
return new Float(numberVar1.floatValue());
}
}"
6698,PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,configuration,3909,"{
public void error(SAXParseException ex) throws SAXException
{
throw ex;
","private void load(InputSource source) throws ConfigurationException {
try {
URL sourceURL = getDelegate().getURL();
if (sourceURL != null) {
source.setSystemId(sourceURL.toString());
}
DocumentBuilder builder = createDocumentBuilder();
Document newDocument = builder.parse(source);
Document oldDocument = document;
document = null;
initProperties(newDocument, oldDocument == null);
document = (oldDocument == null) ? newDocument : oldDocument;
} catch (Exception e) {
throw new ConfigurationException(e.getMessage(), e);
}
}","private void load(InputSource source) throws ConfigurationException {
try {
URL urlVar1 = urlLiteral2;
if (urlVar1 != null) {
source.setSystemId(urlVar1.toString());
}
DocumentBuilder documentbuilderVar3 = documentbuilderLiteral4;
Document documentVar5 = documentLiteral6;
Document documentVar7 = documentLiteral8;
document = null;
initProperties(documentVar5, documentVar7 == null);
document = (documentVar7 == null) ? documentVar5 : documentVar7;
} catch (Exception e) {
throw new ConfigurationException(e.getMessage(), e);
}
}"
6707,PERFORMANCE,DM_NUMBER_CTOR,FP,configuration,3918,"getConfiguration().addProperty(name, new Long(array[i]));
","public void set(String name, Object value) {
if (log.isTraceEnabled()) {
log.trace(""set("" + name + "","" + value + "")"");
}
if (value == null) {
throw new NullPointerException(""Error trying to set property to null."");
}
if (value instanceof List) {
List list = (List) value;
Iterator iterator = list.iterator();
while (iterator.hasNext()) {
getConfiguration().addProperty(name, iterator.next());
}
} else if (value instanceof int[]) {
int[] array = (int[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Integer(array[i]));
}
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, BooleanUtils.toBooleanObject(array[i]));
}
} else if (value instanceof char[]) {
char[] array = (char[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Character(array[i]));
}
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Byte(array[i]));
}
} else if (value instanceof short[]) {
short[] array = (short[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Short(array[i]));
}
} else if (value instanceof long[]) {
long[] array = (long[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Long(array[i]));
}
} else if (value instanceof float[]) {
float[] array = (float[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Float(array[i]));
}
} else if (value instanceof double[]) {
double[] array = (double[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Double(array[i]));
}
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, array[i]);
}
} else {
getConfiguration().setProperty(name, value);
}
}","public void set(String name, Object value) {
if (log.isTraceEnabled()) {
log.trace(""set("" + name + "","" + value + "")"");
}
if (value == null) {
throw new NullPointerException(""Error trying to set property to null."");
}
if (value instanceof List) {
List listVar1 = listLiteral2;
Iterator iteratorVar3 = iteratorLiteral4;
while (iteratorVar3.hasNext()) {
getConfiguration().addProperty(name, iteratorVar3.next());
}
} else if (value instanceof int[]) {
int[] intArrayVar5 = intArrayLiteral6;
for (int intVar17 = intLiteral18; intVar7 < intLiteral1; intVar7++) {
getConfiguration().addProperty(name, new Integer(intArrayVar5[intVar7]));
}
} else if (value instanceof boolean[]) {
boolean[] intArrayVar5 = booleanArrayLiteral9;
for (int intVar17 = intLiteral18; intVar7 < intArrayVar5.length; intVar7++) {
getConfiguration().addProperty(name, BooleanUtils.toBooleanObject(intArrayVar5[intVar7]));
}
} else if (value instanceof char[]) {
char[] intArrayVar5 = charArrayLiteral10;
for (int intVar17 = intLiteral18; intVar7 < intArrayVar5.length; intVar7++) {
getConfiguration().addProperty(name, new Character(intArrayVar5[intVar7]));
}
} else if (value instanceof byte[]) {
byte[] intArrayVar5 = byteArrayLiteral11;
for (int intVar17 = intLiteral18; intVar7 < intArrayVar5.length; intVar7++) {
getConfiguration().addProperty(name, new Byte(intArrayVar5[intVar7]));
}
} else if (value instanceof short[]) {
short[] intArrayVar5 = shortArrayLiteral12;
for (int intVar17 = intLiteral18; intVar7 < intArrayVar5.length; intVar7++) {
getConfiguration().addProperty(name, new Short(intArrayVar5[intVar7]));
}
} else if (value instanceof long[]) {
long[] intArrayVar5 = longArrayLiteral13;
for (int intVar17 = intLiteral18; intVar7 < intArrayVar5.length; intVar7++) {
getConfiguration().addProperty(name, new Long(intArrayVar5[intVar7]));
}
} else if (value instanceof float[]) {
float[] intArrayVar5 = floatArrayLiteral14;
for (int intVar17 = intLiteral18; intVar7 < intArrayVar5.length; intVar7++) {
getConfiguration().addProperty(name, new Float(intArrayVar5[intVar7]));
}
} else if (value instanceof double[]) {
double[] intArrayVar5 = doubleArrayLiteral15;
for (int intVar17 = intLiteral18; intVar7 < intArrayVar5.length; intVar7++) {
getConfiguration().addProperty(name, new Double(intArrayVar5[intVar7]));
}
} else if (value instanceof Object[]) {
Object[] intArrayVar5 = objectArrayLiteral16;
for (int intVar17 = intLiteral18; intVar7 < intArrayVar5.length; intVar7++) {
getConfiguration().addProperty(name, intArrayVar5[intVar7]);
}
} else {
getConfiguration().setProperty(name, value);
}
}"
6708,PERFORMANCE,DM_FP_NUMBER_CTOR,FP,configuration,3919,"getConfiguration().addProperty(name, new Double(array[i]));
","public void set(String name, Object value) {
if (log.isTraceEnabled()) {
log.trace(""set("" + name + "","" + value + "")"");
}
if (value == null) {
throw new NullPointerException(""Error trying to set property to null."");
}
if (value instanceof List) {
List list = (List) value;
Iterator iterator = list.iterator();
while (iterator.hasNext()) {
getConfiguration().addProperty(name, iterator.next());
}
} else if (value instanceof int[]) {
int[] array = (int[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Integer(array[i]));
}
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, BooleanUtils.toBooleanObject(array[i]));
}
} else if (value instanceof char[]) {
char[] array = (char[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Character(array[i]));
}
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Byte(array[i]));
}
} else if (value instanceof short[]) {
short[] array = (short[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Short(array[i]));
}
} else if (value instanceof long[]) {
long[] array = (long[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Long(array[i]));
}
} else if (value instanceof float[]) {
float[] array = (float[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Float(array[i]));
}
} else if (value instanceof double[]) {
double[] array = (double[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Double(array[i]));
}
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, array[i]);
}
} else {
getConfiguration().setProperty(name, value);
}
}","public void set(String name, Object value) {
if (log.isTraceEnabled()) {
log.trace(""set("" + name + "","" + value + "")"");
}
if (value == null) {
throw new NullPointerException(""Error trying to set property to null."");
}
if (value instanceof List) {
List listVar1 = listLiteral2;
Iterator iteratorVar3 = iteratorLiteral4;
while (iteratorVar3.hasNext()) {
getConfiguration().addProperty(name, iteratorVar3.next());
}
} else if (value instanceof int[]) {
int[] intArrayVar5 = intArrayLiteral6;
for (int intVar17 = intLiteral18; intVar7 < intLiteral1; intVar7++) {
getConfiguration().addProperty(name, new Integer(intArrayVar5[intVar7]));
}
} else if (value instanceof boolean[]) {
boolean[] intArrayVar5 = booleanArrayLiteral9;
for (int intVar17 = intLiteral18; intVar7 < intArrayVar5.length; intVar7++) {
getConfiguration().addProperty(name, BooleanUtils.toBooleanObject(intArrayVar5[intVar7]));
}
} else if (value instanceof char[]) {
char[] intArrayVar5 = charArrayLiteral10;
for (int intVar17 = intLiteral18; intVar7 < intArrayVar5.length; intVar7++) {
getConfiguration().addProperty(name, new Character(intArrayVar5[intVar7]));
}
} else if (value instanceof byte[]) {
byte[] intArrayVar5 = byteArrayLiteral11;
for (int intVar17 = intLiteral18; intVar7 < intArrayVar5.length; intVar7++) {
getConfiguration().addProperty(name, new Byte(intArrayVar5[intVar7]));
}
} else if (value instanceof short[]) {
short[] intArrayVar5 = shortArrayLiteral12;
for (int intVar17 = intLiteral18; intVar7 < intArrayVar5.length; intVar7++) {
getConfiguration().addProperty(name, new Short(intArrayVar5[intVar7]));
}
} else if (value instanceof long[]) {
long[] intArrayVar5 = longArrayLiteral13;
for (int intVar17 = intLiteral18; intVar7 < intArrayVar5.length; intVar7++) {
getConfiguration().addProperty(name, new Long(intArrayVar5[intVar7]));
}
} else if (value instanceof float[]) {
float[] intArrayVar5 = floatArrayLiteral14;
for (int intVar17 = intLiteral18; intVar7 < intArrayVar5.length; intVar7++) {
getConfiguration().addProperty(name, new Float(intArrayVar5[intVar7]));
}
} else if (value instanceof double[]) {
double[] intArrayVar5 = doubleArrayLiteral15;
for (int intVar17 = intLiteral18; intVar7 < intArrayVar5.length; intVar7++) {
getConfiguration().addProperty(name, new Double(intArrayVar5[intVar7]));
}
} else if (value instanceof Object[]) {
Object[] intArrayVar5 = objectArrayLiteral16;
for (int intVar17 = intLiteral18; intVar7 < intArrayVar5.length; intVar7++) {
getConfiguration().addProperty(name, intArrayVar5[intVar7]);
}
} else {
getConfiguration().setProperty(name, value);
}
}"
6709,PERFORMANCE,DM_NUMBER_CTOR,FP,configuration,3920,"getConfiguration().addProperty(name, new Short(array[i]));
","public void set(String name, Object value) {
if (log.isTraceEnabled()) {
log.trace(""set("" + name + "","" + value + "")"");
}
if (value == null) {
throw new NullPointerException(""Error trying to set property to null."");
}
if (value instanceof List) {
List list = (List) value;
Iterator iterator = list.iterator();
while (iterator.hasNext()) {
getConfiguration().addProperty(name, iterator.next());
}
} else if (value instanceof int[]) {
int[] array = (int[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Integer(array[i]));
}
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, BooleanUtils.toBooleanObject(array[i]));
}
} else if (value instanceof char[]) {
char[] array = (char[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Character(array[i]));
}
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Byte(array[i]));
}
} else if (value instanceof short[]) {
short[] array = (short[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Short(array[i]));
}
} else if (value instanceof long[]) {
long[] array = (long[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Long(array[i]));
}
} else if (value instanceof float[]) {
float[] array = (float[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Float(array[i]));
}
} else if (value instanceof double[]) {
double[] array = (double[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Double(array[i]));
}
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, array[i]);
}
} else {
getConfiguration().setProperty(name, value);
}
}","public void set(String name, Object value) {
if (log.isTraceEnabled()) {
log.trace(""set("" + name + "","" + value + "")"");
}
if (value == null) {
throw new NullPointerException(""Error trying to set property to null."");
}
if (value instanceof List) {
List listVar1 = listLiteral2;
Iterator iteratorVar3 = iteratorLiteral4;
while (iteratorVar3.hasNext()) {
getConfiguration().addProperty(name, iteratorVar3.next());
}
} else if (value instanceof int[]) {
int[] intArrayVar5 = intArrayLiteral6;
for (int intVar17 = intLiteral18; intVar7 < intLiteral1; intVar7++) {
getConfiguration().addProperty(name, new Integer(intArrayVar5[intVar7]));
}
} else if (value instanceof boolean[]) {
boolean[] intArrayVar5 = booleanArrayLiteral9;
for (int intVar17 = intLiteral18; intVar7 < intArrayVar5.length; intVar7++) {
getConfiguration().addProperty(name, BooleanUtils.toBooleanObject(intArrayVar5[intVar7]));
}
} else if (value instanceof char[]) {
char[] intArrayVar5 = charArrayLiteral10;
for (int intVar17 = intLiteral18; intVar7 < intArrayVar5.length; intVar7++) {
getConfiguration().addProperty(name, new Character(intArrayVar5[intVar7]));
}
} else if (value instanceof byte[]) {
byte[] intArrayVar5 = byteArrayLiteral11;
for (int intVar17 = intLiteral18; intVar7 < intArrayVar5.length; intVar7++) {
getConfiguration().addProperty(name, new Byte(intArrayVar5[intVar7]));
}
} else if (value instanceof short[]) {
short[] intArrayVar5 = shortArrayLiteral12;
for (int intVar17 = intLiteral18; intVar7 < intArrayVar5.length; intVar7++) {
getConfiguration().addProperty(name, new Short(intArrayVar5[intVar7]));
}
} else if (value instanceof long[]) {
long[] intArrayVar5 = longArrayLiteral13;
for (int intVar17 = intLiteral18; intVar7 < intArrayVar5.length; intVar7++) {
getConfiguration().addProperty(name, new Long(intArrayVar5[intVar7]));
}
} else if (value instanceof float[]) {
float[] intArrayVar5 = floatArrayLiteral14;
for (int intVar17 = intLiteral18; intVar7 < intArrayVar5.length; intVar7++) {
getConfiguration().addProperty(name, new Float(intArrayVar5[intVar7]));
}
} else if (value instanceof double[]) {
double[] intArrayVar5 = doubleArrayLiteral15;
for (int intVar17 = intLiteral18; intVar7 < intArrayVar5.length; intVar7++) {
getConfiguration().addProperty(name, new Double(intArrayVar5[intVar7]));
}
} else if (value instanceof Object[]) {
Object[] intArrayVar5 = objectArrayLiteral16;
for (int intVar17 = intLiteral18; intVar7 < intArrayVar5.length; intVar7++) {
getConfiguration().addProperty(name, intArrayVar5[intVar7]);
}
} else {
getConfiguration().setProperty(name, value);
}
}"
6714,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,configuration,3925,"return null;
","protected byte[] filterData(String s) throws ParseException {
if (s == null) {
return null;
}
if (s.startsWith(""<"") && s.endsWith("">"") && s.length() >= 2) {
s = s.substring(1, s.length() - 1);
}
s = StringUtils.replaceChars(s, "" \t\n\r"", """");
if (s.length() % 2 != 0) {
s = ""0"" + s;
}
try {
return Hex.decodeHex(s.toCharArray());
} catch (Exception e) {
throw new ParseException(e.getMessage());
}
}","protected byte[] filterData(String s) throws ParseException {
if (s == null) {
return null;
}
if (s.startsWith(""<"") && s.endsWith("">"") && s.length() >= 2) {
s = s.substring(1, s.length() - 1);
}
s = StringUtils.replaceChars(s, "" \t\n\r"", """");
if (s.length() % 2 != 0) {
s = ""0"" + s;
}
try {
return Hex.decodeHex(s.toCharArray());
} catch (Exception e) {
throw new ParseException(e.getMessage());
}
}"
6716,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,configuration,3927,"PropertyListConfiguration configuration = new PropertyListConfiguration();
List children = new ArrayList();
Node child = null;
jj_consume_token(DICT_BEGIN);
label_1:
while (true)
{
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
{
case STRING:
case QUOTED_STRING:
;
break;
default:
jj_la1[0] = jj_gen;
break label_1;
}
child = Property();
if (child.getValue() instanceof HierarchicalConfiguration)
{
HierarchicalConfiguration conf = (HierarchicalConfiguration) child.getValue();
Node root = conf.getRoot();
root.setName(child.getName());
children.add(root);
}
else
{
children.add(child);
}
}
jj_consume_token(DICT_END);
for (int i = 0; i < children.size(); i++)
{
child = (Node) children.get(i);
configuration.getRoot().addChild(child);
}
return configuration;
","final public PropertyListConfiguration Dictionary() throws ParseException {
PropertyListConfiguration configuration = new PropertyListConfiguration();
List children = new ArrayList();
Node child = null;
jj_consume_token(DICT_BEGIN);
label_1: while (true) {
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case STRING:
case QUOTED_STRING:
;
break;
default:
jj_la1[0] = jj_gen;
break label_1;
}
child = Property();
if (child.getValue() instanceof HierarchicalConfiguration) {
HierarchicalConfiguration conf = (HierarchicalConfiguration) child.getValue();
Node root = conf.getRoot();
root.setName(child.getName());
children.add(root);
} else {
children.add(child);
}
}
jj_consume_token(DICT_END);
for (int i = 0; i < children.size(); i++) {
child = (Node) children.get(i);
configuration.getRoot().addChild(child);
}
return configuration;
}","final public PropertyListConfiguration Dictionary() throws ParseException {
PropertyListConfiguration propertylistconfigurationVar1 = propertylistconfigurationLiteral2;
List listVar3 = listLiteral4;
Node nodeVar5 = nodeLiteral6;
jj_consume_token(DICT_BEGIN);
label_1: while (true) {
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case STRING:
case QUOTED_STRING:
;
break;
default:
jj_la1[0] = jj_gen;
break label_1;
}
nodeVar5 = Property();
if (nodeVar5.getValue() instanceof HierarchicalConfiguration) {
HierarchicalConfiguration hierarchicalconfigurationVar7 = hierarchicalconfigurationLiteral8;
Node nodeVar9 = nodeLiteral10;
nodeVar9.setName(nodeVar5.getName());
listVar3.add(nodeVar9);
} else {
listVar3.add(nodeVar5);
}
}
jj_consume_token(DICT_END);
for (int intVar13 = intLiteral14; intVar11 < intLiteral1; intVar11++) {
nodeVar5 = (Node) listVar3.get(intVar11);
propertylistconfigurationVar1.getRoot().addChild(nodeVar5);
}
return propertylistconfigurationVar1;
}"
6724,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,configuration,3935,"inputStream = dstream;
line = startline;
column = startcolumn - 1;
if (buffer == null || buffersize != buffer.length)
{
available = bufsize = buffersize;
buffer = new char[buffersize];
bufline = new int[buffersize];
bufcolumn = new int[buffersize];
}
prevCharIsLF = prevCharIsCR = false;
tokenBegin = inBuf = maxNextCharInd = 0;
bufpos = -1;
}
","public void ReInit(java.io.Reader dstream, int startline, int startcolumn, int buffersize) {
inputStream = dstream;
line = startline;
column = startcolumn - 1;
if (buffer == null || buffersize != buffer.length) {
available = bufsize = buffersize;
buffer = new char[buffersize];
bufline = new int[buffersize];
bufcolumn = new int[buffersize];
}
prevCharIsLF = prevCharIsCR = false;
tokenBegin = inBuf = maxNextCharInd = 0;
bufpos = -1;
}","public void ReInit(java.io.Reader dstream, int startline, int startcolumn, int buffersize) {
inputStream = dstream;
line = startline;
column = startcolumn - 1;
if (buffer == null || buffersize != buffer.length) {
available = bufsize = buffersize;
buffer = new char[buffersize];
bufline = new int[buffersize];
bufcolumn = new int[buffersize];
}
prevCharIsLF = prevCharIsCR = false;
tokenBegin = inBuf = maxNextCharInd = 0;
bufpos = -1;
}"
6730,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,configuration,3941,"column++;
if (prevCharIsLF)
{
prevCharIsLF = false;
line += (column = 1);
}
else if (prevCharIsCR)
{
prevCharIsCR = false;
if (c == '\n')
{
prevCharIsLF = true;
}
else
line += (column = 1);
}
switch (c)
{
case '\r' :
prevCharIsCR = true;
break;
case '\n' :
prevCharIsLF = true;
break;
case '\t' :
column--;
column += (8 - (column & 07));
break;
default :
break;
}
bufline[bufpos] = line;
bufcolumn[bufpos] = column;
}
","protected void UpdateLineColumn(char c) {
column++;
if (prevCharIsLF) {
prevCharIsLF = false;
line += (column = 1);
} else if (prevCharIsCR) {
prevCharIsCR = false;
if (c == '\n') {
prevCharIsLF = true;
} else
line += (column = 1);
}
switch(c) {
case '\r':
prevCharIsCR = true;
break;
case '\n':
prevCharIsLF = true;
break;
case '\t':
column--;
column += (8 - (column & 07));
break;
default:
break;
}
bufline[bufpos] = line;
bufcolumn[bufpos] = column;
}","protected void UpdateLineColumn(char c) {
column++;
if (prevCharIsLF) {
prevCharIsLF = false;
line += (column = 1);
} else if (prevCharIsCR) {
prevCharIsCR = false;
if (c == '\n') {
prevCharIsLF = true;
} else
line += (column = 1);
}
switch(c) {
case '\r':
prevCharIsCR = true;
break;
case '\n':
prevCharIsLF = true;
break;
case '\t':
column--;
column += (8 - (column & 07));
break;
default:
break;
}
bufline[bufpos] = line;
bufcolumn[bufpos] = column;
}"
6731,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,configuration,3942,"tokenBegin = -1;
char c = readChar();
tokenBegin = bufpos;
return c;
","public char BeginToken() throws java.io.IOException {
tokenBegin = -1;
char c = readChar();
tokenBegin = bufpos;
return c;
}","public char BeginToken() throws java.io.IOException {
tokenBegin = -1;
char charVar1 = charLiteral2;
tokenBegin = bufpos;
return charVar1;
}"
6733,DODGY_CODE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,FP,configuration,3944,"public int beginLine, beginColumn, endLine, endColumn;","public int beginLine, beginColumn, endLine, endColumn;","public int intVar1, intVar2, intVar3, intVar4;"
6735,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,configuration,3946,"return(""Lexical error at line "" +
","protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {
return (""Lexical error at line "" + errorLine + "", column "" + errorColumn + "".  Encountered: "" + (EOFSeen ? ""<EOF> "" : (""\"""" + addEscapes(String.valueOf(curChar)) + ""\"""") + "" ("" + (int) curChar + ""), "") + ""after : \"""" + addEscapes(errorAfter) + ""\"""");
}","protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {
return (""Lexical error at line "" + errorLine + "", column "" + errorColumn + "".  Encountered: "" + (EOFSeen ? ""<EOF> "" : (""\"""" + addEscapes(String.valueOf(curChar)) + ""\"""") + "" ("" + (int) curChar + ""), "") + ""after : \"""" + addEscapes(errorAfter) + ""\"""");
}"
6736,PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,configuration,3947,"{
public Object createObject(Attributes attributes) throws Exception
{
XMLPropertyListConfiguration config = new XMLPropertyListConfiguration();
ArrayNode node = (ArrayNode) getDigester().peek();
node.addValue(config);
return config.getRoot();
","public void addDataValue(String value) {
addValue(Base64.decodeBase64(value.getBytes()));
}","public void addDataValue(String value) {
addValue(Base64.decodeBase64(value.getBytes()));
}"
6739,PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,configuration,3950,"{
public void end() throws Exception
{
}
","public void addRealValue(String value) {
addValue(new Double(value));
}","public void addRealValue(String value) {
addValue(new Double(value));
}"
6746,DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,configuration,3957,"List lst = (List) namedNodes.get(node.getName());
","public boolean removeNode(ConfigurationNode node) {
if (nodes != null && node != null && nodes.contains(node)) {
detachNode(node);
nodes.remove(node);
List lst = (List) namedNodes.get(node.getName());
if (lst != null) {
lst.remove(node);
if (lst.isEmpty()) {
namedNodes.remove(node.getName());
}
}
return true;
} else {
return false;
}
}","public boolean removeNode(ConfigurationNode node) {
if (nodes != null && node != null && nodes.contains(node)) {
detachNode(node);
nodes.remove(node);
List listVar1 = listLiteral2;
if (listVar1 != null) {
listVar1.remove(node);
if (listVar1.isEmpty()) {
namedNodes.remove(node.getName());
}
}
return true;
} else {
return false;
}
}"
6751,BAD_PRACTICE,SE_BAD_FIELD,FP,configuration,3962,private ConfigurationNode node;,private ConfigurationNode node;,private ConfigurationNode configurationnodeVar1;
6783,DODGY_CODE,REC_CATCH_EXCEPTION,FP,configuration,3994,"} catch (final Exception e) {
","public void setValue(final Object value) throws ConfigurationRuntimeException {
try {
if (!(value instanceof String)) {
this.value = value;
return;
}
final String val = (String) value;
final String name = StringUtils.removeStartIgnoreCase(val, CLASS);
final Class<?> clazz = ClassUtils.getClass(name);
if (name.length() == val.length()) {
this.value = clazz.newInstance();
} else {
this.value = clazz;
}
} catch (final Exception e) {
throw new ConfigurationRuntimeException(""Unable to create "" + value, e);
}
}","public void setValue(final Object value) throws ConfigurationRuntimeException {
try {
if (!(value instanceof String)) {
this.value = value;
return;
}
final String stringVar1 = stringLiteral2;
final String stringVar3 = stringLiteral4;
final Class<?> class<?>Var5 = class<?>Literal6;
if (stringVar3.length() == stringVar1.length()) {
this.value = class<?>Var5.newInstance();
} else {
this.value = class<?>Var5;
}
} catch (final Exception e) {
throw new ConfigurationRuntimeException(""Unable to create "" + value, e);
}
}"
6788,DODGY_CODE,REC_CATCH_EXCEPTION,FP,configuration,3999,"} catch (final Exception ex) {
","private FileSystemOptions getOptions(final String scheme) {
if (scheme == null) {
return null;
}
final FileSystemOptions opts = new FileSystemOptions();
final FileSystemConfigBuilder builder;
try {
builder = getManager().getFileSystemConfigBuilder(scheme);
} catch (final Exception ex) {
return null;
}
final FileOptionsProvider provider = getFileOptionsProvider();
if (provider != null) {
final Map<String, Object> map = provider.getOptions();
if (map == null) {
return null;
}
int count = 0;
for (final Map.Entry<String, Object> entry : map.entrySet()) {
try {
String key = entry.getKey();
if (FileOptionsProvider.CURRENT_USER.equals(key)) {
key = ""creatorName"";
}
setProperty(builder, opts, key, entry.getValue());
++count;
} catch (final Exception ex) {
continue;
}
}
if (count > 0) {
return opts;
}
}
return null;
}","private FileSystemOptions getOptions(final String scheme) {
if (scheme == null) {
return null;
}
final FileSystemOptions filesystemoptionsVar1 = filesystemoptionsLiteral2;
final FileSystemConfigBuilder filesystemconfigbuilderVar3;
try {
filesystemconfigbuilderVar3 = getManager().getFileSystemConfigBuilder(scheme);
} catch (final Exception ex) {
return null;
}
final FileOptionsProvider fileoptionsproviderVar4 = fileoptionsproviderLiteral5;
if (fileoptionsproviderVar4 != null) {
final Map<String, Object> map<string,object>Var6 = map<string,object>Literal7;
if (map<string,object>Var6 == null) {
return null;
}
int intVar8 = intLiteral9;
for (final Map.Entry<String, Object> map.entry<string,object>Var10 : map<string,object>Var6.entrySet()) {
try {
String stringVar11 = stringLiteral12;
if (FileOptionsProvider.CURRENT_USER.equals(stringVar11)) {
stringVar11 = ""creatorName"";
}
setProperty(filesystemconfigbuilderVar3, filesystemoptionsVar1, stringVar11, map.entry<string,object>Var10.getValue());
++intVar8;
} catch (final Exception ex) {
continue;
}
}
if (intVar8 > 0) {
return filesystemoptionsVar1;
}
}
return null;
}"
6793,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,configuration,4004,"fs = ((CatalogManager) catalogManager).getFileSystem();
","@Override
public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
final String base = ((CatalogManager) catalogManager).getBaseDir();
final Vector<String> catalogs = catalogManager.getCatalogFiles();
if (catalogs != null) {
for (int count = 0; count < catalogs.size(); count++) {
final String fileName = catalogs.elementAt(count);
URL url = null;
InputStream inputStream = null;
try {
url = locate(fs, base, fileName);
if (url != null) {
inputStream = fs.getInputStream(url);
}
} catch (final ConfigurationException ce) {
final String name = url.toString();
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + name + "". "" + ce.getMessage());
}
if (inputStream != null) {
final String mimeType = fileNameMap.getContentTypeFor(fileName);
try {
if (mimeType != null) {
parseCatalog(mimeType, inputStream);
continue;
}
} catch (final Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + fileName + "". "" + ex.getMessage());
} finally {
inputStream.close();
}
}
parseCatalog(base, fileName);
}
}
}","@Override
public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
final String stringVar1 = stringLiteral2;
final Vector<String> vector<string>Var3 = vector<string>Literal4;
if (vector<string>Var3 != null) {
for (int intVar16 = intLiteral17; intVar5 < intLiteral1; intVar5++) {
final String stringVar7 = stringLiteral8;
URL urlVar9 = urlLiteral10;
InputStream inputstreamVar11 = urlLiteral10;
try {
urlVar9 = locate(fs, stringVar1, stringVar7);
if (urlVar9 != null) {
inputstreamVar11 = fs.getInputStream(urlVar9);
}
} catch (final ConfigurationException ce) {
final String stringVar12 = stringLiteral13;
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + stringVar12 + "". "" + ce.getMessage());
}
if (inputstreamVar11 != null) {
final String stringVar14 = stringLiteral15;
try {
if (stringVar14 != null) {
parseCatalog(stringVar14, inputstreamVar11);
continue;
}
} catch (final Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + stringVar7 + "". "" + ex.getMessage());
} finally {
inputstreamVar11.close();
}
}
parseCatalog(stringVar1, stringVar7);
}
}
}"
6794,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,configuration,4005,"final ConfigurationInterpolator ci = ((CatalogManager) catalogManager).getInterpolator();
","@Override
protected String normalizeURI(final String uriref) {
final ConfigurationInterpolator ci = ((CatalogManager) catalogManager).getInterpolator();
final String resolved = ci != null ? String.valueOf(ci.interpolate(uriref)) : uriref;
return super.normalizeURI(resolved);
}","@Override
protected String normalizeURI(final String uriref) {
final ConfigurationInterpolator configurationinterpolatorVar1 = configurationinterpolatorLiteral2;
final String stringVar3 = stringLiteral4;
return super.normalizeURI(stringVar3);
}"
6832,EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,FP,configuration,4043,"ResultSet rs = ps.executeQuery();
","@Override
protected Object performOperation() throws SQLException {
PreparedStatement ps = initStatement(String.format(SQL_IS_EMPTY, table), true);
ResultSet rs = ps.executeQuery();
return rs.next() ? rs.getInt(1) : null;
}","@Override
protected Object performOperation() throws SQLException {
PreparedStatement preparedstatementVar1 = preparedstatementLiteral2;
ResultSet resultsetVar3 = resultsetLiteral4;
return resultsetVar3.next() ? resultsetVar3.getInt(1) : null;
}"
6846,Multithreaded correctness,RV_RETURN_VALUE_OF_PUTIFABSENT_IGNORED,FP,configuration,4057,"configurationsMap.putIfAbsent(pattern, configuration);
","private AbstractHierarchicalFileConfiguration getConfiguration() {
if (pattern == null) {
throw new ConfigurationRuntimeException(""File pattern must be defined"");
}
String path = localSubst.replace(pattern);
if (configurationsMap.containsKey(path)) {
return configurationsMap.get(path);
}
if (path.equals(pattern)) {
XMLConfiguration configuration = new XMLConfiguration() {
@Override
public void load() throws ConfigurationException {
}
@Override
public void save() throws ConfigurationException {
}
};
configurationsMap.putIfAbsent(pattern, configuration);
return configuration;
}
XMLConfiguration configuration = new XMLConfiguration();
if (loggerName != null) {
Log log = LogFactory.getLog(loggerName);
if (log != null) {
configuration.setLogger(log);
}
}
configuration.setBasePath(getBasePath());
configuration.setFileName(path);
configuration.setFileSystem(getFileSystem());
configuration.setExpressionEngine(getExpressionEngine());
ReloadingStrategy strategy = createReloadingStrategy();
if (strategy != null) {
configuration.setReloadingStrategy(strategy);
}
configuration.setDelimiterParsingDisabled(isDelimiterParsingDisabled());
configuration.setAttributeSplittingDisabled(isAttributeSplittingDisabled());
configuration.setValidating(validating);
configuration.setSchemaValidation(schemaValidation);
configuration.setEntityResolver(entityResolver);
configuration.setListDelimiter(getListDelimiter());
configuration.addConfigurationListener(this);
configuration.addErrorListener(this);
try {
configuration.load();
} catch (ConfigurationException ce) {
if (isThrowable(ce)) {
throw new ConfigurationRuntimeException(ce);
}
}
configurationsMap.putIfAbsent(path, configuration);
return configurationsMap.get(path);
}","private AbstractHierarchicalFileConfiguration getConfiguration() {
if (pattern == null) {
throw new ConfigurationRuntimeException(""File pattern must be defined"");
}
String stringVar1 = stringLiteral2;
if (configurationsMap.containsKey(stringVar1)) {
return configurationsMap.get(stringVar1);
}
if (stringVar1.equals(pattern)) {
XMLConfiguration xmlconfigurationVar3 = xmlconfigurationLiteral4;
configurationsMap.putIfAbsent(pattern, xmlconfigurationVar3);
return xmlconfigurationVar3;
}
XMLConfiguration xmlconfigurationVar3 = xmlconfigurationLiteral5;
if (loggerName != null) {
Log logVar6 = logLiteral7;
if (logVar6 != null) {
xmlconfigurationVar3.setLogger(logVar6);
}
}
xmlconfigurationVar3.setBasePath(getBasePath());
xmlconfigurationVar3.setFileName(stringVar1);
xmlconfigurationVar3.setFileSystem(getFileSystem());
xmlconfigurationVar3.setExpressionEngine(getExpressionEngine());
ReloadingStrategy reloadingstrategyVar8 = reloadingstrategyLiteral9;
if (reloadingstrategyVar8 != null) {
xmlconfigurationVar3.setReloadingStrategy(reloadingstrategyVar8);
}
xmlconfigurationVar3.setDelimiterParsingDisabled(isDelimiterParsingDisabled());
xmlconfigurationVar3.setAttributeSplittingDisabled(isAttributeSplittingDisabled());
xmlconfigurationVar3.setValidating(validating);
xmlconfigurationVar3.setSchemaValidation(schemaValidation);
xmlconfigurationVar3.setEntityResolver(entityResolver);
xmlconfigurationVar3.setListDelimiter(getListDelimiter());
xmlconfigurationVar3.addConfigurationListener(this);
xmlconfigurationVar3.addErrorListener(this);
try {
xmlconfigurationVar3.load();
} catch (ConfigurationException ce) {
if (isThrowable(ce)) {
throw new ConfigurationRuntimeException(ce);
}
}
configurationsMap.putIfAbsent(stringVar1, xmlconfigurationVar3);
return configurationsMap.get(stringVar1);
}"
6848,CORRECTNESS,UR_UNINIT_READ_CALLED_FROM_SUPER_CONSTRUCTOR,FP,configuration,4059,"if (!init)
","@Override
public void setRootNode(ConfigurationNode rootNode) {
if (!init) {
super.setRootNode(rootNode);
}
}","@Override
public void setRootNode(ConfigurationNode rootNode) {
if (!init) {
super.setRootNode(rootNode);
}
}"
6851,PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,configuration,4062,"{
public InputSource resolveEntity(String publicId, String systemId)
{
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
","public void load(Reader in) throws ConfigurationException {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setNamespaceAware(false);
factory.setValidating(true);
try {
SAXParser parser = factory.newSAXParser();
XMLReader xmlReader = parser.getXMLReader();
xmlReader.setEntityResolver(new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlReader.setContentHandler(new XMLPropertiesHandler());
xmlReader.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}","public void load(Reader in) throws ConfigurationException {
SAXParserFactory saxparserfactoryVar1 = saxparserfactoryLiteral2;
saxparserfactoryVar1.setNamespaceAware(false);
saxparserfactoryVar1.setValidating(true);
try {
SAXParser saxparserVar3 = saxparserLiteral4;
XMLReader xmlreaderVar5 = xmlreaderLiteral6;
xmlreaderVar5.setEntityResolver(new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlreaderVar5.setContentHandler(new XMLPropertiesHandler());
xmlreaderVar5.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}"
6854,I18N,DM_DEFAULT_ENCODING,FP,configuration,4065,"writer = new OutputStreamWriter(out);
","public void save(OutputStream out, String encoding) throws ConfigurationException {
Writer writer = null;
if (encoding != null) {
try {
writer = new OutputStreamWriter(out, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (writer == null) {
writer = new OutputStreamWriter(out);
}
save(writer);
}","public void save(OutputStream out, String encoding) throws ConfigurationException {
Writer writerVar1 = writerLiteral2;
if (encoding != null) {
try {
writerVar1 = new OutputStreamWriter(out, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (writerVar1 == null) {
writerVar1 = new OutputStreamWriter(out);
}
save(writerVar1);
}"
6855,I18N,DM_DEFAULT_ENCODING,FP,configuration,4066,"reader = new InputStreamReader(in);
","public void load(InputStream in, String encoding) throws ConfigurationException {
Reader reader = null;
if (encoding != null) {
try {
reader = new InputStreamReader(in, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (reader == null) {
reader = new InputStreamReader(in);
}
load(reader);
}","public void load(InputStream in, String encoding) throws ConfigurationException {
Reader readerVar1 = readerLiteral2;
if (encoding != null) {
try {
readerVar1 = new InputStreamReader(in, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (readerVar1 == null) {
readerVar1 = new InputStreamReader(in);
}
load(readerVar1);
}"
6860,PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,FP,configuration,4071,"{
configuration = config;
name = n;
atPath = parseAt(at);
this.at = at;
}
public AbstractHierarchicalConfiguration<?> getConfiguration()
{
return configuration;
}
public String getName()
{
return name;
}
public String getAt()
{
return at;
}
public Object getRootNode()
{
return rootNode;
}
public CombinedNode getTransformedRoot()
{
CombinedNode result = new CombinedNode();
CombinedNode atParent = result;
if (atPath != null)
{
for (String name : atPath)
{
CombinedNode node = new CombinedNode();
node.setName(name);
atParent.addChild(name, node);
atParent = node;
}
}
rootNode = append(atParent, getConfiguration());
return result;
}
private <T> T append(CombinedNode atParent,
AbstractHierarchicalConfiguration<T> config)
{
T root = config.getRootNode();
atParent.appendChildren(root, config.getNodeHandler());
atParent.appendAttributes(root, config.getNodeHandler());
return root;
}
private Collection<String> parseAt(String at)
{
if (at == null)
{
return null;
}
Collection<String> result = new ArrayList<String>();
DefaultConfigurationKey.KeyIterator it = new DefaultConfigurationKey(
AT_ENGINE, at).iterator();
while (it.hasNext())
{
result.add(it.nextKey());
}
return result;
","private CombinedNode constructCombinedNode() {
initSubHandlers();
if (getNumberOfConfigurations() < 1) {
return new CombinedNode();
} else {
Iterator<ConfigData> it = configurations.iterator();
CombinedNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = getNodeCombiner().combine(node, getNodeHandler(), it.next().getTransformedRoot(), getNodeHandler());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node, getNodeHandler());
getLogger().debug(os.toString());
}
return node;
}
}","private CombinedNode constructCombinedNode() {
initSubHandlers();
if (getNumberOfConfigurations() < 1) {
return new CombinedNode();
} else {
Iterator<ConfigData> iterator<configdata>Var1 = iterator<configdata>Literal2;
CombinedNode combinednodeVar3 = combinednodeLiteral4;
while (iterator<configdata>Var1.hasNext()) {
combinednodeVar3 = getNodeCombiner().combine(combinednodeVar3, getNodeHandler(), iterator<configdata>Var1.next().getTransformedRoot(), getNodeHandler());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream bytearrayoutputstreamVar5 = bytearrayoutputstreamLiteral6;
PrintStream printstreamVar7 = printstreamLiteral8;
TreeUtils.printTree(printstreamVar7, combinednodeVar3, getNodeHandler());
getLogger().debug(bytearrayoutputstreamVar5.toString());
}
return combinednodeVar3;
}
}"
6867,PERFORMANCE,DM_NUMBER_CTOR,FP,configuration,4078,"return new Byte(n.byteValue());
","public Byte convert(Object value, Object... params) throws ConversionException {
Number n = toNumber(value, Byte.class);
if (n instanceof Byte) {
return (Byte) n;
} else {
return new Byte(n.byteValue());
}
}","public Byte convert(Object value, Object... params) throws ConversionException {
Number numberVar1 = numberLiteral2;
if (numberVar1 instanceof Byte) {
return (Byte) numberVar1;
} else {
return new Byte(numberVar1.byteValue());
}
}"
6869,PERFORMANCE,DM_FP_NUMBER_CTOR,FP,configuration,4080,"return new Float(n.floatValue());
","public Float convert(Object value, Object... params) throws ConversionException {
Number n = toNumber(value, Float.class);
if (n instanceof Float) {
return (Float) n;
} else {
return new Float(n.floatValue());
}
}","public Float convert(Object value, Object... params) throws ConversionException {
Number numberVar1 = numberLiteral2;
if (numberVar1 instanceof Float) {
return (Float) numberVar1;
} else {
return new Float(numberVar1.floatValue());
}
}"
6871,PERFORMANCE,DM_NUMBER_CTOR,FP,configuration,4082,"return new Long(n.longValue());
","public Long convert(Object value, Object... params) throws ConversionException {
Number n = toNumber(value, Long.class);
if (n instanceof Long) {
return (Long) n;
} else {
return new Long(n.longValue());
}
}","public Long convert(Object value, Object... params) throws ConversionException {
Number numberVar1 = numberLiteral2;
if (numberVar1 instanceof Long) {
return (Long) numberVar1;
} else {
return new Long(numberVar1.longValue());
}
}"
6872,PERFORMANCE,DM_NUMBER_CTOR,FP,configuration,4083,"return new Short(n.shortValue());
","public Short convert(Object value, Object... params) throws ConversionException {
Number n = toNumber(value, Short.class);
if (n instanceof Short) {
return (Short) n;
} else {
return new Short(n.shortValue());
}
}","public Short convert(Object value, Object... params) throws ConversionException {
Number numberVar1 = numberLiteral2;
if (numberVar1 instanceof Short) {
return (Short) numberVar1;
} else {
return new Short(numberVar1.shortValue());
}
}"
6874,BAD_PRACTICE,SE_BAD_FIELD,FP,configuration,4085,private NodeHandler<T> nodeHandler;,private NodeHandler<T> nodeHandler;,private NodeHandler<T> nodehandler<t>Var1;
6879,BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,configuration,4090,"parent.mkdirs();
","private void createPath(File file) {
if (file != null) {
if (!file.exists()) {
File parent = file.getParentFile();
if (parent != null && !parent.exists()) {
parent.mkdirs();
}
}
}
}","private void createPath(File file) {
if (file != null) {
if (!file.exists()) {
File fileVar1 = fileLiteral2;
if (fileVar1 != null && !fileVar1.exists()) {
fileVar1.mkdirs();
}
}
}
}"
6881,I18N,DM_CONVERT_CASE,FP,configuration,4092,"String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class[] paramTypes = new Class[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
return;
}
}","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String stringVar1 = stringLiteral2;
Class[] classArrayVar3 = classArrayLiteral4;
classArrayVar3[0] = FileSystemOptions.class;
classArrayVar3[1] = value.getClass();
try {
Method methodVar5 = methodLiteral6;
Object[] objectArrayVar7 = objectArrayLiteral8;
objectArrayVar7[0] = options;
objectArrayVar7[1] = value;
methodVar5.invoke(builder, objectArrayVar7);
} catch (Exception ex) {
return;
}
}"
6884,DODGY_CODE,REC_CATCH_EXCEPTION,FP,configuration,4095,"catch (Exception ex)
","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class[] paramTypes = new Class[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
return;
}
}","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String stringVar1 = stringLiteral2;
Class[] classArrayVar3 = classArrayLiteral4;
classArrayVar3[0] = FileSystemOptions.class;
classArrayVar3[1] = value.getClass();
try {
Method methodVar5 = methodLiteral6;
Object[] objectArrayVar7 = objectArrayLiteral8;
objectArrayVar7[0] = options;
objectArrayVar7[1] = value;
methodVar5.invoke(builder, objectArrayVar7);
} catch (Exception ex) {
return;
}
}"
6887,DODGY_CODE,REC_CATCH_EXCEPTION,FP,configuration,4098,"catch (Exception e)
","public void setValue(Object value) throws ConfigurationRuntimeException {
try {
if (!(value instanceof String)) {
this.value = value;
return;
}
String val = (String) value;
String name = StringUtils.removeStartIgnoreCase(val, CLASS);
Class clazz = ClassUtils.getClass(name);
if (name.length() == val.length()) {
this.value = clazz.newInstance();
} else {
this.value = clazz;
}
} catch (Exception e) {
throw new ConfigurationRuntimeException(""Unable to create "" + value, e);
}
}","public void setValue(Object value) throws ConfigurationRuntimeException {
try {
if (!(value instanceof String)) {
this.value = value;
return;
}
String stringVar1 = stringLiteral2;
String stringVar3 = stringLiteral4;
Class classVar5 = classLiteral6;
if (stringVar3.length() == stringVar1.length()) {
this.value = classVar5.newInstance();
} else {
this.value = classVar5;
}
} catch (Exception e) {
throw new ConfigurationRuntimeException(""Unable to create "" + value, e);
}
}"
6905,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,configuration,4116,"char[] ret = new char[len];
if ((bufpos + 1) >= len)
System.arraycopy(buffer, bufpos - len + 1, ret, 0, len);
else
{
System.arraycopy(buffer, bufsize - (len - bufpos - 1), ret, 0,
len - bufpos - 1);
System.arraycopy(buffer, 0, ret, len - bufpos - 1, bufpos + 1);
}
return ret;
","public char[] GetSuffix(int len) {
char[] ret = new char[len];
if ((bufpos + 1) >= len)
System.arraycopy(buffer, bufpos - len + 1, ret, 0, len);
else {
System.arraycopy(buffer, bufsize - (len - bufpos - 1), ret, 0, len - bufpos - 1);
System.arraycopy(buffer, 0, ret, len - bufpos - 1, bufpos + 1);
}
return ret;
}","public char[] GetSuffix(int len) {
char[] charArrayVar1 = charArrayLiteral2;
if ((bufpos + 1) >= len)
System.arraycopy(buffer, bufpos - len + 1, charArrayVar1, 0, len);
else {
System.arraycopy(buffer, bufsize - (len - bufpos - 1), charArrayVar1, 0, len - bufpos - 1);
System.arraycopy(buffer, 0, charArrayVar1, len - bufpos - 1, bufpos + 1);
}
return charArrayVar1;
}"
6909,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,configuration,4120,"ReInit(dstream, 1, 1, 4096);
}
","public void ReInit(java.io.InputStream dstream) {
ReInit(dstream, 1, 1, 4096);
}","public void ReInit(java.io.InputStream dstream) {
ReInit(dstream, 1, 1, 4096);
}"
6919,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,configuration,4130,"ReInit(dstream, startline, startcolumn, 4096);
}
","public void ReInit(java.io.InputStream dstream, int startline, int startcolumn) {
ReInit(dstream, startline, startcolumn, 4096);
}","public void ReInit(java.io.InputStream dstream, int startline, int startcolumn) {
ReInit(dstream, startline, startcolumn, 4096);
}"
6928,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,configuration,4139,"return(""Lexical error at line "" +
","protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {
return (""Lexical error at line "" + errorLine + "", column "" + errorColumn + "".  Encountered: "" + (EOFSeen ? ""<EOF> "" : (""\"""" + addEscapes(String.valueOf(curChar)) + ""\"""") + "" ("" + (int) curChar + ""), "") + ""after : \"""" + addEscapes(errorAfter) + ""\"""");
}","protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {
return (""Lexical error at line "" + errorLine + "", column "" + errorColumn + "".  Encountered: "" + (EOFSeen ? ""<EOF> "" : (""\"""" + addEscapes(String.valueOf(curChar)) + ""\"""") + "" ("" + (int) curChar + ""), "") + ""after : \"""" + addEscapes(errorAfter) + ""\"""");
}"
6934,DODGY_CODE,SF_SWITCH_NO_DEFAULT,FP,configuration,4145,"switch (i) {
case 0: jj_3_1(); break;
","private void jj_rescan_token() {
jj_rescan = true;
for (int i = 0; i < 1; i++) {
try {
JJCalls p = jj_2_rtns[i];
do {
if (p.gen > jj_gen) {
jj_la = p.arg;
jj_lastpos = jj_scanpos = p.first;
switch(i) {
case 0:
jj_3_1();
break;
}
}
p = p.next;
} while (p != null);
} catch (LookaheadSuccess ls) {
}
}
jj_rescan = false;
}","private void jj_rescan_token() {
jj_rescan = true;
for (int intVar5 = intLiteral6; intVar1 < intLiteral1; intVar1++) {
try {
JJCalls jjcallsVar3 = jjcallsLiteral4;
do {
if (jjcallsVar3.gen > jj_gen) {
jj_la = jjcallsVar3.arg;
jj_lastpos = jj_scanpos = jjcallsVar3.first;
switch(intVar1) {
case 0:
jj_3_1();
break;
}
}
jjcallsVar3 = jjcallsVar3.next;
} while (jjcallsVar3 != null);
} catch (LookaheadSuccess ls) {
}
}
jj_rescan = false;
}"
6944,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,configuration,4155,"jjmatchedPos = jjnewStateCnt = 0;
curLexState = defaultLexState;
input_stream = stream;
ReInitRounds();
}
","public void ReInit(SimpleCharStream stream) {
jjmatchedPos = jjnewStateCnt = 0;
curLexState = defaultLexState;
input_stream = stream;
ReInitRounds();
}","public void ReInit(SimpleCharStream stream) {
jjmatchedPos = jjnewStateCnt = 0;
curLexState = defaultLexState;
input_stream = stream;
ReInitRounds();
}"
6954,I18N,DM_DEFAULT_ENCODING,FP,configuration,4165,"this(new java.io.InputStreamReader(dstream), startline, startcolumn, buffersize);
","public SimpleCharStream(java.io.InputStream dstream, int startline, int startcolumn, int buffersize) {
this(new java.io.InputStreamReader(dstream), startline, startcolumn, buffersize);
}","public SimpleCharStream(java.io.InputStream dstream, int startline, int startcolumn, int buffersize) {
this(new java.io.InputStreamReader(dstream), startline, startcolumn, buffersize);
}"
6959,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,configuration,4170,"ReInit(new java.io.InputStreamReader(dstream), startline, startcolumn, buffersize);
}
","public void ReInit(java.io.InputStream dstream, int startline, int startcolumn, int buffersize) {
ReInit(new java.io.InputStreamReader(dstream), startline, startcolumn, buffersize);
}","public void ReInit(java.io.InputStream dstream, int startline, int startcolumn, int buffersize) {
ReInit(new java.io.InputStreamReader(dstream), startline, startcolumn, buffersize);
}"
6961,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,configuration,4172,"char[] newbuffer = new char[bufsize + 2048];
int newbufline[] = new int[bufsize + 2048];
int newbufcolumn[] = new int[bufsize + 2048];
try
{
if (wrapAround)
{
System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
System.arraycopy(buffer, 0, newbuffer,
bufsize - tokenBegin, bufpos);
buffer = newbuffer;
System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
System.arraycopy(bufline, 0, newbufline, bufsize - tokenBegin, bufpos);
bufline = newbufline;
System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
System.arraycopy(bufcolumn, 0, newbufcolumn, bufsize - tokenBegin, bufpos);
bufcolumn = newbufcolumn;
maxNextCharInd = (bufpos += (bufsize - tokenBegin));
}
else
{
System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
buffer = newbuffer;
System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
bufline = newbufline;
System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
bufcolumn = newbufcolumn;
maxNextCharInd = (bufpos -= tokenBegin);
}
}
catch (Throwable t)
{
throw new Error(t.getMessage());
}
bufsize += 2048;
available = bufsize;
tokenBegin = 0;
}
","protected void ExpandBuff(boolean wrapAround) {
char[] newbuffer = new char[bufsize + 2048];
int[] newbufline = new int[bufsize + 2048];
int[] newbufcolumn = new int[bufsize + 2048];
try {
if (wrapAround) {
System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
System.arraycopy(buffer, 0, newbuffer, bufsize - tokenBegin, bufpos);
buffer = newbuffer;
System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
System.arraycopy(bufline, 0, newbufline, bufsize - tokenBegin, bufpos);
bufline = newbufline;
System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
System.arraycopy(bufcolumn, 0, newbufcolumn, bufsize - tokenBegin, bufpos);
bufcolumn = newbufcolumn;
maxNextCharInd = (bufpos += (bufsize - tokenBegin));
} else {
System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
buffer = newbuffer;
System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
bufline = newbufline;
System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
bufcolumn = newbufcolumn;
maxNextCharInd = (bufpos -= tokenBegin);
}
} catch (Throwable t) {
throw new Error(t.getMessage());
}
bufsize += 2048;
available = bufsize;
tokenBegin = 0;
}","protected void ExpandBuff(boolean wrapAround) {
char[] charArrayVar1 = charArrayLiteral2;
int[] intArrayVar3 = intArrayLiteral4;
int[] intArrayVar5 = intArrayLiteral4;
try {
if (wrapAround) {
System.arraycopy(buffer, tokenBegin, charArrayVar1, 0, bufsize - tokenBegin);
System.arraycopy(buffer, 0, charArrayVar1, bufsize - tokenBegin, bufpos);
buffer = charArrayVar1;
System.arraycopy(bufline, tokenBegin, intArrayVar3, 0, bufsize - tokenBegin);
System.arraycopy(bufline, 0, intArrayVar3, bufsize - tokenBegin, bufpos);
bufline = intArrayVar3;
System.arraycopy(bufcolumn, tokenBegin, intArrayVar5, 0, bufsize - tokenBegin);
System.arraycopy(bufcolumn, 0, intArrayVar5, bufsize - tokenBegin, bufpos);
bufcolumn = intArrayVar5;
maxNextCharInd = (bufpos += (bufsize - tokenBegin));
} else {
System.arraycopy(buffer, tokenBegin, charArrayVar1, 0, bufsize - tokenBegin);
buffer = charArrayVar1;
System.arraycopy(bufline, tokenBegin, intArrayVar3, 0, bufsize - tokenBegin);
bufline = intArrayVar3;
System.arraycopy(bufcolumn, tokenBegin, intArrayVar5, 0, bufsize - tokenBegin);
bufcolumn = intArrayVar5;
maxNextCharInd = (bufpos -= tokenBegin);
}
} catch (Throwable t) {
throw new Error(t.getMessage());
}
bufsize += 2048;
available = bufsize;
tokenBegin = 0;
}"
6962,DODGY_CODE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,FP,configuration,4173,public int endColumn;,public int endColumn;,public int intVar1;
6965,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,configuration,4176,"return(""Lexical error at line "" +
","protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {
return (""Lexical error at line "" + errorLine + "", column "" + errorColumn + "".  Encountered: "" + (EOFSeen ? ""<EOF> "" : (""\"""" + addEscapes(String.valueOf(curChar)) + ""\"""") + "" ("" + (int) curChar + ""), "") + ""after : \"""" + addEscapes(errorAfter) + ""\"""");
}","protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {
return (""Lexical error at line "" + errorLine + "", column "" + errorColumn + "".  Encountered: "" + (EOFSeen ? ""<EOF> "" : (""\"""" + addEscapes(String.valueOf(curChar)) + ""\"""") + "" ("" + (int) curChar + ""), "") + ""after : \"""" + addEscapes(errorAfter) + ""\"""");
}"
6970,DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,FP,configuration,4181,"String name = (url == null) ? fileName : url.toString();
","public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
String base = ((CatalogManager) catalogManager).getBaseDir();
Vector catalogs = catalogManager.getCatalogFiles();
if (catalogs != null) {
for (int count = 0; count < catalogs.size(); count++) {
String fileName = (String) catalogs.elementAt(count);
URL url = null;
InputStream is = null;
try {
url = ConfigurationUtils.locate(fs, base, fileName);
if (url != null) {
is = fs.getInputStream(url);
}
} catch (ConfigurationException ce) {
String name = (url == null) ? fileName : url.toString();
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + name + "". "" + ce.getMessage());
}
if (is != null) {
String mimeType = fileNameMap.getContentTypeFor(fileName);
try {
if (mimeType != null) {
parseCatalog(mimeType, is);
continue;
}
} catch (Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + fileName + "". "" + ex.getMessage());
} finally {
is.close();
}
}
parseCatalog(base, fileName);
}
}
}","public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
String stringVar1 = stringLiteral2;
Vector vectorVar3 = vectorLiteral4;
if (vectorVar3 != null) {
for (int intVar16 = intLiteral17; intVar5 < intLiteral1; intVar5++) {
String stringVar7 = stringLiteral8;
URL urlVar9 = urlLiteral10;
InputStream inputstreamVar11 = urlLiteral10;
try {
urlVar9 = ConfigurationUtils.locate(fs, stringVar1, stringVar7);
if (urlVar9 != null) {
inputstreamVar11 = fs.getInputStream(urlVar9);
}
} catch (ConfigurationException ce) {
String stringVar12 = stringLiteral13;
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + stringVar12 + "". "" + ce.getMessage());
}
if (inputstreamVar11 != null) {
String stringVar14 = stringLiteral15;
try {
if (stringVar14 != null) {
parseCatalog(stringVar14, inputstreamVar11);
continue;
}
} catch (Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + stringVar7 + "". "" + ex.getMessage());
} finally {
inputstreamVar11.close();
}
}
parseCatalog(stringVar1, stringVar7);
}
}
}"
6974,DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,configuration,4185,"result = namedNodes.get(name);
","public List<ConfigurationNode> getSubNodes(String name) {
if (name == null) {
return getSubNodes();
}
List<ConfigurationNode> result;
if (nodes == null) {
result = null;
} else {
result = namedNodes.get(name);
}
if (result == null) {
return Collections.emptyList();
} else {
return Collections.unmodifiableList(result);
}
}","public List<ConfigurationNode> getSubNodes(String name) {
if (name == null) {
return getSubNodes();
}
List<ConfigurationNode> list<configurationnode>Var1;
if (nodes == null) {
list<configurationnode>Var1 = null;
} else {
list<configurationnode>Var1 = namedNodes.get(name);
}
if (list<configurationnode>Var1 == null) {
return Collections.emptyList();
} else {
return Collections.unmodifiableList(list<configurationnode>Var1);
}
}"
7007,PERFORMANCE,DM_FP_NUMBER_CTOR,FP,configuration,4218,"return getFloat(key, new Float(defaultValue)).floatValue();
","public float getFloat(String key, float defaultValue) {
return getFloat(key, new Float(defaultValue)).floatValue();
}","public float getFloat(String key, float defaultValue) {
return getFloat(key, new Float(defaultValue)).floatValue();
}"
7017,I18N,DM_CONVERT_CASE,FP,configuration,4228,"if (filename != null && filename.toLowerCase().trim().endsWith("".xml""))
","@Override
protected FileConfiguration createConfiguration(Attributes attributes) throws Exception {
String filename = attributes.getValue(ATTR_FILENAME);
if (filename != null && filename.toLowerCase().trim().endsWith("".xml"")) {
return new XMLPropertiesConfiguration();
} else {
return new PropertiesConfiguration();
}
}","@Override
protected FileConfiguration createConfiguration(Attributes attributes) throws Exception {
String stringVar1 = stringLiteral2;
if (stringVar1 != null && stringVar1.toLowerCase().trim().endsWith("".xml"")) {
return new XMLPropertiesConfiguration();
} else {
return new PropertiesConfiguration();
}
}"
7020,CORRECTNESS,NP_GUARANTEED_DEREF,FP,configuration,4231,"file = new File(fileName);
","static File constructFile(String basePath, String fileName) {
File file;
File absolute = null;
if (fileName != null) {
absolute = new File(fileName);
}
if (StringUtils.isEmpty(basePath) || (absolute != null && absolute.isAbsolute())) {
file = new File(fileName);
} else {
StringBuilder fName = new StringBuilder();
fName.append(basePath);
if (!basePath.endsWith(File.separator)) {
fName.append(File.separator);
}
if (fileName.startsWith(""."" + File.separator)) {
fName.append(fileName.substring(2));
} else {
fName.append(fileName);
}
file = new File(fName.toString());
}
return file;
}","static File constructFile(String basePath, String fileName) {
File fileVar1;
File fileVar2 = fileLiteral3;
if (fileName != null) {
fileVar2 = new File(fileName);
}
if (StringUtils.isEmpty(basePath) || (fileVar2 != null && fileVar2.isAbsolute())) {
fileVar1 = new File(fileName);
} else {
StringBuilder stringbuilderVar4 = stringbuilderLiteral5;
stringbuilderVar4.append(basePath);
if (!basePath.endsWith(File.separator)) {
stringbuilderVar4.append(File.separator);
}
if (fileName.startsWith(""."" + File.separator)) {
stringbuilderVar4.append(fileName.substring(2));
} else {
stringbuilderVar4.append(fileName);
}
fileVar1 = new File(stringbuilderVar4.toString());
}
return fileVar1;
}"
7029,EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,FP,configuration,4240,"ResultSet rs = pstmt.executeQuery();
","public Iterator<String> getKeys() {
Collection<String> keys = new ArrayList<String>();
StringBuilder query = new StringBuilder(""SELECT DISTINCT "" + keyColumn + "" FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
ResultSet rs = pstmt.executeQuery();
while (rs.next()) {
keys.add(rs.getString(1));
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(conn, pstmt);
}
return keys.iterator();
}","public Iterator<String> getKeys() {
Collection<String> collection<string>Var1 = collection<string>Literal2;
StringBuilder stringbuilderVar3 = stringbuilderLiteral4;
if (nameColumn != null) {
stringbuilderVar3.append("" WHERE "" + nameColumn + ""=?"");
}
Connection connectionVar5 = connectionLiteral6;
PreparedStatement preparedstatementVar7 = connectionLiteral6;
try {
connectionVar5 = getConnection();
preparedstatementVar7 = connectionVar5.prepareStatement(stringbuilderVar3.toString());
if (nameColumn != null) {
preparedstatementVar7.setString(1, name);
}
ResultSet resultsetVar8 = resultsetLiteral9;
while (resultsetVar8.next()) {
collection<string>Var1.add(resultsetVar8.getString(1));
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(connectionVar5, preparedstatementVar7);
}
return collection<string>Var1.iterator();
}"
7031,SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,configuration,4242,"pstmt = conn.prepareStatement(query.toString());
","public Iterator<String> getKeys() {
Collection<String> keys = new ArrayList<String>();
StringBuilder query = new StringBuilder(""SELECT DISTINCT "" + keyColumn + "" FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
ResultSet rs = pstmt.executeQuery();
while (rs.next()) {
keys.add(rs.getString(1));
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(conn, pstmt);
}
return keys.iterator();
}","public Iterator<String> getKeys() {
Collection<String> collection<string>Var1 = collection<string>Literal2;
StringBuilder stringbuilderVar3 = stringbuilderLiteral4;
if (nameColumn != null) {
stringbuilderVar3.append("" WHERE "" + nameColumn + ""=?"");
}
Connection connectionVar5 = connectionLiteral6;
PreparedStatement preparedstatementVar7 = connectionLiteral6;
try {
connectionVar5 = getConnection();
preparedstatementVar7 = connectionVar5.prepareStatement(stringbuilderVar3.toString());
if (nameColumn != null) {
preparedstatementVar7.setString(1, name);
}
ResultSet resultsetVar8 = resultsetLiteral9;
while (resultsetVar8.next()) {
collection<string>Var1.add(resultsetVar8.getString(1));
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(connectionVar5, preparedstatementVar7);
}
return collection<string>Var1.iterator();
}"
7033,SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,configuration,4244,"pstmt = conn.prepareStatement(query.toString());
","@Override
protected void clearPropertyDirect(String key) {
StringBuilder query = new StringBuilder(""DELETE FROM "" + table + "" WHERE "" + keyColumn + ""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
pstmt.executeUpdate();
commitIfRequired(conn);
} catch (SQLException e) {
fireError(EVENT_CLEAR_PROPERTY, key, null, e);
} finally {
close(conn, pstmt);
}
}","@Override
protected void clearPropertyDirect(String key) {
StringBuilder stringbuilderVar1 = stringbuilderLiteral2;
if (nameColumn != null) {
stringbuilderVar1.append("" AND "" + nameColumn + ""=?"");
}
Connection connectionVar3 = connectionLiteral4;
PreparedStatement preparedstatementVar5 = connectionLiteral4;
try {
connectionVar3 = getConnection();
preparedstatementVar5 = connectionVar3.prepareStatement(stringbuilderVar1.toString());
preparedstatementVar5.setString(1, key);
if (nameColumn != null) {
preparedstatementVar5.setString(2, name);
}
preparedstatementVar5.executeUpdate();
commitIfRequired(connectionVar3);
} catch (SQLException e) {
fireError(EVENT_CLEAR_PROPERTY, key, null, e);
} finally {
close(connectionVar3, preparedstatementVar5);
}
}"
7044,PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,configuration,4255,"{
@Override
protected Object interpolate(Object value)
{
return parent.interpolate(value);
",private ConfigurationNode rootNode;,private ConfigurationNode configurationnodeVar1;
7045,BAD_PRACTICE,SE_BAD_FIELD,FP,configuration,4256,private ConfigurationNode rootNode;,private ConfigurationNode rootNode;,private ConfigurationNode configurationnodeVar1;
7047,BAD_PRACTICE,SE_BAD_FIELD_STORE,FP,configuration,4258,private final Object reloadLock;,private final Object reloadLock;,private final Object objectVar1;
7052,Multithreaded correctness,RV_RETURN_VALUE_OF_PUTIFABSENT_IGNORED,FP,configuration,4263,"configurationsMap.putIfAbsent(pattern, configuration);
","private AbstractHierarchicalFileConfiguration getConfiguration() {
if (pattern == null) {
throw new ConfigurationRuntimeException(""File pattern must be defined"");
}
String path = localSubst.replace(pattern);
if (configurationsMap.containsKey(path)) {
return configurationsMap.get(path);
}
if (path.equals(pattern)) {
XMLConfiguration configuration = new XMLConfiguration() {
@Override
public void load() throws ConfigurationException {
}
@Override
public void save() throws ConfigurationException {
}
};
configurationsMap.putIfAbsent(pattern, configuration);
return configuration;
}
XMLConfiguration configuration = new XMLConfiguration();
if (loggerName != null) {
Log log = LogFactory.getLog(loggerName);
if (log != null) {
configuration.setLogger(log);
}
}
configuration.setBasePath(getBasePath());
configuration.setFileName(path);
configuration.setFileSystem(getFileSystem());
configuration.setExpressionEngine(getExpressionEngine());
ReloadingStrategy strategy = createReloadingStrategy();
if (strategy != null) {
configuration.setReloadingStrategy(strategy);
}
configuration.setDelimiterParsingDisabled(isDelimiterParsingDisabled());
configuration.setAttributeSplittingDisabled(isAttributeSplittingDisabled());
configuration.setValidating(validating);
configuration.setSchemaValidation(schemaValidation);
configuration.setEntityResolver(entityResolver);
configuration.setListDelimiter(getListDelimiter());
configuration.addConfigurationListener(this);
configuration.addErrorListener(this);
try {
configuration.load();
} catch (ConfigurationException ce) {
if (isThrowable(ce)) {
throw new ConfigurationRuntimeException(ce);
}
}
configurationsMap.putIfAbsent(path, configuration);
return configurationsMap.get(path);
}","private AbstractHierarchicalFileConfiguration getConfiguration() {
if (pattern == null) {
throw new ConfigurationRuntimeException(""File pattern must be defined"");
}
String stringVar1 = stringLiteral2;
if (configurationsMap.containsKey(stringVar1)) {
return configurationsMap.get(stringVar1);
}
if (stringVar1.equals(pattern)) {
XMLConfiguration xmlconfigurationVar3 = xmlconfigurationLiteral4;
configurationsMap.putIfAbsent(pattern, xmlconfigurationVar3);
return xmlconfigurationVar3;
}
XMLConfiguration xmlconfigurationVar3 = xmlconfigurationLiteral5;
if (loggerName != null) {
Log logVar6 = logLiteral7;
if (logVar6 != null) {
xmlconfigurationVar3.setLogger(logVar6);
}
}
xmlconfigurationVar3.setBasePath(getBasePath());
xmlconfigurationVar3.setFileName(stringVar1);
xmlconfigurationVar3.setFileSystem(getFileSystem());
xmlconfigurationVar3.setExpressionEngine(getExpressionEngine());
ReloadingStrategy reloadingstrategyVar8 = reloadingstrategyLiteral9;
if (reloadingstrategyVar8 != null) {
xmlconfigurationVar3.setReloadingStrategy(reloadingstrategyVar8);
}
xmlconfigurationVar3.setDelimiterParsingDisabled(isDelimiterParsingDisabled());
xmlconfigurationVar3.setAttributeSplittingDisabled(isAttributeSplittingDisabled());
xmlconfigurationVar3.setValidating(validating);
xmlconfigurationVar3.setSchemaValidation(schemaValidation);
xmlconfigurationVar3.setEntityResolver(entityResolver);
xmlconfigurationVar3.setListDelimiter(getListDelimiter());
xmlconfigurationVar3.addConfigurationListener(this);
xmlconfigurationVar3.addErrorListener(this);
try {
xmlconfigurationVar3.load();
} catch (ConfigurationException ce) {
if (isThrowable(ce)) {
throw new ConfigurationRuntimeException(ce);
}
}
configurationsMap.putIfAbsent(stringVar1, xmlconfigurationVar3);
return configurationsMap.get(stringVar1);
}"
7058,DODGY_CODE,RI_REDUNDANT_INTERFACES,FP,configuration,4269,"private static ThreadLocal<Boolean> recursive = new ThreadLocal<Boolean>()
{
@Override
protected synchronized Boolean initialValue()
{
return Boolean.FALSE;
}
};
private final ConcurrentMap<String, XMLConfiguration> configurationsMap =
new ConcurrentHashMap<String, XMLConfiguration>();
private String pattern;
private boolean init;
private boolean ignoreException = true;
private boolean schemaValidation;
private boolean validating;
private boolean attributeSplittingDisabled;
private String loggerName = MultiFileHierarchicalConfiguration.class.getName();
private ReloadingStrategy fileStrategy;
private EntityResolver entityResolver;
private StrSubstitutor localSubst = new StrSubstitutor(new ConfigurationInterpolator());
public MultiFileHierarchicalConfiguration()
{
super();
this.init = true;
setLogger(LogFactory.getLog(loggerName));
}
public MultiFileHierarchicalConfiguration(String pathPattern)
{
super();
this.pattern = pathPattern;
this.init = true;
setLogger(LogFactory.getLog(loggerName));
}
public void setLoggerName(String name)
{
this.loggerName = name;
}
public void setFilePattern(String pathPattern)
{
this.pattern = pathPattern;
}
public boolean isSchemaValidation()
{
return schemaValidation;
}
public void setSchemaValidation(boolean schemaValidation)
{
this.schemaValidation = schemaValidation;
}
public boolean isValidating()
{
return validating;
}
public void setValidating(boolean validating)
{
this.validating = validating;
}
public boolean isAttributeSplittingDisabled()
{
return attributeSplittingDisabled;
}
public void setAttributeSplittingDisabled(boolean attributeSplittingDisabled)
{
this.attributeSplittingDisabled = attributeSplittingDisabled;
}
@Override
public ReloadingStrategy getReloadingStrategy()
{
return fileStrategy;
}
@Override
public void setReloadingStrategy(ReloadingStrategy strategy)
{
this.fileStrategy = strategy;
}
public void setEntityResolver(EntityResolver entityResolver)
{
this.entityResolver = entityResolver;
}
public EntityResolver getEntityResolver()
{
return this.entityResolver;
}
public void setIgnoreException(boolean ignoreException)
{
this.ignoreException = ignoreException;
}
@Override
public void addProperty(String key, Object value)
{
this.getConfiguration().addProperty(key, value);
}
@Override
public void clear()
{
this.getConfiguration().clear();
}
@Override
public void clearProperty(String key)
{
this.getConfiguration().clearProperty(key);
}
@Override
public boolean containsKey(String key)
{
return this.getConfiguration().containsKey(key);
}
@Override
public BigDecimal getBigDecimal(String key, BigDecimal defaultValue)
{
return this.getConfiguration().getBigDecimal(key, defaultValue);
}
@Override
public BigDecimal getBigDecimal(String key)
{
return this.getConfiguration().getBigDecimal(key);
}
@Override
public BigInteger getBigInteger(String key, BigInteger defaultValue)
{
return this.getConfiguration().getBigInteger(key, defaultValue);
}
@Override
public BigInteger getBigInteger(String key)
{
return this.getConfiguration().getBigInteger(key);
}
@Override
public boolean getBoolean(String key, boolean defaultValue)
{
return this.getConfiguration().getBoolean(key, defaultValue);
}
@Override
public Boolean getBoolean(String key, Boolean defaultValue)
{
return this.getConfiguration().getBoolean(key, defaultValue);
}
@Override
public boolean getBoolean(String key)
{
return this.getConfiguration().getBoolean(key);
}
@Override
public byte getByte(String key, byte defaultValue)
{
return this.getConfiguration().getByte(key, defaultValue);
}
@Override
public Byte getByte(String key, Byte defaultValue)
{
return this.getConfiguration().getByte(key, defaultValue);
}
@Override
public byte getByte(String key)
{
return this.getConfiguration().getByte(key);
}
@Override
public double getDouble(String key, double defaultValue)
{
return this.getConfiguration().getDouble(key, defaultValue);
}
@Override
public Double getDouble(String key, Double defaultValue)
{
return this.getConfiguration().getDouble(key, defaultValue);
}
@Override
public double getDouble(String key)
{
return this.getConfiguration().getDouble(key);
}
@Override
public float getFloat(String key, float defaultValue)
{
return this.getConfiguration().getFloat(key, defaultValue);
}
@Override
public Float getFloat(String key, Float defaultValue)
{
return this.getConfiguration().getFloat(key, defaultValue);
}
@Override
public float getFloat(String key)
{
return this.getConfiguration().getFloat(key);
}
@Override
public int getInt(String key, int defaultValue)
{
return this.getConfiguration().getInt(key, defaultValue);
}
@Override
public int getInt(String key)
{
return this.getConfiguration().getInt(key);
}
@Override
public Integer getInteger(String key, Integer defaultValue)
{
return this.getConfiguration().getInteger(key, defaultValue);
}
@Override
public Iterator<String> getKeys()
{
return this.getConfiguration().getKeys();
}
@Override
public Iterator<String> getKeys(String prefix)
{
return this.getConfiguration().getKeys(prefix);
}
@Override
public List<Object> getList(String key, List<Object> defaultValue)
{
return this.getConfiguration().getList(key, defaultValue);
}
@Override
public List<Object> getList(String key)
{
return this.getConfiguration().getList(key);
}
@Override
public long getLong(String key, long defaultValue)
{
return this.getConfiguration().getLong(key, defaultValue);
}
@Override
public Long getLong(String key, Long defaultValue)
{
return this.getConfiguration().getLong(key, defaultValue);
}
@Override
public long getLong(String key)
{
return this.getConfiguration().getLong(key);
}
@Override
public Properties getProperties(String key)
{
return this.getConfiguration().getProperties(key);
}
@Override
public Object getProperty(String key)
{
return this.getConfiguration().getProperty(key);
}
@Override
public short getShort(String key, short defaultValue)
{
return this.getConfiguration().getShort(key, defaultValue);
}
@Override
public Short getShort(String key, Short defaultValue)
{
return this.getConfiguration().getShort(key, defaultValue);
}
@Override
public short getShort(String key)
{
return this.getConfiguration().getShort(key);
}
@Override
public String getString(String key, String defaultValue)
{
return this.getConfiguration().getString(key, defaultValue);
}
@Override
public String getString(String key)
{
return this.getConfiguration().getString(key);
}
@Override
public String[] getStringArray(String key)
{
return this.getConfiguration().getStringArray(key);
}
@Override
public boolean isEmpty()
{
return this.getConfiguration().isEmpty();
}
@Override
public void setProperty(String key, Object value)
{
if (init)
{
this.getConfiguration().setProperty(key, value);
}
}
@Override
public Configuration subset(String prefix)
{
return this.getConfiguration().subset(prefix);
}
@Override
public Object getReloadLock()
{
return this.getConfiguration().getReloadLock();
}
@Override
public Node getRoot()
{
return this.getConfiguration().getRoot();
}
@Override
public void setRoot(Node node)
{
if (init)
{
this.getConfiguration().setRoot(node);
}
else
{
super.setRoot(node);
}
}
@Override
public ConfigurationNode getRootNode()
{
return this.getConfiguration().getRootNode();
}
@Override
public void setRootNode(ConfigurationNode rootNode)
{
if (init)
{
this.getConfiguration().setRootNode(rootNode);
}
else
{
super.setRootNode(rootNode);
}
}
@Override
public ExpressionEngine getExpressionEngine()
{
return super.getExpressionEngine();
}
@Override
public void setExpressionEngine(ExpressionEngine expressionEngine)
{
super.setExpressionEngine(expressionEngine);
}
@Override
public void addNodes(String key, Collection<? extends ConfigurationNode> nodes)
{
this.getConfiguration().addNodes(key, nodes);
}
@Override
public SubnodeConfiguration configurationAt(String key, boolean supportUpdates)
{
return this.getConfiguration().configurationAt(key, supportUpdates);
}
@Override
public SubnodeConfiguration configurationAt(String key)
{
return this.getConfiguration().configurationAt(key);
}
@Override
public List<HierarchicalConfiguration> configurationsAt(String key)
{
return this.getConfiguration().configurationsAt(key);
}
@Override
public void clearTree(String key)
{
this.getConfiguration().clearTree(key);
}
@Override
public int getMaxIndex(String key)
{
return this.getConfiguration().getMaxIndex(key);
}
@Override
public Configuration interpolatedConfiguration()
{
return this.getConfiguration().interpolatedConfiguration();
}
@Override
public void addConfigurationListener(ConfigurationListener l)
{
super.addConfigurationListener(l);
}
@Override
public boolean removeConfigurationListener(ConfigurationListener l)
{
return super.removeConfigurationListener(l);
}
@Override
public Collection<ConfigurationListener> getConfigurationListeners()
{
return super.getConfigurationListeners();
}
@Override
public void clearConfigurationListeners()
{
super.clearConfigurationListeners();
}
@Override
public void addErrorListener(ConfigurationErrorListener l)
{
super.addErrorListener(l);
}
@Override
public boolean removeErrorListener(ConfigurationErrorListener l)
{
return super.removeErrorListener(l);
}
@Override
public void clearErrorListeners()
{
super.clearErrorListeners();
}
@Override
public Collection<ConfigurationErrorListener> getErrorListeners()
{
return super.getErrorListeners();
}
public void save(Writer writer) throws ConfigurationException
{
if (init)
{
this.getConfiguration().save(writer);
}
}
public void load(Reader reader) throws ConfigurationException
{
if (init)
{
this.getConfiguration().load(reader);
}
}
@Override
public void load() throws ConfigurationException
{
this.getConfiguration();
}
@Override
public void load(String fileName) throws ConfigurationException
{
this.getConfiguration().load(fileName);
}
@Override
public void load(File file) throws ConfigurationException
{
this.getConfiguration().load(file);
}
@Override
public void load(URL url) throws ConfigurationException
{
this.getConfiguration().load(url);
}
@Override
public void load(InputStream in) throws ConfigurationException
{
this.getConfiguration().load(in);
}
@Override
public void load(InputStream in, String encoding) throws ConfigurationException
{
this.getConfiguration().load(in, encoding);
}
@Override
public void save() throws ConfigurationException
{
this.getConfiguration().save();
}
@Override
public void save(String fileName) throws ConfigurationException
{
this.getConfiguration().save(fileName);
}
@Override
public void save(File file) throws ConfigurationException
{
this.getConfiguration().save(file);
}
@Override
public void save(URL url) throws ConfigurationException
{
this.getConfiguration().save(url);
}
@Override
public void save(OutputStream out) throws ConfigurationException
{
this.getConfiguration().save(out);
}
@Override
public void save(OutputStream out, String encoding) throws ConfigurationException
{
this.getConfiguration().save(out, encoding);
}
@Override
public void configurationChanged(ConfigurationEvent event)
{
if (event.getSource() instanceof XMLConfiguration)
{
for (ConfigurationListener listener : getConfigurationListeners())
{
listener.configurationChanged(event);
}
}
}
@Override
public void configurationError(ConfigurationErrorEvent event)
{
if (event.getSource() instanceof XMLConfiguration)
{
for (ConfigurationErrorListener listener : getErrorListeners())
{
listener.configurationError(event);
}
}
if (event.getType() == AbstractFileConfiguration.EVENT_RELOAD)
{
if (isThrowable(event.getCause()))
{
throw new ConfigurationRuntimeException(event.getCause());
}
}
}
@Override
protected Object resolveContainerStore(String key)
{
if (recursive.get().booleanValue())
{
return null;
}
recursive.set(Boolean.TRUE);
try
{
return super.resolveContainerStore(key);
}
finally
{
recursive.set(Boolean.FALSE);
}
}
public void removeConfiguration()
{
String path = getSubstitutor().replace(pattern);
configurationsMap.remove(path);
}
private AbstractHierarchicalFileConfiguration getConfiguration()
{
if (pattern == null)
{
throw new ConfigurationRuntimeException(""File pattern must be defined"");
}
String path = localSubst.replace(pattern);
if (configurationsMap.containsKey(path))
{
return configurationsMap.get(path);
}
if (path.equals(pattern))
{
XMLConfiguration configuration = new XMLConfiguration()
{
@Override
public void load() throws ConfigurationException
{
}
@Override
public void save() throws ConfigurationException
{
}
};
configurationsMap.putIfAbsent(pattern, configuration);
return configuration;
}
XMLConfiguration configuration = new XMLConfiguration();
if (loggerName != null)
{
Log log = LogFactory.getLog(loggerName);
if (log != null)
{
configuration.setLogger(log);
}
}
configuration.setBasePath(getBasePath());
configuration.setFileName(path);
configuration.setFileSystem(getFileSystem());
configuration.setExpressionEngine(getExpressionEngine());
ReloadingStrategy strategy = createReloadingStrategy();
if (strategy != null)
{
configuration.setReloadingStrategy(strategy);
}
configuration.setDelimiterParsingDisabled(isDelimiterParsingDisabled());
configuration.setAttributeSplittingDisabled(isAttributeSplittingDisabled());
configuration.setValidating(validating);
configuration.setSchemaValidation(schemaValidation);
configuration.setEntityResolver(entityResolver);
configuration.setListDelimiter(getListDelimiter());
configuration.addConfigurationListener(this);
configuration.addErrorListener(this);
try
{
configuration.load();
}
catch (ConfigurationException ce)
{
if (isThrowable(ce))
{
throw new ConfigurationRuntimeException(ce);
}
}
configurationsMap.putIfAbsent(path, configuration);
return configurationsMap.get(path);
}
private boolean isThrowable(Throwable throwable)
{
if (!ignoreException)
{
return true;
}
Throwable cause = throwable.getCause();
while (cause != null && !(cause instanceof SAXParseException))
{
cause = cause.getCause();
}
return cause != null;
}
private ReloadingStrategy createReloadingStrategy()
{
if (fileStrategy == null)
{
return null;
}
try
{
ReloadingStrategy strategy = (ReloadingStrategy) BeanUtils.cloneBean(fileStrategy);
strategy.setConfiguration(null);
return strategy;
}
catch (Exception ex)
{
return null;
","@Override
public long getLong(String key) {
return this.getConfiguration().getLong(key);
}","@Override
public long getLong(String key) {
return this.getConfiguration().getLong(key);
}"
7061,PERFORMANCE,DM_NUMBER_CTOR,FP,configuration,4272,"return new Short(n.shortValue());
","public static Short toShort(Object value) throws ConversionException {
Number n = toNumber(value, Short.class);
if (n instanceof Short) {
return (Short) n;
} else {
return new Short(n.shortValue());
}
}","public static Short toShort(Object value) throws ConversionException {
Number numberVar1 = numberLiteral2;
if (numberVar1 instanceof Short) {
return (Short) numberVar1;
} else {
return new Short(numberVar1.shortValue());
}
}"
7062,PERFORMANCE,DM_FP_NUMBER_CTOR,FP,configuration,4273,"return new Double(n.doubleValue());
","public static Double toDouble(Object value) throws ConversionException {
Number n = toNumber(value, Double.class);
if (n instanceof Double) {
return (Double) n;
} else {
return new Double(n.doubleValue());
}
}","public static Double toDouble(Object value) throws ConversionException {
Number numberVar1 = numberLiteral2;
if (numberVar1 instanceof Double) {
return (Double) numberVar1;
} else {
return new Double(numberVar1.doubleValue());
}
}"
7068,DODGY_CODE,REC_CATCH_EXCEPTION,FP,configuration,4279,"catch (Exception ex)
","@Override
public ConfigurationNode getRootNode() {
if (getSubnodeKey() != null) {
try {
List<ConfigurationNode> nodes = getParent().fetchNodeList(getSubnodeKey());
if (nodes.size() != 1) {
setSubnodeKey(null);
} else {
ConfigurationNode currentRoot = nodes.get(0);
if (currentRoot != super.getRootNode()) {
fireEvent(EVENT_SUBNODE_CHANGED, null, null, true);
setRootNode(currentRoot);
fireEvent(EVENT_SUBNODE_CHANGED, null, null, false);
}
return currentRoot;
}
} catch (Exception ex) {
setSubnodeKey(null);
}
}
return super.getRootNode();
}","@Override
public ConfigurationNode getRootNode() {
if (getSubnodeKey() != null) {
try {
List<ConfigurationNode> list<configurationnode>Var1 = list<configurationnode>Literal2;
if (list<configurationnode>Var1.size() != 1) {
setSubnodeKey(null);
} else {
ConfigurationNode configurationnodeVar3 = configurationnodeLiteral4;
if (configurationnodeVar3 != super.getRootNode()) {
fireEvent(EVENT_SUBNODE_CHANGED, null, null, true);
setRootNode(configurationnodeVar3);
fireEvent(EVENT_SUBNODE_CHANGED, null, null, false);
}
return configurationnodeVar3;
}
} catch (Exception ex) {
setSubnodeKey(null);
}
}
return super.getRootNode();
}"
7080,DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,FP,configuration,4291,"String encoding = getEncoding() != null ? getEncoding() : DEFAULT_ENCODING;
","@Override
public void save(Writer out) throws ConfigurationException {
PrintWriter writer = new PrintWriter(out);
String encoding = getEncoding() != null ? getEncoding() : DEFAULT_ENCODING;
writer.println(""<?xml version=\""1.0\"" encoding=\"""" + encoding + ""\""?>"");
writer.println(""<!DOCTYPE properties SYSTEM \""http://java.sun.com/dtd/properties.dtd\"">"");
writer.println(""<properties>"");
if (getHeader() != null) {
writer.println(""  <comment>"" + StringEscapeUtils.escapeXml(getHeader()) + ""</comment>"");
}
Iterator<String> keys = getKeys();
while (keys.hasNext()) {
String key = keys.next();
Object value = getProperty(key);
if (value instanceof List) {
writeProperty(writer, key, (List<?>) value);
} else {
writeProperty(writer, key, value);
}
}
writer.println(""</properties>"");
writer.flush();
}","@Override
public void save(Writer out) throws ConfigurationException {
PrintWriter printwriterVar1 = printwriterLiteral2;
String stringVar3 = stringLiteral4;
printwriterVar1.println(""<?xml version=\""1.0\"" encoding=\"""" + stringVar3 + ""\""?>"");
printwriterVar1.println(""<!DOCTYPE properties SYSTEM \""http://java.sun.com/dtd/properties.dtd\"">"");
printwriterVar1.println(""<properties>"");
if (getHeader() != null) {
printwriterVar1.println(""  <comment>"" + StringEscapeUtils.escapeXml(getHeader()) + ""</comment>"");
}
Iterator<String> iterator<string>Var5 = iterator<string>Literal6;
while (iterator<string>Var5.hasNext()) {
String stringVar7 = stringLiteral8;
Object objectVar9 = objectLiteral10;
if (objectVar9 instanceof List) {
writeProperty(printwriterVar1, stringVar7, (List<?>) objectVar9);
} else {
writeProperty(printwriterVar1, stringVar7, objectVar9);
}
}
printwriterVar1.println(""</properties>"");
printwriterVar1.flush();
}"
7082,DODGY_CODE,REC_CATCH_EXCEPTION,FP,configuration,4293,"catch (Exception ex)
","private static Class<?> getDefaultClass(Object bean, String propName) {
try {
PropertyDescriptor desc = PropertyUtils.getPropertyDescriptor(bean, propName);
if (desc == null) {
return null;
}
return desc.getPropertyType();
} catch (Exception ex) {
return null;
}
}","private static Class<?> getDefaultClass(Object bean, String propName) {
try {
PropertyDescriptor propertydescriptorVar1 = propertydescriptorLiteral2;
if (propertydescriptorVar1 == null) {
return null;
}
return propertydescriptorVar1.getPropertyType();
} catch (Exception ex) {
return null;
}
}"
7086,I18N,DM_DEFAULT_ENCODING,FP,configuration,4297,"addValue(Base64.decodeBase64(value.getBytes()));
","public void addDataValue(String value) {
addValue(Base64.decodeBase64(value.getBytes()));
}","public void addDataValue(String value) {
addValue(Base64.decodeBase64(value.getBytes()));
}"
7089,DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,FP,configuration,4300,"if (name == null)
","private String getName(File file) {
String name = configuration.getURL().toString();
if (name == null) {
if (file != null) {
name = file.getAbsolutePath();
} else {
name = ""base: "" + configuration.getBasePath() + ""file: "" + configuration.getFileName();
}
}
return name;
}","private String getName(File file) {
String stringVar1 = stringLiteral2;
if (stringVar1 == null) {
if (file != null) {
stringVar1 = file.getAbsolutePath();
} else {
stringVar1 = ""base: "" + configuration.getBasePath() + ""file: "" + configuration.getFileName();
}
}
return stringVar1;
}"
7100,BAD_PRACTICE,SE_BAD_FIELD,FP,configuration,4311,private ConfigurationNode node;,private ConfigurationNode node;,private ConfigurationNode configurationnodeVar1;
7126,DODGY_CODE,RI_REDUNDANT_INTERFACES,FP,configuration,4337,"public class CombinedConfiguration extends HierarchicalConfiguration implements
ConfigurationListener, Cloneable
{
public static final int EVENT_COMBINED_INVALIDATE = 40;
private static final long serialVersionUID = 8338574525528692307L;
private static final DefaultExpressionEngine AT_ENGINE = new DefaultExpressionEngine();
private static final NodeCombiner DEFAULT_COMBINER = new UnionCombiner();
private static final String PROP_RELOAD_CHECK = ""CombinedConfigurationReloadCheck"";
private NodeCombiner nodeCombiner;
private volatile ConfigurationNode combinedRoot;
private List configurations;
private Map namedConfigurations;
private ExpressionEngine conversionExpressionEngine;
private boolean forceReloadCheck;
public CombinedConfiguration(NodeCombiner comb)
{
setNodeCombiner((comb != null) ? comb : DEFAULT_COMBINER);
clear();
}
public CombinedConfiguration()
{
this(null);
}
public NodeCombiner getNodeCombiner()
{
return nodeCombiner;
}
public void setNodeCombiner(NodeCombiner nodeCombiner)
{
if (nodeCombiner == null)
{
throw new IllegalArgumentException(
""Node combiner must not be null!"");
}
this.nodeCombiner = nodeCombiner;
invalidate();
}
public boolean isForceReloadCheck()
{
return forceReloadCheck;
}
public void setForceReloadCheck(boolean forceReloadCheck)
{
this.forceReloadCheck = forceReloadCheck;
}
public ExpressionEngine getConversionExpressionEngine()
{
return conversionExpressionEngine;
}
public void setConversionExpressionEngine(
ExpressionEngine conversionExpressionEngine)
{
this.conversionExpressionEngine = conversionExpressionEngine;
}
public void addConfiguration(AbstractConfiguration config, String name,
String at)
{
if (config == null)
{
throw new IllegalArgumentException(
""Added configuration must not be null!"");
}
if (name != null && namedConfigurations.containsKey(name))
{
throw new ConfigurationRuntimeException(
""A configuration with the name '""
+ name
+ ""' already exists in this combined configuration!"");
}
ConfigData cd = new ConfigData(config, name, at);
configurations.add(cd);
if (name != null)
{
namedConfigurations.put(name, config);
}
config.addConfigurationListener(this);
invalidate();
}
public void addConfiguration(AbstractConfiguration config, String name)
{
addConfiguration(config, name, null);
}
public void addConfiguration(AbstractConfiguration config)
{
addConfiguration(config, null, null);
}
public int getNumberOfConfigurations()
{
return configurations.size();
}
public Configuration getConfiguration(int index)
{
ConfigData cd = (ConfigData) configurations.get(index);
return cd.getConfiguration();
}
public Configuration getConfiguration(String name)
{
return (Configuration) namedConfigurations.get(name);
}
public List getConfigurations()
{
List list = new ArrayList();
Iterator iter = configurations.iterator();
while (iter.hasNext())
{
list.add(((ConfigData) iter.next()).getConfiguration());
}
return list;
}
public List getConfigurationNameList()
{
List list = new ArrayList();
Iterator iter = configurations.iterator();
while (iter.hasNext())
{
list.add(((ConfigData) iter.next()).getName());
}
return list;
}
public boolean removeConfiguration(Configuration config)
{
for (int index = 0; index < getNumberOfConfigurations(); index++)
{
if (((ConfigData) configurations.get(index)).getConfiguration() == config)
{
removeConfigurationAt(index);
return true;
}
}
return false;
}
public Configuration removeConfigurationAt(int index)
{
ConfigData cd = (ConfigData) configurations.remove(index);
if (cd.getName() != null)
{
namedConfigurations.remove(cd.getName());
}
cd.getConfiguration().removeConfigurationListener(this);
invalidate();
return cd.getConfiguration();
}
public Configuration removeConfiguration(String name)
{
Configuration conf = getConfiguration(name);
if (conf != null)
{
removeConfiguration(conf);
}
return conf;
}
public Set getConfigurationNames()
{
return namedConfigurations.keySet();
}
public void invalidate()
{
combinedRoot = null;
fireEvent(EVENT_COMBINED_INVALIDATE, null, null, false);
}
public void configurationChanged(ConfigurationEvent event)
{
if (!event.isBeforeUpdate())
{
invalidate();
}
}
public ConfigurationNode getRootNode()
{
if (combinedRoot == null)
{
combinedRoot = constructCombinedNode();
}
return combinedRoot;
}
public void clear()
{
fireEvent(EVENT_CLEAR, null, null, true);
configurations = new ArrayList();
namedConfigurations = new HashMap();
fireEvent(EVENT_CLEAR, null, null, false);
invalidate();
}
public Object clone()
{
CombinedConfiguration copy = (CombinedConfiguration) super.clone();
copy.clear();
for (Iterator it = configurations.iterator(); it.hasNext();)
{
ConfigData cd = (ConfigData) it.next();
copy.addConfiguration((AbstractConfiguration) ConfigurationUtils
.cloneConfiguration(cd.getConfiguration()), cd.getName(),
cd.getAt());
}
copy.setRootNode(new DefaultConfigurationNode());
return copy;
}
public Configuration getSource(String key)
{
if (key == null)
{
throw new IllegalArgumentException(""Key must not be null!"");
}
List nodes = fetchNodeList(key);
if (nodes.isEmpty())
{
return null;
}
Iterator it = nodes.iterator();
Configuration source = findSourceConfiguration((ConfigurationNode) it
.next());
while (it.hasNext())
{
Configuration src = findSourceConfiguration((ConfigurationNode) it
.next());
if (src != source)
{
throw new IllegalArgumentException(""The key "" + key
+ "" is defined by multiple sources!"");
}
}
return source;
}
protected List fetchNodeList(String key)
{
if (isForceReloadCheck())
{
performReloadCheck();
}
return super.fetchNodeList(key);
}
protected void performReloadCheck()
{
for (Iterator it = configurations.iterator(); it.hasNext();)
{
try
{
((ConfigData) it.next()).getConfiguration().getProperty(
PROP_RELOAD_CHECK);
}
catch (Exception ex)
{
;
}
}
}
private ConfigurationNode constructCombinedNode()
{
if (getNumberOfConfigurations() < 1)
{
return new ViewNode();
}
else
{
Iterator it = configurations.iterator();
ConfigurationNode node = ((ConfigData) it.next())
.getTransformedRoot();
while (it.hasNext())
{
node = getNodeCombiner().combine(node,
((ConfigData) it.next()).getTransformedRoot());
}
return node;
}
}
private Configuration findSourceConfiguration(ConfigurationNode node)
{
ConfigurationNode root = null;
ConfigurationNode current = node;
while (current != null)
{
root = current;
current = current.getParentNode();
}
for (Iterator it = configurations.iterator(); it.hasNext();)
{
ConfigData cd = (ConfigData) it.next();
if (root == cd.getRootNode())
{
return cd.getConfiguration();
}
}
return this;
","private Configuration findSourceConfiguration(ConfigurationNode node) {
ConfigurationNode root = null;
ConfigurationNode current = node;
while (current != null) {
root = current;
current = current.getParentNode();
}
for (Iterator it = configurations.iterator(); it.hasNext(); ) {
ConfigData cd = (ConfigData) it.next();
if (root == cd.getRootNode()) {
return cd.getConfiguration();
}
}
return this;
}","private Configuration findSourceConfiguration(ConfigurationNode node) {
ConfigurationNode configurationnodeVar1 = configurationnodeLiteral2;
ConfigurationNode configurationnodeVar3 = configurationnodeLiteral4;
while (configurationnodeVar3 != null) {
configurationnodeVar1 = configurationnodeVar3;
configurationnodeVar3 = configurationnodeVar3.getParentNode();
}
for (Iterator iteratorVar9 = iteratorLiteral10; iteratorVar5.hasNext(); ) {
ConfigData configdataVar7 = configdataLiteral8;
if (configurationnodeVar1 == configdataVar7.getRootNode()) {
return configdataVar7.getConfiguration();
}
}
return this;
}"
7127,I18N,DM_CONVERT_CASE,FP,configuration,4338,"if (filename != null && filename.toLowerCase().trim().endsWith("".xml""))
","protected FileConfiguration createConfiguration(Attributes attributes) throws Exception {
String filename = attributes.getValue(ATTR_FILENAME);
if (filename != null && filename.toLowerCase().trim().endsWith("".xml"")) {
return new XMLPropertyListConfiguration();
} else {
return new PropertyListConfiguration();
}
}","protected FileConfiguration createConfiguration(Attributes attributes) throws Exception {
String stringVar1 = stringLiteral2;
if (stringVar1 != null && stringVar1.toLowerCase().trim().endsWith("".xml"")) {
return new XMLPropertyListConfiguration();
} else {
return new PropertyListConfiguration();
}
}"
7128,I18N,DM_CONVERT_CASE,FP,configuration,4339,"if (filename != null && filename.toLowerCase().trim().endsWith("".xml""))
","protected FileConfiguration createConfiguration(Attributes attributes) throws Exception {
String filename = attributes.getValue(ATTR_FILENAME);
if (filename != null && filename.toLowerCase().trim().endsWith("".xml"")) {
return new XMLPropertiesConfiguration();
} else {
return new PropertiesConfiguration();
}
}","protected FileConfiguration createConfiguration(Attributes attributes) throws Exception {
String stringVar1 = stringLiteral2;
if (stringVar1 != null && stringVar1.toLowerCase().trim().endsWith("".xml"")) {
return new XMLPropertiesConfiguration();
} else {
return new PropertiesConfiguration();
}
}"
7130,DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,FP,configuration,4341,"if (file != null && file.exists())
","public static URL locate(String base, String name) {
if (log.isDebugEnabled()) {
StringBuffer buf = new StringBuffer();
buf.append(""ConfigurationUtils.locate(): base is "").append(base);
buf.append("", name is "").append(name);
log.debug(buf.toString());
}
if (name == null) {
return null;
}
URL url = null;
try {
if (base == null) {
url = new URL(name);
} else {
URL baseURL = new URL(base);
url = new URL(baseURL, name);
InputStream in = null;
try {
in = url.openStream();
} finally {
if (in != null) {
in.close();
}
}
}
log.debug(""Loading configuration from the URL "" + url);
} catch (IOException e) {
url = null;
}
if (url == null) {
File file = new File(name);
if (file.isAbsolute() && file.exists()) {
try {
url = toURL(file);
log.debug(""Loading configuration from the absolute path "" + name);
} catch (MalformedURLException e) {
log.warn(""Could not obtain URL from file"", e);
}
}
}
if (url == null) {
try {
File file = constructFile(base, name);
if (file != null && file.exists()) {
url = toURL(file);
}
if (url != null) {
log.debug(""Loading configuration from the path "" + file);
}
} catch (MalformedURLException e) {
log.warn(""Could not obtain URL from file"", e);
}
}
if (url == null) {
try {
File file = constructFile(System.getProperty(""user.home""), name);
if (file != null && file.exists()) {
url = toURL(file);
}
if (url != null) {
log.debug(""Loading configuration from the home path "" + file);
}
} catch (MalformedURLException e) {
log.warn(""Could not obtain URL from file"", e);
}
}
if (url == null) {
url = locateFromClasspath(name);
}
return url;
}","public static URL locate(String base, String name) {
if (log.isDebugEnabled()) {
StringBuffer stringbufferVar1 = stringbufferLiteral2;
stringbufferVar1.append(""ConfigurationUtils.locate(): base is "").append(base);
stringbufferVar1.append("", name is "").append(name);
log.debug(stringbufferVar1.toString());
}
if (name == null) {
return null;
}
URL urlVar3 = urlLiteral4;
try {
if (base == null) {
urlVar3 = new URL(name);
} else {
URL urlVar5 = urlLiteral6;
urlVar3 = new URL(urlVar5, name);
InputStream inputstreamVar7 = urlLiteral4;
try {
inputstreamVar7 = urlVar3.openStream();
} finally {
if (inputstreamVar7 != null) {
inputstreamVar7.close();
}
}
}
log.debug(""Loading configuration from the URL "" + urlVar3);
} catch (IOException e) {
urlVar3 = null;
}
if (urlVar3 == null) {
File fileVar8 = fileLiteral9;
if (fileVar8.isAbsolute() && fileVar8.exists()) {
try {
urlVar3 = toURL(fileVar8);
log.debug(""Loading configuration from the absolute path "" + name);
} catch (MalformedURLException e) {
log.warn(""Could not obtain URL from file"", e);
}
}
}
if (urlVar3 == null) {
try {
File fileVar8 = fileLiteral10;
if (fileVar8 != null && fileVar8.exists()) {
urlVar3 = toURL(fileVar8);
}
if (urlVar3 != null) {
log.debug(""Loading configuration from the path "" + fileVar8);
}
} catch (MalformedURLException e) {
log.warn(""Could not obtain URL from file"", e);
}
}
if (urlVar3 == null) {
try {
File fileVar8 = fileLiteral11;
if (fileVar8 != null && fileVar8.exists()) {
urlVar3 = toURL(fileVar8);
}
if (urlVar3 != null) {
log.debug(""Loading configuration from the home path "" + fileVar8);
}
} catch (MalformedURLException e) {
log.warn(""Could not obtain URL from file"", e);
}
}
if (urlVar3 == null) {
urlVar3 = locateFromClasspath(name);
}
return urlVar3;
}"
7133,BAD_PRACTICE,SE_BAD_FIELD,FP,configuration,4344,protected Configuration configuration;,protected Configuration configuration;,protected Configuration configurationVar1;
7137,EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,FP,configuration,4348,"ResultSet rs = pstmt.executeQuery();
","public Object getProperty(String key) {
Object result = null;
StringBuffer query = new StringBuffer(""SELECT * FROM "");
query.append(table).append("" WHERE "");
query.append(keyColumn).append(""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
ResultSet rs = pstmt.executeQuery();
List results = new ArrayList();
while (rs.next()) {
Object value = rs.getObject(valueColumn);
if (isDelimiterParsingDisabled()) {
results.add(value);
} else {
CollectionUtils.addAll(results, PropertyConverter.toIterator(value, getListDelimiter()));
}
}
if (!results.isEmpty()) {
result = (results.size() > 1) ? results : results.get(0);
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
close(conn, pstmt);
}
return result;
}","public Object getProperty(String key) {
Object objectVar1 = objectLiteral2;
StringBuffer stringbufferVar3 = stringbufferLiteral4;
stringbufferVar3.append(table).append("" WHERE "");
stringbufferVar3.append(keyColumn).append(""=?"");
if (nameColumn != null) {
stringbufferVar3.append("" AND "" + nameColumn + ""=?"");
}
Connection connectionVar5 = objectLiteral2;
PreparedStatement preparedstatementVar6 = objectLiteral2;
try {
connectionVar5 = getConnection();
preparedstatementVar6 = connectionVar5.prepareStatement(stringbufferVar3.toString());
preparedstatementVar6.setString(1, key);
if (nameColumn != null) {
preparedstatementVar6.setString(2, name);
}
ResultSet resultsetVar7 = resultsetLiteral8;
List listVar9 = listLiteral10;
while (resultsetVar7.next()) {
Object objectVar11 = objectLiteral12;
if (isDelimiterParsingDisabled()) {
listVar9.add(objectVar11);
} else {
CollectionUtils.addAll(listVar9, PropertyConverter.toIterator(objectVar11, getListDelimiter()));
}
}
if (!listVar9.isEmpty()) {
objectVar1 = (listVar9.size() > 1) ? listVar9 : listVar9.get(0);
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
close(connectionVar5, preparedstatementVar6);
}
return objectVar1;
}"
7156,PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,configuration,4367,"{
public void load() throws ConfigurationException
{
}
public void save() throws ConfigurationException
{
}
","public void setRootNode(ConfigurationNode rootNode) {
if (init) {
this.getConfiguration().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}","public void setRootNode(ConfigurationNode rootNode) {
if (init) {
this.getConfiguration().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}"
7162,DODGY_CODE,REC_CATCH_EXCEPTION,FP,configuration,4373,"catch (Exception e)
","static Object toInternetAddress(Object value) throws ConversionException {
if (value.getClass().getName().equals(INTERNET_ADDRESS_CLASSNAME)) {
return value;
} else if (value instanceof String) {
try {
Constructor ctor = Class.forName(INTERNET_ADDRESS_CLASSNAME).getConstructor(new Class[] { String.class });
return ctor.newInstance(new Object[] { value });
} catch (Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"", e);
}
} else {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"");
}
}","static Object toInternetAddress(Object value) throws ConversionException {
if (value.getClass().getName().equals(INTERNET_ADDRESS_CLASSNAME)) {
return value;
} else if (value instanceof String) {
try {
Constructor constructorVar1 = constructorLiteral2;
return constructorVar1.newInstance(new Object[] { value });
} catch (Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"", e);
}
} else {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"");
}
}"
7168,PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,configuration,4379,"{
public void error(SAXParseException ex) throws SAXException
{
throw ex;
",private EntityResolver entityResolver = new DefaultEntityResolver();,private EntityResolver entityresolverVar1 = entityresolverLiteral2;
7171,DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,FP,configuration,4382,"String encoding = getEncoding() != null ? getEncoding() : DEFAULT_ENCODING;
","public void save(Writer out) throws ConfigurationException {
PrintWriter writer = new PrintWriter(out);
String encoding = getEncoding() != null ? getEncoding() : DEFAULT_ENCODING;
writer.println(""<?xml version=\""1.0\"" encoding=\"""" + encoding + ""\""?>"");
writer.println(""<!DOCTYPE properties SYSTEM \""http://java.sun.com/dtd/properties.dtd\"">"");
writer.println(""<properties>"");
if (getHeader() != null) {
writer.println(""  <comment>"" + StringEscapeUtils.escapeXml(getHeader()) + ""</comment>"");
}
Iterator keys = getKeys();
while (keys.hasNext()) {
String key = (String) keys.next();
Object value = getProperty(key);
if (value instanceof List) {
writeProperty(writer, key, (List) value);
} else {
writeProperty(writer, key, value);
}
}
writer.println(""</properties>"");
writer.flush();
}","public void save(Writer out) throws ConfigurationException {
PrintWriter printwriterVar1 = printwriterLiteral2;
String stringVar3 = stringLiteral4;
printwriterVar1.println(""<?xml version=\""1.0\"" encoding=\"""" + stringVar3 + ""\""?>"");
printwriterVar1.println(""<!DOCTYPE properties SYSTEM \""http://java.sun.com/dtd/properties.dtd\"">"");
printwriterVar1.println(""<properties>"");
if (getHeader() != null) {
printwriterVar1.println(""  <comment>"" + StringEscapeUtils.escapeXml(getHeader()) + ""</comment>"");
}
Iterator iteratorVar5 = iteratorLiteral6;
while (iteratorVar5.hasNext()) {
String stringVar7 = stringLiteral8;
Object objectVar9 = objectLiteral10;
if (objectVar9 instanceof List) {
writeProperty(printwriterVar1, stringVar7, (List) objectVar9);
} else {
writeProperty(printwriterVar1, stringVar7, objectVar9);
}
}
printwriterVar1.println(""</properties>"");
printwriterVar1.flush();
}"
7175,BAD_PRACTICE,SE_BAD_FIELD,FP,configuration,4386,public Token currentToken;,public Token currentToken;,public Token tokenVar1;
7176,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,configuration,4387,"return null;
","protected byte[] filterData(String s) throws ParseException {
if (s == null) {
return null;
}
if (s.startsWith(""<"") && s.endsWith("">"") && s.length() >= 2) {
s = s.substring(1, s.length() - 1);
}
s = StringUtils.replaceChars(s, "" \t\n\r"", """");
if (s.length() % 2 != 0) {
s = ""0"" + s;
}
try {
return Hex.decodeHex(s.toCharArray());
} catch (Exception e) {
throw (ParseException) new ParseException(""Unable to parse the byte[] : "" + e.getMessage());
}
}","protected byte[] filterData(String s) throws ParseException {
if (s == null) {
return null;
}
if (s.startsWith(""<"") && s.endsWith("">"") && s.length() >= 2) {
s = s.substring(1, s.length() - 1);
}
s = StringUtils.replaceChars(s, "" \t\n\r"", """");
if (s.length() % 2 != 0) {
s = ""0"" + s;
}
try {
return Hex.decodeHex(s.toCharArray());
} catch (Exception e) {
throw (ParseException) new ParseException(""Unable to parse the byte[] : "" + e.getMessage());
}
}"
7177,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,configuration,4388,"PropertyListConfiguration configuration = new PropertyListConfiguration();
List children = new ArrayList();
Node child = null;
jj_consume_token(DICT_BEGIN);
label_1:
while (true) {
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
case STRING:
case QUOTED_STRING:
;
break;
default:
jj_la1[0] = jj_gen;
break label_1;
}
child = Property();
if (child.getValue() instanceof HierarchicalConfiguration)
{
HierarchicalConfiguration conf = (HierarchicalConfiguration) child.getValue();
Node root = conf.getRoot();
root.setName(child.getName());
children.add(root);
}
else
{
children.add(child);
}
}
jj_consume_token(DICT_END);
for (int i = 0; i < children.size(); i++)
{
child = (Node) children.get(i);
configuration.getRoot().addChild(child);
}
{if (true) return configuration;}
","final public PropertyListConfiguration Dictionary() throws ParseException {
PropertyListConfiguration configuration = new PropertyListConfiguration();
List children = new ArrayList();
Node child = null;
jj_consume_token(DICT_BEGIN);
label_1: while (true) {
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case STRING:
case QUOTED_STRING:
;
break;
default:
jj_la1[0] = jj_gen;
break label_1;
}
child = Property();
if (child.getValue() instanceof HierarchicalConfiguration) {
HierarchicalConfiguration conf = (HierarchicalConfiguration) child.getValue();
Node root = conf.getRoot();
root.setName(child.getName());
children.add(root);
} else {
children.add(child);
}
}
jj_consume_token(DICT_END);
for (int i = 0; i < children.size(); i++) {
child = (Node) children.get(i);
configuration.getRoot().addChild(child);
}
{
if (true)
return configuration;
}
throw new Error(""Missing return statement in function"");
}","final public PropertyListConfiguration Dictionary() throws ParseException {
PropertyListConfiguration propertylistconfigurationVar1 = propertylistconfigurationLiteral2;
List listVar3 = listLiteral4;
Node nodeVar5 = nodeLiteral6;
jj_consume_token(DICT_BEGIN);
label_1: while (true) {
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case STRING:
case QUOTED_STRING:
;
break;
default:
jj_la1[0] = jj_gen;
break label_1;
}
nodeVar5 = Property();
if (nodeVar5.getValue() instanceof HierarchicalConfiguration) {
HierarchicalConfiguration hierarchicalconfigurationVar7 = hierarchicalconfigurationLiteral8;
Node nodeVar9 = nodeLiteral10;
nodeVar9.setName(nodeVar5.getName());
listVar3.add(nodeVar9);
} else {
listVar3.add(nodeVar5);
}
}
jj_consume_token(DICT_END);
for (int intVar13 = intLiteral14; intVar11 < intLiteral1; intVar11++) {
nodeVar5 = (Node) listVar3.get(intVar11);
propertylistconfigurationVar1.getRoot().addChild(nodeVar5);
}
{
if (true)
return propertylistconfigurationVar1;
}
throw new Error(""Missing return statement in function"");
}"
7179,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,configuration,4390,"List list = new ArrayList();
Object element = null;
jj_consume_token(ARRAY_BEGIN);
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
case ARRAY_BEGIN:
case DICT_BEGIN:
case DATA:
case DATE:
case STRING:
case QUOTED_STRING:
element = Element();
list.add(element);
label_2:
while (true) {
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
case ARRAY_SEPARATOR:
;
break;
default:
jj_la1[3] = jj_gen;
break label_2;
}
jj_consume_token(ARRAY_SEPARATOR);
element = Element();
list.add(element);
}
break;
default:
jj_la1[4] = jj_gen;
;
}
jj_consume_token(ARRAY_END);
{if (true) return list;}
","final public List Array() throws ParseException {
List list = new ArrayList();
Object element = null;
jj_consume_token(ARRAY_BEGIN);
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case ARRAY_BEGIN:
case DICT_BEGIN:
case DATA:
case DATE:
case STRING:
case QUOTED_STRING:
element = Element();
list.add(element);
label_2: while (true) {
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case ARRAY_SEPARATOR:
;
break;
default:
jj_la1[3] = jj_gen;
break label_2;
}
jj_consume_token(ARRAY_SEPARATOR);
element = Element();
list.add(element);
}
break;
default:
jj_la1[4] = jj_gen;
;
}
jj_consume_token(ARRAY_END);
{
if (true)
return list;
}
throw new Error(""Missing return statement in function"");
}","final public List Array() throws ParseException {
List listVar1 = listLiteral2;
Object objectVar3 = objectLiteral4;
jj_consume_token(ARRAY_BEGIN);
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case ARRAY_BEGIN:
case DICT_BEGIN:
case DATA:
case DATE:
case STRING:
case QUOTED_STRING:
objectVar3 = Element();
listVar1.add(objectVar3);
label_2: while (true) {
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case ARRAY_SEPARATOR:
;
break;
default:
jj_la1[3] = jj_gen;
break label_2;
}
jj_consume_token(ARRAY_SEPARATOR);
objectVar3 = Element();
listVar1.add(objectVar3);
}
break;
default:
jj_la1[4] = jj_gen;
;
}
jj_consume_token(ARRAY_END);
{
if (true)
return listVar1;
}
throw new Error(""Missing return statement in function"");
}"
7205,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,configuration,4416,"if (maxNextCharInd == available)
{
if (available == bufsize)
{
if (tokenBegin > 2048)
{
bufpos = maxNextCharInd = 0;
available = tokenBegin;
}
else if (tokenBegin < 0)
bufpos = maxNextCharInd = 0;
else
ExpandBuff(false);
}
else if (available > tokenBegin)
available = bufsize;
else if ((tokenBegin - available) < 2048)
ExpandBuff(true);
else
available = tokenBegin;
}
int i;
try {
if ((i = inputStream.read(buffer, maxNextCharInd,
available - maxNextCharInd)) == -1)
{
inputStream.close();
throw new java.io.IOException();
}
else
maxNextCharInd += i;
return;
}
catch(java.io.IOException e) {
--bufpos;
backup(0);
if (tokenBegin == -1)
tokenBegin = bufpos;
throw e;
","protected void FillBuff() throws java.io.IOException {
if (maxNextCharInd == available) {
if (available == bufsize) {
if (tokenBegin > 2048) {
bufpos = maxNextCharInd = 0;
available = tokenBegin;
} else if (tokenBegin < 0)
bufpos = maxNextCharInd = 0;
else
ExpandBuff(false);
} else if (available > tokenBegin)
available = bufsize;
else if ((tokenBegin - available) < 2048)
ExpandBuff(true);
else
available = tokenBegin;
}
int i;
try {
if ((i = inputStream.read(buffer, maxNextCharInd, available - maxNextCharInd)) == -1) {
inputStream.close();
throw new java.io.IOException();
} else
maxNextCharInd += i;
return;
} catch (java.io.IOException e) {
--bufpos;
backup(0);
if (tokenBegin == -1)
tokenBegin = bufpos;
throw e;
}
}","protected void FillBuff() throws java.io.IOException {
if (maxNextCharInd == available) {
if (available == bufsize) {
if (tokenBegin > 2048) {
bufpos = maxNextCharInd = 0;
available = tokenBegin;
} else if (tokenBegin < 0)
bufpos = maxNextCharInd = 0;
else
ExpandBuff(false);
} else if (available > tokenBegin)
available = bufsize;
else if ((tokenBegin - available) < 2048)
ExpandBuff(true);
else
available = tokenBegin;
}
int intVar1;
try {
if ((intVar1 = inputStream.read(buffer, maxNextCharInd, available - maxNextCharInd)) == -1) {
inputStream.close();
throw new java.io.IOException();
} else
maxNextCharInd += intVar1;
return;
} catch (java.io.IOException e) {
--bufpos;
backup(0);
if (tokenBegin == -1)
tokenBegin = bufpos;
throw e;
}
}"
7210,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,configuration,4421,"ReInit(dstream, startline, startcolumn, 4096);
}
","public void ReInit(java.io.InputStream dstream, int startline, int startcolumn) {
ReInit(dstream, startline, startcolumn, 4096);
}","public void ReInit(java.io.InputStream dstream, int startline, int startcolumn) {
ReInit(dstream, startline, startcolumn, 4096);
}"
7212,DODGY_CODE,UUF_UNUSED_PUBLIC_OR_PROTECTED_FIELD,FP,configuration,4423,public Token specialToken;,public Token specialToken;,public Token tokenVar1;
7213,DODGY_CODE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,FP,configuration,4424,"public int beginLine, beginColumn, endLine, endColumn;","public int beginLine, beginColumn, endLine, endColumn;","public int intVar1, intVar2, intVar3, intVar4;"
7307,BAD_PRACTICE,SE_BAD_FIELD,FP,configuration,4518,"// [ERROR] Medium: Class org.apache.commons.configuration2.builder.ConfigurationBuilderResultCreatedEvent defines
private final ImmutableConfiguration configuration;","// [ERROR] Medium: Class org.apache.commons.configuration2.builder.ConfigurationBuilderResultCreatedEvent defines
private final ImmutableConfiguration configuration;","// [ERROR] Medium: Class org.apache.commons.configuration2.builder.ConfigurationBuilderResultCreatedEvent defines
private final ImmutableConfiguration immutableconfigurationVar1;"
7359,PERFORMANCE,DM_FP_NUMBER_CTOR,FP,configuration,4570,"return getDouble(key, new Double(defaultValue)).doubleValue();
","public double getDouble(String key, double defaultValue) {
return getDouble(key, new Double(defaultValue)).doubleValue();
}","public double getDouble(String key, double defaultValue) {
return getDouble(key, new Double(defaultValue)).doubleValue();
}"
7360,PERFORMANCE,DM_NUMBER_CTOR,FP,configuration,4571,"value = array.length == 0 ? null : new Byte(array[0]);
","protected Object resolveContainerStore(String key) {
Object value = getProperty(key);
if (value != null) {
if (value instanceof List) {
List list = (List) value;
value = list.isEmpty() ? null : list.get(0);
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
value = array.length == 0 ? null : array[0];
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
value = array.length == 0 ? null : array[0] ? Boolean.TRUE : Boolean.FALSE;
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
value = array.length == 0 ? null : new Byte(array[0]);
} else if (value instanceof short[]) {
short[] array = (short[]) value;
value = array.length == 0 ? null : new Short(array[0]);
} else if (value instanceof int[]) {
int[] array = (int[]) value;
value = array.length == 0 ? null : new Integer(array[0]);
} else if (value instanceof long[]) {
long[] array = (long[]) value;
value = array.length == 0 ? null : new Long(array[0]);
} else if (value instanceof float[]) {
float[] array = (float[]) value;
value = array.length == 0 ? null : new Float(array[0]);
} else if (value instanceof double[]) {
double[] array = (double[]) value;
value = array.length == 0 ? null : new Double(array[0]);
}
}
return value;
}","protected Object resolveContainerStore(String key) {
Object objectVar1 = objectLiteral2;
if (objectVar1 != null) {
if (objectVar1 instanceof List) {
List listVar3 = listLiteral4;
objectVar1 = listVar3.isEmpty() ? null : listVar3.get(0);
} else if (objectVar1 instanceof Object[]) {
Object[] objectArrayVar5 = objectArrayLiteral6;
objectVar1 = objectArrayVar5.length == 0 ? null : objectArrayVar5[0];
} else if (objectVar1 instanceof boolean[]) {
boolean[] objectArrayVar5 = booleanArrayLiteral7;
objectVar1 = objectArrayVar5.length == 0 ? null : objectArrayVar5[0] ? Boolean.TRUE : Boolean.FALSE;
} else if (objectVar1 instanceof byte[]) {
byte[] objectArrayVar5 = byteArrayLiteral8;
objectVar1 = objectArrayVar5.length == 0 ? null : new Byte(objectArrayVar5[0]);
} else if (objectVar1 instanceof short[]) {
short[] objectArrayVar5 = shortArrayLiteral9;
objectVar1 = objectArrayVar5.length == 0 ? null : new Short(objectArrayVar5[0]);
} else if (objectVar1 instanceof int[]) {
int[] objectArrayVar5 = intArrayLiteral10;
objectVar1 = objectArrayVar5.length == 0 ? null : new Integer(objectArrayVar5[0]);
} else if (objectVar1 instanceof long[]) {
long[] objectArrayVar5 = longArrayLiteral11;
objectVar1 = objectArrayVar5.length == 0 ? null : new Long(objectArrayVar5[0]);
} else if (objectVar1 instanceof float[]) {
float[] objectArrayVar5 = floatArrayLiteral12;
objectVar1 = objectArrayVar5.length == 0 ? null : new Float(objectArrayVar5[0]);
} else if (objectVar1 instanceof double[]) {
double[] objectArrayVar5 = doubleArrayLiteral13;
objectVar1 = objectArrayVar5.length == 0 ? null : new Double(objectArrayVar5[0]);
}
}
return objectVar1;
}"
7370,PERFORMANCE,DM_NUMBER_CTOR,FP,configuration,4581,"return getShort(key, new Short(defaultValue)).shortValue();
","public short getShort(String key, short defaultValue) {
return getShort(key, new Short(defaultValue)).shortValue();
}","public short getShort(String key, short defaultValue) {
return getShort(key, new Short(defaultValue)).shortValue();
}"
7377,BAD_PRACTICE,SE_BAD_FIELD,FP,configuration,4588,private ConfigurationNode combinedRoot;,private ConfigurationNode combinedRoot;,private ConfigurationNode configurationnodeVar1;
7389,EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,FP,configuration,4600,"ResultSet rs = pstmt.executeQuery();
","public boolean isEmpty() {
boolean empty = true;
StringBuffer query = new StringBuffer(""SELECT count(*) FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
ResultSet rs = pstmt.executeQuery();
if (rs.next()) {
empty = rs.getInt(1) == 0;
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
closeQuietly(conn, pstmt);
}
return empty;
}","public boolean isEmpty() {
boolean booleanVar1 = booleanLiteral2;
StringBuffer stringbufferVar3 = stringbufferLiteral4;
if (nameColumn != null) {
stringbufferVar3.append("" WHERE "" + nameColumn + ""=?"");
}
Connection connectionVar5 = connectionLiteral6;
PreparedStatement preparedstatementVar7 = connectionLiteral6;
try {
connectionVar5 = getConnection();
preparedstatementVar7 = connectionVar5.prepareStatement(stringbufferVar3.toString());
if (nameColumn != null) {
preparedstatementVar7.setString(1, name);
}
ResultSet resultsetVar8 = resultsetLiteral9;
if (resultsetVar8.next()) {
booleanVar1 = resultsetVar8.getInt(1) == 0;
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
closeQuietly(connectionVar5, preparedstatementVar7);
}
return booleanVar1;
}"
7391,EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,FP,configuration,4602,"ResultSet rs = pstmt.executeQuery();
","public boolean containsKey(String key) {
boolean found = false;
StringBuffer query = new StringBuffer(""SELECT * FROM "" + table + "" WHERE "" + keyColumn + ""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
ResultSet rs = pstmt.executeQuery();
found = rs.next();
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
closeQuietly(conn, pstmt);
}
return found;
}","public boolean containsKey(String key) {
boolean booleanVar1 = booleanLiteral2;
StringBuffer stringbufferVar3 = stringbufferLiteral4;
if (nameColumn != null) {
stringbufferVar3.append("" AND "" + nameColumn + ""=?"");
}
Connection connectionVar5 = connectionLiteral6;
PreparedStatement preparedstatementVar7 = connectionLiteral6;
try {
connectionVar5 = getConnection();
preparedstatementVar7 = connectionVar5.prepareStatement(stringbufferVar3.toString());
preparedstatementVar7.setString(1, key);
if (nameColumn != null) {
preparedstatementVar7.setString(2, name);
}
ResultSet resultsetVar8 = resultsetLiteral9;
booleanVar1 = resultsetVar8.next();
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
closeQuietly(connectionVar5, preparedstatementVar7);
}
return booleanVar1;
}"
7394,SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,configuration,4605,"pstmt = conn.prepareStatement(query.toString());
","public boolean isEmpty() {
boolean empty = true;
StringBuffer query = new StringBuffer(""SELECT count(*) FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
ResultSet rs = pstmt.executeQuery();
if (rs.next()) {
empty = rs.getInt(1) == 0;
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
closeQuietly(conn, pstmt);
}
return empty;
}","public boolean isEmpty() {
boolean booleanVar1 = booleanLiteral2;
StringBuffer stringbufferVar3 = stringbufferLiteral4;
if (nameColumn != null) {
stringbufferVar3.append("" WHERE "" + nameColumn + ""=?"");
}
Connection connectionVar5 = connectionLiteral6;
PreparedStatement preparedstatementVar7 = connectionLiteral6;
try {
connectionVar5 = getConnection();
preparedstatementVar7 = connectionVar5.prepareStatement(stringbufferVar3.toString());
if (nameColumn != null) {
preparedstatementVar7.setString(1, name);
}
ResultSet resultsetVar8 = resultsetLiteral9;
if (resultsetVar8.next()) {
booleanVar1 = resultsetVar8.getInt(1) == 0;
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
closeQuietly(connectionVar5, preparedstatementVar7);
}
return booleanVar1;
}"
7403,PERFORMANCE,DM_NUMBER_CTOR,FP,configuration,4614,"return new Integer(n.intValue());
","public static Integer toInteger(Object value) throws ConversionException {
Number n = toNumber(value, Integer.class);
if (n instanceof Integer) {
return (Integer) n;
} else {
return new Integer(n.intValue());
}
}","public static Integer toInteger(Object value) throws ConversionException {
Number numberVar1 = numberLiteral2;
if (numberVar1 instanceof Integer) {
return (Integer) numberVar1;
} else {
return new Integer(numberVar1.intValue());
}
}"
7406,PERFORMANCE,DM_FP_NUMBER_CTOR,FP,configuration,4617,"return new Float(n.floatValue());
","public static Float toFloat(Object value) throws ConversionException {
Number n = toNumber(value, Float.class);
if (n instanceof Float) {
return (Float) n;
} else {
return new Float(n.floatValue());
}
}","public static Float toFloat(Object value) throws ConversionException {
Number numberVar1 = numberLiteral2;
if (numberVar1 instanceof Float) {
return (Float) numberVar1;
} else {
return new Float(numberVar1.floatValue());
}
}"
7414,PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,configuration,4625,"{
public InputSource resolveEntity(String publicId, String systemId)
{
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
","public void load(Reader in) throws ConfigurationException {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setNamespaceAware(false);
factory.setValidating(true);
try {
SAXParser parser = factory.newSAXParser();
XMLReader xmlReader = parser.getXMLReader();
xmlReader.setEntityResolver(new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlReader.setContentHandler(new XMLPropertiesHandler());
xmlReader.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}","public void load(Reader in) throws ConfigurationException {
SAXParserFactory saxparserfactoryVar1 = saxparserfactoryLiteral2;
saxparserfactoryVar1.setNamespaceAware(false);
saxparserfactoryVar1.setValidating(true);
try {
SAXParser saxparserVar3 = saxparserLiteral4;
XMLReader xmlreaderVar5 = xmlreaderLiteral6;
xmlreaderVar5.setEntityResolver(new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlreaderVar5.setContentHandler(new XMLPropertiesHandler());
xmlreaderVar5.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}"
7415,PERFORMANCE,WMI_WRONG_MAP_ITERATOR,FP,configuration,4626,"initProperty(bean, propName, properties.get(propName));
","public static void initBean(Object bean, BeanDeclaration data) throws ConfigurationRuntimeException {
Map properties = data.getBeanProperties();
if (properties != null) {
for (Iterator it = properties.keySet().iterator(); it.hasNext(); ) {
String propName = (String) it.next();
initProperty(bean, propName, properties.get(propName));
}
}
Map nestedBeans = data.getNestedBeanDeclarations();
if (nestedBeans != null) {
for (Iterator it = nestedBeans.keySet().iterator(); it.hasNext(); ) {
String propName = (String) it.next();
initProperty(bean, propName, createBean((BeanDeclaration) nestedBeans.get(propName), null));
}
}
}","public static void initBean(Object bean, BeanDeclaration data) throws ConfigurationRuntimeException {
Map mapVar1 = mapLiteral2;
if (mapVar1 != null) {
for (Iterator iteratorVar10 = iteratorLiteral11; iteratorVar3.hasNext(); ) {
String stringVar5 = stringLiteral6;
initProperty(bean, stringVar5, mapVar1.get(stringVar5));
}
}
Map mapVar7 = mapLiteral8;
if (mapVar7 != null) {
for (Iterator iteratorVar10 = iteratorLiteral12; iteratorVar3.hasNext(); ) {
String stringVar5 = stringLiteral6;
initProperty(bean, stringVar5, createBean((BeanDeclaration) mapVar7.get(stringVar5), null));
}
}
}"
7416,PERFORMANCE,DM_NUMBER_CTOR,FP,configuration,4627,"getConfiguration().addProperty(name, new Integer(array[i]));
","public void set(String name, Object value) {
if (log.isTraceEnabled()) {
log.trace(""set("" + name + "","" + value + "")"");
}
if (value == null) {
throw new NullPointerException(""Error trying to set property to null."");
}
if (value instanceof List) {
List list = (List) value;
Iterator iterator = list.iterator();
while (iterator.hasNext()) {
getConfiguration().addProperty(name, iterator.next());
}
} else if (value instanceof int[]) {
int[] array = (int[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Integer(array[i]));
}
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, BooleanUtils.toBooleanObject(array[i]));
}
} else if (value instanceof char[]) {
char[] array = (char[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Character(array[i]));
}
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Byte(array[i]));
}
} else if (value instanceof short[]) {
short[] array = (short[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Short(array[i]));
}
} else if (value instanceof long[]) {
long[] array = (long[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Long(array[i]));
}
} else if (value instanceof float[]) {
float[] array = (float[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Float(array[i]));
}
} else if (value instanceof double[]) {
double[] array = (double[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Double(array[i]));
}
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, array[i]);
}
} else {
getConfiguration().setProperty(name, value);
}
}","public void set(String name, Object value) {
if (log.isTraceEnabled()) {
log.trace(""set("" + name + "","" + value + "")"");
}
if (value == null) {
throw new NullPointerException(""Error trying to set property to null."");
}
if (value instanceof List) {
List listVar1 = listLiteral2;
Iterator iteratorVar3 = iteratorLiteral4;
while (iteratorVar3.hasNext()) {
getConfiguration().addProperty(name, iteratorVar3.next());
}
} else if (value instanceof int[]) {
int[] intArrayVar5 = intArrayLiteral6;
for (int intVar17 = intLiteral18; intVar7 < intLiteral1; intVar7++) {
getConfiguration().addProperty(name, new Integer(intArrayVar5[intVar7]));
}
} else if (value instanceof boolean[]) {
boolean[] intArrayVar5 = booleanArrayLiteral9;
for (int intVar17 = intLiteral18; intVar7 < intArrayVar5.length; intVar7++) {
getConfiguration().addProperty(name, BooleanUtils.toBooleanObject(intArrayVar5[intVar7]));
}
} else if (value instanceof char[]) {
char[] intArrayVar5 = charArrayLiteral10;
for (int intVar17 = intLiteral18; intVar7 < intArrayVar5.length; intVar7++) {
getConfiguration().addProperty(name, new Character(intArrayVar5[intVar7]));
}
} else if (value instanceof byte[]) {
byte[] intArrayVar5 = byteArrayLiteral11;
for (int intVar17 = intLiteral18; intVar7 < intArrayVar5.length; intVar7++) {
getConfiguration().addProperty(name, new Byte(intArrayVar5[intVar7]));
}
} else if (value instanceof short[]) {
short[] intArrayVar5 = shortArrayLiteral12;
for (int intVar17 = intLiteral18; intVar7 < intArrayVar5.length; intVar7++) {
getConfiguration().addProperty(name, new Short(intArrayVar5[intVar7]));
}
} else if (value instanceof long[]) {
long[] intArrayVar5 = longArrayLiteral13;
for (int intVar17 = intLiteral18; intVar7 < intArrayVar5.length; intVar7++) {
getConfiguration().addProperty(name, new Long(intArrayVar5[intVar7]));
}
} else if (value instanceof float[]) {
float[] intArrayVar5 = floatArrayLiteral14;
for (int intVar17 = intLiteral18; intVar7 < intArrayVar5.length; intVar7++) {
getConfiguration().addProperty(name, new Float(intArrayVar5[intVar7]));
}
} else if (value instanceof double[]) {
double[] intArrayVar5 = doubleArrayLiteral15;
for (int intVar17 = intLiteral18; intVar7 < intArrayVar5.length; intVar7++) {
getConfiguration().addProperty(name, new Double(intArrayVar5[intVar7]));
}
} else if (value instanceof Object[]) {
Object[] intArrayVar5 = objectArrayLiteral16;
for (int intVar17 = intLiteral18; intVar7 < intArrayVar5.length; intVar7++) {
getConfiguration().addProperty(name, intArrayVar5[intVar7]);
}
} else {
getConfiguration().setProperty(name, value);
}
}"
7427,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,configuration,4638,"Node node = new Node();
String key = String();
node.setName(key);
jj_consume_token(EQUAL);
Object value = Element();
node.setValue(value);
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
{
case DICT_SEPARATOR:
jj_consume_token(DICT_SEPARATOR);
break;
default:
jj_la1[1] = jj_gen;
;
}
return node;
","final public Node Property() throws ParseException {
Node node = new Node();
String key = String();
node.setName(key);
jj_consume_token(EQUAL);
Object value = Element();
node.setValue(value);
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case DICT_SEPARATOR:
jj_consume_token(DICT_SEPARATOR);
break;
default:
jj_la1[1] = jj_gen;
;
}
return node;
}","final public Node Property() throws ParseException {
Node nodeVar1 = nodeLiteral2;
String stringVar3 = stringLiteral4;
nodeVar1.setName(stringVar3);
jj_consume_token(EQUAL);
Object objectVar5 = objectLiteral6;
nodeVar1.setValue(objectVar5);
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case DICT_SEPARATOR:
jj_consume_token(DICT_SEPARATOR);
break;
default:
jj_la1[1] = jj_gen;
;
}
return nodeVar1;
}"
7431,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,configuration,4642,"return null;
","protected byte[] filterData(String s) throws ParseException {
if (s == null) {
return null;
}
if (s.startsWith(""<"") && s.endsWith("">"") && s.length() >= 2) {
s = s.substring(1, s.length() - 1);
}
s = StringUtils.replaceChars(s, "" \t\n\r"", """");
if (s.length() % 2 != 0) {
s = ""0"" + s;
}
try {
return Hex.decodeHex(s.toCharArray());
} catch (Exception e) {
throw new ParseException(e.getMessage());
}
}","protected byte[] filterData(String s) throws ParseException {
if (s == null) {
return null;
}
if (s.startsWith(""<"") && s.endsWith("">"") && s.length() >= 2) {
s = s.substring(1, s.length() - 1);
}
s = StringUtils.replaceChars(s, "" \t\n\r"", """");
if (s.length() % 2 != 0) {
s = ""0"" + s;
}
try {
return Hex.decodeHex(s.toCharArray());
} catch (Exception e) {
throw new ParseException(e.getMessage());
}
}"
7434,DODGY_CODE,DB_DUPLICATE_SWITCH_CLAUSES,FP,configuration,4645,"if ((jjbitVec0[i2] & l2) == 0L)
break;
if (kind > 19)
kind = 19;
jjCheckNAdd(3);
break;
","private final int jjMoveNfa_0(int startState, int curPos) {
int startsAt = 0;
jjnewStateCnt = 9;
int i = 1;
jjstateSet[0] = startState;
int kind = 0x7fffffff;
for (; ; ) {
if (++jjround == 0x7fffffff)
ReInitRounds();
if (curChar < 64) {
long l = 1L << curChar;
MatchLoop: do {
switch(jjstateSet[--i]) {
case 9:
if ((0xfffffffbffffffffL & l) != 0L)
jjCheckNAddStates(0, 2);
else if (curChar == 34) {
if (kind > 20)
kind = 20;
}
break;
case 10:
if ((0xd7ffecfaffffd9ffL & l) != 0L) {
if (kind > 19)
kind = 19;
jjCheckNAdd(3);
}
if ((0x3ff000100002600L & l) != 0L)
jjCheckNAddTwoStates(1, 2);
else if (curChar == 62) {
if (kind > 18)
kind = 18;
}
break;
case 0:
if ((0xd7ffecfaffffd9ffL & l) != 0L) {
if (kind > 19)
kind = 19;
jjCheckNAdd(3);
} else if (curChar == 34)
jjCheckNAddStates(0, 2);
if (curChar == 60)
jjCheckNAddTwoStates(1, 2);
break;
case 1:
if ((0x3ff000100002600L & l) != 0L)
jjCheckNAddTwoStates(1, 2);
break;
case 2:
if (curChar == 62 && kind > 18)
kind = 18;
break;
case 3:
if ((0xd7ffecfaffffd9ffL & l) == 0L)
break;
if (kind > 19)
kind = 19;
jjCheckNAdd(3);
break;
case 4:
case 6:
if (curChar == 34)
jjCheckNAddStates(0, 2);
break;
case 5:
if ((0xfffffffbffffffffL & l) != 0L)
jjCheckNAddStates(0, 2);
break;
case 8:
if (curChar == 34 && kind > 20)
kind = 20;
break;
default:
break;
}
} while (i != startsAt);
} else if (curChar < 128) {
long l = 1L << (curChar & 077);
MatchLoop: do {
switch(jjstateSet[--i]) {
case 9:
jjCheckNAddStates(0, 2);
if (curChar == 92)
jjstateSet[jjnewStateCnt++] = 6;
break;
case 10:
if ((0xd7ffffffffffffffL & l) != 0L) {
if (kind > 19)
kind = 19;
jjCheckNAdd(3);
}
if ((0x7e0000007eL & l) != 0L)
jjCheckNAddTwoStates(1, 2);
break;
case 0:
case 3:
if ((0xd7ffffffffffffffL & l) == 0L)
break;
if (kind > 19)
kind = 19;
jjCheckNAdd(3);
break;
case 1:
if ((0x7e0000007eL & l) != 0L)
jjCheckNAddTwoStates(1, 2);
break;
case 5:
jjCheckNAddStates(0, 2);
break;
case 7:
if (curChar == 92)
jjstateSet[jjnewStateCnt++] = 6;
break;
default:
break;
}
} while (i != startsAt);
} else {
int i2 = (curChar & 0xff) >> 6;
long l2 = 1L << (curChar & 077);
MatchLoop: do {
switch(jjstateSet[--i]) {
case 9:
case 5:
if ((jjbitVec0[i2] & l2) != 0L)
jjCheckNAddStates(0, 2);
break;
case 10:
case 3:
if ((jjbitVec0[i2] & l2) == 0L)
break;
if (kind > 19)
kind = 19;
jjCheckNAdd(3);
break;
case 0:
if ((jjbitVec0[i2] & l2) == 0L)
break;
if (kind > 19)
kind = 19;
jjCheckNAdd(3);
break;
default:
break;
}
} while (i != startsAt);
}
if (kind != 0x7fffffff) {
jjmatchedKind = kind;
jjmatchedPos = curPos;
kind = 0x7fffffff;
}
++curPos;
if ((i = jjnewStateCnt) == (startsAt = 9 - (jjnewStateCnt = startsAt)))
return curPos;
try {
curChar = input_stream.readChar();
} catch (IOException e) {
return curPos;
}
}
}","private final int jjMoveNfa_0(int startState, int curPos) {
int intVar1 = intLiteral2;
jjnewStateCnt = 9;
int intVar3 = intLiteral4;
jjstateSet[0] = startState;
int intVar5 = intLiteral6;
for (; ; ) {
if (++jjround == 0x7fffffff)
ReInitRounds();
if (curChar < 64) {
long longVar7 = longLiteral8;
MatchLoop: do {
switch(jjstateSet[--intVar3]) {
case 9:
if ((0xfffffffbffffffffL & longVar7) != 0L)
jjCheckNAddStates(0, 2);
else if (curChar == 34) {
if (intVar5 > 20)
intVar5 = 20;
}
break;
case 10:
if ((0xd7ffecfaffffd9ffL & longVar7) != 0L) {
if (intVar5 > 19)
intVar5 = 19;
jjCheckNAdd(3);
}
if ((0x3ff000100002600L & longVar7) != 0L)
jjCheckNAddTwoStates(1, 2);
else if (curChar == 62) {
if (intVar5 > 18)
intVar5 = 18;
}
break;
case 0:
if ((0xd7ffecfaffffd9ffL & longVar7) != 0L) {
if (intVar5 > 19)
intVar5 = 19;
jjCheckNAdd(3);
} else if (curChar == 34)
jjCheckNAddStates(0, 2);
if (curChar == 60)
jjCheckNAddTwoStates(1, 2);
break;
case 1:
if ((0x3ff000100002600L & longVar7) != 0L)
jjCheckNAddTwoStates(1, 2);
break;
case 2:
if (curChar == 62 && intVar5 > 18)
intVar5 = 18;
break;
case 3:
if ((0xd7ffecfaffffd9ffL & longVar7) == 0L)
break;
if (intVar5 > 19)
intVar5 = 19;
jjCheckNAdd(3);
break;
case 4:
case 6:
if (curChar == 34)
jjCheckNAddStates(0, 2);
break;
case 5:
if ((0xfffffffbffffffffL & longVar7) != 0L)
jjCheckNAddStates(0, 2);
break;
case 8:
if (curChar == 34 && intVar5 > 20)
intVar5 = 20;
break;
default:
break;
}
} while (intVar3 != intVar1);
} else if (curChar < 128) {
long longVar7 = longLiteral9;
MatchLoop: do {
switch(jjstateSet[--intVar3]) {
case 9:
jjCheckNAddStates(0, 2);
if (curChar == 92)
jjstateSet[jjnewStateCnt++] = 6;
break;
case 10:
if ((0xd7ffffffffffffffL & longVar7) != 0L) {
if (intVar5 > 19)
intVar5 = 19;
jjCheckNAdd(3);
}
if ((0x7e0000007eL & longVar7) != 0L)
jjCheckNAddTwoStates(1, 2);
break;
case 0:
case 3:
if ((0xd7ffffffffffffffL & longVar7) == 0L)
break;
if (intVar5 > 19)
intVar5 = 19;
jjCheckNAdd(3);
break;
case 1:
if ((0x7e0000007eL & longVar7) != 0L)
jjCheckNAddTwoStates(1, 2);
break;
case 5:
jjCheckNAddStates(0, 2);
break;
case 7:
if (curChar == 92)
jjstateSet[jjnewStateCnt++] = 6;
break;
default:
break;
}
} while (intVar3 != intVar1);
} else {
int intVar10 = intLiteral11;
long longVar12 = longLiteral9;
MatchLoop: do {
switch(jjstateSet[--intVar3]) {
case 9:
case 5:
if ((jjbitVec0[intVar10] & longVar12) != 0L)
jjCheckNAddStates(0, 2);
break;
case 10:
case 3:
if ((jjbitVec0[intVar10] & longVar12) == 0L)
break;
if (intVar5 > 19)
intVar5 = 19;
jjCheckNAdd(3);
break;
case 0:
if ((jjbitVec0[intVar10] & longVar12) == 0L)
break;
if (intVar5 > 19)
intVar5 = 19;
jjCheckNAdd(3);
break;
default:
break;
}
} while (intVar3 != intVar1);
}
if (intVar5 != 0x7fffffff) {
jjmatchedKind = intVar5;
jjmatchedPos = curPos;
intVar5 = 0x7fffffff;
}
++curPos;
if ((intVar3 = jjnewStateCnt) == (intVar1 = 9 - (jjnewStateCnt = intVar1)))
return curPos;
try {
curChar = input_stream.readChar();
} catch (IOException e) {
return curPos;
}
}
}"
7444,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,configuration,4655,"if (bufpos >= tokenBegin)
return new String(buffer, tokenBegin, bufpos - tokenBegin + 1);
else
return new String(buffer, tokenBegin, bufsize - tokenBegin) +
","public String GetImage() {
if (bufpos >= tokenBegin)
return new String(buffer, tokenBegin, bufpos - tokenBegin + 1);
else
return new String(buffer, tokenBegin, bufsize - tokenBegin) + new String(buffer, 0, bufpos + 1);
}","public String GetImage() {
if (bufpos >= tokenBegin)
return new String(buffer, tokenBegin, bufpos - tokenBegin + 1);
else
return new String(buffer, tokenBegin, bufsize - tokenBegin) + new String(buffer, 0, bufpos + 1);
}"
7445,DODGY_CODE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,FP,configuration,4656,"public int beginLine, beginColumn, endLine, endColumn;","public int beginLine, beginColumn, endLine, endColumn;","public int intVar1, intVar2, intVar3, intVar4;"
7453,PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,configuration,4664,"{
public Object createObject(Attributes attributes) throws Exception
{
XMLPropertyListConfiguration config = new XMLPropertyListConfiguration();
ArrayNode node = (ArrayNode) getDigester().peek();
node.addValue(config);
return config.getRoot();
","public void addDataValue(String value) {
addValue(Base64.decodeBase64(value.getBytes()));
}","public void addDataValue(String value) {
addValue(Base64.decodeBase64(value.getBytes()));
}"
7458,DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,configuration,4669,"return (configuration.getURL() != null) ? fileFromURL(configuration
","protected File getFile() {
return (configuration.getURL() != null) ? fileFromURL(configuration.getURL()) : configuration.getFile();
}","protected File getFile() {
return (configuration.getURL() != null) ? fileFromURL(configuration.getURL()) : configuration.getFile();
}"
7460,DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,configuration,4671,"result = (List) namedNodes.get(name);
","public List getSubNodes(String name) {
if (name == null) {
return getSubNodes();
}
List result;
if (nodes == null) {
result = null;
} else {
result = (List) namedNodes.get(name);
}
return (result == null) ? Collections.EMPTY_LIST : Collections.unmodifiableList(result);
}","public List getSubNodes(String name) {
if (name == null) {
return getSubNodes();
}
List listVar1;
if (nodes == null) {
listVar1 = null;
} else {
listVar1 = (List) namedNodes.get(name);
}
return (listVar1 == null) ? Collections.EMPTY_LIST : Collections.unmodifiableList(listVar1);
}"
7462,DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,configuration,4673,"return reverse ? getStartOffset() + 1 : subNodes.size()
","protected int getMaxPosition() {
return reverse ? getStartOffset() + 1 : subNodes.size() - getStartOffset();
}","protected int getMaxPosition() {
return reverse ? getStartOffset() + 1 : subNodes.size() - getStartOffset();
}"
7463,DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,configuration,4674,".get(positionToIndex(getPosition())));
","public NodePointer getNodePointer() {
if (getPosition() < 1 && !setPosition(1)) {
return null;
}
return createNodePointer((ConfigurationNode) subNodes.get(positionToIndex(getPosition())));
}","public NodePointer getNodePointer() {
if (getPosition() < 1 && !setPosition(1)) {
return null;
}
return createNodePointer((ConfigurationNode) subNodes.get(positionToIndex(getPosition())));
}"
7484,BAD_PRACTICE,SE_BAD_FIELD,FP,configuration,4695,private final Configuration configuration;,private final Configuration configuration;,private final Configuration configurationVar1;
7501,PERFORMANCE,URF_UNREAD_FIELD,FP,configuration,4712,private final String protocol;,private final String protocol;,private final String stringVar1;
7504,DODGY_CODE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,FP,configuration,4715,"staticCatalog = catalog;
","@Override
public org.apache.xml.resolver.Catalog getPrivateCatalog() {
org.apache.xml.resolver.Catalog catalog = staticCatalog;
if (catalog == null || !getUseStaticCatalog()) {
try {
catalog = new Catalog();
catalog.setCatalogManager(this);
catalog.setupReaders();
catalog.loadSystemCatalogs();
} catch (Exception ex) {
ex.printStackTrace();
}
if (getUseStaticCatalog()) {
staticCatalog = catalog;
}
}
return catalog;
}","@Override
public org.apache.xml.resolver.Catalog getPrivateCatalog() {
org.apache.xml.resolver.Catalog org.apache.xml.resolver.catalogVar1 = org.apache.xml.resolver.catalogLiteral2;
if (org.apache.xml.resolver.catalogVar1 == null || !getUseStaticCatalog()) {
try {
org.apache.xml.resolver.catalogVar1 = new Catalog();
org.apache.xml.resolver.catalogVar1.setCatalogManager(this);
org.apache.xml.resolver.catalogVar1.setupReaders();
org.apache.xml.resolver.catalogVar1.loadSystemCatalogs();
} catch (Exception ex) {
ex.printStackTrace();
}
if (getUseStaticCatalog()) {
staticCatalog = org.apache.xml.resolver.catalogVar1;
}
}
return org.apache.xml.resolver.catalogVar1;
}"
7534,EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,FP,configuration,4745,"ResultSet rs = pstmt.executeQuery();
","@Override
protected Boolean performOperation() throws SQLException {
PreparedStatement pstmt = initStatement(String.format(SQL_GET_PROPERTY, table, keyColumn), true, key);
ResultSet rs = pstmt.executeQuery();
return rs.next();
}","@Override
protected Boolean performOperation() throws SQLException {
PreparedStatement preparedstatementVar1 = preparedstatementLiteral2;
ResultSet resultsetVar3 = resultsetLiteral4;
return resultsetVar3.next();
}"
7539,BAD_PRACTICE,SE_BAD_FIELD,FP,configuration,4750,private NodeCombiner nodeCombiner;,private NodeCombiner nodeCombiner;,private NodeCombiner nodecombinerVar1;
7540,BAD_PRACTICE,SE_NO_SERIALVERSIONID,FP,configuration,4751,"{
this.config = config;
this.path = path;
this.trailing = path.endsWith(""/"");
this.init = true;
}
@Override
protected void addPropertyInternal(String key, Object value)
{
config.addProperty(makePath(key), value);
}
@Override
protected void clearInternal()
{
getConfig().clear();
}
@Override
protected void clearPropertyDirect(String key)
{
config.clearProperty(makePath(key));
}
@Override
protected boolean containsKeyInternal(String key)
{
return config.containsKey(makePath(key));
}
@Override
public BigDecimal getBigDecimal(String key, BigDecimal defaultValue)
{
return config.getBigDecimal(makePath(key), defaultValue);
}
@Override
public BigDecimal getBigDecimal(String key)
{
return config.getBigDecimal(makePath(key));
}
@Override
public BigInteger getBigInteger(String key, BigInteger defaultValue)
{
return config.getBigInteger(makePath(key), defaultValue);
}
@Override
public BigInteger getBigInteger(String key)
{
return config.getBigInteger(makePath(key));
}
@Override
public boolean getBoolean(String key, boolean defaultValue)
{
return config.getBoolean(makePath(key), defaultValue);
}
@Override
public Boolean getBoolean(String key, Boolean defaultValue)
{
return config.getBoolean(makePath(key), defaultValue);
}
@Override
public boolean getBoolean(String key)
{
return config.getBoolean(makePath(key));
}
@Override
public byte getByte(String key, byte defaultValue)
{
return config.getByte(makePath(key), defaultValue);
}
@Override
public Byte getByte(String key, Byte defaultValue)
{
return config.getByte(makePath(key), defaultValue);
}
@Override
public byte getByte(String key)
{
return config.getByte(makePath(key));
}
@Override
public double getDouble(String key, double defaultValue)
{
return config.getDouble(makePath(key), defaultValue);
}
@Override
public Double getDouble(String key, Double defaultValue)
{
return config.getDouble(makePath(key), defaultValue);
}
@Override
public double getDouble(String key)
{
return config.getDouble(makePath(key));
}
@Override
public float getFloat(String key, float defaultValue)
{
return config.getFloat(makePath(key), defaultValue);
}
@Override
public Float getFloat(String key, Float defaultValue)
{
return config.getFloat(makePath(key), defaultValue);
}
@Override
public float getFloat(String key)
{
return config.getFloat(makePath(key));
}
@Override
public int getInt(String key, int defaultValue)
{
return config.getInt(makePath(key), defaultValue);
}
@Override
public int getInt(String key)
{
return config.getInt(makePath(key));
}
@Override
public Integer getInteger(String key, Integer defaultValue)
{
return config.getInteger(makePath(key), defaultValue);
}
@Override
protected Iterator<String> getKeysInternal()
{
return config.getKeys(makePath());
}
@Override
protected Iterator<String> getKeysInternal(String prefix)
{
return config.getKeys(makePath(prefix));
}
@Override
public List<Object> getList(String key, List<Object> defaultValue)
{
return config.getList(makePath(key), defaultValue);
}
@Override
public List<Object> getList(String key)
{
return config.getList(makePath(key));
}
@Override
public long getLong(String key, long defaultValue)
{
return config.getLong(makePath(key), defaultValue);
}
@Override
public Long getLong(String key, Long defaultValue)
{
return config.getLong(makePath(key), defaultValue);
}
@Override
public long getLong(String key)
{
return config.getLong(makePath(key));
}
@Override
public Properties getProperties(String key)
{
return config.getProperties(makePath(key));
}
@Override
protected Object getPropertyInternal(String key)
{
return config.getProperty(makePath(key));
}
@Override
public short getShort(String key, short defaultValue)
{
return config.getShort(makePath(key), defaultValue);
}
@Override
public Short getShort(String key, Short defaultValue)
{
return config.getShort(makePath(key), defaultValue);
}
@Override
public short getShort(String key)
{
return config.getShort(makePath(key));
}
@Override
public String getString(String key, String defaultValue)
{
return config.getString(makePath(key), defaultValue);
}
@Override
public String getString(String key)
{
return config.getString(makePath(key));
}
@Override
public String[] getStringArray(String key)
{
return config.getStringArray(makePath(key));
}
@Override
protected boolean isEmptyInternal()
{
return getConfig().isEmpty();
}
@Override
protected void setPropertyInternal(String key, Object value)
{
getConfig().setProperty(key, value);
}
@Override
public Configuration subset(String prefix)
{
return getConfig().subset(prefix);
}
@Override
public ConfigurationNode getRootNode()
{
return getConfig().getRootNode();
}
@Override
protected void setRootNodeInternal(ConfigurationNode rootNode)
{
if (init)
{
getConfig().setRootNode(rootNode);
}
else
{
super.setRootNodeInternal(rootNode);
}
}
@Override
public ExpressionEngine getExpressionEngine()
{
return config.getExpressionEngine();
}
@Override
public void setExpressionEngine(ExpressionEngine expressionEngine)
{
if (init)
{
config.setExpressionEngine(expressionEngine);
}
else
{
super.setExpressionEngine(expressionEngine);
}
}
@Override
protected void addNodesInternal(String key, Collection<? extends ConfigurationNode> nodes)
{
getConfig().addNodes(key, nodes);
}
@Override
public SubnodeConfiguration configurationAt(String key, boolean supportUpdates)
{
return config.configurationAt(makePath(key), supportUpdates);
}
@Override
public SubnodeConfiguration configurationAt(String key)
{
return config.configurationAt(makePath(key));
}
@Override
public List<SubnodeConfiguration> configurationsAt(String key)
{
return config.configurationsAt(makePath(key));
}
@Override
protected List<ConfigurationNode> clearTreeInternal(String key)
{
config.clearTree(makePath(key));
return Collections.emptyList();
}
@Override
protected int getMaxIndexInternal(String key)
{
return config.getMaxIndex(makePath(key));
}
@Override
public Configuration interpolatedConfiguration()
{
return getConfig().interpolatedConfiguration();
}
@Override
public void addConfigurationListener(ConfigurationListener l)
{
getConfig().addConfigurationListener(l);
}
@Override
public boolean removeConfigurationListener(ConfigurationListener l)
{
return getConfig().removeConfigurationListener(l);
}
@Override
public Collection<ConfigurationListener> getConfigurationListeners()
{
return getConfig().getConfigurationListeners();
}
@Override
public void clearConfigurationListeners()
{
getConfig().clearConfigurationListeners();
}
@Override
public void addErrorListener(ConfigurationErrorListener l)
{
getConfig().addErrorListener(l);
}
@Override
public boolean removeErrorListener(ConfigurationErrorListener l)
{
return getConfig().removeErrorListener(l);
}
@Override
public void clearErrorListeners()
{
getConfig().clearErrorListeners();
}
public void write(Writer writer) throws ConfigurationException, IOException
{
fetchFileBased().write(writer);
}
public void read(Reader reader) throws ConfigurationException, IOException
{
fetchFileBased().read(reader);
}
@Override
public Collection<ConfigurationErrorListener> getErrorListeners()
{
return getConfig().getErrorListeners();
}
private BaseHierarchicalConfiguration getConfig()
{
return config.configurationAt(makePath());
}
private String makePath()
{
String pathPattern = trailing ? path.substring(0, path.length() - 1) : path;
return substitute(pathPattern);
}
private String makePath(String item)
{
String pathPattern;
if ((item.length() == 0 || item.startsWith(""/"")) && trailing)
{
pathPattern = path.substring(0, path.length() - 1);
}
else  if (!item.startsWith(""/"") || !trailing)
{
pathPattern = path + ""/"";
}
else
{
pathPattern = path;
}
return substitute(pathPattern) + item;
}
private String substitute(String pattern)
{
Object value = getInterpolator().interpolate(pattern);
return (value != null) ? value.toString() : null;
}
private FileBased fetchFileBased() throws ConfigurationException
{
if (!(config instanceof FileBased))
{
throw new ConfigurationException(
""Wrapped configuration does not implement FileBased!""
+ "" No I/O operations are supported."");
}
return (FileBased) config;
","@Override
protected boolean isEmptyInternal() {
return getConfig().isEmpty();
}","@Override
protected boolean isEmptyInternal() {
return getConfig().isEmpty();
}"
7551,DODGY_CODE,REC_CATCH_EXCEPTION,FP,configuration,4762,"catch (Exception e)
","public void read(Reader in) throws ConfigurationException {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setNamespaceAware(false);
factory.setValidating(true);
try {
SAXParser parser = factory.newSAXParser();
XMLReader xmlReader = parser.getXMLReader();
xmlReader.setEntityResolver(new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlReader.setContentHandler(new XMLPropertiesHandler());
xmlReader.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
// todo: support included properties ?
}","public void read(Reader in) throws ConfigurationException {
SAXParserFactory saxparserfactoryVar1 = saxparserfactoryLiteral2;
saxparserfactoryVar1.setNamespaceAware(false);
saxparserfactoryVar1.setValidating(true);
try {
SAXParser saxparserVar3 = saxparserLiteral4;
XMLReader xmlreaderVar5 = xmlreaderLiteral6;
xmlreaderVar5.setEntityResolver(new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlreaderVar5.setContentHandler(new XMLPropertiesHandler());
xmlreaderVar5.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
// todo: support included properties ?
}"
7557,Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,configuration,4768,private ConfigurationSourceData sourceData;,private ConfigurationSourceData sourceData;,private ConfigurationSourceData configurationsourcedataVar1;
7561,PERFORMANCE,DM_NUMBER_CTOR,FP,configuration,4772,"return new Long(n.longValue());
","public static Long toLong(Object value) throws ConversionException {
Number n = toNumber(value, Long.class);
if (n instanceof Long) {
return (Long) n;
} else {
return new Long(n.longValue());
}
}","public static Long toLong(Object value) throws ConversionException {
Number numberVar1 = numberLiteral2;
if (numberVar1 instanceof Long) {
return (Long) numberVar1;
} else {
return new Long(numberVar1.longValue());
}
}"
7576,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,configuration,4787,"fs = ((CatalogManager) catalogManager).getFileSystem();
","@Override
public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
String base = ((CatalogManager) catalogManager).getBaseDir();
@SuppressWarnings(""unchecked"")
Vector<String> catalogs = catalogManager.getCatalogFiles();
if (catalogs != null) {
for (int count = 0; count < catalogs.size(); count++) {
String fileName = catalogs.elementAt(count);
URL url = null;
InputStream is = null;
try {
url = ConfigurationUtils.locate(fs, base, fileName);
if (url != null) {
is = fs.getInputStream(url);
}
} catch (ConfigurationException ce) {
String name = (url == null) ? fileName : url.toString();
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + name + "". "" + ce.getMessage());
}
if (is != null) {
String mimeType = fileNameMap.getContentTypeFor(fileName);
try {
if (mimeType != null) {
parseCatalog(mimeType, is);
continue;
}
} catch (Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + fileName + "". "" + ex.getMessage());
} finally {
is.close();
}
}
parseCatalog(base, fileName);
}
}
}","@Override
public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
String stringVar1 = stringLiteral2;
@SuppressWarnings(""unchecked"")
Vector<String> vector<string>Var3 = vector<string>Literal4;
if (vector<string>Var3 != null) {
for (int intVar16 = intLiteral17; intVar5 < intLiteral1; intVar5++) {
String stringVar7 = stringLiteral8;
URL urlVar9 = urlLiteral10;
InputStream inputstreamVar11 = urlLiteral10;
try {
urlVar9 = ConfigurationUtils.locate(fs, stringVar1, stringVar7);
if (urlVar9 != null) {
inputstreamVar11 = fs.getInputStream(urlVar9);
}
} catch (ConfigurationException ce) {
String stringVar12 = stringLiteral13;
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + stringVar12 + "". "" + ce.getMessage());
}
if (inputstreamVar11 != null) {
String stringVar14 = stringLiteral15;
try {
if (stringVar14 != null) {
parseCatalog(stringVar14, inputstreamVar11);
continue;
}
} catch (Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + stringVar7 + "". "" + ex.getMessage());
} finally {
inputstreamVar11.close();
}
}
parseCatalog(stringVar1, stringVar7);
}
}
}"
7583,DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,configuration,4794,"return createNodePointer(subNodes.get(positionToIndex(getPosition())));
","public NodePointer getNodePointer() {
if (getPosition() < 1 && !setPosition(1)) {
return null;
}
return createNodePointer(subNodes.get(positionToIndex(getPosition())));
}","public NodePointer getNodePointer() {
if (getPosition() < 1 && !setPosition(1)) {
return null;
}
return createNodePointer(subNodes.get(positionToIndex(getPosition())));
}"
7605,I18N,DM_DEFAULT_ENCODING,FP,configuration,4816,"getLogger().debug(os.toString());
","private ImmutableNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
} else {
Iterator<ConfigData> it = configurations.iterator();
ImmutableNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = nodeCombiner.combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}","private ImmutableNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
} else {
Iterator<ConfigData> iterator<configdata>Var1 = iterator<configdata>Literal2;
ImmutableNode immutablenodeVar3 = immutablenodeLiteral4;
while (iterator<configdata>Var1.hasNext()) {
immutablenodeVar3 = nodeCombiner.combine(immutablenodeVar3, iterator<configdata>Var1.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream bytearrayoutputstreamVar5 = bytearrayoutputstreamLiteral6;
PrintStream printstreamVar7 = printstreamLiteral8;
TreeUtils.printTree(printstreamVar7, immutablenodeVar3);
getLogger().debug(bytearrayoutputstreamVar5.toString());
}
return immutablenodeVar3;
}
}"
7608,I18N,DM_DEFAULT_ENCODING,FP,configuration,4819,"dump(configuration, new PrintWriter(out));
","public static void dump(Configuration configuration, PrintStream out) {
dump(configuration, new PrintWriter(out));
}","public static void dump(Configuration configuration, PrintStream out) {
dump(configuration, new PrintWriter(out));
}"
7609,DODGY_CODE,REC_CATCH_EXCEPTION,FP,configuration,4820,"catch (Exception ex)
","public static Synchronizer cloneSynchronizer(Synchronizer sync) {
if (sync == null) {
throw new IllegalArgumentException(""Synchronizer must not be null!"");
}
if (NoOpSynchronizer.INSTANCE == sync) {
return sync;
}
try {
return sync.getClass().newInstance();
} catch (Exception ex) {
LOG.info(""Cannot create new instance of "" + sync.getClass());
}
try {
return (Synchronizer) clone(sync);
} catch (CloneNotSupportedException cnex) {
throw new ConfigurationRuntimeException(""Cannot clone Synchronizer "" + sync);
}
}","public static Synchronizer cloneSynchronizer(Synchronizer sync) {
if (sync == null) {
throw new IllegalArgumentException(""Synchronizer must not be null!"");
}
if (NoOpSynchronizer.INSTANCE == sync) {
return sync;
}
try {
return sync.getClass().newInstance();
} catch (Exception ex) {
LOG.info(""Cannot create new instance of "" + sync.getClass());
}
try {
return (Synchronizer) clone(sync);
} catch (CloneNotSupportedException cnex) {
throw new ConfigurationRuntimeException(""Cannot clone Synchronizer "" + sync);
}
}"
7624,DODGY_CODE,REC_CATCH_EXCEPTION,FP,configuration,4835,"catch (Exception e)
","static Object toInternetAddress(Object value) throws ConversionException {
if (value.getClass().getName().equals(INTERNET_ADDRESS_CLASSNAME)) {
return value;
} else if (value instanceof String) {
try {
Constructor<?> ctor = Class.forName(INTERNET_ADDRESS_CLASSNAME).getConstructor(String.class);
return ctor.newInstance(value);
} catch (Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"", e);
}
} else {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"");
}
}","static Object toInternetAddress(Object value) throws ConversionException {
if (value.getClass().getName().equals(INTERNET_ADDRESS_CLASSNAME)) {
return value;
} else if (value instanceof String) {
try {
Constructor<?> constructor<?>Var1 = constructor<?>Literal2;
return constructor<?>Var1.newInstance(value);
} catch (Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"", e);
}
} else {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"");
}
}"
7634,DODGY_CODE,REC_CATCH_EXCEPTION,FP,configuration,4845,"catch (Exception ex)
","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
log.warn(""Cannot access property '"" + key + ""'! Ignoring."", ex);
}
}","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String stringVar1 = stringLiteral2;
Class<?>[] class<?>ArrayVar3 = class<?>ArrayLiteral4;
class<?>ArrayVar3[0] = FileSystemOptions.class;
class<?>ArrayVar3[1] = value.getClass();
try {
Method methodVar5 = methodLiteral6;
Object[] objectArrayVar7 = objectArrayLiteral8;
objectArrayVar7[0] = options;
objectArrayVar7[1] = value;
methodVar5.invoke(builder, objectArrayVar7);
} catch (Exception ex) {
log.warn(""Cannot access property '"" + key + ""'! Ignoring."", ex);
}
}"
7688,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,configuration,4899,"return new ConfigurationBuilderResultCreatedEvent(this,
","private ConfigurationBuilderEvent createEventWithChangedSource(ConfigurationBuilderEvent event) {
if (ConfigurationBuilderResultCreatedEvent.RESULT_CREATED.equals(event.getEventType())) {
return new ConfigurationBuilderResultCreatedEvent(this, ConfigurationBuilderResultCreatedEvent.RESULT_CREATED, ((ConfigurationBuilderResultCreatedEvent) event).getConfiguration());
}
@SuppressWarnings(""unchecked"")
EventType<? extends ConfigurationBuilderEvent> type = (EventType<? extends ConfigurationBuilderEvent>) event.getEventType();
return new ConfigurationBuilderEvent(this, type);
}","private ConfigurationBuilderEvent createEventWithChangedSource(ConfigurationBuilderEvent event) {
if (ConfigurationBuilderResultCreatedEvent.RESULT_CREATED.equals(event.getEventType())) {
return new ConfigurationBuilderResultCreatedEvent(this, ConfigurationBuilderResultCreatedEvent.RESULT_CREATED, ((ConfigurationBuilderResultCreatedEvent) event).getConfiguration());
}
@SuppressWarnings(""unchecked"")
EventType<? extends ConfigurationBuilderEvent> eventtype<? extends configurationbuilderevent>Var1 = eventtype<? extends configurationbuilderevent>Literal2;
return new ConfigurationBuilderEvent(this, eventtype<? extends configurationbuilderevent>Var1);
}"
7695,PERFORMANCE,DM_NUMBER_CTOR,FP,configuration,4906,"return new Byte(n.byteValue());
","public static Byte toByte(Object value) throws ConversionException {
Number n = toNumber(value, Byte.class);
if (n instanceof Byte) {
return (Byte) n;
} else {
return new Byte(n.byteValue());
}
}","public static Byte toByte(Object value) throws ConversionException {
Number numberVar1 = numberLiteral2;
if (numberVar1 instanceof Byte) {
return (Byte) numberVar1;
} else {
return new Byte(numberVar1.byteValue());
}
}"
7700,BAD_PRACTICE,SE_BAD_FIELD,FP,configuration,4911,private final EventType<? extends Event> eventType;,private final EventType<? extends Event> eventType;,private final EventType<? extends Event> eventtype<? extends event>Var1;
7707,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,configuration,4918,"catch (Exception ex)
","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
return;
}
}","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String stringVar1 = stringLiteral2;
Class<?>[] class<?>ArrayVar3 = class<?>ArrayLiteral4;
class<?>ArrayVar3[0] = FileSystemOptions.class;
class<?>ArrayVar3[1] = value.getClass();
try {
Method methodVar5 = methodLiteral6;
Object[] objectArrayVar7 = objectArrayLiteral8;
objectArrayVar7[0] = options;
objectArrayVar7[1] = value;
methodVar5.invoke(builder, objectArrayVar7);
} catch (Exception ex) {
return;
}
}"
7715,DODGY_CODE,REC_CATCH_EXCEPTION,FP,configuration,4926,"catch (Exception e)
","@Override
public void read(Reader in) throws ConfigurationException {
EntityResolver resolver = new EntityResolver() {
@Override
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
};
XMLPropertyListHandler handler = new XMLPropertyListHandler();
try {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
getNodeModel().mergeRoot(handler.getResultBuilder().createNode(), null, null, null, this);
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}","@Override
public void read(Reader in) throws ConfigurationException {
EntityResolver entityresolverVar1 = entityresolverLiteral2;
XMLPropertyListHandler xmlpropertylisthandlerVar3 = xmlpropertylisthandlerLiteral4;
try {
SAXParserFactory saxparserfactoryVar5 = saxparserfactoryLiteral6;
saxparserfactoryVar5.setValidating(true);
SAXParser saxparserVar7 = saxparserLiteral8;
saxparserVar7.getXMLReader().setEntityResolver(entityresolverVar1);
saxparserVar7.getXMLReader().setContentHandler(xmlpropertylisthandlerVar3);
saxparserVar7.getXMLReader().parse(new InputSource(in));
getNodeModel().mergeRoot(xmlpropertylisthandlerVar3.getResultBuilder().createNode(), null, null, null, this);
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}"
7719,DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,FP,configuration,4930,"String name = (url == null) ? fileName : url.toString();
","@Override
public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
String base = ((CatalogManager) catalogManager).getBaseDir();
@SuppressWarnings(""unchecked"")
Vector<String> catalogs = catalogManager.getCatalogFiles();
if (catalogs != null) {
for (int count = 0; count < catalogs.size(); count++) {
String fileName = catalogs.elementAt(count);
URL url = null;
InputStream is = null;
try {
url = locate(fs, base, fileName);
if (url != null) {
is = fs.getInputStream(url);
}
} catch (ConfigurationException ce) {
String name = (url == null) ? fileName : url.toString();
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + name + "". "" + ce.getMessage());
}
if (is != null) {
String mimeType = fileNameMap.getContentTypeFor(fileName);
try {
if (mimeType != null) {
parseCatalog(mimeType, is);
continue;
}
} catch (Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + fileName + "". "" + ex.getMessage());
} finally {
is.close();
}
}
parseCatalog(base, fileName);
}
}
}","@Override
public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
String stringVar1 = stringLiteral2;
@SuppressWarnings(""unchecked"")
Vector<String> vector<string>Var3 = vector<string>Literal4;
if (vector<string>Var3 != null) {
for (int intVar16 = intLiteral17; intVar5 < intLiteral1; intVar5++) {
String stringVar7 = stringLiteral8;
URL urlVar9 = urlLiteral10;
InputStream inputstreamVar11 = urlLiteral10;
try {
urlVar9 = locate(fs, stringVar1, stringVar7);
if (urlVar9 != null) {
inputstreamVar11 = fs.getInputStream(urlVar9);
}
} catch (ConfigurationException ce) {
String stringVar12 = stringLiteral13;
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + stringVar12 + "". "" + ce.getMessage());
}
if (inputstreamVar11 != null) {
String stringVar14 = stringLiteral15;
try {
if (stringVar14 != null) {
parseCatalog(stringVar14, inputstreamVar11);
continue;
}
} catch (Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + stringVar7 + "". "" + ex.getMessage());
} finally {
inputstreamVar11.close();
}
}
parseCatalog(stringVar1, stringVar7);
}
}
}"
7784,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,configuration,4995,"final ReferenceNodeHandler refHandler = (ReferenceNodeHandler) handler;
","@Override
public void visitBeforeChildren(final ImmutableNode node, final NodeHandler<ImmutableNode> handler) {
final ReferenceNodeHandler refHandler = (ReferenceNodeHandler) handler;
updateNode(node, refHandler);
insertNewChildNodes(node, refHandler);
}","@Override
public void visitBeforeChildren(final ImmutableNode node, final NodeHandler<ImmutableNode> handler) {
final ReferenceNodeHandler referencenodehandlerVar1 = referencenodehandlerLiteral2;
updateNode(node, referencenodehandlerVar1);
insertNewChildNodes(node, referencenodehandlerVar1);
}"
7788,I18N,DM_DEFAULT_ENCODING,FP,configuration,4999,"dump(configuration, new PrintWriter(out));
","public static void dump(final ImmutableConfiguration configuration, final PrintStream out) {
dump(configuration, new PrintWriter(out));
}","public static void dump(final ImmutableConfiguration configuration, final PrintStream out) {
dump(configuration, new PrintWriter(out));
}"
7799,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,configuration,5010,"return new ConfigurationBuilderResultCreatedEvent(this, ConfigurationBuilderResultCreatedEvent.RESULT_CREATED,
","private ConfigurationBuilderEvent createEventWithChangedSource(final ConfigurationBuilderEvent event) {
if (ConfigurationBuilderResultCreatedEvent.RESULT_CREATED.equals(event.getEventType())) {
return new ConfigurationBuilderResultCreatedEvent(this, ConfigurationBuilderResultCreatedEvent.RESULT_CREATED, ((ConfigurationBuilderResultCreatedEvent) event).getConfiguration());
}
@SuppressWarnings(""unchecked"")
final EventType<? extends ConfigurationBuilderEvent> type = (EventType<? extends ConfigurationBuilderEvent>) event.getEventType();
return new ConfigurationBuilderEvent(this, type);
}","private ConfigurationBuilderEvent createEventWithChangedSource(final ConfigurationBuilderEvent event) {
if (ConfigurationBuilderResultCreatedEvent.RESULT_CREATED.equals(event.getEventType())) {
return new ConfigurationBuilderResultCreatedEvent(this, ConfigurationBuilderResultCreatedEvent.RESULT_CREATED, ((ConfigurationBuilderResultCreatedEvent) event).getConfiguration());
}
@SuppressWarnings(""unchecked"")
final EventType<? extends ConfigurationBuilderEvent> eventtype<? extends configurationbuilderevent>Var1 = eventtype<? extends configurationbuilderevent>Literal2;
return new ConfigurationBuilderEvent(this, eventtype<? extends configurationbuilderevent>Var1);
}"
7801,DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,configuration,5012,"reloadingController.resetReloadingState();
","@Override
public CombinedConfiguration getConfiguration() throws ConfigurationException {
final CombinedConfiguration result = super.getConfiguration();
reloadingController.resetReloadingState();
return result;
}","@Override
public CombinedConfiguration getConfiguration() throws ConfigurationException {
final CombinedConfiguration combinedconfigurationVar1 = combinedconfigurationLiteral2;
reloadingController.resetReloadingState();
return combinedconfigurationVar1;
}"
7812,DODGY_CODE,REC_CATCH_EXCEPTION,FP,configuration,5023,"} catch (final Exception e) {
","@Override
public void read(final Reader in) throws ConfigurationException {
final EntityResolver resolver = (publicId, systemId) -> new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
final XMLPropertyListHandler handler = new XMLPropertyListHandler();
try {
final SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
final SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
getNodeModel().mergeRoot(handler.getResultBuilder().createNode(), null, null, null, this);
} catch (final Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}","@Override
public void read(final Reader in) throws ConfigurationException {
final EntityResolver entityresolverVar1 = entityresolverLiteral2;
final XMLPropertyListHandler xmlpropertylisthandlerVar3 = xmlpropertylisthandlerLiteral4;
try {
final SAXParserFactory saxparserfactoryVar5 = saxparserfactoryLiteral6;
saxparserfactoryVar5.setValidating(true);
final SAXParser saxparserVar7 = saxparserLiteral8;
saxparserVar7.getXMLReader().setEntityResolver(entityresolverVar1);
saxparserVar7.getXMLReader().setContentHandler(xmlpropertylisthandlerVar3);
saxparserVar7.getXMLReader().parse(new InputSource(in));
getNodeModel().mergeRoot(xmlpropertylisthandlerVar3.getResultBuilder().createNode(), null, null, null, this);
} catch (final Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}"
7813,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,configuration,5024,"fs = ((CatalogManager) catalogManager).getFileSystem();
","@Override
public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
final String base = ((CatalogManager) catalogManager).getBaseDir();
final Vector<String> catalogs = catalogManager.getCatalogFiles();
if (catalogs != null) {
for (int count = 0; count < catalogs.size(); count++) {
final String fileName = catalogs.elementAt(count);
URL url = null;
InputStream inputStream = null;
try {
url = locate(fs, base, fileName);
if (url != null) {
inputStream = fs.getInputStream(url);
}
} catch (final ConfigurationException ce) {
final String name = url.toString();
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + name + "". "" + ce.getMessage());
}
if (inputStream != null) {
final String mimeType = fileNameMap.getContentTypeFor(fileName);
try {
if (mimeType != null) {
parseCatalog(mimeType, inputStream);
continue;
}
} catch (final Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + fileName + "". "" + ex.getMessage());
} finally {
inputStream.close();
}
}
parseCatalog(base, fileName);
}
}
}","@Override
public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
final String stringVar1 = stringLiteral2;
final Vector<String> vector<string>Var3 = vector<string>Literal4;
if (vector<string>Var3 != null) {
for (int intVar16 = intLiteral17; intVar5 < intLiteral1; intVar5++) {
final String stringVar7 = stringLiteral8;
URL urlVar9 = urlLiteral10;
InputStream inputstreamVar11 = urlLiteral10;
try {
urlVar9 = locate(fs, stringVar1, stringVar7);
if (urlVar9 != null) {
inputstreamVar11 = fs.getInputStream(urlVar9);
}
} catch (final ConfigurationException ce) {
final String stringVar12 = stringLiteral13;
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + stringVar12 + "". "" + ce.getMessage());
}
if (inputstreamVar11 != null) {
final String stringVar14 = stringLiteral15;
try {
if (stringVar14 != null) {
parseCatalog(stringVar14, inputstreamVar11);
continue;
}
} catch (final Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + stringVar7 + "". "" + ex.getMessage());
} finally {
inputstreamVar11.close();
}
}
parseCatalog(stringVar1, stringVar7);
}
}
}"
7814,DODGY_CODE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,FP,configuration,5025,"staticCatalog = catalog;
","@Override
public org.apache.xml.resolver.Catalog getPrivateCatalog() {
org.apache.xml.resolver.Catalog catalog = staticCatalog;
if (catalog == null || !getUseStaticCatalog()) {
try {
catalog = new Catalog();
catalog.setCatalogManager(this);
catalog.setupReaders();
catalog.loadSystemCatalogs();
} catch (final Exception ex) {
ex.printStackTrace();
}
if (getUseStaticCatalog()) {
staticCatalog = catalog;
}
}
return catalog;
}","@Override
public org.apache.xml.resolver.Catalog getPrivateCatalog() {
org.apache.xml.resolver.Catalog org.apache.xml.resolver.catalogVar1 = org.apache.xml.resolver.catalogLiteral2;
if (org.apache.xml.resolver.catalogVar1 == null || !getUseStaticCatalog()) {
try {
org.apache.xml.resolver.catalogVar1 = new Catalog();
org.apache.xml.resolver.catalogVar1.setCatalogManager(this);
org.apache.xml.resolver.catalogVar1.setupReaders();
org.apache.xml.resolver.catalogVar1.loadSystemCatalogs();
} catch (final Exception ex) {
ex.printStackTrace();
}
if (getUseStaticCatalog()) {
staticCatalog = org.apache.xml.resolver.catalogVar1;
}
}
return org.apache.xml.resolver.catalogVar1;
}"
7818,BAD_PRACTICE,SE_BAD_FIELD,FP,configuration,5029,private final NodeHandler<T> handler;,private final NodeHandler<T> handler;,private final NodeHandler<T> nodehandler<t>Var1;
7974,I18N,DM_DEFAULT_ENCODING,FP,configuration,5185,"getLogger().debug(os.toString());
","private ConfigurationNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return new ViewNode();
} else {
Iterator<ConfigData> it = configurations.iterator();
ConfigurationNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = nodeCombiner.combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}","private ConfigurationNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return new ViewNode();
} else {
Iterator<ConfigData> iterator<configdata>Var1 = iterator<configdata>Literal2;
ConfigurationNode configurationnodeVar3 = configurationnodeLiteral4;
while (iterator<configdata>Var1.hasNext()) {
configurationnodeVar3 = nodeCombiner.combine(configurationnodeVar3, iterator<configdata>Var1.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream bytearrayoutputstreamVar5 = bytearrayoutputstreamLiteral6;
PrintStream printstreamVar7 = printstreamLiteral8;
TreeUtils.printTree(printstreamVar7, configurationnodeVar3);
getLogger().debug(bytearrayoutputstreamVar5.toString());
}
return configurationnodeVar3;
}
}"
7977,DODGY_CODE,REC_CATCH_EXCEPTION,FP,configuration,5188,"catch (Exception ex)
","public static Synchronizer cloneSynchronizer(Synchronizer sync) {
if (sync == null) {
throw new IllegalArgumentException(""Synchronizer must not be null!"");
}
if (NoOpSynchronizer.INSTANCE == sync) {
return sync;
}
try {
return sync.getClass().newInstance();
} catch (Exception ex) {
LOG.info(""Cannot create new instance of "" + sync.getClass());
}
try {
return (Synchronizer) clone(sync);
} catch (CloneNotSupportedException cnex) {
throw new ConfigurationRuntimeException(""Cannot clone Synchronizer "" + sync);
}
}","public static Synchronizer cloneSynchronizer(Synchronizer sync) {
if (sync == null) {
throw new IllegalArgumentException(""Synchronizer must not be null!"");
}
if (NoOpSynchronizer.INSTANCE == sync) {
return sync;
}
try {
return sync.getClass().newInstance();
} catch (Exception ex) {
LOG.info(""Cannot create new instance of "" + sync.getClass());
}
try {
return (Synchronizer) clone(sync);
} catch (CloneNotSupportedException cnex) {
throw new ConfigurationRuntimeException(""Cannot clone Synchronizer "" + sync);
}
}"
7979,BAD_PRACTICE,SE_BAD_FIELD_STORE,FP,configuration,5190,private final ConversionHandler dataConversionHandler;,private final ConversionHandler dataConversionHandler;,private final ConversionHandler conversionhandlerVar1;
7989,BAD_PRACTICE,SE_BAD_FIELD,FP,configuration,5200,private Document document;,private Document document;,private Document documentVar1;
7990,BAD_PRACTICE,SE_BAD_FIELD_STORE,FP,configuration,5201,private EntityResolver entityResolver = new DefaultEntityResolver();,private EntityResolver entityResolver = new DefaultEntityResolver();,private EntityResolver entityresolverVar1 = entityresolverLiteral2;
7995,MALICIOUS_CODE,EI_EXPOSE_REP,FP,configuration,5206,"return additionalBeanInfo;
","@Override
public BeanInfo[] getAdditionalBeanInfo() {
return additionalBeanInfo;
}","@Override
public BeanInfo[] getAdditionalBeanInfo() {
return additionalBeanInfo;
}"
7999,Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,configuration,5210,private ReloadingController reloadingController;,private ReloadingController reloadingController;,private ReloadingController reloadingcontrollerVar1;
8001,PERFORMANCE,DM_NUMBER_CTOR,FP,configuration,5212,"return new Short(n.shortValue());
","public static Short toShort(Object value) throws ConversionException {
Number n = toNumber(value, Short.class);
if (n instanceof Short) {
return (Short) n;
} else {
return new Short(n.shortValue());
}
}","public static Short toShort(Object value) throws ConversionException {
Number numberVar1 = numberLiteral2;
if (numberVar1 instanceof Short) {
return (Short) numberVar1;
} else {
return new Short(numberVar1.shortValue());
}
}"
8009,BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,configuration,5220,"parent.mkdirs();
","private void createPath(File file) {
if (file != null) {
if (!file.exists()) {
File parent = file.getParentFile();
if (parent != null && !parent.exists()) {
parent.mkdirs();
}
}
}
}","private void createPath(File file) {
if (file != null) {
if (!file.exists()) {
File fileVar1 = fileLiteral2;
if (fileVar1 != null && !fileVar1.exists()) {
fileVar1.mkdirs();
}
}
}
}"
8015,I18N,DM_CONVERT_CASE,FP,configuration,5226,"String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
return;
}
}","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String stringVar1 = stringLiteral2;
Class<?>[] class<?>ArrayVar3 = class<?>ArrayLiteral4;
class<?>ArrayVar3[0] = FileSystemOptions.class;
class<?>ArrayVar3[1] = value.getClass();
try {
Method methodVar5 = methodLiteral6;
Object[] objectArrayVar7 = objectArrayLiteral8;
objectArrayVar7[0] = options;
objectArrayVar7[1] = value;
methodVar5.invoke(builder, objectArrayVar7);
} catch (Exception ex) {
return;
}
}"
8019,DODGY_CODE,REC_CATCH_EXCEPTION,FP,configuration,5230,"catch (Exception e)
","public void read(Reader in) throws ConfigurationException {
if (!(getRootNode() instanceof PListNode)) {
initRoot();
}
EntityResolver resolver = new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
};
XMLPropertyListHandler handler = new XMLPropertyListHandler(getRootNode());
try {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}","public void read(Reader in) throws ConfigurationException {
if (!(getRootNode() instanceof PListNode)) {
initRoot();
}
EntityResolver entityresolverVar1 = entityresolverLiteral2;
XMLPropertyListHandler xmlpropertylisthandlerVar3 = xmlpropertylisthandlerLiteral4;
try {
SAXParserFactory saxparserfactoryVar5 = saxparserfactoryLiteral6;
saxparserfactoryVar5.setValidating(true);
SAXParser saxparserVar7 = saxparserLiteral8;
saxparserVar7.getXMLReader().setEntityResolver(entityresolverVar1);
saxparserVar7.getXMLReader().setContentHandler(xmlpropertylisthandlerVar3);
saxparserVar7.getXMLReader().parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}"
8024,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,configuration,5235,"ConfigurationInterpolator ci = ((CatalogManager) catalogManager).getInterpolator();
","@Override
protected String normalizeURI(String uriref) {
ConfigurationInterpolator ci = ((CatalogManager) catalogManager).getInterpolator();
String resolved = (ci != null) ? String.valueOf(ci.interpolate(uriref)) : uriref;
return super.normalizeURI(resolved);
}","@Override
protected String normalizeURI(String uriref) {
ConfigurationInterpolator configurationinterpolatorVar1 = configurationinterpolatorLiteral2;
String stringVar3 = stringLiteral4;
return super.normalizeURI(stringVar3);
}"
8028,DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,configuration,5239,"List<ConfigurationNode> lst = namedNodes.remove(name);
","public boolean removeNodes(String name) {
if (nodes != null && name != null) {
List<ConfigurationNode> lst = namedNodes.remove(name);
if (lst != null) {
detachNodes(lst);
nodes.removeAll(lst);
return true;
}
}
return false;
}","public boolean removeNodes(String name) {
if (nodes != null && name != null) {
List<ConfigurationNode> list<configurationnode>Var1 = list<configurationnode>Literal2;
if (list<configurationnode>Var1 != null) {
detachNodes(list<configurationnode>Var1);
nodes.removeAll(list<configurationnode>Var1);
return true;
}
}
return false;
}"
8049,I18N,DM_DEFAULT_ENCODING,FP,configuration,5260,"writer = new OutputStreamWriter(out);
","public void save(OutputStream out, String encoding) throws ConfigurationException {
Writer writer = null;
if (encoding != null) {
try {
writer = new OutputStreamWriter(out, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (writer == null) {
writer = new OutputStreamWriter(out);
}
save(writer);
}","public void save(OutputStream out, String encoding) throws ConfigurationException {
Writer writerVar1 = writerLiteral2;
if (encoding != null) {
try {
writerVar1 = new OutputStreamWriter(out, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (writerVar1 == null) {
writerVar1 = new OutputStreamWriter(out);
}
save(writerVar1);
}"
8050,I18N,DM_DEFAULT_ENCODING,FP,configuration,5261,"reader = new InputStreamReader(in);
","public void load(InputStream in, String encoding) throws ConfigurationException {
Reader reader = null;
if (encoding != null) {
try {
reader = new InputStreamReader(in, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (reader == null) {
reader = new InputStreamReader(in);
}
load(reader);
}","public void load(InputStream in, String encoding) throws ConfigurationException {
Reader readerVar1 = readerLiteral2;
if (encoding != null) {
try {
readerVar1 = new InputStreamReader(in, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (readerVar1 == null) {
readerVar1 = new InputStreamReader(in);
}
load(readerVar1);
}"
8061,BAD_PRACTICE,SE_BAD_FIELD,FP,configuration,5272,protected Configuration configuration;,protected Configuration configuration;,protected Configuration configurationVar1;
8067,SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,configuration,5278,"pstmt = conn.prepareStatement(query.toString());
","protected void addPropertyDirect(String key, Object obj) {
StringBuffer query = new StringBuffer(""INSERT INTO "" + table);
if (nameColumn != null) {
query.append("" ("" + nameColumn + "", "" + keyColumn + "", "" + valueColumn + "") VALUES (?, ?, ?)"");
} else {
query.append("" ("" + keyColumn + "", "" + valueColumn + "") VALUES (?, ?)"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
int index = 1;
if (nameColumn != null) {
pstmt.setString(index++, name);
}
pstmt.setString(index++, key);
pstmt.setString(index++, String.valueOf(obj));
pstmt.executeUpdate();
} catch (SQLException e) {
fireError(EVENT_ADD_PROPERTY, key, obj, e);
} finally {
close(conn, pstmt);
}
}","protected void addPropertyDirect(String key, Object obj) {
StringBuffer stringbufferVar1 = stringbufferLiteral2;
if (nameColumn != null) {
stringbufferVar1.append("" ("" + nameColumn + "", "" + keyColumn + "", "" + valueColumn + "") VALUES (?, ?, ?)"");
} else {
stringbufferVar1.append("" ("" + keyColumn + "", "" + valueColumn + "") VALUES (?, ?)"");
}
Connection connectionVar3 = connectionLiteral4;
PreparedStatement preparedstatementVar5 = connectionLiteral4;
try {
connectionVar3 = getConnection();
preparedstatementVar5 = connectionVar3.prepareStatement(stringbufferVar1.toString());
int intVar6 = intLiteral7;
if (nameColumn != null) {
preparedstatementVar5.setString(intVar6++, name);
}
preparedstatementVar5.setString(intVar6++, key);
preparedstatementVar5.setString(intVar6++, String.valueOf(obj));
preparedstatementVar5.executeUpdate();
} catch (SQLException e) {
fireError(EVENT_ADD_PROPERTY, key, obj, e);
} finally {
close(connectionVar3, preparedstatementVar5);
}
}"
8090,DODGY_CODE,REC_CATCH_EXCEPTION,FP,configuration,5301,"catch (Exception e)
","static Object toInternetAddress(Object value) throws ConversionException {
if (value.getClass().getName().equals(INTERNET_ADDRESS_CLASSNAME)) {
return value;
} else if (value instanceof String) {
try {
Constructor ctor = Class.forName(INTERNET_ADDRESS_CLASSNAME).getConstructor(new Class[] { String.class });
return ctor.newInstance(new Object[] { value });
} catch (Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"", e);
}
} else {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"");
}
}","static Object toInternetAddress(Object value) throws ConversionException {
if (value.getClass().getName().equals(INTERNET_ADDRESS_CLASSNAME)) {
return value;
} else if (value instanceof String) {
try {
Constructor constructorVar1 = constructorLiteral2;
return constructorVar1.newInstance(new Object[] { value });
} catch (Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"", e);
}
} else {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"");
}
}"
8091,DODGY_CODE,REC_CATCH_EXCEPTION,FP,configuration,5302,"catch (Exception e)
","static boolean isEnum(Class cls) {
if (!SystemUtils.isJavaVersionAtLeast(JAVA_VERSION_1_5)) {
return false;
}
try {
Method isEnumMethod = Class.class.getMethod(""isEnum"", new Class[] {});
return ((Boolean) isEnumMethod.invoke(cls, new Object[] {})).booleanValue();
} catch (Exception e) {
throw new RuntimeException(e.getMessage());
}
}","static boolean isEnum(Class cls) {
if (!SystemUtils.isJavaVersionAtLeast(JAVA_VERSION_1_5)) {
return false;
}
try {
Method methodVar1 = methodLiteral2;
return ((Boolean) methodVar1.invoke(cls, new Object[] {})).booleanValue();
} catch (Exception e) {
throw new RuntimeException(e.getMessage());
}
}"
8102,PERFORMANCE,SBSC_USE_STRINGBUFFER_CONCATENATION,FP,configuration,5313,"expected += tokenImage[expectedTokenSequences[i][j]] + "" "";
","public String getMessage() {
if (!specialConstructor) {
return super.getMessage();
}
String expected = """";
int maxSize = 0;
for (int i = 0; i < expectedTokenSequences.length; i++) {
if (maxSize < expectedTokenSequences[i].length) {
maxSize = expectedTokenSequences[i].length;
}
for (int j = 0; j < expectedTokenSequences[i].length; j++) {
expected += tokenImage[expectedTokenSequences[i][j]] + "" "";
}
if (expectedTokenSequences[i][expectedTokenSequences[i].length - 1] != 0) {
expected += ""..."";
}
expected += eol + ""    "";
}
String retval = ""Encountered \"""";
Token tok = currentToken.next;
for (int i = 0; i < maxSize; i++) {
if (i != 0)
retval += "" "";
if (tok.kind == 0) {
retval += tokenImage[0];
break;
}
retval += add_escapes(tok.image);
tok = tok.next;
}
retval += ""\"" at line "" + currentToken.next.beginLine + "", column "" + currentToken.next.beginColumn;
retval += ""."" + eol;
if (expectedTokenSequences.length == 1) {
retval += ""Was expecting:"" + eol + ""    "";
} else {
retval += ""Was expecting one of:"" + eol + ""    "";
}
retval += expected;
return retval;
}","public String getMessage() {
if (!specialConstructor) {
return super.getMessage();
}
String stringVar1 = stringLiteral2;
int intVar3 = intLiteral4;
for (int intVar11 = intLiteral12; intVar5 < intLiteral1; intVar5++) {
if (intVar3 < expectedTokenSequences[intVar5].length) {
intVar3 = expectedTokenSequences[intVar5].length;
}
for (int intVar13 = intLiteral12; intVar6 < intLiteral2; intVar6++) {
stringVar1 += tokenImage[expectedTokenSequences[intVar5][intVar6]] + "" "";
}
if (expectedTokenSequences[intVar5][expectedTokenSequences[intVar5].length - 1] != 0) {
stringVar1 += ""..."";
}
stringVar1 += eol + ""    "";
}
String stringVar7 = stringLiteral8;
Token tokenVar9 = tokenLiteral10;
for (int intVar11 = intLiteral12; intVar5 < intLiteral3; intVar5++) {
if (intVar5 != 0)
stringVar7 += "" "";
if (tokenVar9.kind == 0) {
stringVar7 += tokenImage[0];
break;
}
stringVar7 += add_escapes(tokenVar9.image);
tokenVar9 = tokenVar9.next;
}
stringVar7 += ""\"" at line "" + currentToken.next.beginLine + "", column "" + currentToken.next.beginColumn;
stringVar7 += ""."" + eol;
if (expectedTokenSequences.length == 1) {
stringVar7 += ""Was expecting:"" + eol + ""    "";
} else {
stringVar7 += ""Was expecting one of:"" + eol + ""    "";
}
stringVar7 += stringVar1;
return stringVar7;
}"
8109,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,configuration,5320,"String key = null;
Object value = null;
Node node = new Node();
key = String();
node.setName(key);
jj_consume_token(EQUAL);
value = Element();
node.setValue(value);
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
case DICT_SEPARATOR:
jj_consume_token(DICT_SEPARATOR);
break;
default:
jj_la1[1] = jj_gen;
;
}
{if (true) return node;}
","final public Node Property() throws ParseException {
String key = null;
Object value = null;
Node node = new Node();
key = String();
node.setName(key);
jj_consume_token(EQUAL);
value = Element();
node.setValue(value);
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case DICT_SEPARATOR:
jj_consume_token(DICT_SEPARATOR);
break;
default:
jj_la1[1] = jj_gen;
;
}
{
if (true)
return node;
}
throw new Error(""Missing return statement in function"");
}","final public Node Property() throws ParseException {
String stringVar1 = stringLiteral2;
Object objectVar3 = stringLiteral2;
Node nodeVar4 = nodeLiteral5;
stringVar1 = String();
nodeVar4.setName(stringVar1);
jj_consume_token(EQUAL);
objectVar3 = Element();
nodeVar4.setValue(objectVar3);
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case DICT_SEPARATOR:
jj_consume_token(DICT_SEPARATOR);
break;
default:
jj_la1[1] = jj_gen;
;
}
{
if (true)
return nodeVar4;
}
throw new Error(""Missing return statement in function"");
}"
8115,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,configuration,5326,"token_source = tm;
token = new Token();
jj_ntk = -1;
jj_gen = 0;
for (int i = 0; i < 6; i++) jj_la1[i] = -1;
for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
}
","public void ReInit(PropertyListParserTokenManager tm) {
token_source = tm;
token = new Token();
jj_ntk = -1;
jj_gen = 0;
for (int i = 0; i < 6; i++) jj_la1[i] = -1;
for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
}","public void ReInit(PropertyListParserTokenManager tm) {
token_source = tm;
token = new Token();
jj_ntk = -1;
jj_gen = 0;
for (int intVar3 = intLiteral4; intVar1 < intLiteral1; intVar1++) jj_la1[intVar1] = -1;
for (int intVar3 = intLiteral4; intVar1 < intLiteral2; intVar1++) jj_2_rtns[intVar1] = new JJCalls();
}"
8117,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,configuration,5328,"jjround = 0x80000001;
for (i = 14; i-- > 0;)
{
jjrounds[i] = 0x80000000;
}
}
","private final void ReInitRounds() {
int i;
jjround = 0x80000001;
for (i = 14; i-- > 0; ) {
jjrounds[i] = 0x80000000;
}
}","private final void ReInitRounds() {
int intVar1;
jjround = 0x80000001;
for (intVar1 = 14; intVar1-- > intLiteral1; ) {
jjrounds[intVar1] = 0x80000000;
}
}"
8124,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,configuration,5335,"if (maxNextCharInd == available)
{
if (available == bufsize)
{
if (tokenBegin > 2048)
{
bufpos = maxNextCharInd = 0;
available = tokenBegin;
}
else if (tokenBegin < 0)
bufpos = maxNextCharInd = 0;
else
ExpandBuff(false);
}
else if (available > tokenBegin)
available = bufsize;
else if ((tokenBegin - available) < 2048)
ExpandBuff(true);
else
available = tokenBegin;
}
int i;
try {
if ((i = inputStream.read(buffer, maxNextCharInd,
available - maxNextCharInd)) == -1)
{
inputStream.close();
throw new java.io.IOException();
}
else
maxNextCharInd += i;
return;
}
catch(java.io.IOException e) {
--bufpos;
backup(0);
if (tokenBegin == -1)
tokenBegin = bufpos;
throw e;
","protected void FillBuff() throws java.io.IOException {
if (maxNextCharInd == available) {
if (available == bufsize) {
if (tokenBegin > 2048) {
bufpos = maxNextCharInd = 0;
available = tokenBegin;
} else if (tokenBegin < 0)
bufpos = maxNextCharInd = 0;
else
ExpandBuff(false);
} else if (available > tokenBegin)
available = bufsize;
else if ((tokenBegin - available) < 2048)
ExpandBuff(true);
else
available = tokenBegin;
}
int i;
try {
if ((i = inputStream.read(buffer, maxNextCharInd, available - maxNextCharInd)) == -1) {
inputStream.close();
throw new java.io.IOException();
} else
maxNextCharInd += i;
return;
} catch (java.io.IOException e) {
--bufpos;
backup(0);
if (tokenBegin == -1)
tokenBegin = bufpos;
throw e;
}
}","protected void FillBuff() throws java.io.IOException {
if (maxNextCharInd == available) {
if (available == bufsize) {
if (tokenBegin > 2048) {
bufpos = maxNextCharInd = 0;
available = tokenBegin;
} else if (tokenBegin < 0)
bufpos = maxNextCharInd = 0;
else
ExpandBuff(false);
} else if (available > tokenBegin)
available = bufsize;
else if ((tokenBegin - available) < 2048)
ExpandBuff(true);
else
available = tokenBegin;
}
int intVar1;
try {
if ((intVar1 = inputStream.read(buffer, maxNextCharInd, available - maxNextCharInd)) == -1) {
inputStream.close();
throw new java.io.IOException();
} else
maxNextCharInd += intVar1;
return;
} catch (java.io.IOException e) {
--bufpos;
backup(0);
if (tokenBegin == -1)
tokenBegin = bufpos;
throw e;
}
}"
8128,I18N,DM_DEFAULT_ENCODING,FP,configuration,5339,"this(new java.io.InputStreamReader(dstream), startline, startcolumn, 4096);
","public SimpleCharStream(java.io.InputStream dstream, int startline, int startcolumn, int buffersize) {
this(new java.io.InputStreamReader(dstream), startline, startcolumn, 4096);
}","public SimpleCharStream(java.io.InputStream dstream, int startline, int startcolumn, int buffersize) {
this(new java.io.InputStreamReader(dstream), startline, startcolumn, 4096);
}"
8130,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,configuration,5341,"char[] newbuffer = new char[bufsize + 2048];
int newbufline[] = new int[bufsize + 2048];
int newbufcolumn[] = new int[bufsize + 2048];
try
{
if (wrapAround)
{
System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
System.arraycopy(buffer, 0, newbuffer,
bufsize - tokenBegin, bufpos);
buffer = newbuffer;
System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
System.arraycopy(bufline, 0, newbufline, bufsize - tokenBegin, bufpos);
bufline = newbufline;
System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
System.arraycopy(bufcolumn, 0, newbufcolumn, bufsize - tokenBegin, bufpos);
bufcolumn = newbufcolumn;
maxNextCharInd = (bufpos += (bufsize - tokenBegin));
}
else
{
System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
buffer = newbuffer;
System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
bufline = newbufline;
System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
bufcolumn = newbufcolumn;
maxNextCharInd = (bufpos -= tokenBegin);
}
}
catch (Throwable t)
{
throw new Error(t.getMessage());
}
bufsize += 2048;
available = bufsize;
tokenBegin = 0;
}
","protected void ExpandBuff(boolean wrapAround) {
char[] newbuffer = new char[bufsize + 2048];
int[] newbufline = new int[bufsize + 2048];
int[] newbufcolumn = new int[bufsize + 2048];
try {
if (wrapAround) {
System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
System.arraycopy(buffer, 0, newbuffer, bufsize - tokenBegin, bufpos);
buffer = newbuffer;
System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
System.arraycopy(bufline, 0, newbufline, bufsize - tokenBegin, bufpos);
bufline = newbufline;
System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
System.arraycopy(bufcolumn, 0, newbufcolumn, bufsize - tokenBegin, bufpos);
bufcolumn = newbufcolumn;
maxNextCharInd = (bufpos += (bufsize - tokenBegin));
} else {
System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
buffer = newbuffer;
System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
bufline = newbufline;
System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
bufcolumn = newbufcolumn;
maxNextCharInd = (bufpos -= tokenBegin);
}
} catch (Throwable t) {
throw new Error(t.getMessage());
}
bufsize += 2048;
available = bufsize;
tokenBegin = 0;
}","protected void ExpandBuff(boolean wrapAround) {
char[] charArrayVar1 = charArrayLiteral2;
int[] intArrayVar3 = intArrayLiteral4;
int[] intArrayVar5 = intArrayLiteral4;
try {
if (wrapAround) {
System.arraycopy(buffer, tokenBegin, charArrayVar1, 0, bufsize - tokenBegin);
System.arraycopy(buffer, 0, charArrayVar1, bufsize - tokenBegin, bufpos);
buffer = charArrayVar1;
System.arraycopy(bufline, tokenBegin, intArrayVar3, 0, bufsize - tokenBegin);
System.arraycopy(bufline, 0, intArrayVar3, bufsize - tokenBegin, bufpos);
bufline = intArrayVar3;
System.arraycopy(bufcolumn, tokenBegin, intArrayVar5, 0, bufsize - tokenBegin);
System.arraycopy(bufcolumn, 0, intArrayVar5, bufsize - tokenBegin, bufpos);
bufcolumn = intArrayVar5;
maxNextCharInd = (bufpos += (bufsize - tokenBegin));
} else {
System.arraycopy(buffer, tokenBegin, charArrayVar1, 0, bufsize - tokenBegin);
buffer = charArrayVar1;
System.arraycopy(bufline, tokenBegin, intArrayVar3, 0, bufsize - tokenBegin);
bufline = intArrayVar3;
System.arraycopy(bufcolumn, tokenBegin, intArrayVar5, 0, bufsize - tokenBegin);
bufcolumn = intArrayVar5;
maxNextCharInd = (bufpos -= tokenBegin);
}
} catch (Throwable t) {
throw new Error(t.getMessage());
}
bufsize += 2048;
available = bufsize;
tokenBegin = 0;
}"
8134,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,configuration,5345,"column++;
if (prevCharIsLF)
{
prevCharIsLF = false;
line += (column = 1);
}
else if (prevCharIsCR)
{
prevCharIsCR = false;
if (c == '\n')
{
prevCharIsLF = true;
}
else
line += (column = 1);
}
switch (c)
{
case '\r' :
prevCharIsCR = true;
break;
case '\n' :
prevCharIsLF = true;
break;
case '\t' :
column--;
column += (8 - (column & 07));
break;
default :
break;
}
bufline[bufpos] = line;
bufcolumn[bufpos] = column;
}
","protected void UpdateLineColumn(char c) {
column++;
if (prevCharIsLF) {
prevCharIsLF = false;
line += (column = 1);
} else if (prevCharIsCR) {
prevCharIsCR = false;
if (c == '\n') {
prevCharIsLF = true;
} else
line += (column = 1);
}
switch(c) {
case '\r':
prevCharIsCR = true;
break;
case '\n':
prevCharIsLF = true;
break;
case '\t':
column--;
column += (8 - (column & 07));
break;
default:
break;
}
bufline[bufpos] = line;
bufcolumn[bufpos] = column;
}","protected void UpdateLineColumn(char c) {
column++;
if (prevCharIsLF) {
prevCharIsLF = false;
line += (column = 1);
} else if (prevCharIsCR) {
prevCharIsCR = false;
if (c == '\n') {
prevCharIsLF = true;
} else
line += (column = 1);
}
switch(c) {
case '\r':
prevCharIsCR = true;
break;
case '\n':
prevCharIsLF = true;
break;
case '\t':
column--;
column += (8 - (column & 07));
break;
default:
break;
}
bufline[bufpos] = line;
bufcolumn[bufpos] = column;
}"
8139,DODGY_CODE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,FP,configuration,5350,"public int beginLine, beginColumn, endLine, endColumn;","public int beginLine, beginColumn, endLine, endColumn;","public int intVar1, intVar2, intVar3, intVar4;"
8149,DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,configuration,5360,"List lst = (List) namedNodes.get(node.getName());
","public boolean removeNode(ConfigurationNode node) {
if (nodes != null && node != null && nodes.contains(node)) {
detachNode(node);
nodes.remove(node);
List lst = (List) namedNodes.get(node.getName());
if (lst != null) {
lst.remove(node);
if (lst.isEmpty()) {
namedNodes.remove(node.getName());
}
}
return true;
} else {
return false;
}
}","public boolean removeNode(ConfigurationNode node) {
if (nodes != null && node != null && nodes.contains(node)) {
detachNode(node);
nodes.remove(node);
List listVar1 = listLiteral2;
if (listVar1 != null) {
listVar1.remove(node);
if (listVar1.isEmpty()) {
namedNodes.remove(node.getName());
}
}
return true;
} else {
return false;
}
}"
8179,PERFORMANCE,DM_NUMBER_CTOR,FP,configuration,5390,"return getShort(key, new Short(defaultValue)).shortValue();
","public short getShort(String key, short defaultValue) {
return getShort(key, new Short(defaultValue)).shortValue();
}","public short getShort(String key, short defaultValue) {
return getShort(key, new Short(defaultValue)).shortValue();
}"
8186,PERFORMANCE,DM_FP_NUMBER_CTOR,FP,configuration,5397,"value = array.length == 0 ? null : new Double(array[0]);
","protected Object resolveContainerStore(String key) {
Object value = getProperty(key);
if (value != null) {
if (value instanceof List) {
List list = (List) value;
value = list.isEmpty() ? null : list.get(0);
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
value = array.length == 0 ? null : array[0];
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
value = array.length == 0 ? null : array[0] ? Boolean.TRUE : Boolean.FALSE;
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
value = array.length == 0 ? null : new Byte(array[0]);
} else if (value instanceof short[]) {
short[] array = (short[]) value;
value = array.length == 0 ? null : new Short(array[0]);
} else if (value instanceof int[]) {
int[] array = (int[]) value;
value = array.length == 0 ? null : new Integer(array[0]);
} else if (value instanceof long[]) {
long[] array = (long[]) value;
value = array.length == 0 ? null : new Long(array[0]);
} else if (value instanceof float[]) {
float[] array = (float[]) value;
value = array.length == 0 ? null : new Float(array[0]);
} else if (value instanceof double[]) {
double[] array = (double[]) value;
value = array.length == 0 ? null : new Double(array[0]);
}
}
return value;
}","protected Object resolveContainerStore(String key) {
Object objectVar1 = objectLiteral2;
if (objectVar1 != null) {
if (objectVar1 instanceof List) {
List listVar3 = listLiteral4;
objectVar1 = listVar3.isEmpty() ? null : listVar3.get(0);
} else if (objectVar1 instanceof Object[]) {
Object[] objectArrayVar5 = objectArrayLiteral6;
objectVar1 = objectArrayVar5.length == 0 ? null : objectArrayVar5[0];
} else if (objectVar1 instanceof boolean[]) {
boolean[] objectArrayVar5 = booleanArrayLiteral7;
objectVar1 = objectArrayVar5.length == 0 ? null : objectArrayVar5[0] ? Boolean.TRUE : Boolean.FALSE;
} else if (objectVar1 instanceof byte[]) {
byte[] objectArrayVar5 = byteArrayLiteral8;
objectVar1 = objectArrayVar5.length == 0 ? null : new Byte(objectArrayVar5[0]);
} else if (objectVar1 instanceof short[]) {
short[] objectArrayVar5 = shortArrayLiteral9;
objectVar1 = objectArrayVar5.length == 0 ? null : new Short(objectArrayVar5[0]);
} else if (objectVar1 instanceof int[]) {
int[] objectArrayVar5 = intArrayLiteral10;
objectVar1 = objectArrayVar5.length == 0 ? null : new Integer(objectArrayVar5[0]);
} else if (objectVar1 instanceof long[]) {
long[] objectArrayVar5 = longArrayLiteral11;
objectVar1 = objectArrayVar5.length == 0 ? null : new Long(objectArrayVar5[0]);
} else if (objectVar1 instanceof float[]) {
float[] objectArrayVar5 = floatArrayLiteral12;
objectVar1 = objectArrayVar5.length == 0 ? null : new Float(objectArrayVar5[0]);
} else if (objectVar1 instanceof double[]) {
double[] objectArrayVar5 = doubleArrayLiteral13;
objectVar1 = objectArrayVar5.length == 0 ? null : new Double(objectArrayVar5[0]);
}
}
return objectVar1;
}"
8190,I18N,DM_DEFAULT_ENCODING,FP,configuration,5401,"writer = new OutputStreamWriter(out);
","public void save(OutputStream out, String encoding) throws ConfigurationException {
Writer writer = null;
if (encoding != null) {
try {
writer = new OutputStreamWriter(out, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (writer == null) {
writer = new OutputStreamWriter(out);
}
save(writer);
}","public void save(OutputStream out, String encoding) throws ConfigurationException {
Writer writerVar1 = writerLiteral2;
if (encoding != null) {
try {
writerVar1 = new OutputStreamWriter(out, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (writerVar1 == null) {
writerVar1 = new OutputStreamWriter(out);
}
save(writerVar1);
}"
8191,BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,configuration,5402,"parent.mkdirs();
","private void createPath(File file) {
if (file != null) {
if (!file.exists()) {
File parent = file.getParentFile();
if (parent != null && !parent.exists()) {
parent.mkdirs();
}
}
}
}","private void createPath(File file) {
if (file != null) {
if (!file.exists()) {
File fileVar1 = fileLiteral2;
if (fileVar1 != null && !fileVar1.exists()) {
fileVar1.mkdirs();
}
}
}
}"
8195,BAD_PRACTICE,SE_BAD_FIELD,FP,configuration,5406,private ConfigurationNode combinedRoot;,private ConfigurationNode combinedRoot;,private ConfigurationNode configurationnodeVar1;
8203,EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,FP,configuration,5414,"ResultSet rs = pstmt.executeQuery();
","public boolean containsKey(String key) {
boolean found = false;
StringBuffer query = new StringBuffer(""SELECT * FROM "" + table + "" WHERE "" + keyColumn + ""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
ResultSet rs = pstmt.executeQuery();
found = rs.next();
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
closeQuietly(conn, pstmt);
}
return found;
}","public boolean containsKey(String key) {
boolean booleanVar1 = booleanLiteral2;
StringBuffer stringbufferVar3 = stringbufferLiteral4;
if (nameColumn != null) {
stringbufferVar3.append("" AND "" + nameColumn + ""=?"");
}
Connection connectionVar5 = connectionLiteral6;
PreparedStatement preparedstatementVar7 = connectionLiteral6;
try {
connectionVar5 = getConnection();
preparedstatementVar7 = connectionVar5.prepareStatement(stringbufferVar3.toString());
preparedstatementVar7.setString(1, key);
if (nameColumn != null) {
preparedstatementVar7.setString(2, name);
}
ResultSet resultsetVar8 = resultsetLiteral9;
booleanVar1 = resultsetVar8.next();
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
closeQuietly(connectionVar5, preparedstatementVar7);
}
return booleanVar1;
}"
8213,SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,configuration,5424,"pstmt = conn.prepareStatement(query.toString());
","protected void addPropertyDirect(String key, Object obj) {
StringBuffer query = new StringBuffer(""INSERT INTO "" + table);
if (nameColumn != null) {
query.append("" ("" + nameColumn + "", "" + keyColumn + "", "" + valueColumn + "") VALUES (?, ?, ?)"");
} else {
query.append("" ("" + keyColumn + "", "" + valueColumn + "") VALUES (?, ?)"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
int index = 1;
if (nameColumn != null) {
pstmt.setString(index++, name);
}
pstmt.setString(index++, key);
pstmt.setString(index++, String.valueOf(obj));
pstmt.executeUpdate();
} catch (SQLException e) {
fireError(EVENT_ADD_PROPERTY, key, obj, e);
} finally {
closeQuietly(conn, pstmt);
}
}","protected void addPropertyDirect(String key, Object obj) {
StringBuffer stringbufferVar1 = stringbufferLiteral2;
if (nameColumn != null) {
stringbufferVar1.append("" ("" + nameColumn + "", "" + keyColumn + "", "" + valueColumn + "") VALUES (?, ?, ?)"");
} else {
stringbufferVar1.append("" ("" + keyColumn + "", "" + valueColumn + "") VALUES (?, ?)"");
}
Connection connectionVar3 = connectionLiteral4;
PreparedStatement preparedstatementVar5 = connectionLiteral4;
try {
connectionVar3 = getConnection();
preparedstatementVar5 = connectionVar3.prepareStatement(stringbufferVar1.toString());
int intVar6 = intLiteral7;
if (nameColumn != null) {
preparedstatementVar5.setString(intVar6++, name);
}
preparedstatementVar5.setString(intVar6++, key);
preparedstatementVar5.setString(intVar6++, String.valueOf(obj));
preparedstatementVar5.executeUpdate();
} catch (SQLException e) {
fireError(EVENT_ADD_PROPERTY, key, obj, e);
} finally {
closeQuietly(connectionVar3, preparedstatementVar5);
}
}"
8226,PERFORMANCE,DM_FP_NUMBER_CTOR,FP,configuration,5437,"return new Float(n.floatValue());
","public static Float toFloat(Object value) throws ConversionException {
Number n = toNumber(value, Float.class);
if (n instanceof Float) {
return (Float) n;
} else {
return new Float(n.floatValue());
}
}","public static Float toFloat(Object value) throws ConversionException {
Number numberVar1 = numberLiteral2;
if (numberVar1 instanceof Float) {
return (Float) numberVar1;
} else {
return new Float(numberVar1.floatValue());
}
}"
8236,PERFORMANCE,DM_NUMBER_CTOR,FP,configuration,5447,"getConfiguration().addProperty(name, new Long(array[i]));
","public void set(String name, Object value) {
if (log.isTraceEnabled()) {
log.trace(""set("" + name + "","" + value + "")"");
}
if (value == null) {
throw new NullPointerException(""Error trying to set property to null."");
}
if (value instanceof List) {
List list = (List) value;
Iterator iterator = list.iterator();
while (iterator.hasNext()) {
getConfiguration().addProperty(name, iterator.next());
}
} else if (value instanceof int[]) {
int[] array = (int[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Integer(array[i]));
}
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, BooleanUtils.toBooleanObject(array[i]));
}
} else if (value instanceof char[]) {
char[] array = (char[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Character(array[i]));
}
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Byte(array[i]));
}
} else if (value instanceof short[]) {
short[] array = (short[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Short(array[i]));
}
} else if (value instanceof long[]) {
long[] array = (long[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Long(array[i]));
}
} else if (value instanceof float[]) {
float[] array = (float[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Float(array[i]));
}
} else if (value instanceof double[]) {
double[] array = (double[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Double(array[i]));
}
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, array[i]);
}
} else {
getConfiguration().setProperty(name, value);
}
}","public void set(String name, Object value) {
if (log.isTraceEnabled()) {
log.trace(""set("" + name + "","" + value + "")"");
}
if (value == null) {
throw new NullPointerException(""Error trying to set property to null."");
}
if (value instanceof List) {
List listVar1 = listLiteral2;
Iterator iteratorVar3 = iteratorLiteral4;
while (iteratorVar3.hasNext()) {
getConfiguration().addProperty(name, iteratorVar3.next());
}
} else if (value instanceof int[]) {
int[] intArrayVar5 = intArrayLiteral6;
for (int intVar17 = intLiteral18; intVar7 < intLiteral1; intVar7++) {
getConfiguration().addProperty(name, new Integer(intArrayVar5[intVar7]));
}
} else if (value instanceof boolean[]) {
boolean[] intArrayVar5 = booleanArrayLiteral9;
for (int intVar17 = intLiteral18; intVar7 < intArrayVar5.length; intVar7++) {
getConfiguration().addProperty(name, BooleanUtils.toBooleanObject(intArrayVar5[intVar7]));
}
} else if (value instanceof char[]) {
char[] intArrayVar5 = charArrayLiteral10;
for (int intVar17 = intLiteral18; intVar7 < intArrayVar5.length; intVar7++) {
getConfiguration().addProperty(name, new Character(intArrayVar5[intVar7]));
}
} else if (value instanceof byte[]) {
byte[] intArrayVar5 = byteArrayLiteral11;
for (int intVar17 = intLiteral18; intVar7 < intArrayVar5.length; intVar7++) {
getConfiguration().addProperty(name, new Byte(intArrayVar5[intVar7]));
}
} else if (value instanceof short[]) {
short[] intArrayVar5 = shortArrayLiteral12;
for (int intVar17 = intLiteral18; intVar7 < intArrayVar5.length; intVar7++) {
getConfiguration().addProperty(name, new Short(intArrayVar5[intVar7]));
}
} else if (value instanceof long[]) {
long[] intArrayVar5 = longArrayLiteral13;
for (int intVar17 = intLiteral18; intVar7 < intArrayVar5.length; intVar7++) {
getConfiguration().addProperty(name, new Long(intArrayVar5[intVar7]));
}
} else if (value instanceof float[]) {
float[] intArrayVar5 = floatArrayLiteral14;
for (int intVar17 = intLiteral18; intVar7 < intArrayVar5.length; intVar7++) {
getConfiguration().addProperty(name, new Float(intArrayVar5[intVar7]));
}
} else if (value instanceof double[]) {
double[] intArrayVar5 = doubleArrayLiteral15;
for (int intVar17 = intLiteral18; intVar7 < intArrayVar5.length; intVar7++) {
getConfiguration().addProperty(name, new Double(intArrayVar5[intVar7]));
}
} else if (value instanceof Object[]) {
Object[] intArrayVar5 = objectArrayLiteral16;
for (int intVar17 = intLiteral18; intVar7 < intArrayVar5.length; intVar7++) {
getConfiguration().addProperty(name, intArrayVar5[intVar7]);
}
} else {
getConfiguration().setProperty(name, value);
}
}"
8238,PERFORMANCE,DM_NUMBER_CTOR,FP,configuration,5449,"getConfiguration().addProperty(name, new Short(array[i]));
","public void set(String name, Object value) {
if (log.isTraceEnabled()) {
log.trace(""set("" + name + "","" + value + "")"");
}
if (value == null) {
throw new NullPointerException(""Error trying to set property to null."");
}
if (value instanceof List) {
List list = (List) value;
Iterator iterator = list.iterator();
while (iterator.hasNext()) {
getConfiguration().addProperty(name, iterator.next());
}
} else if (value instanceof int[]) {
int[] array = (int[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Integer(array[i]));
}
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, BooleanUtils.toBooleanObject(array[i]));
}
} else if (value instanceof char[]) {
char[] array = (char[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Character(array[i]));
}
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Byte(array[i]));
}
} else if (value instanceof short[]) {
short[] array = (short[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Short(array[i]));
}
} else if (value instanceof long[]) {
long[] array = (long[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Long(array[i]));
}
} else if (value instanceof float[]) {
float[] array = (float[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Float(array[i]));
}
} else if (value instanceof double[]) {
double[] array = (double[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Double(array[i]));
}
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, array[i]);
}
} else {
getConfiguration().setProperty(name, value);
}
}","public void set(String name, Object value) {
if (log.isTraceEnabled()) {
log.trace(""set("" + name + "","" + value + "")"");
}
if (value == null) {
throw new NullPointerException(""Error trying to set property to null."");
}
if (value instanceof List) {
List listVar1 = listLiteral2;
Iterator iteratorVar3 = iteratorLiteral4;
while (iteratorVar3.hasNext()) {
getConfiguration().addProperty(name, iteratorVar3.next());
}
} else if (value instanceof int[]) {
int[] intArrayVar5 = intArrayLiteral6;
for (int intVar17 = intLiteral18; intVar7 < intLiteral1; intVar7++) {
getConfiguration().addProperty(name, new Integer(intArrayVar5[intVar7]));
}
} else if (value instanceof boolean[]) {
boolean[] intArrayVar5 = booleanArrayLiteral9;
for (int intVar17 = intLiteral18; intVar7 < intArrayVar5.length; intVar7++) {
getConfiguration().addProperty(name, BooleanUtils.toBooleanObject(intArrayVar5[intVar7]));
}
} else if (value instanceof char[]) {
char[] intArrayVar5 = charArrayLiteral10;
for (int intVar17 = intLiteral18; intVar7 < intArrayVar5.length; intVar7++) {
getConfiguration().addProperty(name, new Character(intArrayVar5[intVar7]));
}
} else if (value instanceof byte[]) {
byte[] intArrayVar5 = byteArrayLiteral11;
for (int intVar17 = intLiteral18; intVar7 < intArrayVar5.length; intVar7++) {
getConfiguration().addProperty(name, new Byte(intArrayVar5[intVar7]));
}
} else if (value instanceof short[]) {
short[] intArrayVar5 = shortArrayLiteral12;
for (int intVar17 = intLiteral18; intVar7 < intArrayVar5.length; intVar7++) {
getConfiguration().addProperty(name, new Short(intArrayVar5[intVar7]));
}
} else if (value instanceof long[]) {
long[] intArrayVar5 = longArrayLiteral13;
for (int intVar17 = intLiteral18; intVar7 < intArrayVar5.length; intVar7++) {
getConfiguration().addProperty(name, new Long(intArrayVar5[intVar7]));
}
} else if (value instanceof float[]) {
float[] intArrayVar5 = floatArrayLiteral14;
for (int intVar17 = intLiteral18; intVar7 < intArrayVar5.length; intVar7++) {
getConfiguration().addProperty(name, new Float(intArrayVar5[intVar7]));
}
} else if (value instanceof double[]) {
double[] intArrayVar5 = doubleArrayLiteral15;
for (int intVar17 = intLiteral18; intVar7 < intArrayVar5.length; intVar7++) {
getConfiguration().addProperty(name, new Double(intArrayVar5[intVar7]));
}
} else if (value instanceof Object[]) {
Object[] intArrayVar5 = objectArrayLiteral16;
for (int intVar17 = intLiteral18; intVar7 < intArrayVar5.length; intVar7++) {
getConfiguration().addProperty(name, intArrayVar5[intVar7]);
}
} else {
getConfiguration().setProperty(name, value);
}
}"
8239,PERFORMANCE,DM_FP_NUMBER_CTOR,FP,configuration,5450,"getConfiguration().addProperty(name, new Float(array[i]));
","public void set(String name, Object value) {
if (log.isTraceEnabled()) {
log.trace(""set("" + name + "","" + value + "")"");
}
if (value == null) {
throw new NullPointerException(""Error trying to set property to null."");
}
if (value instanceof List) {
List list = (List) value;
Iterator iterator = list.iterator();
while (iterator.hasNext()) {
getConfiguration().addProperty(name, iterator.next());
}
} else if (value instanceof int[]) {
int[] array = (int[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Integer(array[i]));
}
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, BooleanUtils.toBooleanObject(array[i]));
}
} else if (value instanceof char[]) {
char[] array = (char[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Character(array[i]));
}
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Byte(array[i]));
}
} else if (value instanceof short[]) {
short[] array = (short[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Short(array[i]));
}
} else if (value instanceof long[]) {
long[] array = (long[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Long(array[i]));
}
} else if (value instanceof float[]) {
float[] array = (float[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Float(array[i]));
}
} else if (value instanceof double[]) {
double[] array = (double[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Double(array[i]));
}
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, array[i]);
}
} else {
getConfiguration().setProperty(name, value);
}
}","public void set(String name, Object value) {
if (log.isTraceEnabled()) {
log.trace(""set("" + name + "","" + value + "")"");
}
if (value == null) {
throw new NullPointerException(""Error trying to set property to null."");
}
if (value instanceof List) {
List listVar1 = listLiteral2;
Iterator iteratorVar3 = iteratorLiteral4;
while (iteratorVar3.hasNext()) {
getConfiguration().addProperty(name, iteratorVar3.next());
}
} else if (value instanceof int[]) {
int[] intArrayVar5 = intArrayLiteral6;
for (int intVar17 = intLiteral18; intVar7 < intLiteral1; intVar7++) {
getConfiguration().addProperty(name, new Integer(intArrayVar5[intVar7]));
}
} else if (value instanceof boolean[]) {
boolean[] intArrayVar5 = booleanArrayLiteral9;
for (int intVar17 = intLiteral18; intVar7 < intArrayVar5.length; intVar7++) {
getConfiguration().addProperty(name, BooleanUtils.toBooleanObject(intArrayVar5[intVar7]));
}
} else if (value instanceof char[]) {
char[] intArrayVar5 = charArrayLiteral10;
for (int intVar17 = intLiteral18; intVar7 < intArrayVar5.length; intVar7++) {
getConfiguration().addProperty(name, new Character(intArrayVar5[intVar7]));
}
} else if (value instanceof byte[]) {
byte[] intArrayVar5 = byteArrayLiteral11;
for (int intVar17 = intLiteral18; intVar7 < intArrayVar5.length; intVar7++) {
getConfiguration().addProperty(name, new Byte(intArrayVar5[intVar7]));
}
} else if (value instanceof short[]) {
short[] intArrayVar5 = shortArrayLiteral12;
for (int intVar17 = intLiteral18; intVar7 < intArrayVar5.length; intVar7++) {
getConfiguration().addProperty(name, new Short(intArrayVar5[intVar7]));
}
} else if (value instanceof long[]) {
long[] intArrayVar5 = longArrayLiteral13;
for (int intVar17 = intLiteral18; intVar7 < intArrayVar5.length; intVar7++) {
getConfiguration().addProperty(name, new Long(intArrayVar5[intVar7]));
}
} else if (value instanceof float[]) {
float[] intArrayVar5 = floatArrayLiteral14;
for (int intVar17 = intLiteral18; intVar7 < intArrayVar5.length; intVar7++) {
getConfiguration().addProperty(name, new Float(intArrayVar5[intVar7]));
}
} else if (value instanceof double[]) {
double[] intArrayVar5 = doubleArrayLiteral15;
for (int intVar17 = intLiteral18; intVar7 < intArrayVar5.length; intVar7++) {
getConfiguration().addProperty(name, new Double(intArrayVar5[intVar7]));
}
} else if (value instanceof Object[]) {
Object[] intArrayVar5 = objectArrayLiteral16;
for (int intVar17 = intLiteral18; intVar7 < intArrayVar5.length; intVar7++) {
getConfiguration().addProperty(name, intArrayVar5[intVar7]);
}
} else {
getConfiguration().setProperty(name, value);
}
}"
8240,PERFORMANCE,DM_FP_NUMBER_CTOR,FP,configuration,5451,"getConfiguration().addProperty(name, new Double(array[i]));
","public void set(String name, Object value) {
if (log.isTraceEnabled()) {
log.trace(""set("" + name + "","" + value + "")"");
}
if (value == null) {
throw new NullPointerException(""Error trying to set property to null."");
}
if (value instanceof List) {
List list = (List) value;
Iterator iterator = list.iterator();
while (iterator.hasNext()) {
getConfiguration().addProperty(name, iterator.next());
}
} else if (value instanceof int[]) {
int[] array = (int[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Integer(array[i]));
}
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, BooleanUtils.toBooleanObject(array[i]));
}
} else if (value instanceof char[]) {
char[] array = (char[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Character(array[i]));
}
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Byte(array[i]));
}
} else if (value instanceof short[]) {
short[] array = (short[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Short(array[i]));
}
} else if (value instanceof long[]) {
long[] array = (long[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Long(array[i]));
}
} else if (value instanceof float[]) {
float[] array = (float[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Float(array[i]));
}
} else if (value instanceof double[]) {
double[] array = (double[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Double(array[i]));
}
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, array[i]);
}
} else {
getConfiguration().setProperty(name, value);
}
}","public void set(String name, Object value) {
if (log.isTraceEnabled()) {
log.trace(""set("" + name + "","" + value + "")"");
}
if (value == null) {
throw new NullPointerException(""Error trying to set property to null."");
}
if (value instanceof List) {
List listVar1 = listLiteral2;
Iterator iteratorVar3 = iteratorLiteral4;
while (iteratorVar3.hasNext()) {
getConfiguration().addProperty(name, iteratorVar3.next());
}
} else if (value instanceof int[]) {
int[] intArrayVar5 = intArrayLiteral6;
for (int intVar17 = intLiteral18; intVar7 < intLiteral1; intVar7++) {
getConfiguration().addProperty(name, new Integer(intArrayVar5[intVar7]));
}
} else if (value instanceof boolean[]) {
boolean[] intArrayVar5 = booleanArrayLiteral9;
for (int intVar17 = intLiteral18; intVar7 < intArrayVar5.length; intVar7++) {
getConfiguration().addProperty(name, BooleanUtils.toBooleanObject(intArrayVar5[intVar7]));
}
} else if (value instanceof char[]) {
char[] intArrayVar5 = charArrayLiteral10;
for (int intVar17 = intLiteral18; intVar7 < intArrayVar5.length; intVar7++) {
getConfiguration().addProperty(name, new Character(intArrayVar5[intVar7]));
}
} else if (value instanceof byte[]) {
byte[] intArrayVar5 = byteArrayLiteral11;
for (int intVar17 = intLiteral18; intVar7 < intArrayVar5.length; intVar7++) {
getConfiguration().addProperty(name, new Byte(intArrayVar5[intVar7]));
}
} else if (value instanceof short[]) {
short[] intArrayVar5 = shortArrayLiteral12;
for (int intVar17 = intLiteral18; intVar7 < intArrayVar5.length; intVar7++) {
getConfiguration().addProperty(name, new Short(intArrayVar5[intVar7]));
}
} else if (value instanceof long[]) {
long[] intArrayVar5 = longArrayLiteral13;
for (int intVar17 = intLiteral18; intVar7 < intArrayVar5.length; intVar7++) {
getConfiguration().addProperty(name, new Long(intArrayVar5[intVar7]));
}
} else if (value instanceof float[]) {
float[] intArrayVar5 = floatArrayLiteral14;
for (int intVar17 = intLiteral18; intVar7 < intArrayVar5.length; intVar7++) {
getConfiguration().addProperty(name, new Float(intArrayVar5[intVar7]));
}
} else if (value instanceof double[]) {
double[] intArrayVar5 = doubleArrayLiteral15;
for (int intVar17 = intLiteral18; intVar7 < intArrayVar5.length; intVar7++) {
getConfiguration().addProperty(name, new Double(intArrayVar5[intVar7]));
}
} else if (value instanceof Object[]) {
Object[] intArrayVar5 = objectArrayLiteral16;
for (int intVar17 = intLiteral18; intVar7 < intArrayVar5.length; intVar7++) {
getConfiguration().addProperty(name, intArrayVar5[intVar7]);
}
} else {
getConfiguration().setProperty(name, value);
}
}"
8244,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,configuration,5455,"switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
{
case ARRAY_BEGIN:
return Array();
case DICT_BEGIN:
return Dictionary();
case STRING:
case QUOTED_STRING:
return String();
case DATA:
return Data();
default:
jj_la1[2] = jj_gen;
jj_consume_token(-1);
throw new ParseException();
","final public Object Element() throws ParseException {
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case ARRAY_BEGIN:
return Array();
case DICT_BEGIN:
return Dictionary();
case STRING:
case QUOTED_STRING:
return String();
case DATA:
return Data();
default:
jj_la1[2] = jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
}","final public Object Element() throws ParseException {
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case ARRAY_BEGIN:
return Array();
case DICT_BEGIN:
return Dictionary();
case STRING:
case QUOTED_STRING:
return String();
case DATA:
return Data();
default:
jj_la1[2] = jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
}"
8250,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,configuration,5461,"Token token = null;
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
{
case QUOTED_STRING:
token = jj_consume_token(QUOTED_STRING);
return unescapeQuotes(removeQuotes(token.image));
case STRING:
token = jj_consume_token(STRING);
return token.image;
default:
jj_la1[5] = jj_gen;
jj_consume_token(-1);
throw new ParseException();
","final public String String() throws ParseException {
Token token = null;
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case QUOTED_STRING:
token = jj_consume_token(QUOTED_STRING);
return unescapeQuotes(removeQuotes(token.image));
case STRING:
token = jj_consume_token(STRING);
return token.image;
default:
jj_la1[5] = jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
}","final public String String() throws ParseException {
Token tokenVar1 = tokenLiteral2;
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case QUOTED_STRING:
tokenVar1 = jj_consume_token(QUOTED_STRING);
return unescapeQuotes(removeQuotes(tokenVar1.image));
case STRING:
tokenVar1 = jj_consume_token(STRING);
return tokenVar1.image;
default:
jj_la1[5] = jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
}"
8252,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,configuration,5463,"jjmatchedPos = jjnewStateCnt = 0;
curLexState = defaultLexState;
input_stream = stream;
ReInitRounds();
}
","public void ReInit(SimpleCharStream stream) {
jjmatchedPos = jjnewStateCnt = 0;
curLexState = defaultLexState;
input_stream = stream;
ReInitRounds();
}","public void ReInit(SimpleCharStream stream) {
jjmatchedPos = jjnewStateCnt = 0;
curLexState = defaultLexState;
input_stream = stream;
ReInitRounds();
}"
8258,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,configuration,5469,"inputStream = dstream;
line = startline;
column = startcolumn - 1;
if (buffer == null || buffersize != buffer.length)
{
available = bufsize = buffersize;
buffer = new char[buffersize];
bufline = new int[buffersize];
bufcolumn = new int[buffersize];
}
prevCharIsLF = prevCharIsCR = false;
tokenBegin = inBuf = maxNextCharInd = 0;
bufpos = -1;
}
","public void ReInit(java.io.Reader dstream, int startline, int startcolumn, int buffersize) {
inputStream = dstream;
line = startline;
column = startcolumn - 1;
if (buffer == null || buffersize != buffer.length) {
available = bufsize = buffersize;
buffer = new char[buffersize];
bufline = new int[buffersize];
bufcolumn = new int[buffersize];
}
prevCharIsLF = prevCharIsCR = false;
tokenBegin = inBuf = maxNextCharInd = 0;
bufpos = -1;
}","public void ReInit(java.io.Reader dstream, int startline, int startcolumn, int buffersize) {
inputStream = dstream;
line = startline;
column = startcolumn - 1;
if (buffer == null || buffersize != buffer.length) {
available = bufsize = buffersize;
buffer = new char[buffersize];
bufline = new int[buffersize];
bufcolumn = new int[buffersize];
}
prevCharIsLF = prevCharIsCR = false;
tokenBegin = inBuf = maxNextCharInd = 0;
bufpos = -1;
}"
8260,I18N,DM_DEFAULT_ENCODING,FP,configuration,5471,"this(new java.io.InputStreamReader(dstream), startline, startcolumn, 4096);
","public SimpleCharStream(java.io.InputStream dstream, int startline, int startcolumn, int buffersize) {
this(new java.io.InputStreamReader(dstream), startline, startcolumn, 4096);
}","public SimpleCharStream(java.io.InputStream dstream, int startline, int startcolumn, int buffersize) {
this(new java.io.InputStreamReader(dstream), startline, startcolumn, 4096);
}"
8262,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,configuration,5473,"if (bufpos >= tokenBegin)
return new String(buffer, tokenBegin, bufpos - tokenBegin + 1);
else
return new String(buffer, tokenBegin, bufsize - tokenBegin) +
","public String GetImage() {
if (bufpos >= tokenBegin)
return new String(buffer, tokenBegin, bufpos - tokenBegin + 1);
else
return new String(buffer, tokenBegin, bufsize - tokenBegin) + new String(buffer, 0, bufpos + 1);
}","public String GetImage() {
if (bufpos >= tokenBegin)
return new String(buffer, tokenBegin, bufpos - tokenBegin + 1);
else
return new String(buffer, tokenBegin, bufsize - tokenBegin) + new String(buffer, 0, bufpos + 1);
}"
8263,DODGY_CODE,UUF_UNUSED_PUBLIC_OR_PROTECTED_FIELD,FP,configuration,5474,public Token specialToken;,public Token specialToken;,public Token tokenVar1;
8264,DODGY_CODE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,FP,configuration,5475,"public int beginLine, beginColumn, endLine, endColumn;","public int beginLine, beginColumn, endLine, endColumn;","public int intVar1, intVar2, intVar3, intVar4;"
8274,PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,configuration,5485,"{
public Object createObject(Attributes attributes) throws Exception
{
XMLPropertyListConfiguration config = new XMLPropertyListConfiguration();
ArrayNode node = (ArrayNode) getDigester().peek();
node.addValue(config);
return config.getRoot();
","public void addDateValue(String value) {
try {
addValue(format.parse(value));
} catch (ParseException e) {
;
}
}","public void addDateValue(String value) {
try {
addValue(format.parse(value));
} catch (ParseException e) {
;
}
}"
8275,Multithreaded correctness,STCAL_INVOKE_ON_STATIC_DATE_FORMAT_INSTANCE,FP,configuration,5486,"addValue(format.parse(value));
","public void addDateValue(String value) {
try {
addValue(format.parse(value));
} catch (ParseException e) {
;
}
}","public void addDateValue(String value) {
try {
addValue(format.parse(value));
} catch (ParseException e) {
;
}
}"
8279,DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,configuration,5490,"result = (List) namedNodes.get(name);
","public List getSubNodes(String name) {
if (name == null) {
return getSubNodes();
}
List result;
if (nodes == null) {
result = null;
} else {
result = (List) namedNodes.get(name);
}
return (result == null) ? Collections.EMPTY_LIST : Collections.unmodifiableList(result);
}","public List getSubNodes(String name) {
if (name == null) {
return getSubNodes();
}
List listVar1;
if (nodes == null) {
listVar1 = null;
} else {
listVar1 = (List) namedNodes.get(name);
}
return (listVar1 == null) ? Collections.EMPTY_LIST : Collections.unmodifiableList(listVar1);
}"
8299,SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,configuration,5510,"pstmt = getConnection().prepareStatement(statement);
","protected PreparedStatement createStatement(String sql, boolean nameCol) throws SQLException {
String statement;
if (nameCol && configurationNameColumn != null) {
StringBuilder buf = new StringBuilder(sql);
buf.append("" AND "").append(configurationNameColumn).append(""=?"");
statement = buf.toString();
} else {
statement = sql;
}
pstmt = getConnection().prepareStatement(statement);
return pstmt;
}","protected PreparedStatement createStatement(String sql, boolean nameCol) throws SQLException {
String stringVar1;
if (nameCol && configurationNameColumn != null) {
StringBuilder stringbuilderVar2 = stringbuilderLiteral3;
stringbuilderVar2.append("" AND "").append(configurationNameColumn).append(""=?"");
stringVar1 = stringbuilderVar2.toString();
} else {
stringVar1 = sql;
}
pstmt = getConnection().prepareStatement(stringVar1);
return pstmt;
}"
8311,Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,configuration,5522,private ReloadingController reloadingController;,private ReloadingController reloadingController;,private ReloadingController reloadingcontrollerVar1;
8317,DODGY_CODE,REC_CATCH_EXCEPTION,FP,configuration,5528,"catch (Exception e)
","public void setValue(Object value) throws ConfigurationRuntimeException {
try {
if (!(value instanceof String)) {
this.value = value;
return;
}
String val = (String) value;
String name = StringUtils.removeStartIgnoreCase(val, CLASS);
Class<?> clazz = ClassUtils.getClass(name);
if (name.length() == val.length()) {
this.value = clazz.newInstance();
} else {
this.value = clazz;
}
} catch (Exception e) {
throw new ConfigurationRuntimeException(""Unable to create "" + value, e);
}
}","public void setValue(Object value) throws ConfigurationRuntimeException {
try {
if (!(value instanceof String)) {
this.value = value;
return;
}
String stringVar1 = stringLiteral2;
String stringVar3 = stringLiteral4;
Class<?> class<?>Var5 = class<?>Literal6;
if (stringVar3.length() == stringVar1.length()) {
this.value = class<?>Var5.newInstance();
} else {
this.value = class<?>Var5;
}
} catch (Exception e) {
throw new ConfigurationRuntimeException(""Unable to create "" + value, e);
}
}"
8333,BAD_PRACTICE,SE_BAD_FIELD,FP,configuration,5544,private final QueryResult<T> attributeResult;,private final QueryResult<T> attributeResult;,private final QueryResult<T> queryresult<t>Var1;
8335,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,configuration,5546,"return new ConfigurationNodePointer((ConfigurationNodePointer) parent,
","@Override
@SuppressWarnings(""unchecked"")
public NodePointer createNodePointer(NodePointer parent, QName name, Object bean) {
if (bean instanceof NodeWrapper) {
NodeWrapper<?> wrapper = (NodeWrapper<?>) bean;
return new ConfigurationNodePointer((ConfigurationNodePointer) parent, wrapper.getNode(), wrapper.getNodeHandler());
}
return null;
}","@Override
@SuppressWarnings(""unchecked"")
public NodePointer createNodePointer(NodePointer parent, QName name, Object bean) {
if (bean instanceof NodeWrapper) {
NodeWrapper<?> nodewrapper<?>Var1 = nodewrapper<?>Literal2;
return new ConfigurationNodePointer((ConfigurationNodePointer) parent, nodewrapper<?>Var1.getNode(), nodewrapper<?>Var1.getNodeHandler());
}
return null;
}"
8349,I18N,DM_DEFAULT_ENCODING,FP,configuration,5560,"writer = new OutputStreamWriter(out);
","public void save(OutputStream out, String encoding) throws ConfigurationException {
Writer writer = null;
if (encoding != null) {
try {
writer = new OutputStreamWriter(out, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (writer == null) {
writer = new OutputStreamWriter(out);
}
save(writer);
}","public void save(OutputStream out, String encoding) throws ConfigurationException {
Writer writerVar1 = writerLiteral2;
if (encoding != null) {
try {
writerVar1 = new OutputStreamWriter(out, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (writerVar1 == null) {
writerVar1 = new OutputStreamWriter(out);
}
save(writerVar1);
}"
8354,BAD_PRACTICE,SE_BAD_FIELD,FP,configuration,5565,private List<ConfigData> configurations;,private List<ConfigData> configurations;,private List<ConfigData> list<configdata>Var1;
8357,I18N,DM_DEFAULT_ENCODING,FP,configuration,5568,"dump(configuration, new PrintWriter(out));
","public static void dump(Configuration configuration, PrintStream out) {
dump(configuration, new PrintWriter(out));
}","public static void dump(Configuration configuration, PrintStream out) {
dump(configuration, new PrintWriter(out));
}"
8366,SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,configuration,5577,"pstmt = conn.prepareStatement(query.toString());
","@Override
public void clear() {
fireEvent(EVENT_CLEAR, null, null, true);
StringBuilder query = new StringBuilder(""DELETE FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
pstmt.executeUpdate();
commitIfRequired(conn);
} catch (SQLException e) {
fireError(EVENT_CLEAR, null, null, e);
} finally {
close(conn, pstmt, null);
}
fireEvent(EVENT_CLEAR, null, null, false);
}","@Override
public void clear() {
fireEvent(EVENT_CLEAR, null, null, true);
StringBuilder stringbuilderVar1 = stringbuilderLiteral2;
if (nameColumn != null) {
stringbuilderVar1.append("" WHERE "" + nameColumn + ""=?"");
}
Connection connectionVar3 = connectionLiteral4;
PreparedStatement preparedstatementVar5 = connectionLiteral4;
try {
connectionVar3 = getConnection();
preparedstatementVar5 = connectionVar3.prepareStatement(stringbuilderVar1.toString());
if (nameColumn != null) {
preparedstatementVar5.setString(1, name);
}
preparedstatementVar5.executeUpdate();
commitIfRequired(connectionVar3);
} catch (SQLException e) {
fireError(EVENT_CLEAR, null, null, e);
} finally {
close(connectionVar3, preparedstatementVar5, null);
}
fireEvent(EVENT_CLEAR, null, null, false);
}"
8377,BAD_PRACTICE,SE_BAD_FIELD,FP,configuration,5588,private ConfigurationNode rootNode;,private ConfigurationNode rootNode;,private ConfigurationNode configurationnodeVar1;
8388,BAD_PRACTICE,SE_BAD_FIELD,FP,configuration,5599,private ReloadingStrategy fileStrategy;,private ReloadingStrategy fileStrategy;,private ReloadingStrategy reloadingstrategyVar1;
8394,CORRECTNESS,UR_UNINIT_READ_CALLED_FROM_SUPER_CONSTRUCTOR,FP,configuration,5605,"if (init)
","@Override
public void setRootNode(ConfigurationNode rootNode) {
if (init) {
getConfig().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}","@Override
public void setRootNode(ConfigurationNode rootNode) {
if (init) {
getConfig().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}"
8396,PERFORMANCE,DM_NUMBER_CTOR,FP,configuration,5607,"return new Short(n.shortValue());
","public static Short toShort(Object value) throws ConversionException {
Number n = toNumber(value, Short.class);
if (n instanceof Short) {
return (Short) n;
} else {
return new Short(n.shortValue());
}
}","public static Short toShort(Object value) throws ConversionException {
Number numberVar1 = numberLiteral2;
if (numberVar1 instanceof Short) {
return (Short) numberVar1;
} else {
return new Short(numberVar1.shortValue());
}
}"
8399,DODGY_CODE,REC_CATCH_EXCEPTION,FP,configuration,5610,"catch (Exception e)
","static Object toInternetAddress(Object value) throws ConversionException {
if (value.getClass().getName().equals(INTERNET_ADDRESS_CLASSNAME)) {
return value;
} else if (value instanceof String) {
try {
Constructor<?> ctor = Class.forName(INTERNET_ADDRESS_CLASSNAME).getConstructor(new Class[] { String.class });
return ctor.newInstance(new Object[] { value });
} catch (Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"", e);
}
} else {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"");
}
}","static Object toInternetAddress(Object value) throws ConversionException {
if (value.getClass().getName().equals(INTERNET_ADDRESS_CLASSNAME)) {
return value;
} else if (value instanceof String) {
try {
Constructor<?> constructor<?>Var1 = constructor<?>Literal2;
return constructor<?>Var1.newInstance(new Object[] { value });
} catch (Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"", e);
}
} else {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"");
}
}"
8407,I18N,DM_CONVERT_CASE,FP,configuration,5618,"String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
return;
}
}","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String stringVar1 = stringLiteral2;
Class<?>[] class<?>ArrayVar3 = class<?>ArrayLiteral4;
class<?>ArrayVar3[0] = FileSystemOptions.class;
class<?>ArrayVar3[1] = value.getClass();
try {
Method methodVar5 = methodLiteral6;
Object[] objectArrayVar7 = objectArrayLiteral8;
objectArrayVar7[0] = options;
objectArrayVar7[1] = value;
methodVar5.invoke(builder, objectArrayVar7);
} catch (Exception ex) {
return;
}
}"
8408,DODGY_CODE,REC_CATCH_EXCEPTION,FP,configuration,5619,"catch (Exception ex)
","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
return;
}
}","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String stringVar1 = stringLiteral2;
Class<?>[] class<?>ArrayVar3 = class<?>ArrayLiteral4;
class<?>ArrayVar3[0] = FileSystemOptions.class;
class<?>ArrayVar3[1] = value.getClass();
try {
Method methodVar5 = methodLiteral6;
Object[] objectArrayVar7 = objectArrayLiteral8;
objectArrayVar7[0] = options;
objectArrayVar7[1] = value;
methodVar5.invoke(builder, objectArrayVar7);
} catch (Exception ex) {
return;
}
}"
8414,DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,FP,configuration,5625,"String encoding = getEncoding() != null ? getEncoding() : DEFAULT_ENCODING;
","@Override
public void save(Writer out) throws ConfigurationException {
PrintWriter writer = new PrintWriter(out);
String encoding = getEncoding() != null ? getEncoding() : DEFAULT_ENCODING;
writer.println(""<?xml version=\""1.0\"" encoding=\"""" + encoding + ""\""?>"");
writer.println(""<!DOCTYPE properties SYSTEM \""http://java.sun.com/dtd/properties.dtd\"">"");
writer.println(""<properties>"");
if (getHeader() != null) {
writer.println(""  <comment>"" + StringEscapeUtils.escapeXml(getHeader()) + ""</comment>"");
}
Iterator<String> keys = getKeys();
while (keys.hasNext()) {
String key = keys.next();
Object value = getProperty(key);
if (value instanceof List) {
writeProperty(writer, key, (List<?>) value);
} else {
writeProperty(writer, key, value);
}
}
writer.println(""</properties>"");
writer.flush();
}","@Override
public void save(Writer out) throws ConfigurationException {
PrintWriter printwriterVar1 = printwriterLiteral2;
String stringVar3 = stringLiteral4;
printwriterVar1.println(""<?xml version=\""1.0\"" encoding=\"""" + stringVar3 + ""\""?>"");
printwriterVar1.println(""<!DOCTYPE properties SYSTEM \""http://java.sun.com/dtd/properties.dtd\"">"");
printwriterVar1.println(""<properties>"");
if (getHeader() != null) {
printwriterVar1.println(""  <comment>"" + StringEscapeUtils.escapeXml(getHeader()) + ""</comment>"");
}
Iterator<String> iterator<string>Var5 = iterator<string>Literal6;
while (iterator<string>Var5.hasNext()) {
String stringVar7 = stringLiteral8;
Object objectVar9 = objectLiteral10;
if (objectVar9 instanceof List) {
writeProperty(printwriterVar1, stringVar7, (List<?>) objectVar9);
} else {
writeProperty(printwriterVar1, stringVar7, objectVar9);
}
}
printwriterVar1.println(""</properties>"");
printwriterVar1.flush();
}"
8415,DODGY_CODE,REC_CATCH_EXCEPTION,FP,configuration,5626,"catch (Exception e)
","@Override
public void load(Reader in) throws ConfigurationException {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setNamespaceAware(false);
factory.setValidating(true);
try {
SAXParser parser = factory.newSAXParser();
XMLReader xmlReader = parser.getXMLReader();
xmlReader.setEntityResolver(new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlReader.setContentHandler(new XMLPropertiesHandler());
xmlReader.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
// todo: support included properties ?
}","@Override
public void load(Reader in) throws ConfigurationException {
SAXParserFactory saxparserfactoryVar1 = saxparserfactoryLiteral2;
saxparserfactoryVar1.setNamespaceAware(false);
saxparserfactoryVar1.setValidating(true);
try {
SAXParser saxparserVar3 = saxparserLiteral4;
XMLReader xmlreaderVar5 = xmlreaderLiteral6;
xmlreaderVar5.setEntityResolver(new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlreaderVar5.setContentHandler(new XMLPropertiesHandler());
xmlreaderVar5.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
// todo: support included properties ?
}"
8418,DODGY_CODE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,FP,configuration,5629,"SubnodeConfiguration config = (SubnodeConfiguration) iter.next();
","protected BeanDeclaration createBeanDeclaration(ConfigurationNode node) {
List<HierarchicalConfiguration> list = getConfiguration().configurationsAt(node.getName());
if (list.size() == 1) {
return new XMLBeanDeclaration((SubnodeConfiguration) list.get(0), node);
} else {
Iterator<HierarchicalConfiguration> iter = list.iterator();
while (iter.hasNext()) {
SubnodeConfiguration config = (SubnodeConfiguration) iter.next();
if (config.getRootNode().equals(node)) {
return new XMLBeanDeclaration(config, node);
}
}
throw new ConfigurationRuntimeException(""Unable to match node for "" + node.getName());
}
}","protected BeanDeclaration createBeanDeclaration(ConfigurationNode node) {
List<HierarchicalConfiguration> list<hierarchicalconfiguration>Var1 = list<hierarchicalconfiguration>Literal2;
if (list<hierarchicalconfiguration>Var1.size() == 1) {
return new XMLBeanDeclaration((SubnodeConfiguration) list<hierarchicalconfiguration>Var1.get(0), node);
} else {
Iterator<HierarchicalConfiguration> iterator<hierarchicalconfiguration>Var3 = iterator<hierarchicalconfiguration>Literal4;
while (iterator<hierarchicalconfiguration>Var3.hasNext()) {
SubnodeConfiguration subnodeconfigurationVar5 = subnodeconfigurationLiteral6;
if (subnodeconfigurationVar5.getRootNode().equals(node)) {
return new XMLBeanDeclaration(subnodeconfigurationVar5, node);
}
}
throw new ConfigurationRuntimeException(""Unable to match node for "" + node.getName());
}
}"
8426,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,configuration,5637,"StrSubstitutor substitutor = ((CatalogManager) catalogManager).getStrSubstitutor();
","@Override
protected String normalizeURI(String uriref) {
StrSubstitutor substitutor = ((CatalogManager) catalogManager).getStrSubstitutor();
String resolved = substitutor != null ? substitutor.replace(uriref) : uriref;
return super.normalizeURI(resolved);
}","@Override
protected String normalizeURI(String uriref) {
StrSubstitutor strsubstitutorVar1 = strsubstitutorLiteral2;
String stringVar3 = stringLiteral4;
return super.normalizeURI(stringVar3);
}"
8427,DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,FP,configuration,5638,"String name = (url == null) ? fileName : url.toString();
","@Override
public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
String base = ((CatalogManager) catalogManager).getBaseDir();
@SuppressWarnings(""unchecked"")
Vector<String> catalogs = catalogManager.getCatalogFiles();
if (catalogs != null) {
for (int count = 0; count < catalogs.size(); count++) {
String fileName = catalogs.elementAt(count);
URL url = null;
InputStream is = null;
try {
url = ConfigurationUtils.locate(fs, base, fileName);
if (url != null) {
is = fs.getInputStream(url);
}
} catch (ConfigurationException ce) {
String name = (url == null) ? fileName : url.toString();
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + name + "". "" + ce.getMessage());
}
if (is != null) {
String mimeType = fileNameMap.getContentTypeFor(fileName);
try {
if (mimeType != null) {
parseCatalog(mimeType, is);
continue;
}
} catch (Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + fileName + "". "" + ex.getMessage());
} finally {
is.close();
}
}
parseCatalog(base, fileName);
}
}
}","@Override
public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
String stringVar1 = stringLiteral2;
@SuppressWarnings(""unchecked"")
Vector<String> vector<string>Var3 = vector<string>Literal4;
if (vector<string>Var3 != null) {
for (int intVar16 = intLiteral17; intVar5 < intLiteral1; intVar5++) {
String stringVar7 = stringLiteral8;
URL urlVar9 = urlLiteral10;
InputStream inputstreamVar11 = urlLiteral10;
try {
urlVar9 = ConfigurationUtils.locate(fs, stringVar1, stringVar7);
if (urlVar9 != null) {
inputstreamVar11 = fs.getInputStream(urlVar9);
}
} catch (ConfigurationException ce) {
String stringVar12 = stringLiteral13;
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + stringVar12 + "". "" + ce.getMessage());
}
if (inputstreamVar11 != null) {
String stringVar14 = stringLiteral15;
try {
if (stringVar14 != null) {
parseCatalog(stringVar14, inputstreamVar11);
continue;
}
} catch (Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + stringVar7 + "". "" + ex.getMessage());
} finally {
inputstreamVar11.close();
}
}
parseCatalog(stringVar1, stringVar7);
}
}
}"
8429,DODGY_CODE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,FP,configuration,5640,"staticCatalog = catalog;
","@Override
public org.apache.xml.resolver.Catalog getPrivateCatalog() {
org.apache.xml.resolver.Catalog catalog = staticCatalog;
if (catalog == null || !getUseStaticCatalog()) {
try {
catalog = new Catalog();
catalog.setCatalogManager(this);
catalog.setupReaders();
catalog.loadSystemCatalogs();
} catch (Exception ex) {
ex.printStackTrace();
}
if (getUseStaticCatalog()) {
staticCatalog = catalog;
}
}
return catalog;
}","@Override
public org.apache.xml.resolver.Catalog getPrivateCatalog() {
org.apache.xml.resolver.Catalog org.apache.xml.resolver.catalogVar1 = org.apache.xml.resolver.catalogLiteral2;
if (org.apache.xml.resolver.catalogVar1 == null || !getUseStaticCatalog()) {
try {
org.apache.xml.resolver.catalogVar1 = new Catalog();
org.apache.xml.resolver.catalogVar1.setCatalogManager(this);
org.apache.xml.resolver.catalogVar1.setupReaders();
org.apache.xml.resolver.catalogVar1.loadSystemCatalogs();
} catch (Exception ex) {
ex.printStackTrace();
}
if (getUseStaticCatalog()) {
staticCatalog = org.apache.xml.resolver.catalogVar1;
}
}
return org.apache.xml.resolver.catalogVar1;
}"
8430,DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,configuration,5641,"result = namedNodes.get(name);
","public List<ConfigurationNode> getSubNodes(String name) {
if (name == null) {
return getSubNodes();
}
List<ConfigurationNode> result;
if (nodes == null) {
result = null;
} else {
result = namedNodes.get(name);
}
if (result == null) {
return Collections.emptyList();
} else {
return Collections.unmodifiableList(result);
}
}","public List<ConfigurationNode> getSubNodes(String name) {
if (name == null) {
return getSubNodes();
}
List<ConfigurationNode> list<configurationnode>Var1;
if (nodes == null) {
list<configurationnode>Var1 = null;
} else {
list<configurationnode>Var1 = namedNodes.get(name);
}
if (list<configurationnode>Var1 == null) {
return Collections.emptyList();
} else {
return Collections.unmodifiableList(list<configurationnode>Var1);
}
}"
8498,SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,configuration,5709,"pstmt = getConnection().prepareStatement(statement);
","protected PreparedStatement createStatement(final String sql, final boolean nameCol) throws SQLException {
String statement;
if (nameCol && configurationNameColumn != null) {
final StringBuilder buf = new StringBuilder(sql);
buf.append("" AND "").append(configurationNameColumn).append(""=?"");
statement = buf.toString();
} else {
statement = sql;
}
pstmt = getConnection().prepareStatement(statement);
return pstmt;
}","protected PreparedStatement createStatement(final String sql, final boolean nameCol) throws SQLException {
String stringVar1;
if (nameCol && configurationNameColumn != null) {
final StringBuilder stringbuilderVar2 = stringbuilderLiteral3;
stringbuilderVar2.append("" AND "").append(configurationNameColumn).append(""=?"");
stringVar1 = stringbuilderVar2.toString();
} else {
stringVar1 = sql;
}
pstmt = getConnection().prepareStatement(stringVar1);
return pstmt;
}"
8499,PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,configuration,5710,"{
@Override
public void error(final SAXParseException ex) throws SAXException
{
throw ex;
","@Override
public void read(final InputStream in) throws ConfigurationException, IOException {
load(new InputSource(in));
}","@Override
public void read(final InputStream in) throws ConfigurationException, IOException {
load(new InputSource(in));
}"
8500,DODGY_CODE,REC_CATCH_EXCEPTION,FP,configuration,5711,"catch (final Exception e)
","@Override
public void read(final Reader in) throws ConfigurationException {
final SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setNamespaceAware(false);
factory.setValidating(true);
try {
final SAXParser parser = factory.newSAXParser();
final XMLReader xmlReader = parser.getXMLReader();
xmlReader.setEntityResolver((publicId, systemId) -> new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd"")));
xmlReader.setContentHandler(new XMLPropertiesHandler());
xmlReader.parse(new InputSource(in));
} catch (final Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
// todo: support included properties ?
}","@Override
public void read(final Reader in) throws ConfigurationException {
final SAXParserFactory saxparserfactoryVar1 = saxparserfactoryLiteral2;
saxparserfactoryVar1.setNamespaceAware(false);
saxparserfactoryVar1.setValidating(true);
try {
final SAXParser saxparserVar3 = saxparserLiteral4;
final XMLReader xmlreaderVar5 = xmlreaderLiteral6;
xmlreaderVar5.setEntityResolver((publicId, systemId) -> new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd"")));
xmlreaderVar5.setContentHandler(new XMLPropertiesHandler());
xmlreaderVar5.parse(new InputSource(in));
} catch (final Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
// todo: support included properties ?
}"
8503,BAD_PRACTICE,SE_BAD_FIELD,FP,configuration,5714,private final ImmutableConfiguration configuration;,private final ImmutableConfiguration configuration;,private final ImmutableConfiguration immutableconfigurationVar1;
8506,Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,configuration,5717,private ConfigurationSourceData sourceData;,private ConfigurationSourceData sourceData;,private ConfigurationSourceData configurationsourcedataVar1;
8511,PERFORMANCE,DM_FP_NUMBER_CTOR,FP,configuration,5722,"return new Double(n.doubleValue());
","public static Double toDouble(final Object value) throws ConversionException {
final Number n = toNumber(value, Double.class);
if (n instanceof Double) {
return (Double) n;
}
return new Double(n.doubleValue());
}","public static Double toDouble(final Object value) throws ConversionException {
final Number numberVar1 = numberLiteral2;
if (numberVar1 instanceof Double) {
return (Double) numberVar1;
}
return new Double(numberVar1.doubleValue());
}"
8518,PERFORMANCE,URF_UNREAD_FIELD,FP,configuration,5729,private final String protocol;,private final String protocol;,private final String stringVar1;
8550,PERFORMANCE,DM_FP_NUMBER_CTOR,FP,configuration,5761,"return getFloat(key, new Float(defaultValue));
","public float getFloat(String key, float defaultValue) {
return getFloat(key, new Float(defaultValue));
}","public float getFloat(String key, float defaultValue) {
return getFloat(key, new Float(defaultValue));
}"
8557,I18N,DM_DEFAULT_ENCODING,FP,configuration,5768,"dump(configuration, new PrintWriter(out));
","public static void dump(Configuration configuration, PrintStream out) {
dump(configuration, new PrintWriter(out));
}","public static void dump(Configuration configuration, PrintStream out) {
dump(configuration, new PrintWriter(out));
}"
8561,EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,FP,configuration,5772,"ResultSet rs = pstmt.executeQuery();
","@Override
protected Object performOperation() throws SQLException {
PreparedStatement pstmt = initStatement(String.format(SQL_GET_PROPERTY, table, keyColumn), true, key);
ResultSet rs = pstmt.executeQuery();
List<Object> results = new ArrayList<Object>();
while (rs.next()) {
Object value = rs.getObject(valueColumn);
if (isDelimiterParsingDisabled()) {
results.add(value);
} else {
results.addAll(PropertyConverter.flatten(value, getListDelimiter()));
}
}
if (!results.isEmpty()) {
return (results.size() > 1) ? results : results.get(0);
} else {
return null;
}
}","@Override
protected Object performOperation() throws SQLException {
PreparedStatement preparedstatementVar1 = preparedstatementLiteral2;
ResultSet resultsetVar3 = resultsetLiteral4;
List<Object> list<object>Var5 = list<object>Literal6;
while (resultsetVar3.next()) {
Object objectVar7 = objectLiteral8;
if (isDelimiterParsingDisabled()) {
list<object>Var5.add(objectVar7);
} else {
list<object>Var5.addAll(PropertyConverter.flatten(objectVar7, getListDelimiter()));
}
}
if (!list<object>Var5.isEmpty()) {
return (list<object>Var5.size() > 1) ? list<object>Var5 : list<object>Var5.get(0);
} else {
return null;
}
}"
8565,I18N,DM_CONVERT_CASE,FP,configuration,5776,"&& fileName.toLowerCase().trim().endsWith(fileExtension))
","@Override
protected Object createBeanInstance(Class<?> beanClass, BeanDeclaration data) throws Exception {
String fileName = ((ConfigurationDeclaration) data).getConfiguration().getString(ATTR_FILENAME);
if (fileName != null && fileName.toLowerCase().trim().endsWith(fileExtension)) {
return super.createBeanInstance(fetchMatchingClass(), data);
} else {
return super.createBeanInstance(fetchDefaultClass(), data);
}
}","@Override
protected Object createBeanInstance(Class<?> beanClass, BeanDeclaration data) throws Exception {
String stringVar1 = stringLiteral2;
if (stringVar1 != null && stringVar1.toLowerCase().trim().endsWith(fileExtension)) {
return super.createBeanInstance(fetchMatchingClass(), data);
} else {
return super.createBeanInstance(fetchDefaultClass(), data);
}
}"
8575,CORRECTNESS,UR_UNINIT_READ_CALLED_FROM_SUPER_CONSTRUCTOR,FP,configuration,5786,"if (init)
","@Override
public void setRootNode(ConfigurationNode rootNode) {
if (init) {
getConfiguration().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}","@Override
public void setRootNode(ConfigurationNode rootNode) {
if (init) {
getConfiguration().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}"
8581,DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,FP,configuration,5792,"String encoding = getEncoding() != null ? getEncoding() : DEFAULT_ENCODING;
","public void save(Writer out) throws ConfigurationException {
PrintWriter writer = new PrintWriter(out);
String encoding = getEncoding() != null ? getEncoding() : DEFAULT_ENCODING;
writer.println(""<?xml version=\""1.0\"" encoding=\"""" + encoding + ""\""?>"");
writer.println(""<!DOCTYPE properties SYSTEM \""http://java.sun.com/dtd/properties.dtd\"">"");
writer.println(""<properties>"");
if (getHeader() != null) {
writer.println(""  <comment>"" + StringEscapeUtils.escapeXml(getHeader()) + ""</comment>"");
}
Iterator<String> keys = getKeys();
while (keys.hasNext()) {
String key = keys.next();
Object value = getProperty(key);
if (value instanceof List) {
writeProperty(writer, key, (List) value);
} else {
writeProperty(writer, key, value);
}
}
writer.println(""</properties>"");
writer.flush();
}","public void save(Writer out) throws ConfigurationException {
PrintWriter printwriterVar1 = printwriterLiteral2;
String stringVar3 = stringLiteral4;
printwriterVar1.println(""<?xml version=\""1.0\"" encoding=\"""" + stringVar3 + ""\""?>"");
printwriterVar1.println(""<!DOCTYPE properties SYSTEM \""http://java.sun.com/dtd/properties.dtd\"">"");
printwriterVar1.println(""<properties>"");
if (getHeader() != null) {
printwriterVar1.println(""  <comment>"" + StringEscapeUtils.escapeXml(getHeader()) + ""</comment>"");
}
Iterator<String> iterator<string>Var5 = iterator<string>Literal6;
while (iterator<string>Var5.hasNext()) {
String stringVar7 = stringLiteral8;
Object objectVar9 = objectLiteral10;
if (objectVar9 instanceof List) {
writeProperty(printwriterVar1, stringVar7, (List) objectVar9);
} else {
writeProperty(printwriterVar1, stringVar7, objectVar9);
}
}
printwriterVar1.println(""</properties>"");
printwriterVar1.flush();
}"
8585,DODGY_CODE,REC_CATCH_EXCEPTION,FP,configuration,5796,"catch (Exception ex)
","public T getRootNode() {
if (getSubnodeKey() != null) {
try {
NodeList<T> nodes = getParent().fetchNodeList(getSubnodeKey());
if (nodes.size() != 1 || !nodes.isNode(0)) {
setSubnodeKey(null);
} else {
T currentRoot = nodes.getNode(0);
if (currentRoot != rootNode) {
fireEvent(EVENT_SUBNODE_CHANGED, null, null, true);
rootNode = currentRoot;
fireEvent(EVENT_SUBNODE_CHANGED, null, null, false);
}
return currentRoot;
}
} catch (Exception ex) {
setSubnodeKey(null);
}
}
return rootNode;
}","if (getSubnodeKey() != null) {
try {
NodeList<T> NodeListVar1 = getParent().fetchNodeList(getSubnodeKey());
if (NodeListVar1.size() != intLiteral1 || !NodeListVar1.isNode(intLiteral2)) {
setSubnodeKey(null);
} else {
T TVar2 = NodeListVar1.getNode(intLiteral3);
if (TVar2 != rootNode) {
fireEvent(EVENT_SUBNODE_CHANGED, null, null, true);
rootNode = TVar2;
fireEvent(EVENT_SUBNODE_CHANGED, null, null, false);
}
return TVar2;
}
} catch (Exception ex) {
setSubnodeKey(null);
}
}
return rootNode;"
8586,PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,configuration,5797,"{
@Override
public void error(SAXParseException ex) throws SAXException
{
throw ex;
","public String getPublicID() {
return publicID;
}","public String getPublicID() {
return publicID;
}"
8590,I18N,DM_DEFAULT_ENCODING,FP,configuration,5801,"PrintStream stream = new PrintStream(os);
","private CombinedNode constructCombinedNode() {
initSubHandlers();
if (getNumberOfConfigurations() < 1) {
return new CombinedNode();
} else {
Iterator<ConfigData> it = configurations.iterator();
CombinedNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = getNodeCombiner().combine(node, getNodeHandler(), it.next().getTransformedRoot(), getNodeHandler());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node, getNodeHandler());
getLogger().debug(os.toString());
}
return node;
}
}","private CombinedNode constructCombinedNode() {
initSubHandlers();
if (getNumberOfConfigurations() < 1) {
return new CombinedNode();
} else {
Iterator<ConfigData> iterator<configdata>Var1 = iterator<configdata>Literal2;
CombinedNode combinednodeVar3 = combinednodeLiteral4;
while (iterator<configdata>Var1.hasNext()) {
combinednodeVar3 = getNodeCombiner().combine(combinednodeVar3, getNodeHandler(), iterator<configdata>Var1.next().getTransformedRoot(), getNodeHandler());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream bytearrayoutputstreamVar5 = bytearrayoutputstreamLiteral6;
PrintStream printstreamVar7 = printstreamLiteral8;
TreeUtils.printTree(printstreamVar7, combinednodeVar3, getNodeHandler());
getLogger().debug(bytearrayoutputstreamVar5.toString());
}
return combinednodeVar3;
}
}"
8609,DODGY_CODE,REC_CATCH_EXCEPTION,FP,configuration,5820,"catch (Exception e)
","public void setValue(Object value) throws ConfigurationRuntimeException {
try {
if (!(value instanceof String)) {
this.value = value;
return;
}
String val = (String) value;
String name = StringUtils.removeStartIgnoreCase(val, CLASS);
Class clazz = ClassUtils.getClass(name);
if (name.length() == val.length()) {
this.value = clazz.newInstance();
} else {
this.value = clazz;
}
} catch (Exception e) {
throw new ConfigurationRuntimeException(""Unable to create "" + value, e);
}
}","public void setValue(Object value) throws ConfigurationRuntimeException {
try {
if (!(value instanceof String)) {
this.value = value;
return;
}
String stringVar1 = stringLiteral2;
String stringVar3 = stringLiteral4;
Class classVar5 = classLiteral6;
if (stringVar3.length() == stringVar1.length()) {
this.value = classVar5.newInstance();
} else {
this.value = classVar5;
}
} catch (Exception e) {
throw new ConfigurationRuntimeException(""Unable to create "" + value, e);
}
}"
8617,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,configuration,5828,"Token token = null;
token = jj_consume_token(STRING);
{if (true) return StringEscapeUtils.unescapeJava(removeQuotes(token.image));}
","final public String String() throws ParseException {
Token token = null;
token = jj_consume_token(STRING);
{
if (true)
return StringEscapeUtils.unescapeJava(removeQuotes(token.image));
}
throw new Error(""Missing return statement in function"");
}","final public String String() throws ParseException {
Token tokenVar1 = tokenLiteral2;
tokenVar1 = jj_consume_token(STRING);
{
if (true)
return StringEscapeUtils.unescapeJava(removeQuotes(tokenVar1.image));
}
throw new Error(""Missing return statement in function"");
}"
8622,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,configuration,5833,"jjmatchedPos = jjnewStateCnt = 0;
curLexState = defaultLexState;
input_stream = stream;
ReInitRounds();
}
","public void ReInit(SimpleCharStream stream) {
jjmatchedPos = jjnewStateCnt = 0;
curLexState = defaultLexState;
input_stream = stream;
ReInitRounds();
}","public void ReInit(SimpleCharStream stream) {
jjmatchedPos = jjnewStateCnt = 0;
curLexState = defaultLexState;
input_stream = stream;
ReInitRounds();
}"
8623,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,configuration,5834,"if (lexState >= 1 || lexState < 0)
throw new TokenMgrError(""Error: Ignoring invalid lexical state : "" + lexState + "". State unchanged."", TokenMgrError.INVALID_LEXICAL_STATE);
else
curLexState = lexState;
}
","public void SwitchTo(int lexState) {
if (lexState >= 1 || lexState < 0)
throw new TokenMgrError(""Error: Ignoring invalid lexical state : "" + lexState + "". State unchanged."", TokenMgrError.INVALID_LEXICAL_STATE);
else
curLexState = lexState;
}","public void SwitchTo(int lexState) {
if (lexState >= 1 || lexState < 0)
throw new TokenMgrError(""Error: Ignoring invalid lexical state : "" + lexState + "". State unchanged."", TokenMgrError.INVALID_LEXICAL_STATE);
else
curLexState = lexState;
}"
8624,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,configuration,5835,"jjround = 0x80000001;
for (i = 31; i-- > 0;)
jjrounds[i] = 0x80000000;
}
","private void ReInitRounds() {
int i;
jjround = 0x80000001;
for (i = 31; i-- > 0; ) jjrounds[i] = 0x80000000;
}","private void ReInitRounds() {
int intVar1;
jjround = 0x80000001;
for (intVar1 = 31; intVar1-- > intLiteral1; ) jjrounds[intVar1] = 0x80000000;
}"
8626,BAD_PRACTICE,SE_BAD_FIELD,FP,configuration,5837,public Token currentToken;,public Token currentToken;,public Token tokenVar1;
8634,I18N,DM_DEFAULT_ENCODING,FP,configuration,5845,"this(new java.io.InputStreamReader(dstream), startline, startcolumn, buffersize);
","public SimpleCharStream(java.io.InputStream dstream, int startline, int startcolumn, int buffersize) {
this(new java.io.InputStreamReader(dstream), startline, startcolumn, buffersize);
}","public SimpleCharStream(java.io.InputStream dstream, int startline, int startcolumn, int buffersize) {
this(new java.io.InputStreamReader(dstream), startline, startcolumn, buffersize);
}"
8635,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,configuration,5846,"ReInit(dstream, 1, 1, 4096);
}
","public void ReInit(java.io.InputStream dstream) {
ReInit(dstream, 1, 1, 4096);
}","public void ReInit(java.io.InputStream dstream) {
ReInit(dstream, 1, 1, 4096);
}"
8637,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,configuration,5848,"buffer = null;
bufline = null;
bufcolumn = null;
}
","public void Done() {
buffer = null;
bufline = null;
bufcolumn = null;
}","public void Done() {
buffer = null;
bufline = null;
bufcolumn = null;
}"
8639,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,configuration,5850,"tokenBegin = -1;
char c = readChar();
tokenBegin = bufpos;
return c;
","public char BeginToken() throws java.io.IOException {
tokenBegin = -1;
char c = readChar();
tokenBegin = bufpos;
return c;
}","public char BeginToken() throws java.io.IOException {
tokenBegin = -1;
char charVar1 = charLiteral2;
tokenBegin = bufpos;
return charVar1;
}"
8645,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,configuration,5856,"ReInit(dstream, 1, 1, 4096);
}
","public void ReInit(java.io.Reader dstream) {
ReInit(dstream, 1, 1, 4096);
}","public void ReInit(java.io.Reader dstream) {
ReInit(dstream, 1, 1, 4096);
}"
8651,CORRECTNESS,NP_NULL_PARAM_DEREF_ALL_TARGETS_DANGEROUS,FP,configuration,5862,"return instance.getByteArray(null, null);
","public static synchronized byte[] decodeBase64(String base64String) {
instance.put(null, base64String);
return instance.getByteArray(null, null);
}","public static synchronized byte[] decodeBase64(String base64String) {
instance.put(null, base64String);
return instance.getByteArray(null, null);
}"
8656,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,configuration,5867,"String key = null;
Object value = null;
ConfigurationNode node = new DefaultConfigurationNode();
key = String();
node.setName(key);
jj_consume_token(EQUAL);
value = Element();
node.setValue(value);
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
case DICT_SEPARATOR:
jj_consume_token(DICT_SEPARATOR);
break;
default:
jj_la1[1] = jj_gen;
;
}
{if (true) return node;}
","final public ConfigurationNode Property() throws ParseException {
String key = null;
Object value = null;
ConfigurationNode node = new DefaultConfigurationNode();
key = String();
node.setName(key);
jj_consume_token(EQUAL);
value = Element();
node.setValue(value);
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case DICT_SEPARATOR:
jj_consume_token(DICT_SEPARATOR);
break;
default:
jj_la1[1] = jj_gen;
;
}
{
if (true)
return node;
}
throw new Error(""Missing return statement in function"");
}","final public ConfigurationNode Property() throws ParseException {
String stringVar1 = stringLiteral2;
Object objectVar3 = stringLiteral2;
ConfigurationNode configurationnodeVar4 = configurationnodeLiteral5;
stringVar1 = String();
configurationnodeVar4.setName(stringVar1);
jj_consume_token(EQUAL);
objectVar3 = Element();
configurationnodeVar4.setValue(objectVar3);
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case DICT_SEPARATOR:
jj_consume_token(DICT_SEPARATOR);
break;
default:
jj_la1[1] = jj_gen;
;
}
{
if (true)
return configurationnodeVar4;
}
throw new Error(""Missing return statement in function"");
}"
8658,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,configuration,5869,"List list = new ArrayList();
Object element = null;
jj_consume_token(ARRAY_BEGIN);
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
case ARRAY_BEGIN:
case DICT_BEGIN:
case DATA:
case DATE:
case STRING:
case QUOTED_STRING:
element = Element();
list.add(element);
label_2:
while (true) {
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
case ARRAY_SEPARATOR:
;
break;
default:
jj_la1[3] = jj_gen;
break label_2;
}
jj_consume_token(ARRAY_SEPARATOR);
element = Element();
list.add(element);
}
break;
default:
jj_la1[4] = jj_gen;
;
}
jj_consume_token(ARRAY_END);
{if (true) return list;}
","final public List Array() throws ParseException {
List list = new ArrayList();
Object element = null;
jj_consume_token(ARRAY_BEGIN);
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case ARRAY_BEGIN:
case DICT_BEGIN:
case DATA:
case DATE:
case STRING:
case QUOTED_STRING:
element = Element();
list.add(element);
label_2: while (true) {
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case ARRAY_SEPARATOR:
;
break;
default:
jj_la1[3] = jj_gen;
break label_2;
}
jj_consume_token(ARRAY_SEPARATOR);
element = Element();
list.add(element);
}
break;
default:
jj_la1[4] = jj_gen;
;
}
jj_consume_token(ARRAY_END);
{
if (true)
return list;
}
throw new Error(""Missing return statement in function"");
}","final public List Array() throws ParseException {
List listVar1 = listLiteral2;
Object objectVar3 = objectLiteral4;
jj_consume_token(ARRAY_BEGIN);
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case ARRAY_BEGIN:
case DICT_BEGIN:
case DATA:
case DATE:
case STRING:
case QUOTED_STRING:
objectVar3 = Element();
listVar1.add(objectVar3);
label_2: while (true) {
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case ARRAY_SEPARATOR:
;
break;
default:
jj_la1[3] = jj_gen;
break label_2;
}
jj_consume_token(ARRAY_SEPARATOR);
objectVar3 = Element();
listVar1.add(objectVar3);
}
break;
default:
jj_la1[4] = jj_gen;
;
}
jj_consume_token(ARRAY_END);
{
if (true)
return listVar1;
}
throw new Error(""Missing return statement in function"");
}"
8664,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,configuration,5875,"jjmatchedPos = jjnewStateCnt = 0;
curLexState = defaultLexState;
input_stream = stream;
ReInitRounds();
}
","public void ReInit(SimpleCharStream stream) {
jjmatchedPos = jjnewStateCnt = 0;
curLexState = defaultLexState;
input_stream = stream;
ReInitRounds();
}","public void ReInit(SimpleCharStream stream) {
jjmatchedPos = jjnewStateCnt = 0;
curLexState = defaultLexState;
input_stream = stream;
ReInitRounds();
}"
8667,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,configuration,5878,"jjround = 0x80000001;
for (i = 14; i-- > 0;)
{
jjrounds[i] = 0x80000000;
}
}
","private void ReInitRounds() {
int i;
jjround = 0x80000001;
for (i = 14; i-- > 0; ) {
jjrounds[i] = 0x80000000;
}
}","private void ReInitRounds() {
int intVar1;
jjround = 0x80000001;
for (intVar1 = 14; intVar1-- > intLiteral1; ) {
jjrounds[intVar1] = 0x80000000;
}
}"
8668,DODGY_CODE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,FP,configuration,5879,public java.io.PrintStream debugStream = System.out;,public java.io.PrintStream debugStream = System.out;,public java.io.PrintStream java.io.printstreamVar1 = java.io.printstreamLiteral2;
8669,I18N,DM_DEFAULT_ENCODING,FP,configuration,5880,"ReInit(new java.io.InputStreamReader(dstream), startline, startcolumn, buffersize);
","public void ReInit(java.io.InputStream dstream, int startline, int startcolumn, int buffersize) {
ReInit(new java.io.InputStreamReader(dstream), startline, startcolumn, buffersize);
}","public void ReInit(java.io.InputStream dstream, int startline, int startcolumn, int buffersize) {
ReInit(new java.io.InputStreamReader(dstream), startline, startcolumn, buffersize);
}"
8677,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,configuration,5888,"ReInit(dstream, startline, startcolumn, 4096);
}
","public void ReInit(java.io.Reader dstream, int startline, int startcolumn) {
ReInit(dstream, startline, startcolumn, 4096);
}","public void ReInit(java.io.Reader dstream, int startline, int startcolumn) {
ReInit(dstream, startline, startcolumn, 4096);
}"
8678,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,configuration,5889,"ReInit(new java.io.InputStreamReader(dstream), startline, startcolumn, buffersize);
}
","public void ReInit(java.io.InputStream dstream, int startline, int startcolumn, int buffersize) {
ReInit(new java.io.InputStreamReader(dstream), startline, startcolumn, buffersize);
}","public void ReInit(java.io.InputStream dstream, int startline, int startcolumn, int buffersize) {
ReInit(new java.io.InputStreamReader(dstream), startline, startcolumn, buffersize);
}"
8681,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,configuration,5892,"if (bufpos >= tokenBegin)
return new String(buffer, tokenBegin, bufpos - tokenBegin + 1);
else
return new String(buffer, tokenBegin, bufsize - tokenBegin) +
","public String GetImage() {
if (bufpos >= tokenBegin)
return new String(buffer, tokenBegin, bufpos - tokenBegin + 1);
else
return new String(buffer, tokenBegin, bufsize - tokenBegin) + new String(buffer, 0, bufpos + 1);
}","public String GetImage() {
if (bufpos >= tokenBegin)
return new String(buffer, tokenBegin, bufpos - tokenBegin + 1);
else
return new String(buffer, tokenBegin, bufsize - tokenBegin) + new String(buffer, 0, bufpos + 1);
}"
8689,DODGY_CODE,REC_CATCH_EXCEPTION,FP,configuration,5900,"catch (Exception e)
","public void load(Reader in) throws ConfigurationException {
if (!(getRootNode() instanceof PListNode)) {
initRoot();
}
EntityResolver resolver = new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
};
XMLPropertyListHandler handler = new XMLPropertyListHandler(getRootNode());
try {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}","public void load(Reader in) throws ConfigurationException {
if (!(getRootNode() instanceof PListNode)) {
initRoot();
}
EntityResolver entityresolverVar1 = entityresolverLiteral2;
XMLPropertyListHandler xmlpropertylisthandlerVar3 = xmlpropertylisthandlerLiteral4;
try {
SAXParserFactory saxparserfactoryVar5 = saxparserfactoryLiteral6;
saxparserfactoryVar5.setValidating(true);
SAXParser saxparserVar7 = saxparserLiteral8;
saxparserVar7.getXMLReader().setEntityResolver(entityresolverVar1);
saxparserVar7.getXMLReader().setContentHandler(xmlpropertylisthandlerVar3);
saxparserVar7.getXMLReader().parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}"
8691,CORRECTNESS,RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE,FP,configuration,5902,"if (configuration.getURL() == null && configuration.getFileName() == null)
","public void init() {
if (configuration.getURL() == null && configuration.getFileName() == null) {
return;
}
if (this.configuration == null) {
throw new IllegalStateException(""No configuration has been set for this strategy"");
}
updateLastModified();
}","public void init() {
if (configuration.getURL() == null && configuration.getFileName() == null) {
return;
}
if (this.configuration == null) {
throw new IllegalStateException(""No configuration has been set for this strategy"");
}
updateLastModified();
}"
8717,PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,configuration,5928,"{
@Override
public void error(SAXParseException ex) throws SAXException
{
throw ex;
","@Override
public void read(InputStream in) throws ConfigurationException, IOException {
load(new InputSource(in));
}","@Override
public void read(InputStream in) throws ConfigurationException, IOException {
load(new InputSource(in));
}"
8719,PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,configuration,5930,"{
@Override
public InputSource resolveEntity(String publicId, String systemId)
{
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
","public void save(Document document, Node parent) {
Element properties = document.createElement(""properties"");
parent.appendChild(properties);
if (getHeader() != null) {
Element comment = document.createElement(""comment"");
properties.appendChild(comment);
comment.setTextContent(StringEscapeUtils.escapeXml(getHeader()));
}
Iterator<String> keys = getKeys();
while (keys.hasNext()) {
String key = keys.next();
Object value = getProperty(key);
if (value instanceof List) {
writeProperty(document, properties, key, (List<?>) value);
} else {
writeProperty(document, properties, key, value);
}
}
}","public void save(Document document, Node parent) {
Element elementVar1 = elementLiteral2;
parent.appendChild(elementVar1);
if (getHeader() != null) {
Element elementVar3 = elementLiteral4;
elementVar1.appendChild(elementVar3);
elementVar3.setTextContent(StringEscapeUtils.escapeXml(getHeader()));
}
Iterator<String> iterator<string>Var5 = iterator<string>Literal6;
while (iterator<string>Var5.hasNext()) {
String stringVar7 = stringLiteral8;
Object objectVar9 = objectLiteral10;
if (objectVar9 instanceof List) {
writeProperty(document, elementVar1, stringVar7, (List<?>) objectVar9);
} else {
writeProperty(document, elementVar1, stringVar7, objectVar9);
}
}
}"
8724,Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,configuration,5935,private AutoSaveListener autoSaveListener;,private AutoSaveListener autoSaveListener;,private AutoSaveListener autosavelistenerVar1;
8729,PERFORMANCE,DM_FP_NUMBER_CTOR,FP,configuration,5940,"return new Double(n.doubleValue());
","public static Double toDouble(Object value) throws ConversionException {
Number n = toNumber(value, Double.class);
if (n instanceof Double) {
return (Double) n;
} else {
return new Double(n.doubleValue());
}
}","public static Double toDouble(Object value) throws ConversionException {
Number numberVar1 = numberLiteral2;
if (numberVar1 instanceof Double) {
return (Double) numberVar1;
} else {
return new Double(numberVar1.doubleValue());
}
}"
8731,DODGY_CODE,REC_CATCH_EXCEPTION,FP,configuration,5942,"catch (Exception e)
","static Object toInternetAddress(Object value) throws ConversionException {
if (value.getClass().getName().equals(INTERNET_ADDRESS_CLASSNAME)) {
return value;
} else if (value instanceof String) {
try {
Constructor<?> ctor = Class.forName(INTERNET_ADDRESS_CLASSNAME).getConstructor(String.class);
return ctor.newInstance(value);
} catch (Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"", e);
}
} else {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"");
}
}","static Object toInternetAddress(Object value) throws ConversionException {
if (value.getClass().getName().equals(INTERNET_ADDRESS_CLASSNAME)) {
return value;
} else if (value instanceof String) {
try {
Constructor<?> constructor<?>Var1 = constructor<?>Literal2;
return constructor<?>Var1.newInstance(value);
} catch (Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"", e);
}
} else {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"");
}
}"
8743,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,configuration,5954,"fs = ((CatalogManager) catalogManager).getFileSystem();
","@Override
public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
String base = ((CatalogManager) catalogManager).getBaseDir();
@SuppressWarnings(""unchecked"")
Vector<String> catalogs = catalogManager.getCatalogFiles();
if (catalogs != null) {
for (int count = 0; count < catalogs.size(); count++) {
String fileName = catalogs.elementAt(count);
URL url = null;
InputStream is = null;
try {
url = locate(fs, base, fileName);
if (url != null) {
is = fs.getInputStream(url);
}
} catch (ConfigurationException ce) {
String name = url.toString();
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + name + "". "" + ce.getMessage());
}
if (is != null) {
String mimeType = fileNameMap.getContentTypeFor(fileName);
try {
if (mimeType != null) {
parseCatalog(mimeType, is);
continue;
}
} catch (Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + fileName + "". "" + ex.getMessage());
} finally {
is.close();
}
}
parseCatalog(base, fileName);
}
}
}","@Override
public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
String stringVar1 = stringLiteral2;
@SuppressWarnings(""unchecked"")
Vector<String> vector<string>Var3 = vector<string>Literal4;
if (vector<string>Var3 != null) {
for (int intVar16 = intLiteral17; intVar5 < intLiteral1; intVar5++) {
String stringVar7 = stringLiteral8;
URL urlVar9 = urlLiteral10;
InputStream inputstreamVar11 = urlLiteral10;
try {
urlVar9 = locate(fs, stringVar1, stringVar7);
if (urlVar9 != null) {
inputstreamVar11 = fs.getInputStream(urlVar9);
}
} catch (ConfigurationException ce) {
String stringVar12 = stringLiteral13;
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + stringVar12 + "". "" + ce.getMessage());
}
if (inputstreamVar11 != null) {
String stringVar14 = stringLiteral15;
try {
if (stringVar14 != null) {
parseCatalog(stringVar14, inputstreamVar11);
continue;
}
} catch (Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + stringVar7 + "". "" + ex.getMessage());
} finally {
inputstreamVar11.close();
}
}
parseCatalog(stringVar1, stringVar7);
}
}
}"
8912,I18N,DM_DEFAULT_ENCODING,FP,configuration,6123,"PrintStream stream = new PrintStream(os);
","private ImmutableNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
} else {
Iterator<ConfigData> it = configurations.iterator();
ImmutableNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = nodeCombiner.combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}","private ImmutableNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
} else {
Iterator<ConfigData> iterator<configdata>Var1 = iterator<configdata>Literal2;
ImmutableNode immutablenodeVar3 = immutablenodeLiteral4;
while (iterator<configdata>Var1.hasNext()) {
immutablenodeVar3 = nodeCombiner.combine(immutablenodeVar3, iterator<configdata>Var1.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream bytearrayoutputstreamVar5 = bytearrayoutputstreamLiteral6;
PrintStream printstreamVar7 = printstreamLiteral8;
TreeUtils.printTree(printstreamVar7, immutablenodeVar3);
getLogger().debug(bytearrayoutputstreamVar5.toString());
}
return immutablenodeVar3;
}
}"
8913,I18N,DM_DEFAULT_ENCODING,FP,configuration,6124,"getLogger().debug(os.toString());
","private ImmutableNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
} else {
Iterator<ConfigData> it = configurations.iterator();
ImmutableNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = nodeCombiner.combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}","private ImmutableNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
} else {
Iterator<ConfigData> iterator<configdata>Var1 = iterator<configdata>Literal2;
ImmutableNode immutablenodeVar3 = immutablenodeLiteral4;
while (iterator<configdata>Var1.hasNext()) {
immutablenodeVar3 = nodeCombiner.combine(immutablenodeVar3, iterator<configdata>Var1.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream bytearrayoutputstreamVar5 = bytearrayoutputstreamLiteral6;
PrintStream printstreamVar7 = printstreamLiteral8;
TreeUtils.printTree(printstreamVar7, immutablenodeVar3);
getLogger().debug(bytearrayoutputstreamVar5.toString());
}
return immutablenodeVar3;
}
}"
8916,DODGY_CODE,REC_CATCH_EXCEPTION,FP,configuration,6127,"catch (Exception ex)
","public static Synchronizer cloneSynchronizer(Synchronizer sync) {
if (sync == null) {
throw new IllegalArgumentException(""Synchronizer must not be null!"");
}
if (NoOpSynchronizer.INSTANCE == sync) {
return sync;
}
try {
return sync.getClass().newInstance();
} catch (Exception ex) {
LOG.info(""Cannot create new instance of "" + sync.getClass());
}
try {
return (Synchronizer) clone(sync);
} catch (CloneNotSupportedException cnex) {
throw new ConfigurationRuntimeException(""Cannot clone Synchronizer "" + sync);
}
}","public static Synchronizer cloneSynchronizer(Synchronizer sync) {
if (sync == null) {
throw new IllegalArgumentException(""Synchronizer must not be null!"");
}
if (NoOpSynchronizer.INSTANCE == sync) {
return sync;
}
try {
return sync.getClass().newInstance();
} catch (Exception ex) {
LOG.info(""Cannot create new instance of "" + sync.getClass());
}
try {
return (Synchronizer) clone(sync);
} catch (CloneNotSupportedException cnex) {
throw new ConfigurationRuntimeException(""Cannot clone Synchronizer "" + sync);
}
}"
8917,BAD_PRACTICE,NM_CONFUSING,FP,configuration,6128,"return dataSource;
","public DataSource getDataSource() {
return dataSource;
}","public DataSource getDataSource() {
return dataSource;
}"
8936,DODGY_CODE,REC_CATCH_EXCEPTION,FP,configuration,6147,"catch (Exception e)
","public void setValue(Object value) throws ConfigurationRuntimeException {
try {
if (!(value instanceof String)) {
this.value = value;
return;
}
String val = (String) value;
String name = StringUtils.removeStartIgnoreCase(val, CLASS);
Class<?> clazz = ClassUtils.getClass(name);
if (name.length() == val.length()) {
this.value = clazz.newInstance();
} else {
this.value = clazz;
}
} catch (Exception e) {
throw new ConfigurationRuntimeException(""Unable to create "" + value, e);
}
}","public void setValue(Object value) throws ConfigurationRuntimeException {
try {
if (!(value instanceof String)) {
this.value = value;
return;
}
String stringVar1 = stringLiteral2;
String stringVar3 = stringLiteral4;
Class<?> class<?>Var5 = class<?>Literal6;
if (stringVar3.length() == stringVar1.length()) {
this.value = class<?>Var5.newInstance();
} else {
this.value = class<?>Var5;
}
} catch (Exception e) {
throw new ConfigurationRuntimeException(""Unable to create "" + value, e);
}
}"
8943,PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,configuration,6154,"{
@Override
public InputSource resolveEntity(String publicId, String systemId)
{
return new InputSource(getClass().getClassLoader()
.getResourceAsStream(""PropertyList-1.0.dtd""));
","@Override
public void read(Reader in) throws ConfigurationException {
EntityResolver resolver = new EntityResolver() {
@Override
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
};
XMLPropertyListHandler handler = new XMLPropertyListHandler();
try {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
getNodeModel().mergeRoot(handler.getResultBuilder().createNode(), null, null, null, this);
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}","@Override
public void read(Reader in) throws ConfigurationException {
EntityResolver entityresolverVar1 = entityresolverLiteral2;
XMLPropertyListHandler xmlpropertylisthandlerVar3 = xmlpropertylisthandlerLiteral4;
try {
SAXParserFactory saxparserfactoryVar5 = saxparserfactoryLiteral6;
saxparserfactoryVar5.setValidating(true);
SAXParser saxparserVar7 = saxparserLiteral8;
saxparserVar7.getXMLReader().setEntityResolver(entityresolverVar1);
saxparserVar7.getXMLReader().setContentHandler(xmlpropertylisthandlerVar3);
saxparserVar7.getXMLReader().parse(new InputSource(in));
getNodeModel().mergeRoot(xmlpropertylisthandlerVar3.getResultBuilder().createNode(), null, null, null, this);
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}"
8952,BAD_PRACTICE,SE_BAD_FIELD,FP,configuration,6163,private final QueryResult<T> attributeResult;,private final QueryResult<T> attributeResult;,private final QueryResult<T> queryresult<t>Var1;
9179,BAD_PRACTICE,NM_CONFUSING,FP,dbcp,76,"return this.userName;
","@Override
public String getUsername() {
return this.userName;
}","@Override
public String getUsername() {
return this.userName;
}"
9193,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,dbcp,90,"return null;
","@Override
public byte[] getBytes(final String columnName) throws SQLException {
try {
return resultSet.getBytes(columnName);
} catch (final SQLException e) {
handleException(e);
return null;
}
}","@Override
public byte[] getBytes(final String columnName) throws SQLException {
try {
return resultSet.getBytes(columnName);
} catch (final SQLException e) {
handleException(e);
return null;
}
}"
9199,SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,FP,dbcp,96,"return statement.execute(sql, autoGeneratedKeys);
","@Override
public boolean execute(final String sql, final int autoGeneratedKeys) throws SQLException {
checkOpen();
setLastUsedInParent();
try {
return statement.execute(sql, autoGeneratedKeys);
} catch (final SQLException e) {
handleException(e);
return false;
}
}","@Override
public boolean execute(final String sql, final int autoGeneratedKeys) throws SQLException {
checkOpen();
setLastUsedInParent();
try {
return statement.execute(sql, autoGeneratedKeys);
} catch (final SQLException e) {
handleException(e);
return false;
}
}"
9203,SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,FP,dbcp,100,"statement.addBatch(sql);
","@Override
public void addBatch(final String sql) throws SQLException {
checkOpen();
try {
statement.addBatch(sql);
} catch (final SQLException e) {
handleException(e);
}
}","@Override
public void addBatch(final String sql) throws SQLException {
checkOpen();
try {
statement.addBatch(sql);
} catch (final SQLException e) {
handleException(e);
}
}"
9208,SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,FP,dbcp,105,"return statement.executeLargeUpdate(sql, autoGeneratedKeys);
","@Override
public long executeLargeUpdate(final String sql, final int autoGeneratedKeys) throws SQLException {
checkOpen();
setLastUsedInParent();
try {
return statement.executeLargeUpdate(sql, autoGeneratedKeys);
} catch (final SQLException e) {
handleException(e);
return 0;
}
}","@Override
public long executeLargeUpdate(final String sql, final int autoGeneratedKeys) throws SQLException {
checkOpen();
setLastUsedInParent();
try {
return statement.executeLargeUpdate(sql, autoGeneratedKeys);
} catch (final SQLException e) {
handleException(e);
return 0;
}
}"
9219,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,dbcp,116,"} catch (final Exception ie) {
","@Override
public synchronized void close() throws SQLException {
if (isClosedInternal()) {
return;
}
boolean isUnderlyingConnectionClosed;
try {
isUnderlyingConnectionClosed = getDelegateInternal().isClosed();
} catch (final SQLException e) {
try {
pool.invalidateObject(this);
} catch (final IllegalStateException ise) {
passivate();
getInnermostDelegate().close();
} catch (final Exception ie) {
}
throw new SQLException(""Cannot close connection (isClosed check failed)"", e);
}
if (isUnderlyingConnectionClosed) {
// Abnormal close: underlying connection closed unexpectedly, so we
try {
pool.invalidateObject(this);
} catch (final IllegalStateException e) {
passivate();
getInnermostDelegate().close();
} catch (final Exception e) {
throw new SQLException(""Cannot close connection (invalidating pooled object failed)"", e);
}
} else {
// Normal close: underlying connection is still open, so we
try {
pool.returnObject(this);
} catch (final IllegalStateException e) {
passivate();
getInnermostDelegate().close();
} catch (final SQLException | RuntimeException e) {
throw e;
} catch (final Exception e) {
throw new SQLException(""Cannot close connection (return to pool failed)"", e);
}
}
}","@Override
public synchronized void close() throws SQLException {
if (isClosedInternal()) {
return;
}
boolean booleanVar1;
try {
booleanVar1 = getDelegateInternal().isClosed();
} catch (final SQLException e) {
try {
pool.invalidateObject(this);
} catch (final IllegalStateException ise) {
passivate();
getInnermostDelegate().close();
} catch (final Exception ie) {
}
throw new SQLException(""Cannot close connection (isClosed check failed)"", e);
}
if (booleanVar1) {
// Abnormal close: underlying connection closed unexpectedly, so we
try {
pool.invalidateObject(this);
} catch (final IllegalStateException e) {
passivate();
getInnermostDelegate().close();
} catch (final Exception e) {
throw new SQLException(""Cannot close connection (invalidating pooled object failed)"", e);
}
} else {
// Normal close: underlying connection is still open, so we
try {
pool.returnObject(this);
} catch (final IllegalStateException e) {
passivate();
getInnermostDelegate().close();
} catch (final SQLException | RuntimeException e) {
throw e;
} catch (final Exception e) {
throw new SQLException(""Cannot close connection (return to pool failed)"", e);
}
}
}"
9220,SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,FP,dbcp,117,"stmt.execute(sql);
","protected void initializeConnection(final Connection conn) throws SQLException {
final Collection<String> sqls = connectionInitSqls;
if (conn.isClosed()) {
throw new SQLException(""initializeConnection: connection closed"");
}
if (null != sqls) {
try (Statement stmt = conn.createStatement()) {
for (final String sql : sqls) {
Objects.requireNonNull(sql, ""null connectionInitSqls element"");
stmt.execute(sql);
}
}
}
}","protected void initializeConnection(final Connection conn) throws SQLException {
final Collection<String> collection<string>Var1 = collection<string>Literal2;
if (conn.isClosed()) {
throw new SQLException(""initializeConnection: connection closed"");
}
if (null != collection<string>Var1) {
try (Statement statementVar3 = statementLiteral4) {
for (final String stringVar5 : collection<string>Var1) {
Objects.requireNonNull(stringVar5, ""null connectionInitSqls element"");
statementVar3.execute(stringVar5);
}
}
}
}"
9225,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,dbcp,122,"return value != null ? value.toCharArray() : null;
","public static char[] toCharArray(final String value) {
return value != null ? value.toCharArray() : null;
}","public static char[] toCharArray(final String value) {
return value != null ? value.toCharArray() : null;
}"
9227,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,dbcp,124,"} catch (final Exception e) {
","@Deprecated
public static void closeQuietly(final Statement statement) {
if (statement != null) {
try {
statement.close();
} catch (final Exception e) {
}
}
}","@Deprecated
public static void closeQuietly(final Statement statement) {
if (statement != null) {
try {
statement.close();
} catch (final Exception e) {
}
}
}"
9228,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,dbcp,125,"} catch (final Exception e) {
","public static void closeQuietly(final AutoCloseable autoCloseable) {
if (autoCloseable != null) {
try {
autoCloseable.close();
} catch (final Exception e) {
}
}
}","public static void closeQuietly(final AutoCloseable autoCloseable) {
if (autoCloseable != null) {
try {
autoCloseable.close();
} catch (final Exception e) {
}
}
}"
9230,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,dbcp,127,"} catch (final Exception e) {
","@Deprecated
public static void closeQuietly(final ResultSet resultSet) {
if (resultSet != null) {
try {
resultSet.close();
} catch (final Exception e) {
}
}
}","@Deprecated
public static void closeQuietly(final ResultSet resultSet) {
if (resultSet != null) {
try {
resultSet.close();
} catch (final Exception e) {
}
}
}"
9236,SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,dbcp,133,"return new DelegatingPreparedStatement(this, pooledConnection.prepareStatement(sql, columnIndexes));
","@Override
public PreparedStatement prepareStatement(final String sql, final int[] columnIndexes) throws SQLException {
checkOpen();
try {
return new DelegatingPreparedStatement(this, pooledConnection.prepareStatement(sql, columnIndexes));
} catch (final SQLException e) {
handleException(e);
return null;
}
}","@Override
public PreparedStatement prepareStatement(final String sql, final int[] columnIndexes) throws SQLException {
checkOpen();
try {
return new DelegatingPreparedStatement(this, pooledConnection.prepareStatement(sql, columnIndexes));
} catch (final SQLException e) {
handleException(e);
return null;
}
}"
9249,DODGY_CODE,REC_CATCH_EXCEPTION,FP,dbcp,146,"} catch (final Exception e) {
","@Override
public boolean validateObject(final UserPassKey key, final PooledObject<PooledConnectionAndInfo> pooledObject) {
try {
validateLifetime(pooledObject);
} catch (final Exception e) {
return false;
}
boolean valid = false;
final PooledConnection pconn = pooledObject.getObject().getPooledConnection();
Connection conn = null;
validatingSet.add(pconn);
if (null == validationQuery) {
int timeoutSeconds = validationQueryTimeoutSeconds;
if (timeoutSeconds < 0) {
timeoutSeconds = 0;
}
try {
conn = pconn.getConnection();
valid = conn.isValid(timeoutSeconds);
} catch (final SQLException e) {
valid = false;
} finally {
Utils.closeQuietly(conn);
validatingSet.remove(pconn);
}
} else {
Statement stmt = null;
ResultSet rset = null;
validatingSet.add(pconn);
try {
conn = pconn.getConnection();
stmt = conn.createStatement();
rset = stmt.executeQuery(validationQuery);
valid = rset.next();
if (rollbackAfterValidation) {
conn.rollback();
}
} catch (final Exception e) {
valid = false;
} finally {
Utils.closeQuietly(rset);
Utils.closeQuietly(stmt);
Utils.closeQuietly(conn);
validatingSet.remove(pconn);
}
}
return valid;
}","@Override
public boolean validateObject(final UserPassKey key, final PooledObject<PooledConnectionAndInfo> pooledObject) {
try {
validateLifetime(pooledObject);
} catch (final Exception e) {
return false;
}
boolean booleanVar1 = booleanLiteral2;
final PooledConnection pooledconnectionVar3 = pooledconnectionLiteral4;
Connection connectionVar5 = connectionLiteral6;
validatingSet.add(pooledconnectionVar3);
if (null == validationQuery) {
int intVar7 = intLiteral8;
if (intVar7 < 0) {
intVar7 = 0;
}
try {
connectionVar5 = pooledconnectionVar3.getConnection();
booleanVar1 = connectionVar5.isValid(intVar7);
} catch (final SQLException e) {
booleanVar1 = false;
} finally {
Utils.closeQuietly(connectionVar5);
validatingSet.remove(pooledconnectionVar3);
}
} else {
Statement statementVar9 = connectionLiteral6;
ResultSet resultsetVar10 = connectionLiteral6;
validatingSet.add(pooledconnectionVar3);
try {
connectionVar5 = pooledconnectionVar3.getConnection();
statementVar9 = connectionVar5.createStatement();
resultsetVar10 = statementVar9.executeQuery(validationQuery);
booleanVar1 = resultsetVar10.next();
if (rollbackAfterValidation) {
connectionVar5.rollback();
}
} catch (final Exception e) {
booleanVar1 = false;
} finally {
Utils.closeQuietly(resultsetVar10);
Utils.closeQuietly(statementVar9);
Utils.closeQuietly(connectionVar5);
validatingSet.remove(pooledconnectionVar3);
}
}
return booleanVar1;
}"
9257,BAD_PRACTICE,NM_CONFUSING,FP,dbcp,154,"return this.connectionString;
","@Override
public synchronized String getUrl() {
return this.connectionString;
}","@Override
public synchronized String getUrl() {
return this.connectionString;
}"
9262,CORRECTNESS,NP_NONNULL_RETURN_VIOLATION,FP,dbcp,159,"return null;
","@SuppressWarnings(""resource"")
@Override
public PreparedStatement prepareStatement(final String sql) throws SQLException {
checkOpen();
try {
return init(new DelegatingPreparedStatement(this, connection.prepareStatement(sql)));
} catch (final SQLException e) {
handleException(e);
return null;
}
}","@SuppressWarnings(""resource"")
@Override
public PreparedStatement prepareStatement(final String sql) throws SQLException {
checkOpen();
try {
return init(new DelegatingPreparedStatement(this, connection.prepareStatement(sql)));
} catch (final SQLException e) {
handleException(e);
return null;
}
}"
9265,SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,dbcp,162,"connection.prepareStatement(sql, resultSetType, resultSetConcurrency)));
","@SuppressWarnings(""resource"")
@Override
public PreparedStatement prepareStatement(final String sql, final int resultSetType, final int resultSetConcurrency) throws SQLException {
checkOpen();
try {
return init(new DelegatingPreparedStatement(this, connection.prepareStatement(sql, resultSetType, resultSetConcurrency)));
} catch (final SQLException e) {
handleException(e);
return null;
}
}","@SuppressWarnings(""resource"")
@Override
public PreparedStatement prepareStatement(final String sql, final int resultSetType, final int resultSetConcurrency) throws SQLException {
checkOpen();
try {
return init(new DelegatingPreparedStatement(this, connection.prepareStatement(sql, resultSetType, resultSetConcurrency)));
} catch (final SQLException e) {
handleException(e);
return null;
}
}"
9266,SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,dbcp,163,"return init(new DelegatingPreparedStatement(this, connection.prepareStatement(sql, autoGeneratedKeys)));
","@SuppressWarnings(""resource"")
@Override
public PreparedStatement prepareStatement(final String sql, final int autoGeneratedKeys) throws SQLException {
checkOpen();
try {
return init(new DelegatingPreparedStatement(this, connection.prepareStatement(sql, autoGeneratedKeys)));
} catch (final SQLException e) {
handleException(e);
return null;
}
}","@SuppressWarnings(""resource"")
@Override
public PreparedStatement prepareStatement(final String sql, final int autoGeneratedKeys) throws SQLException {
checkOpen();
try {
return init(new DelegatingPreparedStatement(this, connection.prepareStatement(sql, autoGeneratedKeys)));
} catch (final SQLException e) {
handleException(e);
return null;
}
}"
9267,SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,dbcp,164,"return init(new DelegatingPreparedStatement(this, connection.prepareStatement(sql, columnIndexes)));
","@SuppressWarnings(""resource"")
@Override
public PreparedStatement prepareStatement(final String sql, final int[] columnIndexes) throws SQLException {
checkOpen();
try {
return init(new DelegatingPreparedStatement(this, connection.prepareStatement(sql, columnIndexes)));
} catch (final SQLException e) {
handleException(e);
return null;
}
}","@SuppressWarnings(""resource"")
@Override
public PreparedStatement prepareStatement(final String sql, final int[] columnIndexes) throws SQLException {
checkOpen();
try {
return init(new DelegatingPreparedStatement(this, connection.prepareStatement(sql, columnIndexes)));
} catch (final SQLException e) {
handleException(e);
return null;
}
}"
9292,MALICIOUS_CODE,MS_MUTABLE_COLLECTION_PKGPROTECT,FP,dbcp,189,"protected static final HashMap<String, ObjectPool<? extends Connection>> pools = new HashMap<>();","protected static final HashMap<String, ObjectPool<? extends Connection>> pools = new HashMap<>();","protected static final HashMap<String, ObjectPool<? extends Connection>> hashmap<string,objectpool<? extends connection>>Var1 = hashmap<string,objectpool<? extends connection>>Literal2;"
9298,SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,dbcp,195,"return new DelegatingPreparedStatement(this, pooledConnection.prepareStatement(sql));
","@Override
public PreparedStatement prepareStatement(final String sql) throws SQLException {
checkOpen();
try {
return new DelegatingPreparedStatement(this, pooledConnection.prepareStatement(sql));
} catch (final SQLException e) {
handleException(e);
return null;
}
}","@Override
public PreparedStatement prepareStatement(final String sql) throws SQLException {
checkOpen();
try {
return new DelegatingPreparedStatement(this, pooledConnection.prepareStatement(sql));
} catch (final SQLException e) {
handleException(e);
return null;
}
}"
9311,DODGY_CODE,REC_CATCH_EXCEPTION,FP,dbcp,208,"} catch (final Exception e) {
","@Override
public boolean validateObject(final PooledObject<PooledConnectionAndInfo> p) {
try {
validateLifetime(p);
} catch (final Exception e) {
return false;
}
boolean valid = false;
final PooledConnection pconn = p.getObject().getPooledConnection();
Connection conn = null;
validatingSet.add(pconn);
if (null == validationQuery) {
Duration timeoutDuration = validationQueryTimeoutDuration;
if (timeoutDuration.isNegative()) {
timeoutDuration = Duration.ZERO;
}
try {
conn = pconn.getConnection();
valid = conn.isValid((int) timeoutDuration.getSeconds());
} catch (final SQLException e) {
valid = false;
} finally {
Utils.closeQuietly((AutoCloseable) conn);
validatingSet.remove(pconn);
}
} else {
Statement stmt = null;
ResultSet rset = null;
validatingSet.add(pconn);
try {
conn = pconn.getConnection();
stmt = conn.createStatement();
rset = stmt.executeQuery(validationQuery);
valid = rset.next();
if (rollbackAfterValidation) {
conn.rollback();
}
} catch (final Exception e) {
valid = false;
} finally {
Utils.closeQuietly((AutoCloseable) rset);
Utils.closeQuietly((AutoCloseable) stmt);
Utils.closeQuietly((AutoCloseable) conn);
validatingSet.remove(pconn);
}
}
return valid;
}","@Override
public boolean validateObject(final PooledObject<PooledConnectionAndInfo> p) {
try {
validateLifetime(p);
} catch (final Exception e) {
return false;
}
boolean booleanVar1 = booleanLiteral2;
final PooledConnection pooledconnectionVar3 = pooledconnectionLiteral4;
Connection connectionVar5 = connectionLiteral6;
validatingSet.add(pooledconnectionVar3);
if (null == validationQuery) {
Duration durationVar7 = durationLiteral8;
if (durationVar7.isNegative()) {
durationVar7 = Duration.ZERO;
}
try {
connectionVar5 = pooledconnectionVar3.getConnection();
booleanVar1 = connectionVar5.isValid((int) durationVar7.getSeconds());
} catch (final SQLException e) {
booleanVar1 = false;
} finally {
Utils.closeQuietly((AutoCloseable) connectionVar5);
validatingSet.remove(pooledconnectionVar3);
}
} else {
Statement statementVar9 = connectionLiteral6;
ResultSet resultsetVar10 = connectionLiteral6;
validatingSet.add(pooledconnectionVar3);
try {
connectionVar5 = pooledconnectionVar3.getConnection();
statementVar9 = connectionVar5.createStatement();
resultsetVar10 = statementVar9.executeQuery(validationQuery);
booleanVar1 = resultsetVar10.next();
if (rollbackAfterValidation) {
connectionVar5.rollback();
}
} catch (final Exception e) {
booleanVar1 = false;
} finally {
Utils.closeQuietly((AutoCloseable) resultsetVar10);
Utils.closeQuietly((AutoCloseable) statementVar9);
Utils.closeQuietly((AutoCloseable) connectionVar5);
validatingSet.remove(pooledconnectionVar3);
}
}
return booleanVar1;
}"
9313,DODGY_CODE,NP_LOAD_OF_KNOWN_NULL_VALUE,FP,dbcp,210,"closeDueToException(info);
","@Override
public Connection getConnection(final String userName, final String userPassword) throws SQLException {
if (instanceKey == null) {
throw new SQLException(""Must set the ConnectionPoolDataSource "" + ""through setDataSourceName or setConnectionPoolDataSource"" + "" before calling getConnection."");
}
getConnectionCalled = true;
PooledConnectionAndInfo info = null;
try {
info = getPooledConnectionAndInfo(userName, userPassword);
} catch (final RuntimeException | SQLException e) {
closeDueToException(info);
throw e;
} catch (final Exception e) {
closeDueToException(info);
throw new SQLException(""Cannot borrow connection from pool"", e);
}
if (!(null == userPassword ? null == info.getPassword() : userPassword.equals(info.getPassword()))) {
try {
testCPDS(userName, userPassword);
} catch (final SQLException ex) {
closeDueToException(info);
throw new SQLException(""Given password did not match password used"" + "" to create the PooledConnection."", ex);
} catch (final javax.naming.NamingException ne) {
throw new SQLException(""NamingException encountered connecting to database"", ne);
}
final UserPassKey upkey = info.getUserPassKey();
final PooledConnectionManager manager = getConnectionManager(upkey);
manager.invalidate(info.getPooledConnection());
manager.setPassword(upkey.getPassword());
info = null;
for (int i = 0; i < 10; i++) {
try {
info = getPooledConnectionAndInfo(userName, userPassword);
} catch (final RuntimeException | SQLException e) {
closeDueToException(info);
throw e;
} catch (final Exception e) {
closeDueToException(info);
throw new SQLException(""Cannot borrow connection from pool"", e);
}
if (info != null && userPassword != null && userPassword.equals(info.getPassword())) {
break;
}
if (info != null) {
manager.invalidate(info.getPooledConnection());
}
info = null;
}
if (info == null) {
throw new SQLException(""Cannot borrow connection from pool - password change failure."");
}
}
final Connection connection = info.getPooledConnection().getConnection();
try {
setupDefaults(connection, userName);
connection.clearWarnings();
return connection;
} catch (final SQLException ex) {
Utils.close(connection, e -> getLogWriter().println(""ignoring exception during close: "" + e));
throw ex;
}
}","@Override
public Connection getConnection(final String userName, final String userPassword) throws SQLException {
if (instanceKey == null) {
throw new SQLException(""Must set the ConnectionPoolDataSource "" + ""through setDataSourceName or setConnectionPoolDataSource"" + "" before calling getConnection."");
}
getConnectionCalled = true;
PooledConnectionAndInfo pooledconnectionandinfoVar1 = pooledconnectionandinfoLiteral2;
try {
pooledconnectionandinfoVar1 = getPooledConnectionAndInfo(userName, userPassword);
} catch (final RuntimeException | SQLException e) {
closeDueToException(pooledconnectionandinfoVar1);
throw e;
} catch (final Exception e) {
closeDueToException(pooledconnectionandinfoVar1);
throw new SQLException(""Cannot borrow connection from pool"", e);
}
if (!(null == userPassword ? null == pooledconnectionandinfoVar1.getPassword() : userPassword.equals(pooledconnectionandinfoVar1.getPassword()))) {
try {
testCPDS(userName, userPassword);
} catch (final SQLException ex) {
closeDueToException(pooledconnectionandinfoVar1);
throw new SQLException(""Given password did not match password used"" + "" to create the PooledConnection."", ex);
} catch (final javax.naming.NamingException ne) {
throw new SQLException(""NamingException encountered connecting to database"", ne);
}
final UserPassKey userpasskeyVar3 = userpasskeyLiteral4;
final PooledConnectionManager pooledconnectionmanagerVar5 = pooledconnectionmanagerLiteral6;
pooledconnectionmanagerVar5.invalidate(pooledconnectionandinfoVar1.getPooledConnection());
pooledconnectionmanagerVar5.setPassword(userpasskeyVar3.getPassword());
pooledconnectionandinfoVar1 = null;
for (int intVar11 = intLiteral12; intVar7 < intLiteral1; intVar7++) {
try {
pooledconnectionandinfoVar1 = getPooledConnectionAndInfo(userName, userPassword);
} catch (final RuntimeException | SQLException e) {
closeDueToException(pooledconnectionandinfoVar1);
throw e;
} catch (final Exception e) {
closeDueToException(pooledconnectionandinfoVar1);
throw new SQLException(""Cannot borrow connection from pool"", e);
}
if (pooledconnectionandinfoVar1 != null && userPassword != null && userPassword.equals(pooledconnectionandinfoVar1.getPassword())) {
break;
}
if (pooledconnectionandinfoVar1 != null) {
pooledconnectionmanagerVar5.invalidate(pooledconnectionandinfoVar1.getPooledConnection());
}
pooledconnectionandinfoVar1 = null;
}
if (pooledconnectionandinfoVar1 == null) {
throw new SQLException(""Cannot borrow connection from pool - password change failure."");
}
}
final Connection connectionVar9 = connectionLiteral10;
try {
setupDefaults(connectionVar9, userName);
connectionVar9.clearWarnings();
return connectionVar9;
} catch (final SQLException ex) {
Utils.close(connectionVar9, e -> getLogWriter().println(""ignoring exception during close: "" + e));
throw ex;
}
}"
9528,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,dbcp,425,"} catch (final Exception e) {
","@Deprecated
public static void closeQuietly(final Connection connection) {
if (connection != null) {
try {
connection.close();
} catch (final Exception e) {
}
}
}","@Deprecated
public static void closeQuietly(final Connection connection) {
if (connection != null) {
try {
connection.close();
} catch (final Exception e) {
}
}
}"
9529,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,dbcp,426,"} catch (final Exception ignored) {
","public void clear() {
for (final PooledConnectionManager manager : managers.values()) {
try {
getCPDSConnectionFactoryPool(manager).clear();
} catch (final Exception ignored) {
}
}
InstanceKeyDataSourceFactory.removeInstance(getInstanceKey());
}","public void clear() {
for (final PooledConnectionManager pooledconnectionmanagerVar1 : managers.values()) {
try {
getCPDSConnectionFactoryPool(pooledconnectionmanagerVar1).clear();
} catch (final Exception ignored) {
}
}
InstanceKeyDataSourceFactory.removeInstance(getInstanceKey());
}"
9535,DODGY_CODE,NP_LOAD_OF_KNOWN_NULL_VALUE,FP,dbcp,432,"closeDueToException(info);
","@Override
public Connection getConnection(final String userName, final String userPassword) throws SQLException {
if (instanceKey == null) {
throw new SQLException(""Must set the ConnectionPoolDataSource "" + ""through setDataSourceName or setConnectionPoolDataSource"" + "" before calling getConnection."");
}
getConnectionCalled = true;
PooledConnectionAndInfo info = null;
try {
info = getPooledConnectionAndInfo(userName, userPassword);
} catch (final NoSuchElementException e) {
closeDueToException(info);
throw new SQLException(""Cannot borrow connection from pool"", e);
} catch (final RuntimeException | SQLException e) {
closeDueToException(info);
throw e;
} catch (final Exception e) {
closeDueToException(info);
throw new SQLException(""Cannot borrow connection from pool"", e);
}
if (!(null == userPassword ? null == info.getPassword() : userPassword.equals(info.getPassword()))) {
try {
testCPDS(userName, userPassword);
} catch (final SQLException ex) {
closeDueToException(info);
throw new SQLException(""Given password did not match password used"" + "" to create the PooledConnection."", ex);
} catch (final javax.naming.NamingException ne) {
throw new SQLException(""NamingException encountered connecting to database"", ne);
}
final UserPassKey upkey = info.getUserPassKey();
final PooledConnectionManager manager = getConnectionManager(upkey);
manager.invalidate(info.getPooledConnection());
manager.setPassword(upkey.getPassword());
info = null;
for (int i = 0; i < 10; i++) {
try {
info = getPooledConnectionAndInfo(userName, userPassword);
} catch (final NoSuchElementException e) {
closeDueToException(info);
throw new SQLException(""Cannot borrow connection from pool"", e);
} catch (final RuntimeException | SQLException e) {
closeDueToException(info);
throw e;
} catch (final Exception e) {
closeDueToException(info);
throw new SQLException(""Cannot borrow connection from pool"", e);
}
if (info != null && userPassword != null && userPassword.equals(info.getPassword())) {
break;
}
if (info != null) {
manager.invalidate(info.getPooledConnection());
}
info = null;
}
if (info == null) {
throw new SQLException(""Cannot borrow connection from pool - password change failure."");
}
}
final Connection con = info.getPooledConnection().getConnection();
try {
setupDefaults(con, userName);
con.clearWarnings();
return con;
} catch (final SQLException ex) {
try {
con.close();
} catch (final Exception exc) {
getLogWriter().println(""ignoring exception during close: "" + exc);
}
throw ex;
}
}","@Override
public Connection getConnection(final String userName, final String userPassword) throws SQLException {
if (instanceKey == null) {
throw new SQLException(""Must set the ConnectionPoolDataSource "" + ""through setDataSourceName or setConnectionPoolDataSource"" + "" before calling getConnection."");
}
getConnectionCalled = true;
PooledConnectionAndInfo pooledconnectionandinfoVar1 = pooledconnectionandinfoLiteral2;
try {
pooledconnectionandinfoVar1 = getPooledConnectionAndInfo(userName, userPassword);
} catch (final NoSuchElementException e) {
closeDueToException(pooledconnectionandinfoVar1);
throw new SQLException(""Cannot borrow connection from pool"", e);
} catch (final RuntimeException | SQLException e) {
closeDueToException(pooledconnectionandinfoVar1);
throw e;
} catch (final Exception e) {
closeDueToException(pooledconnectionandinfoVar1);
throw new SQLException(""Cannot borrow connection from pool"", e);
}
if (!(null == userPassword ? null == pooledconnectionandinfoVar1.getPassword() : userPassword.equals(pooledconnectionandinfoVar1.getPassword()))) {
try {
testCPDS(userName, userPassword);
} catch (final SQLException ex) {
closeDueToException(pooledconnectionandinfoVar1);
throw new SQLException(""Given password did not match password used"" + "" to create the PooledConnection."", ex);
} catch (final javax.naming.NamingException ne) {
throw new SQLException(""NamingException encountered connecting to database"", ne);
}
final UserPassKey userpasskeyVar3 = userpasskeyLiteral4;
final PooledConnectionManager pooledconnectionmanagerVar5 = pooledconnectionmanagerLiteral6;
pooledconnectionmanagerVar5.invalidate(pooledconnectionandinfoVar1.getPooledConnection());
pooledconnectionmanagerVar5.setPassword(userpasskeyVar3.getPassword());
pooledconnectionandinfoVar1 = null;
for (int intVar11 = intLiteral12; intVar7 < intLiteral1; intVar7++) {
try {
pooledconnectionandinfoVar1 = getPooledConnectionAndInfo(userName, userPassword);
} catch (final NoSuchElementException e) {
closeDueToException(pooledconnectionandinfoVar1);
throw new SQLException(""Cannot borrow connection from pool"", e);
} catch (final RuntimeException | SQLException e) {
closeDueToException(pooledconnectionandinfoVar1);
throw e;
} catch (final Exception e) {
closeDueToException(pooledconnectionandinfoVar1);
throw new SQLException(""Cannot borrow connection from pool"", e);
}
if (pooledconnectionandinfoVar1 != null && userPassword != null && userPassword.equals(pooledconnectionandinfoVar1.getPassword())) {
break;
}
if (pooledconnectionandinfoVar1 != null) {
pooledconnectionmanagerVar5.invalidate(pooledconnectionandinfoVar1.getPooledConnection());
}
pooledconnectionandinfoVar1 = null;
}
if (pooledconnectionandinfoVar1 == null) {
throw new SQLException(""Cannot borrow connection from pool - password change failure."");
}
}
final Connection connectionVar9 = connectionLiteral10;
try {
setupDefaults(connectionVar9, userName);
connectionVar9.clearWarnings();
return connectionVar9;
} catch (final SQLException ex) {
try {
connectionVar9.close();
} catch (final Exception exc) {
getLogWriter().println(""ignoring exception during close: "" + exc);
}
throw ex;
}
}"
9537,SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,dbcp,434,"connection.prepareStatement(sql, resultSetType, resultSetConcurrency));
","@Override
public PreparedStatement prepareStatement(final String sql, final int resultSetType, final int resultSetConcurrency) throws SQLException {
checkOpen();
try {
final DelegatingPreparedStatement dps = new DelegatingPreparedStatement(this, connection.prepareStatement(sql, resultSetType, resultSetConcurrency));
initializeStatement(dps);
return dps;
} catch (final SQLException e) {
handleException(e);
return null;
}
}","@Override
public PreparedStatement prepareStatement(final String sql, final int resultSetType, final int resultSetConcurrency) throws SQLException {
checkOpen();
try {
final DelegatingPreparedStatement delegatingpreparedstatementVar1 = delegatingpreparedstatementLiteral2;
initializeStatement(delegatingpreparedstatementVar1);
return delegatingpreparedstatementVar1;
} catch (final SQLException e) {
handleException(e);
return null;
}
}"
9542,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,dbcp,439,"} catch (final Exception e) {
","public void invalidateConnection(final Connection conn) throws SQLException {
if (conn instanceof PoolGuardConnectionWrapper) {
final PoolGuardConnectionWrapper pgconn = (PoolGuardConnectionWrapper) conn;
@SuppressWarnings(""unchecked"")
final ObjectPool<Connection> pool = (ObjectPool<Connection>) pgconn.pool;
try {
pool.invalidateObject(pgconn.getDelegateInternal());
} catch (final Exception e) {
}
} else {
throw new SQLException(""Invalid connection class"");
}
}","public void invalidateConnection(final Connection conn) throws SQLException {
if (conn instanceof PoolGuardConnectionWrapper) {
final PoolGuardConnectionWrapper poolguardconnectionwrapperVar1 = poolguardconnectionwrapperLiteral2;
@SuppressWarnings(""unchecked"")
final ObjectPool<Connection> objectpool<connection>Var3 = objectpool<connection>Literal4;
try {
objectpool<connection>Var3.invalidateObject(poolguardconnectionwrapperVar1.getDelegateInternal());
} catch (final Exception e) {
}
} else {
throw new SQLException(""Invalid connection class"");
}
}"
9564,SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,dbcp,461,"connection.prepareStatement(sql));
","@Override
public PreparedStatement prepareStatement(final String sql) throws SQLException {
checkOpen();
try {
final DelegatingPreparedStatement dps = new DelegatingPreparedStatement(this, connection.prepareStatement(sql));
initializeStatement(dps);
return dps;
} catch (final SQLException e) {
handleException(e);
return null;
}
}","@Override
public PreparedStatement prepareStatement(final String sql) throws SQLException {
checkOpen();
try {
final DelegatingPreparedStatement delegatingpreparedstatementVar1 = delegatingpreparedstatementLiteral2;
initializeStatement(delegatingpreparedstatementVar1);
return delegatingpreparedstatementVar1;
} catch (final SQLException e) {
handleException(e);
return null;
}
}"
9571,SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,FP,dbcp,468,"return statement.execute(sql);
","@Override
public boolean execute(final String sql) throws SQLException {
checkOpen();
setLastUsedInParent();
try {
return statement.execute(sql);
} catch (final SQLException e) {
handleException(e);
return false;
}
}","@Override
public boolean execute(final String sql) throws SQLException {
checkOpen();
setLastUsedInParent();
try {
return statement.execute(sql);
} catch (final SQLException e) {
handleException(e);
return false;
}
}"
9574,PERFORMANCE,WMI_WRONG_MAP_ITERATOR,FP,dbcp,471,"stringBuilder.append(NUPROP_WARNTEXT.get(propertyName)).append("" You have set value of \"""")
","private void validatePropertyNames(final Reference ref, final Name name, final List<String> warnings, final List<String> infoMessages) {
final List<String> allPropsAsList = Arrays.asList(ALL_PROPERTIES);
final String nameString = name != null ? ""Name = "" + name.toString() + "" "" : """";
if (NUPROP_WARNTEXT != null && !NUPROP_WARNTEXT.isEmpty()) {
for (final String propertyName : NUPROP_WARNTEXT.keySet()) {
final RefAddr ra = ref.get(propertyName);
if (ra != null && !allPropsAsList.contains(ra.getType())) {
final StringBuilder stringBuilder = new StringBuilder(nameString);
final String propertyValue = ra.getContent().toString();
stringBuilder.append(NUPROP_WARNTEXT.get(propertyName)).append("" You have set value of \"""").append(propertyValue).append(""\"" for \"""").append(propertyName).append(""\"" property, which is being ignored."");
warnings.add(stringBuilder.toString());
}
}
}
final Enumeration<RefAddr> allRefAddrs = ref.getAll();
while (allRefAddrs.hasMoreElements()) {
final RefAddr ra = allRefAddrs.nextElement();
final String propertyName = ra.getType();
if (!(allPropsAsList.contains(propertyName) || NUPROP_WARNTEXT.containsKey(propertyName) || SILENT_PROPERTIES.contains(propertyName))) {
final String propertyValue = ra.getContent().toString();
final StringBuilder stringBuilder = new StringBuilder(nameString);
stringBuilder.append(""Ignoring unknown property: "").append(""value of \"""").append(propertyValue).append(""\"" for \"""").append(propertyName).append(""\"" property"");
infoMessages.add(stringBuilder.toString());
}
}
}","private void validatePropertyNames(final Reference ref, final Name name, final List<String> warnings, final List<String> infoMessages) {
final List<String> list<string>Var1 = list<string>Literal2;
final String stringVar3 = stringLiteral4;
if (NUPROP_WARNTEXT != null && !NUPROP_WARNTEXT.isEmpty()) {
for (final String stringVar5 : NUPROP_WARNTEXT.keySet()) {
final RefAddr refaddrVar6 = refaddrLiteral7;
if (refaddrVar6 != null && !list<string>Var1.contains(refaddrVar6.getType())) {
final StringBuilder stringbuilderVar8 = stringbuilderLiteral9;
final String stringVar10 = stringLiteral11;
stringbuilderVar8.append(NUPROP_WARNTEXT.get(stringVar5)).append("" You have set value of \"""").append(stringVar10).append(""\"" for \"""").append(stringVar5).append(""\"" property, which is being ignored."");
warnings.add(stringbuilderVar8.toString());
}
}
}
final Enumeration<RefAddr> enumeration<refaddr>Var12 = enumeration<refaddr>Literal13;
while (enumeration<refaddr>Var12.hasMoreElements()) {
final RefAddr refaddrVar6 = refaddrLiteral14;
final String stringVar5 = stringLiteral15;
if (!(list<string>Var1.contains(stringVar5) || NUPROP_WARNTEXT.containsKey(stringVar5) || SILENT_PROPERTIES.contains(stringVar5))) {
final String stringVar10 = stringLiteral11;
final StringBuilder stringbuilderVar8 = stringbuilderLiteral9;
stringbuilderVar8.append(""Ignoring unknown property: "").append(""value of \"""").append(stringVar10).append(""\"" for \"""").append(stringVar5).append(""\"" property"");
infoMessages.add(stringbuilderVar8.toString());
}
}
}"
9581,SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,FP,dbcp,478,"return statement.executeLargeUpdate(sql, autoGeneratedKeys);
","@Override
public long executeLargeUpdate(final String sql, final int autoGeneratedKeys) throws SQLException {
checkOpen();
setLastUsedInParent();
try {
return statement.executeLargeUpdate(sql, autoGeneratedKeys);
} catch (final SQLException e) {
handleException(e);
return 0;
}
}","@Override
public long executeLargeUpdate(final String sql, final int autoGeneratedKeys) throws SQLException {
checkOpen();
setLastUsedInParent();
try {
return statement.executeLargeUpdate(sql, autoGeneratedKeys);
} catch (final SQLException e) {
handleException(e);
return 0;
}
}"
9603,DODGY_CODE,REC_CATCH_EXCEPTION,FP,dbcp,500,"} catch (final Exception e) {
","@Override
public boolean validateObject(final PooledObject<PooledConnectionAndInfo> p) {
try {
validateLifetime(p);
} catch (final Exception e) {
return false;
}
boolean valid = false;
final PooledConnection pconn = p.getObject().getPooledConnection();
Connection conn = null;
validatingSet.add(pconn);
if (null == validationQuery) {
int timeoutSeconds = validationQueryTimeoutSeconds;
if (timeoutSeconds < 0) {
timeoutSeconds = 0;
}
try {
conn = pconn.getConnection();
valid = conn.isValid(timeoutSeconds);
} catch (final SQLException e) {
valid = false;
} finally {
Utils.closeQuietly(conn);
validatingSet.remove(pconn);
}
} else {
Statement stmt = null;
ResultSet rset = null;
validatingSet.add(pconn);
try {
conn = pconn.getConnection();
stmt = conn.createStatement();
rset = stmt.executeQuery(validationQuery);
valid = rset.next();
if (rollbackAfterValidation) {
conn.rollback();
}
} catch (final Exception e) {
valid = false;
} finally {
Utils.closeQuietly(rset);
Utils.closeQuietly(stmt);
Utils.closeQuietly(conn);
validatingSet.remove(pconn);
}
}
return valid;
}","@Override
public boolean validateObject(final PooledObject<PooledConnectionAndInfo> p) {
try {
validateLifetime(p);
} catch (final Exception e) {
return false;
}
boolean booleanVar1 = booleanLiteral2;
final PooledConnection pooledconnectionVar3 = pooledconnectionLiteral4;
Connection connectionVar5 = connectionLiteral6;
validatingSet.add(pooledconnectionVar3);
if (null == validationQuery) {
int intVar7 = intLiteral8;
if (intVar7 < 0) {
intVar7 = 0;
}
try {
connectionVar5 = pooledconnectionVar3.getConnection();
booleanVar1 = connectionVar5.isValid(intVar7);
} catch (final SQLException e) {
booleanVar1 = false;
} finally {
Utils.closeQuietly(connectionVar5);
validatingSet.remove(pooledconnectionVar3);
}
} else {
Statement statementVar9 = connectionLiteral6;
ResultSet resultsetVar10 = connectionLiteral6;
validatingSet.add(pooledconnectionVar3);
try {
connectionVar5 = pooledconnectionVar3.getConnection();
statementVar9 = connectionVar5.createStatement();
resultsetVar10 = statementVar9.executeQuery(validationQuery);
booleanVar1 = resultsetVar10.next();
if (rollbackAfterValidation) {
connectionVar5.rollback();
}
} catch (final Exception e) {
booleanVar1 = false;
} finally {
Utils.closeQuietly(resultsetVar10);
Utils.closeQuietly(statementVar9);
Utils.closeQuietly(connectionVar5);
validatingSet.remove(pooledconnectionVar3);
}
}
return booleanVar1;
}"
9608,SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,FP,dbcp,505,"return statement.execute(sql, columnNames);
","@Override
public boolean execute(final String sql, final String[] columnNames) throws SQLException {
checkOpen();
setLastUsedInParent();
try {
return statement.execute(sql, columnNames);
} catch (final SQLException e) {
handleException(e);
return false;
}
}","@Override
public boolean execute(final String sql, final String[] columnNames) throws SQLException {
checkOpen();
setLastUsedInParent();
try {
return statement.execute(sql, columnNames);
} catch (final SQLException e) {
handleException(e);
return false;
}
}"
9617,Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,dbcp,514,private boolean closed;,private boolean closed;,private boolean booleanVar1;
9629,DODGY_CODE,UC_USELESS_CONDITION,FP,digester,5,"if ( paramTypes.length == 0 )
","@Override
public void end(String namespace, String name) throws Exception {
Object[] parameters;
if (paramCount > 0) {
parameters = getDigester().popParams();
if (getDigester().getLogger().isTraceEnabled()) {
for (int i = 0, size = parameters.length; i < size; i++) {
getDigester().getLogger().trace(format(""[CallMethodRule]{%s} parameters[%s]=%s"", getDigester().getMatch(), i, parameters[i]));
}
}
if (paramCount == 1 && parameters[0] == null) {
return;
}
} else if (paramTypes != null && paramTypes.length != 0) {
if (bodyText == null) {
return;
}
parameters = new Object[] { bodyText };
if (paramTypes.length == 0) {
paramTypes = new Class[] { String.class };
}
} else {
parameters = new Object[0];
paramTypes = new Class<?>[0];
}
Object[] paramValues = new Object[paramTypes.length];
for (int i = 0; i < paramTypes.length; i++) {
if (parameters[i] == null || (parameters[i] instanceof String && !String.class.isAssignableFrom(paramTypes[i]))) {
paramValues[i] = convert((String) parameters[i], paramTypes[i]);
} else {
paramValues[i] = parameters[i];
}
}
Object target;
if (targetOffset >= 0) {
target = getDigester().peek(targetOffset);
} else {
target = getDigester().peek(getDigester().getCount() + targetOffset);
}
if (target == null) {
throw new SAXException(format(""[CallMethodRule]{%s} Call target is null (targetOffset=%s, stackdepth=%s)"", getDigester().getMatch(), targetOffset, getDigester().getCount()));
}
if (getDigester().getLogger().isDebugEnabled()) {
Formatter formatter = new Formatter().format(""[CallMethodRule]{%s} Call %s.%s("", getDigester().getMatch(), target.getClass().getName(), methodName);
for (int i = 0; i < paramValues.length; i++) {
formatter.format(""%s%s/%s"", (i > 0 ? "", "" : """"), paramValues[i], paramTypes[i].getName());
}
formatter.format("")"");
getDigester().getLogger().debug(formatter.toString());
}
Object result = null;
if (useExactMatch) {
result = invokeExactMethod(target, methodName, paramValues, paramTypes);
} else {
result = invokeMethod(target, methodName, paramValues, paramTypes);
}
processMethodCallResult(result);
}","@Override
public void end(String namespace, String name) throws Exception {
Object[] objectArrayVar1;
if (paramCount > 0) {
objectArrayVar1 = getDigester().popParams();
if (getDigester().getLogger().isTraceEnabled()) {
for (int intVar13 = intLiteral14, intVar15 = intLiteral16; intVar2 < intLiteral1; intVar2++) {
getDigester().getLogger().trace(format(""[CallMethodRule]{%s} parameters[%s]=%s"", getDigester().getMatch(), intVar2, objectArrayVar1[intVar2]));
}
}
if (paramCount == 1 && objectArrayVar1[0] == null) {
return;
}
} else if (paramTypes != null && paramTypes.length != 0) {
if (bodyText == null) {
return;
}
objectArrayVar1 = new Object[] { bodyText };
if (paramTypes.length == 0) {
paramTypes = new Class[] { String.class };
}
} else {
objectArrayVar1 = new Object[0];
paramTypes = new Class<?>[0];
}
Object[] objectArrayVar6 = objectArrayLiteral7;
for (int intVar13 = intLiteral14; intVar2 < intLiteral2; intVar2++) {
if (objectArrayVar1[intVar2] == null || (objectArrayVar1[intVar2] instanceof String && !String.class.isAssignableFrom(paramTypes[intVar2]))) {
objectArrayVar6[intVar2] = convert((String) objectArrayVar1[intVar2], paramTypes[intVar2]);
} else {
objectArrayVar6[intVar2] = objectArrayVar1[intVar2];
}
}
Object objectVar8;
if (targetOffset >= 0) {
objectVar8 = getDigester().peek(targetOffset);
} else {
objectVar8 = getDigester().peek(getDigester().getCount() + targetOffset);
}
if (objectVar8 == null) {
throw new SAXException(format(""[CallMethodRule]{%s} Call target is null (targetOffset=%s, stackdepth=%s)"", getDigester().getMatch(), targetOffset, getDigester().getCount()));
}
if (getDigester().getLogger().isDebugEnabled()) {
Formatter formatterVar9 = formatterLiteral10;
for (int intVar13 = intLiteral14; intVar2 < intLiteral3; intVar2++) {
formatterVar9.format(""%s%s/%s"", (intVar2 > 0 ? "", "" : """"), objectArrayVar6[intVar2], paramTypes[intVar2].getName());
}
formatterVar9.format("")"");
getDigester().getLogger().debug(formatterVar9.toString());
}
Object objectVar11 = objectLiteral12;
if (useExactMatch) {
objectVar11 = invokeExactMethod(objectVar8, methodName, objectArrayVar6, paramTypes);
} else {
objectVar11 = invokeMethod(objectVar8, methodName, objectArrayVar6, paramTypes);
}
processMethodCallResult(objectVar11);
}"
9634,PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,digester,10,"{
public Field[] run()
{
return type.getDeclaredFields();
","protected final void bindRulesFrom(final Class<?> type) {
if (type == null || type.getPackage().getName().startsWith(JAVA_PACKAGE) || rulesBinder.isAlreadyBound(type)) {
return;
}
visitElements(type);
if (!type.isInterface()) {
visitElements(new PrivilegedAction<Constructor<?>[]>() {
public Constructor<?>[] run() {
return type.getDeclaredConstructors();
}
});
visitElements(new PrivilegedAction<Field[]>() {
public Field[] run() {
return type.getDeclaredFields();
}
});
}
visitElements(new PrivilegedAction<Method[]>() {
public Method[] run() {
return type.getDeclaredMethods();
}
});
rulesBinder.markAsBound(type);
bindRulesFrom(type.getSuperclass());
}","protected final void bindRulesFrom(final Class<?> type) {
if (type == null || type.getPackage().getName().startsWith(JAVA_PACKAGE) || rulesBinder.isAlreadyBound(type)) {
return;
}
visitElements(type);
if (!type.isInterface()) {
visitElements(new PrivilegedAction<Constructor<?>[]>() {
public Constructor<?>[] run() {
return type.getDeclaredConstructors();
}
});
visitElements(new PrivilegedAction<Field[]>() {
public Field[] run() {
return type.getDeclaredFields();
}
});
}
visitElements(new PrivilegedAction<Method[]>() {
public Method[] run() {
return type.getDeclaredMethods();
}
});
rulesBinder.markAsBound(type);
bindRulesFrom(type.getSuperclass());
}"
9637,PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,digester,13,"{
public Constructor<?>[] run()
{
return type.getDeclaredConstructors();
","protected final void bindRulesFrom(final Class<?> type) {
if (type == null || type.getPackage().getName().startsWith(JAVA_PACKAGE) || rulesBinder.isAlreadyBound(type)) {
return;
}
visitElements(type);
if (!type.isInterface()) {
visitElements(new PrivilegedAction<Constructor<?>[]>() {
public Constructor<?>[] run() {
return type.getDeclaredConstructors();
}
});
visitElements(new PrivilegedAction<Field[]>() {
public Field[] run() {
return type.getDeclaredFields();
}
});
}
visitElements(new PrivilegedAction<Method[]>() {
public Method[] run() {
return type.getDeclaredMethods();
}
});
rulesBinder.markAsBound(type);
bindRulesFrom(type.getSuperclass());
}","protected final void bindRulesFrom(final Class<?> type) {
if (type == null || type.getPackage().getName().startsWith(JAVA_PACKAGE) || rulesBinder.isAlreadyBound(type)) {
return;
}
visitElements(type);
if (!type.isInterface()) {
visitElements(new PrivilegedAction<Constructor<?>[]>() {
public Constructor<?>[] run() {
return type.getDeclaredConstructors();
}
});
visitElements(new PrivilegedAction<Field[]>() {
public Field[] run() {
return type.getDeclaredFields();
}
});
}
visitElements(new PrivilegedAction<Method[]>() {
public Method[] run() {
return type.getDeclaredMethods();
}
});
rulesBinder.markAsBound(type);
bindRulesFrom(type.getSuperclass());
}"
9771,CORRECTNESS,RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE,FP,digester,147,"Formatter formatter = new Formatter().format(""CallMethodRule[methodName=%s, paramCount=%s, paramTypes={"",
","@Override
public String toString() {
Formatter formatter = new Formatter().format(""CallMethodRule[methodName=%s, paramCount=%s, paramTypes={"", this.methodName, this.paramTypes.length);
if (this.paramTypes != null) {
for (int i = 0; i < this.paramTypes.length; i++) {
if (i > 0) {
formatter.format("", "");
}
formatter.format(this.paramTypes[i].getName());
}
}
return formatter.format(""}]"").toString();
}","@Override
public String toString() {
Formatter formatterVar1 = formatterLiteral2;
if (this.paramTypes != null) {
for (int intVar5 = intLiteral6; intVar3 < intLiteral1; intVar3++) {
if (intVar3 > 0) {
formatterVar1.format("", "");
}
formatterVar1.format(this.paramTypes[intVar3].getName());
}
}
return formatterVar1.format(""}]"").toString();
}"
9773,I18N,DM_DEFAULT_ENCODING,FP,digester,149,"Formatter formatter = new Formatter(""[CallMethodRule]"");
","@Override
public void end(String namespace, String name) throws Exception {
Object[] parameters = null;
if (this.paramCount > 0) {
parameters = (Object[]) this.getDigester().popParams();
if (this.getDigester().getLog().isTraceEnabled()) {
Formatter formatter = new Formatter(""[CallMethodRule]"");
for (int i = 0, size = parameters.length; i < size; i++) {
if (i > 0) {
formatter.format("", "");
}
formatter.format(""(%s) %s"", i, parameters[i]);
}
this.getDigester().getLog().trace(formatter.toString());
}
if (this.paramCount == 1 && parameters[0] == null) {
return;
}
} else if (this.paramTypes != null && this.paramTypes.length != 0) {
if (this.bodyText == null) {
return;
}
parameters = new Object[] { this.bodyText };
} else {
}
Object[] paramValues = new Object[this.paramTypes.length];
for (int i = 0; i < this.paramTypes.length; i++) {
if (parameters[i] == null || (parameters[i] instanceof String && !String.class.isAssignableFrom(this.paramTypes[i]))) {
paramValues[i] = ConvertUtils.convert((String) parameters[i], paramTypes[i]);
} else {
paramValues[i] = parameters[i];
}
}
Object target;
if (this.targetOffset >= 0) {
target = this.getDigester().peek(this.targetOffset);
} else {
target = this.getDigester().peek(this.getDigester().getCount() + this.targetOffset);
}
if (target == null) {
throw this.getDigester().createSAXException(String.format(""[CallMethodRule]{%s} Call target is null (targetOffset=%s, stackdepth=%s)"", this.getDigester().getMatch(), this.targetOffset, this.getDigester().getCount()));
}
if (this.getDigester().getLog().isDebugEnabled()) {
Formatter formatter = new Formatter().format(""[CallMethodRule]{%s} Call %s.%s("", this.getDigester().getMatch(), target.getClass().getName(), this.methodName);
for (int i = 0; i < paramValues.length; i++) {
if (i > 0) {
formatter.format("", "");
}
formatter.format(""%s/%s"", (paramValues[i] == null ? ""null"" : paramValues[i].toString()), (this.paramTypes[i] == null ? ""null"" : this.paramTypes[i].getName()));
}
formatter.format("")"");
this.getDigester().getLog().debug(formatter.toString());
}
Object result = null;
if (this.useExactMatch) {
result = MethodUtils.invokeExactMethod(target, this.methodName, paramValues, this.paramTypes);
} else {
result = MethodUtils.invokeMethod(target, this.methodName, paramValues, this.paramTypes);
}
processMethodCallResult(result);
}","@Override
public void end(String namespace, String name) throws Exception {
Object[] objectArrayVar1 = objectArrayLiteral2;
if (this.paramCount > 0) {
objectArrayVar1 = (Object[]) this.getDigester().popParams();
if (this.getDigester().getLog().isTraceEnabled()) {
Formatter formatterVar3 = formatterLiteral4;
for (int intVar14 = intLiteral15, intVar16 = intLiteral17; intVar5 < intLiteral1; intVar5++) {
if (intVar5 > 0) {
formatterVar3.format("", "");
}
formatterVar3.format(""(%s) %s"", intVar5, objectArrayVar1[intVar5]);
}
this.getDigester().getLog().trace(formatterVar3.toString());
}
if (this.paramCount == 1 && objectArrayVar1[0] == null) {
return;
}
} else if (this.paramTypes != null && this.paramTypes.length != 0) {
if (this.bodyText == null) {
return;
}
objectArrayVar1 = new Object[] { this.bodyText };
} else {
}
Object[] objectArrayVar9 = objectArrayLiteral10;
for (int intVar14 = intLiteral15; intVar5 < intLiteral2; intVar5++) {
if (objectArrayVar1[intVar5] == null || (objectArrayVar1[intVar5] instanceof String && !String.class.isAssignableFrom(this.paramTypes[intVar5]))) {
objectArrayVar9[intVar5] = ConvertUtils.convert((String) objectArrayVar1[intVar5], paramTypes[intVar5]);
} else {
objectArrayVar9[intVar5] = objectArrayVar1[intVar5];
}
}
Object objectVar11;
if (this.targetOffset >= 0) {
objectVar11 = this.getDigester().peek(this.targetOffset);
} else {
objectVar11 = this.getDigester().peek(this.getDigester().getCount() + this.targetOffset);
}
if (objectVar11 == null) {
throw this.getDigester().createSAXException(String.format(""[CallMethodRule]{%s} Call target is null (targetOffset=%s, stackdepth=%s)"", this.getDigester().getMatch(), this.targetOffset, this.getDigester().getCount()));
}
if (this.getDigester().getLog().isDebugEnabled()) {
Formatter formatterVar3 = formatterLiteral12;
for (int intVar14 = intLiteral15; intVar5 < intLiteral3; intVar5++) {
if (intVar5 > 0) {
formatterVar3.format("", "");
}
formatterVar3.format(""%s/%s"", (objectArrayVar9[intVar5] == null ? ""null"" : objectArrayVar9[intVar5].toString()), (this.paramTypes[intVar5] == null ? ""null"" : this.paramTypes[intVar5].getName()));
}
formatterVar3.format("")"");
this.getDigester().getLog().debug(formatterVar3.toString());
}
Object objectVar13 = objectArrayLiteral2;
if (this.useExactMatch) {
objectVar13 = MethodUtils.invokeExactMethod(objectVar11, this.methodName, objectArrayVar9, this.paramTypes);
} else {
objectVar13 = MethodUtils.invokeMethod(objectVar11, this.methodName, objectArrayVar9, this.paramTypes);
}
processMethodCallResult(objectVar13);
}"
9829,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,digester,205,"return ( null );
","public Object[] peekParams(int n) {
int index = (params.size() - 1) - n;
if (index < 0) {
log.warn(""Empty stack (returning null)"");
return (null);
}
try {
return (params.get(index));
} catch (EmptyStackException e) {
log.warn(""Empty stack (returning null)"");
return (null);
}
}","public Object[] peekParams(int n) {
int intVar1 = intLiteral2;
if (intVar1 < 0) {
log.warn(""Empty stack (returning null)"");
return (null);
}
try {
return (params.get(intVar1));
} catch (EmptyStackException e) {
log.warn(""Empty stack (returning null)"");
return (null);
}
}"
9830,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,digester,206,"return ( null );
","public Object[] popParams() {
try {
if (log.isTraceEnabled()) {
log.trace(""Popping params"");
}
return (params.pop());
} catch (EmptyStackException e) {
log.warn(""Empty stack (returning null)"");
return (null);
}
}","public Object[] popParams() {
try {
if (log.isTraceEnabled()) {
log.trace(""Popping params"");
}
return (params.pop());
} catch (EmptyStackException e) {
log.warn(""Empty stack (returning null)"");
return (null);
}
}"
9845,MALICIOUS_CODE,MS_SHOULD_BE_FINAL,FP,digester,221,"public static String DFLT_METHOD_ATTR = ""method"";","public static String DFLT_METHOD_ATTR = ""method"";",public static String stringVar1 = stringLiteral2;
9847,MALICIOUS_CODE,MS_SHOULD_BE_FINAL,FP,digester,223,"public static String DFLT_METHOD_NAME = ""addRules"";","public static String DFLT_METHOD_NAME = ""addRules"";",public static String stringVar1 = stringLiteral2;
9852,MALICIOUS_CODE,MS_SHOULD_BE_FINAL,FP,digester,228,"public static String DFLT_FILENAME_ATTR = ""file"";","public static String DFLT_FILENAME_ATTR = ""file"";",public static String stringVar1 = stringLiteral2;
9889,MALICIOUS_CODE,MS_SHOULD_BE_FINAL,FP,digester,265,"protected static Log log = LogFactory.getLog(""org.apache.commons.digester.Digester.sax"");","protected static Log log = LogFactory.getLog(""org.apache.commons.digester.Digester.sax"");",protected static Log logVar1 = logLiteral2;
9892,DODGY_CODE,REC_CATCH_EXCEPTION,FP,digester,268,"} catch (Exception ex){
","private static String getXercesVersion() {
String versionNumber = ""1.0"";
try {
Class versionClass = Class.forName(""org.apache.xerces.impl.Version"");
Method method = versionClass.getMethod(""getVersion"", (Class[]) null);
String version = (String) method.invoke(null, (Object[]) null);
versionNumber = version.substring(""Xerces-J"".length(), version.lastIndexOf("".""));
} catch (Exception ex) {
}
return versionNumber;
}","private static String getXercesVersion() {
String stringVar1 = stringLiteral2;
try {
Class classVar3 = classLiteral4;
Method methodVar5 = methodLiteral6;
String stringVar7 = stringLiteral8;
stringVar1 = stringVar7.substring(""Xerces-J"".length(), stringVar7.lastIndexOf("".""));
} catch (Exception ex) {
}
return stringVar1;
}"
9893,MALICIOUS_CODE,MS_SHOULD_BE_FINAL,FP,digester,269,"protected static String XERCES_SCHEMA = ""http://apache.org/xml/features/validation/schema"";","protected static String XERCES_SCHEMA = ""http://apache.org/xml/features/validation/schema"";",protected static String stringVar1 = stringLiteral2;
9894,MALICIOUS_CODE,MS_SHOULD_BE_FINAL,FP,digester,270,"protected static String JAXP_SCHEMA_LANGUAGE = ""http://java.sun.com/xml/jaxp/properties/schemaLanguage"";","protected static String JAXP_SCHEMA_LANGUAGE = ""http://java.sun.com/xml/jaxp/properties/schemaLanguage"";",protected static String stringVar1 = stringLiteral2;
9896,MALICIOUS_CODE,MS_SHOULD_BE_FINAL,FP,digester,272,"protected static String XERCES_DYNAMIC = ""http://apache.org/xml/features/validation/dynamic"";","protected static String XERCES_DYNAMIC = ""http://apache.org/xml/features/validation/dynamic"";",protected static String stringVar1 = stringLiteral2;
9897,CORRECTNESS,UWF_NULL_FIELD,FP,digester,273,public final String DFLT_PLUGIN_ID_ATTR_NS = null;,public final String DFLT_PLUGIN_ID_ATTR_NS = null;,public final String stringVar1 = stringLiteral2;
9902,MALICIOUS_CODE,MS_SHOULD_BE_FINAL,FP,digester,278,"public static String DFLT_RULECLASS_ATTR = ""ruleclass"";","public static String DFLT_RULECLASS_ATTR = ""ruleclass"";",public static String stringVar1 = stringLiteral2;
9903,MALICIOUS_CODE,MS_SHOULD_BE_FINAL,FP,digester,279,"public static String DFLT_RULECLASS_SUFFIX = ""RuleInfo"";","public static String DFLT_RULECLASS_SUFFIX = ""RuleInfo"";",public static String stringVar1 = stringLiteral2;
9904,MALICIOUS_CODE,MS_SHOULD_BE_FINAL,FP,digester,280,"public static String DFLT_METHOD_NAME = ""addRules"";","public static String DFLT_METHOD_NAME = ""addRules"";",public static String stringVar1 = stringLiteral2;
9905,MALICIOUS_CODE,MS_SHOULD_BE_FINAL,FP,digester,281,"public static String DFLT_METHOD_NAME = ""addRules"";","public static String DFLT_METHOD_NAME = ""addRules"";",public static String stringVar1 = stringLiteral2;
9945,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,digester,321,"return null;
","public static Annotation[] getAnnotationsArrayValue(Annotation annotation) {
Object value = getAnnotationValue(annotation);
if (value != null && value.getClass().isArray() && Annotation.class.isAssignableFrom(value.getClass().getComponentType())) {
return (Annotation[]) value;
}
return null;
}","public static Annotation[] getAnnotationsArrayValue(Annotation annotation) {
Object objectVar1 = objectLiteral2;
if (objectVar1 != null && objectVar1.getClass().isArray() && Annotation.class.isAssignableFrom(objectVar1.getClass().getComponentType())) {
return (Annotation[]) objectVar1;
}
return null;
}"
9946,CORRECTNESS,NP_NULL_PARAM_DEREF,FP,digester,322,"return new FactoryCreateRule( type, attributeName, ignoreCreateExceptions );
","@Override
protected FactoryCreateRule createRule() {
if (type == null && attributeName == null && creationFactory == null) {
reportError(""factoryCreate()"", ""at least one between 'className', 'attributeName' or 'creationFactory' has to be specified"");
}
if (type != null || attributeName != null) {
return new FactoryCreateRule(type, attributeName, ignoreCreateExceptions);
}
return new FactoryCreateRule(creationFactory, ignoreCreateExceptions);
}","@Override
protected FactoryCreateRule createRule() {
if (type == null && attributeName == null && creationFactory == null) {
reportError(""factoryCreate()"", ""at least one between 'className', 'attributeName' or 'creationFactory' has to be specified"");
}
if (type != null || attributeName != null) {
return new FactoryCreateRule(type, attributeName, ignoreCreateExceptions);
}
return new FactoryCreateRule(creationFactory, ignoreCreateExceptions);
}"
9956,DODGY_CODE,REC_CATCH_EXCEPTION,FP,digester,332,"} catch (Exception e) {
","public SAXParser getParser() {
if (parser != null) {
return (parser);
}
try {
if (validating && (schemaLocation != null)) {
Properties properties = new Properties();
properties.put(""SAXParserFactory"", getFactory());
if (schemaLocation != null) {
properties.put(""schemaLocation"", schemaLocation);
properties.put(""schemaLanguage"", schemaLanguage);
}
parser = ParserFeatureSetterFactory.newSAXParser(properties);
} else {
parser = getFactory().newSAXParser();
}
} catch (Exception e) {
log.error(""Digester.getParser: "", e);
return (null);
}
return (parser);
}","public SAXParser getParser() {
if (parser != null) {
return (parser);
}
try {
if (validating && (schemaLocation != null)) {
Properties propertiesVar1 = propertiesLiteral2;
propertiesVar1.put(""SAXParserFactory"", getFactory());
if (schemaLocation != null) {
propertiesVar1.put(""schemaLocation"", schemaLocation);
propertiesVar1.put(""schemaLanguage"", schemaLanguage);
}
parser = ParserFeatureSetterFactory.newSAXParser(propertiesVar1);
} else {
parser = getFactory().newSAXParser();
}
} catch (Exception e) {
log.error(""Digester.getParser: "", e);
return (null);
}
return (parser);
}"
9966,MALICIOUS_CODE,EI_EXPOSE_REP2,FP,digester,342,"this.annotations = annotations;
","public MethodArgument(int index, Class<?> parameterType, Annotation[] annotations) {
this.index = index;
this.parameterType = parameterType;
this.annotations = annotations;
}","public MethodArgument(int index, Class<?> parameterType, Annotation[] annotations) {
this.index = index;
this.parameterType = parameterType;
this.annotations = annotations;
}"
9972,MALICIOUS_CODE,MS_SHOULD_BE_FINAL,FP,digester,348,"protected static Log log = LogFactory.getLog(""org.apache.commons.digester.Digester.sax"");","protected static Log log = LogFactory.getLog(""org.apache.commons.digester.Digester.sax"");",protected static Log logVar1 = logLiteral2;
9988,MALICIOUS_CODE,MS_SHOULD_BE_FINAL,FP,digester,364,"public static String DFLT_FILENAME_ATTR = ""file"";","public static String DFLT_FILENAME_ATTR = ""file"";",public static String stringVar1 = stringLiteral2;
9989,MALICIOUS_CODE,MS_SHOULD_BE_FINAL,FP,digester,365,"public static String DFLT_METHOD_ATTR = ""method"";","public static String DFLT_METHOD_ATTR = ""method"";",public static String stringVar1 = stringLiteral2;
10012,I18N,DM_DEFAULT_ENCODING,FP,digester,388,"Formatter formatter = new Formatter(""[CallMethodRule]"");
","@Override
public void end(String namespace, String name) throws Exception {
Object[] parameters = null;
if (this.paramTypes.length > 0) {
parameters = (Object[]) this.getDigester().popParams();
if (this.getDigester().getLog().isTraceEnabled()) {
Formatter formatter = new Formatter(""[CallMethodRule]"");
for (int i = 0, size = parameters.length; i < size; i++) {
if (i > 0) {
formatter.format("", "");
}
formatter.format(""(%s) %s"", i, parameters[i]);
}
this.getDigester().getLog().trace(formatter.toString());
}
if (this.paramTypes.length == 1 && parameters[0] == null) {
return;
}
} else if (this.paramTypes != null && this.paramTypes.length != 0) {
if (this.bodyText == null) {
return;
}
parameters = new Object[] { this.bodyText };
} else {
}
Object[] paramValues = new Object[this.paramTypes.length];
for (int i = 0; i < this.paramTypes.length; i++) {
if (parameters[i] == null || (parameters[i] instanceof String && !String.class.isAssignableFrom(this.paramTypes[i]))) {
paramValues[i] = ConvertUtils.convert((String) parameters[i], paramTypes[i]);
} else {
paramValues[i] = parameters[i];
}
}
Object target;
if (this.targetOffset >= 0) {
target = this.getDigester().peek(this.targetOffset);
} else {
target = this.getDigester().peek(this.getDigester().getCount() + this.targetOffset);
}
if (target == null) {
throw this.getDigester().createSAXException(String.format(""[CallMethodRule]{%s} Call target is null (targetOffset=%s, stackdepth=%s)"", this.getDigester().getMatch(), this.targetOffset, this.getDigester().getCount()));
}
if (this.getDigester().getLog().isDebugEnabled()) {
Formatter formatter = new Formatter().format(""[CallMethodRule]{%s} Call %s.%s("", this.getDigester().getMatch(), target.getClass().getName(), this.methodName);
for (int i = 0; i < paramValues.length; i++) {
if (i > 0) {
formatter.format("", "");
}
formatter.format(""%s/%s"", (paramValues[i] == null ? ""null"" : paramValues[i].toString()), (this.paramTypes[i] == null ? ""null"" : this.paramTypes[i].getName()));
}
formatter.format("")"");
this.getDigester().getLog().debug(formatter.toString());
}
Object result = null;
if (this.useExactMatch) {
result = MethodUtils.invokeExactMethod(target, this.methodName, paramValues, this.paramTypes);
} else {
result = MethodUtils.invokeMethod(target, this.methodName, paramValues, this.paramTypes);
}
processMethodCallResult(result);
}","@Override
public void end(String namespace, String name) throws Exception {
Object[] objectArrayVar1 = objectArrayLiteral2;
if (this.paramTypes.length > 0) {
objectArrayVar1 = (Object[]) this.getDigester().popParams();
if (this.getDigester().getLog().isTraceEnabled()) {
Formatter formatterVar3 = formatterLiteral4;
for (int intVar14 = intLiteral15, intVar16 = intLiteral17; intVar5 < intLiteral1; intVar5++) {
if (intVar5 > 0) {
formatterVar3.format("", "");
}
formatterVar3.format(""(%s) %s"", intVar5, objectArrayVar1[intVar5]);
}
this.getDigester().getLog().trace(formatterVar3.toString());
}
if (this.paramTypes.length == 1 && objectArrayVar1[0] == null) {
return;
}
} else if (this.paramTypes != null && this.paramTypes.length != 0) {
if (this.bodyText == null) {
return;
}
objectArrayVar1 = new Object[] { this.bodyText };
} else {
}
Object[] objectArrayVar9 = objectArrayLiteral10;
for (int intVar14 = intLiteral15; intVar5 < intLiteral2; intVar5++) {
if (objectArrayVar1[intVar5] == null || (objectArrayVar1[intVar5] instanceof String && !String.class.isAssignableFrom(this.paramTypes[intVar5]))) {
objectArrayVar9[intVar5] = ConvertUtils.convert((String) objectArrayVar1[intVar5], paramTypes[intVar5]);
} else {
objectArrayVar9[intVar5] = objectArrayVar1[intVar5];
}
}
Object objectVar11;
if (this.targetOffset >= 0) {
objectVar11 = this.getDigester().peek(this.targetOffset);
} else {
objectVar11 = this.getDigester().peek(this.getDigester().getCount() + this.targetOffset);
}
if (objectVar11 == null) {
throw this.getDigester().createSAXException(String.format(""[CallMethodRule]{%s} Call target is null (targetOffset=%s, stackdepth=%s)"", this.getDigester().getMatch(), this.targetOffset, this.getDigester().getCount()));
}
if (this.getDigester().getLog().isDebugEnabled()) {
Formatter formatterVar3 = formatterLiteral12;
for (int intVar14 = intLiteral15; intVar5 < intLiteral3; intVar5++) {
if (intVar5 > 0) {
formatterVar3.format("", "");
}
formatterVar3.format(""%s/%s"", (objectArrayVar9[intVar5] == null ? ""null"" : objectArrayVar9[intVar5].toString()), (this.paramTypes[intVar5] == null ? ""null"" : this.paramTypes[intVar5].getName()));
}
formatterVar3.format("")"");
this.getDigester().getLog().debug(formatterVar3.toString());
}
Object objectVar13 = objectArrayLiteral2;
if (this.useExactMatch) {
objectVar13 = MethodUtils.invokeExactMethod(objectVar11, this.methodName, objectArrayVar9, this.paramTypes);
} else {
objectVar13 = MethodUtils.invokeMethod(objectVar11, this.methodName, objectArrayVar9, this.paramTypes);
}
processMethodCallResult(objectVar13);
}"
10022,DODGY_CODE,NP_LOAD_OF_KNOWN_NULL_VALUE,FP,digester,398,"log.debug("" Cannot resolve entity: '"" + entityURL + ""'"");
","public InputSource resolveEntity(String publicId, String systemId) throws SAXException {
if (saxLog.isDebugEnabled()) {
saxLog.debug(""resolveEntity('"" + publicId + ""', '"" + systemId + ""')"");
}
if (publicId != null)
this.publicId = publicId;
String entityURL = null;
if (publicId != null) {
entityURL = (String) entityValidator.get(publicId);
}
if (schemaLocation != null && entityURL == null && systemId != null) {
entityURL = (String) entityValidator.get(systemId);
}
if (entityURL == null) {
if (systemId == null) {
if (log.isDebugEnabled()) {
log.debug("" Cannot resolve entity: '"" + entityURL + ""'"");
}
return (null);
} else {
if (log.isDebugEnabled()) {
log.debug("" Trying to resolve using system ID '"" + systemId + ""'"");
}
entityURL = systemId;
}
}
if (log.isDebugEnabled()) {
log.debug("" Resolving to alternate DTD '"" + entityURL + ""'"");
}
try {
return createInputSourceFromURL(entityURL);
} catch (Exception e) {
throw createSAXException(e);
}
}","public InputSource resolveEntity(String publicId, String systemId) throws SAXException {
if (saxLog.isDebugEnabled()) {
saxLog.debug(""resolveEntity('"" + publicId + ""', '"" + systemId + ""')"");
}
if (publicId != null)
this.publicId = publicId;
String stringVar1 = stringLiteral2;
if (publicId != null) {
stringVar1 = (String) entityValidator.get(publicId);
}
if (schemaLocation != null && stringVar1 == null && systemId != null) {
stringVar1 = (String) entityValidator.get(systemId);
}
if (stringVar1 == null) {
if (systemId == null) {
if (log.isDebugEnabled()) {
log.debug("" Cannot resolve entity: '"" + stringVar1 + ""'"");
}
return (null);
} else {
if (log.isDebugEnabled()) {
log.debug("" Trying to resolve using system ID '"" + systemId + ""'"");
}
stringVar1 = systemId;
}
}
if (log.isDebugEnabled()) {
log.debug("" Resolving to alternate DTD '"" + stringVar1 + ""'"");
}
try {
return createInputSourceFromURL(stringVar1);
} catch (Exception e) {
throw createSAXException(e);
}
}"
10025,CORRECTNESS,UWF_NULL_FIELD,FP,digester,401,protected String namespaceURI = null;,protected String namespaceURI = null;,protected String stringVar1 = stringLiteral2;
10028,MALICIOUS_CODE,MS_SHOULD_BE_FINAL,FP,digester,404,"protected static String JAXP_SCHEMA_LANGUAGE = ""http://java.sun.com/xml/jaxp/properties/schemaLanguage"";","protected static String JAXP_SCHEMA_LANGUAGE = ""http://java.sun.com/xml/jaxp/properties/schemaLanguage"";",protected static String stringVar1 = stringLiteral2;
10031,MALICIOUS_CODE,MS_SHOULD_BE_FINAL,FP,digester,407,"protected static String XERCES_DYNAMIC = ""http://apache.org/xml/features/validation/dynamic"";","protected static String XERCES_DYNAMIC = ""http://apache.org/xml/features/validation/dynamic"";",protected static String stringVar1 = stringLiteral2;
10036,MALICIOUS_CODE,MS_PKGPROTECT,FP,digester,412,protected static String versionNumber = null;,protected static String versionNumber = null;,protected static String stringVar1 = stringLiteral2;
10037,CORRECTNESS,UWF_NULL_FIELD,FP,digester,413,public final String DFLT_PLUGIN_ID_ATTR_NS = null;,public final String DFLT_PLUGIN_ID_ATTR_NS = null;,public final String stringVar1 = stringLiteral2;
10040,MALICIOUS_CODE,MS_SHOULD_BE_FINAL,FP,digester,416,"public static String DFLT_RULECLASS_ATTR = ""ruleclass"";","public static String DFLT_RULECLASS_ATTR = ""ruleclass"";",public static String stringVar1 = stringLiteral2;
10045,MALICIOUS_CODE,MS_SHOULD_BE_FINAL,FP,digester,421,"public static String DFLT_METHOD_NAME = ""addRules"";","public static String DFLT_METHOD_NAME = ""addRules"";",public static String stringVar1 = stringLiteral2;
10051,MALICIOUS_CODE,MS_SHOULD_BE_FINAL,FP,digester,427,"public static String DFLT_FALSEVAL = ""false"";","public static String DFLT_FALSEVAL = ""false"";",public static String stringVar1 = stringLiteral2;
10077,CORRECTNESS,UWF_NULL_FIELD,FP,digester,453,protected String namespaceURI = null;,protected String namespaceURI = null;,protected String stringVar1 = stringLiteral2;
10079,MALICIOUS_CODE,MS_SHOULD_BE_FINAL,FP,digester,455,"protected static String JAXP_SCHEMA_LANGUAGE = ""http://java.sun.com/xml/jaxp/properties/schemaLanguage"";","protected static String JAXP_SCHEMA_LANGUAGE = ""http://java.sun.com/xml/jaxp/properties/schemaLanguage"";",protected static String stringVar1 = stringLiteral2;
10096,MALICIOUS_CODE,MS_SHOULD_BE_FINAL,FP,digester,472,"public static String DFLT_METHOD_NAME = ""addRules"";","public static String DFLT_METHOD_NAME = ""addRules"";",public static String stringVar1 = stringLiteral2;
10099,MALICIOUS_CODE,MS_SHOULD_BE_FINAL,FP,digester,475,"public static String DFLT_METHOD_ATTR = ""method"";","public static String DFLT_METHOD_ATTR = ""method"";",public static String stringVar1 = stringLiteral2;
10100,MALICIOUS_CODE,MS_SHOULD_BE_FINAL,FP,digester,476,"public static String DFLT_RESOURCE_ATTR = ""resource"";","public static String DFLT_RESOURCE_ATTR = ""resource"";",public static String stringVar1 = stringLiteral2;
10102,MALICIOUS_CODE,MS_SHOULD_BE_FINAL,FP,digester,478,"public static String DFLT_FALSEVAL = ""false"";","public static String DFLT_FALSEVAL = ""false"";",public static String stringVar1 = stringLiteral2;
10266,BAD_PRACTICE,SE_BAD_FIELD,FP,digester,642,private final List<ErrorMessage> errors;,private final List<ErrorMessage> errors;,private final List<ErrorMessage> list<errormessage>Var1;
10280,DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,digester,656,"rulesBinder.addError( e );
","@SuppressWarnings(""unchecked"")
private <A extends Annotation, E extends AnnotatedElement, R extends Rule> void handle(A annotation, E element) {
Class<?> annotationType = annotation.annotationType();
if (annotationType.isAnnotationPresent(DigesterRuleList.class)) {
Annotation[] annotations = getAnnotationsArrayValue(annotation);
if (annotations != null && annotations.length > 0) {
for (Annotation ptr : annotations) {
handle(ptr, element);
}
}
} else if (annotationType.isAnnotationPresent(DigesterRule.class)) {
DigesterRule digesterRule = annotationType.getAnnotation(DigesterRule.class);
Class<? extends AnnotationHandler<Annotation, AnnotatedElement>> handlerType = (Class<? extends AnnotationHandler<Annotation, AnnotatedElement>>) digesterRule.handledBy();
try {
AnnotationHandler<Annotation, AnnotatedElement> handler = annotationHandlerFactory.newInstance(handlerType);
handler.handle(annotation, element, this.rulesBinder);
} catch (Exception e) {
rulesBinder.addError(e);
}
}
}","@SuppressWarnings(""unchecked"")
private <A extends Annotation, E extends AnnotatedElement, R extends Rule> void handle(A annotation, E element) {
Class<?> class<?>Var1 = class<?>Literal2;
if (class<?>Var1.isAnnotationPresent(DigesterRuleList.class)) {
Annotation[] annotationArrayVar3 = annotationArrayLiteral4;
if (annotationArrayVar3 != null && annotationArrayVar3.length > 0) {
for (Annotation annotationVar5 : annotationArrayVar3) {
handle(annotationVar5, element);
}
}
} else if (class<?>Var1.isAnnotationPresent(DigesterRule.class)) {
DigesterRule digesterruleVar6 = digesterruleLiteral7;
Class<? extends AnnotationHandler<Annotation, AnnotatedElement>> class<? extends annotationhandler<annotation,annotatedelement>>Var8 = class<? extends annotationhandler<annotation,annotatedelement>>Literal9;
try {
AnnotationHandler<Annotation, AnnotatedElement> annotationhandler<annotation,annotatedelement>Var10 = annotationhandler<annotation,annotatedelement>Literal11;
annotationhandler<annotation,annotatedelement>Var10.handle(annotation, element, this.rulesBinder);
} catch (Exception e) {
rulesBinder.addError(e);
}
}
}"
10340,PERFORMANCE,SS_SHOULD_BE_STATIC,FP,digester,716,private final float loadFactor = 0.75f;,private final float loadFactor = 0.75f;,private final float floatVar1 = floatLiteral2;
10341,BAD_PRACTICE,SE_BAD_FIELD,FP,digester,717,"private final Map<Class<?>, FromAnnotationsRuleSet> data = new LinkedHashMap<Class<?>, FromAnnotationsRuleSet>(capacity, loadFactor) {
private static final long serialVersionUID = 1L;
@Override
protected boolean removeEldestEntry(Map.Entry<Class<?>, FromAnnotationsRuleSet> eldest) {
return size() > cacheSize;
}
};","private final Map<Class<?>, FromAnnotationsRuleSet> data = new LinkedHashMap<Class<?>, FromAnnotationsRuleSet>(capacity, loadFactor) {
private static final long serialVersionUID = 1L;
@Override
protected boolean removeEldestEntry(Map.Entry<Class<?>, FromAnnotationsRuleSet> eldest) {
return size() > cacheSize;
}
};","private final Map<Class<?>, FromAnnotationsRuleSet> map<class<?>,fromannotationsruleset>Var1 = map<class<?>,fromannotationsruleset>Literal2;"
10342,MALICIOUS_CODE,EI_EXPOSE_REP2,FP,digester,718,"this.annotations = annotations;
","public MethodArgument(int index, Class<?> parameterType, Annotation[] annotations) {
this.index = index;
this.parameterType = parameterType;
this.annotations = annotations;
}","public MethodArgument(int index, Class<?> parameterType, Annotation[] annotations) {
this.index = index;
this.parameterType = parameterType;
this.annotations = annotations;
}"
10346,PERFORMANCE,DM_FP_NUMBER_CTOR,FP,digester,722,"version = new Float( versionNumber ).floatValue();
","public static SAXParser newSAXParser(Properties properties) throws ParserConfigurationException, SAXException, SAXNotSupportedException {
SAXParserFactory factory = (SAXParserFactory) properties.get(""SAXParserFactory"");
if (versionNumber == null) {
versionNumber = getXercesVersion();
version = new Float(versionNumber).floatValue();
}
// Note: 2.2 is completely broken (with XML Schema).
if (version > 2.1) {
configureXerces(factory);
return factory.newSAXParser();
} else {
SAXParser parser = factory.newSAXParser();
configureOldXerces(parser, properties);
return parser;
}
}","public static SAXParser newSAXParser(Properties properties) throws ParserConfigurationException, SAXException, SAXNotSupportedException {
SAXParserFactory saxparserfactoryVar1 = saxparserfactoryLiteral2;
if (versionNumber == null) {
versionNumber = getXercesVersion();
version = new Float(versionNumber).floatValue();
}
// Note: 2.2 is completely broken (with XML Schema).
if (version > 2.1) {
configureXerces(saxparserfactoryVar1);
return saxparserfactoryVar1.newSAXParser();
} else {
SAXParser saxparserVar3 = saxparserLiteral4;
configureOldXerces(saxparserVar3, properties);
return saxparserVar3;
}
}"
10348,MALICIOUS_CODE,MS_SHOULD_BE_FINAL,FP,digester,724,"protected static String XERCES_DYNAMIC = ""http://apache.org/xml/features/validation/dynamic"";","protected static String XERCES_DYNAMIC = ""http://apache.org/xml/features/validation/dynamic"";",protected static String stringVar1 = stringLiteral2;
10351,MALICIOUS_CODE,MS_PKGPROTECT,FP,digester,727,protected static String versionNumber = null;,protected static String versionNumber = null;,protected static String stringVar1 = stringLiteral2;
10362,MALICIOUS_CODE,MS_SHOULD_BE_FINAL,FP,digester,738,"public static String DFLT_METHOD_NAME = ""addRules"";","public static String DFLT_METHOD_NAME = ""addRules"";",public static String stringVar1 = stringLiteral2;
10364,MALICIOUS_CODE,MS_SHOULD_BE_FINAL,FP,digester,740,"public static String DFLT_FILENAME_ATTR = ""file"";","public static String DFLT_FILENAME_ATTR = ""file"";",public static String stringVar1 = stringLiteral2;
10366,MALICIOUS_CODE,MS_SHOULD_BE_FINAL,FP,digester,742,"public static String DFLT_RESOURCE_ATTR = ""resource"";","public static String DFLT_RESOURCE_ATTR = ""resource"";",public static String stringVar1 = stringLiteral2;
10368,MALICIOUS_CODE,MS_SHOULD_BE_FINAL,FP,digester,744,"public static String DFLT_FALSEVAL = ""false"";","public static String DFLT_FALSEVAL = ""false"";",public static String stringVar1 = stringLiteral2;
10392,PERFORMANCE,URF_UNREAD_FIELD,FP,digester,768,private String currChildNamespaceURI = null;,private String currChildNamespaceURI = null;,private String stringVar1 = stringLiteral2;
10395,PERFORMANCE,SS_SHOULD_BE_STATIC,FP,digester,771,private final int cacheSize = 255;,private final int cacheSize = 255;,private final int intVar1 = intLiteral2;
10402,MALICIOUS_CODE,MS_SHOULD_BE_FINAL,FP,digester,778,"protected static String JAXP_SCHEMA_LANGUAGE = ""http://java.sun.com/xml/jaxp/properties/schemaLanguage"";","protected static String JAXP_SCHEMA_LANGUAGE = ""http://java.sun.com/xml/jaxp/properties/schemaLanguage"";",protected static String stringVar1 = stringLiteral2;
10413,MALICIOUS_CODE,MS_SHOULD_BE_FINAL,FP,digester,789,"public static String DFLT_RULECLASS_ATTR = ""ruleclass"";","public static String DFLT_RULECLASS_ATTR = ""ruleclass"";",public static String stringVar1 = stringLiteral2;
10414,MALICIOUS_CODE,MS_SHOULD_BE_FINAL,FP,digester,790,"public static String DFLT_METHOD_NAME = ""addRules"";","public static String DFLT_METHOD_NAME = ""addRules"";",public static String stringVar1 = stringLiteral2;
10422,MALICIOUS_CODE,MS_SHOULD_BE_FINAL,FP,digester,798,"public static String DFLT_RESOURCE_ATTR = ""resource"";","public static String DFLT_RESOURCE_ATTR = ""resource"";",public static String stringVar1 = stringLiteral2;
10424,MALICIOUS_CODE,MS_SHOULD_BE_FINAL,FP,digester,800,"public static String DFLT_FALSEVAL = ""false"";","public static String DFLT_FALSEVAL = ""false"";",public static String stringVar1 = stringLiteral2;
10449,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,digester,825,"return ( null );
","public Object[] peekParams(int n) {
int index = (params.size() - 1) - n;
if (index < 0) {
log.warn(""Empty stack (returning null)"");
return (null);
}
try {
return (params.get(index));
} catch (EmptyStackException e) {
log.warn(""Empty stack (returning null)"");
return (null);
}
}","public Object[] peekParams(int n) {
int intVar1 = intLiteral2;
if (intVar1 < 0) {
log.warn(""Empty stack (returning null)"");
return (null);
}
try {
return (params.get(intVar1));
} catch (EmptyStackException e) {
log.warn(""Empty stack (returning null)"");
return (null);
}
}"
10450,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,digester,826,"return ( null );
","public Object[] peekParams() {
try {
return (params.peek());
} catch (EmptyStackException e) {
log.warn(""Empty stack (returning null)"");
return (null);
}
}","public Object[] peekParams() {
try {
return (params.peek());
} catch (EmptyStackException e) {
log.warn(""Empty stack (returning null)"");
return (null);
}
}"
10516,MALICIOUS_CODE,MS_SHOULD_BE_FINAL,FP,digester,892,"public static String DFLT_RULECLASS_SUFFIX = ""RuleInfo"";","public static String DFLT_RULECLASS_SUFFIX = ""RuleInfo"";",public static String stringVar1 = stringLiteral2;
10521,MALICIOUS_CODE,MS_SHOULD_BE_FINAL,FP,digester,897,"public static String DFLT_METHOD_ATTR = ""method"";","public static String DFLT_METHOD_ATTR = ""method"";",public static String stringVar1 = stringLiteral2;
10522,MALICIOUS_CODE,MS_SHOULD_BE_FINAL,FP,digester,898,"public static String DFLT_RESOURCE_ATTR = ""resource"";","public static String DFLT_RESOURCE_ATTR = ""resource"";",public static String stringVar1 = stringLiteral2;
10524,MALICIOUS_CODE,MS_SHOULD_BE_FINAL,FP,digester,900,"public static String DFLT_PROPS_ATTR = ""setprops"";","public static String DFLT_PROPS_ATTR = ""setprops"";",public static String stringVar1 = stringLiteral2;
10525,CORRECTNESS,NP_NULL_ON_SOME_PATH,FP,digester,901,"Object paramValues[] = new Object[this.paramTypes.length];
","@Override
public void end(String namespace, String name) throws Exception {
Object[] parameters = null;
if (this.paramCount > 0) {
parameters = (Object[]) this.getDigester().popParams();
if (this.getDigester().getLog().isTraceEnabled()) {
Formatter formatter = new Formatter(""[CallMethodRule]"");
for (int i = 0, size = parameters.length; i < size; i++) {
if (i > 0) {
formatter.format("", "");
}
formatter.format(""(%s) %s"", i, parameters[i]);
}
this.getDigester().getLog().trace(formatter.toString());
}
if (this.paramCount == 1 && parameters[0] == null) {
return;
}
} else if (this.paramTypes != null && this.paramTypes.length != 0) {
if (this.bodyText == null) {
return;
}
parameters = new Object[] { this.bodyText };
} else {
}
Object[] paramValues = new Object[this.paramTypes.length];
for (int i = 0; i < this.paramTypes.length; i++) {
if (parameters[i] == null || (parameters[i] instanceof String && !String.class.isAssignableFrom(this.paramTypes[i]))) {
paramValues[i] = ConvertUtils.convert((String) parameters[i], paramTypes[i]);
} else {
paramValues[i] = parameters[i];
}
}
Object target;
if (this.targetOffset >= 0) {
target = this.getDigester().peek(this.targetOffset);
} else {
target = this.getDigester().peek(this.getDigester().getCount() + this.targetOffset);
}
if (target == null) {
throw this.getDigester().createSAXException(String.format(""[CallMethodRule]{%s} Call target is null (targetOffset=%s, stackdepth=%s)"", this.getDigester().getMatch(), this.targetOffset, this.getDigester().getCount()));
}
if (this.getDigester().getLog().isDebugEnabled()) {
Formatter formatter = new Formatter().format(""[CallMethodRule]{%s} Call %s.%s("", this.getDigester().getMatch(), target.getClass().getName(), this.methodName);
for (int i = 0; i < paramValues.length; i++) {
if (i > 0) {
formatter.format("", "");
}
formatter.format(""%s/%s"", (paramValues[i] == null ? ""null"" : paramValues[i].toString()), (this.paramTypes[i] == null ? ""null"" : this.paramTypes[i].getName()));
}
formatter.format("")"");
this.getDigester().getLog().debug(formatter.toString());
}
Object result = null;
if (this.useExactMatch) {
result = MethodUtils.invokeExactMethod(target, this.methodName, paramValues, this.paramTypes);
} else {
result = MethodUtils.invokeMethod(target, this.methodName, paramValues, this.paramTypes);
}
processMethodCallResult(result);
}","@Override
public void end(String namespace, String name) throws Exception {
Object[] objectArrayVar1 = objectArrayLiteral2;
if (this.paramCount > 0) {
objectArrayVar1 = (Object[]) this.getDigester().popParams();
if (this.getDigester().getLog().isTraceEnabled()) {
Formatter formatterVar3 = formatterLiteral4;
for (int intVar14 = intLiteral15, intVar16 = intLiteral17; intVar5 < intLiteral1; intVar5++) {
if (intVar5 > 0) {
formatterVar3.format("", "");
}
formatterVar3.format(""(%s) %s"", intVar5, objectArrayVar1[intVar5]);
}
this.getDigester().getLog().trace(formatterVar3.toString());
}
if (this.paramCount == 1 && objectArrayVar1[0] == null) {
return;
}
} else if (this.paramTypes != null && this.paramTypes.length != 0) {
if (this.bodyText == null) {
return;
}
objectArrayVar1 = new Object[] { this.bodyText };
} else {
}
Object[] objectArrayVar9 = objectArrayLiteral10;
for (int intVar14 = intLiteral15; intVar5 < intLiteral2; intVar5++) {
if (objectArrayVar1[intVar5] == null || (objectArrayVar1[intVar5] instanceof String && !String.class.isAssignableFrom(this.paramTypes[intVar5]))) {
objectArrayVar9[intVar5] = ConvertUtils.convert((String) objectArrayVar1[intVar5], paramTypes[intVar5]);
} else {
objectArrayVar9[intVar5] = objectArrayVar1[intVar5];
}
}
Object objectVar11;
if (this.targetOffset >= 0) {
objectVar11 = this.getDigester().peek(this.targetOffset);
} else {
objectVar11 = this.getDigester().peek(this.getDigester().getCount() + this.targetOffset);
}
if (objectVar11 == null) {
throw this.getDigester().createSAXException(String.format(""[CallMethodRule]{%s} Call target is null (targetOffset=%s, stackdepth=%s)"", this.getDigester().getMatch(), this.targetOffset, this.getDigester().getCount()));
}
if (this.getDigester().getLog().isDebugEnabled()) {
Formatter formatterVar3 = formatterLiteral12;
for (int intVar14 = intLiteral15; intVar5 < intLiteral3; intVar5++) {
if (intVar5 > 0) {
formatterVar3.format("", "");
}
formatterVar3.format(""%s/%s"", (objectArrayVar9[intVar5] == null ? ""null"" : objectArrayVar9[intVar5].toString()), (this.paramTypes[intVar5] == null ? ""null"" : this.paramTypes[intVar5].getName()));
}
formatterVar3.format("")"");
this.getDigester().getLog().debug(formatterVar3.toString());
}
Object objectVar13 = objectArrayLiteral2;
if (this.useExactMatch) {
objectVar13 = MethodUtils.invokeExactMethod(objectVar11, this.methodName, objectArrayVar9, this.paramTypes);
} else {
objectVar13 = MethodUtils.invokeMethod(objectVar11, this.methodName, objectArrayVar9, this.paramTypes);
}
processMethodCallResult(objectVar13);
}"
10527,CORRECTNESS,RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE,FP,digester,903,"Formatter formatter = new Formatter().format(""CallMethodRule[methodName=%s, paramCount=%s, paramTypes={"",
","@Override
public String toString() {
Formatter formatter = new Formatter().format(""CallMethodRule[methodName=%s, paramCount=%s, paramTypes={"", this.methodName, this.paramTypes.length);
if (this.paramTypes != null) {
for (int i = 0; i < this.paramTypes.length; i++) {
if (i > 0) {
formatter.format("", "");
}
formatter.format(this.paramTypes[i].getName());
}
}
return formatter.format(""}]"").toString();
}","@Override
public String toString() {
Formatter formatterVar1 = formatterLiteral2;
if (this.paramTypes != null) {
for (int intVar5 = intLiteral6; intVar3 < intLiteral1; intVar3++) {
if (intVar3 > 0) {
formatterVar1.format("", "");
}
formatterVar1.format(this.paramTypes[intVar3].getName());
}
}
return formatterVar1.format(""}]"").toString();
}"
10528,PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,FP,digester,904,"private String matchPrefix = null;
private Rules decoratedRules = null;
private List<Rule> rules = new ArrayList<Rule>(1);
private AnyChildRule rule;
public AnyChildRules(AnyChildRule rule) {
this.rule = rule;
rules.add(rule);
}
public Digester getDigester() { return null; }
public void setDigester(Digester digester) {}
public String getNamespaceURI() { return null; }
public void setNamespaceURI(String namespaceURI) {}
public void add(String pattern, Rule rule) {}
public void clear() {}
public List<Rule> match(String namespaceURI, String matchPath) {
List<Rule> match = decoratedRules.match(namespaceURI, matchPath);
if ((matchPath.startsWith(matchPrefix))
&& (matchPath.indexOf('/', matchPrefix.length()) == -1)) {
if ((match == null || match.size()==0)) {
// just one rule: the one passed to this object's
return rules;
} else {
LinkedList<Rule> newMatch = new LinkedList<Rule>(match);
newMatch.addLast(rule);
return newMatch;
}
} else {
return match;
}
}
public List<Rule> rules() {
if (this.getDigester().getLog().isDebugEnabled()) {
this.getDigester().getLog().debug(""AnyChildRules.rules invoked."");
}
return decoratedRules.rules();
}
public void init(String prefix, Rules rules) {
matchPrefix = prefix;
decoratedRules = rules;
}
public Rules getOldRules() {
return decoratedRules;
",private String currChildNamespaceURI = null;,private String stringVar1 = stringLiteral2;
10567,CORRECTNESS,NP_NULL_ON_SOME_PATH,FP,digester,943,"Object paramValues[] = new Object[paramTypes.length];
","public void end() throws Exception {
Object[] parameters = null;
if (paramCount > 0) {
parameters = (Object[]) digester.popParams();
if (digester.log.isTraceEnabled()) {
for (int i = 0, size = parameters.length; i < size; i++) {
digester.log.trace(""[CallMethodRule]("" + i + "")"" + parameters[i]);
}
}
if (paramCount == 1 && parameters[0] == null) {
return;
}
} else if (paramTypes != null && paramTypes.length != 0) {
if (bodyText == null) {
return;
}
parameters = new Object[1];
parameters[0] = bodyText;
if (paramTypes.length == 0) {
paramTypes = new Class[1];
paramTypes[0] = String.class;
}
} else {
;
}
Object[] paramValues = new Object[paramTypes.length];
for (int i = 0; i < paramTypes.length; i++) {
if (parameters[i] == null || (parameters[i] instanceof String && !String.class.isAssignableFrom(paramTypes[i]))) {
paramValues[i] = ConvertUtils.convert((String) parameters[i], paramTypes[i]);
} else {
paramValues[i] = parameters[i];
}
}
Object target;
if (targetOffset >= 0) {
target = digester.peek(targetOffset);
} else {
target = digester.peek(digester.getCount() + targetOffset);
}
if (target == null) {
StringBuffer sb = new StringBuffer();
sb.append(""[CallMethodRule]{"");
sb.append(digester.match);
sb.append(""} Call target is null ("");
sb.append(""targetOffset="");
sb.append(targetOffset);
sb.append("",stackdepth="");
sb.append(digester.getCount());
sb.append("")"");
throw new org.xml.sax.SAXException(sb.toString());
}
if (digester.log.isDebugEnabled()) {
StringBuffer sb = new StringBuffer(""[CallMethodRule]{"");
sb.append(digester.match);
sb.append(""} Call "");
sb.append(target.getClass().getName());
sb.append(""."");
sb.append(methodName);
sb.append(""("");
for (int i = 0; i < paramValues.length; i++) {
if (i > 0) {
sb.append("","");
}
if (paramValues[i] == null) {
sb.append(""null"");
} else {
sb.append(paramValues[i].toString());
}
sb.append(""/"");
if (paramTypes[i] == null) {
sb.append(""null"");
} else {
sb.append(paramTypes[i].getName());
}
}
sb.append("")"");
digester.log.debug(sb.toString());
}
Object result = null;
if (useExactMatch) {
result = MethodUtils.invokeExactMethod(target, methodName, paramValues, paramTypes);
} else {
result = MethodUtils.invokeMethod(target, methodName, paramValues, paramTypes);
}
processMethodCallResult(result);
}","public void end() throws Exception {
Object[] objectArrayVar1 = objectArrayLiteral2;
if (paramCount > 0) {
objectArrayVar1 = (Object[]) digester.popParams();
if (digester.log.isTraceEnabled()) {
for (int intVar14 = intLiteral15, intVar16 = intLiteral17; intVar3 < intLiteral1; intVar3++) {
digester.log.trace(""[CallMethodRule]("" + intVar3 + "")"" + objectArrayVar1[intVar3]);
}
}
if (paramCount == 1 && objectArrayVar1[0] == null) {
return;
}
} else if (paramTypes != null && paramTypes.length != 0) {
if (bodyText == null) {
return;
}
objectArrayVar1 = new Object[1];
objectArrayVar1[0] = bodyText;
if (paramTypes.length == 0) {
paramTypes = new Class[1];
paramTypes[0] = String.class;
}
} else {
;
}
Object[] objectArrayVar7 = objectArrayLiteral8;
for (int intVar14 = intLiteral15; intVar3 < intLiteral2; intVar3++) {
if (objectArrayVar1[intVar3] == null || (objectArrayVar1[intVar3] instanceof String && !String.class.isAssignableFrom(paramTypes[intVar3]))) {
objectArrayVar7[intVar3] = ConvertUtils.convert((String) objectArrayVar1[intVar3], paramTypes[intVar3]);
} else {
objectArrayVar7[intVar3] = objectArrayVar1[intVar3];
}
}
Object objectVar9;
if (targetOffset >= 0) {
objectVar9 = digester.peek(targetOffset);
} else {
objectVar9 = digester.peek(digester.getCount() + targetOffset);
}
if (objectVar9 == null) {
StringBuffer stringbufferVar10 = stringbufferLiteral11;
stringbufferVar10.append(""[CallMethodRule]{"");
stringbufferVar10.append(digester.match);
stringbufferVar10.append(""} Call target is null ("");
stringbufferVar10.append(""targetOffset="");
stringbufferVar10.append(targetOffset);
stringbufferVar10.append("",stackdepth="");
stringbufferVar10.append(digester.getCount());
stringbufferVar10.append("")"");
throw new org.xml.sax.SAXException(stringbufferVar10.toString());
}
if (digester.log.isDebugEnabled()) {
StringBuffer stringbufferVar10 = stringbufferLiteral12;
stringbufferVar10.append(digester.match);
stringbufferVar10.append(""} Call "");
stringbufferVar10.append(objectVar9.getClass().getName());
stringbufferVar10.append(""."");
stringbufferVar10.append(methodName);
stringbufferVar10.append(""("");
for (int intVar14 = intLiteral15; intVar3 < intLiteral3; intVar3++) {
if (intVar3 > 0) {
stringbufferVar10.append("","");
}
if (objectArrayVar7[intVar3] == null) {
stringbufferVar10.append(""null"");
} else {
stringbufferVar10.append(objectArrayVar7[intVar3].toString());
}
stringbufferVar10.append(""/"");
if (paramTypes[intVar3] == null) {
stringbufferVar10.append(""null"");
} else {
stringbufferVar10.append(paramTypes[intVar3].getName());
}
}
stringbufferVar10.append("")"");
digester.log.debug(stringbufferVar10.toString());
}
Object objectVar13 = objectArrayLiteral2;
if (useExactMatch) {
objectVar13 = MethodUtils.invokeExactMethod(objectVar9, methodName, objectArrayVar7, paramTypes);
} else {
objectVar13 = MethodUtils.invokeMethod(objectVar9, methodName, objectArrayVar7, paramTypes);
}
processMethodCallResult(objectVar13);
}"
10573,CORRECTNESS,UWF_NULL_FIELD,FP,digester,949,protected String namespaceURI = null;,protected String namespaceURI = null;,protected String stringVar1 = stringLiteral2;
10574,PERFORMANCE,URF_UNREAD_FIELD,FP,digester,950,private String currChildNamespaceURI = null;,private String currChildNamespaceURI = null;,private String stringVar1 = stringLiteral2;
10580,MALICIOUS_CODE,MS_SHOULD_BE_FINAL,FP,digester,956,"protected static String XERCES_SCHEMA = ""http://apache.org/xml/features/validation/schema"";","protected static String XERCES_SCHEMA = ""http://apache.org/xml/features/validation/schema"";",protected static String stringVar1 = stringLiteral2;
10588,MALICIOUS_CODE,MS_SHOULD_BE_FINAL,FP,digester,964,"public static String DFLT_METHOD_ATTR = ""method"";","public static String DFLT_METHOD_ATTR = ""method"";",public static String stringVar1 = stringLiteral2;
10591,MALICIOUS_CODE,MS_SHOULD_BE_FINAL,FP,digester,967,"public static String DFLT_RULECLASS_SUFFIX = ""RuleInfo"";","public static String DFLT_RULECLASS_SUFFIX = ""RuleInfo"";",public static String stringVar1 = stringLiteral2;
10593,MALICIOUS_CODE,MS_SHOULD_BE_FINAL,FP,digester,969,"public static String DFLT_METHOD_NAME = ""addRules"";","public static String DFLT_METHOD_NAME = ""addRules"";",public static String stringVar1 = stringLiteral2;
10594,MALICIOUS_CODE,MS_SHOULD_BE_FINAL,FP,digester,970,"public static String DFLT_RESOURCE_SUFFIX = ""RuleInfo.xml"";","public static String DFLT_RESOURCE_SUFFIX = ""RuleInfo.xml"";",public static String stringVar1 = stringLiteral2;
10595,MALICIOUS_CODE,MS_SHOULD_BE_FINAL,FP,digester,971,"public static String DFLT_FILENAME_ATTR = ""file"";","public static String DFLT_FILENAME_ATTR = ""file"";",public static String stringVar1 = stringLiteral2;
10596,MALICIOUS_CODE,MS_SHOULD_BE_FINAL,FP,digester,972,"public static String DFLT_METHOD_ATTR = ""method"";","public static String DFLT_METHOD_ATTR = ""method"";",public static String stringVar1 = stringLiteral2;
10599,MALICIOUS_CODE,MS_SHOULD_BE_FINAL,FP,digester,975,"public static String DFLT_PROPS_ATTR = ""setprops"";","public static String DFLT_PROPS_ATTR = ""setprops"";",public static String stringVar1 = stringLiteral2;
10626,CORRECTNESS,UWF_NULL_FIELD,FP,digester,1002,protected String namespaceURI = null;,protected String namespaceURI = null;,protected String stringVar1 = stringLiteral2;
10633,MALICIOUS_CODE,MS_SHOULD_BE_FINAL,FP,digester,1009,"protected static String XERCES_SCHEMA = ""http://apache.org/xml/features/validation/schema"";","protected static String XERCES_SCHEMA = ""http://apache.org/xml/features/validation/schema"";",protected static String stringVar1 = stringLiteral2;
10635,MALICIOUS_CODE,MS_SHOULD_BE_FINAL,FP,digester,1011,"protected static String XERCES_DYNAMIC = ""http://apache.org/xml/features/validation/dynamic"";","protected static String XERCES_DYNAMIC = ""http://apache.org/xml/features/validation/dynamic"";",protected static String stringVar1 = stringLiteral2;
10647,MALICIOUS_CODE,MS_SHOULD_BE_FINAL,FP,digester,1023,"public static String DFLT_RESOURCE_SUFFIX = ""RuleInfo.xml"";","public static String DFLT_RESOURCE_SUFFIX = ""RuleInfo.xml"";",public static String stringVar1 = stringLiteral2;
10648,MALICIOUS_CODE,MS_SHOULD_BE_FINAL,FP,digester,1024,"public static String DFLT_FILENAME_ATTR = ""file"";","public static String DFLT_FILENAME_ATTR = ""file"";",public static String stringVar1 = stringLiteral2;
10650,MALICIOUS_CODE,MS_SHOULD_BE_FINAL,FP,digester,1026,"public static String DFLT_RESOURCE_ATTR = ""resource"";","public static String DFLT_RESOURCE_ATTR = ""resource"";",public static String stringVar1 = stringLiteral2;
10685,CORRECTNESS,NP_NULL_PARAM_DEREF,FP,digester,1061,"return new FactoryCreateRule( type, attributeName, ignoreCreateExceptions );
","@Override
protected FactoryCreateRule createRule() {
if (type == null && attributeName == null && creationFactory == null) {
reportError(""factoryCreate()"", ""at least one between 'className', 'attributeName' or 'creationFactory' has to be specified"");
}
if (type != null || attributeName != null) {
return new FactoryCreateRule(type, attributeName, ignoreCreateExceptions);
}
return new FactoryCreateRule(creationFactory, ignoreCreateExceptions);
}","@Override
protected FactoryCreateRule createRule() {
if (type == null && attributeName == null && creationFactory == null) {
reportError(""factoryCreate()"", ""at least one between 'className', 'attributeName' or 'creationFactory' has to be specified"");
}
if (type != null || attributeName != null) {
return new FactoryCreateRule(type, attributeName, ignoreCreateExceptions);
}
return new FactoryCreateRule(creationFactory, ignoreCreateExceptions);
}"
10687,PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,digester,1063,"{
@Override
protected void loadRules()
{
loadXMLRules( xmlRulesResource );
}
","@Override
public void begin(final String namespace, final String name, final Attributes attributes) throws Exception {
final String fileName = attributes.getValue(""url"");
if (fileName != null && !fileName.isEmpty()) {
final URL xmlRulesResource;
if (fileName.startsWith(CLASSPATH_URL_PREFIX)) {
String path = fileName.substring(CLASSPATH_URL_PREFIX.length());
if ('/' == path.charAt(0)) {
path = path.substring(1);
}
xmlRulesResource = this.targetRulesBinder.getContextClassLoader().getResource(path);
if (xmlRulesResource == null) {
targetRulesBinder.addError(""Resource '%s' not found, please make sure it is in the classpath"", path);
return;
}
} else {
try {
xmlRulesResource = new URL(fileName);
} catch (final MalformedURLException e) {
targetRulesBinder.addError(""An error occurred while inculing file from '%s': %s"", fileName, e.getMessage());
return;
}
}
final Set<String> includedFiles = memoryRulesBinder.getIncludedFiles();
final String xmlRulesResourceString = xmlRulesResource.toString();
if (includedFiles.add(xmlRulesResourceString)) {
try {
install(new FromXmlRulesModule() {
@Override
protected void loadRules() {
loadXMLRules(xmlRulesResource);
}
});
} finally {
includedFiles.remove(xmlRulesResourceString);
}
} else {
targetRulesBinder.addError(""Circular file inclusion detected for XML rules: %s"", xmlRulesResource);
}
}
final String className = attributes.getValue(""class"");
if (className != null && !className.isEmpty()) {
try {
final Class<?> cls = Class.forName(className);
if (!RulesModule.class.isAssignableFrom(cls)) {
targetRulesBinder.addError(""Class '%s' if not a '%s' implementation"", className, RulesModule.class.getName());
return;
}
final RulesModule rulesSource = (RulesModule) cls.newInstance();
install(rulesSource);
} catch (final Exception e) {
targetRulesBinder.addError(""Impossible to include programmatic rules from class '%s': %s"", className, e.getMessage());
}
}
}","@Override
public void begin(final String namespace, final String name, final Attributes attributes) throws Exception {
final String stringVar1 = stringLiteral2;
if (stringVar1 != null && !stringVar1.isEmpty()) {
final URL urlVar3;
if (stringVar1.startsWith(CLASSPATH_URL_PREFIX)) {
String stringVar4 = stringLiteral5;
if ('/' == stringVar4.charAt(0)) {
stringVar4 = stringVar4.substring(1);
}
urlVar3 = this.targetRulesBinder.getContextClassLoader().getResource(stringVar4);
if (urlVar3 == null) {
targetRulesBinder.addError(""Resource '%s' not found, please make sure it is in the classpath"", stringVar4);
return;
}
} else {
try {
urlVar3 = new URL(stringVar1);
} catch (final MalformedURLException e) {
targetRulesBinder.addError(""An error occurred while inculing file from '%s': %s"", stringVar1, e.getMessage());
return;
}
}
final Set<String> set<string>Var6 = set<string>Literal7;
final String stringVar8 = stringLiteral9;
if (set<string>Var6.add(stringVar8)) {
try {
install(new FromXmlRulesModule() {
@Override
protected void loadRules() {
loadXMLRules(urlVar3);
}
});
} finally {
set<string>Var6.remove(stringVar8);
}
} else {
targetRulesBinder.addError(""Circular file inclusion detected for XML rules: %s"", urlVar3);
}
}
final String stringVar10 = stringLiteral11;
if (stringVar10 != null && !stringVar10.isEmpty()) {
try {
final Class<?> class<?>Var12 = class<?>Literal13;
if (!RulesModule.class.isAssignableFrom(class<?>Var12)) {
targetRulesBinder.addError(""Class '%s' if not a '%s' implementation"", stringVar10, RulesModule.class.getName());
return;
}
final RulesModule rulesmoduleVar14 = rulesmoduleLiteral15;
install(rulesmoduleVar14);
} catch (final Exception e) {
targetRulesBinder.addError(""Impossible to include programmatic rules from class '%s': %s"", stringVar10, e.getMessage());
}
}
}"
10702,MALICIOUS_CODE,EI_EXPOSE_REP2,FP,digester,1078,"this.updated = updated;
","public void setUpdated(final Date updated) {
this.updated = updated;
}","public void setUpdated(final Date updated) {
this.updated = updated;
}"
10703,I18N,DM_CONVERT_CASE,FP,digester,1079,"return s.toLowerCase();
","@Override
public String transform(final String s) {
if (toLower) {
return s.toLowerCase();
}
return s.toUpperCase();
}","@Override
public String transform(final String s) {
if (toLower) {
return s.toLowerCase();
}
return s.toUpperCase();
}"
10706,I18N,DM_DEFAULT_ENCODING,FP,digester,1082,"final FileReader inRaw = new FileReader( source );
","private void execute() throws IOException {
final FileReader inRaw = new FileReader(source);
final FileWriter out = new FileWriter(dest);
final BufferedReader in = new BufferedReader(inRaw);
while (true) {
final String inStr = in.readLine();
if (inStr == null) {
break;
}
final String outStr = transformer.transform(inStr);
out.write(outStr);
out.write('\n');
}
inRaw.close();
out.close();
System.out.println(""Contents of file "" + source + "" have been transformed, and"" + "" written to file "" + dest + ""."");
}","private void execute() throws IOException {
final FileReader filereaderVar1 = filereaderLiteral2;
final FileWriter filewriterVar3 = filewriterLiteral4;
final BufferedReader bufferedreaderVar5 = bufferedreaderLiteral6;
while (true) {
final String stringVar7 = stringLiteral8;
if (stringVar7 == null) {
break;
}
final String stringVar9 = stringLiteral10;
filewriterVar3.write(stringVar9);
filewriterVar3.write('\n');
}
filereaderVar1.close();
filewriterVar3.close();
System.out.println(""Contents of file "" + source + "" have been transformed, and"" + "" written to file "" + dest + ""."");
}"
10707,EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,FP,digester,1083,"final FileWriter out = new FileWriter( dest );
","private void execute() throws IOException {
final FileReader inRaw = new FileReader(source);
final FileWriter out = new FileWriter(dest);
final BufferedReader in = new BufferedReader(inRaw);
while (true) {
final String inStr = in.readLine();
if (inStr == null) {
break;
}
final String outStr = transformer.transform(inStr);
out.write(outStr);
out.write('\n');
}
inRaw.close();
out.close();
System.out.println(""Contents of file "" + source + "" have been transformed, and"" + "" written to file "" + dest + ""."");
}","private void execute() throws IOException {
final FileReader filereaderVar1 = filereaderLiteral2;
final FileWriter filewriterVar3 = filewriterLiteral4;
final BufferedReader bufferedreaderVar5 = bufferedreaderLiteral6;
while (true) {
final String stringVar7 = stringLiteral8;
if (stringVar7 == null) {
break;
}
final String stringVar9 = stringLiteral10;
filewriterVar3.write(stringVar9);
filewriterVar3.write('\n');
}
filereaderVar1.close();
filewriterVar3.close();
System.out.println(""Contents of file "" + source + "" have been transformed, and"" + "" written to file "" + dest + ""."");
}"
10708,EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,FP,digester,1084,"final FileReader inRaw = new FileReader( source );
","private void execute() throws IOException {
final FileReader inRaw = new FileReader(source);
final FileWriter out = new FileWriter(dest);
final BufferedReader in = new BufferedReader(inRaw);
while (true) {
final String inStr = in.readLine();
if (inStr == null) {
break;
}
final String outStr = transformer.transform(inStr);
out.write(outStr);
out.write('\n');
}
inRaw.close();
out.close();
System.out.println(""Contents of file "" + source + "" have been transformed, and"" + "" written to file "" + dest + ""."");
}","private void execute() throws IOException {
final FileReader filereaderVar1 = filereaderLiteral2;
final FileWriter filewriterVar3 = filewriterLiteral4;
final BufferedReader bufferedreaderVar5 = bufferedreaderLiteral6;
while (true) {
final String stringVar7 = stringLiteral8;
if (stringVar7 == null) {
break;
}
final String stringVar9 = stringLiteral10;
filewriterVar3.write(stringVar9);
filewriterVar3.write('\n');
}
filereaderVar1.close();
filewriterVar3.close();
System.out.println(""Contents of file "" + source + "" have been transformed, and"" + "" written to file "" + dest + ""."");
}"
10710,DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,digester,1086,"buf.replace( idx, idx + from.length(), to );
","@Override
public String transform(final String s) {
final StringBuilder buf = new StringBuilder(s);
while (true) {
final int idx = buf.indexOf(from);
if (idx == -1) {
break;
}
buf.replace(idx, idx + from.length(), to);
}
return buf.toString();
}","@Override
public String transform(final String s) {
final StringBuilder stringbuilderVar1 = stringbuilderLiteral2;
while (true) {
final int intVar3 = intLiteral4;
if (intVar3 == -1) {
break;
}
stringbuilderVar1.replace(intVar3, intVar3 + from.length(), to);
}
return stringbuilderVar1.toString();
}"
10711,I18N,DM_DEFAULT_ENCODING,FP,digester,1087,"pw = new PrintWriter( stream );
","public void render(final OutputStream stream, final String encoding) throws UnsupportedEncodingException {
PrintWriter pw = null;
if (encoding == null) {
pw = new PrintWriter(stream);
} else {
pw = new PrintWriter(new OutputStreamWriter(stream, encoding));
}
render(pw, encoding);
pw.flush();
}","public void render(final OutputStream stream, final String encoding) throws UnsupportedEncodingException {
PrintWriter printwriterVar1 = printwriterLiteral2;
if (encoding == null) {
printwriterVar1 = new PrintWriter(stream);
} else {
printwriterVar1 = new PrintWriter(new OutputStreamWriter(stream, encoding));
}
render(printwriterVar1, encoding);
printwriterVar1.flush();
}"
10716,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,digester,1092,"return ( null );
","public Object[] peekParams() {
try {
return (params.peek());
} catch (EmptyStackException e) {
log.warn(""Empty stack (returning null)"");
return (null);
}
}","public Object[] peekParams() {
try {
return (params.peek());
} catch (EmptyStackException e) {
log.warn(""Empty stack (returning null)"");
return (null);
}
}"
10724,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,digester,1100,"return null;
","public static Annotation[] getAnnotationsArrayValue(Annotation annotation) {
Object value = getAnnotationValue(annotation);
if (value != null && value.getClass().isArray() && Annotation.class.isAssignableFrom(value.getClass().getComponentType())) {
return (Annotation[]) value;
}
return null;
}","public static Annotation[] getAnnotationsArrayValue(Annotation annotation) {
Object objectVar1 = objectLiteral2;
if (objectVar1 != null && objectVar1.getClass().isArray() && Annotation.class.isAssignableFrom(objectVar1.getClass().getComponentType())) {
return (Annotation[]) objectVar1;
}
return null;
}"
10725,CORRECTNESS,NP_NULL_PARAM_DEREF,FP,digester,1101,"return new FactoryCreateRule( type, attributeName, ignoreCreateExceptions );
","@Override
protected FactoryCreateRule createRule() {
if (type == null && attributeName == null && creationFactory == null) {
reportError(""factoryCreate()"", ""at least one between 'className', 'attributeName' or 'creationFactory' has to be specified"");
}
if (type != null || attributeName != null) {
return new FactoryCreateRule(type, attributeName, ignoreCreateExceptions);
}
return new FactoryCreateRule(creationFactory, ignoreCreateExceptions);
}","@Override
protected FactoryCreateRule createRule() {
if (type == null && attributeName == null && creationFactory == null) {
reportError(""factoryCreate()"", ""at least one between 'className', 'attributeName' or 'creationFactory' has to be specified"");
}
if (type != null || attributeName != null) {
return new FactoryCreateRule(type, attributeName, ignoreCreateExceptions);
}
return new FactoryCreateRule(creationFactory, ignoreCreateExceptions);
}"
10728,DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,digester,1104,"return memoryRulesBinder.forPattern( pattern );
","protected LinkedRuleBuilder forPattern(String pattern) {
return memoryRulesBinder.forPattern(pattern);
}","protected LinkedRuleBuilder forPattern(String pattern) {
return memoryRulesBinder.forPattern(pattern);
}"
10730,MALICIOUS_CODE,EI_EXPOSE_REP2,FP,digester,1106,"this.updated = updated;
","public void setUpdated(Date updated) {
this.updated = updated;
}","public void setUpdated(Date updated) {
this.updated = updated;
}"
10734,I18N,DM_DEFAULT_ENCODING,FP,digester,1110,"return new java.io.StringReader( baos.toString() );
","private static java.io.Reader getInputData(String filename) throws java.io.IOException {
java.io.File srcfile = new java.io.File(filename);
java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream(1000);
byte[] buf = new byte[100];
java.io.FileInputStream fis = new java.io.FileInputStream(srcfile);
for (; ; ) {
int nread = fis.read(buf);
if (nread == -1) {
break;
}
baos.write(buf, 0, nread);
}
fis.close();
return new java.io.StringReader(baos.toString());
}","private static java.io.Reader getInputData(String filename) throws java.io.IOException {
java.io.File java.io.fileVar1 = java.io.fileLiteral2;
java.io.ByteArrayOutputStream java.io.bytearrayoutputstreamVar3 = java.io.bytearrayoutputstreamLiteral4;
byte[] byteArrayVar5 = byteArrayLiteral6;
java.io.FileInputStream java.io.fileinputstreamVar7 = java.io.fileinputstreamLiteral8;
for (; ; ) {
int intVar9 = intLiteral10;
if (intVar9 == -1) {
break;
}
java.io.bytearrayoutputstreamVar3.write(byteArrayVar5, 0, intVar9);
}
java.io.fileinputstreamVar7.close();
return new java.io.StringReader(java.io.bytearrayoutputstreamVar3.toString());
}"
10737,DODGY_CODE,NP_LOAD_OF_KNOWN_NULL_VALUE,FP,digester,1113,"addRules( d, connection );
","public static void main(String[] args) {
if (args.length != 1) {
usage();
System.exit(-1);
}
String filename = args[0];
Digester d = new Digester();
Connection connection = null;
addRules(d, connection);
System.out.println(""Parsing commencing..."");
try {
File srcfile = new File(filename);
d.parse(srcfile);
} catch (IOException ioe) {
System.out.println(""Error reading input file:"" + ioe.getMessage());
System.exit(-1);
} catch (SAXException se) {
System.out.println(""Error parsing input file:"" + se.getMessage());
System.exit(-1);
}
System.out.println(""Parsing complete."");
}","public static void main(String[] args) {
if (args.length != 1) {
usage();
System.exit(-1);
}
String stringVar1 = stringLiteral2;
Digester digesterVar3 = digesterLiteral4;
Connection connectionVar5 = connectionLiteral6;
addRules(digesterVar3, connectionVar5);
System.out.println(""Parsing commencing..."");
try {
File fileVar7 = fileLiteral8;
digesterVar3.parse(fileVar7);
} catch (IOException ioe) {
System.out.println(""Error reading input file:"" + ioe.getMessage());
System.exit(-1);
} catch (SAXException se) {
System.out.println(""Error parsing input file:"" + se.getMessage());
System.exit(-1);
}
System.out.println(""Parsing complete."");
}"
10756,DODGY_CODE,UC_USELESS_CONDITION,FP,digester,1132,"if (paramTypes.length == 0) {
","public void end() throws Exception {
Object[] parameters = null;
if (paramCount > 0) {
parameters = (Object[]) digester.popParams();
if (digester.log.isTraceEnabled()) {
for (int i = 0, size = parameters.length; i < size; i++) {
digester.log.trace(""[CallMethodRule]("" + i + "")"" + parameters[i]);
}
}
if (paramCount == 1 && parameters[0] == null) {
return;
}
} else if (paramTypes != null && paramTypes.length != 0) {
if (bodyText == null) {
return;
}
parameters = new Object[1];
parameters[0] = bodyText;
if (paramTypes.length == 0) {
paramTypes = new Class[1];
paramTypes[0] = String.class;
}
} else {
;
}
Object[] paramValues = new Object[paramTypes.length];
for (int i = 0; i < paramTypes.length; i++) {
if (parameters[i] == null || (parameters[i] instanceof String && !String.class.isAssignableFrom(paramTypes[i]))) {
paramValues[i] = ConvertUtils.convert((String) parameters[i], paramTypes[i]);
} else {
paramValues[i] = parameters[i];
}
}
Object target;
if (targetOffset >= 0) {
target = digester.peek(targetOffset);
} else {
target = digester.peek(digester.getCount() + targetOffset);
}
if (target == null) {
StringBuffer sb = new StringBuffer();
sb.append(""[CallMethodRule]{"");
sb.append(digester.match);
sb.append(""} Call target is null ("");
sb.append(""targetOffset="");
sb.append(targetOffset);
sb.append("",stackdepth="");
sb.append(digester.getCount());
sb.append("")"");
throw new org.xml.sax.SAXException(sb.toString());
}
if (digester.log.isDebugEnabled()) {
StringBuffer sb = new StringBuffer(""[CallMethodRule]{"");
sb.append(digester.match);
sb.append(""} Call "");
sb.append(target.getClass().getName());
sb.append(""."");
sb.append(methodName);
sb.append(""("");
for (int i = 0; i < paramValues.length; i++) {
if (i > 0) {
sb.append("","");
}
if (paramValues[i] == null) {
sb.append(""null"");
} else {
sb.append(paramValues[i].toString());
}
sb.append(""/"");
if (paramTypes[i] == null) {
sb.append(""null"");
} else {
sb.append(paramTypes[i].getName());
}
}
sb.append("")"");
digester.log.debug(sb.toString());
}
Object result = null;
if (useExactMatch) {
result = MethodUtils.invokeExactMethod(target, methodName, paramValues, paramTypes);
} else {
result = MethodUtils.invokeMethod(target, methodName, paramValues, paramTypes);
}
processMethodCallResult(result);
}","public void end() throws Exception {
Object[] objectArrayVar1 = objectArrayLiteral2;
if (paramCount > 0) {
objectArrayVar1 = (Object[]) digester.popParams();
if (digester.log.isTraceEnabled()) {
for (int intVar14 = intLiteral15, intVar16 = intLiteral17; intVar3 < intLiteral1; intVar3++) {
digester.log.trace(""[CallMethodRule]("" + intVar3 + "")"" + objectArrayVar1[intVar3]);
}
}
if (paramCount == 1 && objectArrayVar1[0] == null) {
return;
}
} else if (paramTypes != null && paramTypes.length != 0) {
if (bodyText == null) {
return;
}
objectArrayVar1 = new Object[1];
objectArrayVar1[0] = bodyText;
if (paramTypes.length == 0) {
paramTypes = new Class[1];
paramTypes[0] = String.class;
}
} else {
;
}
Object[] objectArrayVar7 = objectArrayLiteral8;
for (int intVar14 = intLiteral15; intVar3 < intLiteral2; intVar3++) {
if (objectArrayVar1[intVar3] == null || (objectArrayVar1[intVar3] instanceof String && !String.class.isAssignableFrom(paramTypes[intVar3]))) {
objectArrayVar7[intVar3] = ConvertUtils.convert((String) objectArrayVar1[intVar3], paramTypes[intVar3]);
} else {
objectArrayVar7[intVar3] = objectArrayVar1[intVar3];
}
}
Object objectVar9;
if (targetOffset >= 0) {
objectVar9 = digester.peek(targetOffset);
} else {
objectVar9 = digester.peek(digester.getCount() + targetOffset);
}
if (objectVar9 == null) {
StringBuffer stringbufferVar10 = stringbufferLiteral11;
stringbufferVar10.append(""[CallMethodRule]{"");
stringbufferVar10.append(digester.match);
stringbufferVar10.append(""} Call target is null ("");
stringbufferVar10.append(""targetOffset="");
stringbufferVar10.append(targetOffset);
stringbufferVar10.append("",stackdepth="");
stringbufferVar10.append(digester.getCount());
stringbufferVar10.append("")"");
throw new org.xml.sax.SAXException(stringbufferVar10.toString());
}
if (digester.log.isDebugEnabled()) {
StringBuffer stringbufferVar10 = stringbufferLiteral12;
stringbufferVar10.append(digester.match);
stringbufferVar10.append(""} Call "");
stringbufferVar10.append(objectVar9.getClass().getName());
stringbufferVar10.append(""."");
stringbufferVar10.append(methodName);
stringbufferVar10.append(""("");
for (int intVar14 = intLiteral15; intVar3 < intLiteral3; intVar3++) {
if (intVar3 > 0) {
stringbufferVar10.append("","");
}
if (objectArrayVar7[intVar3] == null) {
stringbufferVar10.append(""null"");
} else {
stringbufferVar10.append(objectArrayVar7[intVar3].toString());
}
stringbufferVar10.append(""/"");
if (paramTypes[intVar3] == null) {
stringbufferVar10.append(""null"");
} else {
stringbufferVar10.append(paramTypes[intVar3].getName());
}
}
stringbufferVar10.append("")"");
digester.log.debug(stringbufferVar10.toString());
}
Object objectVar13 = objectArrayLiteral2;
if (useExactMatch) {
objectVar13 = MethodUtils.invokeExactMethod(objectVar9, methodName, objectArrayVar7, paramTypes);
} else {
objectVar13 = MethodUtils.invokeMethod(objectVar9, methodName, objectArrayVar7, paramTypes);
}
processMethodCallResult(objectVar13);
}"
10775,PERFORMANCE,SS_SHOULD_BE_STATIC,FP,digester,1151,"public final String DFLT_PLUGIN_CLASS_ATTR = ""plugin-class"";","public final String DFLT_PLUGIN_CLASS_ATTR = ""plugin-class"";",public final String stringVar1 = stringLiteral2;
10785,MALICIOUS_CODE,MS_SHOULD_BE_FINAL,FP,digester,1161,"public static String DFLT_RESOURCE_ATTR = ""resource"";","public static String DFLT_RESOURCE_ATTR = ""resource"";",public static String stringVar1 = stringLiteral2;
10878,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,digester,1254,"return ( null );
","public Object[] peekParams() {
try {
return (params.peek());
} catch (EmptyStackException e) {
log.warn(""Empty stack (returning null)"");
return (null);
}
}","public Object[] peekParams() {
try {
return (params.peek());
} catch (EmptyStackException e) {
log.warn(""Empty stack (returning null)"");
return (null);
}
}"
10879,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,digester,1255,"return ( null );
","public Object[] peekParams(int n) {
int index = (params.size() - 1) - n;
if (index < 0) {
log.warn(""Empty stack (returning null)"");
return (null);
}
try {
return (params.get(index));
} catch (EmptyStackException e) {
log.warn(""Empty stack (returning null)"");
return (null);
}
}","public Object[] peekParams(int n) {
int intVar1 = intLiteral2;
if (intVar1 < 0) {
log.warn(""Empty stack (returning null)"");
return (null);
}
try {
return (params.get(intVar1));
} catch (EmptyStackException e) {
log.warn(""Empty stack (returning null)"");
return (null);
}
}"
10884,PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,digester,1260,"{
private static final long serialVersionUID = 1L;
@Override
protected boolean removeEldestEntry( Map.Entry<Class<?>, FromAnnotationsRuleSet> eldest )
{
return size() > cacheSize;
",private final float loadFactor = 0.75f;,private final float floatVar1 = floatLiteral2;
10898,MALICIOUS_CODE,MS_SHOULD_BE_FINAL,FP,digester,1274,"public static String DFLT_RULECLASS_SUFFIX = ""RuleInfo"";","public static String DFLT_RULECLASS_SUFFIX = ""RuleInfo"";",public static String stringVar1 = stringLiteral2;
10937,DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,digester,1313,"return memoryRulesBinder.forPattern( pattern );
","protected LinkedRuleBuilder forPattern(String pattern) {
return memoryRulesBinder.forPattern(pattern);
}","protected LinkedRuleBuilder forPattern(String pattern) {
return memoryRulesBinder.forPattern(pattern);
}"
10942,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,digester,1318,"return ( null );
","public Object[] peekParams() {
try {
return (params.peek());
} catch (EmptyStackException e) {
log.warn(""Empty stack (returning null)"");
return (null);
}
}","public Object[] peekParams() {
try {
return (params.peek());
} catch (EmptyStackException e) {
log.warn(""Empty stack (returning null)"");
return (null);
}
}"
10947,DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,digester,1323,"rulesBinder.addError( e );
","@SuppressWarnings(""unchecked"")
private <A extends Annotation, E extends AnnotatedElement, R extends Rule> void handle(A annotation, E element) {
Class<?> annotationType = annotation.annotationType();
if (annotationType.isAnnotationPresent(DigesterRuleList.class)) {
Annotation[] annotations = getAnnotationsArrayValue(annotation);
if (annotations != null && annotations.length > 0) {
for (Annotation ptr : annotations) {
handle(ptr, element);
}
}
} else if (annotationType.isAnnotationPresent(DigesterRule.class)) {
DigesterRule digesterRule = annotationType.getAnnotation(DigesterRule.class);
Class<? extends AnnotationHandler<Annotation, AnnotatedElement>> handlerType = (Class<? extends AnnotationHandler<Annotation, AnnotatedElement>>) digesterRule.handledBy();
try {
AnnotationHandler<Annotation, AnnotatedElement> handler = annotationHandlerFactory.newInstance(handlerType);
handler.handle(annotation, element, this.rulesBinder);
} catch (Exception e) {
rulesBinder.addError(e);
}
}
}","@SuppressWarnings(""unchecked"")
private <A extends Annotation, E extends AnnotatedElement, R extends Rule> void handle(A annotation, E element) {
Class<?> class<?>Var1 = class<?>Literal2;
if (class<?>Var1.isAnnotationPresent(DigesterRuleList.class)) {
Annotation[] annotationArrayVar3 = annotationArrayLiteral4;
if (annotationArrayVar3 != null && annotationArrayVar3.length > 0) {
for (Annotation annotationVar5 : annotationArrayVar3) {
handle(annotationVar5, element);
}
}
} else if (class<?>Var1.isAnnotationPresent(DigesterRule.class)) {
DigesterRule digesterruleVar6 = digesterruleLiteral7;
Class<? extends AnnotationHandler<Annotation, AnnotatedElement>> class<? extends annotationhandler<annotation,annotatedelement>>Var8 = class<? extends annotationhandler<annotation,annotatedelement>>Literal9;
try {
AnnotationHandler<Annotation, AnnotatedElement> annotationhandler<annotation,annotatedelement>Var10 = annotationhandler<annotation,annotatedelement>Literal11;
annotationhandler<annotation,annotatedelement>Var10.handle(annotation, element, this.rulesBinder);
} catch (Exception e) {
rulesBinder.addError(e);
}
}
}"
10956,CORRECTNESS,NP_NULL_ON_SOME_PATH,FP,digester,1332,"Object paramValues[] = new Object[paramTypes.length];
","@Override
public void end(String namespace, String name) throws Exception {
Object[] parameters = null;
if (paramCount > 0) {
parameters = getDigester().popParams();
if (getDigester().getLogger().isTraceEnabled()) {
for (int i = 0, size = parameters.length; i < size; i++) {
getDigester().getLogger().trace(format(""[CallMethodRule]{%s} parameters[%s]=%s"", getDigester().getMatch(), i, parameters[i]));
}
}
if (paramCount == 1 && parameters[0] == null) {
return;
}
} else if (paramTypes != null && paramTypes.length != 0) {
if (bodyText == null) {
return;
}
parameters = new Object[1];
parameters[0] = bodyText;
if (paramTypes.length == 0) {
paramTypes = new Class[1];
paramTypes[0] = String.class;
}
} else {
}
Object[] paramValues = new Object[paramTypes.length];
for (int i = 0; i < paramTypes.length; i++) {
if (parameters[i] == null || (parameters[i] instanceof String && !String.class.isAssignableFrom(paramTypes[i]))) {
paramValues[i] = ConvertUtils.convert((String) parameters[i], paramTypes[i]);
} else {
paramValues[i] = parameters[i];
}
}
Object target;
if (targetOffset >= 0) {
target = getDigester().peek(targetOffset);
} else {
target = getDigester().peek(getDigester().getCount() + targetOffset);
}
if (target == null) {
throw new SAXException(format(""[CallMethodRule]{%s} Call target is null (targetOffset=%s, stackdepth=%s)"", getDigester().getMatch(), targetOffset, getDigester().getCount()));
}
if (getDigester().getLogger().isDebugEnabled()) {
Formatter formatter = new Formatter().format(""[CallMethodRule]{%s} Call %s.%s("", getDigester().getMatch(), target.getClass().getName(), methodName);
for (int i = 0; i < paramValues.length; i++) {
formatter.format(""%s%s/%s"", (i > 0 ? "", "" : """"), paramValues[i], paramTypes[i].getName());
}
formatter.format("")"");
getDigester().getLogger().debug(formatter.toString());
}
Object result = null;
if (useExactMatch) {
result = MethodUtils.invokeExactMethod(target, methodName, paramValues, paramTypes);
} else {
result = MethodUtils.invokeMethod(target, methodName, paramValues, paramTypes);
}
processMethodCallResult(result);
}","@Override
public void end(String namespace, String name) throws Exception {
Object[] objectArrayVar1 = objectArrayLiteral2;
if (paramCount > 0) {
objectArrayVar1 = getDigester().popParams();
if (getDigester().getLogger().isTraceEnabled()) {
for (int intVar13 = intLiteral14, intVar15 = intLiteral16; intVar3 < intLiteral1; intVar3++) {
getDigester().getLogger().trace(format(""[CallMethodRule]{%s} parameters[%s]=%s"", getDigester().getMatch(), intVar3, objectArrayVar1[intVar3]));
}
}
if (paramCount == 1 && objectArrayVar1[0] == null) {
return;
}
} else if (paramTypes != null && paramTypes.length != 0) {
if (bodyText == null) {
return;
}
objectArrayVar1 = new Object[1];
objectArrayVar1[0] = bodyText;
if (paramTypes.length == 0) {
paramTypes = new Class[1];
paramTypes[0] = String.class;
}
} else {
}
Object[] objectArrayVar7 = objectArrayLiteral8;
for (int intVar13 = intLiteral14; intVar3 < intLiteral2; intVar3++) {
if (objectArrayVar1[intVar3] == null || (objectArrayVar1[intVar3] instanceof String && !String.class.isAssignableFrom(paramTypes[intVar3]))) {
objectArrayVar7[intVar3] = ConvertUtils.convert((String) objectArrayVar1[intVar3], paramTypes[intVar3]);
} else {
objectArrayVar7[intVar3] = objectArrayVar1[intVar3];
}
}
Object objectVar9;
if (targetOffset >= 0) {
objectVar9 = getDigester().peek(targetOffset);
} else {
objectVar9 = getDigester().peek(getDigester().getCount() + targetOffset);
}
if (objectVar9 == null) {
throw new SAXException(format(""[CallMethodRule]{%s} Call target is null (targetOffset=%s, stackdepth=%s)"", getDigester().getMatch(), targetOffset, getDigester().getCount()));
}
if (getDigester().getLogger().isDebugEnabled()) {
Formatter formatterVar10 = formatterLiteral11;
for (int intVar13 = intLiteral14; intVar3 < intLiteral3; intVar3++) {
formatterVar10.format(""%s%s/%s"", (intVar3 > 0 ? "", "" : """"), objectArrayVar7[intVar3], paramTypes[intVar3].getName());
}
formatterVar10.format("")"");
getDigester().getLogger().debug(formatterVar10.toString());
}
Object objectVar12 = objectArrayLiteral2;
if (useExactMatch) {
objectVar12 = MethodUtils.invokeExactMethod(objectVar9, methodName, objectArrayVar7, paramTypes);
} else {
objectVar12 = MethodUtils.invokeMethod(objectVar9, methodName, objectArrayVar7, paramTypes);
}
processMethodCallResult(objectVar12);
}"
10970,CORRECTNESS,NP_NULL_PARAM_DEREF,FP,digester,1346,"return new FactoryCreateRule( type, attributeName, ignoreCreateExceptions );
","@Override
protected FactoryCreateRule createRule() {
if (type == null && attributeName == null && creationFactory == null) {
reportError(""factoryCreate()"", ""at least one between 'className', 'attributeName' or 'creationFactory' has to be specified"");
}
if (type != null || attributeName != null) {
return new FactoryCreateRule(type, attributeName, ignoreCreateExceptions);
}
return new FactoryCreateRule(creationFactory, ignoreCreateExceptions);
}","@Override
protected FactoryCreateRule createRule() {
if (type == null && attributeName == null && creationFactory == null) {
reportError(""factoryCreate()"", ""at least one between 'className', 'attributeName' or 'creationFactory' has to be specified"");
}
if (type != null || attributeName != null) {
return new FactoryCreateRule(type, attributeName, ignoreCreateExceptions);
}
return new FactoryCreateRule(creationFactory, ignoreCreateExceptions);
}"
11063,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,digester,1439,"return ( null );
","public Object[] popParams() {
try {
if (log.isTraceEnabled()) {
log.trace(""Popping params"");
}
return (params.pop());
} catch (EmptyStackException e) {
log.warn(""Empty stack (returning null)"");
return (null);
}
}","public Object[] popParams() {
try {
if (log.isTraceEnabled()) {
log.trace(""Popping params"");
}
return (params.pop());
} catch (EmptyStackException e) {
log.warn(""Empty stack (returning null)"");
return (null);
}
}"
11067,DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,digester,1443,"rulesBinder.addError( e );
","@SuppressWarnings(""unchecked"")
private <A extends Annotation, E extends AnnotatedElement, R extends Rule> void handle(A annotation, E element) {
Class<?> annotationType = annotation.annotationType();
if (annotationType.isAnnotationPresent(DigesterRuleList.class)) {
Annotation[] annotations = getAnnotationsArrayValue(annotation);
if (annotations != null && annotations.length > 0) {
for (Annotation ptr : annotations) {
handle(ptr, element);
}
}
} else if (annotationType.isAnnotationPresent(DigesterRule.class)) {
DigesterRule digesterRule = annotationType.getAnnotation(DigesterRule.class);
Class<? extends AnnotationHandler<Annotation, AnnotatedElement>> handlerType = (Class<? extends AnnotationHandler<Annotation, AnnotatedElement>>) digesterRule.handledBy();
try {
AnnotationHandler<Annotation, AnnotatedElement> handler = annotationHandlerFactory.newInstance(handlerType);
handler.handle(annotation, element, this.rulesBinder);
} catch (Exception e) {
rulesBinder.addError(e);
}
}
}","@SuppressWarnings(""unchecked"")
private <A extends Annotation, E extends AnnotatedElement, R extends Rule> void handle(A annotation, E element) {
Class<?> class<?>Var1 = class<?>Literal2;
if (class<?>Var1.isAnnotationPresent(DigesterRuleList.class)) {
Annotation[] annotationArrayVar3 = annotationArrayLiteral4;
if (annotationArrayVar3 != null && annotationArrayVar3.length > 0) {
for (Annotation annotationVar5 : annotationArrayVar3) {
handle(annotationVar5, element);
}
}
} else if (class<?>Var1.isAnnotationPresent(DigesterRule.class)) {
DigesterRule digesterruleVar6 = digesterruleLiteral7;
Class<? extends AnnotationHandler<Annotation, AnnotatedElement>> class<? extends annotationhandler<annotation,annotatedelement>>Var8 = class<? extends annotationhandler<annotation,annotatedelement>>Literal9;
try {
AnnotationHandler<Annotation, AnnotatedElement> annotationhandler<annotation,annotatedelement>Var10 = annotationhandler<annotation,annotatedelement>Literal11;
annotationhandler<annotation,annotatedelement>Var10.handle(annotation, element, this.rulesBinder);
} catch (Exception e) {
rulesBinder.addError(e);
}
}
}"
11075,DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,digester,1451,"return memoryRulesBinder.forPattern( pattern );
","protected LinkedRuleBuilder forPattern(String pattern) {
return memoryRulesBinder.forPattern(pattern);
}","protected LinkedRuleBuilder forPattern(String pattern) {
return memoryRulesBinder.forPattern(pattern);
}"
11078,DODGY_CODE,REC_CATCH_EXCEPTION,FP,digester,1454,"} catch (Exception e) {
","public SAXParser getParser() {
if (parser != null) {
return (parser);
}
try {
if (validating && (schemaLocation != null)) {
Properties properties = new Properties();
properties.put(""SAXParserFactory"", getFactory());
if (schemaLocation != null) {
properties.put(""schemaLocation"", schemaLocation);
properties.put(""schemaLanguage"", schemaLanguage);
}
parser = ParserFeatureSetterFactory.newSAXParser(properties);
} else {
parser = getFactory().newSAXParser();
}
} catch (Exception e) {
log.error(""Digester.getParser: "", e);
return (null);
}
return (parser);
}","public SAXParser getParser() {
if (parser != null) {
return (parser);
}
try {
if (validating && (schemaLocation != null)) {
Properties propertiesVar1 = propertiesLiteral2;
propertiesVar1.put(""SAXParserFactory"", getFactory());
if (schemaLocation != null) {
propertiesVar1.put(""schemaLocation"", schemaLocation);
propertiesVar1.put(""schemaLanguage"", schemaLanguage);
}
parser = ParserFeatureSetterFactory.newSAXParser(propertiesVar1);
} else {
parser = getFactory().newSAXParser();
}
} catch (Exception e) {
log.error(""Digester.getParser: "", e);
return (null);
}
return (parser);
}"
11088,DODGY_CODE,REC_CATCH_EXCEPTION,FP,digester,1464,"} catch (Exception ex){
","private static String getXercesVersion() {
String versionNumber = ""1.0"";
try {
Class versionClass = Class.forName(""org.apache.xerces.impl.Version"");
Method method = versionClass.getMethod(""getVersion"", (Class[]) null);
String version = (String) method.invoke(null, (Object[]) null);
versionNumber = version.substring(""Xerces-J"".length(), version.lastIndexOf("".""));
} catch (Exception ex) {
}
return versionNumber;
}","private static String getXercesVersion() {
String stringVar1 = stringLiteral2;
try {
Class classVar3 = classLiteral4;
Method methodVar5 = methodLiteral6;
String stringVar7 = stringLiteral8;
stringVar1 = stringVar7.substring(""Xerces-J"".length(), stringVar7.lastIndexOf("".""));
} catch (Exception ex) {
}
return stringVar1;
}"
11096,MALICIOUS_CODE,MS_SHOULD_BE_FINAL,FP,digester,1472,"public static String DFLT_METHOD_ATTR = ""method"";","public static String DFLT_METHOD_ATTR = ""method"";",public static String stringVar1 = stringLiteral2;
11097,MALICIOUS_CODE,MS_SHOULD_BE_FINAL,FP,digester,1473,"public static String DFLT_METHOD_NAME = ""addRules"";","public static String DFLT_METHOD_NAME = ""addRules"";",public static String stringVar1 = stringLiteral2;
11098,MALICIOUS_CODE,MS_SHOULD_BE_FINAL,FP,digester,1474,"public static String DFLT_RULECLASS_ATTR = ""ruleclass"";","public static String DFLT_RULECLASS_ATTR = ""ruleclass"";",public static String stringVar1 = stringLiteral2;
11101,MALICIOUS_CODE,MS_SHOULD_BE_FINAL,FP,digester,1477,"public static String DFLT_METHOD_NAME = ""addRules"";","public static String DFLT_METHOD_NAME = ""addRules"";",public static String stringVar1 = stringLiteral2;
11107,MALICIOUS_CODE,MS_SHOULD_BE_FINAL,FP,digester,1483,"public static String DFLT_PROPS_ATTR = ""setprops"";","public static String DFLT_PROPS_ATTR = ""setprops"";",public static String stringVar1 = stringLiteral2;
11138,PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,digester,1514,"{
public Method[] run()
{
return type.getDeclaredMethods();
","@SuppressWarnings(""unchecked"")
private <A extends Annotation, E extends AnnotatedElement, R extends Rule> void handle(A annotation, E element) {
Class<?> annotationType = annotation.annotationType();
if (annotationType.isAnnotationPresent(DigesterRuleList.class)) {
Annotation[] annotations = getAnnotationsArrayValue(annotation);
if (annotations != null && annotations.length > 0) {
for (Annotation ptr : annotations) {
handle(ptr, element);
}
}
} else if (annotationType.isAnnotationPresent(DigesterRule.class)) {
DigesterRule digesterRule = annotationType.getAnnotation(DigesterRule.class);
Class<? extends AnnotationHandler<Annotation, AnnotatedElement>> handlerType = (Class<? extends AnnotationHandler<Annotation, AnnotatedElement>>) digesterRule.handledBy();
try {
AnnotationHandler<Annotation, AnnotatedElement> handler = annotationHandlerFactory.newInstance(handlerType);
handler.handle(annotation, element, this.rulesBinder);
} catch (Exception e) {
rulesBinder.addError(e);
}
}
}","@SuppressWarnings(""unchecked"")
private <A extends Annotation, E extends AnnotatedElement, R extends Rule> void handle(A annotation, E element) {
Class<?> class<?>Var1 = class<?>Literal2;
if (class<?>Var1.isAnnotationPresent(DigesterRuleList.class)) {
Annotation[] annotationArrayVar3 = annotationArrayLiteral4;
if (annotationArrayVar3 != null && annotationArrayVar3.length > 0) {
for (Annotation annotationVar5 : annotationArrayVar3) {
handle(annotationVar5, element);
}
}
} else if (class<?>Var1.isAnnotationPresent(DigesterRule.class)) {
DigesterRule digesterruleVar6 = digesterruleLiteral7;
Class<? extends AnnotationHandler<Annotation, AnnotatedElement>> class<? extends annotationhandler<annotation,annotatedelement>>Var8 = class<? extends annotationhandler<annotation,annotatedelement>>Literal9;
try {
AnnotationHandler<Annotation, AnnotatedElement> annotationhandler<annotation,annotatedelement>Var10 = annotationhandler<annotation,annotatedelement>Literal11;
annotationhandler<annotation,annotatedelement>Var10.handle(annotation, element, this.rulesBinder);
} catch (Exception e) {
rulesBinder.addError(e);
}
}
}"
11139,DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,digester,1515,"rulesBinder.addError( e );
","@SuppressWarnings(""unchecked"")
private <A extends Annotation, E extends AnnotatedElement, R extends Rule> void handle(A annotation, E element) {
Class<?> annotationType = annotation.annotationType();
if (annotationType.isAnnotationPresent(DigesterRuleList.class)) {
Annotation[] annotations = getAnnotationsArrayValue(annotation);
if (annotations != null && annotations.length > 0) {
for (Annotation ptr : annotations) {
handle(ptr, element);
}
}
} else if (annotationType.isAnnotationPresent(DigesterRule.class)) {
DigesterRule digesterRule = annotationType.getAnnotation(DigesterRule.class);
Class<? extends AnnotationHandler<Annotation, AnnotatedElement>> handlerType = (Class<? extends AnnotationHandler<Annotation, AnnotatedElement>>) digesterRule.handledBy();
try {
AnnotationHandler<Annotation, AnnotatedElement> handler = annotationHandlerFactory.newInstance(handlerType);
handler.handle(annotation, element, this.rulesBinder);
} catch (Exception e) {
rulesBinder.addError(e);
}
}
}","@SuppressWarnings(""unchecked"")
private <A extends Annotation, E extends AnnotatedElement, R extends Rule> void handle(A annotation, E element) {
Class<?> class<?>Var1 = class<?>Literal2;
if (class<?>Var1.isAnnotationPresent(DigesterRuleList.class)) {
Annotation[] annotationArrayVar3 = annotationArrayLiteral4;
if (annotationArrayVar3 != null && annotationArrayVar3.length > 0) {
for (Annotation annotationVar5 : annotationArrayVar3) {
handle(annotationVar5, element);
}
}
} else if (class<?>Var1.isAnnotationPresent(DigesterRule.class)) {
DigesterRule digesterruleVar6 = digesterruleLiteral7;
Class<? extends AnnotationHandler<Annotation, AnnotatedElement>> class<? extends annotationhandler<annotation,annotatedelement>>Var8 = class<? extends annotationhandler<annotation,annotatedelement>>Literal9;
try {
AnnotationHandler<Annotation, AnnotatedElement> annotationhandler<annotation,annotatedelement>Var10 = annotationhandler<annotation,annotatedelement>Literal11;
annotationhandler<annotation,annotatedelement>Var10.handle(annotation, element, this.rulesBinder);
} catch (Exception e) {
rulesBinder.addError(e);
}
}
}"
11140,PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,digester,1516,"{
public Field[] run()
{
return type.getDeclaredFields();
","protected final void bindRulesFrom(final Class<?> type) {
if (type == null || type.getPackage().getName().startsWith(JAVA_PACKAGE) || rulesBinder.isAlreadyBound(type)) {
return;
}
visitElements(type);
if (!type.isInterface()) {
visitElements(new PrivilegedAction<Constructor<?>[]>() {
public Constructor<?>[] run() {
return type.getDeclaredConstructors();
}
});
visitElements(new PrivilegedAction<Field[]>() {
public Field[] run() {
return type.getDeclaredFields();
}
});
}
visitElements(new PrivilegedAction<Method[]>() {
public Method[] run() {
return type.getDeclaredMethods();
}
});
rulesBinder.markAsBound(type);
bindRulesFrom(type.getSuperclass());
}","protected final void bindRulesFrom(final Class<?> type) {
if (type == null || type.getPackage().getName().startsWith(JAVA_PACKAGE) || rulesBinder.isAlreadyBound(type)) {
return;
}
visitElements(type);
if (!type.isInterface()) {
visitElements(new PrivilegedAction<Constructor<?>[]>() {
public Constructor<?>[] run() {
return type.getDeclaredConstructors();
}
});
visitElements(new PrivilegedAction<Field[]>() {
public Field[] run() {
return type.getDeclaredFields();
}
});
}
visitElements(new PrivilegedAction<Method[]>() {
public Method[] run() {
return type.getDeclaredMethods();
}
});
rulesBinder.markAsBound(type);
bindRulesFrom(type.getSuperclass());
}"
11142,PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,digester,1518,"{
public Constructor<?>[] run()
{
return type.getDeclaredConstructors();
","protected final void bindRulesFrom(final Class<?> type) {
if (type == null || type.getPackage().getName().startsWith(JAVA_PACKAGE) || rulesBinder.isAlreadyBound(type)) {
return;
}
visitElements(type);
if (!type.isInterface()) {
visitElements(new PrivilegedAction<Constructor<?>[]>() {
public Constructor<?>[] run() {
return type.getDeclaredConstructors();
}
});
visitElements(new PrivilegedAction<Field[]>() {
public Field[] run() {
return type.getDeclaredFields();
}
});
}
visitElements(new PrivilegedAction<Method[]>() {
public Method[] run() {
return type.getDeclaredMethods();
}
});
rulesBinder.markAsBound(type);
bindRulesFrom(type.getSuperclass());
}","protected final void bindRulesFrom(final Class<?> type) {
if (type == null || type.getPackage().getName().startsWith(JAVA_PACKAGE) || rulesBinder.isAlreadyBound(type)) {
return;
}
visitElements(type);
if (!type.isInterface()) {
visitElements(new PrivilegedAction<Constructor<?>[]>() {
public Constructor<?>[] run() {
return type.getDeclaredConstructors();
}
});
visitElements(new PrivilegedAction<Field[]>() {
public Field[] run() {
return type.getDeclaredFields();
}
});
}
visitElements(new PrivilegedAction<Method[]>() {
public Method[] run() {
return type.getDeclaredMethods();
}
});
rulesBinder.markAsBound(type);
bindRulesFrom(type.getSuperclass());
}"
11147,DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,digester,1523,"return memoryRulesBinder.forPattern( pattern );
","protected LinkedRuleBuilder forPattern(String pattern) {
return memoryRulesBinder.forPattern(pattern);
}","protected LinkedRuleBuilder forPattern(String pattern) {
return memoryRulesBinder.forPattern(pattern);
}"
11223,CORRECTNESS,NP_NULL_ON_SOME_PATH,FP,digester,1599,"Object[] paramValues = new Object[paramTypes.length];
","@Override
public void end(String namespace, String name) throws Exception {
Object[] parameters;
if (paramCount > 0) {
parameters = getDigester().popParams();
if (getDigester().getLogger().isTraceEnabled()) {
for (int i = 0, size = parameters.length; i < size; i++) {
getDigester().getLogger().trace(format(""[CallMethodRule]{%s} parameters[%s]=%s"", getDigester().getMatch(), i, parameters[i]));
}
}
if (paramCount == 1 && parameters[0] == null) {
return;
}
} else if (paramTypes != null && paramTypes.length != 0) {
if (bodyText == null) {
return;
}
parameters = new Object[] { bodyText };
if (paramTypes.length == 0) {
paramTypes = new Class[] { String.class };
}
} else {
parameters = new Object[0];
}
Object[] paramValues = new Object[paramTypes.length];
for (int i = 0; i < paramTypes.length; i++) {
if (parameters[i] == null || (parameters[i] instanceof String && !String.class.isAssignableFrom(paramTypes[i]))) {
paramValues[i] = convert((String) parameters[i], paramTypes[i]);
} else {
paramValues[i] = parameters[i];
}
}
Object target;
if (targetOffset >= 0) {
target = getDigester().peek(targetOffset);
} else {
target = getDigester().peek(getDigester().getCount() + targetOffset);
}
if (target == null) {
throw new SAXException(format(""[CallMethodRule]{%s} Call target is null (targetOffset=%s, stackdepth=%s)"", getDigester().getMatch(), targetOffset, getDigester().getCount()));
}
if (getDigester().getLogger().isDebugEnabled()) {
Formatter formatter = new Formatter().format(""[CallMethodRule]{%s} Call %s.%s("", getDigester().getMatch(), target.getClass().getName(), methodName);
for (int i = 0; i < paramValues.length; i++) {
formatter.format(""%s%s/%s"", (i > 0 ? "", "" : """"), paramValues[i], paramTypes[i].getName());
}
formatter.format("")"");
getDigester().getLogger().debug(formatter.toString());
}
Object result = null;
if (useExactMatch) {
result = invokeExactMethod(target, methodName, paramValues, paramTypes);
} else {
result = invokeMethod(target, methodName, paramValues, paramTypes);
}
processMethodCallResult(result);
}","@Override
public void end(String namespace, String name) throws Exception {
Object[] objectArrayVar1;
if (paramCount > 0) {
objectArrayVar1 = getDigester().popParams();
if (getDigester().getLogger().isTraceEnabled()) {
for (int intVar13 = intLiteral14, intVar15 = intLiteral16; intVar2 < intLiteral1; intVar2++) {
getDigester().getLogger().trace(format(""[CallMethodRule]{%s} parameters[%s]=%s"", getDigester().getMatch(), intVar2, objectArrayVar1[intVar2]));
}
}
if (paramCount == 1 && objectArrayVar1[0] == null) {
return;
}
} else if (paramTypes != null && paramTypes.length != 0) {
if (bodyText == null) {
return;
}
objectArrayVar1 = new Object[] { bodyText };
if (paramTypes.length == 0) {
paramTypes = new Class[] { String.class };
}
} else {
objectArrayVar1 = new Object[0];
}
Object[] objectArrayVar6 = objectArrayLiteral7;
for (int intVar13 = intLiteral14; intVar2 < intLiteral2; intVar2++) {
if (objectArrayVar1[intVar2] == null || (objectArrayVar1[intVar2] instanceof String && !String.class.isAssignableFrom(paramTypes[intVar2]))) {
objectArrayVar6[intVar2] = convert((String) objectArrayVar1[intVar2], paramTypes[intVar2]);
} else {
objectArrayVar6[intVar2] = objectArrayVar1[intVar2];
}
}
Object objectVar8;
if (targetOffset >= 0) {
objectVar8 = getDigester().peek(targetOffset);
} else {
objectVar8 = getDigester().peek(getDigester().getCount() + targetOffset);
}
if (objectVar8 == null) {
throw new SAXException(format(""[CallMethodRule]{%s} Call target is null (targetOffset=%s, stackdepth=%s)"", getDigester().getMatch(), targetOffset, getDigester().getCount()));
}
if (getDigester().getLogger().isDebugEnabled()) {
Formatter formatterVar9 = formatterLiteral10;
for (int intVar13 = intLiteral14; intVar2 < intLiteral3; intVar2++) {
formatterVar9.format(""%s%s/%s"", (intVar2 > 0 ? "", "" : """"), objectArrayVar6[intVar2], paramTypes[intVar2].getName());
}
formatterVar9.format("")"");
getDigester().getLogger().debug(formatterVar9.toString());
}
Object objectVar11 = objectLiteral12;
if (useExactMatch) {
objectVar11 = invokeExactMethod(objectVar8, methodName, objectArrayVar6, paramTypes);
} else {
objectVar11 = invokeMethod(objectVar8, methodName, objectArrayVar6, paramTypes);
}
processMethodCallResult(objectVar11);
}"
11231,PERFORMANCE,UPM_UNCALLED_PRIVATE_METHOD,TP,digester,1607,"if (keyPattern == null) {
return provider;
}
List<RuleProvider<? extends Rule>> providerLits = providers.get(keyPattern);
if (providerLits == null) {
providerLits = new ArrayList<RuleProvider<? extends Rule>>();
providers.put(keyPattern, providerLits);
}
providerLits.add(provider);
return provider;
","private <R extends Rule> RuleProvider<R> addProvider(RuleProvider<R> provider) {
if (keyPattern == null) {
return provider;
}
List<RuleProvider<? extends Rule>> providerLits = providers.get(keyPattern);
if (providerLits == null) {
providerLits = new ArrayList<RuleProvider<? extends Rule>>();
providers.put(keyPattern, providerLits);
}
providerLits.add(provider);
return provider;
}","private <R extends Rule> RuleProvider<R> addProvider(RuleProvider<R> provider) {
if (keyPattern == null) {
return provider;
}
List<RuleProvider<? extends Rule>> list<ruleprovider<? extends rule>>Var1 = list<ruleprovider<? extends rule>>Literal2;
if (list<ruleprovider<? extends rule>>Var1 == null) {
list<ruleprovider<? extends rule>>Var1 = new ArrayList<RuleProvider<? extends Rule>>();
providers.put(keyPattern, list<ruleprovider<? extends rule>>Var1);
}
list<ruleprovider<? extends rule>>Var1.add(provider);
return provider;
}"
11234,CORRECTNESS,UWF_NULL_FIELD,FP,digester,1610,public final String DFLT_PLUGIN_ID_ATTR_NS = null;,public final String DFLT_PLUGIN_ID_ATTR_NS = null;,public final String stringVar1 = stringLiteral2;
11235,PERFORMANCE,URF_UNREAD_FIELD,TP,digester,1611,private String namespaceURI;,private String namespaceURI;,private String stringVar1;
11241,MALICIOUS_CODE,MS_SHOULD_BE_FINAL,TP,digester,1617,"public static String DFLT_PROPS_ATTR = ""setprops"";","public static String DFLT_PROPS_ATTR = ""setprops"";",public static String stringVar1 = stringLiteral2;
11247,MALICIOUS_CODE,MS_SHOULD_BE_FINAL,TP,digester,1623,"public static String DFLT_METHOD_NAME = ""addRules"";","public static String DFLT_METHOD_NAME = ""addRules"";",public static String stringVar1 = stringLiteral2;
11256,MALICIOUS_CODE,MS_SHOULD_BE_FINAL,TP,digester,1632,"public static String DFLT_FILENAME_ATTR = ""file"";","public static String DFLT_FILENAME_ATTR = ""file"";",public static String stringVar1 = stringLiteral2;
11262,PERFORMANCE,URF_UNREAD_FIELD,TP,digester,1638,private boolean useContextClassLoader;,private boolean useContextClassLoader;,private boolean booleanVar1;
11267,DODGY_CODE,NP_LOAD_OF_KNOWN_NULL_VALUE,TP,digester,1643,"log.debug("" Cannot resolve entity: '"" + entityURL + ""'"");
","public InputSource resolveEntity(String publicId, String systemId) throws SAXException {
if (saxLog.isDebugEnabled()) {
saxLog.debug(""resolveEntity('"" + publicId + ""', '"" + systemId + ""')"");
}
if (publicId != null)
this.publicId = publicId;
URL entityURL = null;
if (publicId != null) {
entityURL = (URL) entityValidator.get(publicId);
}
if (schemaLocation != null && entityURL == null && systemId != null) {
entityURL = (URL) entityValidator.get(systemId);
}
if (entityURL == null) {
if (systemId == null) {
if (log.isDebugEnabled()) {
log.debug("" Cannot resolve entity: '"" + entityURL + ""'"");
}
return (null);
} else {
if (log.isDebugEnabled()) {
log.debug("" Trying to resolve using system ID '"" + systemId + ""'"");
}
try {
entityURL = new URL(systemId);
} catch (MalformedURLException e) {
throw new IllegalArgumentException(""Malformed URL '"" + systemId + ""' : "" + e.getMessage());
}
}
}
if (log.isDebugEnabled()) {
log.debug("" Resolving to alternate DTD '"" + entityURL + ""'"");
}
try {
return createInputSourceFromURL(entityURL);
} catch (Exception e) {
throw createSAXException(e);
}
}","public InputSource resolveEntity(String publicId, String systemId) throws SAXException {
if (saxLog.isDebugEnabled()) {
saxLog.debug(""resolveEntity('"" + publicId + ""', '"" + systemId + ""')"");
}
if (publicId != null)
this.publicId = publicId;
URL urlVar1 = urlLiteral2;
if (publicId != null) {
urlVar1 = (URL) entityValidator.get(publicId);
}
if (schemaLocation != null && urlVar1 == null && systemId != null) {
urlVar1 = (URL) entityValidator.get(systemId);
}
if (urlVar1 == null) {
if (systemId == null) {
if (log.isDebugEnabled()) {
log.debug("" Cannot resolve entity: '"" + urlVar1 + ""'"");
}
return (null);
} else {
if (log.isDebugEnabled()) {
log.debug("" Trying to resolve using system ID '"" + systemId + ""'"");
}
try {
urlVar1 = new URL(systemId);
} catch (MalformedURLException e) {
throw new IllegalArgumentException(""Malformed URL '"" + systemId + ""' : "" + e.getMessage());
}
}
}
if (log.isDebugEnabled()) {
log.debug("" Resolving to alternate DTD '"" + urlVar1 + ""'"");
}
try {
return createInputSourceFromURL(urlVar1);
} catch (Exception e) {
throw createSAXException(e);
}
}"
11268,CORRECTNESS,NP_GUARANTEED_DEREF,FP,digester,1644,"invokeExactMethod( parent, methodName, new Object[] { child }, paramTypes );
","private void invoke() throws Exception {
final Object child = getChild();
final Object parent = getParent();
if (getDigester().getLogger().isDebugEnabled()) {
if (parent == null) {
getDigester().getLogger().debug(format(""[%s]{%s} Call [NULL PARENT].%s(%s)"", getClass().getSimpleName(), getDigester().getMatch(), methodName, child));
} else {
getDigester().getLogger().debug(format(""[%s]{%s} Call %s.%s(%s)"", getClass().getSimpleName(), getDigester().getMatch(), parent.getClass().getName(), methodName, child));
}
}
final Class<?>[] paramTypes = new Class<?>[1];
if (paramType != null) {
paramTypes[0] = getDigester().getClassLoader().loadClass(paramTypeName);
} else {
paramTypes[0] = child.getClass();
}
if (useExactMatch) {
invokeExactMethod(parent, methodName, new Object[] { child }, paramTypes);
} else {
invokeMethod(parent, methodName, new Object[] { child }, paramTypes);
}
}","private void invoke() throws Exception {
final Object objectVar1 = objectLiteral2;
final Object objectVar3 = objectLiteral4;
if (getDigester().getLogger().isDebugEnabled()) {
if (objectVar3 == null) {
getDigester().getLogger().debug(format(""[%s]{%s} Call [NULL PARENT].%s(%s)"", getClass().getSimpleName(), getDigester().getMatch(), methodName, objectVar1));
} else {
getDigester().getLogger().debug(format(""[%s]{%s} Call %s.%s(%s)"", getClass().getSimpleName(), getDigester().getMatch(), objectVar3.getClass().getName(), methodName, objectVar1));
}
}
final Class<?>[] class<?>ArrayVar5 = class<?>ArrayLiteral6;
if (paramType != null) {
class<?>ArrayVar5[0] = getDigester().getClassLoader().loadClass(paramTypeName);
} else {
class<?>ArrayVar5[0] = objectVar1.getClass();
}
if (useExactMatch) {
invokeExactMethod(objectVar3, methodName, new Object[] { objectVar1 }, class<?>ArrayVar5);
} else {
invokeMethod(objectVar3, methodName, new Object[] { objectVar1 }, class<?>ArrayVar5);
}
}"
11269,PERFORMANCE,URF_UNREAD_FIELD,TP,digester,1645,private ClassLoader classLoader;,private ClassLoader classLoader;,private ClassLoader classloaderVar1;
11272,MALICIOUS_CODE,MS_SHOULD_BE_FINAL,TP,digester,1648,"public static String DFLT_METHOD_NAME = ""addRules"";","public static String DFLT_METHOD_NAME = ""addRules"";",public static String stringVar1 = stringLiteral2;
11285,CORRECTNESS,VA_FORMAT_STRING_EXTRA_ARGUMENTS_PASSED,FP,digester,1661,"throw new SAXException( format( ""[ObjectCreateRule]{%s} Class '%s' does not have a construcor with types"",
","@Override
public void begin(String namespace, String name, Attributes attributes) throws Exception {
Class<?> clazz = this.clazz;
if (clazz == null) {
String realClassName = className;
if (attributeName != null) {
String value = attributes.getValue(attributeName);
if (value != null) {
realClassName = value;
}
}
if (getDigester().getLogger().isDebugEnabled()) {
getDigester().getLogger().debug(format(""[ObjectCreateRule]{%s} New '%s'"", getDigester().getMatch(), realClassName));
}
clazz = getDigester().getClassLoader().loadClass(realClassName);
}
Object instance;
if (constructorArgumentsTypes == null || constructorArgumentsTypes.length == 0) {
if (getDigester().getLogger().isDebugEnabled()) {
getDigester().getLogger().debug(format(""[ObjectCreateRule]{%s} New '%s' using default empty constructor"", getDigester().getMatch(), clazz.getName()));
}
instance = clazz.newInstance();
} else {
Constructor<?> constructor = getAccessibleConstructor(clazz, constructorArgumentsTypes);
if (constructor == null) {
throw new SAXException(format(""[ObjectCreateRule]{%s} Class '%s' does not have a construcor with types"", getDigester().getMatch(), clazz.getName(), Arrays.toString(constructorArgumentsTypes)));
}
instance = createLazyProxy(constructor);
}
getDigester().push(instance);
}","@Override
public void begin(String namespace, String name, Attributes attributes) throws Exception {
Class<?> class<?>Var1 = class<?>Literal2;
if (class<?>Var1 == null) {
String stringVar3 = stringLiteral4;
if (attributeName != null) {
String stringVar5 = stringLiteral6;
if (stringVar5 != null) {
stringVar3 = stringVar5;
}
}
if (getDigester().getLogger().isDebugEnabled()) {
getDigester().getLogger().debug(format(""[ObjectCreateRule]{%s} New '%s'"", getDigester().getMatch(), stringVar3));
}
class<?>Var1 = getDigester().getClassLoader().loadClass(stringVar3);
}
Object objectVar7;
if (constructorArgumentsTypes == null || constructorArgumentsTypes.length == 0) {
if (getDigester().getLogger().isDebugEnabled()) {
getDigester().getLogger().debug(format(""[ObjectCreateRule]{%s} New '%s' using default empty constructor"", getDigester().getMatch(), class<?>Var1.getName()));
}
objectVar7 = class<?>Var1.newInstance();
} else {
Constructor<?> constructor<?>Var8 = constructor<?>Literal9;
if (constructor<?>Var8 == null) {
throw new SAXException(format(""[ObjectCreateRule]{%s} Class '%s' does not have a construcor with types"", getDigester().getMatch(), class<?>Var1.getName(), Arrays.toString(constructorArgumentsTypes)));
}
objectVar7 = createLazyProxy(constructor<?>Var8);
}
getDigester().push(objectVar7);
}"
11300,I18N,DM_CONVERT_CASE,TP,fileupload,1,"String charset = word.substring(2, charsetPos).toLowerCase();
","private static String decodeWord(String word) throws ParseException, UnsupportedEncodingException {
if (!word.startsWith(ENCODED_TOKEN_MARKER)) {
throw new ParseException(""Invalid RFC 2047 encoded-word: "" + word);
}
int charsetPos = word.indexOf('?', 2);
if (charsetPos == -1) {
throw new ParseException(""Missing charset in RFC 2047 encoded-word: "" + word);
}
String charset = word.substring(2, charsetPos).toLowerCase();
int encodingPos = word.indexOf('?', charsetPos + 1);
if (encodingPos == -1) {
throw new ParseException(""Missing encoding in RFC 2047 encoded-word: "" + word);
}
String encoding = word.substring(charsetPos + 1, encodingPos);
int encodedTextPos = word.indexOf(ENCODED_TOKEN_FINISHER, encodingPos + 1);
if (encodedTextPos == -1) {
throw new ParseException(""Missing encoded text in RFC 2047 encoded-word: "" + word);
}
String encodedText = word.substring(encodingPos + 1, encodedTextPos);
if (encodedText.length() == 0) {
return """";
}
try {
ByteArrayOutputStream out = new ByteArrayOutputStream(encodedText.length());
byte[] encodedData = encodedText.getBytes(US_ASCII_CHARSET);
if (encoding.equals(BASE64_ENCODING_MARKER)) {
Base64Decoder.decode(encodedData, out);
} else if (encoding.equals(QUOTEDPRINTABLE_ENCODING_MARKER)) {
QuotedPrintableDecoder.decode(encodedData, out);
} else {
throw new UnsupportedEncodingException(""Unknown RFC 2047 encoding: "" + encoding);
}
byte[] decodedData = out.toByteArray();
return new String(decodedData, javaCharset(charset));
} catch (IOException e) {
throw new UnsupportedEncodingException(""Invalid RFC 2047 encoding"");
}
}","private static String decodeWord(String word) throws ParseException, UnsupportedEncodingException {
if (!word.startsWith(ENCODED_TOKEN_MARKER)) {
throw new ParseException(""Invalid RFC 2047 encoded-word: "" + word);
}
int intVar1 = intLiteral2;
if (intVar1 == -1) {
throw new ParseException(""Missing charset in RFC 2047 encoded-word: "" + word);
}
String stringVar3 = stringLiteral4;
int intVar5 = intLiteral6;
if (intVar5 == -1) {
throw new ParseException(""Missing encoding in RFC 2047 encoded-word: "" + word);
}
String stringVar7 = stringLiteral8;
int intVar9 = intLiteral10;
if (intVar9 == -1) {
throw new ParseException(""Missing encoded text in RFC 2047 encoded-word: "" + word);
}
String stringVar11 = stringLiteral12;
if (stringVar11.length() == 0) {
return """";
}
try {
ByteArrayOutputStream bytearrayoutputstreamVar13 = bytearrayoutputstreamLiteral14;
byte[] byteArrayVar15 = byteArrayLiteral16;
if (stringVar7.equals(BASE64_ENCODING_MARKER)) {
Base64Decoder.decode(byteArrayVar15, bytearrayoutputstreamVar13);
} else if (stringVar7.equals(QUOTEDPRINTABLE_ENCODING_MARKER)) {
QuotedPrintableDecoder.decode(byteArrayVar15, bytearrayoutputstreamVar13);
} else {
throw new UnsupportedEncodingException(""Unknown RFC 2047 encoding: "" + stringVar7);
}
byte[] byteArrayVar17 = byteArrayLiteral18;
return new String(byteArrayVar17, javaCharset(stringVar3));
} catch (IOException e) {
throw new UnsupportedEncodingException(""Invalid RFC 2047 encoding"");
}
}"
11301,DODGY_CODE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,TP,fileupload,2,protected int lineCount = 0;,protected int lineCount = 0;,protected int intVar1 = intLiteral2;
11304,MALICIOUS_CODE,MS_PKGPROTECT,FP,fileupload,5,"protected static final byte[] HEADER_SEPARATOR = { CR, LF, CR, LF };","protected static final byte[] HEADER_SEPARATOR = { CR, LF, CR, LF };",protected static final byte[] byteArrayVar1 = byteArrayLiteral2;
11314,I18N,DM_CONVERT_CASE,FP,fileupload,15,".trim().toLowerCase();
","protected Map parseHeaders(String headerPart) {
Map headers = new HashMap();
int start = 0;
int end = 0;
for (; ; ) {
int offset = headerPart.indexOf('\r', end);
if (offset == -1 || offset + 1 >= headerPart.length()) {
throw new IllegalStateException(""Expected headers to be terminated by an empty line."");
}
if (headerPart.charAt(offset + 1) != '\n') {
end = offset + 1;
} else if (offset == start) {
break;
} else {
String header = headerPart.substring(start, offset);
start = end = offset + 2;
if (header.indexOf(':') == -1) {
continue;
}
String headerName = header.substring(0, header.indexOf(':')).trim().toLowerCase();
String headerValue = header.substring(header.indexOf(':') + 1).trim();
if (getHeader(headers, headerName) != null) {
headers.put(headerName, getHeader(headers, headerName) + ',' + headerValue);
} else {
headers.put(headerName, headerValue);
}
}
}
return headers;
}","protected Map parseHeaders(String headerPart) {
Map mapVar1 = mapLiteral2;
int intVar3 = intLiteral4;
int intVar5 = intLiteral4;
for (; ; ) {
int intVar6 = intLiteral7;
if (intVar6 == -1 || intVar6 + 1 >= headerPart.length()) {
throw new IllegalStateException(""Expected headers to be terminated by an empty line."");
}
if (headerPart.charAt(intVar6 + 1) != '\n') {
intVar5 = intVar6 + 1;
} else if (intVar6 == intVar3) {
break;
} else {
String stringVar8 = stringLiteral9;
intVar3 = intVar5 = intVar6 + 2;
if (stringVar8.indexOf(':') == -1) {
continue;
}
String stringVar10 = stringLiteral11;
String stringVar12 = stringLiteral13;
if (getHeader(mapVar1, stringVar10) != null) {
mapVar1.put(stringVar10, getHeader(mapVar1, stringVar10) + ',' + stringVar12);
} else {
mapVar1.put(stringVar10, stringVar12);
}
}
}
return mapVar1;
}"
11316,I18N,DM_DEFAULT_ENCODING,FP,fileupload,17,"return new String(rawdata);
","@Override
public String getString() {
byte[] rawdata = new byte[0];
try {
rawdata = get();
String charset = getCharSet();
if (charset == null) {
charset = defaultCharset;
}
return new String(rawdata, charset);
} catch (final IOException e) {
return new String(rawdata);
}
}","@Override
public String getString() {
byte[] byteArrayVar1 = byteArrayLiteral2;
try {
byteArrayVar1 = get();
String stringVar3 = stringLiteral4;
if (stringVar3 == null) {
stringVar3 = defaultCharset;
}
return new String(byteArrayVar1, stringVar3);
} catch (final IOException e) {
return new String(byteArrayVar1);
}
}"
11318,MALICIOUS_CODE,EI_EXPOSE_REP,TP,fileupload,19,"return cachedContent;
","@Override
public byte[] get() throws UncheckedIOException {
if (isInMemory()) {
if (cachedContent == null && dfos != null) {
cachedContent = dfos.getData();
}
return cachedContent;
}
byte[] fileData = new byte[(int) getSize()];
try (InputStream fis = Files.newInputStream(dfos.getFile().toPath())) {
IOUtils.readFully(fis, fileData);
} catch (IOException e) {
throw new UncheckedIOException(e);
}
return fileData;
}","@Override
public byte[] get() throws UncheckedIOException {
if (isInMemory()) {
if (cachedContent == null && dfos != null) {
cachedContent = dfos.getData();
}
return cachedContent;
}
byte[] byteArrayVar1 = byteArrayLiteral2;
try (InputStream inputstreamVar3 = inputstreamLiteral4) {
IOUtils.readFully(inputstreamVar3, byteArrayVar1);
} catch (IOException e) {
throw new UncheckedIOException(e);
}
return byteArrayVar1;
}"
11319,BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,TP,fileupload,20,"outputFile.delete();
","@Override
public void delete() {
cachedContent = null;
final File outputFile = getStoreLocation();
if (outputFile != null && !isInMemory() && outputFile.exists()) {
outputFile.delete();
}
}","@Override
public void delete() {
cachedContent = null;
final File fileVar1 = fileLiteral2;
if (fileVar1 != null && !isInMemory() && fileVar1.exists()) {
fileVar1.delete();
}
}"
11327,MALICIOUS_CODE,MS_PKGPROTECT,FP,fileupload,28,"protected static final byte[] FIELD_SEPARATOR = { CR, LF };","protected static final byte[] FIELD_SEPARATOR = { CR, LF };",protected static final byte[] byteArrayVar1 = byteArrayLiteral2;
11332,DODGY_CODE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,TP,fileupload,33,protected int lineLength;,protected int lineLength;,protected int intVar1;
11334,DODGY_CODE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,FP,fileupload,35,"throw (FileUploadException) e.getCause();
","public List parseRequest(RequestContext ctx) throws FileUploadException {
FileItemIterator iter = getItemIterator(ctx);
List items = new ArrayList();
FileItemFactory fac = getFileItemFactory();
final byte[] buffer = new byte[8192];
while (iter.hasNext()) {
FileItemStream item = iter.next();
FileItem fileItem = fac.createItem(item.getFieldName(), item.getContentType(), item.isFormField(), item.getName());
try {
StreamUtil.copy(item.openStream(), fileItem.getOutputStream(), true, buffer);
} catch (FileUploadIOException e) {
throw (FileUploadException) e.getCause();
} catch (IOException e) {
throw new IOFileUploadException(""Processing of "" + MULTIPART_FORM_DATA + "" request failed. "" + e.getMessage(), e);
}
items.add(fileItem);
}
return items;
}","public List parseRequest(RequestContext ctx) throws FileUploadException {
FileItemIterator fileitemiteratorVar1 = fileitemiteratorLiteral2;
List listVar3 = listLiteral4;
FileItemFactory fileitemfactoryVar5 = fileitemfactoryLiteral6;
final byte[] byteArrayVar7 = byteArrayLiteral8;
while (fileitemiteratorVar1.hasNext()) {
FileItemStream fileitemstreamVar9 = fileitemstreamLiteral10;
FileItem fileitemVar11 = fileitemLiteral12;
try {
StreamUtil.copy(fileitemstreamVar9.openStream(), fileitemVar11.getOutputStream(), true, byteArrayVar7);
} catch (FileUploadIOException e) {
throw (FileUploadException) e.getCause();
} catch (IOException e) {
throw new IOFileUploadException(""Processing of "" + MULTIPART_FORM_DATA + "" request failed. "" + e.getMessage(), e);
}
listVar3.add(fileitemVar11);
}
return listVar3;
}"
11339,I18N,DM_DEFAULT_ENCODING,FP,fileupload,40,"return new String(rawdata);
","@Override
public String getString() {
byte[] rawdata = new byte[0];
try {
rawdata = get();
String charset = getCharSet();
if (charset == null) {
charset = defaultCharset;
}
return new String(rawdata, charset);
} catch (final IOException e) {
return new String(rawdata);
}
}","@Override
public String getString() {
byte[] byteArrayVar1 = byteArrayLiteral2;
try {
byteArrayVar1 = get();
String stringVar3 = stringLiteral4;
if (stringVar3 == null) {
stringVar3 = defaultCharset;
}
return new String(byteArrayVar1, stringVar3);
} catch (final IOException e) {
return new String(byteArrayVar1);
}
}"
11343,MALICIOUS_CODE,EI_EXPOSE_REP,TP,fileupload,44,"return cachedContent;
","@Override
public byte[] get() throws UncheckedIOException {
if (isInMemory()) {
if (cachedContent == null && dfos != null) {
cachedContent = dfos.getData();
}
return cachedContent;
}
byte[] fileData = new byte[(int) getSize()];
try (InputStream fis = Files.newInputStream(dfos.getFile().toPath())) {
IOUtils.readFully(fis, fileData);
} catch (IOException e) {
throw new UncheckedIOException(e);
}
return fileData;
}","@Override
public byte[] get() throws UncheckedIOException {
if (isInMemory()) {
if (cachedContent == null && dfos != null) {
cachedContent = dfos.getData();
}
return cachedContent;
}
byte[] byteArrayVar1 = byteArrayLiteral2;
try (InputStream inputstreamVar3 = inputstreamLiteral4) {
IOUtils.readFully(inputstreamVar3, byteArrayVar1);
} catch (IOException e) {
throw new UncheckedIOException(e);
}
return byteArrayVar1;
}"
11346,I18N,DM_CONVERT_CASE,TP,fileupload,47,"&&  subContentType.toLowerCase()
","private boolean findNextItem() throws IOException {
if (eof) {
return false;
}
if (currentItem != null) {
currentItem.close();
currentItem = null;
}
for (; ; ) {
boolean nextPart;
if (skipPreamble) {
nextPart = multi.skipPreamble();
} else {
nextPart = multi.readBoundary();
}
if (!nextPart) {
if (currentFieldName == null) {
eof = true;
return false;
}
multi.setBoundary(boundary);
currentFieldName = null;
continue;
}
FileItemHeaders headers = getParsedHeaders(multi.readHeaders());
if (currentFieldName == null) {
String fieldName = getFieldName(headers);
if (fieldName != null) {
String subContentType = headers.getHeader(CONTENT_TYPE);
if (subContentType != null && subContentType.toLowerCase().startsWith(MULTIPART_MIXED)) {
currentFieldName = fieldName;
byte[] subBoundary = getBoundary(subContentType);
multi.setBoundary(subBoundary);
skipPreamble = true;
continue;
}
String fileName = getFileName(headers);
currentItem = new FileItemStreamImpl(fileName, fieldName, headers.getHeader(CONTENT_TYPE), fileName == null, getContentLength(headers));
currentItem.setHeaders(headers);
notifier.noteItem();
itemValid = true;
return true;
}
} else {
String fileName = getFileName(headers);
if (fileName != null) {
currentItem = new FileItemStreamImpl(fileName, currentFieldName, headers.getHeader(CONTENT_TYPE), false, getContentLength(headers));
currentItem.setHeaders(headers);
notifier.noteItem();
itemValid = true;
return true;
}
}
multi.discardBodyData();
}
}","private boolean findNextItem() throws IOException {
if (eof) {
return false;
}
if (currentItem != null) {
currentItem.close();
currentItem = null;
}
for (; ; ) {
boolean booleanVar1;
if (skipPreamble) {
booleanVar1 = multi.skipPreamble();
} else {
booleanVar1 = multi.readBoundary();
}
if (!booleanVar1) {
if (currentFieldName == null) {
eof = true;
return false;
}
multi.setBoundary(boundary);
currentFieldName = null;
continue;
}
FileItemHeaders fileitemheadersVar2 = fileitemheadersLiteral3;
if (currentFieldName == null) {
String stringVar4 = stringLiteral5;
if (stringVar4 != null) {
String stringVar6 = stringLiteral7;
if (stringVar6 != null && stringVar6.toLowerCase().startsWith(MULTIPART_MIXED)) {
currentFieldName = stringVar4;
byte[] byteArrayVar8 = byteArrayLiteral9;
multi.setBoundary(byteArrayVar8);
skipPreamble = true;
continue;
}
String stringVar10 = stringLiteral11;
currentItem = new FileItemStreamImpl(stringVar10, stringVar4, fileitemheadersVar2.getHeader(CONTENT_TYPE), stringVar10 == null, getContentLength(fileitemheadersVar2));
currentItem.setHeaders(fileitemheadersVar2);
notifier.noteItem();
itemValid = true;
return true;
}
} else {
String stringVar10 = stringLiteral11;
if (stringVar10 != null) {
currentItem = new FileItemStreamImpl(stringVar10, currentFieldName, fileitemheadersVar2.getHeader(CONTENT_TYPE), false, getContentLength(fileitemheadersVar2));
currentItem.setHeaders(fileitemheadersVar2);
notifier.noteItem();
itemValid = true;
return true;
}
}
multi.discardBodyData();
}
}"
11350,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,TP,fileupload,51,"return null;
","public byte[] getBoundary(final String contentType) {
final ParameterParser parser = new ParameterParser();
parser.setLowerCaseNames(true);
final Map<String, String> params = parser.parse(contentType, new char[] { ';', ',' });
final String boundaryStr = params.get(""boundary"");
if (boundaryStr == null) {
return null;
}
byte[] boundary;
boundary = boundaryStr.getBytes(StandardCharsets.ISO_8859_1);
return boundary;
}","public byte[] getBoundary(final String contentType) {
final ParameterParser parameterparserVar1 = parameterparserLiteral2;
parameterparserVar1.setLowerCaseNames(true);
final Map<String, String> map<string,string>Var3 = map<string,string>Literal4;
final String stringVar5 = stringLiteral6;
if (stringVar5 == null) {
return null;
}
byte[] byteArrayVar7;
byteArrayVar7 = stringVar5.getBytes(StandardCharsets.ISO_8859_1);
return byteArrayVar7;
}"
11351,BAD_PRACTICE,RR_NOT_CHECKED,TP,fileupload,52,"fis.read(fileData);
","public byte[] get() {
if (isInMemory()) {
if (cachedContent == null) {
cachedContent = dfos.getData();
}
return cachedContent;
}
byte[] fileData = new byte[(int) getSize()];
InputStream fis = null;
try {
fis = new BufferedInputStream(new FileInputStream(dfos.getFile()));
fis.read(fileData);
} catch (IOException e) {
fileData = null;
} finally {
if (fis != null) {
try {
fis.close();
} catch (IOException e) {
}
}
}
return fileData;
}","public byte[] get() {
if (isInMemory()) {
if (cachedContent == null) {
cachedContent = dfos.getData();
}
return cachedContent;
}
byte[] byteArrayVar1 = byteArrayLiteral2;
InputStream inputstreamVar3 = inputstreamLiteral4;
try {
inputstreamVar3 = new BufferedInputStream(new FileInputStream(dfos.getFile()));
inputstreamVar3.read(byteArrayVar1);
} catch (IOException e) {
byteArrayVar1 = null;
} finally {
if (inputstreamVar3 != null) {
try {
inputstreamVar3.close();
} catch (IOException e) {
}
}
}
return byteArrayVar1;
}"
11368,MALICIOUS_CODE,EI_EXPOSE_REP2,TP,fileupload,69,"this.chars = charArray;
","public Map<String, String> parse(final char[] charArray, final int offset, final int length, final char separator) {
if (charArray == null) {
return new HashMap<>();
}
final HashMap<String, String> params = new HashMap<>();
this.chars = charArray;
this.pos = offset;
this.len = length;
String paramName;
String paramValue;
while (hasChar()) {
paramName = parseToken(new char[] { '=', separator });
paramValue = null;
if (hasChar() && (charArray[pos] == '=')) {
pos++;
paramValue = parseQuotedToken(new char[] { separator });
if (paramValue != null) {
try {
paramValue = RFC2231Utility.hasEncodedValue(paramName) ? RFC2231Utility.decodeText(paramValue) : MimeUtility.decodeText(paramValue);
} catch (final UnsupportedEncodingException e) {
}
}
}
if (hasChar() && (charArray[pos] == separator)) {
pos++;
}
if ((paramName != null) && !paramName.isEmpty()) {
paramName = RFC2231Utility.stripDelimiter(paramName);
if (this.lowerCaseNames) {
paramName = paramName.toLowerCase(Locale.ENGLISH);
}
params.put(paramName, paramValue);
}
}
return params;
}","public Map<String, String> parse(final char[] charArray, final int offset, final int length, final char separator) {
if (charArray == null) {
return new HashMap<>();
}
final HashMap<String, String> hashmap<string,string>Var1 = hashmap<string,string>Literal2;
this.chars = charArray;
this.pos = offset;
this.len = length;
String stringVar3;
String stringVar4;
while (hasChar()) {
stringVar3 = parseToken(new char[] { '=', separator });
stringVar4 = null;
if (hasChar() && (charArray[pos] == '=')) {
pos++;
stringVar4 = parseQuotedToken(new char[] { separator });
if (stringVar4 != null) {
try {
stringVar4 = RFC2231Utility.hasEncodedValue(stringVar3) ? RFC2231Utility.decodeText(stringVar4) : MimeUtility.decodeText(stringVar4);
} catch (final UnsupportedEncodingException e) {
}
}
}
if (hasChar() && (charArray[pos] == separator)) {
pos++;
}
if ((stringVar3 != null) && !stringVar3.isEmpty()) {
stringVar3 = RFC2231Utility.stripDelimiter(stringVar3);
if (this.lowerCaseNames) {
stringVar3 = stringVar3.toLowerCase(Locale.ENGLISH);
}
hashmap<string,string>Var1.put(stringVar3, stringVar4);
}
}
return hashmap<string,string>Var1;
}"
11370,DODGY_CODE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,TP,fileupload,71,protected boolean lastCR = false;,protected boolean lastCR = false;,protected boolean booleanVar1 = booleanLiteral2;
11379,I18N,DM_DEFAULT_ENCODING,TP,fileupload,80,"boundary = boundaryStr.getBytes(); 
","public byte[] getBoundary(final String contentType) {
final ParameterParser parser = new ParameterParser();
parser.setLowerCaseNames(true);
final Map<String, String> params = parser.parse(contentType, new char[] { ';', ',' });
final String boundaryStr = params.get(""boundary"");
if (boundaryStr == null) {
return null;
}
byte[] boundary;
try {
boundary = boundaryStr.getBytes(""ISO-8859-1"");
} catch (final UnsupportedEncodingException e) {
boundary = boundaryStr.getBytes();
}
return boundary;
}","public byte[] getBoundary(final String contentType) {
final ParameterParser parameterparserVar1 = parameterparserLiteral2;
parameterparserVar1.setLowerCaseNames(true);
final Map<String, String> map<string,string>Var3 = map<string,string>Literal4;
final String stringVar5 = stringLiteral6;
if (stringVar5 == null) {
return null;
}
byte[] byteArrayVar7;
try {
byteArrayVar7 = stringVar5.getBytes(""ISO-8859-1"");
} catch (final UnsupportedEncodingException e) {
byteArrayVar7 = stringVar5.getBytes();
}
return byteArrayVar7;
}"
11382,I18N,DM_CONVERT_CASE,TP,fileupload,83,"String nameLower = name.toLowerCase();
","public Iterator<String> getHeaders(String name) {
String nameLower = name.toLowerCase();
List<String> headerValueList = headerNameToValueListMap.get(nameLower);
if (null == headerValueList) {
headerValueList = Collections.emptyList();
}
return headerValueList.iterator();
}","public Iterator<String> getHeaders(String name) {
String stringVar1 = stringLiteral2;
List<String> list<string>Var3 = list<string>Literal4;
if (null == list<string>Var3) {
list<string>Var3 = Collections.emptyList();
}
return list<string>Var3.iterator();
}"
11383,DODGY_CODE,DLS_DEAD_LOCAL_STORE,FP,fileupload,84,"byte[] rawdata = new byte[0];
","@Override
public String getString() {
byte[] rawdata = new byte[0];
try {
rawdata = get();
String charset = getCharSet();
if (charset == null) {
charset = defaultCharset;
}
return new String(rawdata, charset);
} catch (final IOException e) {
return new String(rawdata);
}
}","@Override
public String getString() {
byte[] byteArrayVar1 = byteArrayLiteral2;
try {
byteArrayVar1 = get();
String stringVar3 = stringLiteral4;
if (stringVar3 == null) {
stringVar3 = defaultCharset;
}
return new String(byteArrayVar1, stringVar3);
} catch (final IOException e) {
return new String(byteArrayVar1);
}
}"
11421,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,fileupload,122,"return null;
","protected byte[] getBoundary(String contentType) {
ParameterParser parser = new ParameterParser();
parser.setLowerCaseNames(true);
Map<String, String> params = parser.parse(contentType, new char[] { ';', ',' });
String boundaryStr = params.get(""boundary"");
if (boundaryStr == null) {
return null;
}
byte[] boundary;
try {
boundary = boundaryStr.getBytes(""ISO-8859-1"");
} catch (UnsupportedEncodingException e) {
boundary = boundaryStr.getBytes();
}
return boundary;
}","protected byte[] getBoundary(String contentType) {
ParameterParser parameterparserVar1 = parameterparserLiteral2;
parameterparserVar1.setLowerCaseNames(true);
Map<String, String> map<string,string>Var3 = map<string,string>Literal4;
String stringVar5 = stringLiteral6;
if (stringVar5 == null) {
return null;
}
byte[] byteArrayVar7;
try {
byteArrayVar7 = stringVar5.getBytes(""ISO-8859-1"");
} catch (UnsupportedEncodingException e) {
byteArrayVar7 = stringVar5.getBytes();
}
return byteArrayVar7;
}"
11422,CORRECTNESS,UWF_UNWRITTEN_FIELD,FP,fileupload,123,private boolean opened;,private boolean opened;,private boolean booleanVar1;
11427,I18N,DM_CONVERT_CASE,FP,fileupload,128,"&&  subContentType.toLowerCase()
","private boolean findNextItem() throws IOException {
if (eof) {
return false;
}
if (currentItem != null) {
currentItem.close();
currentItem = null;
}
for (; ; ) {
boolean nextPart;
if (skipPreamble) {
nextPart = multi.skipPreamble();
} else {
nextPart = multi.readBoundary();
}
if (!nextPart) {
if (currentFieldName == null) {
eof = true;
return false;
}
multi.setBoundary(boundary);
currentFieldName = null;
continue;
}
FileItemHeaders headers = getParsedHeaders(multi.readHeaders());
if (currentFieldName == null) {
String fieldName = getFieldName(headers);
if (fieldName != null) {
String subContentType = headers.getHeader(CONTENT_TYPE);
if (subContentType != null && subContentType.toLowerCase().startsWith(MULTIPART_MIXED)) {
currentFieldName = fieldName;
byte[] subBoundary = getBoundary(subContentType);
multi.setBoundary(subBoundary);
skipPreamble = true;
continue;
}
String fileName = getFileName(headers);
currentItem = new FileItemStreamImpl(fileName, fieldName, headers.getHeader(CONTENT_TYPE), fileName == null, getContentLength(headers));
currentItem.setHeaders(headers);
notifier.noteItem();
itemValid = true;
return true;
}
} else {
String fileName = getFileName(headers);
if (fileName != null) {
currentItem = new FileItemStreamImpl(fileName, currentFieldName, headers.getHeader(CONTENT_TYPE), false, getContentLength(headers));
currentItem.setHeaders(headers);
notifier.noteItem();
itemValid = true;
return true;
}
}
multi.discardBodyData();
}
}","private boolean findNextItem() throws IOException {
if (eof) {
return false;
}
if (currentItem != null) {
currentItem.close();
currentItem = null;
}
for (; ; ) {
boolean booleanVar1;
if (skipPreamble) {
booleanVar1 = multi.skipPreamble();
} else {
booleanVar1 = multi.readBoundary();
}
if (!booleanVar1) {
if (currentFieldName == null) {
eof = true;
return false;
}
multi.setBoundary(boundary);
currentFieldName = null;
continue;
}
FileItemHeaders fileitemheadersVar2 = fileitemheadersLiteral3;
if (currentFieldName == null) {
String stringVar4 = stringLiteral5;
if (stringVar4 != null) {
String stringVar6 = stringLiteral7;
if (stringVar6 != null && stringVar6.toLowerCase().startsWith(MULTIPART_MIXED)) {
currentFieldName = stringVar4;
byte[] byteArrayVar8 = byteArrayLiteral9;
multi.setBoundary(byteArrayVar8);
skipPreamble = true;
continue;
}
String stringVar10 = stringLiteral11;
currentItem = new FileItemStreamImpl(stringVar10, stringVar4, fileitemheadersVar2.getHeader(CONTENT_TYPE), stringVar10 == null, getContentLength(fileitemheadersVar2));
currentItem.setHeaders(fileitemheadersVar2);
notifier.noteItem();
itemValid = true;
return true;
}
} else {
String stringVar10 = stringLiteral11;
if (stringVar10 != null) {
currentItem = new FileItemStreamImpl(stringVar10, currentFieldName, fileitemheadersVar2.getHeader(CONTENT_TYPE), false, getContentLength(fileitemheadersVar2));
currentItem.setHeaders(fileitemheadersVar2);
notifier.noteItem();
itemValid = true;
return true;
}
}
multi.discardBodyData();
}
}"
11436,CORRECTNESS,NP_NULL_PARAM_DEREF_NONVIRTUAL,FP,fileupload,137,"this(null, null, null);
","@Deprecated
public MultipartStream() {
this(null, null, null);
}","@Deprecated
public MultipartStream() {
this(null, null, null);
}"
11439,MALICIOUS_CODE,EI_EXPOSE_REP2,FP,fileupload,140,"this.chars = chars;
","public Map<String, String> parse(final char[] chars, int offset, int length, char separator) {
if (chars == null) {
return new HashMap<String, String>();
}
HashMap<String, String> params = new HashMap<String, String>();
this.chars = chars;
this.pos = offset;
this.len = length;
String paramName = null;
String paramValue = null;
while (hasChar()) {
paramName = parseToken(new char[] { '=', separator });
paramValue = null;
if (hasChar() && (chars[pos] == '=')) {
pos++;
paramValue = parseQuotedToken(new char[] { separator });
}
if (hasChar() && (chars[pos] == separator)) {
pos++;
}
if ((paramName != null) && (paramName.length() > 0)) {
if (this.lowerCaseNames) {
paramName = paramName.toLowerCase();
}
params.put(paramName, paramValue);
}
}
return params;
}","public Map<String, String> parse(final char[] chars, int offset, int length, char separator) {
if (chars == null) {
return new HashMap<String, String>();
}
HashMap<String, String> hashmap<string,string>Var1 = hashmap<string,string>Literal2;
this.chars = chars;
this.pos = offset;
this.len = length;
String stringVar3 = stringLiteral4;
String stringVar5 = stringLiteral4;
while (hasChar()) {
stringVar3 = parseToken(new char[] { '=', separator });
stringVar5 = null;
if (hasChar() && (chars[pos] == '=')) {
pos++;
stringVar5 = parseQuotedToken(new char[] { separator });
}
if (hasChar() && (chars[pos] == separator)) {
pos++;
}
if ((stringVar3 != null) && (stringVar3.length() > 0)) {
if (this.lowerCaseNames) {
stringVar3 = stringVar3.toLowerCase();
}
hashmap<string,string>Var1.put(stringVar3, stringVar5);
}
}
return hashmap<string,string>Var1;
}"
11444,BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,fileupload,145,"outputFile.delete();
","public void delete() {
cachedContent = null;
File outputFile = getStoreLocation();
if (outputFile != null && outputFile.exists()) {
outputFile.delete();
}
}","public void delete() {
cachedContent = null;
File fileVar1 = fileLiteral2;
if (fileVar1 != null && fileVar1.exists()) {
fileVar1.delete();
}
}"
11450,I18N,DM_CONVERT_CASE,FP,fileupload,151,"String nameLower = name.toLowerCase();
","public String getHeader(String name) {
String nameLower = name.toLowerCase();
List<String> headerValueList = headerNameToValueListMap.get(nameLower);
if (null == headerValueList) {
return null;
}
return headerValueList.get(0);
}","public String getHeader(String name) {
String stringVar1 = stringLiteral2;
List<String> list<string>Var3 = list<string>Literal4;
if (null == list<string>Var3) {
return null;
}
return list<string>Var3.get(0);
}"
11481,I18N,DM_CONVERT_CASE,FP,fileupload,182,"String nameLower = name.toLowerCase();
","public Iterator<String> getHeaders(String name) {
String nameLower = name.toLowerCase();
List<String> headerValueList = headerNameToValueListMap.get(nameLower);
if (null == headerValueList) {
headerValueList = Collections.emptyList();
}
return headerValueList.iterator();
}","public Iterator<String> getHeaders(String name) {
String stringVar1 = stringLiteral2;
List<String> list<string>Var3 = list<string>Literal4;
if (null == list<string>Var3) {
list<string>Var3 = Collections.emptyList();
}
return list<string>Var3.iterator();
}"
11482,I18N,DM_CONVERT_CASE,FP,fileupload,183,"String nameLower = name.toLowerCase();
","public synchronized void addHeader(String name, String value) {
String nameLower = name.toLowerCase();
List<String> headerValueList = headerNameToValueListMap.get(nameLower);
if (null == headerValueList) {
headerValueList = new ArrayList<String>();
headerNameToValueListMap.put(nameLower, headerValueList);
}
headerValueList.add(value);
}","public synchronized void addHeader(String name, String value) {
String stringVar1 = stringLiteral2;
List<String> list<string>Var3 = list<string>Literal4;
if (null == list<string>Var3) {
list<string>Var3 = new ArrayList<String>();
headerNameToValueListMap.put(stringVar1, list<string>Var3);
}
list<string>Var3.add(value);
}"
11489,I18N,DM_DEFAULT_ENCODING,FP,fileupload,190,"boundary = boundaryStr.getBytes();
","protected byte[] getBoundary(String contentType) {
ParameterParser parser = new ParameterParser();
parser.setLowerCaseNames(true);
Map params = parser.parse(contentType, ';');
String boundaryStr = (String) params.get(""boundary"");
if (boundaryStr == null) {
return null;
}
byte[] boundary;
try {
boundary = boundaryStr.getBytes(""ISO-8859-1"");
} catch (UnsupportedEncodingException e) {
boundary = boundaryStr.getBytes();
}
return boundary;
}","protected byte[] getBoundary(String contentType) {
ParameterParser parameterparserVar1 = parameterparserLiteral2;
parameterparserVar1.setLowerCaseNames(true);
Map mapVar3 = mapLiteral4;
String stringVar5 = stringLiteral6;
if (stringVar5 == null) {
return null;
}
byte[] byteArrayVar7;
try {
byteArrayVar7 = stringVar5.getBytes(""ISO-8859-1"");
} catch (UnsupportedEncodingException e) {
byteArrayVar7 = stringVar5.getBytes();
}
return byteArrayVar7;
}"
11492,I18N,DM_CONVERT_CASE,FP,fileupload,193,".trim().toLowerCase();
","private void parseHeaderLine(Map headers, String header) {
final int colonOffset = header.indexOf(':');
if (colonOffset == -1) {
return;
}
String headerName = header.substring(0, colonOffset).trim().toLowerCase();
String headerValue = header.substring(header.indexOf(':') + 1).trim();
if (getHeader(headers, headerName) != null) {
headers.put(headerName, getHeader(headers, headerName) + ',' + headerValue);
} else {
headers.put(headerName, headerValue);
}
}","private void parseHeaderLine(Map headers, String header) {
final int intVar1 = intLiteral2;
if (intVar1 == -1) {
return;
}
String stringVar3 = stringLiteral4;
String stringVar5 = stringLiteral6;
if (getHeader(headers, stringVar3) != null) {
headers.put(stringVar3, getHeader(headers, stringVar3) + ',' + stringVar5);
} else {
headers.put(stringVar3, stringVar5);
}
}"
11506,MALICIOUS_CODE,EI_EXPOSE_REP2,FP,fileupload,207,"this.chars = chars;
","public Map parse(final char[] chars, int offset, int length, char separator) {
if (chars == null) {
return new HashMap();
}
HashMap params = new HashMap();
this.chars = chars;
this.pos = offset;
this.len = length;
String paramName = null;
String paramValue = null;
while (hasChar()) {
paramName = parseToken(new char[] { '=', separator });
paramValue = null;
if (hasChar() && (chars[pos] == '=')) {
pos++;
paramValue = parseQuotedToken(new char[] { separator });
}
if (hasChar() && (chars[pos] == separator)) {
pos++;
}
if ((paramName != null) && (paramName.length() > 0)) {
if (this.lowerCaseNames) {
paramName = paramName.toLowerCase();
}
params.put(paramName, paramValue);
}
}
return params;
}","public Map parse(final char[] chars, int offset, int length, char separator) {
if (chars == null) {
return new HashMap();
}
HashMap hashmapVar1 = hashmapLiteral2;
this.chars = chars;
this.pos = offset;
this.len = length;
String stringVar3 = stringLiteral4;
String stringVar5 = stringLiteral4;
while (hasChar()) {
stringVar3 = parseToken(new char[] { '=', separator });
stringVar5 = null;
if (hasChar() && (chars[pos] == '=')) {
pos++;
stringVar5 = parseQuotedToken(new char[] { separator });
}
if (hasChar() && (chars[pos] == separator)) {
pos++;
}
if ((stringVar3 != null) && (stringVar3.length() > 0)) {
if (this.lowerCaseNames) {
stringVar3 = stringVar3.toLowerCase();
}
hashmapVar1.put(stringVar3, stringVar5);
}
}
return hashmapVar1;
}"
11511,BAD_PRACTICE,RR_NOT_CHECKED,FP,fileupload,212,"fis.read(fileData);
","public byte[] get() {
if (isInMemory()) {
if (cachedContent == null) {
cachedContent = dfos.getData();
}
return cachedContent;
}
byte[] fileData = new byte[(int) getSize()];
FileInputStream fis = null;
try {
fis = new FileInputStream(dfos.getFile());
fis.read(fileData);
} catch (IOException e) {
fileData = null;
} finally {
if (fis != null) {
try {
fis.close();
} catch (IOException e) {
}
}
}
return fileData;
}","public byte[] get() {
if (isInMemory()) {
if (cachedContent == null) {
cachedContent = dfos.getData();
}
return cachedContent;
}
byte[] byteArrayVar1 = byteArrayLiteral2;
FileInputStream fileinputstreamVar3 = fileinputstreamLiteral4;
try {
fileinputstreamVar3 = new FileInputStream(dfos.getFile());
fileinputstreamVar3.read(byteArrayVar1);
} catch (IOException e) {
byteArrayVar1 = null;
} finally {
if (fileinputstreamVar3 != null) {
try {
fileinputstreamVar3.close();
} catch (IOException e) {
}
}
}
return byteArrayVar1;
}"
11512,I18N,DM_DEFAULT_ENCODING,FP,fileupload,213,"return new String(rawdata);
","public String getString() {
byte[] rawdata = get();
String charset = getCharSet();
if (charset == null) {
charset = DEFAULT_CHARSET;
}
try {
return new String(rawdata, charset);
} catch (UnsupportedEncodingException e) {
return new String(rawdata);
}
}","public String getString() {
byte[] byteArrayVar1 = byteArrayLiteral2;
String stringVar3 = stringLiteral4;
if (stringVar3 == null) {
stringVar3 = DEFAULT_CHARSET;
}
try {
return new String(byteArrayVar1, stringVar3);
} catch (UnsupportedEncodingException e) {
return new String(byteArrayVar1);
}
}"
11556,I18N,DM_CONVERT_CASE,FP,fileupload,257,"String cdl = cd.toLowerCase();
","protected String getFileName(Map headers) {
String fileName = null;
String cd = getHeader(headers, CONTENT_DISPOSITION);
if (cd != null) {
String cdl = cd.toLowerCase();
if (cdl.startsWith(FORM_DATA) || cdl.startsWith(ATTACHMENT)) {
ParameterParser parser = new ParameterParser();
parser.setLowerCaseNames(true);
Map params = parser.parse(cd, ';');
if (params.containsKey(""filename"")) {
fileName = (String) params.get(""filename"");
if (fileName != null) {
fileName = fileName.trim();
} else {
fileName = """";
}
}
}
}
return fileName;
}","protected String getFileName(Map headers) {
String stringVar1 = stringLiteral2;
String stringVar3 = stringLiteral4;
if (stringVar3 != null) {
String stringVar5 = stringLiteral6;
if (stringVar5.startsWith(FORM_DATA) || stringVar5.startsWith(ATTACHMENT)) {
ParameterParser parameterparserVar7 = parameterparserLiteral8;
parameterparserVar7.setLowerCaseNames(true);
Map mapVar9 = mapLiteral10;
if (mapVar9.containsKey(""filename"")) {
stringVar1 = (String) mapVar9.get(""filename"");
if (stringVar1 != null) {
stringVar1 = stringVar1.trim();
} else {
stringVar1 = """";
}
}
}
}
return stringVar1;
}"
11568,MALICIOUS_CODE,EI_EXPOSE_REP2,FP,fileupload,269,"this.chars = chars;
","public Map parse(final char[] chars, int offset, int length, char separator) {
if (chars == null) {
return new HashMap();
}
HashMap params = new HashMap();
this.chars = chars;
this.pos = offset;
this.len = length;
String paramName = null;
String paramValue = null;
while (hasChar()) {
paramName = parseToken(new char[] { '=', separator });
paramValue = null;
if (hasChar() && (chars[pos] == '=')) {
pos++;
paramValue = parseQuotedToken(new char[] { separator });
}
if (hasChar() && (chars[pos] == separator)) {
pos++;
}
if ((paramName != null) && (paramName.length() > 0)) {
if (this.lowerCaseNames) {
paramName = paramName.toLowerCase();
}
params.put(paramName, paramValue);
}
}
return params;
}","public Map parse(final char[] chars, int offset, int length, char separator) {
if (chars == null) {
return new HashMap();
}
HashMap hashmapVar1 = hashmapLiteral2;
this.chars = chars;
this.pos = offset;
this.len = length;
String stringVar3 = stringLiteral4;
String stringVar5 = stringLiteral4;
while (hasChar()) {
stringVar3 = parseToken(new char[] { '=', separator });
stringVar5 = null;
if (hasChar() && (chars[pos] == '=')) {
pos++;
stringVar5 = parseQuotedToken(new char[] { separator });
}
if (hasChar() && (chars[pos] == separator)) {
pos++;
}
if ((stringVar3 != null) && (stringVar3.length() > 0)) {
if (this.lowerCaseNames) {
stringVar3 = stringVar3.toLowerCase();
}
hashmapVar1.put(stringVar3, stringVar5);
}
}
return hashmapVar1;
}"
11572,BAD_PRACTICE,RR_NOT_CHECKED,FP,fileupload,273,"fis.read(fileData);
","public byte[] get() {
if (isInMemory()) {
if (cachedContent == null) {
cachedContent = dfos.getData();
}
return cachedContent;
}
byte[] fileData = new byte[(int) getSize()];
FileInputStream fis = null;
try {
fis = new FileInputStream(dfos.getFile());
fis.read(fileData);
} catch (IOException e) {
fileData = null;
} finally {
if (fis != null) {
try {
fis.close();
} catch (IOException e) {
}
}
}
return fileData;
}","public byte[] get() {
if (isInMemory()) {
if (cachedContent == null) {
cachedContent = dfos.getData();
}
return cachedContent;
}
byte[] byteArrayVar1 = byteArrayLiteral2;
FileInputStream fileinputstreamVar3 = fileinputstreamLiteral4;
try {
fileinputstreamVar3 = new FileInputStream(dfos.getFile());
fileinputstreamVar3.read(byteArrayVar1);
} catch (IOException e) {
byteArrayVar1 = null;
} finally {
if (fileinputstreamVar3 != null) {
try {
fileinputstreamVar3.close();
} catch (IOException e) {
}
}
}
return byteArrayVar1;
}"
11573,BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,fileupload,274,"dfosFile.delete();
","private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
in.defaultReadObject();
OutputStream output = getOutputStream();
if (cachedContent != null) {
output.write(cachedContent);
} else {
FileInputStream input = new FileInputStream(dfosFile);
IOUtils.copy(input, output);
dfosFile.delete();
dfosFile = null;
}
output.close();
cachedContent = null;
}","private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
in.defaultReadObject();
OutputStream outputstreamVar1 = outputstreamLiteral2;
if (cachedContent != null) {
outputstreamVar1.write(cachedContent);
} else {
FileInputStream fileinputstreamVar3 = fileinputstreamLiteral4;
IOUtils.copy(fileinputstreamVar3, outputstreamVar1);
dfosFile.delete();
dfosFile = null;
}
outputstreamVar1.close();
cachedContent = null;
}"
11576,I18N,DM_DEFAULT_ENCODING,FP,fileupload,277,"return new String(rawdata);
","public String getString() {
byte[] rawdata = get();
String charset = getCharSet();
if (charset == null) {
charset = DEFAULT_CHARSET;
}
try {
return new String(rawdata, charset);
} catch (UnsupportedEncodingException e) {
return new String(rawdata);
}
}","public String getString() {
byte[] byteArrayVar1 = byteArrayLiteral2;
String stringVar3 = stringLiteral4;
if (stringVar3 == null) {
stringVar3 = DEFAULT_CHARSET;
}
try {
return new String(byteArrayVar1, stringVar3);
} catch (UnsupportedEncodingException e) {
return new String(byteArrayVar1);
}
}"
11582,PERFORMANCE,SBSC_USE_STRINGBUFFER_CONCATENATION,FP,fileupload,283,"header += "" "" + headerPart.substring(nonWs, end);
","protected Map parseHeaders(String headerPart) {
final int len = headerPart.length();
Map headers = new HashMap();
int start = 0;
for (; ; ) {
int end = parseEndOfLine(headerPart, start);
if (start == end) {
break;
}
String header = headerPart.substring(start, end);
start = end + 2;
while (start < len) {
int nonWs = start;
while (nonWs < len) {
char c = headerPart.charAt(nonWs);
if (c != ' ' && c != '\t') {
break;
}
++nonWs;
}
if (nonWs == start) {
break;
}
end = parseEndOfLine(headerPart, nonWs);
header += "" "" + headerPart.substring(nonWs, end);
start = end + 2;
}
parseHeaderLine(headers, header);
}
return headers;
}","protected Map parseHeaders(String headerPart) {
final int intVar1 = intLiteral2;
Map mapVar3 = mapLiteral4;
int intVar5 = intLiteral6;
for (; ; ) {
int intVar7 = intLiteral8;
if (intVar5 == intVar7) {
break;
}
String stringVar9 = stringLiteral10;
intVar5 = intVar7 + 2;
while (intVar5 < intVar1) {
int intVar11 = intLiteral12;
while (intVar11 < intVar1) {
char charVar13 = charLiteral14;
if (charVar13 != ' ' && charVar13 != '\t') {
break;
}
++intVar11;
}
if (intVar11 == intVar5) {
break;
}
intVar7 = parseEndOfLine(headerPart, intVar11);
stringVar9 += "" "" + headerPart.substring(intVar11, intVar7);
intVar5 = intVar7 + 2;
}
parseHeaderLine(mapVar3, stringVar9);
}
return mapVar3;
}"
11583,DODGY_CODE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,FP,fileupload,284,"throw (FileUploadException) e.getCause();
","public List parseRequest(RequestContext ctx) throws FileUploadException {
try {
FileItemIterator iter = getItemIterator(ctx);
List items = new ArrayList();
FileItemFactory fac = getFileItemFactory();
if (fac == null) {
throw new NullPointerException(""No FileItemFactory has been set."");
}
while (iter.hasNext()) {
FileItemStream item = iter.next();
FileItem fileItem = fac.createItem(item.getFieldName(), item.getContentType(), item.isFormField(), item.getName());
try {
Streams.copy(item.openStream(), fileItem.getOutputStream(), true);
} catch (FileUploadIOException e) {
throw (FileUploadException) e.getCause();
} catch (IOException e) {
throw new IOFileUploadException(""Processing of "" + MULTIPART_FORM_DATA + "" request failed. "" + e.getMessage(), e);
}
items.add(fileItem);
}
return items;
} catch (FileUploadIOException e) {
throw (FileUploadException) e.getCause();
} catch (IOException e) {
throw new FileUploadException(e.getMessage(), e);
}
}","public List parseRequest(RequestContext ctx) throws FileUploadException {
try {
FileItemIterator fileitemiteratorVar1 = fileitemiteratorLiteral2;
List listVar3 = listLiteral4;
FileItemFactory fileitemfactoryVar5 = fileitemfactoryLiteral6;
if (fileitemfactoryVar5 == null) {
throw new NullPointerException(""No FileItemFactory has been set."");
}
while (fileitemiteratorVar1.hasNext()) {
FileItemStream fileitemstreamVar7 = fileitemstreamLiteral8;
FileItem fileitemVar9 = fileitemLiteral10;
try {
Streams.copy(fileitemstreamVar7.openStream(), fileitemVar9.getOutputStream(), true);
} catch (FileUploadIOException e) {
throw (FileUploadException) e.getCause();
} catch (IOException e) {
throw new IOFileUploadException(""Processing of "" + MULTIPART_FORM_DATA + "" request failed. "" + e.getMessage(), e);
}
listVar3.add(fileitemVar9);
}
return listVar3;
} catch (FileUploadIOException e) {
throw (FileUploadException) e.getCause();
} catch (IOException e) {
throw new FileUploadException(e.getMessage(), e);
}
}"
11587,I18N,DM_CONVERT_CASE,FP,fileupload,288,".trim().toLowerCase();
","private void parseHeaderLine(Map headers, String header) {
final int colonOffset = header.indexOf(':');
if (colonOffset == -1) {
return;
}
String headerName = header.substring(0, colonOffset).trim().toLowerCase();
String headerValue = header.substring(header.indexOf(':') + 1).trim();
if (getHeader(headers, headerName) != null) {
headers.put(headerName, getHeader(headers, headerName) + ',' + headerValue);
} else {
headers.put(headerName, headerValue);
}
}","private void parseHeaderLine(Map headers, String header) {
final int intVar1 = intLiteral2;
if (intVar1 == -1) {
return;
}
String stringVar3 = stringLiteral4;
String stringVar5 = stringLiteral6;
if (getHeader(headers, stringVar3) != null) {
headers.put(stringVar3, getHeader(headers, stringVar3) + ',' + stringVar5);
} else {
headers.put(stringVar3, stringVar5);
}
}"
11596,MALICIOUS_CODE,MS_PKGPROTECT,FP,fileupload,297,"protected static final byte[] FIELD_SEPARATOR = { CR, LF };","protected static final byte[] FIELD_SEPARATOR = { CR, LF };",protected static final byte[] byteArrayVar1 = byteArrayLiteral2;
11599,BAD_PRACTICE,SR_NOT_CHECKED,FP,fileupload,300,"skip(av);
","public void close() throws IOException {
if (closed) {
return;
}
for (; ; ) {
int av = available();
if (av == 0) {
av = makeAvailable();
if (av == 0) {
break;
}
}
skip(av);
}
closed = true;
}","public void close() throws IOException {
if (closed) {
return;
}
for (; ; ) {
int intVar1 = intLiteral2;
if (intVar1 == 0) {
intVar1 = makeAvailable();
if (intVar1 == 0) {
break;
}
}
skip(intVar1);
}
closed = true;
}"
11604,BAD_PRACTICE,SE_NO_SERIALVERSIONID,FP,fileupload,305,"private static final String UID =
new java.rmi.server.UID().toString()
.replace(':', '_').replace('-', '_');
private static int counter = 0;
private String fieldName;
private String contentType;
private boolean isFormField;
private String fileName;
private long size = -1;
private int sizeThreshold;
private File repository;
private byte[] cachedContent;
private transient DeferredFileOutputStream dfos;
private File dfosFile;
public DiskFileItem(String fieldName, String contentType,
boolean isFormField, String fileName, int sizeThreshold,
File repository) {
this.fieldName = fieldName;
this.contentType = contentType;
this.isFormField = isFormField;
this.fileName = fileName;
this.sizeThreshold = sizeThreshold;
this.repository = repository;
}
public InputStream getInputStream()
throws IOException {
if (!isInMemory()) {
return new FileInputStream(dfos.getFile());
}
if (cachedContent == null) {
cachedContent = dfos.getData();
}
return new ByteArrayInputStream(cachedContent);
}
public String getContentType() {
return contentType;
}
public String getCharSet() {
ParameterParser parser = new ParameterParser();
parser.setLowerCaseNames(true);
Map params = parser.parse(getContentType(), ';');
return (String) params.get(""charset"");
}
public String getName() {
return fileName;
}
public boolean isInMemory() {
if (cachedContent != null) {
return true;
}
return dfos.isInMemory();
}
public long getSize() {
if (size >= 0) {
return size;
} else if (cachedContent != null) {
return cachedContent.length;
} else if (dfos.isInMemory()) {
return dfos.getData().length;
} else {
return dfos.getFile().length();
}
}
public byte[] get() {
if (isInMemory()) {
if (cachedContent == null) {
cachedContent = dfos.getData();
}
return cachedContent;
}
byte[] fileData = new byte[(int) getSize()];
FileInputStream fis = null;
try {
fis = new FileInputStream(dfos.getFile());
fis.read(fileData);
} catch (IOException e) {
fileData = null;
} finally {
if (fis != null) {
try {
fis.close();
} catch (IOException e) {
}
}
}
return fileData;
}
public String getString(final String charset)
throws UnsupportedEncodingException {
return new String(get(), charset);
}
public String getString() {
byte[] rawdata = get();
String charset = getCharSet();
if (charset == null) {
charset = DEFAULT_CHARSET;
}
try {
return new String(rawdata, charset);
} catch (UnsupportedEncodingException e) {
return new String(rawdata);
}
}
public void write(File file) throws Exception {
if (isInMemory()) {
FileOutputStream fout = null;
try {
fout = new FileOutputStream(file);
fout.write(get());
} finally {
if (fout != null) {
fout.close();
}
}
} else {
File outputFile = getStoreLocation();
if (outputFile != null) {
size = outputFile.length();
if (!outputFile.renameTo(file)) {
BufferedInputStream in = null;
BufferedOutputStream out = null;
try {
in = new BufferedInputStream(
new FileInputStream(outputFile));
out = new BufferedOutputStream(
new FileOutputStream(file));
IOUtils.copy(in, out);
} finally {
if (in != null) {
try {
in.close();
} catch (IOException e) {
}
}
if (out != null) {
try {
out.close();
} catch (IOException e) {
}
}
}
}
} else {
throw new FileUploadException(
""Cannot write uploaded file to disk!"");
}
}
}
public void delete() {
cachedContent = null;
File outputFile = getStoreLocation();
if (outputFile != null && outputFile.exists()) {
outputFile.delete();
}
}
public String getFieldName() {
return fieldName;
}
public void setFieldName(String fieldName) {
this.fieldName = fieldName;
}
public boolean isFormField() {
return isFormField;
}
public void setFormField(boolean state) {
isFormField = state;
}
public OutputStream getOutputStream()
throws IOException {
if (dfos == null) {
File outputFile = getTempFile();
dfos = new DeferredFileOutputStream(sizeThreshold, outputFile);
}
return dfos;
}
public File getStoreLocation() {
return dfos.getFile();
}
protected void finalize() {
File outputFile = dfos.getFile();
if (outputFile != null && outputFile.exists()) {
outputFile.delete();
}
}
protected File getTempFile() {
File tempDir = repository;
if (tempDir == null) {
tempDir = new File(System.getProperty(""java.io.tmpdir""));
}
String tempFileName = ""upload_"" + UID + ""_"" + getUniqueId() + "".tmp"";
File f = new File(tempDir, tempFileName);
FileCleaner.track(f, this);
return f;
}
private static String getUniqueId() {
final int limit = 100000000;
int current;
synchronized (DiskFileItem.class) {
current = counter++;
}
String id = Integer.toString(current);
if (current < limit) {
id = (""00000000"" + id).substring(id.length());
}
return id;
}
public String toString() {
return ""name="" + this.getName()
+ "", StoreLocation=""
+ String.valueOf(this.getStoreLocation())
+ "", size=""
+ this.getSize()
+ ""bytes, ""
+ ""isFormField="" + isFormField()
+ "", FieldName=""
+ this.getFieldName();
}
private void writeObject(ObjectOutputStream out) throws IOException {
if (dfos.isInMemory()) {
cachedContent = get();
} else {
cachedContent = null;
dfosFile = dfos.getFile();
}
out.defaultWriteObject();
}
private void readObject(ObjectInputStream in)
throws IOException, ClassNotFoundException {
in.defaultReadObject();
OutputStream output = getOutputStream();
if (cachedContent != null) {
output.write(cachedContent);
} else {
FileInputStream input = new FileInputStream(dfosFile);
IOUtils.copy(input, output);
dfosFile.delete();
dfosFile = null;
}
output.close();
cachedContent = null;
}
","public byte[] get() {
if (isInMemory()) {
if (cachedContent == null) {
cachedContent = dfos.getData();
}
return cachedContent;
}
byte[] fileData = new byte[(int) getSize()];
FileInputStream fis = null;
try {
fis = new FileInputStream(dfos.getFile());
fis.read(fileData);
} catch (IOException e) {
fileData = null;
} finally {
if (fis != null) {
try {
fis.close();
} catch (IOException e) {
}
}
}
return fileData;
}","public byte[] get() {
if (isInMemory()) {
if (cachedContent == null) {
cachedContent = dfos.getData();
}
return cachedContent;
}
byte[] byteArrayVar1 = byteArrayLiteral2;
FileInputStream fileinputstreamVar3 = fileinputstreamLiteral4;
try {
fileinputstreamVar3 = new FileInputStream(dfos.getFile());
fileinputstreamVar3.read(byteArrayVar1);
} catch (IOException e) {
byteArrayVar1 = null;
} finally {
if (fileinputstreamVar3 != null) {
try {
fileinputstreamVar3.close();
} catch (IOException e) {
}
}
}
return byteArrayVar1;
}"
11608,BAD_PRACTICE,RR_NOT_CHECKED,FP,fileupload,309,"fis.read(fileData);
","public byte[] get() {
if (isInMemory()) {
if (cachedContent == null) {
cachedContent = dfos.getData();
}
return cachedContent;
}
byte[] fileData = new byte[(int) getSize()];
FileInputStream fis = null;
try {
fis = new FileInputStream(dfos.getFile());
fis.read(fileData);
} catch (IOException e) {
fileData = null;
} finally {
if (fis != null) {
try {
fis.close();
} catch (IOException e) {
}
}
}
return fileData;
}","public byte[] get() {
if (isInMemory()) {
if (cachedContent == null) {
cachedContent = dfos.getData();
}
return cachedContent;
}
byte[] byteArrayVar1 = byteArrayLiteral2;
FileInputStream fileinputstreamVar3 = fileinputstreamLiteral4;
try {
fileinputstreamVar3 = new FileInputStream(dfos.getFile());
fileinputstreamVar3.read(byteArrayVar1);
} catch (IOException e) {
byteArrayVar1 = null;
} finally {
if (fileinputstreamVar3 != null) {
try {
fileinputstreamVar3.close();
} catch (IOException e) {
}
}
}
return byteArrayVar1;
}"
11646,DODGY_CODE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,FP,fileupload,347,"throw (FileUploadException) e.getCause();
","public List parseRequest(RequestContext ctx) throws FileUploadException {
try {
FileItemIterator iter = getItemIterator(ctx);
List items = new ArrayList();
FileItemFactory fac = getFileItemFactory();
if (fac == null) {
throw new NullPointerException(""No FileItemFactory has been set."");
}
while (iter.hasNext()) {
FileItemStream item = iter.next();
FileItem fileItem = fac.createItem(item.getFieldName(), item.getContentType(), item.isFormField(), item.getName());
try {
Streams.copy(item.openStream(), fileItem.getOutputStream(), true);
} catch (FileUploadIOException e) {
throw (FileUploadException) e.getCause();
} catch (IOException e) {
throw new IOFileUploadException(""Processing of "" + MULTIPART_FORM_DATA + "" request failed. "" + e.getMessage(), e);
}
if (fileItem instanceof FileItemHeadersSupport) {
final FileItemHeaders fih = item.getHeaders();
((FileItemHeadersSupport) fileItem).setHeaders(fih);
}
items.add(fileItem);
}
return items;
} catch (FileUploadIOException e) {
throw (FileUploadException) e.getCause();
} catch (IOException e) {
throw new FileUploadException(e.getMessage(), e);
}
}","public List parseRequest(RequestContext ctx) throws FileUploadException {
try {
FileItemIterator fileitemiteratorVar1 = fileitemiteratorLiteral2;
List listVar3 = listLiteral4;
FileItemFactory fileitemfactoryVar5 = fileitemfactoryLiteral6;
if (fileitemfactoryVar5 == null) {
throw new NullPointerException(""No FileItemFactory has been set."");
}
while (fileitemiteratorVar1.hasNext()) {
FileItemStream fileitemstreamVar7 = fileitemstreamLiteral8;
FileItem fileitemVar9 = fileitemLiteral10;
try {
Streams.copy(fileitemstreamVar7.openStream(), fileitemVar9.getOutputStream(), true);
} catch (FileUploadIOException e) {
throw (FileUploadException) e.getCause();
} catch (IOException e) {
throw new IOFileUploadException(""Processing of "" + MULTIPART_FORM_DATA + "" request failed. "" + e.getMessage(), e);
}
if (fileitemVar9 instanceof FileItemHeadersSupport) {
final FileItemHeaders fileitemheadersVar11 = fileitemheadersLiteral12;
((FileItemHeadersSupport) fileitemVar9).setHeaders(fileitemheadersVar11);
}
listVar3.add(fileitemVar9);
}
return listVar3;
} catch (FileUploadIOException e) {
throw (FileUploadException) e.getCause();
} catch (IOException e) {
throw new FileUploadException(e.getMessage(), e);
}
}"
11654,PERFORMANCE,SBSC_USE_STRINGBUFFER_CONCATENATION,FP,fileupload,355,"headerValue += "","" + iter2.next();
","protected Map parseHeaders(String headerPart) {
FileItemHeaders headers = getParsedHeaders(headerPart);
Map result = new HashMap();
for (Iterator iter = headers.getHeaderNames(); iter.hasNext(); ) {
String headerName = (String) iter.next();
Iterator iter2 = headers.getHeaders(headerName);
String headerValue = (String) iter2.next();
while (iter2.hasNext()) {
headerValue += "","" + iter2.next();
}
result.put(headerName, headerValue);
}
return result;
}","protected Map parseHeaders(String headerPart) {
FileItemHeaders fileitemheadersVar1 = fileitemheadersLiteral2;
Map mapVar3 = mapLiteral4;
for (Iterator iteratorVar13 = iteratorLiteral14; iteratorVar5.hasNext(); ) {
String stringVar7 = stringLiteral8;
Iterator iteratorVar9 = iteratorLiteral10;
String stringVar11 = stringLiteral12;
while (iteratorVar9.hasNext()) {
stringVar11 += "","" + iteratorVar9.next();
}
mapVar3.put(stringVar7, stringVar11);
}
return mapVar3;
}"
11655,I18N,DM_CONVERT_CASE,FP,fileupload,356,"return (String) headers.get(name.toLowerCase());
","protected final String getHeader(Map headers, String name) {
return (String) headers.get(name.toLowerCase());
}","protected final String getHeader(Map headers, String name) {
return (String) headers.get(name.toLowerCase());
}"
11658,MALICIOUS_CODE,MS_PKGPROTECT,FP,fileupload,359,"protected static final byte[] HEADER_SEPARATOR = { CR, LF, CR, LF };","protected static final byte[] HEADER_SEPARATOR = { CR, LF, CR, LF };",protected static final byte[] byteArrayVar1 = byteArrayLiteral2;
11660,I18N,DM_DEFAULT_ENCODING,FP,fileupload,361,"headers = baos.toString();
","public String readHeaders() throws MalformedStreamException {
int i = 0;
byte b;
ByteArrayOutputStream baos = new ByteArrayOutputStream();
int size = 0;
while (i < HEADER_SEPARATOR.length) {
try {
b = readByte();
} catch (IOException e) {
throw new MalformedStreamException(""Stream ended unexpectedly"");
}
if (++size > HEADER_PART_SIZE_MAX) {
throw new MalformedStreamException(""Header section has more than "" + HEADER_PART_SIZE_MAX + "" bytes (maybe it is not properly terminated)"");
}
if (b == HEADER_SEPARATOR[i]) {
i++;
} else {
i = 0;
}
baos.write(b);
}
String headers = null;
if (headerEncoding != null) {
try {
headers = baos.toString(headerEncoding);
} catch (UnsupportedEncodingException e) {
headers = baos.toString();
}
} else {
headers = baos.toString();
}
return headers;
}","public String readHeaders() throws MalformedStreamException {
int intVar1 = intLiteral2;
byte byteVar3;
ByteArrayOutputStream bytearrayoutputstreamVar4 = bytearrayoutputstreamLiteral5;
int intVar6 = intLiteral2;
while (intVar1 < HEADER_SEPARATOR.length) {
try {
byteVar3 = readByte();
} catch (IOException e) {
throw new MalformedStreamException(""Stream ended unexpectedly"");
}
if (++intVar6 > HEADER_PART_SIZE_MAX) {
throw new MalformedStreamException(""Header section has more than "" + HEADER_PART_SIZE_MAX + "" bytes (maybe it is not properly terminated)"");
}
if (byteVar3 == HEADER_SEPARATOR[intVar1]) {
intVar1++;
} else {
intVar1 = 0;
}
bytearrayoutputstreamVar4.write(byteVar3);
}
String stringVar7 = stringLiteral8;
if (headerEncoding != null) {
try {
stringVar7 = bytearrayoutputstreamVar4.toString(headerEncoding);
} catch (UnsupportedEncodingException e) {
stringVar7 = bytearrayoutputstreamVar4.toString();
}
} else {
stringVar7 = bytearrayoutputstreamVar4.toString();
}
return stringVar7;
}"
11662,BAD_PRACTICE,SR_NOT_CHECKED,FP,fileupload,363,"skip(av);
","public void close(boolean pCloseUnderlying) throws IOException {
if (closed) {
return;
}
if (pCloseUnderlying) {
closed = true;
input.close();
} else {
for (; ; ) {
int av = available();
if (av == 0) {
av = makeAvailable();
if (av == 0) {
break;
}
}
skip(av);
}
}
closed = true;
}","public void close(boolean pCloseUnderlying) throws IOException {
if (closed) {
return;
}
if (pCloseUnderlying) {
closed = true;
input.close();
} else {
for (; ; ) {
int intVar1 = intLiteral2;
if (intVar1 == 0) {
intVar1 = makeAvailable();
if (intVar1 == 0) {
break;
}
}
skip(intVar1);
}
}
closed = true;
}"
11666,BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,fileupload,367,"dfosFile.delete();
","private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
in.defaultReadObject();
OutputStream output = getOutputStream();
if (cachedContent != null) {
output.write(cachedContent);
} else {
FileInputStream input = new FileInputStream(dfosFile);
IOUtils.copy(input, output);
dfosFile.delete();
dfosFile = null;
}
output.close();
cachedContent = null;
}","private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
in.defaultReadObject();
OutputStream outputstreamVar1 = outputstreamLiteral2;
if (cachedContent != null) {
outputstreamVar1.write(cachedContent);
} else {
FileInputStream fileinputstreamVar3 = fileinputstreamLiteral4;
IOUtils.copy(fileinputstreamVar3, outputstreamVar1);
dfosFile.delete();
dfosFile = null;
}
outputstreamVar1.close();
cachedContent = null;
}"
11687,I18N,DM_CONVERT_CASE,FP,fileupload,388,"&&  subContentType.toLowerCase()
","private boolean findNextItem() throws IOException {
if (eof) {
return false;
}
if (currentItem != null) {
currentItem.close();
currentItem = null;
}
for (; ; ) {
boolean nextPart;
if (skipPreamble) {
nextPart = multi.skipPreamble();
} else {
nextPart = multi.readBoundary();
}
if (!nextPart) {
if (currentFieldName == null) {
eof = true;
return false;
}
multi.setBoundary(boundary);
currentFieldName = null;
continue;
}
FileItemHeaders headers = getParsedHeaders(multi.readHeaders());
if (currentFieldName == null) {
String fieldName = getFieldName(headers);
if (fieldName != null) {
String subContentType = headers.getHeader(CONTENT_TYPE);
if (subContentType != null && subContentType.toLowerCase().startsWith(MULTIPART_MIXED)) {
currentFieldName = fieldName;
byte[] subBoundary = getBoundary(subContentType);
multi.setBoundary(subBoundary);
skipPreamble = true;
continue;
}
String fileName = getFileName(headers);
currentItem = new FileItemStreamImpl(fileName, fieldName, headers.getHeader(CONTENT_TYPE), fileName == null, getContentLength(headers));
notifier.noteItem();
itemValid = true;
return true;
}
} else {
String fileName = getFileName(headers);
if (fileName != null) {
currentItem = new FileItemStreamImpl(fileName, currentFieldName, headers.getHeader(CONTENT_TYPE), false, getContentLength(headers));
notifier.noteItem();
itemValid = true;
return true;
}
}
multi.discardBodyData();
}
}","private boolean findNextItem() throws IOException {
if (eof) {
return false;
}
if (currentItem != null) {
currentItem.close();
currentItem = null;
}
for (; ; ) {
boolean booleanVar1;
if (skipPreamble) {
booleanVar1 = multi.skipPreamble();
} else {
booleanVar1 = multi.readBoundary();
}
if (!booleanVar1) {
if (currentFieldName == null) {
eof = true;
return false;
}
multi.setBoundary(boundary);
currentFieldName = null;
continue;
}
FileItemHeaders fileitemheadersVar2 = fileitemheadersLiteral3;
if (currentFieldName == null) {
String stringVar4 = stringLiteral5;
if (stringVar4 != null) {
String stringVar6 = stringLiteral7;
if (stringVar6 != null && stringVar6.toLowerCase().startsWith(MULTIPART_MIXED)) {
currentFieldName = stringVar4;
byte[] byteArrayVar8 = byteArrayLiteral9;
multi.setBoundary(byteArrayVar8);
skipPreamble = true;
continue;
}
String stringVar10 = stringLiteral11;
currentItem = new FileItemStreamImpl(stringVar10, stringVar4, fileitemheadersVar2.getHeader(CONTENT_TYPE), stringVar10 == null, getContentLength(fileitemheadersVar2));
notifier.noteItem();
itemValid = true;
return true;
}
} else {
String stringVar10 = stringLiteral11;
if (stringVar10 != null) {
currentItem = new FileItemStreamImpl(stringVar10, currentFieldName, fileitemheadersVar2.getHeader(CONTENT_TYPE), false, getContentLength(fileitemheadersVar2));
notifier.noteItem();
itemValid = true;
return true;
}
}
multi.discardBodyData();
}
}"
11688,CORRECTNESS,UWF_UNWRITTEN_FIELD,FP,fileupload,389,private boolean opened;,private boolean opened;,private boolean booleanVar1;
11689,I18N,DM_DEFAULT_ENCODING,FP,fileupload,390,"boundary = boundaryStr.getBytes();
","protected byte[] getBoundary(String contentType) {
ParameterParser parser = new ParameterParser();
parser.setLowerCaseNames(true);
Map params = parser.parse(contentType, new char[] { ';', ',' });
String boundaryStr = (String) params.get(""boundary"");
if (boundaryStr == null) {
return null;
}
byte[] boundary;
try {
boundary = boundaryStr.getBytes(""ISO-8859-1"");
} catch (UnsupportedEncodingException e) {
boundary = boundaryStr.getBytes();
}
return boundary;
}","protected byte[] getBoundary(String contentType) {
ParameterParser parameterparserVar1 = parameterparserLiteral2;
parameterparserVar1.setLowerCaseNames(true);
Map mapVar3 = mapLiteral4;
String stringVar5 = stringLiteral6;
if (stringVar5 == null) {
return null;
}
byte[] byteArrayVar7;
try {
byteArrayVar7 = stringVar5.getBytes(""ISO-8859-1"");
} catch (UnsupportedEncodingException e) {
byteArrayVar7 = stringVar5.getBytes();
}
return byteArrayVar7;
}"
11693,BAD_PRACTICE,SR_NOT_CHECKED,FP,fileupload,394,"skip(av);
","public void close(boolean pCloseUnderlying) throws IOException {
if (closed) {
return;
}
if (pCloseUnderlying) {
closed = true;
input.close();
} else {
for (; ; ) {
int av = available();
if (av == 0) {
av = makeAvailable();
if (av == 0) {
break;
}
}
skip(av);
}
}
closed = true;
}","public void close(boolean pCloseUnderlying) throws IOException {
if (closed) {
return;
}
if (pCloseUnderlying) {
closed = true;
input.close();
} else {
for (; ; ) {
int intVar1 = intLiteral2;
if (intVar1 == 0) {
intVar1 = makeAvailable();
if (intVar1 == 0) {
break;
}
}
skip(intVar1);
}
}
closed = true;
}"
11694,MALICIOUS_CODE,MS_PKGPROTECT,FP,fileupload,395,"protected static final byte[] BOUNDARY_PREFIX = { CR, LF, DASH, DASH };","protected static final byte[] BOUNDARY_PREFIX = { CR, LF, DASH, DASH };",protected static final byte[] byteArrayVar1 = byteArrayLiteral2;
11700,BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,fileupload,401,"dfosFile.delete();
","private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
in.defaultReadObject();
OutputStream output = getOutputStream();
if (cachedContent != null) {
output.write(cachedContent);
} else {
FileInputStream input = new FileInputStream(dfosFile);
IOUtils.copy(input, output);
dfosFile.delete();
dfosFile = null;
}
output.close();
cachedContent = null;
}","private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
in.defaultReadObject();
OutputStream outputstreamVar1 = outputstreamLiteral2;
if (cachedContent != null) {
outputstreamVar1.write(cachedContent);
} else {
FileInputStream fileinputstreamVar3 = fileinputstreamLiteral4;
IOUtils.copy(fileinputstreamVar3, outputstreamVar1);
dfosFile.delete();
dfosFile = null;
}
outputstreamVar1.close();
cachedContent = null;
}"
11704,BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,fileupload,405,"outputFile.delete();
","public void delete() {
cachedContent = null;
File outputFile = getStoreLocation();
if (outputFile != null && outputFile.exists()) {
outputFile.delete();
}
}","public void delete() {
cachedContent = null;
File fileVar1 = fileLiteral2;
if (fileVar1 != null && fileVar1.exists()) {
fileVar1.delete();
}
}"
11708,I18N,DM_CONVERT_CASE,FP,fileupload,409,"String nameLower = name.toLowerCase();
","public Iterator getHeaders(String name) {
String nameLower = name.toLowerCase();
List headerValueList = (List) headerNameToValueListMap.get(nameLower);
if (null == headerValueList) {
return Collections.EMPTY_LIST.iterator();
}
return headerValueList.iterator();
}","public Iterator getHeaders(String name) {
String stringVar1 = stringLiteral2;
List listVar3 = listLiteral4;
if (null == listVar3) {
return Collections.EMPTY_LIST.iterator();
}
return listVar3.iterator();
}"
11718,I18N,DM_DEFAULT_ENCODING,FP,fileupload,419,"boundary = boundaryStr.getBytes();
","protected byte[] getBoundary(String contentType) {
ParameterParser parser = new ParameterParser();
parser.setLowerCaseNames(true);
Map params = parser.parse(contentType, ';');
String boundaryStr = (String) params.get(""boundary"");
if (boundaryStr == null) {
return null;
}
byte[] boundary;
try {
boundary = boundaryStr.getBytes(""ISO-8859-1"");
} catch (UnsupportedEncodingException e) {
boundary = boundaryStr.getBytes();
}
return boundary;
}","protected byte[] getBoundary(String contentType) {
ParameterParser parameterparserVar1 = parameterparserLiteral2;
parameterparserVar1.setLowerCaseNames(true);
Map mapVar3 = mapLiteral4;
String stringVar5 = stringLiteral6;
if (stringVar5 == null) {
return null;
}
byte[] byteArrayVar7;
try {
byteArrayVar7 = stringVar5.getBytes(""ISO-8859-1"");
} catch (UnsupportedEncodingException e) {
byteArrayVar7 = stringVar5.getBytes();
}
return byteArrayVar7;
}"
11724,I18N,DM_CONVERT_CASE,FP,fileupload,425,"return (String) headers.get(name.toLowerCase());
","protected final String getHeader(Map headers, String name) {
return (String) headers.get(name.toLowerCase());
}","protected final String getHeader(Map headers, String name) {
return (String) headers.get(name.toLowerCase());
}"
11725,I18N,DM_DEFAULT_ENCODING,FP,fileupload,426,"headers = baos.toString();
","public String readHeaders() throws MalformedStreamException {
int i = 0;
byte[] b = new byte[1];
ByteArrayOutputStream baos = new ByteArrayOutputStream();
int sizeMax = HEADER_PART_SIZE_MAX;
int size = 0;
while (i < HEADER_SEPARATOR.length) {
try {
b[0] = readByte();
} catch (IOException e) {
throw new MalformedStreamException(""Stream ended unexpectedly"");
}
size++;
if (b[0] == HEADER_SEPARATOR[i]) {
i++;
} else {
i = 0;
}
if (size <= sizeMax) {
baos.write(b[0]);
}
}
String headers = null;
if (headerEncoding != null) {
try {
headers = baos.toString(headerEncoding);
} catch (UnsupportedEncodingException e) {
headers = baos.toString();
}
} else {
headers = baos.toString();
}
return headers;
}","public String readHeaders() throws MalformedStreamException {
int intVar1 = intLiteral2;
byte[] byteArrayVar3 = byteArrayLiteral4;
ByteArrayOutputStream bytearrayoutputstreamVar5 = bytearrayoutputstreamLiteral6;
int intVar7 = intLiteral8;
int intVar9 = intLiteral2;
while (intVar1 < HEADER_SEPARATOR.length) {
try {
byteArrayVar3[0] = readByte();
} catch (IOException e) {
throw new MalformedStreamException(""Stream ended unexpectedly"");
}
intVar9++;
if (byteArrayVar3[0] == HEADER_SEPARATOR[intVar1]) {
intVar1++;
} else {
intVar1 = 0;
}
if (intVar9 <= intVar7) {
bytearrayoutputstreamVar5.write(byteArrayVar3[0]);
}
}
String stringVar10 = stringLiteral11;
if (headerEncoding != null) {
try {
stringVar10 = bytearrayoutputstreamVar5.toString(headerEncoding);
} catch (UnsupportedEncodingException e) {
stringVar10 = bytearrayoutputstreamVar5.toString();
}
} else {
stringVar10 = bytearrayoutputstreamVar5.toString();
}
return stringVar10;
}"
11726,BAD_PRACTICE,SR_NOT_CHECKED,FP,fileupload,427,"skip(av);
","public void close() throws IOException {
if (closed) {
return;
}
for (; ; ) {
int av = available();
if (av == 0) {
av = makeAvailable();
if (av == 0) {
break;
}
}
skip(av);
}
closed = true;
}","public void close() throws IOException {
if (closed) {
return;
}
for (; ; ) {
int intVar1 = intLiteral2;
if (intVar1 == 0) {
intVar1 = makeAvailable();
if (intVar1 == 0) {
break;
}
}
skip(intVar1);
}
closed = true;
}"
11732,I18N,DM_CONVERT_CASE,FP,fileupload,433,"paramName = paramName.toLowerCase();
","public Map parse(final char[] chars, int offset, int length, char separator) {
if (chars == null) {
return new HashMap();
}
HashMap params = new HashMap();
this.chars = chars;
this.pos = offset;
this.len = length;
String paramName = null;
String paramValue = null;
while (hasChar()) {
paramName = parseToken(new char[] { '=', separator });
paramValue = null;
if (hasChar() && (chars[pos] == '=')) {
pos++;
paramValue = parseQuotedToken(new char[] { separator });
}
if (hasChar() && (chars[pos] == separator)) {
pos++;
}
if ((paramName != null) && (paramName.length() > 0)) {
if (this.lowerCaseNames) {
paramName = paramName.toLowerCase();
}
params.put(paramName, paramValue);
}
}
return params;
}","public Map parse(final char[] chars, int offset, int length, char separator) {
if (chars == null) {
return new HashMap();
}
HashMap hashmapVar1 = hashmapLiteral2;
this.chars = chars;
this.pos = offset;
this.len = length;
String stringVar3 = stringLiteral4;
String stringVar5 = stringLiteral4;
while (hasChar()) {
stringVar3 = parseToken(new char[] { '=', separator });
stringVar5 = null;
if (hasChar() && (chars[pos] == '=')) {
pos++;
stringVar5 = parseQuotedToken(new char[] { separator });
}
if (hasChar() && (chars[pos] == separator)) {
pos++;
}
if ((stringVar3 != null) && (stringVar3.length() > 0)) {
if (this.lowerCaseNames) {
stringVar3 = stringVar3.toLowerCase();
}
hashmapVar1.put(stringVar3, stringVar5);
}
}
return hashmapVar1;
}"
11746,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,fileupload,447,"this.fileItemFactory = (DefaultFileItemFactory) factory;
","public void setFileItemFactory(FileItemFactory factory) {
this.fileItemFactory = (DefaultFileItemFactory) factory;
}","public void setFileItemFactory(FileItemFactory factory) {
this.fileItemFactory = (DefaultFileItemFactory) factory;
}"
11750,I18N,DM_CONVERT_CASE,FP,fileupload,451,"String cdl = pContentDisposition.toLowerCase();
","private String getFileName(String pContentDisposition) {
String fileName = null;
if (pContentDisposition != null) {
String cdl = pContentDisposition.toLowerCase();
if (cdl.startsWith(FORM_DATA) || cdl.startsWith(ATTACHMENT)) {
ParameterParser parser = new ParameterParser();
parser.setLowerCaseNames(true);
Map params = parser.parse(pContentDisposition, ';');
if (params.containsKey(""filename"")) {
fileName = (String) params.get(""filename"");
if (fileName != null) {
fileName = fileName.trim();
} else {
fileName = """";
}
}
}
}
return fileName;
}","private String getFileName(String pContentDisposition) {
String stringVar1 = stringLiteral2;
if (pContentDisposition != null) {
String stringVar3 = stringLiteral4;
if (stringVar3.startsWith(FORM_DATA) || stringVar3.startsWith(ATTACHMENT)) {
ParameterParser parameterparserVar5 = parameterparserLiteral6;
parameterparserVar5.setLowerCaseNames(true);
Map mapVar7 = mapLiteral8;
if (mapVar7.containsKey(""filename"")) {
stringVar1 = (String) mapVar7.get(""filename"");
if (stringVar1 != null) {
stringVar1 = stringVar1.trim();
} else {
stringVar1 = """";
}
}
}
}
return stringVar1;
}"
11754,PERFORMANCE,SBSC_USE_STRINGBUFFER_CONCATENATION,FP,fileupload,455,"headerValue += "","" + iter2.next();
","protected Map parseHeaders(String headerPart) {
FileItemHeaders headers = getParsedHeaders(headerPart);
Map result = new HashMap();
for (Iterator iter = headers.getHeaderNames(); iter.hasNext(); ) {
String headerName = (String) iter.next();
Iterator iter2 = headers.getHeaders(headerName);
String headerValue = (String) iter2.next();
while (iter2.hasNext()) {
headerValue += "","" + iter2.next();
}
result.put(headerName, headerValue);
}
return result;
}","protected Map parseHeaders(String headerPart) {
FileItemHeaders fileitemheadersVar1 = fileitemheadersLiteral2;
Map mapVar3 = mapLiteral4;
for (Iterator iteratorVar13 = iteratorLiteral14; iteratorVar5.hasNext(); ) {
String stringVar7 = stringLiteral8;
Iterator iteratorVar9 = iteratorLiteral10;
String stringVar11 = stringLiteral12;
while (iteratorVar9.hasNext()) {
stringVar11 += "","" + iteratorVar9.next();
}
mapVar3.put(stringVar7, stringVar11);
}
return mapVar3;
}"
11759,BAD_PRACTICE,SR_NOT_CHECKED,FP,fileupload,460,"skip(av);
","public void close(boolean pCloseUnderlying) throws IOException {
if (closed) {
return;
}
if (pCloseUnderlying) {
closed = true;
input.close();
} else {
for (; ; ) {
int av = available();
if (av == 0) {
av = makeAvailable();
if (av == 0) {
break;
}
}
skip(av);
}
}
closed = true;
}","public void close(boolean pCloseUnderlying) throws IOException {
if (closed) {
return;
}
if (pCloseUnderlying) {
closed = true;
input.close();
} else {
for (; ; ) {
int intVar1 = intLiteral2;
if (intVar1 == 0) {
intVar1 = makeAvailable();
if (intVar1 == 0) {
break;
}
}
skip(intVar1);
}
}
closed = true;
}"
11763,I18N,DM_DEFAULT_ENCODING,FP,fileupload,464,"headers = baos.toString();
","public String readHeaders() throws MalformedStreamException {
int i = 0;
byte b;
ByteArrayOutputStream baos = new ByteArrayOutputStream();
int size = 0;
while (i < HEADER_SEPARATOR.length) {
try {
b = readByte();
} catch (IOException e) {
throw new MalformedStreamException(""Stream ended unexpectedly"");
}
if (++size > HEADER_PART_SIZE_MAX) {
throw new MalformedStreamException(""Header section has more than "" + HEADER_PART_SIZE_MAX + "" bytes (maybe it is not properly terminated)"");
}
if (b == HEADER_SEPARATOR[i]) {
i++;
} else {
i = 0;
}
baos.write(b);
}
String headers = null;
if (headerEncoding != null) {
try {
headers = baos.toString(headerEncoding);
} catch (UnsupportedEncodingException e) {
headers = baos.toString();
}
} else {
headers = baos.toString();
}
return headers;
}","public String readHeaders() throws MalformedStreamException {
int intVar1 = intLiteral2;
byte byteVar3;
ByteArrayOutputStream bytearrayoutputstreamVar4 = bytearrayoutputstreamLiteral5;
int intVar6 = intLiteral2;
while (intVar1 < HEADER_SEPARATOR.length) {
try {
byteVar3 = readByte();
} catch (IOException e) {
throw new MalformedStreamException(""Stream ended unexpectedly"");
}
if (++intVar6 > HEADER_PART_SIZE_MAX) {
throw new MalformedStreamException(""Header section has more than "" + HEADER_PART_SIZE_MAX + "" bytes (maybe it is not properly terminated)"");
}
if (byteVar3 == HEADER_SEPARATOR[intVar1]) {
intVar1++;
} else {
intVar1 = 0;
}
bytearrayoutputstreamVar4.write(byteVar3);
}
String stringVar7 = stringLiteral8;
if (headerEncoding != null) {
try {
stringVar7 = bytearrayoutputstreamVar4.toString(headerEncoding);
} catch (UnsupportedEncodingException e) {
stringVar7 = bytearrayoutputstreamVar4.toString();
}
} else {
stringVar7 = bytearrayoutputstreamVar4.toString();
}
return stringVar7;
}"
11765,CORRECTNESS,NP_NULL_PARAM_DEREF_NONVIRTUAL,FP,fileupload,466,"this(null, null, null);
","public MultipartStream() {
this(null, null, null);
}","public MultipartStream() {
this(null, null, null);
}"
11766,I18N,DM_CONVERT_CASE,FP,fileupload,467,"paramName = paramName.toLowerCase();
","public Map parse(final char[] chars, int offset, int length, char separator) {
if (chars == null) {
return new HashMap();
}
HashMap params = new HashMap();
this.chars = chars;
this.pos = offset;
this.len = length;
String paramName = null;
String paramValue = null;
while (hasChar()) {
paramName = parseToken(new char[] { '=', separator });
paramValue = null;
if (hasChar() && (chars[pos] == '=')) {
pos++;
paramValue = parseQuotedToken(new char[] { separator });
}
if (hasChar() && (chars[pos] == separator)) {
pos++;
}
if ((paramName != null) && (paramName.length() > 0)) {
if (this.lowerCaseNames) {
paramName = paramName.toLowerCase();
}
params.put(paramName, paramValue);
}
}
return params;
}","public Map parse(final char[] chars, int offset, int length, char separator) {
if (chars == null) {
return new HashMap();
}
HashMap hashmapVar1 = hashmapLiteral2;
this.chars = chars;
this.pos = offset;
this.len = length;
String stringVar3 = stringLiteral4;
String stringVar5 = stringLiteral4;
while (hasChar()) {
stringVar3 = parseToken(new char[] { '=', separator });
stringVar5 = null;
if (hasChar() && (chars[pos] == '=')) {
pos++;
stringVar5 = parseQuotedToken(new char[] { separator });
}
if (hasChar() && (chars[pos] == separator)) {
pos++;
}
if ((stringVar3 != null) && (stringVar3.length() > 0)) {
if (this.lowerCaseNames) {
stringVar3 = stringVar3.toLowerCase();
}
hashmapVar1.put(stringVar3, stringVar5);
}
}
return hashmapVar1;
}"
11767,MALICIOUS_CODE,EI_EXPOSE_REP2,FP,fileupload,468,"this.chars = chars;
","public Map parse(final char[] chars, int offset, int length, char separator) {
if (chars == null) {
return new HashMap();
}
HashMap params = new HashMap();
this.chars = chars;
this.pos = offset;
this.len = length;
String paramName = null;
String paramValue = null;
while (hasChar()) {
paramName = parseToken(new char[] { '=', separator });
paramValue = null;
if (hasChar() && (chars[pos] == '=')) {
pos++;
paramValue = parseQuotedToken(new char[] { separator });
}
if (hasChar() && (chars[pos] == separator)) {
pos++;
}
if ((paramName != null) && (paramName.length() > 0)) {
if (this.lowerCaseNames) {
paramName = paramName.toLowerCase();
}
params.put(paramName, paramValue);
}
}
return params;
}","public Map parse(final char[] chars, int offset, int length, char separator) {
if (chars == null) {
return new HashMap();
}
HashMap hashmapVar1 = hashmapLiteral2;
this.chars = chars;
this.pos = offset;
this.len = length;
String stringVar3 = stringLiteral4;
String stringVar5 = stringLiteral4;
while (hasChar()) {
stringVar3 = parseToken(new char[] { '=', separator });
stringVar5 = null;
if (hasChar() && (chars[pos] == '=')) {
pos++;
stringVar5 = parseQuotedToken(new char[] { separator });
}
if (hasChar() && (chars[pos] == separator)) {
pos++;
}
if ((stringVar3 != null) && (stringVar3.length() > 0)) {
if (this.lowerCaseNames) {
stringVar3 = stringVar3.toLowerCase();
}
hashmapVar1.put(stringVar3, stringVar5);
}
}
return hashmapVar1;
}"
11770,MALICIOUS_CODE,EI_EXPOSE_REP,FP,fileupload,471,"return cachedContent;
","public byte[] get() {
if (isInMemory()) {
if (cachedContent == null) {
cachedContent = dfos.getData();
}
return cachedContent;
}
byte[] fileData = new byte[(int) getSize()];
FileInputStream fis = null;
try {
fis = new FileInputStream(dfos.getFile());
fis.read(fileData);
} catch (IOException e) {
fileData = null;
} finally {
if (fis != null) {
try {
fis.close();
} catch (IOException e) {
}
}
}
return fileData;
}","public byte[] get() {
if (isInMemory()) {
if (cachedContent == null) {
cachedContent = dfos.getData();
}
return cachedContent;
}
byte[] byteArrayVar1 = byteArrayLiteral2;
FileInputStream fileinputstreamVar3 = fileinputstreamLiteral4;
try {
fileinputstreamVar3 = new FileInputStream(dfos.getFile());
fileinputstreamVar3.read(byteArrayVar1);
} catch (IOException e) {
byteArrayVar1 = null;
} finally {
if (fileinputstreamVar3 != null) {
try {
fileinputstreamVar3.close();
} catch (IOException e) {
}
}
}
return byteArrayVar1;
}"
11771,I18N,DM_DEFAULT_ENCODING,FP,fileupload,472,"return new String(rawdata);
","public String getString() {
byte[] rawdata = get();
String charset = getCharSet();
if (charset == null) {
charset = DEFAULT_CHARSET;
}
try {
return new String(rawdata, charset);
} catch (UnsupportedEncodingException e) {
return new String(rawdata);
}
}","public String getString() {
byte[] byteArrayVar1 = byteArrayLiteral2;
String stringVar3 = stringLiteral4;
if (stringVar3 == null) {
stringVar3 = DEFAULT_CHARSET;
}
try {
return new String(byteArrayVar1, stringVar3);
} catch (UnsupportedEncodingException e) {
return new String(byteArrayVar1);
}
}"
11772,BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,fileupload,473,"dfosFile.delete();
","private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
in.defaultReadObject();
OutputStream output = getOutputStream();
if (cachedContent != null) {
output.write(cachedContent);
} else {
FileInputStream input = new FileInputStream(dfosFile);
IOUtils.copy(input, output);
dfosFile.delete();
dfosFile = null;
}
output.close();
cachedContent = null;
}","private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
in.defaultReadObject();
OutputStream outputstreamVar1 = outputstreamLiteral2;
if (cachedContent != null) {
outputstreamVar1.write(cachedContent);
} else {
FileInputStream fileinputstreamVar3 = fileinputstreamLiteral4;
IOUtils.copy(fileinputstreamVar3, outputstreamVar1);
dfosFile.delete();
dfosFile = null;
}
outputstreamVar1.close();
cachedContent = null;
}"
11781,PERFORMANCE,SBSC_USE_STRINGBUFFER_CONCATENATION,FP,fileupload,482,"end = parseEndOfLine(headerPart, nonWs);
","protected FileItemHeaders getParsedHeaders(String headerPart) {
final int len = headerPart.length();
FileItemHeadersImpl headers = newFileItemHeaders();
int start = 0;
for (; ; ) {
int end = parseEndOfLine(headerPart, start);
if (start == end) {
break;
}
String header = headerPart.substring(start, end);
start = end + 2;
while (start < len) {
int nonWs = start;
while (nonWs < len) {
char c = headerPart.charAt(nonWs);
if (c != ' ' && c != '\t') {
break;
}
++nonWs;
}
if (nonWs == start) {
break;
}
end = parseEndOfLine(headerPart, nonWs);
header += "" "" + headerPart.substring(nonWs, end);
start = end + 2;
}
parseHeaderLine(headers, header);
}
return headers;
}","protected FileItemHeaders getParsedHeaders(String headerPart) {
final int intVar1 = intLiteral2;
FileItemHeadersImpl fileitemheadersimplVar3 = fileitemheadersimplLiteral4;
int intVar5 = intLiteral6;
for (; ; ) {
int intVar7 = intLiteral8;
if (intVar5 == intVar7) {
break;
}
String stringVar9 = stringLiteral10;
intVar5 = intVar7 + 2;
while (intVar5 < intVar1) {
int intVar11 = intLiteral12;
while (intVar11 < intVar1) {
char charVar13 = charLiteral14;
if (charVar13 != ' ' && charVar13 != '\t') {
break;
}
++intVar11;
}
if (intVar11 == intVar5) {
break;
}
intVar7 = parseEndOfLine(headerPart, intVar11);
stringVar9 += "" "" + headerPart.substring(intVar11, intVar7);
intVar5 = intVar7 + 2;
}
parseHeaderLine(fileitemheadersimplVar3, stringVar9);
}
return fileitemheadersimplVar3;
}"
11784,I18N,DM_CONVERT_CASE,FP,fileupload,485,"while (iter2.hasNext()) {
","protected Map parseHeaders(String headerPart) {
FileItemHeaders headers = getParsedHeaders(headerPart);
Map result = new HashMap();
for (Iterator iter = headers.getHeaderNames(); iter.hasNext(); ) {
String headerName = (String) iter.next();
Iterator iter2 = headers.getHeaders(headerName);
String headerValue = (String) iter2.next();
while (iter2.hasNext()) {
headerValue += "","" + iter2.next();
}
result.put(headerName, headerValue);
}
return result;
}","protected Map parseHeaders(String headerPart) {
FileItemHeaders fileitemheadersVar1 = fileitemheadersLiteral2;
Map mapVar3 = mapLiteral4;
for (Iterator iteratorVar13 = iteratorLiteral14; iteratorVar5.hasNext(); ) {
String stringVar7 = stringLiteral8;
Iterator iteratorVar9 = iteratorLiteral10;
String stringVar11 = stringLiteral12;
while (iteratorVar9.hasNext()) {
stringVar11 += "","" + iteratorVar9.next();
}
mapVar3.put(stringVar7, stringVar11);
}
return mapVar3;
}"
11789,I18N,DM_CONVERT_CASE,FP,fileupload,490,"if (contentType.toLowerCase().startsWith(MULTIPART)) {
","public static final boolean isMultipartContent(RequestContext ctx) {
String contentType = ctx.getContentType();
if (contentType == null) {
return false;
}
if (contentType.toLowerCase().startsWith(MULTIPART)) {
return true;
}
return false;
}","public static final boolean isMultipartContent(RequestContext ctx) {
String stringVar1 = stringLiteral2;
if (stringVar1 == null) {
return false;
}
if (stringVar1.toLowerCase().startsWith(MULTIPART)) {
return true;
}
return false;
}"
11798,BAD_PRACTICE,SR_NOT_CHECKED,FP,fileupload,499,"av = makeAvailable();
","public void close(boolean pCloseUnderlying) throws IOException {
if (closed) {
return;
}
if (pCloseUnderlying) {
closed = true;
input.close();
} else {
for (; ; ) {
int av = available();
if (av == 0) {
av = makeAvailable();
if (av == 0) {
break;
}
}
skip(av);
}
}
closed = true;
}","public void close(boolean pCloseUnderlying) throws IOException {
if (closed) {
return;
}
if (pCloseUnderlying) {
closed = true;
input.close();
} else {
for (; ; ) {
int intVar1 = intLiteral2;
if (intVar1 == 0) {
intVar1 = makeAvailable();
if (intVar1 == 0) {
break;
}
}
skip(intVar1);
}
}
closed = true;
}"
11806,I18N,DM_DEFAULT_ENCODING,FP,fileupload,507,"return new String(rawdata);
","public String getString() {
byte[] rawdata = get();
String charset = getCharSet();
if (charset == null) {
charset = DEFAULT_CHARSET;
}
try {
return new String(rawdata, charset);
} catch (UnsupportedEncodingException e) {
return new String(rawdata);
}
}","public String getString() {
byte[] byteArrayVar1 = byteArrayLiteral2;
String stringVar3 = stringLiteral4;
if (stringVar3 == null) {
stringVar3 = DEFAULT_CHARSET;
}
try {
return new String(byteArrayVar1, stringVar3);
} catch (UnsupportedEncodingException e) {
return new String(byteArrayVar1);
}
}"
11807,BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,fileupload,508,"IOUtils.copy(input, output);
","private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
in.defaultReadObject();
OutputStream output = getOutputStream();
if (cachedContent != null) {
output.write(cachedContent);
} else {
FileInputStream input = new FileInputStream(dfosFile);
IOUtils.copy(input, output);
dfosFile.delete();
dfosFile = null;
}
output.close();
cachedContent = null;
}","private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
in.defaultReadObject();
OutputStream outputstreamVar1 = outputstreamLiteral2;
if (cachedContent != null) {
outputstreamVar1.write(cachedContent);
} else {
FileInputStream fileinputstreamVar3 = fileinputstreamLiteral4;
IOUtils.copy(fileinputstreamVar3, outputstreamVar1);
dfosFile.delete();
dfosFile = null;
}
outputstreamVar1.close();
cachedContent = null;
}"
11811,I18N,DM_CONVERT_CASE,FP,fileupload,512,"}
","public synchronized void addHeader(String name, String value) {
String nameLower = name.toLowerCase();
List headerValueList = (List) headerNameToValueListMap.get(nameLower);
if (null == headerValueList) {
headerValueList = new ArrayList();
headerNameToValueListMap.put(nameLower, headerValueList);
headerNameList.add(nameLower);
}
headerValueList.add(value);
}","public synchronized void addHeader(String name, String value) {
String stringVar1 = stringLiteral2;
List listVar3 = listLiteral4;
if (null == listVar3) {
listVar3 = new ArrayList();
headerNameToValueListMap.put(stringVar1, listVar3);
headerNameList.add(stringVar1);
}
listVar3.add(value);
}"
11815,PERFORMANCE,SBSC_USE_STRINGBUFFER_CONCATENATION,FP,fileupload,516,"header += "" "" + headerPart.substring(nonWs, end);
","protected FileItemHeaders getParsedHeaders(String headerPart) {
final int len = headerPart.length();
FileItemHeadersImpl headers = newFileItemHeaders();
int start = 0;
for (; ; ) {
int end = parseEndOfLine(headerPart, start);
if (start == end) {
break;
}
String header = headerPart.substring(start, end);
start = end + 2;
while (start < len) {
int nonWs = start;
while (nonWs < len) {
char c = headerPart.charAt(nonWs);
if (c != ' ' && c != '\t') {
break;
}
++nonWs;
}
if (nonWs == start) {
break;
}
end = parseEndOfLine(headerPart, nonWs);
header += "" "" + headerPart.substring(nonWs, end);
start = end + 2;
}
parseHeaderLine(headers, header);
}
return headers;
}","protected FileItemHeaders getParsedHeaders(String headerPart) {
final int intVar1 = intLiteral2;
FileItemHeadersImpl fileitemheadersimplVar3 = fileitemheadersimplLiteral4;
int intVar5 = intLiteral6;
for (; ; ) {
int intVar7 = intLiteral8;
if (intVar5 == intVar7) {
break;
}
String stringVar9 = stringLiteral10;
intVar5 = intVar7 + 2;
while (intVar5 < intVar1) {
int intVar11 = intLiteral12;
while (intVar11 < intVar1) {
char charVar13 = charLiteral14;
if (charVar13 != ' ' && charVar13 != '\t') {
break;
}
++intVar11;
}
if (intVar11 == intVar5) {
break;
}
intVar7 = parseEndOfLine(headerPart, intVar11);
stringVar9 += "" "" + headerPart.substring(intVar11, intVar7);
intVar5 = intVar7 + 2;
}
parseHeaderLine(fileitemheadersimplVar3, stringVar9);
}
return fileitemheadersimplVar3;
}"
11832,BAD_PRACTICE,SR_NOT_CHECKED,FP,fileupload,533,"skip(av);
","public void close(boolean pCloseUnderlying) throws IOException {
if (closed) {
return;
}
if (pCloseUnderlying) {
closed = true;
input.close();
} else {
for (; ; ) {
int av = available();
if (av == 0) {
av = makeAvailable();
if (av == 0) {
break;
}
}
skip(av);
}
}
closed = true;
}","public void close(boolean pCloseUnderlying) throws IOException {
if (closed) {
return;
}
if (pCloseUnderlying) {
closed = true;
input.close();
} else {
for (; ; ) {
int intVar1 = intLiteral2;
if (intVar1 == 0) {
intVar1 = makeAvailable();
if (intVar1 == 0) {
break;
}
}
skip(intVar1);
}
}
closed = true;
}"
11837,BAD_PRACTICE,RR_NOT_CHECKED,FP,fileupload,538,"fis.read(fileData);
","public byte[] get() {
if (isInMemory()) {
if (cachedContent == null) {
cachedContent = dfos.getData();
}
return cachedContent;
}
byte[] fileData = new byte[(int) getSize()];
FileInputStream fis = null;
try {
fis = new FileInputStream(dfos.getFile());
fis.read(fileData);
} catch (IOException e) {
fileData = null;
} finally {
if (fis != null) {
try {
fis.close();
} catch (IOException e) {
}
}
}
return fileData;
}","public byte[] get() {
if (isInMemory()) {
if (cachedContent == null) {
cachedContent = dfos.getData();
}
return cachedContent;
}
byte[] byteArrayVar1 = byteArrayLiteral2;
FileInputStream fileinputstreamVar3 = fileinputstreamLiteral4;
try {
fileinputstreamVar3 = new FileInputStream(dfos.getFile());
fileinputstreamVar3.read(byteArrayVar1);
} catch (IOException e) {
byteArrayVar1 = null;
} finally {
if (fileinputstreamVar3 != null) {
try {
fileinputstreamVar3.close();
} catch (IOException e) {
}
}
}
return byteArrayVar1;
}"
11838,BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,fileupload,539,"outputFile.delete();
","protected void finalize() {
File outputFile = dfos.getFile();
if (outputFile != null && outputFile.exists()) {
outputFile.delete();
}
}","protected void finalize() {
File fileVar1 = fileLiteral2;
if (fileVar1 != null && fileVar1.exists()) {
fileVar1.delete();
}
}"
11840,I18N,DM_DEFAULT_ENCODING,FP,fileupload,541,"return new String(rawdata);
","public String getString() {
byte[] rawdata = get();
String charset = getCharSet();
if (charset == null) {
charset = DEFAULT_CHARSET;
}
try {
return new String(rawdata, charset);
} catch (UnsupportedEncodingException e) {
return new String(rawdata);
}
}","public String getString() {
byte[] byteArrayVar1 = byteArrayLiteral2;
String stringVar3 = stringLiteral4;
if (stringVar3 == null) {
stringVar3 = DEFAULT_CHARSET;
}
try {
return new String(byteArrayVar1, stringVar3);
} catch (UnsupportedEncodingException e) {
return new String(byteArrayVar1);
}
}"
11844,I18N,DM_CONVERT_CASE,FP,fileupload,545,"String nameLower = name.toLowerCase();
","public Iterator getHeaders(String name) {
String nameLower = name.toLowerCase();
List headerValueList = (List) headerNameToValueListMap.get(nameLower);
if (null == headerValueList) {
return Collections.EMPTY_LIST.iterator();
}
return headerValueList.iterator();
}","public Iterator getHeaders(String name) {
String stringVar1 = stringLiteral2;
List listVar3 = listLiteral4;
if (null == listVar3) {
return Collections.EMPTY_LIST.iterator();
}
return listVar3.iterator();
}"
11849,I18N,DM_CONVERT_CASE,FP,fileupload,550,"return (String) headers.get(name.toLowerCase());
","protected final String getHeader(Map headers, String name) {
return (String) headers.get(name.toLowerCase());
}","protected final String getHeader(Map headers, String name) {
return (String) headers.get(name.toLowerCase());
}"
11853,I18N,DM_DEFAULT_ENCODING,FP,fileupload,554,"boundary = boundaryStr.getBytes();
","protected byte[] getBoundary(String contentType) {
ParameterParser parser = new ParameterParser();
parser.setLowerCaseNames(true);
Map params = parser.parse(contentType, new char[] { ';', ',' });
String boundaryStr = (String) params.get(""boundary"");
if (boundaryStr == null) {
return null;
}
byte[] boundary;
try {
boundary = boundaryStr.getBytes(""ISO-8859-1"");
} catch (UnsupportedEncodingException e) {
boundary = boundaryStr.getBytes();
}
return boundary;
}","protected byte[] getBoundary(String contentType) {
ParameterParser parameterparserVar1 = parameterparserLiteral2;
parameterparserVar1.setLowerCaseNames(true);
Map mapVar3 = mapLiteral4;
String stringVar5 = stringLiteral6;
if (stringVar5 == null) {
return null;
}
byte[] byteArrayVar7;
try {
byteArrayVar7 = stringVar5.getBytes(""ISO-8859-1"");
} catch (UnsupportedEncodingException e) {
byteArrayVar7 = stringVar5.getBytes();
}
return byteArrayVar7;
}"
11855,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,fileupload,556,"return null;
","protected byte[] getBoundary(String contentType) {
ParameterParser parser = new ParameterParser();
parser.setLowerCaseNames(true);
Map params = parser.parse(contentType, new char[] { ';', ',' });
String boundaryStr = (String) params.get(""boundary"");
if (boundaryStr == null) {
return null;
}
byte[] boundary;
try {
boundary = boundaryStr.getBytes(""ISO-8859-1"");
} catch (UnsupportedEncodingException e) {
boundary = boundaryStr.getBytes();
}
return boundary;
}","protected byte[] getBoundary(String contentType) {
ParameterParser parameterparserVar1 = parameterparserLiteral2;
parameterparserVar1.setLowerCaseNames(true);
Map mapVar3 = mapLiteral4;
String stringVar5 = stringLiteral6;
if (stringVar5 == null) {
return null;
}
byte[] byteArrayVar7;
try {
byteArrayVar7 = stringVar5.getBytes(""ISO-8859-1"");
} catch (UnsupportedEncodingException e) {
byteArrayVar7 = stringVar5.getBytes();
}
return byteArrayVar7;
}"
11865,MALICIOUS_CODE,MS_PKGPROTECT,FP,fileupload,566,"protected static final byte[] HEADER_SEPARATOR = { CR, LF, CR, LF };","protected static final byte[] HEADER_SEPARATOR = { CR, LF, CR, LF };",protected static final byte[] byteArrayVar1 = byteArrayLiteral2;
11870,BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,fileupload,571,"dfosFile.delete();
","private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
in.defaultReadObject();
OutputStream output = getOutputStream();
if (cachedContent != null) {
output.write(cachedContent);
} else {
FileInputStream input = new FileInputStream(dfosFile);
IOUtils.copy(input, output);
dfosFile.delete();
dfosFile = null;
}
output.close();
cachedContent = null;
}","private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
in.defaultReadObject();
OutputStream outputstreamVar1 = outputstreamLiteral2;
if (cachedContent != null) {
outputstreamVar1.write(cachedContent);
} else {
FileInputStream fileinputstreamVar3 = fileinputstreamLiteral4;
IOUtils.copy(fileinputstreamVar3, outputstreamVar1);
dfosFile.delete();
dfosFile = null;
}
outputstreamVar1.close();
cachedContent = null;
}"
11874,BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,fileupload,575,"outputFile.delete();
","public void delete() {
cachedContent = null;
File outputFile = getStoreLocation();
if (outputFile != null && outputFile.exists()) {
outputFile.delete();
}
}","public void delete() {
cachedContent = null;
File fileVar1 = fileLiteral2;
if (fileVar1 != null && fileVar1.exists()) {
fileVar1.delete();
}
}"
11878,I18N,DM_CONVERT_CASE,FP,fileupload,579,"String nameLower = name.toLowerCase();
","public String getHeader(String name) {
String nameLower = name.toLowerCase();
List headerValueList = (List) headerNameToValueListMap.get(nameLower);
if (null == headerValueList) {
return null;
}
return (String) headerValueList.get(0);
}","public String getHeader(String name) {
String stringVar1 = stringLiteral2;
List listVar3 = listLiteral4;
if (null == listVar3) {
return null;
}
return (String) listVar3.get(0);
}"
11879,I18N,DM_CONVERT_CASE,FP,fileupload,580,"String nameLower = name.toLowerCase();
","public Iterator getHeaders(String name) {
String nameLower = name.toLowerCase();
List headerValueList = (List) headerNameToValueListMap.get(nameLower);
if (null == headerValueList) {
return Collections.EMPTY_LIST.iterator();
}
return headerValueList.iterator();
}","public Iterator getHeaders(String name) {
String stringVar1 = stringLiteral2;
List listVar3 = listLiteral4;
if (null == listVar3) {
return Collections.EMPTY_LIST.iterator();
}
return listVar3.iterator();
}"
11884,DODGY_CODE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,FP,fileupload,585,"throw (FileUploadException) e.getCause();
","public FileItemIterator getItemIterator(RequestContext ctx) throws FileUploadException, IOException {
try {
return new FileItemIteratorImpl(this, ctx);
} catch (FileUploadIOException e) {
throw (FileUploadException) e.getCause();
}
}","public FileItemIterator getItemIterator(RequestContext ctx) throws FileUploadException, IOException {
try {
return new FileItemIteratorImpl(this, ctx);
} catch (FileUploadIOException e) {
throw (FileUploadException) e.getCause();
}
}"
11894,I18N,DM_DEFAULT_ENCODING,FP,fileupload,595,"return new String(rawdata);
","@Override
public String getString() {
byte[] rawdata = get();
String charset = getCharSet();
if (charset == null) {
charset = defaultCharset;
}
try {
return new String(rawdata, charset);
} catch (UnsupportedEncodingException e) {
return new String(rawdata);
}
}","@Override
public String getString() {
byte[] byteArrayVar1 = byteArrayLiteral2;
String stringVar3 = stringLiteral4;
if (stringVar3 == null) {
stringVar3 = defaultCharset;
}
try {
return new String(byteArrayVar1, stringVar3);
} catch (UnsupportedEncodingException e) {
return new String(byteArrayVar1);
}
}"
11897,BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,fileupload,598,"outputFile.delete();
","@Override
protected void finalize() throws Throwable {
if (dfos == null || dfos.isInMemory()) {
return;
}
File outputFile = dfos.getFile();
if (outputFile != null && outputFile.exists()) {
outputFile.delete();
}
super.finalize();
}","@Override
protected void finalize() throws Throwable {
if (dfos == null || dfos.isInMemory()) {
return;
}
File fileVar1 = fileLiteral2;
if (fileVar1 != null && fileVar1.exists()) {
fileVar1.delete();
}
super.finalize();
}"
11901,CORRECTNESS,NM_WRONG_PACKAGE,FP,fileupload,602,"return parseRequest(new JakSrvltRequestContext(request));
","public List<FileItem> parseRequest(HttpServletRequest request) throws FileUploadException {
return parseRequest(new JakSrvltRequestContext(request));
}","public List<FileItem> parseRequest(HttpServletRequest request) throws FileUploadException {
return parseRequest(new JakSrvltRequestContext(request));
}"
11932,DODGY_CODE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,FP,fileupload,633,"throw (FileUploadException) e.getCause();
","public List parseRequest(RequestContext ctx) throws FileUploadException {
try {
FileItemIterator iter = getItemIterator(ctx);
List items = new ArrayList();
FileItemFactory fac = getFileItemFactory();
final byte[] buffer = new byte[8192];
while (iter.hasNext()) {
FileItemStream item = iter.next();
FileItem fileItem = fac.createItem(item.getFieldName(), item.getContentType(), item.isFormField(), item.getName());
try {
Streams.copy(item.openStream(), fileItem.getOutputStream(), true, buffer);
} catch (FileUploadIOException e) {
throw (FileUploadException) e.getCause();
} catch (IOException e) {
throw new IOFileUploadException(""Processing of "" + MULTIPART_FORM_DATA + "" request failed. "" + e.getMessage(), e);
}
items.add(fileItem);
}
return items;
} catch (FileUploadIOException e) {
throw (FileUploadException) e.getCause();
} catch (IOException e) {
throw new FileUploadException(e.getMessage(), e);
}
}","public List parseRequest(RequestContext ctx) throws FileUploadException {
try {
FileItemIterator fileitemiteratorVar1 = fileitemiteratorLiteral2;
List listVar3 = listLiteral4;
FileItemFactory fileitemfactoryVar5 = fileitemfactoryLiteral6;
final byte[] byteArrayVar7 = byteArrayLiteral8;
while (fileitemiteratorVar1.hasNext()) {
FileItemStream fileitemstreamVar9 = fileitemstreamLiteral10;
FileItem fileitemVar11 = fileitemLiteral12;
try {
Streams.copy(fileitemstreamVar9.openStream(), fileitemVar11.getOutputStream(), true, byteArrayVar7);
} catch (FileUploadIOException e) {
throw (FileUploadException) e.getCause();
} catch (IOException e) {
throw new IOFileUploadException(""Processing of "" + MULTIPART_FORM_DATA + "" request failed. "" + e.getMessage(), e);
}
listVar3.add(fileitemVar11);
}
return listVar3;
} catch (FileUploadIOException e) {
throw (FileUploadException) e.getCause();
} catch (IOException e) {
throw new FileUploadException(e.getMessage(), e);
}
}"
11936,I18N,DM_DEFAULT_ENCODING,FP,fileupload,637,"boundary = boundaryStr.getBytes();
","protected byte[] getBoundary(String contentType) {
ParameterParser parser = new ParameterParser();
parser.setLowerCaseNames(true);
Map params = parser.parse(contentType, ';');
String boundaryStr = (String) params.get(""boundary"");
if (boundaryStr == null) {
return null;
}
byte[] boundary;
try {
boundary = boundaryStr.getBytes(""ISO-8859-1"");
} catch (UnsupportedEncodingException e) {
boundary = boundaryStr.getBytes();
}
return boundary;
}","protected byte[] getBoundary(String contentType) {
ParameterParser parameterparserVar1 = parameterparserLiteral2;
parameterparserVar1.setLowerCaseNames(true);
Map mapVar3 = mapLiteral4;
String stringVar5 = stringLiteral6;
if (stringVar5 == null) {
return null;
}
byte[] byteArrayVar7;
try {
byteArrayVar7 = stringVar5.getBytes(""ISO-8859-1"");
} catch (UnsupportedEncodingException e) {
byteArrayVar7 = stringVar5.getBytes();
}
return byteArrayVar7;
}"
11951,I18N,DM_DEFAULT_ENCODING,FP,fileupload,652,"return baos.toString();
","public String asString(InputStream pStream) throws IOException {
ByteArrayOutputStream baos = new ByteArrayOutputStream();
copy(pStream, baos, true);
return baos.toString();
}","public String asString(InputStream pStream) throws IOException {
ByteArrayOutputStream bytearrayoutputstreamVar1 = bytearrayoutputstreamLiteral2;
copy(pStream, bytearrayoutputstreamVar1, true);
return bytearrayoutputstreamVar1.toString();
}"
11954,DODGY_CODE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,FP,fileupload,655,"throw (FileUploadException) e.getCause();
","public boolean hasNext() throws FileUploadException, IOException {
if (eof) {
return false;
}
if (itemValid) {
return true;
}
try {
return findNextItem();
} catch (FileUploadIOException e) {
throw (FileUploadException) e.getCause();
}
}","public boolean hasNext() throws FileUploadException, IOException {
if (eof) {
return false;
}
if (itemValid) {
return true;
}
try {
return findNextItem();
} catch (FileUploadIOException e) {
throw (FileUploadException) e.getCause();
}
}"
11958,I18N,DM_DEFAULT_ENCODING,FP,fileupload,659,"boundary = boundaryStr.getBytes(); 
","protected byte[] getBoundary(String contentType) {
ParameterParser parser = new ParameterParser();
parser.setLowerCaseNames(true);
Map<String, String> params = parser.parse(contentType, new char[] { ';', ',' });
String boundaryStr = params.get(""boundary"");
if (boundaryStr == null) {
return null;
}
byte[] boundary;
try {
boundary = boundaryStr.getBytes(""ISO-8859-1"");
} catch (UnsupportedEncodingException e) {
boundary = boundaryStr.getBytes();
}
return boundary;
}","protected byte[] getBoundary(String contentType) {
ParameterParser parameterparserVar1 = parameterparserLiteral2;
parameterparserVar1.setLowerCaseNames(true);
Map<String, String> map<string,string>Var3 = map<string,string>Literal4;
String stringVar5 = stringLiteral6;
if (stringVar5 == null) {
return null;
}
byte[] byteArrayVar7;
try {
byteArrayVar7 = stringVar5.getBytes(""ISO-8859-1"");
} catch (UnsupportedEncodingException e) {
byteArrayVar7 = stringVar5.getBytes();
}
return byteArrayVar7;
}"
11960,MALICIOUS_CODE,MS_PKGPROTECT,FP,fileupload,661,"protected static final byte[] HEADER_SEPARATOR = { CR, LF, CR, LF };","protected static final byte[] HEADER_SEPARATOR = { CR, LF, CR, LF };",protected static final byte[] byteArrayVar1 = byteArrayLiteral2;
11966,MALICIOUS_CODE,EI_EXPOSE_REP2,FP,fileupload,667,"this.chars = chars;
","public Map<String, String> parse(final char[] chars, int offset, int length, char separator) {
if (chars == null) {
return new HashMap<String, String>();
}
HashMap<String, String> params = new HashMap<String, String>();
this.chars = chars;
this.pos = offset;
this.len = length;
String paramName = null;
String paramValue = null;
while (hasChar()) {
paramName = parseToken(new char[] { '=', separator });
paramValue = null;
if (hasChar() && (chars[pos] == '=')) {
pos++;
paramValue = parseQuotedToken(new char[] { separator });
if (paramValue != null) {
try {
paramValue = MimeUtility.decodeText(paramValue);
} catch (UnsupportedEncodingException e) {
}
}
}
if (hasChar() && (chars[pos] == separator)) {
pos++;
}
if ((paramName != null) && (paramName.length() > 0)) {
if (this.lowerCaseNames) {
paramName = paramName.toLowerCase(Locale.ENGLISH);
}
params.put(paramName, paramValue);
}
}
return params;
}","public Map<String, String> parse(final char[] chars, int offset, int length, char separator) {
if (chars == null) {
return new HashMap<String, String>();
}
HashMap<String, String> hashmap<string,string>Var1 = hashmap<string,string>Literal2;
this.chars = chars;
this.pos = offset;
this.len = length;
String stringVar3 = stringLiteral4;
String stringVar5 = stringLiteral4;
while (hasChar()) {
stringVar3 = parseToken(new char[] { '=', separator });
stringVar5 = null;
if (hasChar() && (chars[pos] == '=')) {
pos++;
stringVar5 = parseQuotedToken(new char[] { separator });
if (stringVar5 != null) {
try {
stringVar5 = MimeUtility.decodeText(stringVar5);
} catch (UnsupportedEncodingException e) {
}
}
}
if (hasChar() && (chars[pos] == separator)) {
pos++;
}
if ((stringVar3 != null) && (stringVar3.length() > 0)) {
if (this.lowerCaseNames) {
stringVar3 = stringVar3.toLowerCase(Locale.ENGLISH);
}
hashmap<string,string>Var1.put(stringVar3, stringVar5);
}
}
return hashmap<string,string>Var1;
}"
11983,MALICIOUS_CODE,MS_PKGPROTECT,FP,fileupload,684,"protected static final byte[] STREAM_TERMINATOR = { DASH, DASH };","protected static final byte[] STREAM_TERMINATOR = { DASH, DASH };",protected static final byte[] byteArrayVar1 = byteArrayLiteral2;
11987,BAD_PRACTICE,SR_NOT_CHECKED,FP,fileupload,688,"skip(av);
","public void close(boolean pCloseUnderlying) throws IOException {
if (closed) {
return;
}
if (pCloseUnderlying) {
closed = true;
input.close();
} else {
for (; ; ) {
int av = available();
if (av == 0) {
av = makeAvailable();
if (av == 0) {
break;
}
}
skip(av);
}
}
closed = true;
}","public void close(boolean pCloseUnderlying) throws IOException {
if (closed) {
return;
}
if (pCloseUnderlying) {
closed = true;
input.close();
} else {
for (; ; ) {
int intVar1 = intLiteral2;
if (intVar1 == 0) {
intVar1 = makeAvailable();
if (intVar1 == 0) {
break;
}
}
skip(intVar1);
}
}
closed = true;
}"
11993,MALICIOUS_CODE,EI_EXPOSE_REP,FP,fileupload,694,"return cachedContent;
","public byte[] get() {
if (isInMemory()) {
if (cachedContent == null) {
cachedContent = dfos.getData();
}
return cachedContent;
}
byte[] fileData = new byte[(int) getSize()];
InputStream fis = null;
try {
fis = new BufferedInputStream(new FileInputStream(dfos.getFile()));
fis.read(fileData);
} catch (IOException e) {
fileData = null;
} finally {
if (fis != null) {
try {
fis.close();
} catch (IOException e) {
}
}
}
return fileData;
}","public byte[] get() {
if (isInMemory()) {
if (cachedContent == null) {
cachedContent = dfos.getData();
}
return cachedContent;
}
byte[] byteArrayVar1 = byteArrayLiteral2;
InputStream inputstreamVar3 = inputstreamLiteral4;
try {
inputstreamVar3 = new BufferedInputStream(new FileInputStream(dfos.getFile()));
inputstreamVar3.read(byteArrayVar1);
} catch (IOException e) {
byteArrayVar1 = null;
} finally {
if (inputstreamVar3 != null) {
try {
inputstreamVar3.close();
} catch (IOException e) {
}
}
}
return byteArrayVar1;
}"
11994,BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,fileupload,695,"dfosFile.delete();
","private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
in.defaultReadObject();
if (repository != null) {
if (repository.isDirectory()) {
if (repository.getPath().contains(""\0"")) {
throw new IOException(format(""The repository [%s] contains a null character"", repository.getPath()));
}
} else {
throw new IOException(format(""The repository [%s] is not a directory"", repository.getAbsolutePath()));
}
}
OutputStream output = getOutputStream();
if (cachedContent != null) {
output.write(cachedContent);
} else {
FileInputStream input = new FileInputStream(dfosFile);
IOUtils.copy(input, output);
dfosFile.delete();
dfosFile = null;
}
output.close();
cachedContent = null;
}","private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
in.defaultReadObject();
if (repository != null) {
if (repository.isDirectory()) {
if (repository.getPath().contains(""\0"")) {
throw new IOException(format(""The repository [%s] contains a null character"", repository.getPath()));
}
} else {
throw new IOException(format(""The repository [%s] is not a directory"", repository.getAbsolutePath()));
}
}
OutputStream outputstreamVar1 = outputstreamLiteral2;
if (cachedContent != null) {
outputstreamVar1.write(cachedContent);
} else {
FileInputStream fileinputstreamVar3 = fileinputstreamLiteral4;
IOUtils.copy(fileinputstreamVar3, outputstreamVar1);
dfosFile.delete();
dfosFile = null;
}
outputstreamVar1.close();
cachedContent = null;
}"
11995,I18N,DM_DEFAULT_ENCODING,FP,fileupload,696,"return baos.toString();
","public static String asString(InputStream inputStream) throws IOException {
ByteArrayOutputStream baos = new ByteArrayOutputStream();
copy(inputStream, baos, true);
return baos.toString();
}","public static String asString(InputStream inputStream) throws IOException {
ByteArrayOutputStream bytearrayoutputstreamVar1 = bytearrayoutputstreamLiteral2;
copy(inputStream, bytearrayoutputstreamVar1, true);
return bytearrayoutputstreamVar1.toString();
}"
12002,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,fileupload,703,"return null;
","protected byte[] getBoundary(String contentType) {
ParameterParser parser = new ParameterParser();
parser.setLowerCaseNames(true);
Map<String, String> params = parser.parse(contentType, new char[] { ';', ',' });
String boundaryStr = params.get(""boundary"");
if (boundaryStr == null) {
return null;
}
byte[] boundary;
try {
boundary = boundaryStr.getBytes(""ISO-8859-1"");
} catch (UnsupportedEncodingException e) {
boundary = boundaryStr.getBytes();
}
return boundary;
}","protected byte[] getBoundary(String contentType) {
ParameterParser parameterparserVar1 = parameterparserLiteral2;
parameterparserVar1.setLowerCaseNames(true);
Map<String, String> map<string,string>Var3 = map<string,string>Literal4;
String stringVar5 = stringLiteral6;
if (stringVar5 == null) {
return null;
}
byte[] byteArrayVar7;
try {
byteArrayVar7 = stringVar5.getBytes(""ISO-8859-1"");
} catch (UnsupportedEncodingException e) {
byteArrayVar7 = stringVar5.getBytes();
}
return byteArrayVar7;
}"
12011,BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,fileupload,712,"dfosFile.delete();
","private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
if (!Boolean.getBoolean(SERIALIZABLE_PROPERTY)) {
throw new IllegalStateException(""Property "" + SERIALIZABLE_PROPERTY + "" is not true, rejecting to deserialize a DiskFileItem."");
}
in.defaultReadObject();
if (repository != null) {
if (repository.isDirectory()) {
if (repository.getPath().contains(""\0"")) {
throw new IOException(format(""The repository [%s] contains a null character"", repository.getPath()));
}
} else {
throw new IOException(format(""The repository [%s] is not a directory"", repository.getAbsolutePath()));
}
}
OutputStream output = getOutputStream();
if (cachedContent != null) {
output.write(cachedContent);
} else {
FileInputStream input = new FileInputStream(dfosFile);
IOUtils.copy(input, output);
dfosFile.delete();
dfosFile = null;
}
output.close();
cachedContent = null;
}","private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
if (!Boolean.getBoolean(SERIALIZABLE_PROPERTY)) {
throw new IllegalStateException(""Property "" + SERIALIZABLE_PROPERTY + "" is not true, rejecting to deserialize a DiskFileItem."");
}
in.defaultReadObject();
if (repository != null) {
if (repository.isDirectory()) {
if (repository.getPath().contains(""\0"")) {
throw new IOException(format(""The repository [%s] contains a null character"", repository.getPath()));
}
} else {
throw new IOException(format(""The repository [%s] is not a directory"", repository.getAbsolutePath()));
}
}
OutputStream outputstreamVar1 = outputstreamLiteral2;
if (cachedContent != null) {
outputstreamVar1.write(cachedContent);
} else {
FileInputStream fileinputstreamVar3 = fileinputstreamLiteral4;
IOUtils.copy(fileinputstreamVar3, outputstreamVar1);
dfosFile.delete();
dfosFile = null;
}
outputstreamVar1.close();
cachedContent = null;
}"
12016,I18N,DM_DEFAULT_ENCODING,FP,fileupload,717,"return new String(rawdata);
","public String getString() {
byte[] rawdata = get();
String charset = getCharSet();
if (charset == null) {
charset = DEFAULT_CHARSET;
}
try {
return new String(rawdata, charset);
} catch (UnsupportedEncodingException e) {
return new String(rawdata);
}
}","public String getString() {
byte[] byteArrayVar1 = byteArrayLiteral2;
String stringVar3 = stringLiteral4;
if (stringVar3 == null) {
stringVar3 = DEFAULT_CHARSET;
}
try {
return new String(byteArrayVar1, stringVar3);
} catch (UnsupportedEncodingException e) {
return new String(byteArrayVar1);
}
}"
12032,MALICIOUS_CODE,EI_EXPOSE_REP2,FP,fileupload,733,"this.chars = charArray;
","public Map<String, String> parse(final char[] charArray, int offset, int length, char separator) {
if (charArray == null) {
return new HashMap<String, String>();
}
HashMap<String, String> params = new HashMap<String, String>();
this.chars = charArray;
this.pos = offset;
this.len = length;
String paramName = null;
String paramValue = null;
while (hasChar()) {
paramName = parseToken(new char[] { '=', separator });
paramValue = null;
if (hasChar() && (charArray[pos] == '=')) {
pos++;
paramValue = parseQuotedToken(new char[] { separator });
if (paramValue != null) {
try {
paramValue = MimeUtility.decodeText(paramValue);
} catch (UnsupportedEncodingException e) {
}
}
}
if (hasChar() && (charArray[pos] == separator)) {
pos++;
}
if ((paramName != null) && (paramName.length() > 0)) {
if (this.lowerCaseNames) {
paramName = paramName.toLowerCase(Locale.ENGLISH);
}
params.put(paramName, paramValue);
}
}
return params;
}","public Map<String, String> parse(final char[] charArray, int offset, int length, char separator) {
if (charArray == null) {
return new HashMap<String, String>();
}
HashMap<String, String> hashmap<string,string>Var1 = hashmap<string,string>Literal2;
this.chars = charArray;
this.pos = offset;
this.len = length;
String stringVar3 = stringLiteral4;
String stringVar5 = stringLiteral4;
while (hasChar()) {
stringVar3 = parseToken(new char[] { '=', separator });
stringVar5 = null;
if (hasChar() && (charArray[pos] == '=')) {
pos++;
stringVar5 = parseQuotedToken(new char[] { separator });
if (stringVar5 != null) {
try {
stringVar5 = MimeUtility.decodeText(stringVar5);
} catch (UnsupportedEncodingException e) {
}
}
}
if (hasChar() && (charArray[pos] == separator)) {
pos++;
}
if ((stringVar3 != null) && (stringVar3.length() > 0)) {
if (this.lowerCaseNames) {
stringVar3 = stringVar3.toLowerCase(Locale.ENGLISH);
}
hashmap<string,string>Var1.put(stringVar3, stringVar5);
}
}
return hashmap<string,string>Var1;
}"
12037,BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,fileupload,738,"outputFile.delete();
","public void delete() {
cachedContent = null;
File outputFile = getStoreLocation();
if (outputFile != null && outputFile.exists()) {
outputFile.delete();
}
}","public void delete() {
cachedContent = null;
File fileVar1 = fileLiteral2;
if (fileVar1 != null && fileVar1.exists()) {
fileVar1.delete();
}
}"
12040,I18N,DM_CONVERT_CASE,FP,fileupload,741,"String charset = word.substring(2, charsetPos).toLowerCase();
","private static String decodeWord(String word) throws ParseException, UnsupportedEncodingException {
if (!word.startsWith(ENCODED_TOKEN_MARKER)) {
throw new ParseException(""Invalid RFC 2047 encoded-word: "" + word);
}
int charsetPos = word.indexOf('?', 2);
if (charsetPos == -1) {
throw new ParseException(""Missing charset in RFC 2047 encoded-word: "" + word);
}
String charset = word.substring(2, charsetPos).toLowerCase();
int encodingPos = word.indexOf('?', charsetPos + 1);
if (encodingPos == -1) {
throw new ParseException(""Missing encoding in RFC 2047 encoded-word: "" + word);
}
String encoding = word.substring(charsetPos + 1, encodingPos);
int encodedTextPos = word.indexOf(ENCODED_TOKEN_FINISHER, encodingPos + 1);
if (encodedTextPos == -1) {
throw new ParseException(""Missing encoded text in RFC 2047 encoded-word: "" + word);
}
String encodedText = word.substring(encodingPos + 1, encodedTextPos);
if (encodedText.length() == 0) {
return """";
}
try {
ByteArrayOutputStream out = new ByteArrayOutputStream(encodedText.length());
byte[] encodedData = encodedText.getBytes(US_ASCII_CHARSET);
if (encoding.equals(BASE64_ENCODING_MARKER)) {
Base64Decoder.decode(encodedData, out);
} else if (encoding.equals(QUOTEDPRINTABLE_ENCODING_MARKER)) {
QuotedPrintableDecoder.decode(encodedData, out);
} else {
throw new UnsupportedEncodingException(""Unknown RFC 2047 encoding: "" + encoding);
}
byte[] decodedData = out.toByteArray();
return new String(decodedData, javaCharset(charset));
} catch (IOException e) {
throw new UnsupportedEncodingException(""Invalid RFC 2047 encoding"");
}
}","private static String decodeWord(String word) throws ParseException, UnsupportedEncodingException {
if (!word.startsWith(ENCODED_TOKEN_MARKER)) {
throw new ParseException(""Invalid RFC 2047 encoded-word: "" + word);
}
int intVar1 = intLiteral2;
if (intVar1 == -1) {
throw new ParseException(""Missing charset in RFC 2047 encoded-word: "" + word);
}
String stringVar3 = stringLiteral4;
int intVar5 = intLiteral6;
if (intVar5 == -1) {
throw new ParseException(""Missing encoding in RFC 2047 encoded-word: "" + word);
}
String stringVar7 = stringLiteral8;
int intVar9 = intLiteral10;
if (intVar9 == -1) {
throw new ParseException(""Missing encoded text in RFC 2047 encoded-word: "" + word);
}
String stringVar11 = stringLiteral12;
if (stringVar11.length() == 0) {
return """";
}
try {
ByteArrayOutputStream bytearrayoutputstreamVar13 = bytearrayoutputstreamLiteral14;
byte[] byteArrayVar15 = byteArrayLiteral16;
if (stringVar7.equals(BASE64_ENCODING_MARKER)) {
Base64Decoder.decode(byteArrayVar15, bytearrayoutputstreamVar13);
} else if (stringVar7.equals(QUOTEDPRINTABLE_ENCODING_MARKER)) {
QuotedPrintableDecoder.decode(byteArrayVar15, bytearrayoutputstreamVar13);
} else {
throw new UnsupportedEncodingException(""Unknown RFC 2047 encoding: "" + stringVar7);
}
byte[] byteArrayVar17 = byteArrayLiteral18;
return new String(byteArrayVar17, javaCharset(stringVar3));
} catch (IOException e) {
throw new UnsupportedEncodingException(""Invalid RFC 2047 encoding"");
}
}"
12041,DODGY_CODE,UUF_UNUSED_PUBLIC_OR_PROTECTED_FIELD,FP,mavendp,1,protected List reactorProjects;,protected List reactorProjects;,protected List listVar1;
12043,DODGY_CODE,UWF_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD,FP,mavendp,3,protected MavenProject project;,protected MavenProject project;,protected MavenProject mavenprojectVar1;
12050,DODGY_CODE,NP_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD,FP,mavendp,10,"MavenProject pomProject = mavenProjectBuilder.buildFromRepository( pomArtifact, this.remoteRepos, this.getLocal() );
","protected Set resolveArtifactDependencies(Artifact artifact) throws ArtifactResolutionException, ArtifactNotFoundException, ProjectBuildingException, InvalidDependencyVersionException {
Artifact pomArtifact = this.factory.createArtifact(artifact.getGroupId(), artifact.getArtifactId(), artifact.getVersion(), """", ""pom"");
MavenProject pomProject = mavenProjectBuilder.buildFromRepository(pomArtifact, this.remoteRepos, this.getLocal());
return resolveDependencyArtifacts(pomProject);
}","protected Set resolveArtifactDependencies(Artifact artifact) throws ArtifactResolutionException, ArtifactNotFoundException, ProjectBuildingException, InvalidDependencyVersionException {
Artifact artifactVar1 = artifactLiteral2;
MavenProject mavenprojectVar3 = mavenprojectLiteral4;
return resolveDependencyArtifacts(mavenprojectVar3);
}"
12053,DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,mavendp,13,"DependencyManagement depMgt = project.getDependencyManagement();
","private boolean checkDependencyManagement() throws MojoExecutionException {
boolean foundError = false;
getLog().info(""Found Resolved Dependency / DependencyManagement mismatches:"");
List depMgtDependencies = null;
DependencyManagement depMgt = project.getDependencyManagement();
if (depMgt != null) {
depMgtDependencies = depMgt.getDependencies();
}
if (depMgtDependencies != null && !depMgtDependencies.isEmpty()) {
Map depMgtMap = new HashMap();
Map exclusions = new HashMap();
Iterator iter = depMgtDependencies.iterator();
while (iter.hasNext()) {
Dependency depMgtDependency = (Dependency) iter.next();
depMgtMap.put(depMgtDependency.getManagementKey(), depMgtDependency);
exclusions.putAll(addExclusions(depMgtDependency.getExclusions()));
}
Set allDependencyArtifacts = new HashSet(project.getArtifacts());
if (this.ignoreDirect) {
getLog().info(""\tIgnoring Direct Dependencies."");
Set directDependencies = project.getDependencyArtifacts();
allDependencyArtifacts.removeAll(directDependencies);
}
List exclusionErrors = getExclusionErrors(exclusions, allDependencyArtifacts);
Iterator exclusionIter = exclusionErrors.iterator();
while (exclusionIter.hasNext()) {
Artifact exclusion = (Artifact) exclusionIter.next();
getLog().info(StringUtils.stripEnd(getArtifactManagementKey(exclusion), "":"") + "" was excluded in DepMgt, but version "" + exclusion.getVersion() + "" has been found in the dependency tree."");
foundError = true;
}
Map mismatch = getMismatch(depMgtMap, allDependencyArtifacts);
Iterator mismatchIter = mismatch.keySet().iterator();
while (mismatchIter.hasNext()) {
Artifact resolvedArtifact = (Artifact) mismatchIter.next();
Dependency depMgtDependency = (Dependency) mismatch.get(resolvedArtifact);
logMismatch(resolvedArtifact, depMgtDependency);
}
if (!foundError) {
getLog().info(""   None"");
}
} else {
getLog().info(""   Nothing in DepMgt."");
}
return foundError;
}","private boolean checkDependencyManagement() throws MojoExecutionException {
boolean booleanVar1 = booleanLiteral2;
getLog().info(""Found Resolved Dependency / DependencyManagement mismatches:"");
List listVar3 = listLiteral4;
DependencyManagement dependencymanagementVar5 = dependencymanagementLiteral6;
if (dependencymanagementVar5 != null) {
listVar3 = dependencymanagementVar5.getDependencies();
}
if (listVar3 != null && !listVar3.isEmpty()) {
Map mapVar7 = mapLiteral8;
Map mapVar9 = mapLiteral8;
Iterator iteratorVar10 = iteratorLiteral11;
while (iteratorVar10.hasNext()) {
Dependency dependencyVar12 = dependencyLiteral13;
mapVar7.put(dependencyVar12.getManagementKey(), dependencyVar12);
mapVar9.putAll(addExclusions(dependencyVar12.getExclusions()));
}
Set setVar14 = setLiteral15;
if (this.ignoreDirect) {
getLog().info(""\tIgnoring Direct Dependencies."");
Set setVar16 = setLiteral17;
setVar14.removeAll(setVar16);
}
List listVar18 = listLiteral19;
Iterator iteratorVar20 = iteratorLiteral21;
while (iteratorVar20.hasNext()) {
Artifact artifactVar22 = artifactLiteral23;
getLog().info(StringUtils.stripEnd(getArtifactManagementKey(artifactVar22), "":"") + "" was excluded in DepMgt, but version "" + artifactVar22.getVersion() + "" has been found in the dependency tree."");
booleanVar1 = true;
}
Map mapVar24 = mapLiteral25;
Iterator iteratorVar26 = iteratorLiteral27;
while (iteratorVar26.hasNext()) {
Artifact artifactVar28 = artifactLiteral29;
Dependency dependencyVar12 = dependencyLiteral30;
logMismatch(artifactVar28, dependencyVar12);
}
if (!booleanVar1) {
getLog().info(""   None"");
}
} else {
getLog().info(""   Nothing in DepMgt."");
}
return booleanVar1;
}"
12056,CORRECTNESS,UWF_UNWRITTEN_FIELD,FP,mavendp,16,private MavenProject project;,private MavenProject project;,private MavenProject mavenprojectVar1;
12058,CORRECTNESS,UWF_UNWRITTEN_FIELD,FP,mavendp,18,private Renderer siteRenderer;,private Renderer siteRenderer;,private Renderer rendererVar1;
12070,BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,mavendp,30,"out.getParentFile().mkdirs();
","private void storeClasspathFile(String cpString, File out) throws MojoExecutionException {
out.getParentFile().mkdirs();
try {
Writer w = new BufferedWriter(new FileWriter(out));
try {
w.write(cpString);
getLog().info(""Wrote classpath file '"" + out + ""'."");
} catch (IOException ex) {
throw new MojoExecutionException(""Error while writting to classpath file '"" + out + ""': "" + ex.toString(), ex);
} finally {
w.close();
}
} catch (IOException ex) {
throw new MojoExecutionException(""Error while opening/closing classpath file '"" + out + ""': "" + ex.toString(), ex);
}
}","private void storeClasspathFile(String cpString, File out) throws MojoExecutionException {
out.getParentFile().mkdirs();
try {
Writer writerVar1 = writerLiteral2;
try {
writerVar1.write(cpString);
getLog().info(""Wrote classpath file '"" + out + ""'."");
} catch (IOException ex) {
throw new MojoExecutionException(""Error while writting to classpath file '"" + out + ""': "" + ex.toString(), ex);
} finally {
writerVar1.close();
}
} catch (IOException ex) {
throw new MojoExecutionException(""Error while opening/closing classpath file '"" + out + ""': "" + ex.toString(), ex);
}
}"
12074,CORRECTNESS,UWF_UNWRITTEN_FIELD,FP,mavendp,34,private MavenProjectHelper projectHelper;,private MavenProjectHelper projectHelper;,private MavenProjectHelper mavenprojecthelperVar1;
12076,DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,FP,mavendp,36,"else if ( arg1 == null )
","public int compare(Object arg1, Object arg2) {
if (arg1 instanceof Artifact && arg2 instanceof Artifact) {
if (arg1 == arg2) {
return 0;
} else if (arg1 == null) {
return -1;
} else if (arg2 == null) {
return +1;
}
Artifact art1 = (Artifact) arg1;
Artifact art2 = (Artifact) arg2;
String s1 = art1.getGroupId() + art1.getArtifactId() + art1.getVersion();
String s2 = art2.getGroupId() + art2.getArtifactId() + art2.getVersion();
return s1.compareTo(s2);
} else {
return 0;
}
}","public int compare(Object arg1, Object arg2) {
if (arg1 instanceof Artifact && arg2 instanceof Artifact) {
if (arg1 == arg2) {
return 0;
} else if (arg1 == null) {
return -1;
} else if (arg2 == null) {
return +1;
}
Artifact artifactVar1 = artifactLiteral2;
Artifact artifactVar3 = artifactLiteral4;
String stringVar5 = stringLiteral6;
String stringVar7 = stringLiteral8;
return stringVar5.compareTo(stringVar7);
} else {
return 0;
}
}"
12077,CORRECTNESS,UWF_UNWRITTEN_FIELD,FP,mavendp,37,boolean outputFilterFile;,boolean outputFilterFile;,boolean booleanVar1;
12083,DODGY_CODE,NP_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD,FP,mavendp,43,"installer.install( artifact.getFile(), baseArtifact, targetRepository );
","private void installBaseSnapshot(Artifact artifact, ArtifactRepository targetRepository) throws ArtifactInstallationException {
if (artifact.isSnapshot() && !artifact.getBaseVersion().equals(artifact.getVersion())) {
Artifact baseArtifact = this.factory.createArtifact(artifact.getGroupId(), artifact.getArtifactId(), artifact.getBaseVersion(), artifact.getScope(), artifact.getType());
installer.install(artifact.getFile(), baseArtifact, targetRepository);
}
}","private void installBaseSnapshot(Artifact artifact, ArtifactRepository targetRepository) throws ArtifactInstallationException {
if (artifact.isSnapshot() && !artifact.getBaseVersion().equals(artifact.getVersion())) {
Artifact artifactVar1 = artifactLiteral2;
installer.install(artifact.getFile(), artifactVar1, targetRepository);
}
}"
12084,DODGY_CODE,NP_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD,FP,mavendp,44,"ArtifactRepository targetRepository = repositoryFactory.createDeploymentArtifactRepository(
","public void execute() throws MojoExecutionException {
DependencyStatusSets dss = getDependencySets(this.failOnMissingClassifierArtifact);
Set artifacts = dss.getResolvedDependencies();
if (!useRepositoryLayout) {
for (Iterator i = artifacts.iterator(); i.hasNext(); ) {
copyArtifact((Artifact) i.next(), this.stripVersion);
}
} else {
try {
ArtifactRepository targetRepository = repositoryFactory.createDeploymentArtifactRepository(""local"", outputDirectory.toURL().toExternalForm(), (ArtifactRepositoryLayout) repositoryLayouts.get(""default""), false);
for (Iterator i = artifacts.iterator(); i.hasNext(); ) {
installArtifact((Artifact) i.next(), targetRepository);
}
} catch (MalformedURLException e) {
throw new MojoExecutionException(""Could not create outputDirectory repository"", e);
}
}
Set skippedArtifacts = dss.getSkippedDependencies();
for (Iterator i = skippedArtifacts.iterator(); i.hasNext(); ) {
Artifact artifact = (Artifact) i.next();
getLog().info(artifact.getFile().getName() + "" already exists in destination."");
}
if (isCopyPom()) {
copyPoms(getOutputDirectory(), artifacts, this.stripVersion);
copyPoms(getOutputDirectory(), skippedArtifacts, this.stripVersion);
}
}","public void execute() throws MojoExecutionException {
DependencyStatusSets dependencystatussetsVar1 = dependencystatussetsLiteral2;
Set setVar3 = setLiteral4;
if (!useRepositoryLayout) {
for (Iterator iteratorVar14 = iteratorLiteral15; iteratorVar5.hasNext(); ) {
copyArtifact((Artifact) iteratorVar5.next(), this.stripVersion);
}
} else {
try {
ArtifactRepository artifactrepositoryVar7 = artifactrepositoryLiteral8;
for (Iterator iteratorVar14 = iteratorLiteral15; iteratorVar5.hasNext(); ) {
installArtifact((Artifact) iteratorVar5.next(), artifactrepositoryVar7);
}
} catch (MalformedURLException e) {
throw new MojoExecutionException(""Could not create outputDirectory repository"", e);
}
}
Set setVar9 = setLiteral10;
for (Iterator iteratorVar14 = iteratorLiteral16; iteratorVar5.hasNext(); ) {
Artifact artifactVar12 = artifactLiteral13;
getLog().info(artifactVar12.getFile().getName() + "" already exists in destination."");
}
if (isCopyPom()) {
copyPoms(getOutputDirectory(), setVar3, this.stripVersion);
copyPoms(getOutputDirectory(), setVar9, this.stripVersion);
}
}"
12085,DODGY_CODE,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,FP,mavendp,45,"if ( parent.list().length < 2 )
","private File findDeleteTarget(Artifact artifact) {
File deleteTarget = artifact.getFile();
if (GROUP_ID_FUZZINESS.equals(resolutionFuzziness)) {
deleteTarget = deleteTarget.getParentFile().getParentFile();
deleteTarget = deleteTarget.getParentFile();
String[] path = localRepository.pathOf(artifact).split(""\\/"");
int groupParts = path.length - 4;
File parent = deleteTarget.getParentFile();
int count = 0;
while (count++ < groupParts) {
if (parent.list().length < 2) {
deleteTarget = parent;
parent = deleteTarget.getParentFile();
} else {
break;
}
}
} else if (ARTIFACT_ID_FUZZINESS.equals(resolutionFuzziness)) {
deleteTarget = deleteTarget.getParentFile().getParentFile();
} else if (VERSION_FUZZINESS.equals(resolutionFuzziness)) {
deleteTarget = deleteTarget.getParentFile();
}
return deleteTarget;
}","private File findDeleteTarget(Artifact artifact) {
File fileVar1 = fileLiteral2;
if (GROUP_ID_FUZZINESS.equals(resolutionFuzziness)) {
fileVar1 = fileVar1.getParentFile().getParentFile();
fileVar1 = fileVar1.getParentFile();
String[] stringArrayVar3 = stringArrayLiteral4;
int intVar5 = intLiteral6;
File fileVar7 = fileLiteral8;
int intVar9 = intLiteral10;
while (intVar9++ < intVar5) {
if (fileVar7.list().length < 2) {
fileVar1 = fileVar7;
fileVar7 = fileVar1.getParentFile();
} else {
break;
}
}
} else if (ARTIFACT_ID_FUZZINESS.equals(resolutionFuzziness)) {
fileVar1 = fileVar1.getParentFile().getParentFile();
} else if (VERSION_FUZZINESS.equals(resolutionFuzziness)) {
fileVar1 = fileVar1.getParentFile();
}
return fileVar1;
}"
12095,I18N,DM_DEFAULT_ENCODING,FP,mavendp,55,"outputWriter = new FileWriter( outputFile );
","public void execute() throws MojoExecutionException {
Writer outputWriter = null;
try {
Set plugins = resolvePluginArtifacts();
if (this.outputFile != null) {
outputFile.getParentFile().mkdirs();
outputWriter = new FileWriter(outputFile);
}
for (Iterator i = plugins.iterator(); i.hasNext(); ) {
Artifact plugin = (Artifact) i.next();
String logStr = ""Plugin Resolved: "" + DependencyUtil.getFormattedFileName(plugin, false);
if (!silent) {
this.getLog().info(logStr);
}
if (outputWriter != null) {
outputWriter.write(logStr);
outputWriter.write(""\n"");
}
if (!excludeTransitive) {
Set transitiveDependencies = this.resolveArtifactDependencies(plugin);
for (Iterator transIter = transitiveDependencies.iterator(); transIter.hasNext(); ) {
logStr = ""    Plugin Dependency Resolved: "" + DependencyUtil.getFormattedFileName((Artifact) transIter.next(), false);
if (!silent) {
this.getLog().info(logStr);
}
if (outputWriter != null) {
outputWriter.write(logStr);
outputWriter.write(""\n"");
}
}
}
}
} catch (IOException e) {
throw new MojoExecutionException(""Nested:"", e);
} catch (ArtifactResolutionException e) {
throw new MojoExecutionException(""Nested:"", e);
} catch (ArtifactNotFoundException e) {
throw new MojoExecutionException(""Nested:"", e);
} catch (ProjectBuildingException e) {
throw new MojoExecutionException(""Nested:"", e);
} catch (InvalidDependencyVersionException e) {
throw new MojoExecutionException(""Nested:"", e);
} finally {
IOUtil.close(outputWriter);
}
}","public void execute() throws MojoExecutionException {
Writer writerVar1 = writerLiteral2;
try {
Set setVar3 = setLiteral4;
if (this.outputFile != null) {
outputFile.getParentFile().mkdirs();
writerVar1 = new FileWriter(outputFile);
}
for (Iterator iteratorVar15 = iteratorLiteral16; iteratorVar5.hasNext(); ) {
Artifact artifactVar7 = artifactLiteral8;
String stringVar9 = stringLiteral10;
if (!silent) {
this.getLog().info(stringVar9);
}
if (writerVar1 != null) {
writerVar1.write(stringVar9);
writerVar1.write(""\n"");
}
if (!excludeTransitive) {
Set setVar11 = setLiteral12;
for (Iterator iteratorVar17 = iteratorLiteral18; iteratorVar13.hasNext(); ) {
stringVar9 = ""    Plugin Dependency Resolved: "" + DependencyUtil.getFormattedFileName((Artifact) iteratorVar13.next(), false);
if (!silent) {
this.getLog().info(stringVar9);
}
if (writerVar1 != null) {
writerVar1.write(stringVar9);
writerVar1.write(""\n"");
}
}
}
}
} catch (IOException e) {
throw new MojoExecutionException(""Nested:"", e);
} catch (ArtifactResolutionException e) {
throw new MojoExecutionException(""Nested:"", e);
} catch (ArtifactNotFoundException e) {
throw new MojoExecutionException(""Nested:"", e);
} catch (ProjectBuildingException e) {
throw new MojoExecutionException(""Nested:"", e);
} catch (InvalidDependencyVersionException e) {
throw new MojoExecutionException(""Nested:"", e);
} finally {
IOUtil.close(writerVar1);
}
}"
12096,BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,mavendp,56,"outputFile.getParentFile().mkdirs();
","public void execute() throws MojoExecutionException {
Writer outputWriter = null;
try {
Set plugins = resolvePluginArtifacts();
if (this.outputFile != null) {
outputFile.getParentFile().mkdirs();
outputWriter = new FileWriter(outputFile);
}
for (Iterator i = plugins.iterator(); i.hasNext(); ) {
Artifact plugin = (Artifact) i.next();
String logStr = ""Plugin Resolved: "" + DependencyUtil.getFormattedFileName(plugin, false);
if (!silent) {
this.getLog().info(logStr);
}
if (outputWriter != null) {
outputWriter.write(logStr);
outputWriter.write(""\n"");
}
if (!excludeTransitive) {
Set transitiveDependencies = this.resolveArtifactDependencies(plugin);
for (Iterator transIter = transitiveDependencies.iterator(); transIter.hasNext(); ) {
logStr = ""    Plugin Dependency Resolved: "" + DependencyUtil.getFormattedFileName((Artifact) transIter.next(), false);
if (!silent) {
this.getLog().info(logStr);
}
if (outputWriter != null) {
outputWriter.write(logStr);
outputWriter.write(""\n"");
}
}
}
}
} catch (IOException e) {
throw new MojoExecutionException(""Nested:"", e);
} catch (ArtifactResolutionException e) {
throw new MojoExecutionException(""Nested:"", e);
} catch (ArtifactNotFoundException e) {
throw new MojoExecutionException(""Nested:"", e);
} catch (ProjectBuildingException e) {
throw new MojoExecutionException(""Nested:"", e);
} catch (InvalidDependencyVersionException e) {
throw new MojoExecutionException(""Nested:"", e);
} finally {
IOUtil.close(outputWriter);
}
}","public void execute() throws MojoExecutionException {
Writer writerVar1 = writerLiteral2;
try {
Set setVar3 = setLiteral4;
if (this.outputFile != null) {
outputFile.getParentFile().mkdirs();
writerVar1 = new FileWriter(outputFile);
}
for (Iterator iteratorVar15 = iteratorLiteral16; iteratorVar5.hasNext(); ) {
Artifact artifactVar7 = artifactLiteral8;
String stringVar9 = stringLiteral10;
if (!silent) {
this.getLog().info(stringVar9);
}
if (writerVar1 != null) {
writerVar1.write(stringVar9);
writerVar1.write(""\n"");
}
if (!excludeTransitive) {
Set setVar11 = setLiteral12;
for (Iterator iteratorVar17 = iteratorLiteral18; iteratorVar13.hasNext(); ) {
stringVar9 = ""    Plugin Dependency Resolved: "" + DependencyUtil.getFormattedFileName((Artifact) iteratorVar13.next(), false);
if (!silent) {
this.getLog().info(stringVar9);
}
if (writerVar1 != null) {
writerVar1.write(stringVar9);
writerVar1.write(""\n"");
}
}
}
}
} catch (IOException e) {
throw new MojoExecutionException(""Nested:"", e);
} catch (ArtifactResolutionException e) {
throw new MojoExecutionException(""Nested:"", e);
} catch (ArtifactNotFoundException e) {
throw new MojoExecutionException(""Nested:"", e);
} catch (ProjectBuildingException e) {
throw new MojoExecutionException(""Nested:"", e);
} catch (InvalidDependencyVersionException e) {
throw new MojoExecutionException(""Nested:"", e);
} finally {
IOUtil.close(writerVar1);
}
}"
12102,BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,mavendp,62,"marker.createNewFile();
","public void setMarker() throws MojoExecutionException {
File marker = getMarkerFile();
File clearMarker = getMarkerFile(!this.resolved);
try {
marker.getParentFile().mkdirs();
} catch (NullPointerException e) {
}
try {
marker.createNewFile();
if (clearMarker.exists()) {
clearMarker.delete();
}
} catch (IOException e) {
throw new MojoExecutionException(""Unable to create Marker: "" + marker.getAbsolutePath(), e);
}
}","public void setMarker() throws MojoExecutionException {
File fileVar1 = fileLiteral2;
File fileVar3 = fileLiteral4;
try {
fileVar1.getParentFile().mkdirs();
} catch (NullPointerException e) {
}
try {
fileVar1.createNewFile();
if (fileVar3.exists()) {
fileVar3.delete();
}
} catch (IOException e) {
throw new MojoExecutionException(""Unable to create Marker: "" + fileVar1.getAbsolutePath(), e);
}
}"
12138,DODGY_CODE,UUF_UNUSED_PUBLIC_OR_PROTECTED_FIELD,FP,mavendp,98,protected List<MavenProject> reactorProjects;,protected List<MavenProject> reactorProjects;,protected List<MavenProject> list<mavenproject>Var1;
12140,DODGY_CODE,UWF_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD,FP,mavendp,100,protected MavenProject project;,protected MavenProject project;,protected MavenProject mavenprojectVar1;
12151,CORRECTNESS,UWF_UNWRITTEN_FIELD,FP,mavendp,111,private File cpFile;,private File cpFile;,private File fileVar1;
12161,CORRECTNESS,UWF_UNWRITTEN_FIELD,FP,mavendp,121,private MavenProjectHelper projectHelper;,private MavenProjectHelper projectHelper;,private MavenProjectHelper mavenprojecthelperVar1;
12165,DODGY_CODE,NP_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD,FP,mavendp,125,"installer.install( artifact.getFile(), artifact, targetRepository );
","private void installArtifact(Artifact artifact, ArtifactRepository targetRepository) {
try {
if (""pom"".equals(artifact.getType())) {
installer.install(artifact.getFile(), artifact, targetRepository);
installBaseSnapshot(artifact, targetRepository);
} else {
installer.install(artifact.getFile(), artifact, targetRepository);
installBaseSnapshot(artifact, targetRepository);
if (isCopyPom()) {
Artifact pomArtifact = getResolvedPomArtifact(artifact);
if (pomArtifact.getFile() != null && pomArtifact.getFile().exists()) {
installer.install(pomArtifact.getFile(), pomArtifact, targetRepository);
installBaseSnapshot(pomArtifact, targetRepository);
}
}
}
} catch (ArtifactInstallationException e) {
getLog().info(e.getMessage());
}
}","private void installArtifact(Artifact artifact, ArtifactRepository targetRepository) {
try {
if (""pom"".equals(artifact.getType())) {
installer.install(artifact.getFile(), artifact, targetRepository);
installBaseSnapshot(artifact, targetRepository);
} else {
installer.install(artifact.getFile(), artifact, targetRepository);
installBaseSnapshot(artifact, targetRepository);
if (isCopyPom()) {
Artifact artifactVar1 = artifactLiteral2;
if (artifactVar1.getFile() != null && artifactVar1.getFile().exists()) {
installer.install(artifactVar1.getFile(), artifactVar1, targetRepository);
installBaseSnapshot(artifactVar1, targetRepository);
}
}
}
} catch (ArtifactInstallationException e) {
getLog().info(e.getMessage());
}
}"
12167,CORRECTNESS,UWF_UNWRITTEN_FIELD,FP,mavendp,127,"private Map<String, ArtifactRepositoryLayout> repositoryLayouts;","private Map<String, ArtifactRepositoryLayout> repositoryLayouts;","private Map<String, ArtifactRepositoryLayout> map<string,artifactrepositorylayout>Var1;"
12169,DODGY_CODE,UWF_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD,FP,mavendp,129,protected MavenProject project;,protected MavenProject project;,protected MavenProject mavenprojectVar1;
12173,DODGY_CODE,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,FP,mavendp,133,"if ( parent.list().length < 2 )
","private File findDeleteTarget(Artifact artifact) {
File deleteTarget = artifact.getFile();
if (GROUP_ID_FUZZINESS.equals(resolutionFuzziness)) {
deleteTarget = deleteTarget.getParentFile().getParentFile();
deleteTarget = deleteTarget.getParentFile();
String[] path = localRepository.pathOf(artifact).split(""\\/"");
int groupParts = path.length - 4;
File parent = deleteTarget.getParentFile();
int count = 0;
while (count++ < groupParts) {
if (parent.list().length < 2) {
deleteTarget = parent;
parent = deleteTarget.getParentFile();
} else {
break;
}
}
} else if (ARTIFACT_ID_FUZZINESS.equals(resolutionFuzziness)) {
deleteTarget = deleteTarget.getParentFile().getParentFile();
} else if (VERSION_FUZZINESS.equals(resolutionFuzziness)) {
deleteTarget = deleteTarget.getParentFile();
}
return deleteTarget;
}","private File findDeleteTarget(Artifact artifact) {
File fileVar1 = fileLiteral2;
if (GROUP_ID_FUZZINESS.equals(resolutionFuzziness)) {
fileVar1 = fileVar1.getParentFile().getParentFile();
fileVar1 = fileVar1.getParentFile();
String[] stringArrayVar3 = stringArrayLiteral4;
int intVar5 = intLiteral6;
File fileVar7 = fileLiteral8;
int intVar9 = intLiteral10;
while (intVar9++ < intVar5) {
if (fileVar7.list().length < 2) {
fileVar1 = fileVar7;
fileVar7 = fileVar1.getParentFile();
} else {
break;
}
}
} else if (ARTIFACT_ID_FUZZINESS.equals(resolutionFuzziness)) {
fileVar1 = fileVar1.getParentFile().getParentFile();
} else if (VERSION_FUZZINESS.equals(resolutionFuzziness)) {
fileVar1 = fileVar1.getParentFile();
}
return fileVar1;
}"
12184,BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,mavendp,144,"outputFile.getParentFile().mkdirs();
","public void execute() throws MojoExecutionException {
Writer outputWriter = null;
try {
Set<Artifact> plugins = resolvePluginArtifacts();
if (this.outputFile != null) {
outputFile.getParentFile().mkdirs();
outputWriter = new FileWriter(outputFile);
}
for (Artifact plugin : plugins) {
String logStr = ""Plugin Resolved: "" + DependencyUtil.getFormattedFileName(plugin, false);
if (!silent) {
this.getLog().info(logStr);
}
if (outputWriter != null) {
outputWriter.write(logStr);
outputWriter.write(""\n"");
}
if (!excludeTransitive) {
for (Artifact artifact : resolveArtifactDependencies(plugin)) {
logStr = ""    Plugin Dependency Resolved: "" + DependencyUtil.getFormattedFileName(artifact, false);
if (!silent) {
this.getLog().info(logStr);
}
if (outputWriter != null) {
outputWriter.write(logStr);
outputWriter.write(""\n"");
}
}
}
}
} catch (IOException e) {
throw new MojoExecutionException(""Nested:"", e);
} catch (ArtifactResolutionException e) {
throw new MojoExecutionException(""Nested:"", e);
} catch (ArtifactNotFoundException e) {
throw new MojoExecutionException(""Nested:"", e);
} catch (ProjectBuildingException e) {
throw new MojoExecutionException(""Nested:"", e);
} catch (InvalidDependencyVersionException e) {
throw new MojoExecutionException(""Nested:"", e);
} finally {
IOUtil.close(outputWriter);
}
}","public void execute() throws MojoExecutionException {
Writer writerVar1 = writerLiteral2;
try {
Set<Artifact> set<artifact>Var3 = set<artifact>Literal4;
if (this.outputFile != null) {
outputFile.getParentFile().mkdirs();
writerVar1 = new FileWriter(outputFile);
}
for (Artifact artifactVar5 : set<artifact>Var3) {
String stringVar6 = stringLiteral7;
if (!silent) {
this.getLog().info(stringVar6);
}
if (writerVar1 != null) {
writerVar1.write(stringVar6);
writerVar1.write(""\n"");
}
if (!excludeTransitive) {
for (Artifact artifactVar8 : resolveArtifactDependencies(artifactVar5)) {
stringVar6 = ""    Plugin Dependency Resolved: "" + DependencyUtil.getFormattedFileName(artifactVar8, false);
if (!silent) {
this.getLog().info(stringVar6);
}
if (writerVar1 != null) {
writerVar1.write(stringVar6);
writerVar1.write(""\n"");
}
}
}
}
} catch (IOException e) {
throw new MojoExecutionException(""Nested:"", e);
} catch (ArtifactResolutionException e) {
throw new MojoExecutionException(""Nested:"", e);
} catch (ArtifactNotFoundException e) {
throw new MojoExecutionException(""Nested:"", e);
} catch (ProjectBuildingException e) {
throw new MojoExecutionException(""Nested:"", e);
} catch (InvalidDependencyVersionException e) {
throw new MojoExecutionException(""Nested:"", e);
} finally {
IOUtil.close(writerVar1);
}
}"
12187,BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,mavendp,147,"file.getParentFile().mkdirs();
","public static synchronized void write(String string, File file, boolean append, Log log) throws IOException {
file.getParentFile().mkdirs();
FileWriter writer = null;
try {
writer = new FileWriter(file, append);
writer.write(string);
} finally {
IOUtil.close(writer);
}
}","public static synchronized void write(String string, File file, boolean append, Log log) throws IOException {
file.getParentFile().mkdirs();
FileWriter filewriterVar1 = filewriterLiteral2;
try {
filewriterVar1 = new FileWriter(file, append);
filewriterVar1.write(string);
} finally {
IOUtil.close(filewriterVar1);
}
}"
12189,BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,mavendp,149,"marker.getParentFile().mkdirs();
","public void setMarker() throws MojoExecutionException {
File marker = getMarkerFile();
try {
marker.getParentFile().mkdirs();
} catch (NullPointerException e) {
}
try {
marker.createNewFile();
} catch (IOException e) {
throw new MojoExecutionException(""Unable to create Marker: "" + marker.getAbsolutePath(), e);
}
try {
long ts;
if (this.artifact != null && this.artifact.getFile() != null) {
ts = this.artifact.getFile().lastModified();
} else {
ts = System.currentTimeMillis();
}
marker.setLastModified(ts);
} catch (Exception e) {
throw new MojoExecutionException(""Unable to update Marker timestamp: "" + marker.getAbsolutePath(), e);
}
}","public void setMarker() throws MojoExecutionException {
File fileVar1 = fileLiteral2;
try {
fileVar1.getParentFile().mkdirs();
} catch (NullPointerException e) {
}
try {
fileVar1.createNewFile();
} catch (IOException e) {
throw new MojoExecutionException(""Unable to create Marker: "" + fileVar1.getAbsolutePath(), e);
}
try {
long longVar3;
if (this.artifact != null && this.artifact.getFile() != null) {
longVar3 = this.artifact.getFile().lastModified();
} else {
longVar3 = System.currentTimeMillis();
}
fileVar1.setLastModified(longVar3);
} catch (Exception e) {
throw new MojoExecutionException(""Unable to update Marker timestamp: "" + fileVar1.getAbsolutePath(), e);
}
}"
12192,BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,mavendp,152,"marker.getParentFile().mkdirs();
","public void setMarker() throws MojoExecutionException {
File marker = getMarkerFile();
File clearMarker = getMarkerFile(!this.resolved);
try {
marker.getParentFile().mkdirs();
} catch (NullPointerException e) {
}
try {
marker.createNewFile();
if (clearMarker.exists()) {
clearMarker.delete();
}
} catch (IOException e) {
throw new MojoExecutionException(""Unable to create Marker: "" + marker.getAbsolutePath(), e);
}
}","public void setMarker() throws MojoExecutionException {
File fileVar1 = fileLiteral2;
File fileVar3 = fileLiteral4;
try {
fileVar1.getParentFile().mkdirs();
} catch (NullPointerException e) {
}
try {
fileVar1.createNewFile();
if (fileVar3.exists()) {
fileVar3.delete();
}
} catch (IOException e) {
throw new MojoExecutionException(""Unable to create Marker: "" + fileVar1.getAbsolutePath(), e);
}
}"
12197,DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,mavendp,157,"unArchiver = archiverManager.getUnArchiver( file );
","protected void unpack(File file, File location) throws MojoExecutionException {
try {
location.mkdirs();
UnArchiver unArchiver;
unArchiver = archiverManager.getUnArchiver(file);
unArchiver.setSourceFile(file);
unArchiver.setDestDirectory(location);
unArchiver.extract();
} catch (NoSuchArchiverException e) {
throw new MojoExecutionException(""Unknown archiver type"", e);
} catch (IOException e) {
e.printStackTrace();
throw new MojoExecutionException(""Error unpacking file: "" + (this.outputAbsoluteArtifactFilename ? file.getAbsolutePath() : file.getName()) + "" to: "" + location + ""\r\n"" + e.toString(), e);
} catch (ArchiverException e) {
e.printStackTrace();
throw new MojoExecutionException(""Error unpacking file: "" + file + "" to: "" + location + ""\r\n"" + e.toString(), e);
}
}","protected void unpack(File file, File location) throws MojoExecutionException {
try {
location.mkdirs();
UnArchiver unarchiverVar1;
unarchiverVar1 = archiverManager.getUnArchiver(file);
unarchiverVar1.setSourceFile(file);
unarchiverVar1.setDestDirectory(location);
unarchiverVar1.extract();
} catch (NoSuchArchiverException e) {
throw new MojoExecutionException(""Unknown archiver type"", e);
} catch (IOException e) {
e.printStackTrace();
throw new MojoExecutionException(""Error unpacking file: "" + (this.outputAbsoluteArtifactFilename ? file.getAbsolutePath() : file.getName()) + "" to: "" + location + ""\r\n"" + e.toString(), e);
} catch (ArchiverException e) {
e.printStackTrace();
throw new MojoExecutionException(""Error unpacking file: "" + file + "" to: "" + location + ""\r\n"" + e.toString(), e);
}
}"
12198,DODGY_CODE,UWF_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD,FP,mavendp,158,public boolean silent;,public boolean silent;,public boolean booleanVar1;
12206,DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,mavendp,166,protected List reactorProjects;,protected List reactorProjects;,protected List listVar1;
12207,DODGY_CODE,UUF_UNUSED_PUBLIC_OR_PROTECTED_FIELD,FP,mavendp,167,protected List reactorProjects;,protected List reactorProjects;,protected List listVar1;
12219,BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,mavendp,179,"marker.getParentFile().mkdirs();
","public void setMarker() throws MojoExecutionException {
File marker = getMarkerFile();
try {
marker.getParentFile().mkdirs();
} catch (NullPointerException e) {
}
try {
marker.createNewFile();
} catch (IOException e) {
throw new MojoExecutionException(""Unable to create Marker: "" + marker.getAbsolutePath(), e);
}
}","public void setMarker() throws MojoExecutionException {
File fileVar1 = fileLiteral2;
try {
fileVar1.getParentFile().mkdirs();
} catch (NullPointerException e) {
}
try {
fileVar1.createNewFile();
} catch (IOException e) {
throw new MojoExecutionException(""Unable to create Marker: "" + fileVar1.getAbsolutePath(), e);
}
}"
12222,BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,mavendp,182,"clearMarker.delete();
","public void setMarker() throws MojoExecutionException {
File marker = getMarkerFile();
File clearMarker = getMarkerFile(!this.resolved);
try {
marker.getParentFile().mkdirs();
} catch (NullPointerException e) {
}
try {
marker.createNewFile();
if (clearMarker.exists()) {
clearMarker.delete();
}
} catch (IOException e) {
throw new MojoExecutionException(""Unable to create Marker: "" + marker.getAbsolutePath(), e);
}
}","public void setMarker() throws MojoExecutionException {
File fileVar1 = fileLiteral2;
File fileVar3 = fileLiteral4;
try {
fileVar1.getParentFile().mkdirs();
} catch (NullPointerException e) {
}
try {
fileVar1.createNewFile();
if (fileVar3.exists()) {
fileVar3.delete();
}
} catch (IOException e) {
throw new MojoExecutionException(""Unable to create Marker: "" + fileVar1.getAbsolutePath(), e);
}
}"
12343,DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,mavendp,303,"final PlexusContainer container = (PlexusContainer) context.get( PlexusConstants.PLEXUS_KEY );
","protected ProjectDependencyAnalyzer createProjectDependencyAnalyzer() throws MojoExecutionException {
final String role = ProjectDependencyAnalyzer.ROLE;
final String roleHint = analyzer;
try {
final PlexusContainer container = (PlexusContainer) context.get(PlexusConstants.PLEXUS_KEY);
return (ProjectDependencyAnalyzer) container.lookup(role, roleHint);
} catch (Exception exception) {
throw new MojoExecutionException(""Failed to instantiate ProjectDependencyAnalyser with role "" + role + "" / role-hint "" + roleHint, exception);
}
}","protected ProjectDependencyAnalyzer createProjectDependencyAnalyzer() throws MojoExecutionException {
final String stringVar1 = stringLiteral2;
final String stringVar3 = stringLiteral4;
try {
final PlexusContainer plexuscontainerVar5 = plexuscontainerLiteral6;
return (ProjectDependencyAnalyzer) plexuscontainerVar5.lookup(stringVar1, stringVar3);
} catch (Exception exception) {
throw new MojoExecutionException(""Failed to instantiate ProjectDependencyAnalyser with role "" + stringVar1 + "" / role-hint "" + stringVar3, exception);
}
}"
12344,DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,mavendp,304,"DependencyManagement depMgt = project.getDependencyManagement();
","private boolean checkDependencyManagement() throws MojoExecutionException {
boolean foundError = false;
getLog().info(""Found Resolved Dependency / DependencyManagement mismatches:"");
List<Dependency> depMgtDependencies = null;
DependencyManagement depMgt = project.getDependencyManagement();
if (depMgt != null) {
depMgtDependencies = depMgt.getDependencies();
}
if (depMgtDependencies != null && !depMgtDependencies.isEmpty()) {
Map<String, Dependency> depMgtMap = new HashMap<String, Dependency>();
Map<String, Exclusion> exclusions = new HashMap<String, Exclusion>();
for (Dependency depMgtDependency : depMgtDependencies) {
depMgtMap.put(depMgtDependency.getManagementKey(), depMgtDependency);
exclusions.putAll(addExclusions(depMgtDependency.getExclusions()));
}
@SuppressWarnings(""unchecked"")
Set<Artifact> allDependencyArtifacts = new HashSet<Artifact>(project.getArtifacts());
if (this.ignoreDirect) {
getLog().info(""\tIgnoring Direct Dependencies."");
@SuppressWarnings(""unchecked"")
Set<Artifact> directDependencies = project.getDependencyArtifacts();
allDependencyArtifacts.removeAll(directDependencies);
}
List<Artifact> exclusionErrors = getExclusionErrors(exclusions, allDependencyArtifacts);
for (Artifact exclusion : exclusionErrors) {
getLog().info(StringUtils.stripEnd(getArtifactManagementKey(exclusion), "":"") + "" was excluded in DepMgt, but version "" + exclusion.getVersion() + "" has been found in the dependency tree."");
foundError = true;
}
Map<Artifact, Dependency> mismatch = getMismatch(depMgtMap, allDependencyArtifacts);
for (Map.Entry<Artifact, Dependency> entry : mismatch.entrySet()) {
logMismatch(entry.getKey(), entry.getValue());
foundError = true;
}
if (!foundError) {
getLog().info(""   None"");
}
} else {
getLog().info(""   Nothing in DepMgt."");
}
return foundError;
}","private boolean checkDependencyManagement() throws MojoExecutionException {
boolean booleanVar1 = booleanLiteral2;
getLog().info(""Found Resolved Dependency / DependencyManagement mismatches:"");
List<Dependency> list<dependency>Var3 = list<dependency>Literal4;
DependencyManagement dependencymanagementVar5 = dependencymanagementLiteral6;
if (dependencymanagementVar5 != null) {
list<dependency>Var3 = dependencymanagementVar5.getDependencies();
}
if (list<dependency>Var3 != null && !list<dependency>Var3.isEmpty()) {
Map<String, Dependency> map<string,dependency>Var7 = map<string,dependency>Literal8;
Map<String, Exclusion> map<string,exclusion>Var9 = map<string,exclusion>Literal10;
for (Dependency dependencyVar11 : list<dependency>Var3) {
map<string,dependency>Var7.put(dependencyVar11.getManagementKey(), dependencyVar11);
map<string,exclusion>Var9.putAll(addExclusions(dependencyVar11.getExclusions()));
}
@SuppressWarnings(""unchecked"")
Set<Artifact> set<artifact>Var12 = set<artifact>Literal13;
if (this.ignoreDirect) {
getLog().info(""\tIgnoring Direct Dependencies."");
@SuppressWarnings(""unchecked"")
Set<Artifact> set<artifact>Var14 = set<artifact>Literal15;
set<artifact>Var12.removeAll(set<artifact>Var14);
}
List<Artifact> list<artifact>Var16 = list<artifact>Literal17;
for (Artifact artifactVar18 : list<artifact>Var16) {
getLog().info(StringUtils.stripEnd(getArtifactManagementKey(artifactVar18), "":"") + "" was excluded in DepMgt, but version "" + artifactVar18.getVersion() + "" has been found in the dependency tree."");
booleanVar1 = true;
}
Map<Artifact, Dependency> map<artifact,dependency>Var19 = map<artifact,dependency>Literal20;
for (Map.Entry<Artifact, Dependency> map.entry<artifact,dependency>Var21 : map<artifact,dependency>Var19.entrySet()) {
logMismatch(map.entry<artifact,dependency>Var21.getKey(), map.entry<artifact,dependency>Var21.getValue());
booleanVar1 = true;
}
if (!booleanVar1) {
getLog().info(""   None"");
}
} else {
getLog().info(""   Nothing in DepMgt."");
}
return booleanVar1;
}"
12358,CORRECTNESS,MF_CLASS_MASKS_FIELD,FP,mavendp,318,"@Parameter
protected boolean useJvmChmod = true;","@Parameter
protected boolean useJvmChmod = true;","@Parameter
protected boolean booleanVar1 = booleanLiteral2;"
12362,CORRECTNESS,NP_NULL_ON_SOME_PATH,FP,mavendp,322,"return recommendedVersion.compareTo( theVersion ) <= 0;
","public static boolean containsVersion(VersionRange allowedRange, ArtifactVersion theVersion) {
ArtifactVersion recommendedVersion = allowedRange.getRecommendedVersion();
if (recommendedVersion == null) {
@SuppressWarnings(""unchecked"")
List<Restriction> restrictions = allowedRange.getRestrictions();
for (Restriction restriction : restrictions) {
if (restriction.containsVersion(theVersion)) {
return true;
}
}
}
return recommendedVersion.compareTo(theVersion) <= 0;
}","public static boolean containsVersion(VersionRange allowedRange, ArtifactVersion theVersion) {
ArtifactVersion artifactversionVar1 = artifactversionLiteral2;
if (artifactversionVar1 == null) {
@SuppressWarnings(""unchecked"")
List<Restriction> list<restriction>Var3 = list<restriction>Literal4;
for (Restriction restrictionVar5 : list<restriction>Var3) {
if (restrictionVar5.containsVersion(theVersion)) {
return true;
}
}
}
return artifactversionVar1.compareTo(theVersion) <= 0;
}"
12369,BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,mavendp,329,"clearMarker.delete();
","public void setMarker() throws MojoExecutionException {
File marker = getMarkerFile();
File clearMarker = getMarkerFile(!this.resolved);
try {
marker.getParentFile().mkdirs();
} catch (NullPointerException e) {
}
try {
marker.createNewFile();
if (clearMarker.exists()) {
clearMarker.delete();
}
} catch (IOException e) {
throw new MojoExecutionException(""Unable to create Marker: "" + marker.getAbsolutePath(), e);
}
}","public void setMarker() throws MojoExecutionException {
File fileVar1 = fileLiteral2;
File fileVar3 = fileLiteral4;
try {
fileVar1.getParentFile().mkdirs();
} catch (NullPointerException e) {
}
try {
fileVar1.createNewFile();
if (fileVar3.exists()) {
fileVar3.delete();
}
} catch (IOException e) {
throw new MojoExecutionException(""Unable to create Marker: "" + fileVar1.getAbsolutePath(), e);
}
}"
12371,BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,mavendp,331,"location.mkdirs();
","protected void unpack(Artifact artifact, String type, File location, String includes, String excludes, String encoding, FileMapper[] fileMappers) throws MojoExecutionException {
File file = artifact.getFile();
try {
logUnpack(file, location, includes, excludes);
location.mkdirs();
if (!location.exists()) {
throw new MojoExecutionException(""Location to write unpacked files to could not be created: "" + location);
}
if (file.isDirectory()) {
// usual case is a future jar packaging, but there are special cases: classifier and other packaging
throw new MojoExecutionException(""Artifact has not been packaged yet. When used on reactor artifact, "" + ""unpack should be executed after packaging: see MDEP-98."");
}
UnArchiver unArchiver;
try {
unArchiver = archiverManager.getUnArchiver(type);
getLog().debug(""Found unArchiver by type: "" + unArchiver);
} catch (NoSuchArchiverException e) {
unArchiver = archiverManager.getUnArchiver(file);
getLog().debug(""Found unArchiver by extension: "" + unArchiver);
}
if (encoding != null && unArchiver instanceof ZipUnArchiver) {
((ZipUnArchiver) unArchiver).setEncoding(encoding);
getLog().info(""Unpacks '"" + type + ""' with encoding '"" + encoding + ""'."");
}
unArchiver.setIgnorePermissions(ignorePermissions);
unArchiver.setSourceFile(file);
unArchiver.setDestDirectory(location);
if (StringUtils.isNotEmpty(excludes) || StringUtils.isNotEmpty(includes)) {
IncludeExcludeFileSelector[] selectors = new IncludeExcludeFileSelector[] { new IncludeExcludeFileSelector() };
if (StringUtils.isNotEmpty(excludes)) {
selectors[0].setExcludes(excludes.split("",""));
}
if (StringUtils.isNotEmpty(includes)) {
selectors[0].setIncludes(includes.split("",""));
}
unArchiver.setFileSelectors(selectors);
}
if (this.silent) {
silenceUnarchiver(unArchiver);
}
unArchiver.setFileMappers(fileMappers);
unArchiver.extract();
} catch (NoSuchArchiverException e) {
throw new MojoExecutionException(""Unknown archiver type"", e);
} catch (ArchiverException e) {
throw new MojoExecutionException(""Error unpacking file: "" + file + "" to: "" + location + System.lineSeparator() + e.toString(), e);
}
}","protected void unpack(Artifact artifact, String type, File location, String includes, String excludes, String encoding, FileMapper[] fileMappers) throws MojoExecutionException {
File fileVar1 = fileLiteral2;
try {
logUnpack(fileVar1, location, includes, excludes);
location.mkdirs();
if (!location.exists()) {
throw new MojoExecutionException(""Location to write unpacked files to could not be created: "" + location);
}
if (fileVar1.isDirectory()) {
// usual case is a future jar packaging, but there are special cases: classifier and other packaging
throw new MojoExecutionException(""Artifact has not been packaged yet. When used on reactor artifact, "" + ""unpack should be executed after packaging: see MDEP-98."");
}
UnArchiver unarchiverVar3;
try {
unarchiverVar3 = archiverManager.getUnArchiver(type);
getLog().debug(""Found unArchiver by type: "" + unarchiverVar3);
} catch (NoSuchArchiverException e) {
unarchiverVar3 = archiverManager.getUnArchiver(fileVar1);
getLog().debug(""Found unArchiver by extension: "" + unarchiverVar3);
}
if (encoding != null && unarchiverVar3 instanceof ZipUnArchiver) {
((ZipUnArchiver) unarchiverVar3).setEncoding(encoding);
getLog().info(""Unpacks '"" + type + ""' with encoding '"" + encoding + ""'."");
}
unarchiverVar3.setIgnorePermissions(ignorePermissions);
unarchiverVar3.setSourceFile(fileVar1);
unarchiverVar3.setDestDirectory(location);
if (StringUtils.isNotEmpty(excludes) || StringUtils.isNotEmpty(includes)) {
IncludeExcludeFileSelector[] includeexcludefileselectorArrayVar4 = includeexcludefileselectorArrayLiteral5;
if (StringUtils.isNotEmpty(excludes)) {
includeexcludefileselectorArrayVar4[0].setExcludes(excludes.split("",""));
}
if (StringUtils.isNotEmpty(includes)) {
includeexcludefileselectorArrayVar4[0].setIncludes(includes.split("",""));
}
unarchiverVar3.setFileSelectors(includeexcludefileselectorArrayVar4);
}
if (this.silent) {
silenceUnarchiver(unarchiverVar3);
}
unarchiverVar3.setFileMappers(fileMappers);
unarchiverVar3.extract();
} catch (NoSuchArchiverException e) {
throw new MojoExecutionException(""Unknown archiver type"", e);
} catch (ArchiverException e) {
throw new MojoExecutionException(""Error unpacking file: "" + fileVar1 + "" to: "" + location + System.lineSeparator() + e.toString(), e);
}
}"
12374,DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,mavendp,334,"unArchiver = archiverManager.getUnArchiver( file );
","protected void unpack(Artifact artifact, String type, File location, String includes, String excludes, String encoding, FileMapper[] fileMappers) throws MojoExecutionException {
File file = artifact.getFile();
try {
logUnpack(file, location, includes, excludes);
location.mkdirs();
if (!location.exists()) {
throw new MojoExecutionException(""Location to write unpacked files to could not be created: "" + location);
}
if (file.isDirectory()) {
// usual case is a future jar packaging, but there are special cases: classifier and other packaging
throw new MojoExecutionException(""Artifact has not been packaged yet. When used on reactor artifact, "" + ""unpack should be executed after packaging: see MDEP-98."");
}
UnArchiver unArchiver;
try {
unArchiver = archiverManager.getUnArchiver(type);
getLog().debug(""Found unArchiver by type: "" + unArchiver);
} catch (NoSuchArchiverException e) {
unArchiver = archiverManager.getUnArchiver(file);
getLog().debug(""Found unArchiver by extension: "" + unArchiver);
}
if (encoding != null && unArchiver instanceof ZipUnArchiver) {
((ZipUnArchiver) unArchiver).setEncoding(encoding);
getLog().info(""Unpacks '"" + type + ""' with encoding '"" + encoding + ""'."");
}
unArchiver.setIgnorePermissions(ignorePermissions);
unArchiver.setSourceFile(file);
unArchiver.setDestDirectory(location);
if (StringUtils.isNotEmpty(excludes) || StringUtils.isNotEmpty(includes)) {
IncludeExcludeFileSelector[] selectors = new IncludeExcludeFileSelector[] { new IncludeExcludeFileSelector() };
if (StringUtils.isNotEmpty(excludes)) {
selectors[0].setExcludes(excludes.split("",""));
}
if (StringUtils.isNotEmpty(includes)) {
selectors[0].setIncludes(includes.split("",""));
}
unArchiver.setFileSelectors(selectors);
}
if (this.silent) {
silenceUnarchiver(unArchiver);
}
unArchiver.setFileMappers(fileMappers);
unArchiver.extract();
} catch (NoSuchArchiverException e) {
throw new MojoExecutionException(""Unknown archiver type"", e);
} catch (ArchiverException e) {
throw new MojoExecutionException(""Error unpacking file: "" + file + "" to: "" + location + System.lineSeparator() + e.toString(), e);
}
}","protected void unpack(Artifact artifact, String type, File location, String includes, String excludes, String encoding, FileMapper[] fileMappers) throws MojoExecutionException {
File fileVar1 = fileLiteral2;
try {
logUnpack(fileVar1, location, includes, excludes);
location.mkdirs();
if (!location.exists()) {
throw new MojoExecutionException(""Location to write unpacked files to could not be created: "" + location);
}
if (fileVar1.isDirectory()) {
// usual case is a future jar packaging, but there are special cases: classifier and other packaging
throw new MojoExecutionException(""Artifact has not been packaged yet. When used on reactor artifact, "" + ""unpack should be executed after packaging: see MDEP-98."");
}
UnArchiver unarchiverVar3;
try {
unarchiverVar3 = archiverManager.getUnArchiver(type);
getLog().debug(""Found unArchiver by type: "" + unarchiverVar3);
} catch (NoSuchArchiverException e) {
unarchiverVar3 = archiverManager.getUnArchiver(fileVar1);
getLog().debug(""Found unArchiver by extension: "" + unarchiverVar3);
}
if (encoding != null && unarchiverVar3 instanceof ZipUnArchiver) {
((ZipUnArchiver) unarchiverVar3).setEncoding(encoding);
getLog().info(""Unpacks '"" + type + ""' with encoding '"" + encoding + ""'."");
}
unarchiverVar3.setIgnorePermissions(ignorePermissions);
unarchiverVar3.setSourceFile(fileVar1);
unarchiverVar3.setDestDirectory(location);
if (StringUtils.isNotEmpty(excludes) || StringUtils.isNotEmpty(includes)) {
IncludeExcludeFileSelector[] includeexcludefileselectorArrayVar4 = includeexcludefileselectorArrayLiteral5;
if (StringUtils.isNotEmpty(excludes)) {
includeexcludefileselectorArrayVar4[0].setExcludes(excludes.split("",""));
}
if (StringUtils.isNotEmpty(includes)) {
includeexcludefileselectorArrayVar4[0].setIncludes(includes.split("",""));
}
unarchiverVar3.setFileSelectors(includeexcludefileselectorArrayVar4);
}
if (this.silent) {
silenceUnarchiver(unarchiverVar3);
}
unarchiverVar3.setFileMappers(fileMappers);
unarchiverVar3.extract();
} catch (NoSuchArchiverException e) {
throw new MojoExecutionException(""Unknown archiver type"", e);
} catch (ArchiverException e) {
throw new MojoExecutionException(""Error unpacking file: "" + fileVar1 + "" to: "" + location + System.lineSeparator() + e.toString(), e);
}
}"
12377,DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,FP,mavendp,337,"if ( artifact != null )
","private ProjectBuildingRequest makeBuildingRequest() throws MojoExecutionException, MojoFailureException {
if (artifact == null) {
throw new MojoFailureException(""You must specify an artifact, "" + ""e.g. -Dartifact=org.apache.maven.plugins:maven-downloader-plugin:1.0"");
}
if (artifact != null) {
String[] tokens = artifact.split("":"");
if (tokens.length < 3 || tokens.length > 5) {
throw new MojoFailureException(""Invalid artifact, you must specify "" + ""groupId:artifactId:version[:packaging[:classifier]] "" + artifact);
}
coordinate.setGroupId(tokens[0]);
coordinate.setArtifactId(tokens[1]);
coordinate.setVersion(tokens[2]);
if (tokens.length >= 4) {
coordinate.setType(tokens[3]);
}
if (tokens.length == 5) {
coordinate.setClassifier(tokens[4]);
}
}
ArtifactRepositoryPolicy always = new ArtifactRepositoryPolicy(true, ArtifactRepositoryPolicy.UPDATE_POLICY_ALWAYS, ArtifactRepositoryPolicy.CHECKSUM_POLICY_WARN);
List<ArtifactRepository> repoList = new ArrayList<>();
if (pomRemoteRepositories != null) {
repoList.addAll(pomRemoteRepositories);
}
if (remoteRepositories != null) {
// Use the same format as in the deploy plugin id::layout::url
String[] repos = remoteRepositories.split("","");
for (String repo : repos) {
repoList.add(parseRepository(repo, always));
}
}
ProjectBuildingRequest buildingRequest = new DefaultProjectBuildingRequest(session.getProjectBuildingRequest());
Settings settings = session.getSettings();
repositorySystem.injectMirror(repoList, settings.getMirrors());
repositorySystem.injectProxy(repoList, settings.getProxies());
repositorySystem.injectAuthentication(repoList, settings.getServers());
buildingRequest.setRemoteRepositories(repoList);
return buildingRequest;
}","private ProjectBuildingRequest makeBuildingRequest() throws MojoExecutionException, MojoFailureException {
if (artifact == null) {
throw new MojoFailureException(""You must specify an artifact, "" + ""e.g. -Dartifact=org.apache.maven.plugins:maven-downloader-plugin:1.0"");
}
if (artifact != null) {
String[] stringArrayVar1 = stringArrayLiteral2;
if (stringArrayVar1.length < 3 || stringArrayVar1.length > 5) {
throw new MojoFailureException(""Invalid artifact, you must specify "" + ""groupId:artifactId:version[:packaging[:classifier]] "" + artifact);
}
coordinate.setGroupId(stringArrayVar1[0]);
coordinate.setArtifactId(stringArrayVar1[1]);
coordinate.setVersion(stringArrayVar1[2]);
if (stringArrayVar1.length >= 4) {
coordinate.setType(stringArrayVar1[3]);
}
if (stringArrayVar1.length == 5) {
coordinate.setClassifier(stringArrayVar1[4]);
}
}
ArtifactRepositoryPolicy artifactrepositorypolicyVar3 = artifactrepositorypolicyLiteral4;
List<ArtifactRepository> list<artifactrepository>Var5 = list<artifactrepository>Literal6;
if (pomRemoteRepositories != null) {
list<artifactrepository>Var5.addAll(pomRemoteRepositories);
}
if (remoteRepositories != null) {
// Use the same format as in the deploy plugin id::layout::url
String[] stringArrayVar7 = stringArrayLiteral8;
for (String stringVar9 : stringArrayVar7) {
list<artifactrepository>Var5.add(parseRepository(stringVar9, artifactrepositorypolicyVar3));
}
}
ProjectBuildingRequest projectbuildingrequestVar10 = projectbuildingrequestLiteral11;
Settings settingsVar12 = settingsLiteral13;
repositorySystem.injectMirror(list<artifactrepository>Var5, settingsVar12.getMirrors());
repositorySystem.injectProxy(list<artifactrepository>Var5, settingsVar12.getProxies());
repositorySystem.injectAuthentication(list<artifactrepository>Var5, settingsVar12.getServers());
projectbuildingrequestVar10.setRemoteRepositories(list<artifactrepository>Var5);
return projectbuildingrequestVar10;
}"
12394,DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,mavendp,354,"if ( results.getResolvedDependencies() == null || results.getResolvedDependencies().isEmpty() )
","public String getOutput(boolean outputAbsoluteArtifactFilename, boolean theOutputScope, boolean theSort) {
StringBuilder sb = new StringBuilder();
sb.append(System.lineSeparator());
sb.append(""The following files have been resolved:"");
sb.append(System.lineSeparator());
if (results.getResolvedDependencies() == null || results.getResolvedDependencies().isEmpty()) {
sb.append(""   none"");
sb.append(System.lineSeparator());
} else {
sb.append(buildArtifactListOutput(results.getResolvedDependencies(), outputAbsoluteArtifactFilename, theOutputScope, theSort));
}
if (results.getSkippedDependencies() != null && !results.getSkippedDependencies().isEmpty()) {
sb.append(System.lineSeparator());
sb.append(""The following files were skipped:"");
sb.append(System.lineSeparator());
Set<Artifact> skippedDependencies = new LinkedHashSet<>();
skippedDependencies.addAll(results.getSkippedDependencies());
sb.append(buildArtifactListOutput(skippedDependencies, outputAbsoluteArtifactFilename, theOutputScope, theSort));
}
if (results.getUnResolvedDependencies() != null && !results.getUnResolvedDependencies().isEmpty()) {
sb.append(System.lineSeparator());
sb.append(""The following files have NOT been resolved:"");
sb.append(System.lineSeparator());
Set<Artifact> unResolvedDependencies = new LinkedHashSet<>();
unResolvedDependencies.addAll(results.getUnResolvedDependencies());
sb.append(buildArtifactListOutput(unResolvedDependencies, outputAbsoluteArtifactFilename, theOutputScope, theSort));
}
sb.append(System.lineSeparator());
return sb.toString();
}","public String getOutput(boolean outputAbsoluteArtifactFilename, boolean theOutputScope, boolean theSort) {
StringBuilder stringbuilderVar1 = stringbuilderLiteral2;
stringbuilderVar1.append(System.lineSeparator());
stringbuilderVar1.append(""The following files have been resolved:"");
stringbuilderVar1.append(System.lineSeparator());
if (results.getResolvedDependencies() == null || results.getResolvedDependencies().isEmpty()) {
stringbuilderVar1.append(""   none"");
stringbuilderVar1.append(System.lineSeparator());
} else {
stringbuilderVar1.append(buildArtifactListOutput(results.getResolvedDependencies(), outputAbsoluteArtifactFilename, theOutputScope, theSort));
}
if (results.getSkippedDependencies() != null && !results.getSkippedDependencies().isEmpty()) {
stringbuilderVar1.append(System.lineSeparator());
stringbuilderVar1.append(""The following files were skipped:"");
stringbuilderVar1.append(System.lineSeparator());
Set<Artifact> set<artifact>Var3 = set<artifact>Literal4;
set<artifact>Var3.addAll(results.getSkippedDependencies());
stringbuilderVar1.append(buildArtifactListOutput(set<artifact>Var3, outputAbsoluteArtifactFilename, theOutputScope, theSort));
}
if (results.getUnResolvedDependencies() != null && !results.getUnResolvedDependencies().isEmpty()) {
stringbuilderVar1.append(System.lineSeparator());
stringbuilderVar1.append(""The following files have NOT been resolved:"");
stringbuilderVar1.append(System.lineSeparator());
Set<Artifact> set<artifact>Var5 = set<artifact>Literal4;
set<artifact>Var5.addAll(results.getUnResolvedDependencies());
stringbuilderVar1.append(buildArtifactListOutput(set<artifact>Var5, outputAbsoluteArtifactFilename, theOutputScope, theSort));
}
stringbuilderVar1.append(System.lineSeparator());
return stringbuilderVar1.toString();
}"
12400,BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,mavendp,360,"marker.getParentFile().mkdirs();
","@Override
public void setMarker() throws MojoExecutionException {
File marker = getMarkerFile();
try {
marker.getParentFile().mkdirs();
} catch (NullPointerException e) {
}
try {
marker.createNewFile();
} catch (IOException e) {
throw new MojoExecutionException(""Unable to create Marker: "" + marker.getAbsolutePath(), e);
}
try {
long ts;
if (this.artifact != null && this.artifact.getFile() != null) {
ts = this.artifact.getFile().lastModified();
} else {
ts = System.currentTimeMillis();
}
if (!marker.setLastModified(ts)) {
throw new MojoExecutionException(""Unable to update last modified timestamp on marker file "" + marker.getAbsolutePath());
}
} catch (Exception e) {
throw new MojoExecutionException(""Unable to update Marker timestamp: "" + marker.getAbsolutePath(), e);
}
}","@Override
public void setMarker() throws MojoExecutionException {
File fileVar1 = fileLiteral2;
try {
fileVar1.getParentFile().mkdirs();
} catch (NullPointerException e) {
}
try {
fileVar1.createNewFile();
} catch (IOException e) {
throw new MojoExecutionException(""Unable to create Marker: "" + fileVar1.getAbsolutePath(), e);
}
try {
long longVar3;
if (this.artifact != null && this.artifact.getFile() != null) {
longVar3 = this.artifact.getFile().lastModified();
} else {
longVar3 = System.currentTimeMillis();
}
if (!fileVar1.setLastModified(longVar3)) {
throw new MojoExecutionException(""Unable to update last modified timestamp on marker file "" + fileVar1.getAbsolutePath());
}
} catch (Exception e) {
throw new MojoExecutionException(""Unable to update Marker timestamp: "" + fileVar1.getAbsolutePath(), e);
}
}"
12409,PERFORMANCE,URF_UNREAD_FIELD,FP,mavendp,369,"@Parameter(property = ""packaging"", defaultValue = ""jar"")
private String packaging = ""jar"";","@Parameter(property = ""packaging"", defaultValue = ""jar"")
private String packaging = ""jar"";","@Parameter(property = ""packaging"", defaultValue = ""jar"")
private String stringVar1 = stringLiteral2;"
12416,MALICIOUS_CODE,EI_EXPOSE_REP,FP,mavendp,376,"return this.fileMappers;
","public FileMapper[] getFileMappers() {
return this.fileMappers;
}","public FileMapper[] getFileMappers() {
return this.fileMappers;
}"
12420,DODGY_CODE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,FP,mavendp,380,"@Parameter
protected boolean useJvmChmod = true;","@Parameter
protected boolean useJvmChmod = true;","@Parameter
protected boolean booleanVar1 = booleanLiteral2;"
12429,BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,mavendp,389,"marker.createNewFile();
","@Override
public void setMarker() throws MojoExecutionException {
File marker = getMarkerFile();
try {
marker.getParentFile().mkdirs();
} catch (NullPointerException e) {
}
try {
marker.createNewFile();
} catch (IOException e) {
throw new MojoExecutionException(""Unable to create Marker: "" + marker.getAbsolutePath(), e);
}
try {
long ts;
if (this.artifact != null && this.artifact.getFile() != null) {
ts = this.artifact.getFile().lastModified();
} else {
ts = System.currentTimeMillis();
}
if (!marker.setLastModified(ts)) {
throw new MojoExecutionException(""Unable to update last modified timestamp on marker file "" + marker.getAbsolutePath());
}
} catch (Exception e) {
throw new MojoExecutionException(""Unable to update Marker timestamp: "" + marker.getAbsolutePath(), e);
}
}","@Override
public void setMarker() throws MojoExecutionException {
File fileVar1 = fileLiteral2;
try {
fileVar1.getParentFile().mkdirs();
} catch (NullPointerException e) {
}
try {
fileVar1.createNewFile();
} catch (IOException e) {
throw new MojoExecutionException(""Unable to create Marker: "" + fileVar1.getAbsolutePath(), e);
}
try {
long longVar3;
if (this.artifact != null && this.artifact.getFile() != null) {
longVar3 = this.artifact.getFile().lastModified();
} else {
longVar3 = System.currentTimeMillis();
}
if (!fileVar1.setLastModified(longVar3)) {
throw new MojoExecutionException(""Unable to update last modified timestamp on marker file "" + fileVar1.getAbsolutePath());
}
} catch (Exception e) {
throw new MojoExecutionException(""Unable to update Marker timestamp: "" + fileVar1.getAbsolutePath(), e);
}
}"
12493,DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,mavendp,453,"unArchiver = archiverManager.getUnArchiver( file );
","protected void unpack(Artifact artifact, String type, File location, String includes, String excludes, String encoding, FileMapper[] fileMappers) throws MojoExecutionException {
File file = artifact.getFile();
try {
logUnpack(file, location, includes, excludes);
location.mkdirs();
if (!location.exists()) {
throw new MojoExecutionException(""Location to write unpacked files to could not be created: "" + location);
}
if (file.isDirectory()) {
// usual case is a future jar packaging, but there are special cases: classifier and other packaging
throw new MojoExecutionException(""Artifact has not been packaged yet. When used on reactor artifact, "" + ""unpack should be executed after packaging: see MDEP-98."");
}
UnArchiver unArchiver;
try {
unArchiver = archiverManager.getUnArchiver(type);
getLog().debug(""Found unArchiver by type: "" + unArchiver);
} catch (NoSuchArchiverException e) {
unArchiver = archiverManager.getUnArchiver(file);
getLog().debug(""Found unArchiver by extension: "" + unArchiver);
}
if (encoding != null && unArchiver instanceof ZipUnArchiver) {
((ZipUnArchiver) unArchiver).setEncoding(encoding);
getLog().info(""Unpacks '"" + type + ""' with encoding '"" + encoding + ""'."");
}
unArchiver.setIgnorePermissions(ignorePermissions);
unArchiver.setSourceFile(file);
unArchiver.setDestDirectory(location);
if (StringUtils.isNotEmpty(excludes) || StringUtils.isNotEmpty(includes)) {
IncludeExcludeFileSelector[] selectors = new IncludeExcludeFileSelector[] { new IncludeExcludeFileSelector() };
if (StringUtils.isNotEmpty(excludes)) {
selectors[0].setExcludes(excludes.split("",""));
}
if (StringUtils.isNotEmpty(includes)) {
selectors[0].setIncludes(includes.split("",""));
}
unArchiver.setFileSelectors(selectors);
}
if (this.silent) {
silenceUnarchiver(unArchiver);
}
unArchiver.setFileMappers(fileMappers);
unArchiver.extract();
} catch (NoSuchArchiverException e) {
throw new MojoExecutionException(""Unknown archiver type"", e);
} catch (ArchiverException e) {
throw new MojoExecutionException(""Error unpacking file: "" + file + "" to: "" + location + System.lineSeparator() + e.toString(), e);
}
}","protected void unpack(Artifact artifact, String type, File location, String includes, String excludes, String encoding, FileMapper[] fileMappers) throws MojoExecutionException {
File fileVar1 = fileLiteral2;
try {
logUnpack(fileVar1, location, includes, excludes);
location.mkdirs();
if (!location.exists()) {
throw new MojoExecutionException(""Location to write unpacked files to could not be created: "" + location);
}
if (fileVar1.isDirectory()) {
// usual case is a future jar packaging, but there are special cases: classifier and other packaging
throw new MojoExecutionException(""Artifact has not been packaged yet. When used on reactor artifact, "" + ""unpack should be executed after packaging: see MDEP-98."");
}
UnArchiver unarchiverVar3;
try {
unarchiverVar3 = archiverManager.getUnArchiver(type);
getLog().debug(""Found unArchiver by type: "" + unarchiverVar3);
} catch (NoSuchArchiverException e) {
unarchiverVar3 = archiverManager.getUnArchiver(fileVar1);
getLog().debug(""Found unArchiver by extension: "" + unarchiverVar3);
}
if (encoding != null && unarchiverVar3 instanceof ZipUnArchiver) {
((ZipUnArchiver) unarchiverVar3).setEncoding(encoding);
getLog().info(""Unpacks '"" + type + ""' with encoding '"" + encoding + ""'."");
}
unarchiverVar3.setIgnorePermissions(ignorePermissions);
unarchiverVar3.setSourceFile(fileVar1);
unarchiverVar3.setDestDirectory(location);
if (StringUtils.isNotEmpty(excludes) || StringUtils.isNotEmpty(includes)) {
IncludeExcludeFileSelector[] includeexcludefileselectorArrayVar4 = includeexcludefileselectorArrayLiteral5;
if (StringUtils.isNotEmpty(excludes)) {
includeexcludefileselectorArrayVar4[0].setExcludes(excludes.split("",""));
}
if (StringUtils.isNotEmpty(includes)) {
includeexcludefileselectorArrayVar4[0].setIncludes(includes.split("",""));
}
unarchiverVar3.setFileSelectors(includeexcludefileselectorArrayVar4);
}
if (this.silent) {
silenceUnarchiver(unarchiverVar3);
}
unarchiverVar3.setFileMappers(fileMappers);
unarchiverVar3.extract();
} catch (NoSuchArchiverException e) {
throw new MojoExecutionException(""Unknown archiver type"", e);
} catch (ArchiverException e) {
throw new MojoExecutionException(""Error unpacking file: "" + fileVar1 + "" to: "" + location + System.lineSeparator() + e.toString(), e);
}
}"
12495,BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,mavendp,455,"location.mkdirs();
","protected void unpack(Artifact artifact, String type, File location, String includes, String excludes, String encoding, FileMapper[] fileMappers) throws MojoExecutionException {
File file = artifact.getFile();
try {
logUnpack(file, location, includes, excludes);
location.mkdirs();
if (!location.exists()) {
throw new MojoExecutionException(""Location to write unpacked files to could not be created: "" + location);
}
if (file.isDirectory()) {
// usual case is a future jar packaging, but there are special cases: classifier and other packaging
throw new MojoExecutionException(""Artifact has not been packaged yet. When used on reactor artifact, "" + ""unpack should be executed after packaging: see MDEP-98."");
}
UnArchiver unArchiver;
try {
unArchiver = archiverManager.getUnArchiver(type);
getLog().debug(""Found unArchiver by type: "" + unArchiver);
} catch (NoSuchArchiverException e) {
unArchiver = archiverManager.getUnArchiver(file);
getLog().debug(""Found unArchiver by extension: "" + unArchiver);
}
if (encoding != null && unArchiver instanceof ZipUnArchiver) {
((ZipUnArchiver) unArchiver).setEncoding(encoding);
getLog().info(""Unpacks '"" + type + ""' with encoding '"" + encoding + ""'."");
}
unArchiver.setIgnorePermissions(ignorePermissions);
unArchiver.setSourceFile(file);
unArchiver.setDestDirectory(location);
if (StringUtils.isNotEmpty(excludes) || StringUtils.isNotEmpty(includes)) {
IncludeExcludeFileSelector[] selectors = new IncludeExcludeFileSelector[] { new IncludeExcludeFileSelector() };
if (StringUtils.isNotEmpty(excludes)) {
selectors[0].setExcludes(excludes.split("",""));
}
if (StringUtils.isNotEmpty(includes)) {
selectors[0].setIncludes(includes.split("",""));
}
unArchiver.setFileSelectors(selectors);
}
if (this.silent) {
silenceUnarchiver(unArchiver);
}
unArchiver.setFileMappers(fileMappers);
unArchiver.extract();
} catch (NoSuchArchiverException e) {
throw new MojoExecutionException(""Unknown archiver type"", e);
} catch (ArchiverException e) {
throw new MojoExecutionException(""Error unpacking file: "" + file + "" to: "" + location + System.lineSeparator() + e.toString(), e);
}
}","protected void unpack(Artifact artifact, String type, File location, String includes, String excludes, String encoding, FileMapper[] fileMappers) throws MojoExecutionException {
File fileVar1 = fileLiteral2;
try {
logUnpack(fileVar1, location, includes, excludes);
location.mkdirs();
if (!location.exists()) {
throw new MojoExecutionException(""Location to write unpacked files to could not be created: "" + location);
}
if (fileVar1.isDirectory()) {
// usual case is a future jar packaging, but there are special cases: classifier and other packaging
throw new MojoExecutionException(""Artifact has not been packaged yet. When used on reactor artifact, "" + ""unpack should be executed after packaging: see MDEP-98."");
}
UnArchiver unarchiverVar3;
try {
unarchiverVar3 = archiverManager.getUnArchiver(type);
getLog().debug(""Found unArchiver by type: "" + unarchiverVar3);
} catch (NoSuchArchiverException e) {
unarchiverVar3 = archiverManager.getUnArchiver(fileVar1);
getLog().debug(""Found unArchiver by extension: "" + unarchiverVar3);
}
if (encoding != null && unarchiverVar3 instanceof ZipUnArchiver) {
((ZipUnArchiver) unarchiverVar3).setEncoding(encoding);
getLog().info(""Unpacks '"" + type + ""' with encoding '"" + encoding + ""'."");
}
unarchiverVar3.setIgnorePermissions(ignorePermissions);
unarchiverVar3.setSourceFile(fileVar1);
unarchiverVar3.setDestDirectory(location);
if (StringUtils.isNotEmpty(excludes) || StringUtils.isNotEmpty(includes)) {
IncludeExcludeFileSelector[] includeexcludefileselectorArrayVar4 = includeexcludefileselectorArrayLiteral5;
if (StringUtils.isNotEmpty(excludes)) {
includeexcludefileselectorArrayVar4[0].setExcludes(excludes.split("",""));
}
if (StringUtils.isNotEmpty(includes)) {
includeexcludefileselectorArrayVar4[0].setIncludes(includes.split("",""));
}
unarchiverVar3.setFileSelectors(includeexcludefileselectorArrayVar4);
}
if (this.silent) {
silenceUnarchiver(unarchiverVar3);
}
unarchiverVar3.setFileMappers(fileMappers);
unarchiverVar3.extract();
} catch (NoSuchArchiverException e) {
throw new MojoExecutionException(""Unknown archiver type"", e);
} catch (ArchiverException e) {
throw new MojoExecutionException(""Error unpacking file: "" + fileVar1 + "" to: "" + location + System.lineSeparator() + e.toString(), e);
}
}"
12498,DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,FP,mavendp,458,"if ( artifact != null )
","private ProjectBuildingRequest makeBuildingRequest() throws MojoExecutionException, MojoFailureException {
if (artifact == null) {
throw new MojoFailureException(""You must specify an artifact, "" + ""e.g. -Dartifact=org.apache.maven.plugins:maven-downloader-plugin:1.0"");
}
if (artifact != null) {
String[] tokens = artifact.split("":"");
if (tokens.length < 3 || tokens.length > 5) {
throw new MojoFailureException(""Invalid artifact, you must specify "" + ""groupId:artifactId:version[:packaging[:classifier]] "" + artifact);
}
coordinate.setGroupId(tokens[0]);
coordinate.setArtifactId(tokens[1]);
coordinate.setVersion(tokens[2]);
if (tokens.length >= 4) {
coordinate.setType(tokens[3]);
}
if (tokens.length == 5) {
coordinate.setClassifier(tokens[4]);
}
}
ArtifactRepositoryPolicy always = new ArtifactRepositoryPolicy(true, ArtifactRepositoryPolicy.UPDATE_POLICY_ALWAYS, ArtifactRepositoryPolicy.CHECKSUM_POLICY_WARN);
List<ArtifactRepository> repoList = new ArrayList<>();
if (pomRemoteRepositories != null) {
repoList.addAll(pomRemoteRepositories);
}
if (remoteRepositories != null) {
// Use the same format as in the deploy plugin id::layout::url
String[] repos = remoteRepositories.split("","");
for (String repo : repos) {
repoList.add(parseRepository(repo, always));
}
}
ProjectBuildingRequest buildingRequest = new DefaultProjectBuildingRequest(session.getProjectBuildingRequest());
Settings settings = session.getSettings();
repositorySystem.injectMirror(repoList, settings.getMirrors());
repositorySystem.injectProxy(repoList, settings.getProxies());
repositorySystem.injectAuthentication(repoList, settings.getServers());
buildingRequest.setRemoteRepositories(repoList);
return buildingRequest;
}","private ProjectBuildingRequest makeBuildingRequest() throws MojoExecutionException, MojoFailureException {
if (artifact == null) {
throw new MojoFailureException(""You must specify an artifact, "" + ""e.g. -Dartifact=org.apache.maven.plugins:maven-downloader-plugin:1.0"");
}
if (artifact != null) {
String[] stringArrayVar1 = stringArrayLiteral2;
if (stringArrayVar1.length < 3 || stringArrayVar1.length > 5) {
throw new MojoFailureException(""Invalid artifact, you must specify "" + ""groupId:artifactId:version[:packaging[:classifier]] "" + artifact);
}
coordinate.setGroupId(stringArrayVar1[0]);
coordinate.setArtifactId(stringArrayVar1[1]);
coordinate.setVersion(stringArrayVar1[2]);
if (stringArrayVar1.length >= 4) {
coordinate.setType(stringArrayVar1[3]);
}
if (stringArrayVar1.length == 5) {
coordinate.setClassifier(stringArrayVar1[4]);
}
}
ArtifactRepositoryPolicy artifactrepositorypolicyVar3 = artifactrepositorypolicyLiteral4;
List<ArtifactRepository> list<artifactrepository>Var5 = list<artifactrepository>Literal6;
if (pomRemoteRepositories != null) {
list<artifactrepository>Var5.addAll(pomRemoteRepositories);
}
if (remoteRepositories != null) {
// Use the same format as in the deploy plugin id::layout::url
String[] stringArrayVar7 = stringArrayLiteral8;
for (String stringVar9 : stringArrayVar7) {
list<artifactrepository>Var5.add(parseRepository(stringVar9, artifactrepositorypolicyVar3));
}
}
ProjectBuildingRequest projectbuildingrequestVar10 = projectbuildingrequestLiteral11;
Settings settingsVar12 = settingsLiteral13;
repositorySystem.injectMirror(list<artifactrepository>Var5, settingsVar12.getMirrors());
repositorySystem.injectProxy(list<artifactrepository>Var5, settingsVar12.getProxies());
repositorySystem.injectAuthentication(list<artifactrepository>Var5, settingsVar12.getServers());
projectbuildingrequestVar10.setRemoteRepositories(list<artifactrepository>Var5);
return projectbuildingrequestVar10;
}"
12501,BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,mavendp,461,"artifactItem.getOutputDirectory().mkdirs();
","protected List<ArtifactItem> getProcessedArtifactItems(ProcessArtifactItemsRequest processArtifactItemsRequest) throws MojoExecutionException {
boolean removeVersion = processArtifactItemsRequest.isRemoveVersion(), prependGroupId = processArtifactItemsRequest.isPrependGroupId(), useBaseVersion = processArtifactItemsRequest.isUseBaseVersion();
boolean removeClassifier = processArtifactItemsRequest.isRemoveClassifier();
if (artifactItems == null || artifactItems.size() < 1) {
throw new MojoExecutionException(""There are no artifactItems configured."");
}
for (ArtifactItem artifactItem : artifactItems) {
this.getLog().info(""Configured Artifact: "" + artifactItem.toString());
if (artifactItem.getOutputDirectory() == null) {
artifactItem.setOutputDirectory(this.outputDirectory);
}
artifactItem.getOutputDirectory().mkdirs();
if (StringUtils.isEmpty(artifactItem.getVersion())) {
fillMissingArtifactVersion(artifactItem);
}
artifactItem.setArtifact(this.getArtifact(artifactItem));
if (StringUtils.isEmpty(artifactItem.getDestFileName())) {
artifactItem.setDestFileName(DependencyUtil.getFormattedFileName(artifactItem.getArtifact(), removeVersion, prependGroupId, useBaseVersion, removeClassifier));
}
try {
artifactItem.setNeedsProcessing(checkIfProcessingNeeded(artifactItem));
} catch (ArtifactFilterException e) {
throw new MojoExecutionException(e.getMessage(), e);
}
}
return artifactItems;
}","protected List<ArtifactItem> getProcessedArtifactItems(ProcessArtifactItemsRequest processArtifactItemsRequest) throws MojoExecutionException {
boolean booleanVar1 = booleanLiteral2, booleanVar3 = booleanLiteral4, booleanVar5 = booleanLiteral6;
boolean booleanVar7 = booleanLiteral8;
if (artifactItems == null || artifactItems.size() < 1) {
throw new MojoExecutionException(""There are no artifactItems configured."");
}
for (ArtifactItem artifactitemVar9 : artifactItems) {
this.getLog().info(""Configured Artifact: "" + artifactitemVar9.toString());
if (artifactitemVar9.getOutputDirectory() == null) {
artifactitemVar9.setOutputDirectory(this.outputDirectory);
}
artifactitemVar9.getOutputDirectory().mkdirs();
if (StringUtils.isEmpty(artifactitemVar9.getVersion())) {
fillMissingArtifactVersion(artifactitemVar9);
}
artifactitemVar9.setArtifact(this.getArtifact(artifactitemVar9));
if (StringUtils.isEmpty(artifactitemVar9.getDestFileName())) {
artifactitemVar9.setDestFileName(DependencyUtil.getFormattedFileName(artifactitemVar9.getArtifact(), booleanVar1, booleanVar3, booleanVar5, booleanVar7));
}
try {
artifactitemVar9.setNeedsProcessing(checkIfProcessingNeeded(artifactitemVar9));
} catch (ArtifactFilterException e) {
throw new MojoExecutionException(e.getMessage(), e);
}
}
return artifactItems;
}"
12503,MALICIOUS_CODE,EI_EXPOSE_REP2,FP,mavendp,463,"this.fileMappers = fileMappers;
","public void setFileMappers(FileMapper[] fileMappers) {
this.fileMappers = fileMappers;
}","public void setFileMappers(FileMapper[] fileMappers) {
this.fileMappers = fileMappers;
}"
12512,MALICIOUS_CODE,EI_EXPOSE_REP,FP,mavendp,472,"return this.fileMappers;
","public FileMapper[] getFileMappers() {
return this.fileMappers;
}","public FileMapper[] getFileMappers() {
return this.fileMappers;
}"
12516,DODGY_CODE,UC_USELESS_OBJECT,FP,mavendp,476,"Set<Artifact> resolvedArtifacts = new LinkedHashSet<>( artifacts.size() );
","protected Set<Artifact> resolvePluginArtifacts() throws ArtifactFilterException, ArtifactResolverException {
final Set<Artifact> plugins = getProject().getPluginArtifacts();
final Set<Artifact> reports = getProject().getReportArtifacts();
Set<Artifact> artifacts = new LinkedHashSet<>();
artifacts.addAll(reports);
artifacts.addAll(plugins);
final FilterArtifacts filter = getArtifactsFilter();
artifacts = filter.filter(artifacts);
Set<Artifact> resolvedArtifacts = new LinkedHashSet<>(artifacts.size());
for (final Artifact artifact : new LinkedHashSet<>(artifacts)) {
// String.format( "" Plugin SKIPPED: %s"", DependencyUtil.getFormattedFileName( artifact, false ) );
ProjectBuildingRequest buildingRequest = newResolvePluginProjectBuildingRequest();
resolvedArtifacts.add(getArtifactResolver().resolveArtifact(buildingRequest, artifact).getArtifact());
}
return artifacts;
}","protected Set<Artifact> resolvePluginArtifacts() throws ArtifactFilterException, ArtifactResolverException {
final Set<Artifact> set<artifact>Var1 = set<artifact>Literal2;
final Set<Artifact> set<artifact>Var3 = set<artifact>Literal4;
Set<Artifact> set<artifact>Var5 = set<artifact>Literal6;
set<artifact>Var5.addAll(set<artifact>Var3);
set<artifact>Var5.addAll(set<artifact>Var1);
final FilterArtifacts filterartifactsVar7 = filterartifactsLiteral8;
set<artifact>Var5 = filterartifactsVar7.filter(set<artifact>Var5);
Set<Artifact> set<artifact>Var9 = set<artifact>Literal10;
for (final Artifact artifactVar11 : new LinkedHashSet<>(set<artifact>Var5)) {
// String.format( "" Plugin SKIPPED: %s"", DependencyUtil.getFormattedFileName( artifact, false ) );
ProjectBuildingRequest projectbuildingrequestVar12 = projectbuildingrequestLiteral13;
set<artifact>Var9.add(getArtifactResolver().resolveArtifact(projectbuildingrequestVar12, artifactVar11).getArtifact());
}
return set<artifact>Var5;
}"
12519,DODGY_CODE,RV_RETURN_VALUE_IGNORED_INFERRED,FP,mavendp,479,"dependency.setArtifact( dependency.getArtifact().setProperties( artifactProperties ) );
","private void applyDependencyManagementDfs(Map<String, org.apache.maven.model.Dependency> dependencyManagementMap, DependencyNode node) {
if (dependencyManagementMap.containsKey(getDependencyManagementCoordinate(node.getArtifact()))) {
org.apache.maven.model.Dependency manager = dependencyManagementMap.get(getDependencyManagementCoordinate(node.getArtifact()));
Map<String, String> artifactProperties = new HashMap<>();
for (Map.Entry<String, String> entry : node.getArtifact().getProperties().entrySet()) {
artifactProperties.put(entry.getKey(), entry.getValue());
}
if (!manager.getVersion().equals(node.getArtifact().getVersion())) {
artifactProperties.put(PRE_MANAGED_VERSION, node.getArtifact().getVersion());
node.setArtifact(node.getArtifact().setVersion(manager.getVersion()));
}
String managerScope = Objects.toString(manager.getScope(), ""compile"");
Dependency dependency = node.getDependency();
String dependencyScope = dependency.getScope();
if (!managerScope.equals(dependencyScope)) {
artifactProperties.put(PRE_MANAGED_SCOPE, dependencyScope);
artifactProperties.put(MANAGED_SCOPE, managerScope);
}
node.setArtifact(node.getArtifact().setProperties(artifactProperties));
dependency.setArtifact(dependency.getArtifact().setProperties(artifactProperties));
}
for (DependencyNode child : node.getChildren()) {
applyDependencyManagementDfs(dependencyManagementMap, child);
}
}","private void applyDependencyManagementDfs(Map<String, org.apache.maven.model.Dependency> dependencyManagementMap, DependencyNode node) {
if (dependencyManagementMap.containsKey(getDependencyManagementCoordinate(node.getArtifact()))) {
org.apache.maven.model.Dependency org.apache.maven.model.dependencyVar1 = org.apache.maven.model.dependencyLiteral2;
Map<String, String> map<string,string>Var3 = map<string,string>Literal4;
for (Map.Entry<String, String> map.entry<string,string>Var5 : node.getArtifact().getProperties().entrySet()) {
map<string,string>Var3.put(map.entry<string,string>Var5.getKey(), map.entry<string,string>Var5.getValue());
}
if (!org.apache.maven.model.dependencyVar1.getVersion().equals(node.getArtifact().getVersion())) {
map<string,string>Var3.put(PRE_MANAGED_VERSION, node.getArtifact().getVersion());
node.setArtifact(node.getArtifact().setVersion(org.apache.maven.model.dependencyVar1.getVersion()));
}
String stringVar6 = stringLiteral7;
Dependency dependencyVar8 = dependencyLiteral9;
String stringVar10 = stringLiteral11;
if (!stringVar6.equals(stringVar10)) {
map<string,string>Var3.put(PRE_MANAGED_SCOPE, stringVar10);
map<string,string>Var3.put(MANAGED_SCOPE, stringVar6);
}
node.setArtifact(node.getArtifact().setProperties(map<string,string>Var3));
dependencyVar8.setArtifact(dependencyVar8.getArtifact().setProperties(map<string,string>Var3));
}
for (DependencyNode dependencynodeVar12 : node.getChildren()) {
applyDependencyManagementDfs(dependencyManagementMap, dependencynodeVar12);
}
}"
12527,DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,mavendp,487,"unArchiver = archiverManager.getUnArchiver( file );
","protected void unpack(Artifact artifact, String type, File location, String includes, String excludes, String encoding, FileMapper[] fileMappers) throws MojoExecutionException {
File file = artifact.getFile();
try {
logUnpack(file, location, includes, excludes);
location.mkdirs();
if (!location.exists()) {
throw new MojoExecutionException(""Location to write unpacked files to could not be created: "" + location);
}
if (file.isDirectory()) {
// usual case is a future jar packaging, but there are special cases: classifier and other packaging
throw new MojoExecutionException(""Artifact has not been packaged yet. When used on reactor artifact, "" + ""unpack should be executed after packaging: see MDEP-98."");
}
UnArchiver unArchiver;
try {
unArchiver = archiverManager.getUnArchiver(type);
getLog().debug(""Found unArchiver by type: "" + unArchiver);
} catch (NoSuchArchiverException e) {
unArchiver = archiverManager.getUnArchiver(file);
getLog().debug(""Found unArchiver by extension: "" + unArchiver);
}
if (encoding != null && unArchiver instanceof ZipUnArchiver) {
((ZipUnArchiver) unArchiver).setEncoding(encoding);
getLog().info(""Unpacks '"" + type + ""' with encoding '"" + encoding + ""'."");
}
unArchiver.setIgnorePermissions(ignorePermissions);
unArchiver.setSourceFile(file);
unArchiver.setDestDirectory(location);
if (StringUtils.isNotEmpty(excludes) || StringUtils.isNotEmpty(includes)) {
IncludeExcludeFileSelector[] selectors = new IncludeExcludeFileSelector[] { new IncludeExcludeFileSelector() };
if (StringUtils.isNotEmpty(excludes)) {
selectors[0].setExcludes(excludes.split("",""));
}
if (StringUtils.isNotEmpty(includes)) {
selectors[0].setIncludes(includes.split("",""));
}
unArchiver.setFileSelectors(selectors);
}
if (this.silent) {
silenceUnarchiver(unArchiver);
}
unArchiver.setFileMappers(fileMappers);
unArchiver.extract();
} catch (NoSuchArchiverException e) {
throw new MojoExecutionException(""Unknown archiver type"", e);
} catch (ArchiverException e) {
throw new MojoExecutionException(""Error unpacking file: "" + file + "" to: "" + location + System.lineSeparator() + e.toString(), e);
}
}","protected void unpack(Artifact artifact, String type, File location, String includes, String excludes, String encoding, FileMapper[] fileMappers) throws MojoExecutionException {
File fileVar1 = fileLiteral2;
try {
logUnpack(fileVar1, location, includes, excludes);
location.mkdirs();
if (!location.exists()) {
throw new MojoExecutionException(""Location to write unpacked files to could not be created: "" + location);
}
if (fileVar1.isDirectory()) {
// usual case is a future jar packaging, but there are special cases: classifier and other packaging
throw new MojoExecutionException(""Artifact has not been packaged yet. When used on reactor artifact, "" + ""unpack should be executed after packaging: see MDEP-98."");
}
UnArchiver unarchiverVar3;
try {
unarchiverVar3 = archiverManager.getUnArchiver(type);
getLog().debug(""Found unArchiver by type: "" + unarchiverVar3);
} catch (NoSuchArchiverException e) {
unarchiverVar3 = archiverManager.getUnArchiver(fileVar1);
getLog().debug(""Found unArchiver by extension: "" + unarchiverVar3);
}
if (encoding != null && unarchiverVar3 instanceof ZipUnArchiver) {
((ZipUnArchiver) unarchiverVar3).setEncoding(encoding);
getLog().info(""Unpacks '"" + type + ""' with encoding '"" + encoding + ""'."");
}
unarchiverVar3.setIgnorePermissions(ignorePermissions);
unarchiverVar3.setSourceFile(fileVar1);
unarchiverVar3.setDestDirectory(location);
if (StringUtils.isNotEmpty(excludes) || StringUtils.isNotEmpty(includes)) {
IncludeExcludeFileSelector[] includeexcludefileselectorArrayVar4 = includeexcludefileselectorArrayLiteral5;
if (StringUtils.isNotEmpty(excludes)) {
includeexcludefileselectorArrayVar4[0].setExcludes(excludes.split("",""));
}
if (StringUtils.isNotEmpty(includes)) {
includeexcludefileselectorArrayVar4[0].setIncludes(includes.split("",""));
}
unarchiverVar3.setFileSelectors(includeexcludefileselectorArrayVar4);
}
if (this.silent) {
silenceUnarchiver(unarchiverVar3);
}
unarchiverVar3.setFileMappers(fileMappers);
unarchiverVar3.extract();
} catch (NoSuchArchiverException e) {
throw new MojoExecutionException(""Unknown archiver type"", e);
} catch (ArchiverException e) {
throw new MojoExecutionException(""Error unpacking file: "" + fileVar1 + "" to: "" + location + System.lineSeparator() + e.toString(), e);
}
}"
12536,BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,mavendp,496,"artifactItem.getOutputDirectory().mkdirs();
","protected List<ArtifactItem> getProcessedArtifactItems(ProcessArtifactItemsRequest processArtifactItemsRequest) throws MojoExecutionException {
boolean removeVersion = processArtifactItemsRequest.isRemoveVersion(), prependGroupId = processArtifactItemsRequest.isPrependGroupId(), useBaseVersion = processArtifactItemsRequest.isUseBaseVersion();
boolean removeClassifier = processArtifactItemsRequest.isRemoveClassifier();
if (artifactItems == null || artifactItems.size() < 1) {
throw new MojoExecutionException(""There are no artifactItems configured."");
}
for (ArtifactItem artifactItem : artifactItems) {
this.getLog().info(""Configured Artifact: "" + artifactItem.toString());
if (artifactItem.getOutputDirectory() == null) {
artifactItem.setOutputDirectory(this.outputDirectory);
}
artifactItem.getOutputDirectory().mkdirs();
if (StringUtils.isEmpty(artifactItem.getVersion())) {
fillMissingArtifactVersion(artifactItem);
}
artifactItem.setArtifact(this.getArtifact(artifactItem));
if (StringUtils.isEmpty(artifactItem.getDestFileName())) {
artifactItem.setDestFileName(DependencyUtil.getFormattedFileName(artifactItem.getArtifact(), removeVersion, prependGroupId, useBaseVersion, removeClassifier));
}
try {
artifactItem.setNeedsProcessing(checkIfProcessingNeeded(artifactItem));
} catch (ArtifactFilterException e) {
throw new MojoExecutionException(e.getMessage(), e);
}
}
return artifactItems;
}","protected List<ArtifactItem> getProcessedArtifactItems(ProcessArtifactItemsRequest processArtifactItemsRequest) throws MojoExecutionException {
boolean booleanVar1 = booleanLiteral2, booleanVar3 = booleanLiteral4, booleanVar5 = booleanLiteral6;
boolean booleanVar7 = booleanLiteral8;
if (artifactItems == null || artifactItems.size() < 1) {
throw new MojoExecutionException(""There are no artifactItems configured."");
}
for (ArtifactItem artifactitemVar9 : artifactItems) {
this.getLog().info(""Configured Artifact: "" + artifactitemVar9.toString());
if (artifactitemVar9.getOutputDirectory() == null) {
artifactitemVar9.setOutputDirectory(this.outputDirectory);
}
artifactitemVar9.getOutputDirectory().mkdirs();
if (StringUtils.isEmpty(artifactitemVar9.getVersion())) {
fillMissingArtifactVersion(artifactitemVar9);
}
artifactitemVar9.setArtifact(this.getArtifact(artifactitemVar9));
if (StringUtils.isEmpty(artifactitemVar9.getDestFileName())) {
artifactitemVar9.setDestFileName(DependencyUtil.getFormattedFileName(artifactitemVar9.getArtifact(), booleanVar1, booleanVar3, booleanVar5, booleanVar7));
}
try {
artifactitemVar9.setNeedsProcessing(checkIfProcessingNeeded(artifactitemVar9));
} catch (ArtifactFilterException e) {
throw new MojoExecutionException(e.getMessage(), e);
}
}
return artifactItems;
}"
12538,MALICIOUS_CODE,EI_EXPOSE_REP2,FP,mavendp,498,"this.fileMappers = fileMappers;
","public void setFileMappers(FileMapper[] fileMappers) {
this.fileMappers = fileMappers;
}","public void setFileMappers(FileMapper[] fileMappers) {
this.fileMappers = fileMappers;
}"
12560,BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,mavendp,520,"marker.getParentFile().mkdirs();
","@Override
public void setMarker() throws MojoExecutionException {
File marker = getMarkerFile();
File clearMarker = getMarkerFile(!this.resolved);
try {
marker.getParentFile().mkdirs();
} catch (NullPointerException e) {
}
try {
marker.createNewFile();
if (clearMarker.exists()) {
if (!clearMarker.delete()) {
clearMarker.deleteOnExit();
}
}
} catch (IOException e) {
throw new MojoExecutionException(""Unable to create Marker: "" + marker.getAbsolutePath(), e);
}
}","@Override
public void setMarker() throws MojoExecutionException {
File fileVar1 = fileLiteral2;
File fileVar3 = fileLiteral4;
try {
fileVar1.getParentFile().mkdirs();
} catch (NullPointerException e) {
}
try {
fileVar1.createNewFile();
if (fileVar3.exists()) {
if (!fileVar3.delete()) {
fileVar3.deleteOnExit();
}
}
} catch (IOException e) {
throw new MojoExecutionException(""Unable to create Marker: "" + fileVar1.getAbsolutePath(), e);
}
}"
12574,DODGY_CODE,UWF_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD,FP,mavendp,534,protected MavenProjectBuilder mavenProjectBuilder;,protected MavenProjectBuilder mavenProjectBuilder;,protected MavenProjectBuilder mavenprojectbuilderVar1;
12587,CORRECTNESS,UWF_UNWRITTEN_FIELD,FP,mavendp,547,private MavenProject project;,private MavenProject project;,private MavenProject mavenprojectVar1;
12595,BAD_PRACTICE,SE_COMPARATOR_SHOULD_BE_SERIALIZABLE,FP,mavendp,555,"public class BuildClasspathMojo
extends AbstractDependencyFilterMojo
implements Comparator
{
private boolean stripVersion = false;
private String prefix;
private File cpFile;
private boolean regenerateFile;
public void execute()
throws MojoExecutionException
{
Set artifacts = getResolvedDependencies( true );
if ( artifacts == null || artifacts.isEmpty() )
{
getLog().info( ""No dependencies found."" );
}
List artList = new ArrayList( artifacts );
StringBuffer sb = new StringBuffer();
Iterator i = artList.iterator();
if ( i.hasNext() )
{
appendArtifactPath( (Artifact) i.next(), sb );
while ( i.hasNext() )
{
sb.append(File.pathSeparatorChar);
appendArtifactPath( (Artifact) i.next(), sb );
}
}
String cpString = sb.toString();
if ( cpFile == null )
{
getLog().info( ""Dependencies classpath:\n"" + cpString );
}
else
{
if ( regenerateFile || !isUpdToDate( cpString ) )
{
storeClasspathFile( cpString );
}
else
{
this.getLog().info( ""Skipped writting classpath file '"" + cpFile + ""'.  No changes found."" );
}
}
}
protected void appendArtifactPath( Artifact art, StringBuffer sb )
{
if ( prefix == null )
{
sb.append( art.getFile() );
}
else
{
// TODO: add param for prepending groupId and version.
sb.append( prefix );
sb.append( File.separatorChar );
sb.append( DependencyUtil.getFormattedFileName( art, this.stripVersion ) );
}
}
private boolean isUpdToDate( String cpString )
{
try
{
String oldCp = readClasspathFile();
return ( cpString == oldCp || ( cpString != null && cpString.equals( oldCp ) ) );
}
catch ( Exception ex )
{
this.getLog().warn( ""Error while reading old classpath file '"" + cpFile + ""' for up-to-date check: "" + ex );
return false;
}
}
private void storeClasspathFile( String cpString )
throws MojoExecutionException
{
try
{
Writer w = new BufferedWriter( new FileWriter( cpFile ) );
try
{
w.write( cpString );
getLog().info( ""Written classpath file '"" + cpFile + ""'."" );
}
catch ( IOException ex )
{
throw new MojoExecutionException( ""Error while writting to classpath file '"" + cpFile + ""': ""
+ ex.toString(), ex );
}
finally
{
w.close();
}
}
catch ( IOException ex )
{
throw new MojoExecutionException( ""Error while opening/closing classpath file '"" + cpFile + ""': ""
+ ex.toString(), ex );
}
}
private String readClasspathFile()
throws IOException
{
if ( !cpFile.isFile() )
{
return null;
}
StringBuffer sb = new StringBuffer();
BufferedReader r = new BufferedReader( new FileReader( cpFile ) );
try
{
String l;
while ( ( l = r.readLine() ) != null )
{
sb.append( l );
}
return sb.toString();
}
finally
{
r.close();
}
}
public int compare( Object arg1, Object arg2 )
{
if ( arg1 instanceof Artifact && arg2 instanceof Artifact )
{
if ( arg1 == arg2 )
{
return 0;
}
else if ( arg1 == null )
{
return -1;
}
else if ( arg2 == null )
{
return +1;
}
Artifact art1 = (Artifact) arg1;
Artifact art2 = (Artifact) arg2;
String s1 = art1.getGroupId() + art1.getArtifactId() + art1.getVersion();
String s2 = art2.getGroupId() + art2.getArtifactId() + art2.getVersion();
return s1.compareTo( s2 );
}
else
{
return 0;
}
}
protected ArtifactsFilter getMarkedArtifactFilter()
{
return null;
","public int compare(Object arg1, Object arg2) {
if (arg1 instanceof Artifact && arg2 instanceof Artifact) {
if (arg1 == arg2) {
return 0;
} else if (arg1 == null) {
return -1;
} else if (arg2 == null) {
return +1;
}
Artifact art1 = (Artifact) arg1;
Artifact art2 = (Artifact) arg2;
String s1 = art1.getGroupId() + art1.getArtifactId() + art1.getVersion();
String s2 = art2.getGroupId() + art2.getArtifactId() + art2.getVersion();
return s1.compareTo(s2);
} else {
return 0;
}
}","public int compare(Object arg1, Object arg2) {
if (arg1 instanceof Artifact && arg2 instanceof Artifact) {
if (arg1 == arg2) {
return 0;
} else if (arg1 == null) {
return -1;
} else if (arg2 == null) {
return +1;
}
Artifact artifactVar1 = artifactLiteral2;
Artifact artifactVar3 = artifactLiteral4;
String stringVar5 = stringLiteral6;
String stringVar7 = stringLiteral8;
return stringVar5.compareTo(stringVar7);
} else {
return 0;
}
}"
12597,DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,FP,mavendp,557,"else if ( arg1 == null )
","public int compare(Object arg1, Object arg2) {
if (arg1 instanceof Artifact && arg2 instanceof Artifact) {
if (arg1 == arg2) {
return 0;
} else if (arg1 == null) {
return -1;
} else if (arg2 == null) {
return +1;
}
Artifact art1 = (Artifact) arg1;
Artifact art2 = (Artifact) arg2;
String s1 = art1.getGroupId() + art1.getArtifactId() + art1.getVersion();
String s2 = art2.getGroupId() + art2.getArtifactId() + art2.getVersion();
return s1.compareTo(s2);
} else {
return 0;
}
}","public int compare(Object arg1, Object arg2) {
if (arg1 instanceof Artifact && arg2 instanceof Artifact) {
if (arg1 == arg2) {
return 0;
} else if (arg1 == null) {
return -1;
} else if (arg2 == null) {
return +1;
}
Artifact artifactVar1 = artifactLiteral2;
Artifact artifactVar3 = artifactLiteral4;
String stringVar5 = stringLiteral6;
String stringVar7 = stringLiteral8;
return stringVar5.compareTo(stringVar7);
} else {
return 0;
}
}"
12605,CORRECTNESS,UWF_UNWRITTEN_FIELD,FP,mavendp,565,private boolean excludeTransitive;,private boolean excludeTransitive;,private boolean booleanVar1;
12609,BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,mavendp,569,"marker.createNewFile();
","public void setMarker() throws MojoExecutionException {
File marker = getMarkerFile();
File clearMarker = getMarkerFile(!this.resolved);
try {
marker.getParentFile().mkdirs();
} catch (NullPointerException e) {
}
try {
marker.createNewFile();
if (clearMarker.exists()) {
clearMarker.delete();
}
} catch (IOException e) {
throw new MojoExecutionException(""Unable to create Marker: "" + marker.getAbsolutePath(), e);
}
}","public void setMarker() throws MojoExecutionException {
File fileVar1 = fileLiteral2;
File fileVar3 = fileLiteral4;
try {
fileVar1.getParentFile().mkdirs();
} catch (NullPointerException e) {
}
try {
fileVar1.createNewFile();
if (fileVar3.exists()) {
fileVar3.delete();
}
} catch (IOException e) {
throw new MojoExecutionException(""Unable to create Marker: "" + fileVar1.getAbsolutePath(), e);
}
}"
12610,BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,mavendp,570,"clearMarker.delete();
","public void setMarker() throws MojoExecutionException {
File marker = getMarkerFile();
File clearMarker = getMarkerFile(!this.resolved);
try {
marker.getParentFile().mkdirs();
} catch (NullPointerException e) {
}
try {
marker.createNewFile();
if (clearMarker.exists()) {
clearMarker.delete();
}
} catch (IOException e) {
throw new MojoExecutionException(""Unable to create Marker: "" + marker.getAbsolutePath(), e);
}
}","public void setMarker() throws MojoExecutionException {
File fileVar1 = fileLiteral2;
File fileVar3 = fileLiteral4;
try {
fileVar1.getParentFile().mkdirs();
} catch (NullPointerException e) {
}
try {
fileVar1.createNewFile();
if (fileVar3.exists()) {
fileVar3.delete();
}
} catch (IOException e) {
throw new MojoExecutionException(""Unable to create Marker: "" + fileVar1.getAbsolutePath(), e);
}
}"
12707,PERFORMANCE,URF_UNREAD_FIELD,FP,mavendp,667,"@Parameter(property = ""packaging"", defaultValue = ""jar"")
private String packaging = ""jar"";","@Parameter(property = ""packaging"", defaultValue = ""jar"")
private String packaging = ""jar"";","@Parameter(property = ""packaging"", defaultValue = ""jar"")
private String stringVar1 = stringLiteral2;"
12713,DODGY_CODE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,FP,mavendp,673,"@Parameter
protected boolean useJvmChmod = true;","@Parameter
protected boolean useJvmChmod = true;","@Parameter
protected boolean booleanVar1 = booleanLiteral2;"
12717,BAD_PRACTICE,SE_COMPARATOR_SHOULD_BE_SERIALIZABLE,FP,mavendp,677,"@Mojo( name = ""build-classpath"", requiresDependencyResolution = ResolutionScope.TEST, defaultPhase = LifecyclePhase.GENERATE_SOURCES, threadSafe = true )
// CHECKSTYLE_ON: LineLength
public class BuildClasspathMojo
extends AbstractDependencyFilterMojo
implements Comparator<Artifact>
{
@Parameter( property = ""outputEncoding"", defaultValue = ""${project.reporting.outputEncoding}"" )
private String outputEncoding;
@Parameter( property = ""mdep.stripVersion"", defaultValue = ""false"" )
private boolean stripVersion = false;
@Parameter( property = ""mdep.stripClassifier"", defaultValue = ""false"" )
private boolean stripClassifier = false;
@Parameter( property = ""mdep.prefix"" )
private String prefix;
@Parameter( property = ""mdep.outputProperty"" )
private String outputProperty;
@Parameter( property = ""mdep.outputFile"" )
private File outputFile;
@Parameter( property = ""mdep.regenerateFile"", defaultValue = ""false"" )
private boolean regenerateFile;
@Parameter( property = ""mdep.fileSeparator"", defaultValue = """" )
private String fileSeparator;
@Parameter( property = ""mdep.pathSeparator"", defaultValue = """" )
private String pathSeparator;
@Parameter( property = ""mdep.localRepoProperty"", defaultValue = """" )
private String localRepoProperty;
@Parameter( defaultValue = ""false"" )
private boolean attach;
@Parameter( property = ""mdep.outputFilterFile"", defaultValue = ""false"" )
private boolean outputFilterFile;
@Parameter( property = ""mdep.useBaseVersion"", defaultValue = ""true"" )
private boolean useBaseVersion = true;
@Component
private MavenProjectHelper projectHelper;
@Component
private RepositoryManager repositoryManager;
@Override
protected void doExecute()
throws MojoExecutionException
{
boolean isFileSepSet = StringUtils.isNotEmpty( fileSeparator );
boolean isPathSepSet = StringUtils.isNotEmpty( pathSeparator );
if ( attach && StringUtils.isEmpty( localRepoProperty ) )
{
localRepoProperty = ""${M2_REPO}"";
}
Set<Artifact> artifacts = getResolvedDependencies( true );
if ( artifacts == null || artifacts.isEmpty() )
{
getLog().info( ""No dependencies found."" );
}
List<Artifact> artList = new ArrayList<>( artifacts );
StringBuilder sb = new StringBuilder();
Iterator<Artifact> i = artList.iterator();
if ( i.hasNext() )
{
appendArtifactPath( i.next(), sb );
while ( i.hasNext() )
{
sb.append( isPathSepSet ? this.pathSeparator : File.pathSeparator );
appendArtifactPath( i.next(), sb );
}
}
String cpString = sb.toString();
if ( isFileSepSet )
{
final String pattern = Pattern.quote( File.separator );
final String replacement = Matcher.quoteReplacement( fileSeparator );
cpString = cpString.replaceAll( pattern, replacement );
}
if ( outputFilterFile )
{
cpString = ""classpath="" + cpString;
}
if ( outputProperty != null )
{
getProject().getProperties().setProperty( outputProperty, cpString );
if ( getLog().isDebugEnabled() )
{
getLog().debug( outputProperty + "" = "" + cpString );
}
}
if ( outputFile == null )
{
getLog().info( ""Dependencies classpath:"" + System.lineSeparator() + cpString );
}
else
{
if ( regenerateFile || !isUpToDate( cpString ) )
{
storeClasspathFile( cpString, outputFile );
}
else
{
this.getLog().info( ""Skipped writing classpath file '"" + outputFile + ""'.  No changes found."" );
}
}
if ( attach )
{
attachFile( cpString );
}
}
protected void attachFile( String cpString )
throws MojoExecutionException
{
File attachedFile = new File( getProject().getBuild().getDirectory(), ""classpath"" );
storeClasspathFile( cpString, attachedFile );
projectHelper.attachArtifact( getProject(), attachedFile, ""classpath"" );
}
protected void appendArtifactPath( Artifact art, StringBuilder sb )
{
if ( prefix == null )
{
String file = art.getFile().getPath();
if ( StringUtils.isNotEmpty( localRepoProperty ) )
{
ProjectBuildingRequest projectBuildingRequest = session.getProjectBuildingRequest();
File localBasedir = repositoryManager.getLocalRepositoryBasedir( projectBuildingRequest );
file = StringUtils.replace( file, localBasedir.getAbsolutePath(), localRepoProperty );
}
sb.append( file );
}
else
{
// TODO: add param for prepending groupId and version.
sb.append( prefix );
sb.append( File.separator );
sb.append( DependencyUtil.getFormattedFileName( art, this.stripVersion, this.prependGroupId,
this.useBaseVersion, this.stripClassifier ) );
}
}
private boolean isUpToDate( String cpString )
{
try
{
String oldCp = readClasspathFile();
return Objects.equals( cpString, oldCp );
}
catch ( IOException ex )
{
this.getLog().warn( ""Error while reading old classpath file '"" + outputFile + ""' for up-to-date check: ""
+ ex );
return false;
}
}
private void storeClasspathFile( String cpString, File out )
throws MojoExecutionException
{
out.getParentFile().mkdirs();
String encoding = Objects.toString( outputEncoding, ""UTF-8"" );
try ( Writer w =
new BufferedWriter( new OutputStreamWriter( new FileOutputStream( out ), encoding ) ) )
{
w.write( cpString );
getLog().info( ""Wrote classpath file '"" + out + ""'."" );
}
catch ( IOException ex )
{
throw new MojoExecutionException( ""Error while writing to classpath file '"" + out,
ex );
}
}
protected String readClasspathFile()
throws IOException
{
if ( outputFile == null )
{
throw new IllegalArgumentException( ""The outputFile parameter ""
+ ""cannot be null if the file is intended to be read."" );
}
if ( !outputFile.isFile() )
{
return null;
}
StringBuilder sb = new StringBuilder();
String encoding = Objects.toString( outputEncoding, ""UTF-8"" );
try ( BufferedReader r =
new BufferedReader( new InputStreamReader( new FileInputStream( outputFile ), encoding ) ) )
{
for ( String line = r.readLine(); line != null; line = r.readLine() )
{
sb.append( line );
}
return sb.toString();
}
}
@Override
public int compare( Artifact art1, Artifact art2 )
{
if ( art1 == art2 )
{
return 0;
}
else if ( art1 == null )
{
return -1;
}
else if ( art2 == null )
{
return +1;
}
String s1 = art1.getGroupId() + art1.getArtifactId() + art1.getVersion();
String s2 = art2.getGroupId() + art2.getArtifactId() + art2.getVersion();
return s1.compareTo( s2 );
}
@Override
protected ArtifactsFilter getMarkedArtifactFilter()
{
return null;
}
public void setOutputFile( File outputFile )
{
this.outputFile = outputFile;
}
public void setOutputProperty( String theOutputProperty )
{
this.outputProperty = theOutputProperty;
}
public void setFileSeparator( String theFileSeparator )
{
this.fileSeparator = theFileSeparator;
}
public void setPathSeparator( String thePathSeparator )
{
this.pathSeparator = thePathSeparator;
}
public void setPrefix( String thePrefix )
{
this.prefix = thePrefix;
}
public void setRegenerateFile( boolean theRegenerateFile )
{
this.regenerateFile = theRegenerateFile;
}
public boolean isStripVersion()
{
return this.stripVersion;
}
public void setStripVersion( boolean theStripVersion )
{
this.stripVersion = theStripVersion;
}
public void setLocalRepoProperty( String localRepoProperty )
{
this.localRepoProperty = localRepoProperty;
}
","private void storeClasspathFile(String cpString, File out) throws MojoExecutionException {
out.getParentFile().mkdirs();
String encoding = Objects.toString(outputEncoding, ""UTF-8"");
try (Writer w = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(out), encoding))) {
w.write(cpString);
getLog().info(""Wrote classpath file '"" + out + ""'."");
} catch (IOException ex) {
throw new MojoExecutionException(""Error while writing to classpath file '"" + out, ex);
}
}","private void storeClasspathFile(String cpString, File out) throws MojoExecutionException {
out.getParentFile().mkdirs();
String stringVar1 = stringLiteral2;
try (Writer writerVar3 = writerLiteral4) {
writerVar3.write(cpString);
getLog().info(""Wrote classpath file '"" + out + ""'."");
} catch (IOException ex) {
throw new MojoExecutionException(""Error while writing to classpath file '"" + out, ex);
}
}"
12737,DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,mavendp,697,protected List reactorProjects;,protected List reactorProjects;,protected List listVar1;
12738,DODGY_CODE,UUF_UNUSED_PUBLIC_OR_PROTECTED_FIELD,FP,mavendp,698,protected List reactorProjects;,protected List reactorProjects;,protected List listVar1;
12747,DODGY_CODE,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,FP,mavendp,707,"if ( parent.list().length < 2 )
","private File findDeleteTarget(Artifact artifact) {
File deleteTarget = artifact.getFile();
if (GROUP_ID_FUZZINESS.equals(resolutionFuzziness)) {
deleteTarget = deleteTarget.getParentFile().getParentFile();
deleteTarget = deleteTarget.getParentFile();
String[] path = localRepository.pathOf(artifact).split(""\\/"");
int groupParts = path.length - 4;
File parent = deleteTarget.getParentFile();
int count = 0;
while (count++ < groupParts) {
if (parent.list().length < 2) {
deleteTarget = parent;
parent = deleteTarget.getParentFile();
} else {
break;
}
}
} else if (ARTIFACT_ID_FUZZINESS.equals(resolutionFuzziness)) {
deleteTarget = deleteTarget.getParentFile().getParentFile();
} else if (VERSION_FUZZINESS.equals(resolutionFuzziness)) {
deleteTarget = deleteTarget.getParentFile();
}
return deleteTarget;
}","private File findDeleteTarget(Artifact artifact) {
File fileVar1 = fileLiteral2;
if (GROUP_ID_FUZZINESS.equals(resolutionFuzziness)) {
fileVar1 = fileVar1.getParentFile().getParentFile();
fileVar1 = fileVar1.getParentFile();
String[] stringArrayVar3 = stringArrayLiteral4;
int intVar5 = intLiteral6;
File fileVar7 = fileLiteral8;
int intVar9 = intLiteral10;
while (intVar9++ < intVar5) {
if (fileVar7.list().length < 2) {
fileVar1 = fileVar7;
fileVar7 = fileVar1.getParentFile();
} else {
break;
}
}
} else if (ARTIFACT_ID_FUZZINESS.equals(resolutionFuzziness)) {
fileVar1 = fileVar1.getParentFile().getParentFile();
} else if (VERSION_FUZZINESS.equals(resolutionFuzziness)) {
fileVar1 = fileVar1.getParentFile();
}
return fileVar1;
}"
12760,BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,mavendp,720,"location.mkdirs();
","protected void unpack(Artifact artifact, String type, File location, String includes, String excludes, String encoding, FileMapper[] fileMappers) throws MojoExecutionException {
File file = artifact.getFile();
try {
logUnpack(file, location, includes, excludes);
location.mkdirs();
if (!location.exists()) {
throw new MojoExecutionException(""Location to write unpacked files to could not be created: "" + location);
}
if (file.isDirectory()) {
// usual case is a future jar packaging, but there are special cases: classifier and other packaging
throw new MojoExecutionException(""Artifact has not been packaged yet. When used on reactor artifact, "" + ""unpack should be executed after packaging: see MDEP-98."");
}
UnArchiver unArchiver;
try {
unArchiver = archiverManager.getUnArchiver(type);
getLog().debug(""Found unArchiver by type: "" + unArchiver);
} catch (NoSuchArchiverException e) {
unArchiver = archiverManager.getUnArchiver(file);
getLog().debug(""Found unArchiver by extension: "" + unArchiver);
}
if (encoding != null && unArchiver instanceof ZipUnArchiver) {
((ZipUnArchiver) unArchiver).setEncoding(encoding);
getLog().info(""Unpacks '"" + type + ""' with encoding '"" + encoding + ""'."");
}
unArchiver.setIgnorePermissions(ignorePermissions);
unArchiver.setSourceFile(file);
unArchiver.setDestDirectory(location);
if (StringUtils.isNotEmpty(excludes) || StringUtils.isNotEmpty(includes)) {
IncludeExcludeFileSelector[] selectors = new IncludeExcludeFileSelector[] { new IncludeExcludeFileSelector() };
if (StringUtils.isNotEmpty(excludes)) {
selectors[0].setExcludes(excludes.split("",""));
}
if (StringUtils.isNotEmpty(includes)) {
selectors[0].setIncludes(includes.split("",""));
}
unArchiver.setFileSelectors(selectors);
}
if (this.silent) {
silenceUnarchiver(unArchiver);
}
unArchiver.setFileMappers(fileMappers);
unArchiver.extract();
} catch (NoSuchArchiverException e) {
throw new MojoExecutionException(""Unknown archiver type"", e);
} catch (ArchiverException e) {
throw new MojoExecutionException(""Error unpacking file: "" + file + "" to: "" + location + System.lineSeparator() + e.toString(), e);
}
}","protected void unpack(Artifact artifact, String type, File location, String includes, String excludes, String encoding, FileMapper[] fileMappers) throws MojoExecutionException {
File fileVar1 = fileLiteral2;
try {
logUnpack(fileVar1, location, includes, excludes);
location.mkdirs();
if (!location.exists()) {
throw new MojoExecutionException(""Location to write unpacked files to could not be created: "" + location);
}
if (fileVar1.isDirectory()) {
// usual case is a future jar packaging, but there are special cases: classifier and other packaging
throw new MojoExecutionException(""Artifact has not been packaged yet. When used on reactor artifact, "" + ""unpack should be executed after packaging: see MDEP-98."");
}
UnArchiver unarchiverVar3;
try {
unarchiverVar3 = archiverManager.getUnArchiver(type);
getLog().debug(""Found unArchiver by type: "" + unarchiverVar3);
} catch (NoSuchArchiverException e) {
unarchiverVar3 = archiverManager.getUnArchiver(fileVar1);
getLog().debug(""Found unArchiver by extension: "" + unarchiverVar3);
}
if (encoding != null && unarchiverVar3 instanceof ZipUnArchiver) {
((ZipUnArchiver) unarchiverVar3).setEncoding(encoding);
getLog().info(""Unpacks '"" + type + ""' with encoding '"" + encoding + ""'."");
}
unarchiverVar3.setIgnorePermissions(ignorePermissions);
unarchiverVar3.setSourceFile(fileVar1);
unarchiverVar3.setDestDirectory(location);
if (StringUtils.isNotEmpty(excludes) || StringUtils.isNotEmpty(includes)) {
IncludeExcludeFileSelector[] includeexcludefileselectorArrayVar4 = includeexcludefileselectorArrayLiteral5;
if (StringUtils.isNotEmpty(excludes)) {
includeexcludefileselectorArrayVar4[0].setExcludes(excludes.split("",""));
}
if (StringUtils.isNotEmpty(includes)) {
includeexcludefileselectorArrayVar4[0].setIncludes(includes.split("",""));
}
unarchiverVar3.setFileSelectors(includeexcludefileselectorArrayVar4);
}
if (this.silent) {
silenceUnarchiver(unarchiverVar3);
}
unarchiverVar3.setFileMappers(fileMappers);
unarchiverVar3.extract();
} catch (NoSuchArchiverException e) {
throw new MojoExecutionException(""Unknown archiver type"", e);
} catch (ArchiverException e) {
throw new MojoExecutionException(""Error unpacking file: "" + fileVar1 + "" to: "" + location + System.lineSeparator() + e.toString(), e);
}
}"
12771,DODGY_CODE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,FP,mavendp,731,"@Parameter
protected boolean useJvmChmod = true;","@Parameter
protected boolean useJvmChmod = true;","@Parameter
protected boolean booleanVar1 = booleanLiteral2;"
12772,MALICIOUS_CODE,EI_EXPOSE_REP,FP,mavendp,732,"return this.fileMappers;
","public FileMapper[] getFileMappers() {
return this.fileMappers;
}","public FileMapper[] getFileMappers() {
return this.fileMappers;
}"
12773,MALICIOUS_CODE,EI_EXPOSE_REP2,FP,mavendp,733,"this.fileMappers = fileMappers;
","public void setFileMappers(FileMapper[] fileMappers) {
this.fileMappers = fileMappers;
}","public void setFileMappers(FileMapper[] fileMappers) {
this.fileMappers = fileMappers;
}"
12774,CORRECTNESS,NP_NULL_PARAM_DEREF,FP,mavendp,734,"List<Artifact> artList = new ArrayList<>( artifacts );
","@Override
protected void doExecute() throws MojoExecutionException {
boolean isFileSepSet = StringUtils.isNotEmpty(fileSeparator);
boolean isPathSepSet = StringUtils.isNotEmpty(pathSeparator);
if (attach && StringUtils.isEmpty(localRepoProperty)) {
localRepoProperty = ""${M2_REPO}"";
}
Set<Artifact> artifacts = getResolvedDependencies(true);
if (artifacts == null || artifacts.isEmpty()) {
getLog().info(""No dependencies found."");
}
List<Artifact> artList = new ArrayList<>(artifacts);
StringBuilder sb = new StringBuilder();
Iterator<Artifact> i = artList.iterator();
if (i.hasNext()) {
appendArtifactPath(i.next(), sb);
while (i.hasNext()) {
sb.append(isPathSepSet ? this.pathSeparator : File.pathSeparator);
appendArtifactPath(i.next(), sb);
}
}
String cpString = sb.toString();
if (isFileSepSet) {
final String pattern = Pattern.quote(File.separator);
final String replacement = Matcher.quoteReplacement(fileSeparator);
cpString = cpString.replaceAll(pattern, replacement);
}
if (outputFilterFile) {
cpString = ""classpath="" + cpString;
}
if (outputProperty != null) {
getProject().getProperties().setProperty(outputProperty, cpString);
if (getLog().isDebugEnabled()) {
getLog().debug(outputProperty + "" = "" + cpString);
}
}
if (outputFile == null) {
getLog().info(""Dependencies classpath:"" + System.lineSeparator() + cpString);
} else {
if (regenerateFile || !isUpToDate(cpString)) {
storeClasspathFile(cpString, outputFile);
} else {
this.getLog().info(""Skipped writing classpath file '"" + outputFile + ""'.  No changes found."");
}
}
if (attach) {
attachFile(cpString);
}
}","@Override
protected void doExecute() throws MojoExecutionException {
boolean booleanVar1 = booleanLiteral2;
boolean booleanVar3 = booleanLiteral4;
if (attach && StringUtils.isEmpty(localRepoProperty)) {
localRepoProperty = ""${M2_REPO}"";
}
Set<Artifact> set<artifact>Var5 = set<artifact>Literal6;
if (set<artifact>Var5 == null || set<artifact>Var5.isEmpty()) {
getLog().info(""No dependencies found."");
}
List<Artifact> list<artifact>Var7 = list<artifact>Literal8;
StringBuilder stringbuilderVar9 = stringbuilderLiteral10;
Iterator<Artifact> iterator<artifact>Var11 = iterator<artifact>Literal12;
if (iterator<artifact>Var11.hasNext()) {
appendArtifactPath(iterator<artifact>Var11.next(), stringbuilderVar9);
while (iterator<artifact>Var11.hasNext()) {
stringbuilderVar9.append(booleanVar3 ? this.pathSeparator : File.pathSeparator);
appendArtifactPath(iterator<artifact>Var11.next(), stringbuilderVar9);
}
}
String stringVar13 = stringLiteral14;
if (booleanVar1) {
final String stringVar15 = stringLiteral16;
final String stringVar17 = stringLiteral18;
stringVar13 = stringVar13.replaceAll(stringVar15, stringVar17);
}
if (outputFilterFile) {
stringVar13 = ""classpath="" + stringVar13;
}
if (outputProperty != null) {
getProject().getProperties().setProperty(outputProperty, stringVar13);
if (getLog().isDebugEnabled()) {
getLog().debug(outputProperty + "" = "" + stringVar13);
}
}
if (outputFile == null) {
getLog().info(""Dependencies classpath:"" + System.lineSeparator() + stringVar13);
} else {
if (regenerateFile || !isUpToDate(stringVar13)) {
storeClasspathFile(stringVar13, outputFile);
} else {
this.getLog().info(""Skipped writing classpath file '"" + outputFile + ""'.  No changes found."");
}
}
if (attach) {
attachFile(stringVar13);
}
}"
12779,MALICIOUS_CODE,EI_EXPOSE_REP,FP,mavendp,739,"return this.fileMappers;
","public FileMapper[] getFileMappers() {
return this.fileMappers;
}","public FileMapper[] getFileMappers() {
return this.fileMappers;
}"
12781,DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,mavendp,741,"if ( results.getResolvedDependencies() == null || results.getResolvedDependencies().isEmpty() )
","public String getOutput(boolean outputAbsoluteArtifactFilename, boolean theOutputScope, boolean theSort) {
StringBuilder sb = new StringBuilder();
sb.append(System.lineSeparator());
sb.append(""The following files have been resolved:"");
sb.append(System.lineSeparator());
if (results.getResolvedDependencies() == null || results.getResolvedDependencies().isEmpty()) {
sb.append(""   none"");
sb.append(System.lineSeparator());
} else {
sb.append(buildArtifactListOutput(results.getResolvedDependencies(), outputAbsoluteArtifactFilename, theOutputScope, theSort));
}
if (results.getSkippedDependencies() != null && !results.getSkippedDependencies().isEmpty()) {
sb.append(System.lineSeparator());
sb.append(""The following files were skipped:"");
sb.append(System.lineSeparator());
Set<Artifact> skippedDependencies = new LinkedHashSet<>();
skippedDependencies.addAll(results.getSkippedDependencies());
sb.append(buildArtifactListOutput(skippedDependencies, outputAbsoluteArtifactFilename, theOutputScope, theSort));
}
if (results.getUnResolvedDependencies() != null && !results.getUnResolvedDependencies().isEmpty()) {
sb.append(System.lineSeparator());
sb.append(""The following files have NOT been resolved:"");
sb.append(System.lineSeparator());
Set<Artifact> unResolvedDependencies = new LinkedHashSet<>();
unResolvedDependencies.addAll(results.getUnResolvedDependencies());
sb.append(buildArtifactListOutput(unResolvedDependencies, outputAbsoluteArtifactFilename, theOutputScope, theSort));
}
sb.append(System.lineSeparator());
return sb.toString();
}","public String getOutput(boolean outputAbsoluteArtifactFilename, boolean theOutputScope, boolean theSort) {
StringBuilder stringbuilderVar1 = stringbuilderLiteral2;
stringbuilderVar1.append(System.lineSeparator());
stringbuilderVar1.append(""The following files have been resolved:"");
stringbuilderVar1.append(System.lineSeparator());
if (results.getResolvedDependencies() == null || results.getResolvedDependencies().isEmpty()) {
stringbuilderVar1.append(""   none"");
stringbuilderVar1.append(System.lineSeparator());
} else {
stringbuilderVar1.append(buildArtifactListOutput(results.getResolvedDependencies(), outputAbsoluteArtifactFilename, theOutputScope, theSort));
}
if (results.getSkippedDependencies() != null && !results.getSkippedDependencies().isEmpty()) {
stringbuilderVar1.append(System.lineSeparator());
stringbuilderVar1.append(""The following files were skipped:"");
stringbuilderVar1.append(System.lineSeparator());
Set<Artifact> set<artifact>Var3 = set<artifact>Literal4;
set<artifact>Var3.addAll(results.getSkippedDependencies());
stringbuilderVar1.append(buildArtifactListOutput(set<artifact>Var3, outputAbsoluteArtifactFilename, theOutputScope, theSort));
}
if (results.getUnResolvedDependencies() != null && !results.getUnResolvedDependencies().isEmpty()) {
stringbuilderVar1.append(System.lineSeparator());
stringbuilderVar1.append(""The following files have NOT been resolved:"");
stringbuilderVar1.append(System.lineSeparator());
Set<Artifact> set<artifact>Var5 = set<artifact>Literal4;
set<artifact>Var5.addAll(results.getUnResolvedDependencies());
stringbuilderVar1.append(buildArtifactListOutput(set<artifact>Var5, outputAbsoluteArtifactFilename, theOutputScope, theSort));
}
stringbuilderVar1.append(System.lineSeparator());
return stringbuilderVar1.toString();
}"
12789,BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,mavendp,749,"marker.getParentFile().mkdirs();
","@Override
public void setMarker() throws MojoExecutionException {
File marker = getMarkerFile();
try {
marker.getParentFile().mkdirs();
} catch (NullPointerException e) {
}
try {
marker.createNewFile();
} catch (IOException e) {
throw new MojoExecutionException(""Unable to create Marker: "" + marker.getAbsolutePath(), e);
}
try {
long ts;
if (this.artifact != null && this.artifact.getFile() != null) {
ts = this.artifact.getFile().lastModified();
} else {
ts = System.currentTimeMillis();
}
if (!marker.setLastModified(ts)) {
throw new MojoExecutionException(""Unable to update last modified timestamp on marker file "" + marker.getAbsolutePath());
}
} catch (Exception e) {
throw new MojoExecutionException(""Unable to update Marker timestamp: "" + marker.getAbsolutePath(), e);
}
}","@Override
public void setMarker() throws MojoExecutionException {
File fileVar1 = fileLiteral2;
try {
fileVar1.getParentFile().mkdirs();
} catch (NullPointerException e) {
}
try {
fileVar1.createNewFile();
} catch (IOException e) {
throw new MojoExecutionException(""Unable to create Marker: "" + fileVar1.getAbsolutePath(), e);
}
try {
long longVar3;
if (this.artifact != null && this.artifact.getFile() != null) {
longVar3 = this.artifact.getFile().lastModified();
} else {
longVar3 = System.currentTimeMillis();
}
if (!fileVar1.setLastModified(longVar3)) {
throw new MojoExecutionException(""Unable to update last modified timestamp on marker file "" + fileVar1.getAbsolutePath());
}
} catch (Exception e) {
throw new MojoExecutionException(""Unable to update Marker timestamp: "" + fileVar1.getAbsolutePath(), e);
}
}"
12830,DODGY_CODE,UUF_UNUSED_PUBLIC_OR_PROTECTED_FIELD,FP,mavendp,790,protected List<MavenProject> reactorProjects;,protected List<MavenProject> reactorProjects;,protected List<MavenProject> list<mavenproject>Var1;
12832,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,mavendp,792,"catch ( Exception e )
","private void silenceUnarchiver(UnArchiver unArchiver) {
try {
Field field = ReflectionUtils.getFieldByNameIncludingSuperclasses(""logger"", unArchiver.getClass());
field.setAccessible(true);
field.set(unArchiver, this.getLog());
} catch (Exception e) {
}
}","private void silenceUnarchiver(UnArchiver unArchiver) {
try {
Field fieldVar1 = fieldLiteral2;
fieldVar1.setAccessible(true);
fieldVar1.set(unArchiver, this.getLog());
} catch (Exception e) {
}
}"
12835,DODGY_CODE,UWF_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD,FP,mavendp,795,protected boolean appendOutput;,protected boolean appendOutput;,protected boolean booleanVar1;
12841,I18N,DM_DEFAULT_ENCODING,FP,mavendp,801,"w = new BufferedWriter( new FileWriter( out ) );
","private void storeClasspathFile(String cpString, File out) throws MojoExecutionException {
out.getParentFile().mkdirs();
Writer w = null;
try {
w = new BufferedWriter(new FileWriter(out));
w.write(cpString);
getLog().info(""Wrote classpath file '"" + out + ""'."");
} catch (IOException ex) {
throw new MojoExecutionException(""Error while writting to classpath file '"" + out + ""': "" + ex.toString(), ex);
} finally {
IOUtil.close(w);
}
}","private void storeClasspathFile(String cpString, File out) throws MojoExecutionException {
out.getParentFile().mkdirs();
Writer writerVar1 = writerLiteral2;
try {
writerVar1 = new BufferedWriter(new FileWriter(out));
writerVar1.write(cpString);
getLog().info(""Wrote classpath file '"" + out + ""'."");
} catch (IOException ex) {
throw new MojoExecutionException(""Error while writting to classpath file '"" + out + ""': "" + ex.toString(), ex);
} finally {
IOUtil.close(writerVar1);
}
}"
12852,DODGY_CODE,NP_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD,FP,mavendp,812,"installer.install( artifact.getFile(), baseArtifact, targetRepository );
","private void installBaseSnapshot(Artifact artifact, ArtifactRepository targetRepository) throws ArtifactInstallationException {
if (artifact.isSnapshot() && !artifact.getBaseVersion().equals(artifact.getVersion())) {
Artifact baseArtifact = this.factory.createArtifact(artifact.getGroupId(), artifact.getArtifactId(), artifact.getBaseVersion(), artifact.getScope(), artifact.getType());
installer.install(artifact.getFile(), baseArtifact, targetRepository);
}
}","private void installBaseSnapshot(Artifact artifact, ArtifactRepository targetRepository) throws ArtifactInstallationException {
if (artifact.isSnapshot() && !artifact.getBaseVersion().equals(artifact.getVersion())) {
Artifact artifactVar1 = artifactLiteral2;
installer.install(artifact.getFile(), artifactVar1, targetRepository);
}
}"
12854,DODGY_CODE,NP_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD,FP,mavendp,814,"installer.install( artifact.getFile(), artifact, targetRepository );
","private void installArtifact(Artifact artifact, ArtifactRepository targetRepository) {
try {
if (""pom"".equals(artifact.getType())) {
installer.install(artifact.getFile(), artifact, targetRepository);
installBaseSnapshot(artifact, targetRepository);
} else {
installer.install(artifact.getFile(), artifact, targetRepository);
installBaseSnapshot(artifact, targetRepository);
if (isCopyPom()) {
Artifact pomArtifact = getResolvedPomArtifact(artifact);
if (pomArtifact.getFile() != null && pomArtifact.getFile().exists()) {
installer.install(pomArtifact.getFile(), pomArtifact, targetRepository);
installBaseSnapshot(pomArtifact, targetRepository);
}
}
}
} catch (ArtifactInstallationException e) {
getLog().info(e.getMessage());
}
}","private void installArtifact(Artifact artifact, ArtifactRepository targetRepository) {
try {
if (""pom"".equals(artifact.getType())) {
installer.install(artifact.getFile(), artifact, targetRepository);
installBaseSnapshot(artifact, targetRepository);
} else {
installer.install(artifact.getFile(), artifact, targetRepository);
installBaseSnapshot(artifact, targetRepository);
if (isCopyPom()) {
Artifact artifactVar1 = artifactLiteral2;
if (artifactVar1.getFile() != null && artifactVar1.getFile().exists()) {
installer.install(artifactVar1.getFile(), artifactVar1, targetRepository);
installBaseSnapshot(artifactVar1, targetRepository);
}
}
}
} catch (ArtifactInstallationException e) {
getLog().info(e.getMessage());
}
}"
12856,DODGY_CODE,UWF_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD,FP,mavendp,816,protected ArtifactInstaller installer;,protected ArtifactInstaller installer;,protected ArtifactInstaller artifactinstallerVar1;
12857,DODGY_CODE,UWF_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD,FP,mavendp,817,protected ArtifactRepositoryFactory repositoryFactory;,protected ArtifactRepositoryFactory repositoryFactory;,protected ArtifactRepositoryFactory artifactrepositoryfactoryVar1;
12860,DODGY_CODE,NP_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD,FP,mavendp,820,"project.getProperties().setProperty( artifact.getDependencyConflictId(),
","public void execute() throws MojoExecutionException {
@SuppressWarnings(""unchecked"")
Set<Artifact> artifacts = getProject().getArtifacts();
for (Artifact artifact : artifacts) {
project.getProperties().setProperty(artifact.getDependencyConflictId(), artifact.getFile().getAbsolutePath());
}
}","public void execute() throws MojoExecutionException {
@SuppressWarnings(""unchecked"")
Set<Artifact> set<artifact>Var1 = set<artifact>Literal2;
for (Artifact artifactVar3 : set<artifact>Var1) {
project.getProperties().setProperty(artifactVar3.getDependencyConflictId(), artifactVar3.getFile().getAbsolutePath());
}
}"
12867,DODGY_CODE,UWF_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD,FP,mavendp,827,protected List<MavenProject> reactorProjects;,protected List<MavenProject> reactorProjects;,protected List<MavenProject> list<mavenproject>Var1;
12871,DODGY_CODE,UWF_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD,FP,mavendp,831,protected boolean outputScope;,protected boolean outputScope;,protected boolean booleanVar1;
12881,BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,mavendp,841,"marker.getParentFile().mkdirs();
","public void setMarker() throws MojoExecutionException {
File marker = getMarkerFile();
File clearMarker = getMarkerFile(!this.resolved);
try {
marker.getParentFile().mkdirs();
} catch (NullPointerException e) {
}
try {
marker.createNewFile();
if (clearMarker.exists()) {
clearMarker.delete();
}
} catch (IOException e) {
throw new MojoExecutionException(""Unable to create Marker: "" + marker.getAbsolutePath(), e);
}
}","public void setMarker() throws MojoExecutionException {
File fileVar1 = fileLiteral2;
File fileVar3 = fileLiteral4;
try {
fileVar1.getParentFile().mkdirs();
} catch (NullPointerException e) {
}
try {
fileVar1.createNewFile();
if (fileVar3.exists()) {
fileVar3.delete();
}
} catch (IOException e) {
throw new MojoExecutionException(""Unable to create Marker: "" + fileVar1.getAbsolutePath(), e);
}
}"
12883,BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,mavendp,843,"marker.createNewFile();
","public void setMarker() throws MojoExecutionException {
File marker = getMarkerFile();
File clearMarker = getMarkerFile(!this.resolved);
try {
marker.getParentFile().mkdirs();
} catch (NullPointerException e) {
}
try {
marker.createNewFile();
if (clearMarker.exists()) {
clearMarker.delete();
}
} catch (IOException e) {
throw new MojoExecutionException(""Unable to create Marker: "" + marker.getAbsolutePath(), e);
}
}","public void setMarker() throws MojoExecutionException {
File fileVar1 = fileLiteral2;
File fileVar3 = fileLiteral4;
try {
fileVar1.getParentFile().mkdirs();
} catch (NullPointerException e) {
}
try {
fileVar1.createNewFile();
if (fileVar3.exists()) {
fileVar3.delete();
}
} catch (IOException e) {
throw new MojoExecutionException(""Unable to create Marker: "" + fileVar1.getAbsolutePath(), e);
}
}"
12972,PERFORMANCE,UPM_UNCALLED_PRIVATE_METHOD,FP,mavendp,932,"if ( !silent )
{
log.info( """" );
log.info( ""The following files have been resolved: "" );
if ( resolvedArtifacts.isEmpty() )
{
log.info( ""   none"" );
}
else
{
for ( Iterator i = resolvedArtifacts.iterator(); i.hasNext(); )
{
log.info( ""   "" + ( (Artifact) i.next() ).getId() );
}
}
if ( existingArtifacts != null && !existingArtifacts.isEmpty() )
{
log.info( """" );
log.info( ""The following files where skipped: "" );
for ( Iterator i = existingArtifacts.iterator(); i.hasNext(); )
{
log.info( ""   "" + ( (Artifact) i.next() ).getId() );
}
}
log.info( """" );
log.info( ""The following files have NOT been resolved: "" );
if ( missingArtifacts.isEmpty() )
{
log.info( ""   none"" );
}
else
{
for ( Iterator i = missingArtifacts.iterator(); i.hasNext(); )
{
log.info( ""   "" + ( (Artifact) i.next() ).getId() );
}
}
log.info( """" );
}
}
","private static void logResults(Set resolvedArtifacts, Set missingArtifacts, HashSet existingArtifacts, boolean silent, Log log) {
if (!silent) {
log.info("""");
log.info(""The following files have been resolved: "");
if (resolvedArtifacts.isEmpty()) {
log.info(""   none"");
} else {
for (Iterator i = resolvedArtifacts.iterator(); i.hasNext(); ) {
log.info(""   "" + ((Artifact) i.next()).getId());
}
}
if (existingArtifacts != null && !existingArtifacts.isEmpty()) {
log.info("""");
log.info(""The following files where skipped: "");
for (Iterator i = existingArtifacts.iterator(); i.hasNext(); ) {
log.info(""   "" + ((Artifact) i.next()).getId());
}
}
log.info("""");
log.info(""The following files have NOT been resolved: "");
if (missingArtifacts.isEmpty()) {
log.info(""   none"");
} else {
for (Iterator i = missingArtifacts.iterator(); i.hasNext(); ) {
log.info(""   "" + ((Artifact) i.next()).getId());
}
}
log.info("""");
}
}","private static void logResults(Set resolvedArtifacts, Set missingArtifacts, HashSet existingArtifacts, boolean silent, Log log) {
if (!silent) {
log.info("""");
log.info(""The following files have been resolved: "");
if (resolvedArtifacts.isEmpty()) {
log.info(""   none"");
} else {
for (Iterator iteratorVar5 = iteratorLiteral6; iteratorVar1.hasNext(); ) {
log.info(""   "" + ((Artifact) iteratorVar1.next()).getId());
}
}
if (existingArtifacts != null && !existingArtifacts.isEmpty()) {
log.info("""");
log.info(""The following files where skipped: "");
for (Iterator iteratorVar5 = iteratorLiteral7; iteratorVar1.hasNext(); ) {
log.info(""   "" + ((Artifact) iteratorVar1.next()).getId());
}
}
log.info("""");
log.info(""The following files have NOT been resolved: "");
if (missingArtifacts.isEmpty()) {
log.info(""   none"");
} else {
for (Iterator iteratorVar5 = iteratorLiteral8; iteratorVar1.hasNext(); ) {
log.info(""   "" + ((Artifact) iteratorVar1.next()).getId());
}
}
log.info("""");
}
}"
12974,BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,mavendp,934,"markersDirectory.mkdirs();
","public static void unpackFile(Artifact artifact, File unpackDirectory, File markersDirectory, ArchiverManager archiverManager, Log log, boolean overWrite) throws MojoExecutionException {
markersDirectory.mkdirs();
File markerFile = new File(markersDirectory, artifact.getId().replace(':', '-') + "".unpacked"");
if (!markerFile.exists() || overWrite) {
try {
unpackDirectory.mkdirs();
unpack(artifact.getFile(), unpackDirectory, archiverManager, log);
markerFile.getParentFile().mkdirs();
markerFile.createNewFile();
} catch (IOException e) {
throw new MojoExecutionException(""Error creating marker file: "" + markerFile);
}
} else {
log.info(artifact.getFile().getName() + "" already unpacked."");
}
}","public static void unpackFile(Artifact artifact, File unpackDirectory, File markersDirectory, ArchiverManager archiverManager, Log log, boolean overWrite) throws MojoExecutionException {
markersDirectory.mkdirs();
File fileVar1 = fileLiteral2;
if (!fileVar1.exists() || overWrite) {
try {
unpackDirectory.mkdirs();
unpack(artifact.getFile(), unpackDirectory, archiverManager, log);
fileVar1.getParentFile().mkdirs();
fileVar1.createNewFile();
} catch (IOException e) {
throw new MojoExecutionException(""Error creating marker file: "" + fileVar1);
}
} else {
log.info(artifact.getFile().getName() + "" already unpacked."");
}
}"
12975,PERFORMANCE,UPM_UNCALLED_PRIVATE_METHOD,FP,mavendp,935,"log.debug(""Artifacts:"");
Iterator iter = artifacts.iterator();
while (iter.hasNext())
{
Artifact artifact = (Artifact) iter.next();
log.debug(""""+artifact);
}
}
","private void log(Set artifacts, Log log) {
log.debug(""Artifacts:"");
Iterator iter = artifacts.iterator();
while (iter.hasNext()) {
Artifact artifact = (Artifact) iter.next();
log.debug("""" + artifact);
}
}","private void log(Set artifacts, Log log) {
log.debug(""Artifacts:"");
Iterator iteratorVar1 = iteratorLiteral2;
while (iteratorVar1.hasNext()) {
Artifact artifactVar3 = artifactLiteral4;
log.debug("""" + artifactVar3);
}
}"
12978,BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,mavendp,938,"marker.createNewFile();
","public void setMarker() throws MojoExecutionException {
File marker = getMarkerFile();
File clearMarker = getMarkerFile(!this.resolved);
marker.getParentFile().mkdirs();
try {
marker.createNewFile();
if (clearMarker.exists()) {
clearMarker.delete();
}
} catch (IOException e) {
throw new MojoExecutionException(""Unable to create Marker: "" + marker.getAbsolutePath(), e);
}
}","public void setMarker() throws MojoExecutionException {
File fileVar1 = fileLiteral2;
File fileVar3 = fileLiteral4;
fileVar1.getParentFile().mkdirs();
try {
fileVar1.createNewFile();
if (fileVar3.exists()) {
fileVar3.delete();
}
} catch (IOException e) {
throw new MojoExecutionException(""Unable to create Marker: "" + fileVar1.getAbsolutePath(), e);
}
}"
12982,DODGY_CODE,DLS_DEAD_LOCAL_STORE,FP,mavendp,942,"Set results = artifacts;
","public Set translate(Set artifacts, Log log) {
Set results = artifacts;
log.debug(""Translating Artifacts using Classifier: "" + this.classifier + "" and Type: "" + this.type);
results = new HashSet();
for (Iterator i = artifacts.iterator(); i.hasNext(); ) {
Artifact artifact = (Artifact) i.next();
Artifact newArtifact = factory.createArtifactWithClassifier(artifact.getGroupId(), artifact.getArtifactId(), artifact.getVersion(), this.type, this.classifier);
results.add(newArtifact);
}
return results;
}","public Set translate(Set artifacts, Log log) {
Set setVar1 = setLiteral2;
log.debug(""Translating Artifacts using Classifier: "" + this.classifier + "" and Type: "" + this.type);
setVar1 = new HashSet();
for (Iterator iteratorVar9 = iteratorLiteral10; iteratorVar3.hasNext(); ) {
Artifact artifactVar5 = artifactLiteral6;
Artifact artifactVar7 = artifactLiteral8;
setVar1.add(artifactVar7);
}
return setVar1;
}"
12988,PERFORMANCE,URF_UNREAD_FIELD,FP,mavendp,948,"@Parameter(property = ""packaging"", defaultValue = ""jar"")
private String packaging = ""jar"";","@Parameter(property = ""packaging"", defaultValue = ""jar"")
private String packaging = ""jar"";","@Parameter(property = ""packaging"", defaultValue = ""jar"")
private String stringVar1 = stringLiteral2;"
12994,MALICIOUS_CODE,EI_EXPOSE_REP2,FP,mavendp,954,"this.fileMappers = fileMappers;
","public void setFileMappers(FileMapper[] fileMappers) {
this.fileMappers = fileMappers;
}","public void setFileMappers(FileMapper[] fileMappers) {
this.fileMappers = fileMappers;
}"
13003,MALICIOUS_CODE,EI_EXPOSE_REP2,FP,mavendp,963,"this.fileMappers = fileMappers;
","public void setFileMappers(FileMapper[] fileMappers) {
this.fileMappers = fileMappers;
}","public void setFileMappers(FileMapper[] fileMappers) {
this.fileMappers = fileMappers;
}"
13010,BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,mavendp,970,"file.getParentFile().mkdirs();
","public static synchronized void write(String string, File file, boolean append, String encoding) throws IOException {
file.getParentFile().mkdirs();
try (Writer writer = new OutputStreamWriter(new FileOutputStream(file, append), encoding)) {
writer.write(string);
}
}","public static synchronized void write(String string, File file, boolean append, String encoding) throws IOException {
file.getParentFile().mkdirs();
try (Writer writerVar1 = writerLiteral2) {
writerVar1.write(string);
}
}"
13012,BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,mavendp,972,"marker.getParentFile().mkdirs();
","@Override
public void setMarker() throws MojoExecutionException {
File marker = getMarkerFile();
try {
marker.getParentFile().mkdirs();
} catch (NullPointerException e) {
}
try {
marker.createNewFile();
} catch (IOException e) {
throw new MojoExecutionException(""Unable to create Marker: "" + marker.getAbsolutePath(), e);
}
try {
long ts;
if (this.artifact != null && this.artifact.getFile() != null) {
ts = this.artifact.getFile().lastModified();
} else {
ts = System.currentTimeMillis();
}
if (!marker.setLastModified(ts)) {
throw new MojoExecutionException(""Unable to update last modified timestamp on marker file "" + marker.getAbsolutePath());
}
} catch (Exception e) {
throw new MojoExecutionException(""Unable to update Marker timestamp: "" + marker.getAbsolutePath(), e);
}
}","@Override
public void setMarker() throws MojoExecutionException {
File fileVar1 = fileLiteral2;
try {
fileVar1.getParentFile().mkdirs();
} catch (NullPointerException e) {
}
try {
fileVar1.createNewFile();
} catch (IOException e) {
throw new MojoExecutionException(""Unable to create Marker: "" + fileVar1.getAbsolutePath(), e);
}
try {
long longVar3;
if (this.artifact != null && this.artifact.getFile() != null) {
longVar3 = this.artifact.getFile().lastModified();
} else {
longVar3 = System.currentTimeMillis();
}
if (!fileVar1.setLastModified(longVar3)) {
throw new MojoExecutionException(""Unable to update last modified timestamp on marker file "" + fileVar1.getAbsolutePath());
}
} catch (Exception e) {
throw new MojoExecutionException(""Unable to update Marker timestamp: "" + fileVar1.getAbsolutePath(), e);
}
}"
13078,DODGY_CODE,REC_CATCH_EXCEPTION,FP,mavendp,1038,"catch ( Exception e )
","private void silenceUnarchiver(UnArchiver unArchiver) {
try {
Field field = ReflectionUtils.getFieldByNameIncludingSuperclasses(""logger"", unArchiver.getClass());
field.setAccessible(true);
field.set(unArchiver, this.getLog());
} catch (Exception e) {
}
}","private void silenceUnarchiver(UnArchiver unArchiver) {
try {
Field fieldVar1 = fieldLiteral2;
fieldVar1.setAccessible(true);
fieldVar1.set(unArchiver, this.getLog());
} catch (Exception e) {
}
}"
13086,MALICIOUS_CODE,EI_EXPOSE_REP2,FP,mavendp,1046,"this.fileMappers = fileMappers;
","public void setFileMappers(FileMapper[] fileMappers) {
this.fileMappers = fileMappers;
}","public void setFileMappers(FileMapper[] fileMappers) {
this.fileMappers = fileMappers;
}"
13091,BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,mavendp,1051,"out.getParentFile().mkdirs();
","private void storeClasspathFile(String cpString, File out) throws MojoExecutionException {
out.getParentFile().mkdirs();
String encoding = Objects.toString(outputEncoding, ""UTF-8"");
try (Writer w = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(out), encoding))) {
w.write(cpString);
getLog().info(""Wrote classpath file '"" + out + ""'."");
} catch (IOException ex) {
throw new MojoExecutionException(""Error while writing to classpath file '"" + out + ""': "" + ex.toString(), ex);
}
}","private void storeClasspathFile(String cpString, File out) throws MojoExecutionException {
out.getParentFile().mkdirs();
String stringVar1 = stringLiteral2;
try (Writer writerVar3 = writerLiteral4) {
writerVar3.write(cpString);
getLog().info(""Wrote classpath file '"" + out + ""'."");
} catch (IOException ex) {
throw new MojoExecutionException(""Error while writing to classpath file '"" + out + ""': "" + ex.toString(), ex);
}
}"
13104,BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,mavendp,1064,"file.getParentFile().mkdirs();
","public static synchronized void write(String string, File file, boolean append, String encoding) throws IOException {
file.getParentFile().mkdirs();
try (Writer writer = new OutputStreamWriter(new FileOutputStream(file, append), encoding)) {
writer.write(string);
}
}","public static synchronized void write(String string, File file, boolean append, String encoding) throws IOException {
file.getParentFile().mkdirs();
try (Writer writerVar1 = writerLiteral2) {
writerVar1.write(string);
}
}"
13111,DODGY_CODE,REC_CATCH_EXCEPTION,FP,mavendp,1071,"catch ( Exception e )
","private void silenceUnarchiver(UnArchiver unArchiver) {
try {
Field field = ReflectionUtils.getFieldByNameIncludingSuperclasses(""logger"", unArchiver.getClass());
field.setAccessible(true);
field.set(unArchiver, this.getLog());
} catch (Exception e) {
}
}","private void silenceUnarchiver(UnArchiver unArchiver) {
try {
Field fieldVar1 = fieldLiteral2;
fieldVar1.setAccessible(true);
fieldVar1.set(unArchiver, this.getLog());
} catch (Exception e) {
}
}"
13112,BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,mavendp,1072,"location.mkdirs();
","protected void unpack(File file, File location, String includes, String excludes) throws MojoExecutionException {
try {
getLog().info(""Unpacking "" + file.getPath() + ""to\n "" + location.getPath() + ""\nwith Includes "" + includes + "" and excludes:"" + excludes);
location.mkdirs();
UnArchiver unArchiver;
unArchiver = archiverManager.getUnArchiver(file);
unArchiver.setSourceFile(file);
unArchiver.setDestDirectory(location);
if (StringUtils.isNotEmpty(excludes) || StringUtils.isNotEmpty(includes)) {
IncludeExcludeFileSelector[] selectors = new IncludeExcludeFileSelector[] { new IncludeExcludeFileSelector() };
if (StringUtils.isNotEmpty(excludes)) {
selectors[0].setExcludes(excludes.split("",""));
}
if (StringUtils.isNotEmpty(includes)) {
selectors[0].setIncludes(includes.split("",""));
}
unArchiver.setFileSelectors(selectors);
}
if (this.silent) {
silenceUnarchiver(unArchiver);
}
unArchiver.extract();
} catch (NoSuchArchiverException e) {
throw new MojoExecutionException(""Unknown archiver type"", e);
} catch (ArchiverException e) {
e.printStackTrace();
throw new MojoExecutionException(""Error unpacking file: "" + file + "" to: "" + location + ""\r\n"" + e.toString(), e);
}
}","protected void unpack(File file, File location, String includes, String excludes) throws MojoExecutionException {
try {
getLog().info(""Unpacking "" + file.getPath() + ""to\n "" + location.getPath() + ""\nwith Includes "" + includes + "" and excludes:"" + excludes);
location.mkdirs();
UnArchiver unarchiverVar1;
unarchiverVar1 = archiverManager.getUnArchiver(file);
unarchiverVar1.setSourceFile(file);
unarchiverVar1.setDestDirectory(location);
if (StringUtils.isNotEmpty(excludes) || StringUtils.isNotEmpty(includes)) {
IncludeExcludeFileSelector[] includeexcludefileselectorArrayVar2 = includeexcludefileselectorArrayLiteral3;
if (StringUtils.isNotEmpty(excludes)) {
includeexcludefileselectorArrayVar2[0].setExcludes(excludes.split("",""));
}
if (StringUtils.isNotEmpty(includes)) {
includeexcludefileselectorArrayVar2[0].setIncludes(includes.split("",""));
}
unarchiverVar1.setFileSelectors(includeexcludefileselectorArrayVar2);
}
if (this.silent) {
silenceUnarchiver(unarchiverVar1);
}
unarchiverVar1.extract();
} catch (NoSuchArchiverException e) {
throw new MojoExecutionException(""Unknown archiver type"", e);
} catch (ArchiverException e) {
e.printStackTrace();
throw new MojoExecutionException(""Error unpacking file: "" + file + "" to: "" + location + ""\r\n"" + e.toString(), e);
}
}"
13113,DODGY_CODE,UWF_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD,FP,mavendp,1073,public boolean silent;,public boolean silent;,public boolean booleanVar1;
13120,DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,mavendp,1080,"DependencyManagement depMgt = project.getDependencyManagement();
","private boolean checkDependencyManagement() throws MojoExecutionException {
boolean foundError = false;
getLog().info(""Found Resolved Dependency / DependencyManagement mismatches:"");
List depMgtDependencies = null;
DependencyManagement depMgt = project.getDependencyManagement();
if (depMgt != null) {
depMgtDependencies = depMgt.getDependencies();
}
if (depMgtDependencies != null && !depMgtDependencies.isEmpty()) {
Map depMgtMap = new HashMap();
Map exclusions = new HashMap();
Iterator iter = depMgtDependencies.iterator();
while (iter.hasNext()) {
Dependency depMgtDependency = (Dependency) iter.next();
depMgtMap.put(depMgtDependency.getManagementKey(), depMgtDependency);
exclusions.putAll(addExclusions(depMgtDependency.getExclusions()));
}
Set allDependencyArtifacts = new HashSet(project.getArtifacts());
if (this.ignoreDirect) {
getLog().info(""\tIgnoring Direct Dependencies."");
Set directDependencies = project.getDependencyArtifacts();
allDependencyArtifacts.removeAll(directDependencies);
}
List exclusionErrors = getExclusionErrors(exclusions, allDependencyArtifacts);
Iterator exclusionIter = exclusionErrors.iterator();
while (exclusionIter.hasNext()) {
Artifact exclusion = (Artifact) exclusionIter.next();
getLog().info(StringUtils.stripEnd(getArtifactManagementKey(exclusion), "":"") + "" was excluded in DepMgt, but version "" + exclusion.getVersion() + "" has been found in the dependency tree."");
foundError = true;
}
Map mismatch = getMismatch(depMgtMap, allDependencyArtifacts);
Iterator mismatchIter = mismatch.keySet().iterator();
while (mismatchIter.hasNext()) {
Artifact resolvedArtifact = (Artifact) mismatchIter.next();
Dependency depMgtDependency = (Dependency) mismatch.get(resolvedArtifact);
logMismatch(resolvedArtifact, depMgtDependency);
}
if (!foundError) {
getLog().info(""   None"");
}
} else {
getLog().info(""   Nothing in DepMgt."");
}
return foundError;
}","private boolean checkDependencyManagement() throws MojoExecutionException {
boolean booleanVar1 = booleanLiteral2;
getLog().info(""Found Resolved Dependency / DependencyManagement mismatches:"");
List listVar3 = listLiteral4;
DependencyManagement dependencymanagementVar5 = dependencymanagementLiteral6;
if (dependencymanagementVar5 != null) {
listVar3 = dependencymanagementVar5.getDependencies();
}
if (listVar3 != null && !listVar3.isEmpty()) {
Map mapVar7 = mapLiteral8;
Map mapVar9 = mapLiteral8;
Iterator iteratorVar10 = iteratorLiteral11;
while (iteratorVar10.hasNext()) {
Dependency dependencyVar12 = dependencyLiteral13;
mapVar7.put(dependencyVar12.getManagementKey(), dependencyVar12);
mapVar9.putAll(addExclusions(dependencyVar12.getExclusions()));
}
Set setVar14 = setLiteral15;
if (this.ignoreDirect) {
getLog().info(""\tIgnoring Direct Dependencies."");
Set setVar16 = setLiteral17;
setVar14.removeAll(setVar16);
}
List listVar18 = listLiteral19;
Iterator iteratorVar20 = iteratorLiteral21;
while (iteratorVar20.hasNext()) {
Artifact artifactVar22 = artifactLiteral23;
getLog().info(StringUtils.stripEnd(getArtifactManagementKey(artifactVar22), "":"") + "" was excluded in DepMgt, but version "" + artifactVar22.getVersion() + "" has been found in the dependency tree."");
booleanVar1 = true;
}
Map mapVar24 = mapLiteral25;
Iterator iteratorVar26 = iteratorLiteral27;
while (iteratorVar26.hasNext()) {
Artifact artifactVar28 = artifactLiteral29;
Dependency dependencyVar12 = dependencyLiteral30;
logMismatch(artifactVar28, dependencyVar12);
}
if (!booleanVar1) {
getLog().info(""   None"");
}
} else {
getLog().info(""   Nothing in DepMgt."");
}
return booleanVar1;
}"
13127,CORRECTNESS,UWF_UNWRITTEN_FIELD,FP,mavendp,1087,private MavenProject project;,private MavenProject project;,private MavenProject mavenprojectVar1;
13135,CORRECTNESS,UWF_UNWRITTEN_FIELD,FP,mavendp,1095,boolean attach;,boolean attach;,boolean booleanVar1;
13136,CORRECTNESS,UWF_UNWRITTEN_FIELD,FP,mavendp,1096,boolean outputFilterFile;,boolean outputFilterFile;,boolean booleanVar1;
13146,CORRECTNESS,UWF_UNWRITTEN_FIELD,FP,mavendp,1106,private boolean excludeTransitive;,private boolean excludeTransitive;,private boolean booleanVar1;
13148,BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,mavendp,1108,"file.getParentFile().mkdirs();
","public synchronized static void write(String string, File file, Log log) throws IOException {
file.getParentFile().mkdirs();
FileWriter writer = null;
try {
writer = new FileWriter(file);
writer.write(string);
} finally {
if (writer != null) {
try {
writer.close();
} catch (IOException exception) {
log.error(""Cannot close file"", exception);
}
}
}
}","public synchronized static void write(String string, File file, Log log) throws IOException {
file.getParentFile().mkdirs();
FileWriter filewriterVar1 = filewriterLiteral2;
try {
filewriterVar1 = new FileWriter(file);
filewriterVar1.write(string);
} finally {
if (filewriterVar1 != null) {
try {
filewriterVar1.close();
} catch (IOException exception) {
log.error(""Cannot close file"", exception);
}
}
}
}"
13187,DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,mavendp,1147,"unArchiver = archiverManager.getUnArchiver( file );
","protected void unpack(Artifact artifact, String type, File location, String includes, String excludes, String encoding, FileMapper[] fileMappers) throws MojoExecutionException {
File file = artifact.getFile();
try {
logUnpack(file, location, includes, excludes);
location.mkdirs();
if (!location.exists()) {
throw new MojoExecutionException(""Location to write unpacked files to could not be created: "" + location);
}
if (file.isDirectory()) {
// usual case is a future jar packaging, but there are special cases: classifier and other packaging
throw new MojoExecutionException(""Artifact has not been packaged yet. When used on reactor artifact, "" + ""unpack should be executed after packaging: see MDEP-98."");
}
UnArchiver unArchiver;
try {
unArchiver = archiverManager.getUnArchiver(type);
getLog().debug(""Found unArchiver by type: "" + unArchiver);
} catch (NoSuchArchiverException e) {
unArchiver = archiverManager.getUnArchiver(file);
getLog().debug(""Found unArchiver by extension: "" + unArchiver);
}
if (encoding != null && unArchiver instanceof ZipUnArchiver) {
((ZipUnArchiver) unArchiver).setEncoding(encoding);
getLog().info(""Unpacks '"" + type + ""' with encoding '"" + encoding + ""'."");
}
unArchiver.setIgnorePermissions(ignorePermissions);
unArchiver.setSourceFile(file);
unArchiver.setDestDirectory(location);
if (StringUtils.isNotEmpty(excludes) || StringUtils.isNotEmpty(includes)) {
IncludeExcludeFileSelector[] selectors = new IncludeExcludeFileSelector[] { new IncludeExcludeFileSelector() };
if (StringUtils.isNotEmpty(excludes)) {
selectors[0].setExcludes(excludes.split("",""));
}
if (StringUtils.isNotEmpty(includes)) {
selectors[0].setIncludes(includes.split("",""));
}
unArchiver.setFileSelectors(selectors);
}
if (this.silent) {
silenceUnarchiver(unArchiver);
}
unArchiver.setFileMappers(fileMappers);
unArchiver.extract();
} catch (NoSuchArchiverException e) {
throw new MojoExecutionException(""Unknown archiver type"", e);
} catch (ArchiverException e) {
throw new MojoExecutionException(""Error unpacking file: "" + file + "" to: "" + location, e);
}
}","protected void unpack(Artifact artifact, String type, File location, String includes, String excludes, String encoding, FileMapper[] fileMappers) throws MojoExecutionException {
File fileVar1 = fileLiteral2;
try {
logUnpack(fileVar1, location, includes, excludes);
location.mkdirs();
if (!location.exists()) {
throw new MojoExecutionException(""Location to write unpacked files to could not be created: "" + location);
}
if (fileVar1.isDirectory()) {
// usual case is a future jar packaging, but there are special cases: classifier and other packaging
throw new MojoExecutionException(""Artifact has not been packaged yet. When used on reactor artifact, "" + ""unpack should be executed after packaging: see MDEP-98."");
}
UnArchiver unarchiverVar3;
try {
unarchiverVar3 = archiverManager.getUnArchiver(type);
getLog().debug(""Found unArchiver by type: "" + unarchiverVar3);
} catch (NoSuchArchiverException e) {
unarchiverVar3 = archiverManager.getUnArchiver(fileVar1);
getLog().debug(""Found unArchiver by extension: "" + unarchiverVar3);
}
if (encoding != null && unarchiverVar3 instanceof ZipUnArchiver) {
((ZipUnArchiver) unarchiverVar3).setEncoding(encoding);
getLog().info(""Unpacks '"" + type + ""' with encoding '"" + encoding + ""'."");
}
unarchiverVar3.setIgnorePermissions(ignorePermissions);
unarchiverVar3.setSourceFile(fileVar1);
unarchiverVar3.setDestDirectory(location);
if (StringUtils.isNotEmpty(excludes) || StringUtils.isNotEmpty(includes)) {
IncludeExcludeFileSelector[] includeexcludefileselectorArrayVar4 = includeexcludefileselectorArrayLiteral5;
if (StringUtils.isNotEmpty(excludes)) {
includeexcludefileselectorArrayVar4[0].setExcludes(excludes.split("",""));
}
if (StringUtils.isNotEmpty(includes)) {
includeexcludefileselectorArrayVar4[0].setIncludes(includes.split("",""));
}
unarchiverVar3.setFileSelectors(includeexcludefileselectorArrayVar4);
}
if (this.silent) {
silenceUnarchiver(unarchiverVar3);
}
unarchiverVar3.setFileMappers(fileMappers);
unarchiverVar3.extract();
} catch (NoSuchArchiverException e) {
throw new MojoExecutionException(""Unknown archiver type"", e);
} catch (ArchiverException e) {
throw new MojoExecutionException(""Error unpacking file: "" + fileVar1 + "" to: "" + location, e);
}
}"
13189,PERFORMANCE,URF_UNREAD_FIELD,FP,mavendp,1149,"@Parameter(property = ""packaging"", defaultValue = ""jar"")
private String packaging = ""jar"";","@Parameter(property = ""packaging"", defaultValue = ""jar"")
private String packaging = ""jar"";","@Parameter(property = ""packaging"", defaultValue = ""jar"")
private String stringVar1 = stringLiteral2;"
13191,DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,mavendp,1151,"Set<Artifact> directDependencies = project.getDependencyArtifacts();
","private boolean checkDependencyManagement() throws MojoExecutionException {
boolean foundError = false;
getLog().info(""Found Resolved Dependency/DependencyManagement mismatches:"");
List<Dependency> depMgtDependencies = null;
DependencyManagement depMgt = project.getDependencyManagement();
if (depMgt != null) {
depMgtDependencies = depMgt.getDependencies();
}
if (depMgtDependencies != null && !depMgtDependencies.isEmpty()) {
Map<String, Dependency> depMgtMap = new HashMap<>();
Map<String, Exclusion> exclusions = new HashMap<>();
for (Dependency depMgtDependency : depMgtDependencies) {
depMgtMap.put(depMgtDependency.getManagementKey(), depMgtDependency);
exclusions.putAll(addExclusions(depMgtDependency.getExclusions()));
}
Set<Artifact> allDependencyArtifacts = new LinkedHashSet<>(project.getArtifacts());
if (this.ignoreDirect) {
getLog().info(""\tIgnoring Direct Dependencies."");
Set<Artifact> directDependencies = project.getDependencyArtifacts();
allDependencyArtifacts.removeAll(directDependencies);
}
List<Artifact> exclusionErrors = getExclusionErrors(exclusions, allDependencyArtifacts);
for (Artifact exclusion : exclusionErrors) {
getLog().info(StringUtils.stripEnd(getArtifactManagementKey(exclusion), "":"") + "" was excluded in DepMgt, but version "" + exclusion.getVersion() + "" has been found in the dependency tree."");
foundError = true;
}
Map<Artifact, Dependency> mismatch = getMismatch(depMgtMap, allDependencyArtifacts);
for (Map.Entry<Artifact, Dependency> entry : mismatch.entrySet()) {
logMismatch(entry.getKey(), entry.getValue());
foundError = true;
}
if (!foundError) {
getLog().info(""\tNone"");
}
} else {
getLog().info(""\tNothing in DepMgt."");
}
return foundError;
}","private boolean checkDependencyManagement() throws MojoExecutionException {
boolean booleanVar1 = booleanLiteral2;
getLog().info(""Found Resolved Dependency/DependencyManagement mismatches:"");
List<Dependency> list<dependency>Var3 = list<dependency>Literal4;
DependencyManagement dependencymanagementVar5 = dependencymanagementLiteral6;
if (dependencymanagementVar5 != null) {
list<dependency>Var3 = dependencymanagementVar5.getDependencies();
}
if (list<dependency>Var3 != null && !list<dependency>Var3.isEmpty()) {
Map<String, Dependency> map<string,dependency>Var7 = map<string,dependency>Literal8;
Map<String, Exclusion> map<string,exclusion>Var9 = map<string,dependency>Literal8;
for (Dependency dependencyVar10 : list<dependency>Var3) {
map<string,dependency>Var7.put(dependencyVar10.getManagementKey(), dependencyVar10);
map<string,exclusion>Var9.putAll(addExclusions(dependencyVar10.getExclusions()));
}
Set<Artifact> set<artifact>Var11 = set<artifact>Literal12;
if (this.ignoreDirect) {
getLog().info(""\tIgnoring Direct Dependencies."");
Set<Artifact> set<artifact>Var13 = set<artifact>Literal14;
set<artifact>Var11.removeAll(set<artifact>Var13);
}
List<Artifact> list<artifact>Var15 = list<artifact>Literal16;
for (Artifact artifactVar17 : list<artifact>Var15) {
getLog().info(StringUtils.stripEnd(getArtifactManagementKey(artifactVar17), "":"") + "" was excluded in DepMgt, but version "" + artifactVar17.getVersion() + "" has been found in the dependency tree."");
booleanVar1 = true;
}
Map<Artifact, Dependency> map<artifact,dependency>Var18 = map<artifact,dependency>Literal19;
for (Map.Entry<Artifact, Dependency> map.entry<artifact,dependency>Var20 : map<artifact,dependency>Var18.entrySet()) {
logMismatch(map.entry<artifact,dependency>Var20.getKey(), map.entry<artifact,dependency>Var20.getValue());
booleanVar1 = true;
}
if (!booleanVar1) {
getLog().info(""\tNone"");
}
} else {
getLog().info(""\tNothing in DepMgt."");
}
return booleanVar1;
}"
13192,BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,mavendp,1152,"artifactItem.getOutputDirectory().mkdirs();
","protected List<ArtifactItem> getProcessedArtifactItems(ProcessArtifactItemsRequest processArtifactItemsRequest) throws MojoExecutionException {
boolean removeVersion = processArtifactItemsRequest.isRemoveVersion(), prependGroupId = processArtifactItemsRequest.isPrependGroupId(), useBaseVersion = processArtifactItemsRequest.isUseBaseVersion();
boolean removeClassifier = processArtifactItemsRequest.isRemoveClassifier();
if (artifactItems == null || artifactItems.size() < 1) {
throw new MojoExecutionException(""There are no artifactItems configured."");
}
for (ArtifactItem artifactItem : artifactItems) {
this.getLog().info(""Configured Artifact: "" + artifactItem.toString());
if (artifactItem.getOutputDirectory() == null) {
artifactItem.setOutputDirectory(this.outputDirectory);
}
artifactItem.getOutputDirectory().mkdirs();
if (StringUtils.isEmpty(artifactItem.getVersion())) {
fillMissingArtifactVersion(artifactItem);
}
artifactItem.setArtifact(this.getArtifact(artifactItem));
if (StringUtils.isEmpty(artifactItem.getDestFileName())) {
artifactItem.setDestFileName(DependencyUtil.getFormattedFileName(artifactItem.getArtifact(), removeVersion, prependGroupId, useBaseVersion, removeClassifier));
}
try {
artifactItem.setNeedsProcessing(checkIfProcessingNeeded(artifactItem));
} catch (ArtifactFilterException e) {
throw new MojoExecutionException(e.getMessage(), e);
}
}
return artifactItems;
}","protected List<ArtifactItem> getProcessedArtifactItems(ProcessArtifactItemsRequest processArtifactItemsRequest) throws MojoExecutionException {
boolean booleanVar1 = booleanLiteral2, booleanVar3 = booleanLiteral4, booleanVar5 = booleanLiteral6;
boolean booleanVar7 = booleanLiteral8;
if (artifactItems == null || artifactItems.size() < 1) {
throw new MojoExecutionException(""There are no artifactItems configured."");
}
for (ArtifactItem artifactitemVar9 : artifactItems) {
this.getLog().info(""Configured Artifact: "" + artifactitemVar9.toString());
if (artifactitemVar9.getOutputDirectory() == null) {
artifactitemVar9.setOutputDirectory(this.outputDirectory);
}
artifactitemVar9.getOutputDirectory().mkdirs();
if (StringUtils.isEmpty(artifactitemVar9.getVersion())) {
fillMissingArtifactVersion(artifactitemVar9);
}
artifactitemVar9.setArtifact(this.getArtifact(artifactitemVar9));
if (StringUtils.isEmpty(artifactitemVar9.getDestFileName())) {
artifactitemVar9.setDestFileName(DependencyUtil.getFormattedFileName(artifactitemVar9.getArtifact(), booleanVar1, booleanVar3, booleanVar5, booleanVar7));
}
try {
artifactitemVar9.setNeedsProcessing(checkIfProcessingNeeded(artifactitemVar9));
} catch (ArtifactFilterException e) {
throw new MojoExecutionException(e.getMessage(), e);
}
}
return artifactItems;
}"
13194,MALICIOUS_CODE,EI_EXPOSE_REP,FP,mavendp,1154,"return this.fileMappers;
","public FileMapper[] getFileMappers() {
return this.fileMappers;
}","public FileMapper[] getFileMappers() {
return this.fileMappers;
}"
13195,DODGY_CODE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,FP,mavendp,1155,"@Parameter
protected boolean useJvmChmod = true;","@Parameter
protected boolean useJvmChmod = true;","@Parameter
protected boolean booleanVar1 = booleanLiteral2;"
13300,BAD_PRACTICE,ES_COMPARING_PARAMETER_STRING_WITH_EQ,FP,mavendp,1260,"return ( cpString == oldCp || ( cpString != null && cpString.equals( oldCp ) ) );
","private boolean isUpdToDate(String cpString) {
try {
String oldCp = readClasspathFile();
return (cpString == oldCp || (cpString != null && cpString.equals(oldCp)));
} catch (Exception ex) {
this.getLog().warn(""Error while reading old classpath file '"" + outputFile + ""' for up-to-date check: "" + ex);
return false;
}
}","private boolean isUpdToDate(String cpString) {
try {
String stringVar1 = stringLiteral2;
return (cpString == stringVar1 || (cpString != null && cpString.equals(stringVar1)));
} catch (Exception ex) {
this.getLog().warn(""Error while reading old classpath file '"" + outputFile + ""' for up-to-date check: "" + ex);
return false;
}
}"
13301,CORRECTNESS,NP_NULL_PARAM_DEREF,FP,mavendp,1261,"List<Artifact> artList = new ArrayList<Artifact>( artifacts );
","public void execute() throws MojoExecutionException {
if (cpFile != null) {
getLog().warn(""The parameter cpFile is deprecated. Use outputFile instead."");
this.outputFile = cpFile;
}
isFileSepSet = StringUtils.isNotEmpty(fileSeparator);
isPathSepSet = StringUtils.isNotEmpty(pathSeparator);
if (attach && StringUtils.isEmpty(localRepoProperty)) {
localRepoProperty = ""${M2_REPO}"";
}
Set<Artifact> artifacts = getResolvedDependencies(true);
if (artifacts == null || artifacts.isEmpty()) {
getLog().info(""No dependencies found."");
}
List<Artifact> artList = new ArrayList<Artifact>(artifacts);
StringBuilder sb = new StringBuilder();
Iterator<Artifact> i = artList.iterator();
if (i.hasNext()) {
appendArtifactPath(i.next(), sb);
while (i.hasNext()) {
sb.append(isPathSepSet ? this.pathSeparator : File.pathSeparator);
appendArtifactPath((Artifact) i.next(), sb);
}
}
String cpString = sb.toString();
if (isFileSepSet) {
final String pattern = Pattern.quote(File.separator);
final String replacement = Matcher.quoteReplacement(fileSeparator);
cpString = cpString.replaceAll(pattern, replacement);
}
if (outputFilterFile) {
cpString = ""classpath="" + cpString;
}
if (outputFile == null) {
getLog().info(""Dependencies classpath:\n"" + cpString);
} else {
if (regenerateFile || !isUpdToDate(cpString)) {
storeClasspathFile(cpString, outputFile);
} else {
this.getLog().info(""Skipped writing classpath file '"" + outputFile + ""'.  No changes found."");
}
}
if (attach) {
attachFile(cpString);
}
}","public void execute() throws MojoExecutionException {
if (cpFile != null) {
getLog().warn(""The parameter cpFile is deprecated. Use outputFile instead."");
this.outputFile = cpFile;
}
isFileSepSet = StringUtils.isNotEmpty(fileSeparator);
isPathSepSet = StringUtils.isNotEmpty(pathSeparator);
if (attach && StringUtils.isEmpty(localRepoProperty)) {
localRepoProperty = ""${M2_REPO}"";
}
Set<Artifact> set<artifact>Var1 = set<artifact>Literal2;
if (set<artifact>Var1 == null || set<artifact>Var1.isEmpty()) {
getLog().info(""No dependencies found."");
}
List<Artifact> list<artifact>Var3 = list<artifact>Literal4;
StringBuilder stringbuilderVar5 = stringbuilderLiteral6;
Iterator<Artifact> iterator<artifact>Var7 = iterator<artifact>Literal8;
if (iterator<artifact>Var7.hasNext()) {
appendArtifactPath(iterator<artifact>Var7.next(), stringbuilderVar5);
while (iterator<artifact>Var7.hasNext()) {
stringbuilderVar5.append(isPathSepSet ? this.pathSeparator : File.pathSeparator);
appendArtifactPath((Artifact) iterator<artifact>Var7.next(), stringbuilderVar5);
}
}
String stringVar9 = stringLiteral10;
if (isFileSepSet) {
final String stringVar11 = stringLiteral12;
final String stringVar13 = stringLiteral14;
stringVar9 = stringVar9.replaceAll(stringVar11, stringVar13);
}
if (outputFilterFile) {
stringVar9 = ""classpath="" + stringVar9;
}
if (outputFile == null) {
getLog().info(""Dependencies classpath:\n"" + stringVar9);
} else {
if (regenerateFile || !isUpdToDate(stringVar9)) {
storeClasspathFile(stringVar9, outputFile);
} else {
this.getLog().info(""Skipped writing classpath file '"" + outputFile + ""'.  No changes found."");
}
}
if (attach) {
attachFile(stringVar9);
}
}"
13303,BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,mavendp,1263,"out.getParentFile().mkdirs();
","private void storeClasspathFile(String cpString, File out) throws MojoExecutionException {
out.getParentFile().mkdirs();
Writer w = null;
try {
w = new BufferedWriter(new FileWriter(out));
w.write(cpString);
getLog().info(""Wrote classpath file '"" + out + ""'."");
} catch (IOException ex) {
throw new MojoExecutionException(""Error while writting to classpath file '"" + out + ""': "" + ex.toString(), ex);
} finally {
IOUtil.close(w);
}
}","private void storeClasspathFile(String cpString, File out) throws MojoExecutionException {
out.getParentFile().mkdirs();
Writer writerVar1 = writerLiteral2;
try {
writerVar1 = new BufferedWriter(new FileWriter(out));
writerVar1.write(cpString);
getLog().info(""Wrote classpath file '"" + out + ""'."");
} catch (IOException ex) {
throw new MojoExecutionException(""Error while writting to classpath file '"" + out + ""': "" + ex.toString(), ex);
} finally {
IOUtil.close(writerVar1);
}
}"
13310,I18N,DM_DEFAULT_ENCODING,FP,mavendp,1270,"outputWriter = new FileWriter( outputFile );
","public void execute() throws MojoExecutionException {
Writer outputWriter = null;
try {
Set<Artifact> plugins = resolvePluginArtifacts();
if (this.outputFile != null) {
outputFile.getParentFile().mkdirs();
outputWriter = new FileWriter(outputFile);
}
for (Artifact plugin : plugins) {
String logStr = ""Plugin Resolved: "" + DependencyUtil.getFormattedFileName(plugin, false);
if (!silent) {
this.getLog().info(logStr);
}
if (outputWriter != null) {
outputWriter.write(logStr);
outputWriter.write(""\n"");
}
if (!excludeTransitive) {
for (Artifact artifact : resolveArtifactDependencies(plugin)) {
logStr = ""    Plugin Dependency Resolved: "" + DependencyUtil.getFormattedFileName(artifact, false);
if (!silent) {
this.getLog().info(logStr);
}
if (outputWriter != null) {
outputWriter.write(logStr);
outputWriter.write(""\n"");
}
}
}
}
} catch (IOException e) {
throw new MojoExecutionException(""Nested:"", e);
} catch (ArtifactResolutionException e) {
throw new MojoExecutionException(""Nested:"", e);
} catch (ArtifactNotFoundException e) {
throw new MojoExecutionException(""Nested:"", e);
} catch (ProjectBuildingException e) {
throw new MojoExecutionException(""Nested:"", e);
} catch (InvalidDependencyVersionException e) {
throw new MojoExecutionException(""Nested:"", e);
} finally {
IOUtil.close(outputWriter);
}
}","public void execute() throws MojoExecutionException {
Writer writerVar1 = writerLiteral2;
try {
Set<Artifact> set<artifact>Var3 = set<artifact>Literal4;
if (this.outputFile != null) {
outputFile.getParentFile().mkdirs();
writerVar1 = new FileWriter(outputFile);
}
for (Artifact artifactVar5 : set<artifact>Var3) {
String stringVar6 = stringLiteral7;
if (!silent) {
this.getLog().info(stringVar6);
}
if (writerVar1 != null) {
writerVar1.write(stringVar6);
writerVar1.write(""\n"");
}
if (!excludeTransitive) {
for (Artifact artifactVar8 : resolveArtifactDependencies(artifactVar5)) {
stringVar6 = ""    Plugin Dependency Resolved: "" + DependencyUtil.getFormattedFileName(artifactVar8, false);
if (!silent) {
this.getLog().info(stringVar6);
}
if (writerVar1 != null) {
writerVar1.write(stringVar6);
writerVar1.write(""\n"");
}
}
}
}
} catch (IOException e) {
throw new MojoExecutionException(""Nested:"", e);
} catch (ArtifactResolutionException e) {
throw new MojoExecutionException(""Nested:"", e);
} catch (ArtifactNotFoundException e) {
throw new MojoExecutionException(""Nested:"", e);
} catch (ProjectBuildingException e) {
throw new MojoExecutionException(""Nested:"", e);
} catch (InvalidDependencyVersionException e) {
throw new MojoExecutionException(""Nested:"", e);
} finally {
IOUtil.close(writerVar1);
}
}"
13311,BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,mavendp,1271,"outputFile.getParentFile().mkdirs();
","public void execute() throws MojoExecutionException {
Writer outputWriter = null;
try {
Set<Artifact> plugins = resolvePluginArtifacts();
if (this.outputFile != null) {
outputFile.getParentFile().mkdirs();
outputWriter = new FileWriter(outputFile);
}
for (Artifact plugin : plugins) {
String logStr = ""Plugin Resolved: "" + DependencyUtil.getFormattedFileName(plugin, false);
if (!silent) {
this.getLog().info(logStr);
}
if (outputWriter != null) {
outputWriter.write(logStr);
outputWriter.write(""\n"");
}
if (!excludeTransitive) {
for (Artifact artifact : resolveArtifactDependencies(plugin)) {
logStr = ""    Plugin Dependency Resolved: "" + DependencyUtil.getFormattedFileName(artifact, false);
if (!silent) {
this.getLog().info(logStr);
}
if (outputWriter != null) {
outputWriter.write(logStr);
outputWriter.write(""\n"");
}
}
}
}
} catch (IOException e) {
throw new MojoExecutionException(""Nested:"", e);
} catch (ArtifactResolutionException e) {
throw new MojoExecutionException(""Nested:"", e);
} catch (ArtifactNotFoundException e) {
throw new MojoExecutionException(""Nested:"", e);
} catch (ProjectBuildingException e) {
throw new MojoExecutionException(""Nested:"", e);
} catch (InvalidDependencyVersionException e) {
throw new MojoExecutionException(""Nested:"", e);
} finally {
IOUtil.close(outputWriter);
}
}","public void execute() throws MojoExecutionException {
Writer writerVar1 = writerLiteral2;
try {
Set<Artifact> set<artifact>Var3 = set<artifact>Literal4;
if (this.outputFile != null) {
outputFile.getParentFile().mkdirs();
writerVar1 = new FileWriter(outputFile);
}
for (Artifact artifactVar5 : set<artifact>Var3) {
String stringVar6 = stringLiteral7;
if (!silent) {
this.getLog().info(stringVar6);
}
if (writerVar1 != null) {
writerVar1.write(stringVar6);
writerVar1.write(""\n"");
}
if (!excludeTransitive) {
for (Artifact artifactVar8 : resolveArtifactDependencies(artifactVar5)) {
stringVar6 = ""    Plugin Dependency Resolved: "" + DependencyUtil.getFormattedFileName(artifactVar8, false);
if (!silent) {
this.getLog().info(stringVar6);
}
if (writerVar1 != null) {
writerVar1.write(stringVar6);
writerVar1.write(""\n"");
}
}
}
}
} catch (IOException e) {
throw new MojoExecutionException(""Nested:"", e);
} catch (ArtifactResolutionException e) {
throw new MojoExecutionException(""Nested:"", e);
} catch (ArtifactNotFoundException e) {
throw new MojoExecutionException(""Nested:"", e);
} catch (ProjectBuildingException e) {
throw new MojoExecutionException(""Nested:"", e);
} catch (InvalidDependencyVersionException e) {
throw new MojoExecutionException(""Nested:"", e);
} finally {
IOUtil.close(writerVar1);
}
}"
13314,BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,mavendp,1274,"marker.getParentFile().mkdirs();
","public void setMarker() throws MojoExecutionException {
File marker = getMarkerFile();
try {
marker.getParentFile().mkdirs();
} catch (NullPointerException e) {
}
try {
marker.createNewFile();
} catch (IOException e) {
throw new MojoExecutionException(""Unable to create Marker: "" + marker.getAbsolutePath(), e);
}
try {
long ts;
if (this.artifact != null && this.artifact.getFile() != null) {
ts = this.artifact.getFile().lastModified();
} else {
ts = System.currentTimeMillis();
}
marker.setLastModified(ts);
} catch (Exception e) {
throw new MojoExecutionException(""Unable to update Marker timestamp: "" + marker.getAbsolutePath(), e);
}
}","public void setMarker() throws MojoExecutionException {
File fileVar1 = fileLiteral2;
try {
fileVar1.getParentFile().mkdirs();
} catch (NullPointerException e) {
}
try {
fileVar1.createNewFile();
} catch (IOException e) {
throw new MojoExecutionException(""Unable to create Marker: "" + fileVar1.getAbsolutePath(), e);
}
try {
long longVar3;
if (this.artifact != null && this.artifact.getFile() != null) {
longVar3 = this.artifact.getFile().lastModified();
} else {
longVar3 = System.currentTimeMillis();
}
fileVar1.setLastModified(longVar3);
} catch (Exception e) {
throw new MojoExecutionException(""Unable to update Marker timestamp: "" + fileVar1.getAbsolutePath(), e);
}
}"
13353,BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,mavendp,1313,"location.mkdirs();
","protected void unpack(Artifact artifact, String type, File location, String includes, String excludes, String encoding, FileMapper[] fileMappers) throws MojoExecutionException {
File file = artifact.getFile();
try {
logUnpack(file, location, includes, excludes);
location.mkdirs();
if (!location.exists()) {
throw new MojoExecutionException(""Location to write unpacked files to could not be created: "" + location);
}
if (file.isDirectory()) {
// usual case is a future jar packaging, but there are special cases: classifier and other packaging
throw new MojoExecutionException(""Artifact has not been packaged yet. When used on reactor artifact, "" + ""unpack should be executed after packaging: see MDEP-98."");
}
UnArchiver unArchiver;
try {
unArchiver = archiverManager.getUnArchiver(type);
getLog().debug(""Found unArchiver by type: "" + unArchiver);
} catch (NoSuchArchiverException e) {
unArchiver = archiverManager.getUnArchiver(file);
getLog().debug(""Found unArchiver by extension: "" + unArchiver);
}
if (encoding != null && unArchiver instanceof ZipUnArchiver) {
((ZipUnArchiver) unArchiver).setEncoding(encoding);
getLog().info(""Unpacks '"" + type + ""' with encoding '"" + encoding + ""'."");
}
unArchiver.setIgnorePermissions(ignorePermissions);
unArchiver.setSourceFile(file);
unArchiver.setDestDirectory(location);
if (StringUtils.isNotEmpty(excludes) || StringUtils.isNotEmpty(includes)) {
IncludeExcludeFileSelector[] selectors = new IncludeExcludeFileSelector[] { new IncludeExcludeFileSelector() };
if (StringUtils.isNotEmpty(excludes)) {
selectors[0].setExcludes(excludes.split("",""));
}
if (StringUtils.isNotEmpty(includes)) {
selectors[0].setIncludes(includes.split("",""));
}
unArchiver.setFileSelectors(selectors);
}
if (this.silent) {
silenceUnarchiver(unArchiver);
}
unArchiver.setFileMappers(fileMappers);
unArchiver.extract();
} catch (NoSuchArchiverException e) {
throw new MojoExecutionException(""Unknown archiver type"", e);
} catch (ArchiverException e) {
throw new MojoExecutionException(""Error unpacking file: "" + file + "" to: "" + location + System.lineSeparator() + e.toString(), e);
}
}","protected void unpack(Artifact artifact, String type, File location, String includes, String excludes, String encoding, FileMapper[] fileMappers) throws MojoExecutionException {
File fileVar1 = fileLiteral2;
try {
logUnpack(fileVar1, location, includes, excludes);
location.mkdirs();
if (!location.exists()) {
throw new MojoExecutionException(""Location to write unpacked files to could not be created: "" + location);
}
if (fileVar1.isDirectory()) {
// usual case is a future jar packaging, but there are special cases: classifier and other packaging
throw new MojoExecutionException(""Artifact has not been packaged yet. When used on reactor artifact, "" + ""unpack should be executed after packaging: see MDEP-98."");
}
UnArchiver unarchiverVar3;
try {
unarchiverVar3 = archiverManager.getUnArchiver(type);
getLog().debug(""Found unArchiver by type: "" + unarchiverVar3);
} catch (NoSuchArchiverException e) {
unarchiverVar3 = archiverManager.getUnArchiver(fileVar1);
getLog().debug(""Found unArchiver by extension: "" + unarchiverVar3);
}
if (encoding != null && unarchiverVar3 instanceof ZipUnArchiver) {
((ZipUnArchiver) unarchiverVar3).setEncoding(encoding);
getLog().info(""Unpacks '"" + type + ""' with encoding '"" + encoding + ""'."");
}
unarchiverVar3.setIgnorePermissions(ignorePermissions);
unarchiverVar3.setSourceFile(fileVar1);
unarchiverVar3.setDestDirectory(location);
if (StringUtils.isNotEmpty(excludes) || StringUtils.isNotEmpty(includes)) {
IncludeExcludeFileSelector[] includeexcludefileselectorArrayVar4 = includeexcludefileselectorArrayLiteral5;
if (StringUtils.isNotEmpty(excludes)) {
includeexcludefileselectorArrayVar4[0].setExcludes(excludes.split("",""));
}
if (StringUtils.isNotEmpty(includes)) {
includeexcludefileselectorArrayVar4[0].setIncludes(includes.split("",""));
}
unarchiverVar3.setFileSelectors(includeexcludefileselectorArrayVar4);
}
if (this.silent) {
silenceUnarchiver(unarchiverVar3);
}
unarchiverVar3.setFileMappers(fileMappers);
unarchiverVar3.extract();
} catch (NoSuchArchiverException e) {
throw new MojoExecutionException(""Unknown archiver type"", e);
} catch (ArchiverException e) {
throw new MojoExecutionException(""Error unpacking file: "" + fileVar1 + "" to: "" + location + System.lineSeparator() + e.toString(), e);
}
}"
13357,DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,FP,mavendp,1317,"if ( artifact != null )
","private ProjectBuildingRequest makeBuildingRequest() throws MojoExecutionException, MojoFailureException {
if (artifact == null) {
throw new MojoFailureException(""You must specify an artifact, "" + ""e.g. -Dartifact=org.apache.maven.plugins:maven-downloader-plugin:1.0"");
}
if (artifact != null) {
String[] tokens = artifact.split("":"");
if (tokens.length < 3 || tokens.length > 5) {
throw new MojoFailureException(""Invalid artifact, you must specify "" + ""groupId:artifactId:version[:packaging[:classifier]] "" + artifact);
}
coordinate.setGroupId(tokens[0]);
coordinate.setArtifactId(tokens[1]);
coordinate.setVersion(tokens[2]);
if (tokens.length >= 4) {
coordinate.setType(tokens[3]);
}
if (tokens.length == 5) {
coordinate.setClassifier(tokens[4]);
}
}
ArtifactRepositoryPolicy always = new ArtifactRepositoryPolicy(true, ArtifactRepositoryPolicy.UPDATE_POLICY_ALWAYS, ArtifactRepositoryPolicy.CHECKSUM_POLICY_WARN);
List<ArtifactRepository> repoList = new ArrayList<>();
if (pomRemoteRepositories != null) {
repoList.addAll(pomRemoteRepositories);
}
if (remoteRepositories != null) {
// Use the same format as in the deploy plugin id::layout::url
String[] repos = remoteRepositories.split("","");
for (String repo : repos) {
repoList.add(parseRepository(repo, always));
}
}
ProjectBuildingRequest buildingRequest = new DefaultProjectBuildingRequest(session.getProjectBuildingRequest());
Settings settings = session.getSettings();
repositorySystem.injectMirror(repoList, settings.getMirrors());
repositorySystem.injectProxy(repoList, settings.getProxies());
repositorySystem.injectAuthentication(repoList, settings.getServers());
buildingRequest.setRemoteRepositories(repoList);
return buildingRequest;
}","private ProjectBuildingRequest makeBuildingRequest() throws MojoExecutionException, MojoFailureException {
if (artifact == null) {
throw new MojoFailureException(""You must specify an artifact, "" + ""e.g. -Dartifact=org.apache.maven.plugins:maven-downloader-plugin:1.0"");
}
if (artifact != null) {
String[] stringArrayVar1 = stringArrayLiteral2;
if (stringArrayVar1.length < 3 || stringArrayVar1.length > 5) {
throw new MojoFailureException(""Invalid artifact, you must specify "" + ""groupId:artifactId:version[:packaging[:classifier]] "" + artifact);
}
coordinate.setGroupId(stringArrayVar1[0]);
coordinate.setArtifactId(stringArrayVar1[1]);
coordinate.setVersion(stringArrayVar1[2]);
if (stringArrayVar1.length >= 4) {
coordinate.setType(stringArrayVar1[3]);
}
if (stringArrayVar1.length == 5) {
coordinate.setClassifier(stringArrayVar1[4]);
}
}
ArtifactRepositoryPolicy artifactrepositorypolicyVar3 = artifactrepositorypolicyLiteral4;
List<ArtifactRepository> list<artifactrepository>Var5 = list<artifactrepository>Literal6;
if (pomRemoteRepositories != null) {
list<artifactrepository>Var5.addAll(pomRemoteRepositories);
}
if (remoteRepositories != null) {
// Use the same format as in the deploy plugin id::layout::url
String[] stringArrayVar7 = stringArrayLiteral8;
for (String stringVar9 : stringArrayVar7) {
list<artifactrepository>Var5.add(parseRepository(stringVar9, artifactrepositorypolicyVar3));
}
}
ProjectBuildingRequest projectbuildingrequestVar10 = projectbuildingrequestLiteral11;
Settings settingsVar12 = settingsLiteral13;
repositorySystem.injectMirror(list<artifactrepository>Var5, settingsVar12.getMirrors());
repositorySystem.injectProxy(list<artifactrepository>Var5, settingsVar12.getProxies());
repositorySystem.injectAuthentication(list<artifactrepository>Var5, settingsVar12.getServers());
projectbuildingrequestVar10.setRemoteRepositories(list<artifactrepository>Var5);
return projectbuildingrequestVar10;
}"
13360,BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,mavendp,1320,"artifactItem.getOutputDirectory().mkdirs();
","protected List<ArtifactItem> getProcessedArtifactItems(ProcessArtifactItemsRequest processArtifactItemsRequest) throws MojoExecutionException {
boolean removeVersion = processArtifactItemsRequest.isRemoveVersion(), prependGroupId = processArtifactItemsRequest.isPrependGroupId(), useBaseVersion = processArtifactItemsRequest.isUseBaseVersion();
boolean removeClassifier = processArtifactItemsRequest.isRemoveClassifier();
if (artifactItems == null || artifactItems.size() < 1) {
throw new MojoExecutionException(""There are no artifactItems configured."");
}
for (ArtifactItem artifactItem : artifactItems) {
this.getLog().info(""Configured Artifact: "" + artifactItem.toString());
if (artifactItem.getOutputDirectory() == null) {
artifactItem.setOutputDirectory(this.outputDirectory);
}
artifactItem.getOutputDirectory().mkdirs();
if (StringUtils.isEmpty(artifactItem.getVersion())) {
fillMissingArtifactVersion(artifactItem);
}
artifactItem.setArtifact(this.getArtifact(artifactItem));
if (StringUtils.isEmpty(artifactItem.getDestFileName())) {
artifactItem.setDestFileName(DependencyUtil.getFormattedFileName(artifactItem.getArtifact(), removeVersion, prependGroupId, useBaseVersion, removeClassifier));
}
try {
artifactItem.setNeedsProcessing(checkIfProcessingNeeded(artifactItem));
} catch (ArtifactFilterException e) {
throw new MojoExecutionException(e.getMessage(), e);
}
}
return artifactItems;
}","protected List<ArtifactItem> getProcessedArtifactItems(ProcessArtifactItemsRequest processArtifactItemsRequest) throws MojoExecutionException {
boolean booleanVar1 = booleanLiteral2, booleanVar3 = booleanLiteral4, booleanVar5 = booleanLiteral6;
boolean booleanVar7 = booleanLiteral8;
if (artifactItems == null || artifactItems.size() < 1) {
throw new MojoExecutionException(""There are no artifactItems configured."");
}
for (ArtifactItem artifactitemVar9 : artifactItems) {
this.getLog().info(""Configured Artifact: "" + artifactitemVar9.toString());
if (artifactitemVar9.getOutputDirectory() == null) {
artifactitemVar9.setOutputDirectory(this.outputDirectory);
}
artifactitemVar9.getOutputDirectory().mkdirs();
if (StringUtils.isEmpty(artifactitemVar9.getVersion())) {
fillMissingArtifactVersion(artifactitemVar9);
}
artifactitemVar9.setArtifact(this.getArtifact(artifactitemVar9));
if (StringUtils.isEmpty(artifactitemVar9.getDestFileName())) {
artifactitemVar9.setDestFileName(DependencyUtil.getFormattedFileName(artifactitemVar9.getArtifact(), booleanVar1, booleanVar3, booleanVar5, booleanVar7));
}
try {
artifactitemVar9.setNeedsProcessing(checkIfProcessingNeeded(artifactitemVar9));
} catch (ArtifactFilterException e) {
throw new MojoExecutionException(e.getMessage(), e);
}
}
return artifactItems;
}"
13366,BAD_PRACTICE,SE_COMPARATOR_SHOULD_BE_SERIALIZABLE,FP,mavendp,1326,"@Mojo( name = ""build-classpath"", requiresDependencyResolution = ResolutionScope.TEST, defaultPhase = LifecyclePhase.GENERATE_SOURCES, threadSafe = true )
// CHECKSTYLE_ON: LineLength
public class BuildClasspathMojo
extends AbstractDependencyFilterMojo
implements Comparator<Artifact>
{
@Parameter( property = ""outputEncoding"", defaultValue = ""${project.reporting.outputEncoding}"" )
private String outputEncoding;
@Parameter( property = ""mdep.stripVersion"", defaultValue = ""false"" )
private boolean stripVersion = false;
@Parameter( property = ""mdep.stripClassifier"", defaultValue = ""false"" )
private boolean stripClassifier = false;
@Parameter( property = ""mdep.prefix"" )
private String prefix;
@Parameter( property = ""mdep.outputProperty"" )
private String outputProperty;
@Parameter( property = ""mdep.outputFile"" )
private File outputFile;
@Parameter( property = ""mdep.regenerateFile"", defaultValue = ""false"" )
private boolean regenerateFile;
@Parameter( property = ""mdep.fileSeparator"", defaultValue = """" )
private String fileSeparator;
@Parameter( property = ""mdep.pathSeparator"", defaultValue = """" )
private String pathSeparator;
@Parameter( property = ""mdep.localRepoProperty"", defaultValue = """" )
private String localRepoProperty;
@Parameter( defaultValue = ""false"" )
private boolean attach;
@Parameter( property = ""mdep.outputFilterFile"", defaultValue = ""false"" )
private boolean outputFilterFile;
@Parameter( property = ""mdep.useBaseVersion"", defaultValue = ""true"" )
private boolean useBaseVersion = true;
@Component
private MavenProjectHelper projectHelper;
@Component
private RepositoryManager repositoryManager;
@Override
protected void doExecute()
throws MojoExecutionException
{
boolean isFileSepSet = StringUtils.isNotEmpty( fileSeparator );
boolean isPathSepSet = StringUtils.isNotEmpty( pathSeparator );
if ( attach && StringUtils.isEmpty( localRepoProperty ) )
{
localRepoProperty = ""${M2_REPO}"";
}
Set<Artifact> artifacts = getResolvedDependencies( true );
if ( artifacts == null || artifacts.isEmpty() )
{
getLog().info( ""No dependencies found."" );
}
List<Artifact> artList = new ArrayList<>( artifacts );
StringBuilder sb = new StringBuilder();
Iterator<Artifact> i = artList.iterator();
if ( i.hasNext() )
{
appendArtifactPath( i.next(), sb );
while ( i.hasNext() )
{
sb.append( isPathSepSet ? this.pathSeparator : File.pathSeparator );
appendArtifactPath( i.next(), sb );
}
}
String cpString = sb.toString();
if ( isFileSepSet )
{
final String pattern = Pattern.quote( File.separator );
final String replacement = Matcher.quoteReplacement( fileSeparator );
cpString = cpString.replaceAll( pattern, replacement );
}
if ( outputFilterFile )
{
cpString = ""classpath="" + cpString;
}
if ( outputProperty != null )
{
getProject().getProperties().setProperty( outputProperty, cpString );
if ( getLog().isDebugEnabled() )
{
getLog().debug( outputProperty + "" = "" + cpString );
}
}
if ( outputFile == null )
{
getLog().info( ""Dependencies classpath:"" + System.lineSeparator() + cpString );
}
else
{
if ( regenerateFile || !isUpToDate( cpString ) )
{
storeClasspathFile( cpString, outputFile );
}
else
{
this.getLog().info( ""Skipped writing classpath file '"" + outputFile + ""'.  No changes found."" );
}
}
if ( attach )
{
attachFile( cpString );
}
}
protected void attachFile( String cpString )
throws MojoExecutionException
{
File attachedFile = new File( getProject().getBuild().getDirectory(), ""classpath"" );
storeClasspathFile( cpString, attachedFile );
projectHelper.attachArtifact( getProject(), attachedFile, ""classpath"" );
}
protected void appendArtifactPath( Artifact art, StringBuilder sb )
{
if ( prefix == null )
{
String file = art.getFile().getPath();
if ( StringUtils.isNotEmpty( localRepoProperty ) )
{
ProjectBuildingRequest projectBuildingRequest = session.getProjectBuildingRequest();
File localBasedir = repositoryManager.getLocalRepositoryBasedir( projectBuildingRequest );
file = StringUtils.replace( file, localBasedir.getAbsolutePath(), localRepoProperty );
}
sb.append( file );
}
else
{
// TODO: add param for prepending groupId and version.
sb.append( prefix );
sb.append( File.separator );
sb.append( DependencyUtil.getFormattedFileName( art, this.stripVersion, this.prependGroupId,
this.useBaseVersion, this.stripClassifier ) );
}
}
private boolean isUpToDate( String cpString )
{
try
{
String oldCp = readClasspathFile();
return ( cpString == null ? oldCp == null : cpString.equals( oldCp ) );
}
catch ( IOException ex )
{
this.getLog().warn( ""Error while reading old classpath file '"" + outputFile + ""' for up-to-date check: ""
+ ex );
return false;
}
}
private void storeClasspathFile( String cpString, File out )
throws MojoExecutionException
{
out.getParentFile().mkdirs();
String encoding = Objects.toString( outputEncoding, ""UTF-8"" );
try ( Writer w =
new BufferedWriter( new OutputStreamWriter( new FileOutputStream( out ), encoding ) ) )
{
w.write( cpString );
getLog().info( ""Wrote classpath file '"" + out + ""'."" );
}
catch ( IOException ex )
{
throw new MojoExecutionException( ""Error while writing to classpath file '"" + out + ""': "" + ex.toString(),
ex );
}
}
protected String readClasspathFile()
throws IOException
{
if ( outputFile == null )
{
throw new IllegalArgumentException( ""The outputFile parameter ""
+ ""cannot be null if the file is intended to be read."" );
}
if ( !outputFile.isFile() )
{
return null;
}
StringBuilder sb = new StringBuilder();
String encoding = Objects.toString( outputEncoding, ""UTF-8"" );
try ( BufferedReader r =
new BufferedReader( new InputStreamReader( new FileInputStream( outputFile ), encoding ) ) )
{
for ( String line = r.readLine(); line != null; line = r.readLine() )
{
sb.append( line );
}
return sb.toString();
}
}
@Override
public int compare( Artifact art1, Artifact art2 )
{
if ( art1 == art2 )
{
return 0;
}
else if ( art1 == null )
{
return -1;
}
else if ( art2 == null )
{
return +1;
}
String s1 = art1.getGroupId() + art1.getArtifactId() + art1.getVersion();
String s2 = art2.getGroupId() + art2.getArtifactId() + art2.getVersion();
return s1.compareTo( s2 );
}
@Override
protected ArtifactsFilter getMarkedArtifactFilter()
{
return null;
}
public void setOutputFile( File outputFile )
{
this.outputFile = outputFile;
}
public void setOutputProperty( String theOutputProperty )
{
this.outputProperty = theOutputProperty;
}
public void setFileSeparator( String theFileSeparator )
{
this.fileSeparator = theFileSeparator;
}
public void setPathSeparator( String thePathSeparator )
{
this.pathSeparator = thePathSeparator;
}
public void setPrefix( String thePrefix )
{
this.prefix = thePrefix;
}
public void setRegenerateFile( boolean theRegenerateFile )
{
this.regenerateFile = theRegenerateFile;
}
public boolean isStripVersion()
{
return this.stripVersion;
}
public void setStripVersion( boolean theStripVersion )
{
this.stripVersion = theStripVersion;
}
public void setLocalRepoProperty( String localRepoProperty )
{
this.localRepoProperty = localRepoProperty;
}
","private void storeClasspathFile(String cpString, File out) throws MojoExecutionException {
out.getParentFile().mkdirs();
String encoding = Objects.toString(outputEncoding, ""UTF-8"");
try (Writer w = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(out), encoding))) {
w.write(cpString);
getLog().info(""Wrote classpath file '"" + out + ""'."");
} catch (IOException ex) {
throw new MojoExecutionException(""Error while writing to classpath file '"" + out + ""': "" + ex.toString(), ex);
}
}","private void storeClasspathFile(String cpString, File out) throws MojoExecutionException {
out.getParentFile().mkdirs();
String stringVar1 = stringLiteral2;
try (Writer writerVar3 = writerLiteral4) {
writerVar3.write(cpString);
getLog().info(""Wrote classpath file '"" + out + ""'."");
} catch (IOException ex) {
throw new MojoExecutionException(""Error while writing to classpath file '"" + out + ""': "" + ex.toString(), ex);
}
}"
13369,DODGY_CODE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,FP,mavendp,1329,"@Parameter
protected boolean useJvmChmod = true;","@Parameter
protected boolean useJvmChmod = true;","@Parameter
protected boolean booleanVar1 = booleanLiteral2;"
13371,MALICIOUS_CODE,EI_EXPOSE_REP,FP,mavendp,1331,"return this.fileMappers;
","public FileMapper[] getFileMappers() {
return this.fileMappers;
}","public FileMapper[] getFileMappers() {
return this.fileMappers;
}"
13376,DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,FP,mavendp,1336,"if ( plugins == null || plugins.isEmpty() )
","@Override
protected void doExecute() throws MojoExecutionException {
try {
final Set<Artifact> plugins = resolvePluginArtifacts();
StringBuilder sb = new StringBuilder();
sb.append(System.lineSeparator());
sb.append(""The following plugins have been resolved:"");
sb.append(System.lineSeparator());
if (plugins == null || plugins.isEmpty()) {
sb.append(""   none"");
sb.append(System.lineSeparator());
} else {
for (Artifact plugin : plugins) {
String artifactFilename = null;
if (outputAbsoluteArtifactFilename) {
try {
artifactFilename = plugin.getFile().getAbsoluteFile().getPath();
} catch (NullPointerException e) {
artifactFilename = null;
}
}
String id = plugin.toString();
sb.append(""   "").append(id).append(outputAbsoluteArtifactFilename ? "":"" + artifactFilename : """").append(System.lineSeparator());
if (!excludeTransitive) {
DefaultDependableCoordinate pluginCoordinate = new DefaultDependableCoordinate();
pluginCoordinate.setGroupId(plugin.getGroupId());
pluginCoordinate.setArtifactId(plugin.getArtifactId());
pluginCoordinate.setVersion(plugin.getVersion());
for (final Artifact artifact : resolveArtifactDependencies(pluginCoordinate)) {
artifactFilename = null;
if (outputAbsoluteArtifactFilename) {
try {
artifactFilename = artifact.getFile().getAbsoluteFile().getPath();
} catch (NullPointerException e) {
artifactFilename = null;
}
}
id = artifact.toString();
sb.append(""      "").append(id).append(outputAbsoluteArtifactFilename ? "":"" + artifactFilename : """").append(System.lineSeparator());
}
}
}
sb.append(System.lineSeparator());
String output = sb.toString();
if (outputFile == null) {
DependencyUtil.log(output, getLog());
} else {
String encoding = Objects.toString(outputEncoding, ""UTF-8"");
DependencyUtil.write(output, outputFile, appendOutput, encoding);
}
}
} catch (IOException | ArtifactFilterException | ArtifactResolverException | DependencyResolverException e) {
throw new MojoExecutionException(e.getMessage(), e);
}
}","@Override
protected void doExecute() throws MojoExecutionException {
try {
final Set<Artifact> set<artifact>Var1 = set<artifact>Literal2;
StringBuilder stringbuilderVar3 = stringbuilderLiteral4;
stringbuilderVar3.append(System.lineSeparator());
stringbuilderVar3.append(""The following plugins have been resolved:"");
stringbuilderVar3.append(System.lineSeparator());
if (set<artifact>Var1 == null || set<artifact>Var1.isEmpty()) {
stringbuilderVar3.append(""   none"");
stringbuilderVar3.append(System.lineSeparator());
} else {
for (Artifact artifactVar5 : set<artifact>Var1) {
String stringVar6 = stringLiteral7;
if (outputAbsoluteArtifactFilename) {
try {
stringVar6 = artifactVar5.getFile().getAbsoluteFile().getPath();
} catch (NullPointerException e) {
stringVar6 = null;
}
}
String stringVar8 = stringLiteral9;
stringbuilderVar3.append(""   "").append(stringVar8).append(outputAbsoluteArtifactFilename ? "":"" + stringVar6 : """").append(System.lineSeparator());
if (!excludeTransitive) {
DefaultDependableCoordinate defaultdependablecoordinateVar10 = defaultdependablecoordinateLiteral11;
defaultdependablecoordinateVar10.setGroupId(artifactVar5.getGroupId());
defaultdependablecoordinateVar10.setArtifactId(artifactVar5.getArtifactId());
defaultdependablecoordinateVar10.setVersion(artifactVar5.getVersion());
for (final Artifact artifactVar12 : resolveArtifactDependencies(defaultdependablecoordinateVar10)) {
stringVar6 = null;
if (outputAbsoluteArtifactFilename) {
try {
stringVar6 = artifactVar12.getFile().getAbsoluteFile().getPath();
} catch (NullPointerException e) {
stringVar6 = null;
}
}
stringVar8 = artifactVar12.toString();
stringbuilderVar3.append(""      "").append(stringVar8).append(outputAbsoluteArtifactFilename ? "":"" + stringVar6 : """").append(System.lineSeparator());
}
}
}
stringbuilderVar3.append(System.lineSeparator());
String stringVar13 = stringLiteral14;
if (outputFile == null) {
DependencyUtil.log(stringVar13, getLog());
} else {
String stringVar15 = stringLiteral16;
DependencyUtil.write(stringVar13, outputFile, appendOutput, stringVar15);
}
}
} catch (IOException | ArtifactFilterException | ArtifactResolverException | DependencyResolverException e) {
throw new MojoExecutionException(e.getMessage(), e);
}
}"
13377,DODGY_CODE,UC_USELESS_OBJECT,FP,mavendp,1337,"List<org.apache.maven.model.Exclusion> exclusions = new ArrayList<>();
","private DependencyNode buildTree(DependencyNode parent, org.eclipse.aether.graph.DependencyNode child) {
List<org.apache.maven.model.Exclusion> exclusions = new ArrayList<>();
for (org.eclipse.aether.graph.Exclusion exclusion : child.getDependency().getExclusions()) {
exclusions.add(convertAetherExclusionToMavenExclusion(exclusion));
}
DefaultDependencyNode newChild = new DefaultDependencyNode(parent, convertAetherArtifactToMavenArtifact(child), child.getArtifact().getProperties().get(""preManagedVersion""), child.getArtifact().getProperties().get(""preManagedScope""), null, child.getDependency().isOptional());
newChild.setChildren(new ArrayList<DependencyNode>());
for (org.eclipse.aether.graph.DependencyNode grandChild : child.getChildren()) {
newChild.getChildren().add(buildTree(newChild, grandChild));
}
return newChild;
}","private DependencyNode buildTree(DependencyNode parent, org.eclipse.aether.graph.DependencyNode child) {
List<org.apache.maven.model.Exclusion> list<org.apache.maven.model.exclusion>Var1 = list<org.apache.maven.model.exclusion>Literal2;
for (org.eclipse.aether.graph.Exclusion org.eclipse.aether.graph.exclusionVar3 : child.getDependency().getExclusions()) {
list<org.apache.maven.model.exclusion>Var1.add(convertAetherExclusionToMavenExclusion(org.eclipse.aether.graph.exclusionVar3));
}
DefaultDependencyNode defaultdependencynodeVar4 = defaultdependencynodeLiteral5;
defaultdependencynodeVar4.setChildren(new ArrayList<DependencyNode>());
for (org.eclipse.aether.graph.DependencyNode org.eclipse.aether.graph.dependencynodeVar6 : child.getChildren()) {
defaultdependencynodeVar4.getChildren().add(buildTree(defaultdependencynodeVar4, org.eclipse.aether.graph.dependencynodeVar6));
}
return defaultdependencynodeVar4;
}"
13379,BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,mavendp,1339,"file.getParentFile().mkdirs();
","public static synchronized void write(String string, File file, boolean append, String encoding) throws IOException {
file.getParentFile().mkdirs();
try (Writer writer = new OutputStreamWriter(new FileOutputStream(file, append), encoding)) {
writer.write(string);
}
}","public static synchronized void write(String string, File file, boolean append, String encoding) throws IOException {
file.getParentFile().mkdirs();
try (Writer writerVar1 = writerLiteral2) {
writerVar1.write(string);
}
}"
13381,BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,mavendp,1341,"marker.createNewFile();
","@Override
public void setMarker() throws MojoExecutionException {
File marker = getMarkerFile();
try {
marker.getParentFile().mkdirs();
} catch (NullPointerException e) {
}
try {
marker.createNewFile();
} catch (IOException e) {
throw new MojoExecutionException(""Unable to create Marker: "" + marker.getAbsolutePath(), e);
}
try {
long ts;
if (this.artifact != null && this.artifact.getFile() != null) {
ts = this.artifact.getFile().lastModified();
} else {
ts = System.currentTimeMillis();
}
if (!marker.setLastModified(ts)) {
throw new MojoExecutionException(""Unable to update last modified timestamp on marker file "" + marker.getAbsolutePath());
}
} catch (Exception e) {
throw new MojoExecutionException(""Unable to update Marker timestamp: "" + marker.getAbsolutePath(), e);
}
}","@Override
public void setMarker() throws MojoExecutionException {
File fileVar1 = fileLiteral2;
try {
fileVar1.getParentFile().mkdirs();
} catch (NullPointerException e) {
}
try {
fileVar1.createNewFile();
} catch (IOException e) {
throw new MojoExecutionException(""Unable to create Marker: "" + fileVar1.getAbsolutePath(), e);
}
try {
long longVar3;
if (this.artifact != null && this.artifact.getFile() != null) {
longVar3 = this.artifact.getFile().lastModified();
} else {
longVar3 = System.currentTimeMillis();
}
if (!fileVar1.setLastModified(longVar3)) {
throw new MojoExecutionException(""Unable to update last modified timestamp on marker file "" + fileVar1.getAbsolutePath());
}
} catch (Exception e) {
throw new MojoExecutionException(""Unable to update Marker timestamp: "" + fileVar1.getAbsolutePath(), e);
}
}"
13387,DODGY_CODE,UUF_UNUSED_PUBLIC_OR_PROTECTED_FIELD,FP,mavendp,1347,protected List reactorProjects;,protected List reactorProjects;,protected List listVar1;
13389,BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,mavendp,1349,"location.mkdirs();
","protected void unpack(File file, File location) throws MojoExecutionException {
try {
location.mkdirs();
UnArchiver unArchiver;
unArchiver = archiverManager.getUnArchiver(file);
unArchiver.setSourceFile(file);
unArchiver.setDestDirectory(location);
unArchiver.extract();
} catch (NoSuchArchiverException e) {
throw new MojoExecutionException(""Unknown archiver type"", e);
} catch (IOException e) {
e.printStackTrace();
throw new MojoExecutionException(""Error unpacking file: "" + (this.outputAbsoluteArtifactFilename ? file.getAbsolutePath() : file.getName()) + "" to: "" + location + ""\r\n"" + e.toString(), e);
} catch (ArchiverException e) {
e.printStackTrace();
throw new MojoExecutionException(""Error unpacking file: "" + file + "" to: "" + location + ""\r\n"" + e.toString(), e);
}
}","protected void unpack(File file, File location) throws MojoExecutionException {
try {
location.mkdirs();
UnArchiver unarchiverVar1;
unarchiverVar1 = archiverManager.getUnArchiver(file);
unarchiverVar1.setSourceFile(file);
unarchiverVar1.setDestDirectory(location);
unarchiverVar1.extract();
} catch (NoSuchArchiverException e) {
throw new MojoExecutionException(""Unknown archiver type"", e);
} catch (IOException e) {
e.printStackTrace();
throw new MojoExecutionException(""Error unpacking file: "" + (this.outputAbsoluteArtifactFilename ? file.getAbsolutePath() : file.getName()) + "" to: "" + location + ""\r\n"" + e.toString(), e);
} catch (ArchiverException e) {
e.printStackTrace();
throw new MojoExecutionException(""Error unpacking file: "" + file + "" to: "" + location + ""\r\n"" + e.toString(), e);
}
}"
13390,DODGY_CODE,UWF_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD,FP,mavendp,1350,protected boolean outputAbsoluteArtifactFilename;,protected boolean outputAbsoluteArtifactFilename;,protected boolean booleanVar1;
13393,DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,mavendp,1353,protected MavenProject project;,protected MavenProject project;,protected MavenProject mavenprojectVar1;
13395,DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,mavendp,1355,"UnArchiver unArchiver;
","protected void unpack(File file, File location) throws MojoExecutionException {
try {
location.mkdirs();
UnArchiver unArchiver;
unArchiver = archiverManager.getUnArchiver(file);
unArchiver.setSourceFile(file);
unArchiver.setDestDirectory(location);
unArchiver.extract();
} catch (NoSuchArchiverException e) {
throw new MojoExecutionException(""Unknown archiver type"", e);
} catch (IOException e) {
e.printStackTrace();
throw new MojoExecutionException(""Error unpacking file: "" + (this.outputAbsoluteArtifactFilename ? file.getAbsolutePath() : file.getName()) + "" to: "" + location + ""\r\n"" + e.toString(), e);
} catch (ArchiverException e) {
e.printStackTrace();
throw new MojoExecutionException(""Error unpacking file: "" + file + "" to: "" + location + ""\r\n"" + e.toString(), e);
}
}","protected void unpack(File file, File location) throws MojoExecutionException {
try {
location.mkdirs();
UnArchiver unarchiverVar1;
unarchiverVar1 = archiverManager.getUnArchiver(file);
unarchiverVar1.setSourceFile(file);
unarchiverVar1.setDestDirectory(location);
unarchiverVar1.extract();
} catch (NoSuchArchiverException e) {
throw new MojoExecutionException(""Unknown archiver type"", e);
} catch (IOException e) {
e.printStackTrace();
throw new MojoExecutionException(""Error unpacking file: "" + (this.outputAbsoluteArtifactFilename ? file.getAbsolutePath() : file.getName()) + "" to: "" + location + ""\r\n"" + e.toString(), e);
} catch (ArchiverException e) {
e.printStackTrace();
throw new MojoExecutionException(""Error unpacking file: "" + file + "" to: "" + location + ""\r\n"" + e.toString(), e);
}
}"
13397,DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,mavendp,1357,"else
","public Log getLog() {
if (silent) {
log = new SilentLog();
} else {
log = super.getLog();
}
return this.log;
}","public Log getLog() {
if (silent) {
log = new SilentLog();
} else {
log = super.getLog();
}
return this.log;
}"
13407,CORRECTNESS,UWF_UNWRITTEN_FIELD,FP,mavendp,1367,private boolean excludeTransitive;,private boolean excludeTransitive;,private boolean booleanVar1;
13410,BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,mavendp,1370,"marker.getParentFile().mkdirs();
","public void setMarker() throws MojoExecutionException {
File marker = getMarkerFile();
File clearMarker = getMarkerFile(!this.resolved);
try {
marker.getParentFile().mkdirs();
} catch (NullPointerException e) {
}
try {
marker.createNewFile();
if (clearMarker.exists()) {
clearMarker.delete();
}
} catch (IOException e) {
throw new MojoExecutionException(""Unable to create Marker: "" + marker.getAbsolutePath(), e);
}
}","public void setMarker() throws MojoExecutionException {
File fileVar1 = fileLiteral2;
File fileVar3 = fileLiteral4;
try {
fileVar1.getParentFile().mkdirs();
} catch (NullPointerException e) {
}
try {
fileVar1.createNewFile();
if (fileVar3.exists()) {
fileVar3.delete();
}
} catch (IOException e) {
throw new MojoExecutionException(""Unable to create Marker: "" + fileVar1.getAbsolutePath(), e);
}
}"
13522,DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,mavendp,1482,"final PlexusContainer container = (PlexusContainer) context.get( PlexusConstants.PLEXUS_KEY );
","protected ProjectDependencyAnalyzer createProjectDependencyAnalyzer() throws MojoExecutionException {
final String role = ProjectDependencyAnalyzer.ROLE;
final String roleHint = analyzer;
try {
final PlexusContainer container = (PlexusContainer) context.get(PlexusConstants.PLEXUS_KEY);
return (ProjectDependencyAnalyzer) container.lookup(role, roleHint);
} catch (Exception exception) {
throw new MojoExecutionException(""Failed to instantiate ProjectDependencyAnalyser with role "" + role + "" / role-hint "" + roleHint, exception);
}
}","protected ProjectDependencyAnalyzer createProjectDependencyAnalyzer() throws MojoExecutionException {
final String stringVar1 = stringLiteral2;
final String stringVar3 = stringLiteral4;
try {
final PlexusContainer plexuscontainerVar5 = plexuscontainerLiteral6;
return (ProjectDependencyAnalyzer) plexuscontainerVar5.lookup(stringVar1, stringVar3);
} catch (Exception exception) {
throw new MojoExecutionException(""Failed to instantiate ProjectDependencyAnalyser with role "" + stringVar1 + "" / role-hint "" + stringVar3, exception);
}
}"
13524,BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,mavendp,1484,"artifactItem.getOutputDirectory().mkdirs();
","protected List<ArtifactItem> getProcessedArtifactItems(ProcessArtifactItemsRequest processArtifactItemsRequest) throws MojoExecutionException {
boolean removeVersion = processArtifactItemsRequest.isRemoveVersion(), prependGroupId = processArtifactItemsRequest.isPrependGroupId(), useBaseVersion = processArtifactItemsRequest.isUseBaseVersion();
boolean removeClassifier = processArtifactItemsRequest.isRemoveClassifier();
if (artifactItems == null || artifactItems.size() < 1) {
throw new MojoExecutionException(""There are no artifactItems configured."");
}
for (ArtifactItem artifactItem : artifactItems) {
this.getLog().info(""Configured Artifact: "" + artifactItem.toString());
if (artifactItem.getOutputDirectory() == null) {
artifactItem.setOutputDirectory(this.outputDirectory);
}
artifactItem.getOutputDirectory().mkdirs();
if (StringUtils.isEmpty(artifactItem.getVersion())) {
fillMissingArtifactVersion(artifactItem);
}
artifactItem.setArtifact(this.getArtifact(artifactItem));
if (StringUtils.isEmpty(artifactItem.getDestFileName())) {
artifactItem.setDestFileName(DependencyUtil.getFormattedFileName(artifactItem.getArtifact(), removeVersion, prependGroupId, useBaseVersion, removeClassifier));
}
try {
artifactItem.setNeedsProcessing(checkIfProcessingNeeded(artifactItem));
} catch (ArtifactFilterException e) {
throw new MojoExecutionException(e.getMessage(), e);
}
}
return artifactItems;
}","protected List<ArtifactItem> getProcessedArtifactItems(ProcessArtifactItemsRequest processArtifactItemsRequest) throws MojoExecutionException {
boolean booleanVar1 = booleanLiteral2, booleanVar3 = booleanLiteral4, booleanVar5 = booleanLiteral6;
boolean booleanVar7 = booleanLiteral8;
if (artifactItems == null || artifactItems.size() < 1) {
throw new MojoExecutionException(""There are no artifactItems configured."");
}
for (ArtifactItem artifactitemVar9 : artifactItems) {
this.getLog().info(""Configured Artifact: "" + artifactitemVar9.toString());
if (artifactitemVar9.getOutputDirectory() == null) {
artifactitemVar9.setOutputDirectory(this.outputDirectory);
}
artifactitemVar9.getOutputDirectory().mkdirs();
if (StringUtils.isEmpty(artifactitemVar9.getVersion())) {
fillMissingArtifactVersion(artifactitemVar9);
}
artifactitemVar9.setArtifact(this.getArtifact(artifactitemVar9));
if (StringUtils.isEmpty(artifactitemVar9.getDestFileName())) {
artifactitemVar9.setDestFileName(DependencyUtil.getFormattedFileName(artifactitemVar9.getArtifact(), booleanVar1, booleanVar3, booleanVar5, booleanVar7));
}
try {
artifactitemVar9.setNeedsProcessing(checkIfProcessingNeeded(artifactitemVar9));
} catch (ArtifactFilterException e) {
throw new MojoExecutionException(e.getMessage(), e);
}
}
return artifactItems;
}"
13526,MALICIOUS_CODE,EI_EXPOSE_REP2,FP,mavendp,1486,"this.fileMappers = fileMappers;
","public void setFileMappers(FileMapper[] fileMappers) {
this.fileMappers = fileMappers;
}","public void setFileMappers(FileMapper[] fileMappers) {
this.fileMappers = fileMappers;
}"
13528,MALICIOUS_CODE,EI_EXPOSE_REP,FP,mavendp,1488,"return this.fileMappers;
","public FileMapper[] getFileMappers() {
return this.fileMappers;
}","public FileMapper[] getFileMappers() {
return this.fileMappers;
}"
13529,MALICIOUS_CODE,EI_EXPOSE_REP2,FP,mavendp,1489,"this.fileMappers = fileMappers;
","public void setFileMappers(FileMapper[] fileMappers) {
this.fileMappers = fileMappers;
}","public void setFileMappers(FileMapper[] fileMappers) {
this.fileMappers = fileMappers;
}"
13535,DODGY_CODE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,FP,mavendp,1495,"@Parameter
protected boolean useJvmChmod = true;","@Parameter
protected boolean useJvmChmod = true;","@Parameter
protected boolean booleanVar1 = booleanLiteral2;"
13539,DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,mavendp,1499,"if ( results.getResolvedDependencies() == null || results.getResolvedDependencies().isEmpty() )
","public String getOutput(boolean outputAbsoluteArtifactFilename, boolean theOutputScope, boolean theSort) {
StringBuilder sb = new StringBuilder();
sb.append(System.lineSeparator());
sb.append(""The following files have been resolved:"");
sb.append(System.lineSeparator());
if (results.getResolvedDependencies() == null || results.getResolvedDependencies().isEmpty()) {
sb.append(""   none"");
sb.append(System.lineSeparator());
} else {
sb.append(buildArtifactListOutput(results.getResolvedDependencies(), outputAbsoluteArtifactFilename, theOutputScope, theSort));
}
if (results.getSkippedDependencies() != null && !results.getSkippedDependencies().isEmpty()) {
sb.append(System.lineSeparator());
sb.append(""The following files were skipped:"");
sb.append(System.lineSeparator());
Set<Artifact> skippedDependencies = new LinkedHashSet<>();
skippedDependencies.addAll(results.getSkippedDependencies());
sb.append(buildArtifactListOutput(skippedDependencies, outputAbsoluteArtifactFilename, theOutputScope, theSort));
}
if (results.getUnResolvedDependencies() != null && !results.getUnResolvedDependencies().isEmpty()) {
sb.append(System.lineSeparator());
sb.append(""The following files have NOT been resolved:"");
sb.append(System.lineSeparator());
Set<Artifact> unResolvedDependencies = new LinkedHashSet<>();
unResolvedDependencies.addAll(results.getUnResolvedDependencies());
sb.append(buildArtifactListOutput(unResolvedDependencies, outputAbsoluteArtifactFilename, theOutputScope, theSort));
}
sb.append(System.lineSeparator());
return sb.toString();
}","public String getOutput(boolean outputAbsoluteArtifactFilename, boolean theOutputScope, boolean theSort) {
StringBuilder stringbuilderVar1 = stringbuilderLiteral2;
stringbuilderVar1.append(System.lineSeparator());
stringbuilderVar1.append(""The following files have been resolved:"");
stringbuilderVar1.append(System.lineSeparator());
if (results.getResolvedDependencies() == null || results.getResolvedDependencies().isEmpty()) {
stringbuilderVar1.append(""   none"");
stringbuilderVar1.append(System.lineSeparator());
} else {
stringbuilderVar1.append(buildArtifactListOutput(results.getResolvedDependencies(), outputAbsoluteArtifactFilename, theOutputScope, theSort));
}
if (results.getSkippedDependencies() != null && !results.getSkippedDependencies().isEmpty()) {
stringbuilderVar1.append(System.lineSeparator());
stringbuilderVar1.append(""The following files were skipped:"");
stringbuilderVar1.append(System.lineSeparator());
Set<Artifact> set<artifact>Var3 = set<artifact>Literal4;
set<artifact>Var3.addAll(results.getSkippedDependencies());
stringbuilderVar1.append(buildArtifactListOutput(set<artifact>Var3, outputAbsoluteArtifactFilename, theOutputScope, theSort));
}
if (results.getUnResolvedDependencies() != null && !results.getUnResolvedDependencies().isEmpty()) {
stringbuilderVar1.append(System.lineSeparator());
stringbuilderVar1.append(""The following files have NOT been resolved:"");
stringbuilderVar1.append(System.lineSeparator());
Set<Artifact> set<artifact>Var5 = set<artifact>Literal4;
set<artifact>Var5.addAll(results.getUnResolvedDependencies());
stringbuilderVar1.append(buildArtifactListOutput(set<artifact>Var5, outputAbsoluteArtifactFilename, theOutputScope, theSort));
}
stringbuilderVar1.append(System.lineSeparator());
return stringbuilderVar1.toString();
}"
13544,BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,mavendp,1504,"file.getParentFile().mkdirs();
","public static synchronized void write(String string, File file, boolean append, Log log) throws IOException {
file.getParentFile().mkdirs();
try (FileWriter writer = new FileWriter(file, append)) {
writer.write(string);
}
}","public static synchronized void write(String string, File file, boolean append, Log log) throws IOException {
file.getParentFile().mkdirs();
try (FileWriter filewriterVar1 = filewriterLiteral2) {
filewriterVar1.write(string);
}
}"
13561,CORRECTNESS,RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE,FP,mavendp,1521,"return (cpString.equals(oldCp) || ( cpString != null && cpString.equals( oldCp ) ) );
","private boolean isUpdToDate(String cpString) {
try {
String oldCp = readClasspathFile();
return (cpString.equals(oldCp) || (cpString != null && cpString.equals(oldCp)));
} catch (Exception ex) {
this.getLog().warn(""Error while reading old classpath file '"" + outputFile + ""' for up-to-date check: "" + ex);
return false;
}
}","private boolean isUpdToDate(String cpString) {
try {
String stringVar1 = stringLiteral2;
return (cpString.equals(stringVar1) || (cpString != null && cpString.equals(stringVar1)));
} catch (Exception ex) {
this.getLog().warn(""Error while reading old classpath file '"" + outputFile + ""' for up-to-date check: "" + ex);
return false;
}
}"
13567,I18N,DM_DEFAULT_ENCODING,FP,mavendp,1527,"w = new BufferedWriter( new FileWriter( out ) );
","private void storeClasspathFile(String cpString, File out) throws MojoExecutionException {
out.getParentFile().mkdirs();
Writer w = null;
try {
w = new BufferedWriter(new FileWriter(out));
w.write(cpString);
getLog().info(""Wrote classpath file '"" + out + ""'."");
} catch (IOException ex) {
throw new MojoExecutionException(""Error while writting to classpath file '"" + out + ""': "" + ex.toString(), ex);
} finally {
IOUtil.close(w);
}
}","private void storeClasspathFile(String cpString, File out) throws MojoExecutionException {
out.getParentFile().mkdirs();
Writer writerVar1 = writerLiteral2;
try {
writerVar1 = new BufferedWriter(new FileWriter(out));
writerVar1.write(cpString);
getLog().info(""Wrote classpath file '"" + out + ""'."");
} catch (IOException ex) {
throw new MojoExecutionException(""Error while writting to classpath file '"" + out + ""': "" + ex.toString(), ex);
} finally {
IOUtil.close(writerVar1);
}
}"
13569,DODGY_CODE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,FP,mavendp,1529,"@Parameter
protected boolean useJvmChmod = true;","@Parameter
protected boolean useJvmChmod = true;","@Parameter
protected boolean booleanVar1 = booleanLiteral2;"
13572,DODGY_CODE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,FP,mavendp,1532,"@Parameter
protected boolean useJvmChmod = true;","@Parameter
protected boolean useJvmChmod = true;","@Parameter
protected boolean booleanVar1 = booleanLiteral2;"
13575,CORRECTNESS,NP_NULL_ON_SOME_PATH,FP,mavendp,1535,"return recommendedVersion.compareTo( theVersion ) <= 0;
","public static boolean containsVersion(VersionRange allowedRange, ArtifactVersion theVersion) {
ArtifactVersion recommendedVersion = allowedRange.getRecommendedVersion();
if (recommendedVersion == null) {
@SuppressWarnings(""unchecked"")
List<Restriction> restrictions = allowedRange.getRestrictions();
for (Restriction restriction : restrictions) {
if (restriction.containsVersion(theVersion)) {
return true;
}
}
}
return recommendedVersion.compareTo(theVersion) <= 0;
}","public static boolean containsVersion(VersionRange allowedRange, ArtifactVersion theVersion) {
ArtifactVersion artifactversionVar1 = artifactversionLiteral2;
if (artifactversionVar1 == null) {
@SuppressWarnings(""unchecked"")
List<Restriction> list<restriction>Var3 = list<restriction>Literal4;
for (Restriction restrictionVar5 : list<restriction>Var3) {
if (restrictionVar5.containsVersion(theVersion)) {
return true;
}
}
}
return artifactversionVar1.compareTo(theVersion) <= 0;
}"
13579,BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,mavendp,1539,"marker.createNewFile();
","public void setMarker() throws MojoExecutionException {
File marker = getMarkerFile();
try {
marker.getParentFile().mkdirs();
} catch (NullPointerException e) {
}
try {
marker.createNewFile();
} catch (IOException e) {
throw new MojoExecutionException(""Unable to create Marker: "" + marker.getAbsolutePath(), e);
}
try {
long ts;
if (this.artifact != null && this.artifact.getFile() != null) {
ts = this.artifact.getFile().lastModified();
} else {
ts = System.currentTimeMillis();
}
marker.setLastModified(ts);
} catch (Exception e) {
throw new MojoExecutionException(""Unable to update Marker timestamp: "" + marker.getAbsolutePath(), e);
}
}","public void setMarker() throws MojoExecutionException {
File fileVar1 = fileLiteral2;
try {
fileVar1.getParentFile().mkdirs();
} catch (NullPointerException e) {
}
try {
fileVar1.createNewFile();
} catch (IOException e) {
throw new MojoExecutionException(""Unable to create Marker: "" + fileVar1.getAbsolutePath(), e);
}
try {
long longVar3;
if (this.artifact != null && this.artifact.getFile() != null) {
longVar3 = this.artifact.getFile().lastModified();
} else {
longVar3 = System.currentTimeMillis();
}
fileVar1.setLastModified(longVar3);
} catch (Exception e) {
throw new MojoExecutionException(""Unable to update Marker timestamp: "" + fileVar1.getAbsolutePath(), e);
}
}"
13580,BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,mavendp,1540,"marker.getParentFile().mkdirs();
","public void setMarker() throws MojoExecutionException {
File marker = getMarkerFile();
try {
marker.getParentFile().mkdirs();
} catch (NullPointerException e) {
}
try {
marker.createNewFile();
} catch (IOException e) {
throw new MojoExecutionException(""Unable to create Marker: "" + marker.getAbsolutePath(), e);
}
try {
long ts;
if (this.artifact != null && this.artifact.getFile() != null) {
ts = this.artifact.getFile().lastModified();
} else {
ts = System.currentTimeMillis();
}
marker.setLastModified(ts);
} catch (Exception e) {
throw new MojoExecutionException(""Unable to update Marker timestamp: "" + marker.getAbsolutePath(), e);
}
}","public void setMarker() throws MojoExecutionException {
File fileVar1 = fileLiteral2;
try {
fileVar1.getParentFile().mkdirs();
} catch (NullPointerException e) {
}
try {
fileVar1.createNewFile();
} catch (IOException e) {
throw new MojoExecutionException(""Unable to create Marker: "" + fileVar1.getAbsolutePath(), e);
}
try {
long longVar3;
if (this.artifact != null && this.artifact.getFile() != null) {
longVar3 = this.artifact.getFile().lastModified();
} else {
longVar3 = System.currentTimeMillis();
}
fileVar1.setLastModified(longVar3);
} catch (Exception e) {
throw new MojoExecutionException(""Unable to update Marker timestamp: "" + fileVar1.getAbsolutePath(), e);
}
}"
13581,BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,mavendp,1541,"clearMarker.delete();
","public void setMarker() throws MojoExecutionException {
File marker = getMarkerFile();
File clearMarker = getMarkerFile(!this.resolved);
try {
marker.getParentFile().mkdirs();
} catch (NullPointerException e) {
}
try {
marker.createNewFile();
if (clearMarker.exists()) {
clearMarker.delete();
}
} catch (IOException e) {
throw new MojoExecutionException(""Unable to create Marker: "" + marker.getAbsolutePath(), e);
}
}","public void setMarker() throws MojoExecutionException {
File fileVar1 = fileLiteral2;
File fileVar3 = fileLiteral4;
try {
fileVar1.getParentFile().mkdirs();
} catch (NullPointerException e) {
}
try {
fileVar1.createNewFile();
if (fileVar3.exists()) {
fileVar3.delete();
}
} catch (IOException e) {
throw new MojoExecutionException(""Unable to create Marker: "" + fileVar1.getAbsolutePath(), e);
}
}"
13585,CORRECTNESS,UR_UNINIT_READ,FP,mavendp,1545,"if (silent)
","public AbstractDependencyMojo() {
if (silent) {
log = new SilentLog();
} else {
log = super.getLog();
}
}","public AbstractDependencyMojo() {
if (silent) {
log = new SilentLog();
} else {
log = super.getLog();
}
}"
13588,CORRECTNESS,UWF_UNWRITTEN_FIELD,FP,mavendp,1548,private ArrayList artifactItems;,private ArrayList artifactItems;,private ArrayList arraylistVar1;
13697,BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,mavendp,1657,"location.mkdirs();
","protected void unpack(Artifact artifact, String type, File location, String includes, String excludes, String encoding, FileMapper[] fileMappers, boolean overwrite) throws MojoExecutionException {
File file = artifact.getFile();
try {
logUnpack(file, location, includes, excludes);
location.mkdirs();
if (!location.exists()) {
throw new MojoExecutionException(""Location to write unpacked files to could not be created: "" + location);
}
if (file.isDirectory()) {
// usual case is a future jar packaging, but there are special cases: classifier and other packaging
throw new MojoExecutionException(""Artifact has not been packaged yet. When used on reactor artifact, "" + ""unpack should be executed after packaging: see MDEP-98."");
}
UnArchiver unArchiver;
try {
unArchiver = archiverManager.getUnArchiver(type);
getLog().debug(""Found unArchiver by type: "" + unArchiver);
} catch (NoSuchArchiverException e) {
unArchiver = archiverManager.getUnArchiver(file);
getLog().debug(""Found unArchiver by extension: "" + unArchiver);
}
if (encoding != null && unArchiver instanceof ZipUnArchiver) {
((ZipUnArchiver) unArchiver).setEncoding(encoding);
getLog().info(""Unpacks '"" + type + ""' with encoding '"" + encoding + ""'."");
}
unArchiver.setIgnorePermissions(ignorePermissions);
unArchiver.setSourceFile(file);
unArchiver.setDestDirectory(location);
unArchiver.setOverwrite(overwrite);
if (StringUtils.isNotEmpty(excludes) || StringUtils.isNotEmpty(includes)) {
IncludeExcludeFileSelector[] selectors = new IncludeExcludeFileSelector[] { new IncludeExcludeFileSelector() };
if (StringUtils.isNotEmpty(excludes)) {
selectors[0].setExcludes(excludes.split("",""));
}
if (StringUtils.isNotEmpty(includes)) {
selectors[0].setIncludes(includes.split("",""));
}
unArchiver.setFileSelectors(selectors);
}
if (this.silent) {
silenceUnarchiver(unArchiver);
}
unArchiver.setFileMappers(fileMappers);
unArchiver.extract();
} catch (NoSuchArchiverException e) {
throw new MojoExecutionException(""Unknown archiver type"", e);
} catch (ArchiverException e) {
throw new MojoExecutionException(""Error unpacking file: "" + file + "" to: "" + location + System.lineSeparator() + e.toString(), e);
}
}","protected void unpack(Artifact artifact, String type, File location, String includes, String excludes, String encoding, FileMapper[] fileMappers, boolean overwrite) throws MojoExecutionException {
File fileVar1 = fileLiteral2;
try {
logUnpack(fileVar1, location, includes, excludes);
location.mkdirs();
if (!location.exists()) {
throw new MojoExecutionException(""Location to write unpacked files to could not be created: "" + location);
}
if (fileVar1.isDirectory()) {
// usual case is a future jar packaging, but there are special cases: classifier and other packaging
throw new MojoExecutionException(""Artifact has not been packaged yet. When used on reactor artifact, "" + ""unpack should be executed after packaging: see MDEP-98."");
}
UnArchiver unarchiverVar3;
try {
unarchiverVar3 = archiverManager.getUnArchiver(type);
getLog().debug(""Found unArchiver by type: "" + unarchiverVar3);
} catch (NoSuchArchiverException e) {
unarchiverVar3 = archiverManager.getUnArchiver(fileVar1);
getLog().debug(""Found unArchiver by extension: "" + unarchiverVar3);
}
if (encoding != null && unarchiverVar3 instanceof ZipUnArchiver) {
((ZipUnArchiver) unarchiverVar3).setEncoding(encoding);
getLog().info(""Unpacks '"" + type + ""' with encoding '"" + encoding + ""'."");
}
unarchiverVar3.setIgnorePermissions(ignorePermissions);
unarchiverVar3.setSourceFile(fileVar1);
unarchiverVar3.setDestDirectory(location);
unarchiverVar3.setOverwrite(overwrite);
if (StringUtils.isNotEmpty(excludes) || StringUtils.isNotEmpty(includes)) {
IncludeExcludeFileSelector[] includeexcludefileselectorArrayVar4 = includeexcludefileselectorArrayLiteral5;
if (StringUtils.isNotEmpty(excludes)) {
includeexcludefileselectorArrayVar4[0].setExcludes(excludes.split("",""));
}
if (StringUtils.isNotEmpty(includes)) {
includeexcludefileselectorArrayVar4[0].setIncludes(includes.split("",""));
}
unarchiverVar3.setFileSelectors(includeexcludefileselectorArrayVar4);
}
if (this.silent) {
silenceUnarchiver(unarchiverVar3);
}
unarchiverVar3.setFileMappers(fileMappers);
unarchiverVar3.extract();
} catch (NoSuchArchiverException e) {
throw new MojoExecutionException(""Unknown archiver type"", e);
} catch (ArchiverException e) {
throw new MojoExecutionException(""Error unpacking file: "" + fileVar1 + "" to: "" + location + System.lineSeparator() + e.toString(), e);
}
}"
13699,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,mavendp,1659,"catch ( Exception e )
","private void silenceUnarchiver(UnArchiver unArchiver) {
try {
Field field = ReflectionUtils.getFieldByNameIncludingSuperclasses(""logger"", unArchiver.getClass());
field.setAccessible(true);
field.set(unArchiver, this.getLog());
} catch (Exception e) {
}
}","private void silenceUnarchiver(UnArchiver unArchiver) {
try {
Field fieldVar1 = fieldLiteral2;
fieldVar1.setAccessible(true);
fieldVar1.set(unArchiver, this.getLog());
} catch (Exception e) {
}
}"
13704,DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,mavendp,1664,"final PlexusContainer container = (PlexusContainer) context.get( PlexusConstants.PLEXUS_KEY );
","protected ProjectDependencyAnalyzer createProjectDependencyAnalyzer() throws MojoExecutionException {
final String role = ProjectDependencyAnalyzer.ROLE;
final String roleHint = analyzer;
try {
final PlexusContainer container = (PlexusContainer) context.get(PlexusConstants.PLEXUS_KEY);
return (ProjectDependencyAnalyzer) container.lookup(role, roleHint);
} catch (Exception exception) {
throw new MojoExecutionException(""Failed to instantiate ProjectDependencyAnalyser with role "" + role + "" / role-hint "" + roleHint, exception);
}
}","protected ProjectDependencyAnalyzer createProjectDependencyAnalyzer() throws MojoExecutionException {
final String stringVar1 = stringLiteral2;
final String stringVar3 = stringLiteral4;
try {
final PlexusContainer plexuscontainerVar5 = plexuscontainerLiteral6;
return (ProjectDependencyAnalyzer) plexuscontainerVar5.lookup(stringVar1, stringVar3);
} catch (Exception exception) {
throw new MojoExecutionException(""Failed to instantiate ProjectDependencyAnalyser with role "" + stringVar1 + "" / role-hint "" + stringVar3, exception);
}
}"
13712,CORRECTNESS,NP_NULL_PARAM_DEREF,FP,mavendp,1672,"List<Artifact> artList = new ArrayList<>( artifacts );
","@Override
protected void doExecute() throws MojoExecutionException {
boolean isFileSepSet = StringUtils.isNotEmpty(fileSeparator);
boolean isPathSepSet = StringUtils.isNotEmpty(pathSeparator);
if (attach && StringUtils.isEmpty(localRepoProperty)) {
localRepoProperty = ""${M2_REPO}"";
}
Set<Artifact> artifacts = getResolvedDependencies(true);
if (artifacts == null || artifacts.isEmpty()) {
getLog().info(""No dependencies found."");
}
List<Artifact> artList = new ArrayList<>(artifacts);
StringBuilder sb = new StringBuilder();
Iterator<Artifact> i = artList.iterator();
if (i.hasNext()) {
appendArtifactPath(i.next(), sb);
while (i.hasNext()) {
sb.append(isPathSepSet ? this.pathSeparator : File.pathSeparator);
appendArtifactPath(i.next(), sb);
}
}
String cpString = sb.toString();
if (isFileSepSet) {
final String pattern = Pattern.quote(File.separator);
final String replacement = Matcher.quoteReplacement(fileSeparator);
cpString = cpString.replaceAll(pattern, replacement);
}
if (outputFilterFile) {
cpString = ""classpath="" + cpString;
}
if (outputProperty != null) {
getProject().getProperties().setProperty(outputProperty, cpString);
if (getLog().isDebugEnabled()) {
getLog().debug(outputProperty + "" = "" + cpString);
}
}
if (outputFile == null) {
getLog().info(""Dependencies classpath:"" + System.lineSeparator() + cpString);
} else {
if (regenerateFile || !isUpToDate(cpString)) {
storeClasspathFile(cpString, outputFile);
} else {
this.getLog().info(""Skipped writing classpath file '"" + outputFile + ""'.  No changes found."");
}
}
if (attach) {
attachFile(cpString);
}
}","@Override
protected void doExecute() throws MojoExecutionException {
boolean booleanVar1 = booleanLiteral2;
boolean booleanVar3 = booleanLiteral4;
if (attach && StringUtils.isEmpty(localRepoProperty)) {
localRepoProperty = ""${M2_REPO}"";
}
Set<Artifact> set<artifact>Var5 = set<artifact>Literal6;
if (set<artifact>Var5 == null || set<artifact>Var5.isEmpty()) {
getLog().info(""No dependencies found."");
}
List<Artifact> list<artifact>Var7 = list<artifact>Literal8;
StringBuilder stringbuilderVar9 = stringbuilderLiteral10;
Iterator<Artifact> iterator<artifact>Var11 = iterator<artifact>Literal12;
if (iterator<artifact>Var11.hasNext()) {
appendArtifactPath(iterator<artifact>Var11.next(), stringbuilderVar9);
while (iterator<artifact>Var11.hasNext()) {
stringbuilderVar9.append(booleanVar3 ? this.pathSeparator : File.pathSeparator);
appendArtifactPath(iterator<artifact>Var11.next(), stringbuilderVar9);
}
}
String stringVar13 = stringLiteral14;
if (booleanVar1) {
final String stringVar15 = stringLiteral16;
final String stringVar17 = stringLiteral18;
stringVar13 = stringVar13.replaceAll(stringVar15, stringVar17);
}
if (outputFilterFile) {
stringVar13 = ""classpath="" + stringVar13;
}
if (outputProperty != null) {
getProject().getProperties().setProperty(outputProperty, stringVar13);
if (getLog().isDebugEnabled()) {
getLog().debug(outputProperty + "" = "" + stringVar13);
}
}
if (outputFile == null) {
getLog().info(""Dependencies classpath:"" + System.lineSeparator() + stringVar13);
} else {
if (regenerateFile || !isUpToDate(stringVar13)) {
storeClasspathFile(stringVar13, outputFile);
} else {
this.getLog().info(""Skipped writing classpath file '"" + outputFile + ""'.  No changes found."");
}
}
if (attach) {
attachFile(stringVar13);
}
}"
13713,BAD_PRACTICE,SE_COMPARATOR_SHOULD_BE_SERIALIZABLE,FP,mavendp,1673,"@Mojo( name = ""build-classpath"", requiresDependencyResolution = ResolutionScope.TEST, defaultPhase = LifecyclePhase.GENERATE_SOURCES, threadSafe = true )
// CHECKSTYLE_ON: LineLength
public class BuildClasspathMojo
extends AbstractDependencyFilterMojo
implements Comparator<Artifact>
{
@Parameter( property = ""outputEncoding"", defaultValue = ""${project.reporting.outputEncoding}"" )
private String outputEncoding;
@Parameter( property = ""mdep.stripVersion"", defaultValue = ""false"" )
private boolean stripVersion = false;
@Parameter( property = ""mdep.stripClassifier"", defaultValue = ""false"" )
private boolean stripClassifier = false;
@Parameter( property = ""mdep.prefix"" )
private String prefix;
@Parameter( property = ""mdep.outputProperty"" )
private String outputProperty;
@Parameter( property = ""mdep.outputFile"" )
private File outputFile;
@Parameter( property = ""mdep.regenerateFile"", defaultValue = ""false"" )
private boolean regenerateFile;
@Parameter( property = ""mdep.fileSeparator"", defaultValue = """" )
private String fileSeparator;
@Parameter( property = ""mdep.pathSeparator"", defaultValue = """" )
private String pathSeparator;
@Parameter( property = ""mdep.localRepoProperty"", defaultValue = """" )
private String localRepoProperty;
@Parameter( defaultValue = ""false"" )
private boolean attach;
@Parameter( property = ""mdep.outputFilterFile"", defaultValue = ""false"" )
private boolean outputFilterFile;
@Parameter( property = ""mdep.useBaseVersion"", defaultValue = ""true"" )
private boolean useBaseVersion = true;
@Component
private MavenProjectHelper projectHelper;
@Component
private RepositoryManager repositoryManager;
@Override
protected void doExecute()
throws MojoExecutionException
{
boolean isFileSepSet = StringUtils.isNotEmpty( fileSeparator );
boolean isPathSepSet = StringUtils.isNotEmpty( pathSeparator );
if ( attach && StringUtils.isEmpty( localRepoProperty ) )
{
localRepoProperty = ""${M2_REPO}"";
}
Set<Artifact> artifacts = getResolvedDependencies( true );
if ( artifacts == null || artifacts.isEmpty() )
{
getLog().info( ""No dependencies found."" );
}
List<Artifact> artList = new ArrayList<>( artifacts );
StringBuilder sb = new StringBuilder();
Iterator<Artifact> i = artList.iterator();
if ( i.hasNext() )
{
appendArtifactPath( i.next(), sb );
while ( i.hasNext() )
{
sb.append( isPathSepSet ? this.pathSeparator : File.pathSeparator );
appendArtifactPath( i.next(), sb );
}
}
String cpString = sb.toString();
if ( isFileSepSet )
{
final String pattern = Pattern.quote( File.separator );
final String replacement = Matcher.quoteReplacement( fileSeparator );
cpString = cpString.replaceAll( pattern, replacement );
}
if ( outputFilterFile )
{
cpString = ""classpath="" + cpString;
}
if ( outputProperty != null )
{
getProject().getProperties().setProperty( outputProperty, cpString );
if ( getLog().isDebugEnabled() )
{
getLog().debug( outputProperty + "" = "" + cpString );
}
}
if ( outputFile == null )
{
getLog().info( ""Dependencies classpath:"" + System.lineSeparator() + cpString );
}
else
{
if ( regenerateFile || !isUpToDate( cpString ) )
{
storeClasspathFile( cpString, outputFile );
}
else
{
this.getLog().info( ""Skipped writing classpath file '"" + outputFile + ""'.  No changes found."" );
}
}
if ( attach )
{
attachFile( cpString );
}
}
protected void attachFile( String cpString )
throws MojoExecutionException
{
File attachedFile = new File( getProject().getBuild().getDirectory(), ""classpath"" );
storeClasspathFile( cpString, attachedFile );
projectHelper.attachArtifact( getProject(), attachedFile, ""classpath"" );
}
protected void appendArtifactPath( Artifact art, StringBuilder sb )
{
if ( prefix == null )
{
String file = art.getFile().getPath();
if ( StringUtils.isNotEmpty( localRepoProperty ) )
{
ProjectBuildingRequest projectBuildingRequest = session.getProjectBuildingRequest();
File localBasedir = repositoryManager.getLocalRepositoryBasedir( projectBuildingRequest );
file = StringUtils.replace( file, localBasedir.getAbsolutePath(), localRepoProperty );
}
sb.append( file );
}
else
{
// TODO: add param for prepending groupId and version.
sb.append( prefix );
sb.append( File.separator );
sb.append( DependencyUtil.getFormattedFileName( art, this.stripVersion, this.prependGroupId,
this.useBaseVersion, this.stripClassifier ) );
}
}
private boolean isUpToDate( String cpString )
{
try
{
String oldCp = readClasspathFile();
return ( cpString == null ? oldCp == null : cpString.equals( oldCp ) );
}
catch ( IOException ex )
{
this.getLog().warn( ""Error while reading old classpath file '"" + outputFile + ""' for up-to-date check: ""
+ ex );
return false;
}
}
private void storeClasspathFile( String cpString, File out )
throws MojoExecutionException
{
out.getParentFile().mkdirs();
String encoding = Objects.toString( outputEncoding, ""UTF-8"" );
try ( Writer w =
new BufferedWriter( new OutputStreamWriter( new FileOutputStream( out ), encoding ) ) )
{
w.write( cpString );
getLog().info( ""Wrote classpath file '"" + out + ""'."" );
}
catch ( IOException ex )
{
throw new MojoExecutionException( ""Error while writing to classpath file '"" + out + ""': "" + ex.toString(),
ex );
}
}
protected String readClasspathFile()
throws IOException
{
if ( outputFile == null )
{
throw new IllegalArgumentException( ""The outputFile parameter ""
+ ""cannot be null if the file is intended to be read."" );
}
if ( !outputFile.isFile() )
{
return null;
}
StringBuilder sb = new StringBuilder();
String encoding = Objects.toString( outputEncoding, ""UTF-8"" );
try ( BufferedReader r =
new BufferedReader( new InputStreamReader( new FileInputStream( outputFile ), encoding ) ) )
{
for ( String line = r.readLine(); line != null; line = r.readLine() )
{
sb.append( line );
}
return sb.toString();
}
}
@Override
public int compare( Artifact art1, Artifact art2 )
{
if ( art1 == art2 )
{
return 0;
}
else if ( art1 == null )
{
return -1;
}
else if ( art2 == null )
{
return +1;
}
String s1 = art1.getGroupId() + art1.getArtifactId() + art1.getVersion();
String s2 = art2.getGroupId() + art2.getArtifactId() + art2.getVersion();
return s1.compareTo( s2 );
}
@Override
protected ArtifactsFilter getMarkedArtifactFilter()
{
return null;
}
public void setOutputFile( File outputFile )
{
this.outputFile = outputFile;
}
public void setOutputProperty( String theOutputProperty )
{
this.outputProperty = theOutputProperty;
}
public void setFileSeparator( String theFileSeparator )
{
this.fileSeparator = theFileSeparator;
}
public void setPathSeparator( String thePathSeparator )
{
this.pathSeparator = thePathSeparator;
}
public void setPrefix( String thePrefix )
{
this.prefix = thePrefix;
}
public void setRegenerateFile( boolean theRegenerateFile )
{
this.regenerateFile = theRegenerateFile;
}
public boolean isStripVersion()
{
return this.stripVersion;
}
public void setStripVersion( boolean theStripVersion )
{
this.stripVersion = theStripVersion;
}
public void setLocalRepoProperty( String localRepoProperty )
{
this.localRepoProperty = localRepoProperty;
}
","private void storeClasspathFile(String cpString, File out) throws MojoExecutionException {
out.getParentFile().mkdirs();
String encoding = Objects.toString(outputEncoding, ""UTF-8"");
try (Writer w = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(out), encoding))) {
w.write(cpString);
getLog().info(""Wrote classpath file '"" + out + ""'."");
} catch (IOException ex) {
throw new MojoExecutionException(""Error while writing to classpath file '"" + out + ""': "" + ex.toString(), ex);
}
}","private void storeClasspathFile(String cpString, File out) throws MojoExecutionException {
out.getParentFile().mkdirs();
String stringVar1 = stringLiteral2;
try (Writer writerVar3 = writerLiteral4) {
writerVar3.write(cpString);
getLog().info(""Wrote classpath file '"" + out + ""'."");
} catch (IOException ex) {
throw new MojoExecutionException(""Error while writing to classpath file '"" + out + ""': "" + ex.toString(), ex);
}
}"
13721,DODGY_CODE,UC_USELESS_OBJECT,FP,mavendp,1681,"Set<Artifact> resolvedArtifacts = new LinkedHashSet<>( artifacts.size() );
","protected Set<Artifact> resolvePluginArtifacts() throws ArtifactFilterException, ArtifactResolverException {
final Set<Artifact> plugins = getProject().getPluginArtifacts();
final Set<Artifact> reports = getProject().getReportArtifacts();
Set<Artifact> artifacts = new LinkedHashSet<>();
artifacts.addAll(reports);
artifacts.addAll(plugins);
final FilterArtifacts filter = getArtifactsFilter();
artifacts = filter.filter(artifacts);
Set<Artifact> resolvedArtifacts = new LinkedHashSet<>(artifacts.size());
for (final Artifact artifact : new LinkedHashSet<>(artifacts)) {
// String.format( "" Plugin SKIPPED: %s"", DependencyUtil.getFormattedFileName( artifact, false ) );
ProjectBuildingRequest buildingRequest = newResolvePluginProjectBuildingRequest();
resolvedArtifacts.add(getArtifactResolver().resolveArtifact(buildingRequest, artifact).getArtifact());
}
return artifacts;
}","protected Set<Artifact> resolvePluginArtifacts() throws ArtifactFilterException, ArtifactResolverException {
final Set<Artifact> set<artifact>Var1 = set<artifact>Literal2;
final Set<Artifact> set<artifact>Var3 = set<artifact>Literal4;
Set<Artifact> set<artifact>Var5 = set<artifact>Literal6;
set<artifact>Var5.addAll(set<artifact>Var3);
set<artifact>Var5.addAll(set<artifact>Var1);
final FilterArtifacts filterartifactsVar7 = filterartifactsLiteral8;
set<artifact>Var5 = filterartifactsVar7.filter(set<artifact>Var5);
Set<Artifact> set<artifact>Var9 = set<artifact>Literal10;
for (final Artifact artifactVar11 : new LinkedHashSet<>(set<artifact>Var5)) {
// String.format( "" Plugin SKIPPED: %s"", DependencyUtil.getFormattedFileName( artifact, false ) );
ProjectBuildingRequest projectbuildingrequestVar12 = projectbuildingrequestLiteral13;
set<artifact>Var9.add(getArtifactResolver().resolveArtifact(projectbuildingrequestVar12, artifactVar11).getArtifact());
}
return set<artifact>Var5;
}"
13728,BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,mavendp,1688,"marker.createNewFile();
","@Override
public void setMarker() throws MojoExecutionException {
File marker = getMarkerFile();
File clearMarker = getMarkerFile(!this.resolved);
try {
marker.getParentFile().mkdirs();
} catch (NullPointerException e) {
}
try {
marker.createNewFile();
if (clearMarker.exists()) {
if (!clearMarker.delete()) {
clearMarker.deleteOnExit();
}
}
} catch (IOException e) {
throw new MojoExecutionException(""Unable to create Marker: "" + marker.getAbsolutePath(), e);
}
}","@Override
public void setMarker() throws MojoExecutionException {
File fileVar1 = fileLiteral2;
File fileVar3 = fileLiteral4;
try {
fileVar1.getParentFile().mkdirs();
} catch (NullPointerException e) {
}
try {
fileVar1.createNewFile();
if (fileVar3.exists()) {
if (!fileVar3.delete()) {
fileVar3.deleteOnExit();
}
}
} catch (IOException e) {
throw new MojoExecutionException(""Unable to create Marker: "" + fileVar1.getAbsolutePath(), e);
}
}"
13879,DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,mavendp,1839,"+ ( this.outputAbsoluteArtifactFilename ? file.getAbsolutePath() : file.getName() ) + "" to: ""
","protected void unpack(File file, File location) throws MojoExecutionException {
try {
location.mkdirs();
UnArchiver unArchiver;
unArchiver = archiverManager.getUnArchiver(file);
unArchiver.setSourceFile(file);
unArchiver.setDestDirectory(location);
if (this.silent) {
silenceUnarchiver(unArchiver);
}
unArchiver.extract();
} catch (NoSuchArchiverException e) {
throw new MojoExecutionException(""Unknown archiver type"", e);
} catch (IOException e) {
e.printStackTrace();
throw new MojoExecutionException(""Error unpacking file: "" + (this.outputAbsoluteArtifactFilename ? file.getAbsolutePath() : file.getName()) + "" to: "" + location + ""\r\n"" + e.toString(), e);
} catch (ArchiverException e) {
e.printStackTrace();
throw new MojoExecutionException(""Error unpacking file: "" + file + "" to: "" + location + ""\r\n"" + e.toString(), e);
}
}","protected void unpack(File file, File location) throws MojoExecutionException {
try {
location.mkdirs();
UnArchiver unarchiverVar1;
unarchiverVar1 = archiverManager.getUnArchiver(file);
unarchiverVar1.setSourceFile(file);
unarchiverVar1.setDestDirectory(location);
if (this.silent) {
silenceUnarchiver(unarchiverVar1);
}
unarchiverVar1.extract();
} catch (NoSuchArchiverException e) {
throw new MojoExecutionException(""Unknown archiver type"", e);
} catch (IOException e) {
e.printStackTrace();
throw new MojoExecutionException(""Error unpacking file: "" + (this.outputAbsoluteArtifactFilename ? file.getAbsolutePath() : file.getName()) + "" to: "" + location + ""\r\n"" + e.toString(), e);
} catch (ArchiverException e) {
e.printStackTrace();
throw new MojoExecutionException(""Error unpacking file: "" + file + "" to: "" + location + ""\r\n"" + e.toString(), e);
}
}"
13882,PERFORMANCE,SS_SHOULD_BE_STATIC,FP,mavendp,1842,"@Parameter(property = ""mdep.prependGroupId"", defaultValue = ""false"")
private final boolean prependGroupId = false;","@Parameter(property = ""mdep.prependGroupId"", defaultValue = ""false"")
private final boolean prependGroupId = false;","@Parameter(property = ""mdep.prependGroupId"", defaultValue = ""false"")
private final boolean booleanVar1 = booleanLiteral2;"
13887,I18N,DM_DEFAULT_ENCODING,TP,mavendp,1847,"r = new BufferedReader( new FileReader( outputFile ) );
","protected String readClasspathFile() throws IOException {
if (outputFile == null) {
throw new IllegalArgumentException(""The outputFile parameter "" + ""cannot be null if the file is intended to be read."");
}
if (!outputFile.isFile()) {
return null;
}
StringBuilder sb = new StringBuilder();
BufferedReader r = null;
try {
r = new BufferedReader(new FileReader(outputFile));
for (String line = r.readLine(); line != null; line = r.readLine()) {
sb.append(line);
}
r.close();
r = null;
return sb.toString();
} finally {
IOUtil.close(r);
}
}","protected String readClasspathFile() throws IOException {
if (outputFile == null) {
throw new IllegalArgumentException(""The outputFile parameter "" + ""cannot be null if the file is intended to be read."");
}
if (!outputFile.isFile()) {
return null;
}
StringBuilder stringbuilderVar1 = stringbuilderLiteral2;
BufferedReader bufferedreaderVar3 = bufferedreaderLiteral4;
try {
bufferedreaderVar3 = new BufferedReader(new FileReader(outputFile));
for (String stringVar7 = stringLiteral8; stringVar5 != null; stringVar5 = bufferedreaderVar3.readLine()) {
stringbuilderVar1.append(stringVar5);
}
bufferedreaderVar3.close();
bufferedreaderVar3 = null;
return stringbuilderVar1.toString();
} finally {
IOUtil.close(bufferedreaderVar3);
}
}"
13899,DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,TP,mavendp,1859,"else if ( arg2 == null )
","public int compare(Object arg1, Object arg2) {
if (arg1 instanceof Artifact && arg2 instanceof Artifact) {
if (arg1 == arg2) {
return 0;
} else if (arg1 == null) {
return -1;
} else if (arg2 == null) {
return +1;
}
Artifact art1 = (Artifact) arg1;
Artifact art2 = (Artifact) arg2;
String s1 = art1.getGroupId() + art1.getArtifactId() + art1.getVersion();
String s2 = art2.getGroupId() + art2.getArtifactId() + art2.getVersion();
return s1.compareTo(s2);
} else {
return 0;
}
}","public int compare(Object arg1, Object arg2) {
if (arg1 instanceof Artifact && arg2 instanceof Artifact) {
if (arg1 == arg2) {
return 0;
} else if (arg1 == null) {
return -1;
} else if (arg2 == null) {
return +1;
}
Artifact artifactVar1 = artifactLiteral2;
Artifact artifactVar3 = artifactLiteral4;
String stringVar5 = stringLiteral6;
String stringVar7 = stringLiteral8;
return stringVar5.compareTo(stringVar7);
} else {
return 0;
}
}"
13906,CORRECTNESS,UWF_UNWRITTEN_FIELD,FP,mavendp,1866,private MavenProject project;,private MavenProject project;,private MavenProject mavenprojectVar1;
13922,CORRECTNESS,UWF_UNWRITTEN_FIELD,TP,mavendp,1882,private MavenProject project;,private MavenProject project;,private MavenProject mavenprojectVar1;
13932,I18N,DM_DEFAULT_ENCODING,FP,mavendp,1892,"BufferedReader r = new BufferedReader( new FileReader( outputFile ) );
","protected String readClasspathFile() throws IOException {
if (outputFile == null) {
throw new IllegalArgumentException(""The outputFile parameter cannot be null if the file is intended to be read."");
}
if (!outputFile.isFile()) {
return null;
}
StringBuffer sb = new StringBuffer();
BufferedReader r = new BufferedReader(new FileReader(outputFile));
try {
String l;
while ((l = r.readLine()) != null) {
sb.append(l);
}
return sb.toString();
} finally {
r.close();
}
}","protected String readClasspathFile() throws IOException {
if (outputFile == null) {
throw new IllegalArgumentException(""The outputFile parameter cannot be null if the file is intended to be read."");
}
if (!outputFile.isFile()) {
return null;
}
StringBuffer stringbufferVar1 = stringbufferLiteral2;
BufferedReader bufferedreaderVar3 = bufferedreaderLiteral4;
try {
String stringVar5;
while ((stringVar5 = bufferedreaderVar3.readLine()) != null) {
stringbufferVar1.append(stringVar5);
}
return stringbufferVar1.toString();
} finally {
bufferedreaderVar3.close();
}
}"
13935,CORRECTNESS,UWF_UNWRITTEN_FIELD,FP,mavendp,1895,private ArtifactFactory factory;,private ArtifactFactory factory;,private ArtifactFactory artifactfactoryVar1;
13936,I18N,DM_DEFAULT_ENCODING,TP,mavendp,1896,"model = pomReader.read( new FileReader( project.getFile() ) );
","public void execute() throws MojoExecutionException, MojoFailureException {
MavenXpp3Reader pomReader = new MavenXpp3Reader();
Model model = null;
try {
model = pomReader.read(new FileReader(project.getFile()));
} catch (Exception e) {
throw new MojoExecutionException(""IOException: "" + e.getMessage(), e);
}
Set<String> duplicateDependencies = new HashSet<String>();
if (model.getDependencies() != null) {
duplicateDependencies = findDuplicateDependencies(model.getDependencies());
}
Set<String> duplicateDependenciesManagement = new HashSet<String>();
if (model.getDependencyManagement() != null && model.getDependencyManagement().getDependencies() != null) {
duplicateDependenciesManagement = findDuplicateDependencies(model.getDependencyManagement().getDependencies());
}
if (getLog().isInfoEnabled()) {
StringBuffer sb = new StringBuffer();
if (!duplicateDependencies.isEmpty()) {
sb.append(""List of duplicate dependencies defined in <dependencies/> in your pom.xml:\n"");
for (Iterator<String> it = duplicateDependencies.iterator(); it.hasNext(); ) {
String dup = it.next();
sb.append(""\to "" + dup);
if (it.hasNext()) {
sb.append(""\n"");
}
}
}
if (!duplicateDependenciesManagement.isEmpty()) {
if (sb.length() > 0) {
sb.append(""\n"");
}
sb.append(""List of duplicate dependencies defined in <dependencyManagement/> in "" + ""your pom.xml:\n"");
for (Iterator<String> it = duplicateDependenciesManagement.iterator(); it.hasNext(); ) {
String dup = it.next();
sb.append(""\to "" + dup);
if (it.hasNext()) {
sb.append(""\n"");
}
}
}
if (sb.length() > 0) {
getLog().info(sb.toString());
} else {
getLog().info(""No duplicate dependencies found in <dependencies/> or in <dependencyManagement/>"");
}
}
}","public void execute() throws MojoExecutionException, MojoFailureException {
MavenXpp3Reader mavenxpp3readerVar1 = mavenxpp3readerLiteral2;
Model modelVar3 = modelLiteral4;
try {
modelVar3 = mavenxpp3readerVar1.read(new FileReader(project.getFile()));
} catch (Exception e) {
throw new MojoExecutionException(""IOException: "" + e.getMessage(), e);
}
Set<String> set<string>Var5 = set<string>Literal6;
if (modelVar3.getDependencies() != null) {
set<string>Var5 = findDuplicateDependencies(modelVar3.getDependencies());
}
Set<String> set<string>Var7 = set<string>Literal6;
if (modelVar3.getDependencyManagement() != null && modelVar3.getDependencyManagement().getDependencies() != null) {
set<string>Var7 = findDuplicateDependencies(modelVar3.getDependencyManagement().getDependencies());
}
if (getLog().isInfoEnabled()) {
StringBuffer stringbufferVar8 = stringbufferLiteral9;
if (!set<string>Var5.isEmpty()) {
stringbufferVar8.append(""List of duplicate dependencies defined in <dependencies/> in your pom.xml:\n"");
for (Iterator<String> iterator<string>Var15 = iterator<string>Literal16; iterator<string>Var10.hasNext(); ) {
String stringVar12 = stringLiteral13;
stringbufferVar8.append(""\to "" + stringVar12);
if (iterator<string>Var10.hasNext()) {
stringbufferVar8.append(""\n"");
}
}
}
if (!set<string>Var7.isEmpty()) {
if (stringbufferVar8.length() > 0) {
stringbufferVar8.append(""\n"");
}
stringbufferVar8.append(""List of duplicate dependencies defined in <dependencyManagement/> in "" + ""your pom.xml:\n"");
for (Iterator<String> iterator<string>Var15 = iterator<string>Literal17; iterator<string>Var10.hasNext(); ) {
String stringVar12 = stringLiteral13;
stringbufferVar8.append(""\to "" + stringVar12);
if (iterator<string>Var10.hasNext()) {
stringbufferVar8.append(""\n"");
}
}
}
if (stringbufferVar8.length() > 0) {
getLog().info(stringbufferVar8.toString());
} else {
getLog().info(""No duplicate dependencies found in <dependencies/> or in <dependencyManagement/>"");
}
}
}"
13938,CORRECTNESS,UWF_UNWRITTEN_FIELD,TP,mavendp,1898,private boolean excludeTransitive;,private boolean excludeTransitive;,private boolean booleanVar1;
13944,BAD_PRACTICE,THROWS_METHOD_THROWS_CLAUSE_THROWABLE,FP,net,3,"final Properties fp = new Properties();
final InputStream ras = Main.class.getResourceAsStream(""examples.properties"");
if (ras != null) {
fp.load(ras);
} else {
System.err.println(""[Cannot find examples.properties file, so aliases cannot be used]"");
}
if (args.length == 0) {
if (Thread.currentThread().getStackTrace().length > 2) { 
System.out.println(""Usage: mvn -q exec:java  -Dexec.arguments=<alias or"" +
"" exampleClass>,<exampleClass parameters> (comma-separated, no spaces)"");
System.out.println(""Or   : mvn -q exec:java  -Dexec.args=\""<alias"" +
"" or exampleClass> <exampleClass parameters>\"" (space separated)"");
} else {
if (fromJar()) {
System.out.println(
""Usage: java -jar commons-net-examples-m.n.jar <alias or exampleClass> <exampleClass parameters>"");
} else {
System.out.println(
""Usage: java -cp target/classes examples/Main <alias or exampleClass> <exampleClass parameters>"");
}
}
@SuppressWarnings(""unchecked"") 
List<String> l = (List<String>) Collections.list(fp.propertyNames());
if (l.isEmpty()) {
return;
}
Collections.sort(l);
System.out.println(""\nAliases and their classes:"");
for(String s : l) {
System.out.printf(""%-25s %s%n"",s,fp.getProperty(s));
}
return;
}
String shortName = args[0];
String fullName = fp.getProperty(shortName);
if (fullName == null) {
fullName = shortName;
}
fullName = fullName.replace('/', '.');
try {
Class<?> clazz = Class.forName(fullName);
Method m = clazz.getDeclaredMethod(""main"", new Class[]{args.getClass()});
String[] args2 = new String[args.length-1];
System.arraycopy(args, 1, args2, 0, args2.length);
try {
m.invoke(null, (Object)args2);
} catch (InvocationTargetException ite) {
Throwable cause = ite.getCause();
if (cause != null) {
throw cause;
} else {
throw ite;
}
}
} catch (ClassNotFoundException e) {
System.out.println(e);
}
}
","public static void main(String[] args) throws Throwable {
final Properties fp = new Properties();
final InputStream ras = Main.class.getResourceAsStream(""examples.properties"");
if (ras != null) {
fp.load(ras);
} else {
System.err.println(""[Cannot find examples.properties file, so aliases cannot be used]"");
}
if (args.length == 0) {
if (Thread.currentThread().getStackTrace().length > 2) {
System.out.println(""Usage: mvn -q exec:java  -Dexec.arguments=<alias or"" + "" exampleClass>,<exampleClass parameters> (comma-separated, no spaces)"");
System.out.println(""Or   : mvn -q exec:java  -Dexec.args=\""<alias"" + "" or exampleClass> <exampleClass parameters>\"" (space separated)"");
} else {
if (fromJar()) {
System.out.println(""Usage: java -jar commons-net-examples-m.n.jar <alias or exampleClass> <exampleClass parameters>"");
} else {
System.out.println(""Usage: java -cp target/classes examples/Main <alias or exampleClass> <exampleClass parameters>"");
}
}
@SuppressWarnings(""unchecked"")
List<String> l = (List<String>) Collections.list(fp.propertyNames());
if (l.isEmpty()) {
return;
}
Collections.sort(l);
System.out.println(""\nAliases and their classes:"");
for (String s : l) {
System.out.printf(""%-25s %s%n"", s, fp.getProperty(s));
}
return;
}
String shortName = args[0];
String fullName = fp.getProperty(shortName);
if (fullName == null) {
fullName = shortName;
}
fullName = fullName.replace('/', '.');
try {
Class<?> clazz = Class.forName(fullName);
Method m = clazz.getDeclaredMethod(""main"", new Class[] { args.getClass() });
String[] args2 = new String[args.length - 1];
System.arraycopy(args, 1, args2, 0, args2.length);
try {
m.invoke(null, (Object) args2);
} catch (InvocationTargetException ite) {
Throwable cause = ite.getCause();
if (cause != null) {
throw cause;
} else {
throw ite;
}
}
} catch (ClassNotFoundException e) {
System.out.println(e);
}
}","public static void main(String[] args) throws Throwable {
final Properties propertiesVar1 = propertiesLiteral2;
final InputStream inputstreamVar3 = inputstreamLiteral4;
if (inputstreamVar3 != null) {
propertiesVar1.load(inputstreamVar3);
} else {
System.err.println(""[Cannot find examples.properties file, so aliases cannot be used]"");
}
if (args.length == 0) {
if (Thread.currentThread().getStackTrace().length > 2) {
System.out.println(""Usage: mvn -q exec:java  -Dexec.arguments=<alias or"" + "" exampleClass>,<exampleClass parameters> (comma-separated, no spaces)"");
System.out.println(""Or   : mvn -q exec:java  -Dexec.args=\""<alias"" + "" or exampleClass> <exampleClass parameters>\"" (space separated)"");
} else {
if (fromJar()) {
System.out.println(""Usage: java -jar commons-net-examples-m.n.jar <alias or exampleClass> <exampleClass parameters>"");
} else {
System.out.println(""Usage: java -cp target/classes examples/Main <alias or exampleClass> <exampleClass parameters>"");
}
}
@SuppressWarnings(""unchecked"")
List<String> list<string>Var5 = list<string>Literal6;
if (list<string>Var5.isEmpty()) {
return;
}
Collections.sort(list<string>Var5);
System.out.println(""\nAliases and their classes:"");
for (String stringVar7 : list<string>Var5) {
System.out.printf(""%-25s %s%n"", stringVar7, propertiesVar1.getProperty(stringVar7));
}
return;
}
String stringVar8 = stringLiteral9;
String stringVar10 = stringLiteral11;
if (stringVar10 == null) {
stringVar10 = stringVar8;
}
stringVar10 = stringVar10.replace('/', '.');
try {
Class<?> class<?>Var12 = class<?>Literal13;
Method methodVar14 = methodLiteral15;
String[] stringArrayVar16 = stringArrayLiteral17;
System.arraycopy(args, 1, stringArrayVar16, 0, stringArrayVar16.length);
try {
methodVar14.invoke(null, (Object) stringArrayVar16);
} catch (InvocationTargetException ite) {
Throwable throwableVar18 = throwableLiteral19;
if (throwableVar18 != null) {
throw throwableVar18;
} else {
throw ite;
}
}
} catch (ClassNotFoundException e) {
System.out.println(e);
}
}"
13947,I18N,DM_DEFAULT_ENCODING,FP,net,6,"this(new PrintWriter(stream), suppressLogin);
","public PrintCommandListener(PrintStream stream, boolean suppressLogin) {
this(new PrintWriter(stream), suppressLogin);
}","public PrintCommandListener(PrintStream stream, boolean suppressLogin) {
this(new PrintWriter(stream), suppressLogin);
}"
13948,I18N,DM_DEFAULT_ENCODING,FP,net,7,"this(new PrintWriter(stream), suppressLogin, eolMarker, showDirection);
","public PrintCommandListener(PrintStream stream, boolean suppressLogin, char eolMarker, boolean showDirection) {
this(new PrintWriter(stream), suppressLogin, eolMarker, showDirection);
}","public PrintCommandListener(PrintStream stream, boolean suppressLogin, char eolMarker, boolean showDirection) {
this(new PrintWriter(stream), suppressLogin, eolMarker, showDirection);
}"
13965,MALICIOUS_CODE,MC_OVERRIDABLE_METHOD_CALL_IN_CONSTRUCTOR,FP,net,24,"createCommandSupport();
","public IMAP() {
setDefaultPort(DEFAULT_PORT);
__state = IMAPState.DISCONNECTED_STATE;
_reader = null;
__writer = null;
_replyLines = new ArrayList<String>();
createCommandSupport();
}","public IMAP() {
setDefaultPort(DEFAULT_PORT);
__state = IMAPState.DISCONNECTED_STATE;
_reader = null;
__writer = null;
_replyLines = new ArrayList<String>();
createCommandSupport();
}"
13978,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,net,37,"return null;
","public NewsgroupInfo[] listNewNewsgroups(NewGroupsOrNewsQuery query) throws IOException {
if (!NNTPReply.isPositiveCompletion(newgroups(query.getDate(), query.getTime(), query.isGMT(), query.getDistributions()))) {
return null;
}
return __readNewsgroupListing();
}","public NewsgroupInfo[] listNewNewsgroups(NewGroupsOrNewsQuery query) throws IOException {
if (!NNTPReply.isPositiveCompletion(newgroups(query.getDate(), query.getTime(), query.isGMT(), query.getDistributions()))) {
return null;
}
return __readNewsgroupListing();
}"
13985,BAD_PRACTICE,THROWS_METHOD_THROWS_RUNTIMEEXCEPTION,FP,net,44,"ThreadContainer root = new ThreadContainer();
Iterator<String> iter = idTable.keySet().iterator();
while (iter.hasNext()) {
Object key = iter.next();
ThreadContainer c = idTable.get(key);
if (c.parent == null) {
if (c.next != null) {
throw new RuntimeException(
""c.next is "" + c.next.toString());
}
c.next = root.child;
root.child = c;
}
}
return root;
","private ThreadContainer findRootSet(HashMap<String, ThreadContainer> idTable) {
ThreadContainer root = new ThreadContainer();
Iterator<String> iter = idTable.keySet().iterator();
while (iter.hasNext()) {
Object key = iter.next();
ThreadContainer c = idTable.get(key);
if (c.parent == null) {
if (c.next != null) {
throw new RuntimeException(""c.next is "" + c.next.toString());
}
c.next = root.child;
root.child = c;
}
}
return root;
}","private ThreadContainer findRootSet(HashMap<String, ThreadContainer> idTable) {
ThreadContainer threadcontainerVar1 = threadcontainerLiteral2;
Iterator<String> iterator<string>Var3 = iterator<string>Literal4;
while (iterator<string>Var3.hasNext()) {
Object objectVar5 = objectLiteral6;
ThreadContainer threadcontainerVar7 = threadcontainerLiteral8;
if (threadcontainerVar7.parent == null) {
if (threadcontainerVar7.next != null) {
throw new RuntimeException(""c.next is "" + threadcontainerVar7.next.toString());
}
threadcontainerVar7.next = threadcontainerVar1.child;
threadcontainerVar1.child = threadcontainerVar7;
}
}
return threadcontainerVar1;
}"
13991,DODGY_CODE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,FP,net,50,public int size;,public int size;,public int intVar1;
13993,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,net,52,"return null;
","public String[] getEnabledProtocols() {
if (_socket_ instanceof SSLSocket) {
return ((SSLSocket) _socket_).getEnabledProtocols();
}
return null;
}","public String[] getEnabledProtocols() {
if (_socket_ instanceof SSLSocket) {
return ((SSLSocket) _socket_).getEnabledProtocols();
}
return null;
}"
13994,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,net,53,"return null;
","public String[] getEnabledCipherSuites() {
if (_socket_ instanceof SSLSocket) {
return ((SSLSocket) _socket_).getEnabledCipherSuites();
}
return null;
}","public String[] getEnabledCipherSuites() {
if (_socket_ instanceof SSLSocket) {
return ((SSLSocket) _socket_).getEnabledCipherSuites();
}
return null;
}"
13999,Multithreaded correctness,UW_UNCOND_WAIT,FP,net,58,"__queue.wait(100);
","public void run() {
int ch;
try {
_outerLoop: while (!__isClosed) {
try {
if ((ch = __read(true)) < 0) {
break;
}
} catch (InterruptedIOException e) {
synchronized (__queue) {
__ioException = e;
__queue.notifyAll();
try {
__queue.wait(100);
} catch (InterruptedException interrupted) {
if (__isClosed) {
break _outerLoop;
}
}
continue;
}
} catch (RuntimeException re) {
super.close();
break _outerLoop;
}
boolean notify = false;
try {
notify = __processChar(ch);
} catch (InterruptedException e) {
if (__isClosed) {
break _outerLoop;
}
}
if (notify) {
__client.notifyInputListener();
}
}
} catch (IOException ioe) {
synchronized (__queue) {
__ioException = ioe;
}
__client.notifyInputListener();
}
synchronized (__queue) {
__isClosed = true;
__hasReachedEOF = true;
__queue.notify();
}
__threaded = false;
}","public void run() {
int intVar1;
try {
_outerLoop: while (!__isClosed) {
try {
if ((intVar1 = __read(true)) < 0) {
break;
}
} catch (InterruptedIOException e) {
synchronized (__queue) {
__ioException = e;
__queue.notifyAll();
try {
__queue.wait(100);
} catch (InterruptedException interrupted) {
if (__isClosed) {
break _outerLoop;
}
}
continue;
}
} catch (RuntimeException re) {
super.close();
break _outerLoop;
}
boolean booleanVar2 = booleanLiteral3;
try {
booleanVar2 = __processChar(intVar1);
} catch (InterruptedException e) {
if (__isClosed) {
break _outerLoop;
}
}
if (booleanVar2) {
__client.notifyInputListener();
}
}
} catch (IOException ioe) {
synchronized (__queue) {
__ioException = ioe;
}
__client.notifyInputListener();
}
synchronized (__queue) {
__isClosed = true;
__hasReachedEOF = true;
__queue.notify();
}
__threaded = false;
}"
14014,BAD_PRACTICE,THROWS_METHOD_THROWS_RUNTIMEEXCEPTION,FP,net,73,"String str = null;
try {
str = new String(encode, ""UTF8"");
} catch (UnsupportedEncodingException ue) {
throw new RuntimeException(ue);
}
return str;
","private static String newStringUtf8(byte[] encode) {
String str = null;
try {
str = new String(encode, ""UTF8"");
} catch (UnsupportedEncodingException ue) {
throw new RuntimeException(ue);
}
return str;
}","private static String newStringUtf8(byte[] encode) {
String stringVar1 = stringLiteral2;
try {
stringVar1 = new String(encode, ""UTF8"");
} catch (UnsupportedEncodingException ue) {
throw new RuntimeException(ue);
}
return stringVar1;
}"
14017,DODGY_CODE,SA_FIELD_DOUBLE_ASSIGNMENT,FP,net,76,"modulus = (++modulus) % 4;
","void decode(byte[] in, int inPos, int inAvail) {
if (eof) {
return;
}
if (inAvail < 0) {
eof = true;
}
for (int i = 0; i < inAvail; i++) {
if (buffer == null || buffer.length - pos < decodeSize) {
resizeBuffer();
}
byte b = in[inPos++];
if (b == PAD) {
eof = true;
break;
} else {
if (b >= 0 && b < DECODE_TABLE.length) {
int result = DECODE_TABLE[b];
if (result >= 0) {
modulus = (++modulus) % 4;
x = (x << 6) + result;
if (modulus == 0) {
buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
buffer[pos++] = (byte) (x & MASK_8BITS);
}
}
}
}
}
// Two forms of EOF as far as base64 decoder is concerned: actual
if (eof && modulus != 0) {
x = x << 6;
switch(modulus) {
case 2:
x = x << 6;
buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
break;
case 3:
buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
break;
default:
break;
}
}
}","void decode(byte[] in, int inPos, int inAvail) {
if (eof) {
return;
}
if (inAvail < 0) {
eof = true;
}
for (int intVar7 = intLiteral8; intVar1 < intLiteral1; intVar1++) {
if (buffer == null || buffer.length - pos < decodeSize) {
resizeBuffer();
}
byte byteVar3 = byteLiteral4;
if (byteVar3 == PAD) {
eof = true;
break;
} else {
if (byteVar3 >= 0 && byteVar3 < DECODE_TABLE.length) {
int intVar5 = intLiteral6;
if (intVar5 >= 0) {
modulus = (++modulus) % 4;
x = (x << 6) + intVar5;
if (modulus == 0) {
buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
buffer[pos++] = (byte) (x & MASK_8BITS);
}
}
}
}
}
// Two forms of EOF as far as base64 decoder is concerned: actual
if (eof && modulus != 0) {
x = x << 6;
switch(modulus) {
case 2:
x = x << 6;
buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
break;
case 3:
buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
break;
default:
break;
}
}
}"
14107,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,net,166,"return null;
","public String[] doCommandAsStrings(String command, String params) throws IOException {
boolean success = FTPReply.isPositiveCompletion(sendCommand(command, params));
if (success) {
return getReplyStrings();
} else {
return null;
}
}","public String[] doCommandAsStrings(String command, String params) throws IOException {
boolean booleanVar1 = booleanLiteral2;
if (booleanVar1) {
return getReplyStrings();
} else {
return null;
}
}"
14113,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,net,172,"return null;
","public String[] listOverviewFmt() throws IOException {
if (!NNTPReply.isPositiveCompletion(sendCommand(""LIST"", ""OVERVIEW.FMT""))) {
return null;
}
BufferedReader reader = new DotTerminatedMessageReader(_reader_);
String line;
ArrayList<String> list = new ArrayList<String>();
while ((line = reader.readLine()) != null) {
list.add(line);
}
reader.close();
return list.toArray(new String[list.size()]);
}","public String[] listOverviewFmt() throws IOException {
if (!NNTPReply.isPositiveCompletion(sendCommand(""LIST"", ""OVERVIEW.FMT""))) {
return null;
}
BufferedReader bufferedreaderVar1 = bufferedreaderLiteral2;
String stringVar3;
ArrayList<String> arraylist<string>Var4 = arraylist<string>Literal5;
while ((stringVar3 = bufferedreaderVar1.readLine()) != null) {
arraylist<string>Var4.add(stringVar3);
}
bufferedreaderVar1.close();
return arraylist<string>Var4.toArray(new String[arraylist<string>Var4.size()]);
}"
14117,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,net,176,"return null;
","public POP3MessageInfo[] listUniqueIdentifiers() throws IOException {
if (getState() != TRANSACTION_STATE) {
return null;
}
if (sendCommand(POP3Command.UIDL) != POP3Reply.OK) {
return null;
}
getAdditionalReply();
POP3MessageInfo[] messages = new POP3MessageInfo[_replyLines.size() - 2];
ListIterator<String> en = _replyLines.listIterator(1);
for (int line = 0; line < messages.length; line++) {
messages[line] = __parseUID(en.next());
}
return messages;
}","public POP3MessageInfo[] listUniqueIdentifiers() throws IOException {
if (getState() != TRANSACTION_STATE) {
return null;
}
if (sendCommand(POP3Command.UIDL) != POP3Reply.OK) {
return null;
}
getAdditionalReply();
POP3MessageInfo[] pop3messageinfoArrayVar1 = pop3messageinfoArrayLiteral2;
ListIterator<String> listiterator<string>Var3 = listiterator<string>Literal4;
for (int intVar7 = intLiteral8; intVar5 < intLiteral1; intVar5++) {
pop3messageinfoArrayVar1[intVar5] = __parseUID(listiterator<string>Var3.next());
}
return pop3messageinfoArrayVar1;
}"
14119,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,net,178,"return null;
","public String[] getEnabledCipherSuites() {
if (_socket_ instanceof SSLSocket) {
return ((SSLSocket) _socket_).getEnabledCipherSuites();
}
return null;
}","public String[] getEnabledCipherSuites() {
if (_socket_ instanceof SSLSocket) {
return ((SSLSocket) _socket_).getEnabledCipherSuites();
}
return null;
}"
14120,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,net,179,"return null;
","@Override
public int[] answerSubnegotiation(int[] suboptionData, int suboptionLength) {
return null;
}","@Override
public int[] answerSubnegotiation(int[] suboptionData, int suboptionLength) {
return null;
}"
14121,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,net,180,"return null;
","@Override
public int[] answerSubnegotiation(int[] suboptionData, int suboptionLength) {
return null;
}","@Override
public int[] answerSubnegotiation(int[] suboptionData, int suboptionLength) {
return null;
}"
14464,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,net,523,"return null;
","public String[] doCommandAsStrings(String command, String params) throws IOException {
boolean success = FTPReply.isPositiveCompletion(sendCommand(command, params));
if (success) {
return getReplyStrings();
} else {
return null;
}
}","public String[] doCommandAsStrings(String command, String params) throws IOException {
boolean booleanVar1 = booleanLiteral2;
if (booleanVar1) {
return getReplyStrings();
} else {
return null;
}
}"
14465,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,net,524,"return null;
","public String[] featureValues(String feature) throws IOException {
if (!initFeatureMap()) {
return null;
}
Set<String> entries = __featuresMap.get(feature.toUpperCase(Locale.ENGLISH));
if (entries != null) {
return entries.toArray(new String[entries.size()]);
}
return null;
}","public String[] featureValues(String feature) throws IOException {
if (!initFeatureMap()) {
return null;
}
Set<String> set<string>Var1 = set<string>Literal2;
if (set<string>Var1 != null) {
return set<string>Var1.toArray(new String[set<string>Var1.size()]);
}
return null;
}"
14472,MALICIOUS_CODE,MS_SHOULD_BE_FINAL,FP,net,531,"@Deprecated
public static String KEYSTORE_ALGORITHM;","@Deprecated
public static String KEYSTORE_ALGORITHM;","@Deprecated
public static String stringVar1;"
14478,DODGY_CODE,NP_LOAD_OF_KNOWN_NULL_VALUE,FP,net,537,"file.setUser(usr);
","public FTPFile parseFTPEntry(String entry) {
FTPFile file = new FTPFile();
file.setRawListing(entry);
int type;
boolean isDevice = false;
if (matches(entry)) {
String typeStr = group(1);
String hardLinkCount = ""0"";
String usr = null;
String grp = null;
String filesize = group(20);
String datestr = group(21) + "" "" + group(22);
String name = group(23);
String endtoken = group(24);
try {
file.setTimestamp(super.parseTimestamp(datestr));
} catch (ParseException e) {
}
switch(typeStr.charAt(0)) {
case 'd':
type = FTPFile.DIRECTORY_TYPE;
break;
case 'e':
type = FTPFile.SYMBOLIC_LINK_TYPE;
break;
case 'l':
type = FTPFile.SYMBOLIC_LINK_TYPE;
break;
case 'b':
case 'c':
isDevice = true;
type = FTPFile.FILE_TYPE;
break;
case 'f':
case '-':
type = FTPFile.FILE_TYPE;
break;
default:
// e.g. ? and w = whiteout
type = FTPFile.UNKNOWN_TYPE;
}
file.setType(type);
int g = 4;
for (int access = 0; access < 3; access++, g += 4) {
file.setPermission(access, FTPFile.READ_PERMISSION, (!group(g).equals(""-"")));
file.setPermission(access, FTPFile.WRITE_PERMISSION, (!group(g + 1).equals(""-"")));
String execPerm = group(g + 2);
if (!execPerm.equals(""-"") && !Character.isUpperCase(execPerm.charAt(0))) {
file.setPermission(access, FTPFile.EXECUTE_PERMISSION, true);
} else {
file.setPermission(access, FTPFile.EXECUTE_PERMISSION, false);
}
}
if (!isDevice) {
try {
file.setHardLinkCount(Integer.parseInt(hardLinkCount));
} catch (NumberFormatException e) {
}
}
file.setUser(usr);
file.setGroup(grp);
try {
file.setSize(Long.parseLong(filesize));
} catch (NumberFormatException e) {
}
if (null == endtoken) {
file.setName(name);
} else {
name += endtoken;
if (type == FTPFile.SYMBOLIC_LINK_TYPE) {
int end = name.indexOf("" -> "");
if (end == -1) {
file.setName(name);
} else {
file.setName(name.substring(0, end));
file.setLink(name.substring(end + 4));
}
} else {
file.setName(name);
}
}
return file;
}
return null;
}","public FTPFile parseFTPEntry(String entry) {
FTPFile ftpfileVar1 = ftpfileLiteral2;
ftpfileVar1.setRawListing(entry);
int intVar3;
boolean booleanVar4 = booleanLiteral5;
if (matches(entry)) {
String stringVar6 = stringLiteral7;
String stringVar8 = stringLiteral9;
String stringVar10 = stringLiteral11;
String stringVar12 = stringLiteral11;
String stringVar13 = stringLiteral14;
String stringVar15 = stringLiteral16;
String stringVar17 = stringLiteral18;
String stringVar19 = stringLiteral20;
try {
ftpfileVar1.setTimestamp(super.parseTimestamp(stringVar15));
} catch (ParseException e) {
}
switch(stringVar6.charAt(0)) {
case 'd':
intVar3 = FTPFile.DIRECTORY_TYPE;
break;
case 'e':
intVar3 = FTPFile.SYMBOLIC_LINK_TYPE;
break;
case 'l':
intVar3 = FTPFile.SYMBOLIC_LINK_TYPE;
break;
case 'b':
case 'c':
booleanVar4 = true;
intVar3 = FTPFile.FILE_TYPE;
break;
case 'f':
case '-':
intVar3 = FTPFile.FILE_TYPE;
break;
default:
// e.g. ? and w = whiteout
intVar3 = FTPFile.UNKNOWN_TYPE;
}
ftpfileVar1.setType(intVar3);
int intVar21 = intLiteral22;
for (int intVar29 = intLiteral30; intVar23 < intLiteral1; intVar23++, intVar21 += 4) {
ftpfileVar1.setPermission(intVar23, FTPFile.READ_PERMISSION, (!group(intVar21).equals(""-"")));
ftpfileVar1.setPermission(intVar23, FTPFile.WRITE_PERMISSION, (!group(intVar21 + 1).equals(""-"")));
String stringVar25 = stringLiteral26;
if (!stringVar25.equals(""-"") && !Character.isUpperCase(stringVar25.charAt(0))) {
ftpfileVar1.setPermission(intVar23, FTPFile.EXECUTE_PERMISSION, true);
} else {
ftpfileVar1.setPermission(intVar23, FTPFile.EXECUTE_PERMISSION, false);
}
}
if (!booleanVar4) {
try {
ftpfileVar1.setHardLinkCount(Integer.parseInt(stringVar8));
} catch (NumberFormatException e) {
}
}
ftpfileVar1.setUser(stringVar10);
ftpfileVar1.setGroup(stringVar12);
try {
ftpfileVar1.setSize(Long.parseLong(stringVar13));
} catch (NumberFormatException e) {
}
if (null == stringVar19) {
ftpfileVar1.setName(stringVar17);
} else {
stringVar17 += stringVar19;
if (intVar3 == FTPFile.SYMBOLIC_LINK_TYPE) {
int intVar27 = intLiteral28;
if (intVar27 == -1) {
ftpfileVar1.setName(stringVar17);
} else {
ftpfileVar1.setName(stringVar17.substring(0, intVar27));
ftpfileVar1.setLink(stringVar17.substring(intVar27 + 4));
}
} else {
ftpfileVar1.setName(stringVar17);
}
}
return ftpfileVar1;
}
return null;
}"
14484,DODGY_CODE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,FP,net,543,"return (IOException) getCause(); 
","public IOException getIOException() {
return (IOException) getCause();
}","public IOException getIOException() {
return (IOException) getCause();
}"
14488,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,net,547,"return null;
","public String[] listOverviewFmt() throws IOException {
if (!NNTPReply.isPositiveCompletion(sendCommand(""LIST"", ""OVERVIEW.FMT""))) {
return null;
}
BufferedReader reader = new DotTerminatedMessageReader(_reader_);
String line;
ArrayList<String> list = new ArrayList<String>();
while ((line = reader.readLine()) != null) {
list.add(line);
}
reader.close();
return list.toArray(new String[list.size()]);
}","public String[] listOverviewFmt() throws IOException {
if (!NNTPReply.isPositiveCompletion(sendCommand(""LIST"", ""OVERVIEW.FMT""))) {
return null;
}
BufferedReader bufferedreaderVar1 = bufferedreaderLiteral2;
String stringVar3;
ArrayList<String> arraylist<string>Var4 = arraylist<string>Literal5;
while ((stringVar3 = bufferedreaderVar1.readLine()) != null) {
arraylist<string>Var4.add(stringVar3);
}
bufferedreaderVar1.close();
return arraylist<string>Var4.toArray(new String[arraylist<string>Var4.size()]);
}"
14489,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,net,548,"return null;
","public NewsgroupInfo[] listNewsgroups(String wildmat) throws IOException {
if (!NNTPReply.isPositiveCompletion(listActive(wildmat))) {
return null;
}
return __readNewsgroupListing();
}","public NewsgroupInfo[] listNewsgroups(String wildmat) throws IOException {
if (!NNTPReply.isPositiveCompletion(listActive(wildmat))) {
return null;
}
return __readNewsgroupListing();
}"
14491,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,net,550,"return null;
","public NewsgroupInfo[] listNewNewsgroups(NewGroupsOrNewsQuery query) throws IOException {
if (!NNTPReply.isPositiveCompletion(newgroups(query.getDate(), query.getTime(), query.isGMT(), query.getDistributions()))) {
return null;
}
return __readNewsgroupListing();
}","public NewsgroupInfo[] listNewNewsgroups(NewGroupsOrNewsQuery query) throws IOException {
if (!NNTPReply.isPositiveCompletion(newgroups(query.getDate(), query.getTime(), query.isGMT(), query.getDistributions()))) {
return null;
}
return __readNewsgroupListing();
}"
14504,DODGY_CODE,DLS_DEAD_LOCAL_STORE,FP,net,563,"num = size = 0;
","private static POP3MessageInfo __parseStatus(String line) {
int num, size;
StringTokenizer tokenizer;
tokenizer = new StringTokenizer(line);
if (!tokenizer.hasMoreElements()) {
return null;
}
num = size = 0;
try {
num = Integer.parseInt(tokenizer.nextToken());
if (!tokenizer.hasMoreElements()) {
return null;
}
size = Integer.parseInt(tokenizer.nextToken());
} catch (NumberFormatException e) {
return null;
}
return new POP3MessageInfo(num, size);
}","private static POP3MessageInfo __parseStatus(String line) {
int intVar1, intVar2;
StringTokenizer stringtokenizerVar3;
stringtokenizerVar3 = new StringTokenizer(line);
if (!stringtokenizerVar3.hasMoreElements()) {
return null;
}
intVar1 = intVar2 = 0;
try {
intVar1 = Integer.parseInt(stringtokenizerVar3.nextToken());
if (!stringtokenizerVar3.hasMoreElements()) {
return null;
}
intVar2 = Integer.parseInt(stringtokenizerVar3.nextToken());
} catch (NumberFormatException e) {
return null;
}
return new POP3MessageInfo(intVar1, intVar2);
}"
14505,DODGY_CODE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,FP,net,564,public String identifier;,public String identifier;,public String stringVar1;
14513,Multithreaded correctness,WA_NOT_IN_LOOP,FP,net,572,"aytMonitor.wait(timeout);
","final boolean _sendAYT(long timeout) throws IOException, IllegalArgumentException, InterruptedException {
boolean retValue = false;
synchronized (aytMonitor) {
synchronized (this) {
aytFlag = false;
_output_.write(_COMMAND_AYT);
_output_.flush();
}
aytMonitor.wait(timeout);
if (aytFlag == false) {
retValue = false;
aytFlag = true;
} else {
retValue = true;
}
}
return (retValue);
}","final boolean _sendAYT(long timeout) throws IOException, IllegalArgumentException, InterruptedException {
boolean booleanVar1 = booleanLiteral2;
synchronized (aytMonitor) {
synchronized (this) {
aytFlag = false;
_output_.write(_COMMAND_AYT);
_output_.flush();
}
aytMonitor.wait(timeout);
if (aytFlag == false) {
booleanVar1 = false;
aytFlag = true;
} else {
booleanVar1 = true;
}
}
return (booleanVar1);
}"
14515,Multithreaded correctness,NO_NOTIFY_NOT_NOTIFYALL,FP,net,574,"__queue.notify();
","@Override
public int read() throws IOException {
synchronized (__queue) {
while (true) {
if (__ioException != null) {
IOException e;
e = __ioException;
__ioException = null;
throw e;
}
if (__bytesAvailable == 0) {
if (__hasReachedEOF) {
return EOF;
}
if (__threaded) {
__queue.notify();
try {
__readIsWaiting = true;
__queue.wait();
__readIsWaiting = false;
} catch (InterruptedException e) {
throw new InterruptedIOException(""Fatal thread interruption during read."");
}
} else {
__readIsWaiting = true;
int ch;
boolean mayBlock = true;
do {
try {
if ((ch = __read(mayBlock)) < 0) {
if (ch != WOULD_BLOCK) {
return (ch);
}
}
} catch (InterruptedIOException e) {
synchronized (__queue) {
__ioException = e;
__queue.notifyAll();
try {
__queue.wait(100);
} catch (InterruptedException interrupted) {
}
}
return EOF;
}
try {
if (ch != WOULD_BLOCK) {
__processChar(ch);
}
} catch (InterruptedException e) {
if (__isClosed) {
return EOF;
}
}
mayBlock = false;
} while (super.available() > 0 && __bytesAvailable < __queue.length - 1);
__readIsWaiting = false;
}
continue;
} else {
int ch;
ch = __queue[__queueHead];
if (++__queueHead >= __queue.length) {
__queueHead = 0;
}
--__bytesAvailable;
if (__bytesAvailable == 0 && __threaded) {
__queue.notify();
}
return ch;
}
}
}
}","@Override
public int read() throws IOException {
synchronized (__queue) {
while (true) {
if (__ioException != null) {
IOException ioexceptionVar1;
ioexceptionVar1 = __ioException;
__ioException = null;
throw ioexceptionVar1;
}
if (__bytesAvailable == 0) {
if (__hasReachedEOF) {
return EOF;
}
if (__threaded) {
__queue.notify();
try {
__readIsWaiting = true;
__queue.wait();
__readIsWaiting = false;
} catch (InterruptedException e) {
throw new InterruptedIOException(""Fatal thread interruption during read."");
}
} else {
__readIsWaiting = true;
int intVar2;
boolean booleanVar3 = booleanLiteral4;
do {
try {
if ((intVar2 = __read(booleanVar3)) < 0) {
if (intVar2 != WOULD_BLOCK) {
return (intVar2);
}
}
} catch (InterruptedIOException e) {
synchronized (__queue) {
__ioException = ioexceptionVar1;
__queue.notifyAll();
try {
__queue.wait(100);
} catch (InterruptedException interrupted) {
}
}
return EOF;
}
try {
if (intVar2 != WOULD_BLOCK) {
__processChar(intVar2);
}
} catch (InterruptedException e) {
if (__isClosed) {
return EOF;
}
}
booleanVar3 = false;
} while (super.available() > 0 && __bytesAvailable < __queue.length - 1);
__readIsWaiting = false;
}
continue;
} else {
int intVar2;
intVar2 = __queue[__queueHead];
if (++__queueHead >= __queue.length) {
__queueHead = 0;
}
--__bytesAvailable;
if (__bytesAvailable == 0 && __threaded) {
__queue.notify();
}
return intVar2;
}
}
}
}"
14517,Multithreaded correctness,NO_NOTIFY_NOT_NOTIFYALL,FP,net,576,"__queue.notify();
","private boolean __processChar(int ch) throws InterruptedException {
boolean bufferWasEmpty;
synchronized (__queue) {
bufferWasEmpty = (__bytesAvailable == 0);
while (__bytesAvailable >= __queue.length - 1) {
if (__threaded) {
__queue.notify();
try {
__queue.wait();
} catch (InterruptedException e) {
throw e;
}
} else {
throw new IllegalStateException(""Queue is full! Cannot process another character."");
}
}
if (__readIsWaiting && __threaded) {
__queue.notify();
}
__queue[__queueTail] = ch;
++__bytesAvailable;
if (++__queueTail >= __queue.length) {
__queueTail = 0;
}
}
return bufferWasEmpty;
}","private boolean __processChar(int ch) throws InterruptedException {
boolean booleanVar1;
synchronized (__queue) {
booleanVar1 = (__bytesAvailable == 0);
while (__bytesAvailable >= __queue.length - 1) {
if (__threaded) {
__queue.notify();
try {
__queue.wait();
} catch (InterruptedException e) {
throw e;
}
} else {
throw new IllegalStateException(""Queue is full! Cannot process another character."");
}
}
if (__readIsWaiting && __threaded) {
__queue.notify();
}
__queue[__queueTail] = ch;
++__bytesAvailable;
if (++__queueTail >= __queue.length) {
__queueTail = 0;
}
}
return booleanVar1;
}"
14518,DODGY_CODE,DB_DUPLICATE_SWITCH_CLAUSES,FP,net,577,"__receiveState = _STATE_DATA;
break; 
","private int __read(boolean mayBlock) throws IOException {
int ch;
while (true) {
if (!mayBlock && super.available() == 0) {
return WOULD_BLOCK;
}
if ((ch = super.read()) < 0) {
return EOF;
}
ch = (ch & 0xff);
synchronized (__client) {
__client._processAYTResponse();
}
__client._spyRead(ch);
switch(__receiveState) {
case _STATE_CR:
if (ch == '\0') {
continue;
}
case _STATE_DATA:
if (ch == TelnetCommand.IAC) {
__receiveState = _STATE_IAC;
continue;
}
if (ch == '\r') {
synchronized (__client) {
if (__client._requestedDont(TelnetOption.BINARY)) {
__receiveState = _STATE_CR;
} else {
__receiveState = _STATE_DATA;
}
}
} else {
__receiveState = _STATE_DATA;
}
break;
case _STATE_IAC:
switch(ch) {
case TelnetCommand.WILL:
__receiveState = _STATE_WILL;
continue;
case TelnetCommand.WONT:
__receiveState = _STATE_WONT;
continue;
case TelnetCommand.DO:
__receiveState = _STATE_DO;
continue;
case TelnetCommand.DONT:
__receiveState = _STATE_DONT;
continue;
case TelnetCommand.SB:
__suboption_count = 0;
__receiveState = _STATE_SB;
continue;
case TelnetCommand.IAC:
__receiveState = _STATE_DATA;
break;
case // unexpected byte! ignore it (don't send it as a command)
TelnetCommand.SE:
__receiveState = _STATE_DATA;
continue;
default:
__receiveState = _STATE_DATA;
__client._processCommand(ch);
continue;
}
break;
case _STATE_WILL:
synchronized (__client) {
__client._processWill(ch);
__client._flushOutputStream();
}
__receiveState = _STATE_DATA;
continue;
case _STATE_WONT:
synchronized (__client) {
__client._processWont(ch);
__client._flushOutputStream();
}
__receiveState = _STATE_DATA;
continue;
case _STATE_DO:
synchronized (__client) {
__client._processDo(ch);
__client._flushOutputStream();
}
__receiveState = _STATE_DATA;
continue;
case _STATE_DONT:
synchronized (__client) {
__client._processDont(ch);
__client._flushOutputStream();
}
__receiveState = _STATE_DATA;
continue;
case _STATE_SB:
switch(ch) {
case TelnetCommand.IAC:
__receiveState = _STATE_IAC_SB;
continue;
default:
if (__suboption_count < __suboption.length) {
__suboption[__suboption_count++] = ch;
}
break;
}
__receiveState = _STATE_SB;
continue;
case // IAC received during SB phase
_STATE_IAC_SB:
switch(ch) {
case TelnetCommand.SE:
synchronized (__client) {
__client._processSuboption(__suboption, __suboption_count);
__client._flushOutputStream();
}
__receiveState = _STATE_DATA;
continue;
case // De-dup the duplicated IAC
TelnetCommand.IAC:
if (__suboption_count < __suboption.length) {
__suboption[__suboption_count++] = ch;
}
break;
default:
// unexpected byte! ignore it
break;
}
__receiveState = _STATE_SB;
continue;
}
break;
}
return ch;
}","private int __read(boolean mayBlock) throws IOException {
int intVar1;
while (true) {
if (!mayBlock && super.available() == 0) {
return WOULD_BLOCK;
}
if ((intVar1 = super.read()) < 0) {
return EOF;
}
intVar1 = (intVar1 & 0xff);
synchronized (__client) {
__client._processAYTResponse();
}
__client._spyRead(intVar1);
switch(__receiveState) {
case _STATE_CR:
if (intVar1 == '\0') {
continue;
}
case _STATE_DATA:
if (intVar1 == TelnetCommand.IAC) {
__receiveState = _STATE_IAC;
continue;
}
if (intVar1 == '\r') {
synchronized (__client) {
if (__client._requestedDont(TelnetOption.BINARY)) {
__receiveState = _STATE_CR;
} else {
__receiveState = _STATE_DATA;
}
}
} else {
__receiveState = _STATE_DATA;
}
break;
case _STATE_IAC:
switch(intVar1) {
case TelnetCommand.WILL:
__receiveState = _STATE_WILL;
continue;
case TelnetCommand.WONT:
__receiveState = _STATE_WONT;
continue;
case TelnetCommand.DO:
__receiveState = _STATE_DO;
continue;
case TelnetCommand.DONT:
__receiveState = _STATE_DONT;
continue;
case TelnetCommand.SB:
__suboption_count = 0;
__receiveState = _STATE_SB;
continue;
case TelnetCommand.IAC:
__receiveState = _STATE_DATA;
break;
case // unexpected byte! ignore it (don't send it as a command)
TelnetCommand.SE:
__receiveState = _STATE_DATA;
continue;
default:
__receiveState = _STATE_DATA;
__client._processCommand(intVar1);
continue;
}
break;
case _STATE_WILL:
synchronized (__client) {
__client._processWill(intVar1);
__client._flushOutputStream();
}
__receiveState = _STATE_DATA;
continue;
case _STATE_WONT:
synchronized (__client) {
__client._processWont(intVar1);
__client._flushOutputStream();
}
__receiveState = _STATE_DATA;
continue;
case _STATE_DO:
synchronized (__client) {
__client._processDo(intVar1);
__client._flushOutputStream();
}
__receiveState = _STATE_DATA;
continue;
case _STATE_DONT:
synchronized (__client) {
__client._processDont(intVar1);
__client._flushOutputStream();
}
__receiveState = _STATE_DATA;
continue;
case _STATE_SB:
switch(intVar1) {
case TelnetCommand.IAC:
__receiveState = _STATE_IAC_SB;
continue;
default:
if (__suboption_count < __suboption.length) {
__suboption[__suboption_count++] = intVar1;
}
break;
}
__receiveState = _STATE_SB;
continue;
case // IAC received during SB phase
_STATE_IAC_SB:
switch(intVar1) {
case TelnetCommand.SE:
synchronized (__client) {
__client._processSuboption(__suboption, __suboption_count);
__client._flushOutputStream();
}
__receiveState = _STATE_DATA;
continue;
case // De-dup the duplicated IAC
TelnetCommand.IAC:
if (__suboption_count < __suboption.length) {
__suboption[__suboption_count++] = intVar1;
}
break;
default:
// unexpected byte! ignore it
break;
}
__receiveState = _STATE_SB;
continue;
}
break;
}
return intVar1;
}"
14534,BAD_PRACTICE,SE_BAD_FIELD,FP,net,593,private final CopyOnWriteArrayList<EventListener> __listeners;,private final CopyOnWriteArrayList<EventListener> __listeners;,private final CopyOnWriteArrayList<EventListener> copyonwritearraylist<eventlistener>Var1;
14536,BAD_PRACTICE,THROWS_METHOD_THROWS_RUNTIMEEXCEPTION,FP,net,595,"long countLong = getAddressCountLong();
if (countLong > Integer.MAX_VALUE) {
throw new RuntimeException(""Count is larger than an integer: "" + countLong);
}
return (int)countLong;
","@Deprecated
public int getAddressCount() {
long countLong = getAddressCountLong();
if (countLong > Integer.MAX_VALUE) {
throw new RuntimeException(""Count is larger than an integer: "" + countLong);
}
return (int) countLong;
}","@Deprecated
public int getAddressCount() {
long longVar1 = longLiteral2;
if (longVar1 > Integer.MAX_VALUE) {
throw new RuntimeException(""Count is larger than an integer: "" + longVar1);
}
return (int) longVar1;
}"
14896,DODGY_CODE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,FP,net,955,"(SSLSocket) ssf.createSocket(_socket_, host, port, false);
","protected void sslNegotiation() throws IOException {
plainSocket = _socket_;
initSslContext();
SSLSocketFactory ssf = context.getSocketFactory();
String host = (_hostname_ != null) ? _hostname_ : getRemoteAddress().getHostAddress();
int port = _socket_.getPort();
SSLSocket socket = (SSLSocket) ssf.createSocket(_socket_, host, port, false);
socket.setEnableSessionCreation(isCreation);
socket.setUseClientMode(isClientMode);
if (isClientMode) {
if (tlsEndpointChecking) {
SSLSocketUtils.enableEndpointNameVerification(socket);
}
} else {
socket.setNeedClientAuth(isNeedClientAuth);
socket.setWantClientAuth(isWantClientAuth);
}
if (protocols != null) {
socket.setEnabledProtocols(protocols);
}
if (suites != null) {
socket.setEnabledCipherSuites(suites);
}
socket.startHandshake();
_socket_ = socket;
_controlInput_ = new BufferedReader(new InputStreamReader(socket.getInputStream(), getControlEncoding()));
_controlOutput_ = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream(), getControlEncoding()));
if (isClientMode) {
if (hostnameVerifier != null && !hostnameVerifier.verify(host, socket.getSession())) {
throw new SSLHandshakeException(""Hostname doesn't match certificate"");
}
}
}","protected void sslNegotiation() throws IOException {
plainSocket = _socket_;
initSslContext();
SSLSocketFactory sslsocketfactoryVar1 = sslsocketfactoryLiteral2;
String stringVar3 = stringLiteral4;
int intVar5 = intLiteral6;
SSLSocket sslsocketVar7 = sslsocketLiteral8;
sslsocketVar7.setEnableSessionCreation(isCreation);
sslsocketVar7.setUseClientMode(isClientMode);
if (isClientMode) {
if (tlsEndpointChecking) {
SSLSocketUtils.enableEndpointNameVerification(sslsocketVar7);
}
} else {
sslsocketVar7.setNeedClientAuth(isNeedClientAuth);
sslsocketVar7.setWantClientAuth(isWantClientAuth);
}
if (protocols != null) {
sslsocketVar7.setEnabledProtocols(protocols);
}
if (suites != null) {
sslsocketVar7.setEnabledCipherSuites(suites);
}
sslsocketVar7.startHandshake();
_socket_ = sslsocketVar7;
_controlInput_ = new BufferedReader(new InputStreamReader(sslsocketVar7.getInputStream(), getControlEncoding()));
_controlOutput_ = new BufferedWriter(new OutputStreamWriter(sslsocketVar7.getOutputStream(), getControlEncoding()));
if (isClientMode) {
if (hostnameVerifier != null && !hostnameVerifier.verify(stringVar3, sslsocketVar7.getSession())) {
throw new SSLHandshakeException(""Hostname doesn't match certificate"");
}
}
}"
14904,CORRECTNESS,IP_PARAMETER_IS_DEAD_BUT_OVERWRITTEN,FP,net,963,"file = unixFTPEntryParser.parseFTPEntry(entry);
","private boolean parseUnixList(FTPFile file, String entry) {
file = unixFTPEntryParser.parseFTPEntry(entry);
if (file == null) {
return false;
}
return true;
}","private boolean parseUnixList(FTPFile file, String entry) {
file = unixFTPEntryParser.parseFTPEntry(entry);
if (file == null) {
return false;
}
return true;
}"
14912,DODGY_CODE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,FP,net,971,"return (IOException) getCause(); 
","public IOException getIOException() {
return (IOException) getCause();
}","public IOException getIOException() {
return (IOException) getCause();
}"
14914,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,net,973,"return null;
","public String[] listOverviewFmt() throws IOException {
if (!NNTPReply.isPositiveCompletion(sendCommand(""LIST"", ""OVERVIEW.FMT""))) {
return null;
}
BufferedReader reader = new DotTerminatedMessageReader(_reader_);
String line;
ArrayList<String> list = new ArrayList<String>();
while ((line = reader.readLine()) != null) {
list.add(line);
}
reader.close();
return list.toArray(new String[list.size()]);
}","public String[] listOverviewFmt() throws IOException {
if (!NNTPReply.isPositiveCompletion(sendCommand(""LIST"", ""OVERVIEW.FMT""))) {
return null;
}
BufferedReader bufferedreaderVar1 = bufferedreaderLiteral2;
String stringVar3;
ArrayList<String> arraylist<string>Var4 = arraylist<string>Literal5;
while ((stringVar3 = bufferedreaderVar1.readLine()) != null) {
arraylist<string>Var4.add(stringVar3);
}
bufferedreaderVar1.close();
return arraylist<string>Var4.toArray(new String[arraylist<string>Var4.size()]);
}"
14919,DODGY_CODE,DLS_DEAD_LOCAL_STORE,FP,net,978,"pointer.articleId = tokens[i++];
","private void __parseArticlePointer(String reply, ArticleInfo pointer) throws MalformedServerReplyException {
String[] tokens = reply.split("" "");
if (tokens.length >= 3) {
int i = 1;
try {
pointer.articleNumber = Long.parseLong(tokens[i++]);
pointer.articleId = tokens[i++];
return;
} catch (NumberFormatException e) {
}
}
throw new MalformedServerReplyException(""Could not parse article pointer.\nServer reply: "" + reply);
}","private void __parseArticlePointer(String reply, ArticleInfo pointer) throws MalformedServerReplyException {
String[] stringArrayVar1 = stringArrayLiteral2;
if (stringArrayVar1.length >= 3) {
int intVar3 = intLiteral4;
try {
pointer.articleNumber = Long.parseLong(stringArrayVar1[intVar3++]);
pointer.articleId = stringArrayVar1[intVar3++];
return;
} catch (NumberFormatException e) {
}
}
throw new MalformedServerReplyException(""Could not parse article pointer.\nServer reply: "" + reply);
}"
14924,BAD_PRACTICE,THROWS_METHOD_THROWS_RUNTIMEEXCEPTION,FP,net,983,"String id = threadable.messageThreadId();
ThreadContainer container = idTable.get(id);
int bogusIdCount = 0;
if (container != null) {
if (container.threadable != null) { 
bogusIdCount++ ; 
id = ""<Bogus-id:"" + (bogusIdCount) + "">"";
container = null;
} else {
container.threadable = threadable;
}
}
if (container == null) {
container = new ThreadContainer();
container.threadable = threadable;
idTable.put(id, container);
}
ThreadContainer parentRef = null;
{
String[] references = threadable.messageThreadReferences();
for (String refString : references)
{
ThreadContainer ref = idTable.get(refString);
if (ref == null) {
ref = new ThreadContainer();
idTable.put(refString, ref);
}
// Link references together in the order they appear in the References: header,
if ((parentRef != null)
&& (ref.parent == null)
&& (parentRef != ref)
&& !(ref.findChild(parentRef))) {
ref.parent = parentRef;
ref.next = parentRef.child;
parentRef.child = ref;
}
parentRef = ref;
}
}
if (parentRef != null
&& (parentRef == container || container.findChild(parentRef)))
{
parentRef = null;
}
// if it has a parent already, its because we saw this message in a References: field, and presumed
if (container.parent != null) {
ThreadContainer rest, prev;
for (prev = null, rest = container.parent.child;
rest != null;
prev = rest, rest = rest.next) {
if (rest == container) {
break;
}
}
if (rest == null) {
throw new RuntimeException(
""Didnt find ""
+ container
+ "" in parent""
+ container.parent);
}
if (prev == null) {
container.parent.child = container.next;
} else {
prev.next = container.next;
}
container.next = null;
container.parent = null;
}
if (parentRef != null) {
container.parent = parentRef;
container.next = parentRef.child;
parentRef.child = container;
}
}
","private void buildContainer(Threadable threadable, HashMap<String, ThreadContainer> idTable) {
String id = threadable.messageThreadId();
ThreadContainer container = idTable.get(id);
int bogusIdCount = 0;
if (container != null) {
if (container.threadable != null) {
bogusIdCount++;
id = ""<Bogus-id:"" + (bogusIdCount) + "">"";
container = null;
} else {
container.threadable = threadable;
}
}
if (container == null) {
container = new ThreadContainer();
container.threadable = threadable;
idTable.put(id, container);
}
ThreadContainer parentRef = null;
{
String[] references = threadable.messageThreadReferences();
for (String refString : references) {
ThreadContainer ref = idTable.get(refString);
if (ref == null) {
ref = new ThreadContainer();
idTable.put(refString, ref);
}
// Link references together in the order they appear in the References: header,
if ((parentRef != null) && (ref.parent == null) && (parentRef != ref) && !(ref.findChild(parentRef))) {
ref.parent = parentRef;
ref.next = parentRef.child;
parentRef.child = ref;
}
parentRef = ref;
}
}
if (parentRef != null && (parentRef == container || container.findChild(parentRef))) {
parentRef = null;
}
// if it has a parent already, its because we saw this message in a References: field, and presumed
if (container.parent != null) {
ThreadContainer rest, prev;
for (prev = null, rest = container.parent.child; rest != null; prev = rest, rest = rest.next) {
if (rest == container) {
break;
}
}
if (rest == null) {
throw new RuntimeException(""Didnt find "" + container + "" in parent"" + container.parent);
}
if (prev == null) {
container.parent.child = container.next;
} else {
prev.next = container.next;
}
container.next = null;
container.parent = null;
}
if (parentRef != null) {
container.parent = parentRef;
container.next = parentRef.child;
parentRef.child = container;
}
}","private void buildContainer(Threadable threadable, HashMap<String, ThreadContainer> idTable) {
String stringVar1 = stringLiteral2;
ThreadContainer threadcontainerVar3 = threadcontainerLiteral4;
int intVar5 = intLiteral6;
if (threadcontainerVar3 != null) {
if (threadcontainerVar3.threadable != null) {
intVar5++;
stringVar1 = ""<Bogus-id:"" + (intVar5) + "">"";
threadcontainerVar3 = null;
} else {
threadcontainerVar3.threadable = threadable;
}
}
if (threadcontainerVar3 == null) {
threadcontainerVar3 = new ThreadContainer();
threadcontainerVar3.threadable = threadable;
idTable.put(stringVar1, threadcontainerVar3);
}
ThreadContainer threadcontainerVar7 = threadcontainerLiteral8;
{
String[] stringArrayVar9 = stringArrayLiteral10;
for (String stringVar11 : stringArrayVar9) {
ThreadContainer threadcontainerVar12 = threadcontainerLiteral13;
if (threadcontainerVar12 == null) {
threadcontainerVar12 = new ThreadContainer();
idTable.put(stringVar11, threadcontainerVar12);
}
// Link references together in the order they appear in the References: header,
if ((threadcontainerVar7 != null) && (threadcontainerVar12.parent == null) && (threadcontainerVar7 != threadcontainerVar12) && !(threadcontainerVar12.findChild(threadcontainerVar7))) {
threadcontainerVar12.parent = threadcontainerVar7;
threadcontainerVar12.next = threadcontainerVar7.child;
threadcontainerVar7.child = threadcontainerVar12;
}
threadcontainerVar7 = threadcontainerVar12;
}
}
if (threadcontainerVar7 != null && (threadcontainerVar7 == threadcontainerVar3 || threadcontainerVar3.findChild(threadcontainerVar7))) {
threadcontainerVar7 = null;
}
// if it has a parent already, its because we saw this message in a References: field, and presumed
if (threadcontainerVar3.parent != null) {
ThreadContainer threadcontainerVar14, threadcontainerVar15;
for (threadcontainerVar15 = null, threadcontainerVar14 = threadcontainerVar3.parent.child; threadcontainerVar14 != null; threadcontainerVar15 = threadcontainerVar14, threadcontainerVar14 = threadcontainerVar14.next) {
if (threadcontainerVar14 == threadcontainerVar3) {
break;
}
}
if (threadcontainerVar14 == null) {
throw new RuntimeException(""Didnt find "" + threadcontainerVar3 + "" in parent"" + threadcontainerVar3.parent);
}
if (threadcontainerVar15 == null) {
threadcontainerVar3.parent.child = threadcontainerVar3.next;
} else {
threadcontainerVar15.next = threadcontainerVar3.next;
}
threadcontainerVar3.next = null;
threadcontainerVar3.parent = null;
}
if (threadcontainerVar7 != null) {
threadcontainerVar3.parent = threadcontainerVar7;
threadcontainerVar3.next = threadcontainerVar7.child;
threadcontainerVar7.child = threadcontainerVar3;
}
}"
14927,DODGY_CODE,DLS_DEAD_LOCAL_STORE,FP,net,986,"num = size = 0;
","private static POP3MessageInfo __parseStatus(String line) {
int num, size;
StringTokenizer tokenizer;
tokenizer = new StringTokenizer(line);
if (!tokenizer.hasMoreElements()) {
return null;
}
num = size = 0;
try {
num = Integer.parseInt(tokenizer.nextToken());
if (!tokenizer.hasMoreElements()) {
return null;
}
size = Integer.parseInt(tokenizer.nextToken());
} catch (NumberFormatException e) {
return null;
}
return new POP3MessageInfo(num, size);
}","private static POP3MessageInfo __parseStatus(String line) {
int intVar1, intVar2;
StringTokenizer stringtokenizerVar3;
stringtokenizerVar3 = new StringTokenizer(line);
if (!stringtokenizerVar3.hasMoreElements()) {
return null;
}
intVar1 = intVar2 = 0;
try {
intVar1 = Integer.parseInt(stringtokenizerVar3.nextToken());
if (!stringtokenizerVar3.hasMoreElements()) {
return null;
}
intVar2 = Integer.parseInt(stringtokenizerVar3.nextToken());
} catch (NumberFormatException e) {
return null;
}
return new POP3MessageInfo(intVar1, intVar2);
}"
14935,Multithreaded correctness,WA_NOT_IN_LOOP,FP,net,994,"aytMonitor.wait(timeout);
","final boolean _sendAYT(long timeout) throws IOException, IllegalArgumentException, InterruptedException {
boolean retValue = false;
synchronized (aytMonitor) {
synchronized (this) {
aytFlag = false;
_output_.write(_COMMAND_AYT);
_output_.flush();
}
aytMonitor.wait(timeout);
if (aytFlag == false) {
retValue = false;
aytFlag = true;
} else {
retValue = true;
}
}
return (retValue);
}","final boolean _sendAYT(long timeout) throws IOException, IllegalArgumentException, InterruptedException {
boolean booleanVar1 = booleanLiteral2;
synchronized (aytMonitor) {
synchronized (this) {
aytFlag = false;
_output_.write(_COMMAND_AYT);
_output_.flush();
}
aytMonitor.wait(timeout);
if (aytFlag == false) {
booleanVar1 = false;
aytFlag = true;
} else {
booleanVar1 = true;
}
}
return (booleanVar1);
}"
14941,Multithreaded correctness,NO_NOTIFY_NOT_NOTIFYALL,FP,net,1000,"__queue.notify();
","@Override
public int read() throws IOException {
synchronized (__queue) {
while (true) {
if (__ioException != null) {
IOException e;
e = __ioException;
__ioException = null;
throw e;
}
if (__bytesAvailable == 0) {
if (__hasReachedEOF) {
return EOF;
}
if (__threaded) {
__queue.notify();
try {
__readIsWaiting = true;
__queue.wait();
__readIsWaiting = false;
} catch (InterruptedException e) {
throw new InterruptedIOException(""Fatal thread interruption during read."");
}
} else {
__readIsWaiting = true;
int ch;
boolean mayBlock = true;
do {
try {
if ((ch = __read(mayBlock)) < 0) {
if (ch != WOULD_BLOCK) {
return (ch);
}
}
} catch (InterruptedIOException e) {
synchronized (__queue) {
__ioException = e;
__queue.notifyAll();
try {
__queue.wait(100);
} catch (InterruptedException interrupted) {
}
}
return EOF;
}
try {
if (ch != WOULD_BLOCK) {
__processChar(ch);
}
} catch (InterruptedException e) {
if (__isClosed) {
return EOF;
}
}
mayBlock = false;
} while (super.available() > 0 && __bytesAvailable < __queue.length - 1);
__readIsWaiting = false;
}
continue;
} else {
int ch;
ch = __queue[__queueHead];
if (++__queueHead >= __queue.length) {
__queueHead = 0;
}
--__bytesAvailable;
if (__bytesAvailable == 0 && __threaded) {
__queue.notify();
}
return ch;
}
}
}
}","@Override
public int read() throws IOException {
synchronized (__queue) {
while (true) {
if (__ioException != null) {
IOException ioexceptionVar1;
ioexceptionVar1 = __ioException;
__ioException = null;
throw ioexceptionVar1;
}
if (__bytesAvailable == 0) {
if (__hasReachedEOF) {
return EOF;
}
if (__threaded) {
__queue.notify();
try {
__readIsWaiting = true;
__queue.wait();
__readIsWaiting = false;
} catch (InterruptedException e) {
throw new InterruptedIOException(""Fatal thread interruption during read."");
}
} else {
__readIsWaiting = true;
int intVar2;
boolean booleanVar3 = booleanLiteral4;
do {
try {
if ((intVar2 = __read(booleanVar3)) < 0) {
if (intVar2 != WOULD_BLOCK) {
return (intVar2);
}
}
} catch (InterruptedIOException e) {
synchronized (__queue) {
__ioException = ioexceptionVar1;
__queue.notifyAll();
try {
__queue.wait(100);
} catch (InterruptedException interrupted) {
}
}
return EOF;
}
try {
if (intVar2 != WOULD_BLOCK) {
__processChar(intVar2);
}
} catch (InterruptedException e) {
if (__isClosed) {
return EOF;
}
}
booleanVar3 = false;
} while (super.available() > 0 && __bytesAvailable < __queue.length - 1);
__readIsWaiting = false;
}
continue;
} else {
int intVar2;
intVar2 = __queue[__queueHead];
if (++__queueHead >= __queue.length) {
__queueHead = 0;
}
--__bytesAvailable;
if (__bytesAvailable == 0 && __threaded) {
__queue.notify();
}
return intVar2;
}
}
}
}"
14943,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,net,1002,"return null;
","public int[] startSubnegotiationRemote() {
return null;
}","public int[] startSubnegotiationRemote() {
return null;
}"
14951,DODGY_CODE,SA_FIELD_DOUBLE_ASSIGNMENT,FP,net,1010,"modulus = (++modulus) % 4;
","void decode(byte[] in, int inPos, int inAvail) {
if (eof) {
return;
}
if (inAvail < 0) {
eof = true;
}
for (int i = 0; i < inAvail; i++) {
if (buffer == null || buffer.length - pos < decodeSize) {
resizeBuffer();
}
byte b = in[inPos++];
if (b == PAD) {
eof = true;
break;
} else {
if (b >= 0 && b < DECODE_TABLE.length) {
int result = DECODE_TABLE[b];
if (result >= 0) {
modulus = (++modulus) % 4;
x = (x << 6) + result;
if (modulus == 0) {
buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
buffer[pos++] = (byte) (x & MASK_8BITS);
}
}
}
}
}
// Two forms of EOF as far as base64 decoder is concerned: actual
if (eof && modulus != 0) {
x = x << 6;
switch(modulus) {
case 2:
x = x << 6;
buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
break;
case 3:
buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
break;
default:
break;
}
}
}","void decode(byte[] in, int inPos, int inAvail) {
if (eof) {
return;
}
if (inAvail < 0) {
eof = true;
}
for (int intVar7 = intLiteral8; intVar1 < intLiteral1; intVar1++) {
if (buffer == null || buffer.length - pos < decodeSize) {
resizeBuffer();
}
byte byteVar3 = byteLiteral4;
if (byteVar3 == PAD) {
eof = true;
break;
} else {
if (byteVar3 >= 0 && byteVar3 < DECODE_TABLE.length) {
int intVar5 = intLiteral6;
if (intVar5 >= 0) {
modulus = (++modulus) % 4;
x = (x << 6) + intVar5;
if (modulus == 0) {
buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
buffer[pos++] = (byte) (x & MASK_8BITS);
}
}
}
}
}
// Two forms of EOF as far as base64 decoder is concerned: actual
if (eof && modulus != 0) {
x = x << 6;
switch(modulus) {
case 2:
x = x << 6;
buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
break;
case 3:
buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
break;
default:
break;
}
}
}"
14953,BAD_PRACTICE,THROWS_METHOD_THROWS_RUNTIMEEXCEPTION,FP,net,1012,"return pArray.getBytes(""UTF8"");
} catch (UnsupportedEncodingException e) {
throw new RuntimeException(e);
","private byte[] getBytesUtf8(String pArray) {
try {
return pArray.getBytes(""UTF8"");
} catch (UnsupportedEncodingException e) {
throw new RuntimeException(e);
}
}","private byte[] getBytesUtf8(String pArray) {
try {
return pArray.getBytes(""UTF8"");
} catch (UnsupportedEncodingException e) {
throw new RuntimeException(e);
}
}"
15151,I18N,DM_DEFAULT_ENCODING,FP,net,1210,"this(new PrintWriter(stream), suppressLogin);
","public PrintCommandListener(PrintStream stream, boolean suppressLogin) {
this(new PrintWriter(stream), suppressLogin);
}","public PrintCommandListener(PrintStream stream, boolean suppressLogin) {
this(new PrintWriter(stream), suppressLogin);
}"
15152,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,net,1211,"return null;
","public String[] doCommandAsStrings(String command, String params) throws IOException {
boolean success = FTPReply.isPositiveCompletion(sendCommand(command, params));
if (success) {
return getReplyStrings();
} else {
return null;
}
}","public String[] doCommandAsStrings(String command, String params) throws IOException {
boolean booleanVar1 = booleanLiteral2;
if (booleanVar1) {
return getReplyStrings();
} else {
return null;
}
}"
15153,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,net,1212,"return null;
","public String[] featureValues(String feature) throws IOException {
if (!initFeatureMap()) {
return null;
}
Set<String> entries = __featuresMap.get(feature.toUpperCase(Locale.ENGLISH));
if (entries != null) {
return entries.toArray(new String[entries.size()]);
}
return null;
}","public String[] featureValues(String feature) throws IOException {
if (!initFeatureMap()) {
return null;
}
Set<String> set<string>Var1 = set<string>Literal2;
if (set<string>Var1 != null) {
return set<string>Var1.toArray(new String[set<string>Var1.size()]);
}
return null;
}"
15158,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,net,1217,"return null;
","public byte[] parseADATReply(String reply) {
if (reply == null) {
return null;
} else {
return Base64.decodeBase64(extractPrefixedData(""ADAT="", reply));
}
}","public byte[] parseADATReply(String reply) {
if (reply == null) {
return null;
} else {
return Base64.decodeBase64(extractPrefixedData(""ADAT="", reply));
}
}"
15159,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,net,1218,"return null;
","public String[] getEnabledCipherSuites() {
if (_socket_ instanceof SSLSocket) {
return ((SSLSocket) _socket_).getEnabledCipherSuites();
}
return null;
}","public String[] getEnabledCipherSuites() {
if (_socket_ instanceof SSLSocket) {
return ((SSLSocket) _socket_).getEnabledCipherSuites();
}
return null;
}"
15160,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,net,1219,"return null;
","public String[] getEnabledProtocols() {
if (_socket_ instanceof SSLSocket) {
return ((SSLSocket) _socket_).getEnabledProtocols();
}
return null;
}","public String[] getEnabledProtocols() {
if (_socket_ instanceof SSLSocket) {
return ((SSLSocket) _socket_).getEnabledProtocols();
}
return null;
}"
15163,DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,net,1222,"file = unixFTPEntryParser.parseFTPEntry(entry);
","private boolean parseUnixList(FTPFile file, String entry) {
file = unixFTPEntryParser.parseFTPEntry(entry);
if (file == null) {
return false;
}
return true;
}","private boolean parseUnixList(FTPFile file, String entry) {
file = unixFTPEntryParser.parseFTPEntry(entry);
if (file == null) {
return false;
}
return true;
}"
15171,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,net,1230,"return null;
","public String[] getEnabledCipherSuites() {
if (_socket_ instanceof SSLSocket) {
return ((SSLSocket) _socket_).getEnabledCipherSuites();
}
return null;
}","public String[] getEnabledCipherSuites() {
if (_socket_ instanceof SSLSocket) {
return ((SSLSocket) _socket_).getEnabledCipherSuites();
}
return null;
}"
15175,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,net,1234,"return null;
","public NewsgroupInfo[] listNewsgroups() throws IOException {
if (!NNTPReply.isPositiveCompletion(list())) {
return null;
}
return __readNewsgroupListing();
}","public NewsgroupInfo[] listNewsgroups() throws IOException {
if (!NNTPReply.isPositiveCompletion(list())) {
return null;
}
return __readNewsgroupListing();
}"
15182,BAD_PRACTICE,THROWS_METHOD_THROWS_RUNTIMEEXCEPTION,FP,net,1241,"String id = threadable.messageThreadId();
ThreadContainer container = idTable.get(id);
int bogusIdCount = 0;
if (container != null) {
if (container.threadable != null) { 
bogusIdCount++ ; 
id = ""<Bogus-id:"" + (bogusIdCount) + "">"";
container = null;
} else {
container.threadable = threadable;
}
}
if (container == null) {
container = new ThreadContainer();
container.threadable = threadable;
idTable.put(id, container);
}
ThreadContainer parentRef = null;
{
String[] references = threadable.messageThreadReferences();
for (String refString : references)
{
ThreadContainer ref = idTable.get(refString);
if (ref == null) {
ref = new ThreadContainer();
idTable.put(refString, ref);
}
// Link references together in the order they appear in the References: header,
if ((parentRef != null)
&& (ref.parent == null)
&& (parentRef != ref)
&& !(ref.findChild(parentRef))) {
ref.parent = parentRef;
ref.next = parentRef.child;
parentRef.child = ref;
}
parentRef = ref;
}
}
if (parentRef != null
&& (parentRef == container || container.findChild(parentRef)))
{
parentRef = null;
}
// if it has a parent already, its because we saw this message in a References: field, and presumed
if (container.parent != null) {
ThreadContainer rest, prev;
for (prev = null, rest = container.parent.child;
rest != null;
prev = rest, rest = rest.next) {
if (rest == container) {
break;
}
}
if (rest == null) {
throw new RuntimeException(
""Didnt find ""
+ container
+ "" in parent""
+ container.parent);
}
if (prev == null) {
container.parent.child = container.next;
} else {
prev.next = container.next;
}
container.next = null;
container.parent = null;
}
if (parentRef != null) {
container.parent = parentRef;
container.next = parentRef.child;
parentRef.child = container;
}
}
","private void buildContainer(Threadable threadable, HashMap<String, ThreadContainer> idTable) {
String id = threadable.messageThreadId();
ThreadContainer container = idTable.get(id);
int bogusIdCount = 0;
if (container != null) {
if (container.threadable != null) {
bogusIdCount++;
id = ""<Bogus-id:"" + (bogusIdCount) + "">"";
container = null;
} else {
container.threadable = threadable;
}
}
if (container == null) {
container = new ThreadContainer();
container.threadable = threadable;
idTable.put(id, container);
}
ThreadContainer parentRef = null;
{
String[] references = threadable.messageThreadReferences();
for (String refString : references) {
ThreadContainer ref = idTable.get(refString);
if (ref == null) {
ref = new ThreadContainer();
idTable.put(refString, ref);
}
// Link references together in the order they appear in the References: header,
if ((parentRef != null) && (ref.parent == null) && (parentRef != ref) && !(ref.findChild(parentRef))) {
ref.parent = parentRef;
ref.next = parentRef.child;
parentRef.child = ref;
}
parentRef = ref;
}
}
if (parentRef != null && (parentRef == container || container.findChild(parentRef))) {
parentRef = null;
}
// if it has a parent already, its because we saw this message in a References: field, and presumed
if (container.parent != null) {
ThreadContainer rest, prev;
for (prev = null, rest = container.parent.child; rest != null; prev = rest, rest = rest.next) {
if (rest == container) {
break;
}
}
if (rest == null) {
throw new RuntimeException(""Didnt find "" + container + "" in parent"" + container.parent);
}
if (prev == null) {
container.parent.child = container.next;
} else {
prev.next = container.next;
}
container.next = null;
container.parent = null;
}
if (parentRef != null) {
container.parent = parentRef;
container.next = parentRef.child;
parentRef.child = container;
}
}","private void buildContainer(Threadable threadable, HashMap<String, ThreadContainer> idTable) {
String stringVar1 = stringLiteral2;
ThreadContainer threadcontainerVar3 = threadcontainerLiteral4;
int intVar5 = intLiteral6;
if (threadcontainerVar3 != null) {
if (threadcontainerVar3.threadable != null) {
intVar5++;
stringVar1 = ""<Bogus-id:"" + (intVar5) + "">"";
threadcontainerVar3 = null;
} else {
threadcontainerVar3.threadable = threadable;
}
}
if (threadcontainerVar3 == null) {
threadcontainerVar3 = new ThreadContainer();
threadcontainerVar3.threadable = threadable;
idTable.put(stringVar1, threadcontainerVar3);
}
ThreadContainer threadcontainerVar7 = threadcontainerLiteral8;
{
String[] stringArrayVar9 = stringArrayLiteral10;
for (String stringVar11 : stringArrayVar9) {
ThreadContainer threadcontainerVar12 = threadcontainerLiteral13;
if (threadcontainerVar12 == null) {
threadcontainerVar12 = new ThreadContainer();
idTable.put(stringVar11, threadcontainerVar12);
}
// Link references together in the order they appear in the References: header,
if ((threadcontainerVar7 != null) && (threadcontainerVar12.parent == null) && (threadcontainerVar7 != threadcontainerVar12) && !(threadcontainerVar12.findChild(threadcontainerVar7))) {
threadcontainerVar12.parent = threadcontainerVar7;
threadcontainerVar12.next = threadcontainerVar7.child;
threadcontainerVar7.child = threadcontainerVar12;
}
threadcontainerVar7 = threadcontainerVar12;
}
}
if (threadcontainerVar7 != null && (threadcontainerVar7 == threadcontainerVar3 || threadcontainerVar3.findChild(threadcontainerVar7))) {
threadcontainerVar7 = null;
}
// if it has a parent already, its because we saw this message in a References: field, and presumed
if (threadcontainerVar3.parent != null) {
ThreadContainer threadcontainerVar14, threadcontainerVar15;
for (threadcontainerVar15 = null, threadcontainerVar14 = threadcontainerVar3.parent.child; threadcontainerVar14 != null; threadcontainerVar15 = threadcontainerVar14, threadcontainerVar14 = threadcontainerVar14.next) {
if (threadcontainerVar14 == threadcontainerVar3) {
break;
}
}
if (threadcontainerVar14 == null) {
throw new RuntimeException(""Didnt find "" + threadcontainerVar3 + "" in parent"" + threadcontainerVar3.parent);
}
if (threadcontainerVar15 == null) {
threadcontainerVar3.parent.child = threadcontainerVar3.next;
} else {
threadcontainerVar15.next = threadcontainerVar3.next;
}
threadcontainerVar3.next = null;
threadcontainerVar3.parent = null;
}
if (threadcontainerVar7 != null) {
threadcontainerVar3.parent = threadcontainerVar7;
threadcontainerVar3.next = threadcontainerVar7.child;
threadcontainerVar7.child = threadcontainerVar3;
}
}"
15185,MALICIOUS_CODE,MC_OVERRIDABLE_METHOD_CALL_IN_CONSTRUCTOR,FP,net,1244,"computeDetails();
","public TimeInfo(NtpV3Packet message, long returnTime, List<String> comments, boolean doComputeDetails) {
if (message == null) {
throw new IllegalArgumentException(""message cannot be null"");
}
this._returnTime = returnTime;
this._message = message;
this._comments = comments;
if (doComputeDetails) {
computeDetails();
}
}","public TimeInfo(NtpV3Packet message, long returnTime, List<String> comments, boolean doComputeDetails) {
if (message == null) {
throw new IllegalArgumentException(""message cannot be null"");
}
this._returnTime = returnTime;
this._message = message;
this._comments = comments;
if (doComputeDetails) {
computeDetails();
}
}"
15192,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,net,1251,"return null;
","public String[] getEnabledProtocols() {
if (_socket_ instanceof SSLSocket) {
return ((SSLSocket) _socket_).getEnabledProtocols();
}
return null;
}","public String[] getEnabledProtocols() {
if (_socket_ instanceof SSLSocket) {
return ((SSLSocket) _socket_).getEnabledProtocols();
}
return null;
}"
15197,Multithreaded correctness,NO_NOTIFY_NOT_NOTIFYALL,FP,net,1256,"__queue.notify();
","private boolean __processChar(int ch) throws InterruptedException {
boolean bufferWasEmpty;
synchronized (__queue) {
bufferWasEmpty = (__bytesAvailable == 0);
while (__bytesAvailable >= __queue.length - 1) {
if (__threaded) {
__queue.notify();
try {
__queue.wait();
} catch (InterruptedException e) {
throw e;
}
} else {
throw new IllegalStateException(""Queue is full! Cannot process another character."");
}
}
if (__readIsWaiting && __threaded) {
__queue.notify();
}
__queue[__queueTail] = ch;
++__bytesAvailable;
if (++__queueTail >= __queue.length) {
__queueTail = 0;
}
}
return bufferWasEmpty;
}","private boolean __processChar(int ch) throws InterruptedException {
boolean booleanVar1;
synchronized (__queue) {
booleanVar1 = (__bytesAvailable == 0);
while (__bytesAvailable >= __queue.length - 1) {
if (__threaded) {
__queue.notify();
try {
__queue.wait();
} catch (InterruptedException e) {
throw e;
}
} else {
throw new IllegalStateException(""Queue is full! Cannot process another character."");
}
}
if (__readIsWaiting && __threaded) {
__queue.notify();
}
__queue[__queueTail] = ch;
++__bytesAvailable;
if (++__queueTail >= __queue.length) {
__queueTail = 0;
}
}
return booleanVar1;
}"
15200,Multithreaded correctness,NO_NOTIFY_NOT_NOTIFYALL,FP,net,1259,"__queue.notify();
","@Override
public void run() {
int ch;
try {
_outerLoop: while (!__isClosed) {
try {
if ((ch = __read(true)) < 0) {
break;
}
} catch (InterruptedIOException e) {
synchronized (__queue) {
__ioException = e;
__queue.notifyAll();
try {
__queue.wait(100);
} catch (InterruptedException interrupted) {
if (__isClosed) {
break _outerLoop;
}
}
continue;
}
} catch (RuntimeException re) {
super.close();
break _outerLoop;
}
boolean notify = false;
try {
notify = __processChar(ch);
} catch (InterruptedException e) {
if (__isClosed) {
break _outerLoop;
}
}
if (notify) {
__client.notifyInputListener();
}
}
} catch (IOException ioe) {
synchronized (__queue) {
__ioException = ioe;
}
__client.notifyInputListener();
}
synchronized (__queue) {
__isClosed = true;
__hasReachedEOF = true;
__queue.notify();
}
__threaded = false;
}","@Override
public void run() {
int intVar1;
try {
_outerLoop: while (!__isClosed) {
try {
if ((intVar1 = __read(true)) < 0) {
break;
}
} catch (InterruptedIOException e) {
synchronized (__queue) {
__ioException = e;
__queue.notifyAll();
try {
__queue.wait(100);
} catch (InterruptedException interrupted) {
if (__isClosed) {
break _outerLoop;
}
}
continue;
}
} catch (RuntimeException re) {
super.close();
break _outerLoop;
}
boolean booleanVar2 = booleanLiteral3;
try {
booleanVar2 = __processChar(intVar1);
} catch (InterruptedException e) {
if (__isClosed) {
break _outerLoop;
}
}
if (booleanVar2) {
__client.notifyInputListener();
}
}
} catch (IOException ioe) {
synchronized (__queue) {
__ioException = ioe;
}
__client.notifyInputListener();
}
synchronized (__queue) {
__isClosed = true;
__hasReachedEOF = true;
__queue.notify();
}
__threaded = false;
}"
15206,DODGY_CODE,DLS_DEAD_LOCAL_STORE,FP,net,1265,"dataLength = lastBlock = hostPort = bytesRead = totalThisPacket = 0;
","public void sendFile(String filename, int mode, InputStream input, InetAddress host, int port) throws IOException {
int bytesRead, timeouts, lastBlock, block, hostPort, dataLength, offset, totalThisPacket;
TFTPPacket sent, received = null;
TFTPErrorPacket error;
TFTPDataPacket data = new TFTPDataPacket(host, port, 0, _sendBuffer, 4, 0);
TFTPAckPacket ack;
boolean justStarted = true;
beginBufferedOps();
dataLength = lastBlock = hostPort = bytesRead = totalThisPacket = 0;
block = 0;
boolean lastAckWait = false;
if (mode == TFTP.ASCII_MODE) {
input = new ToNetASCIIInputStream(input);
}
sent = new TFTPWriteRequestPacket(host, port, filename, mode);
_sendPacket: do {
// first time: block is 0, lastBlock is 0, send a request packet.
// subsequent: block is integer starting at 1, send data packet.
bufferedSend(sent);
_receivePacket: while (true) {
timeouts = 0;
do {
try {
received = bufferedReceive();
break;
} catch (SocketException e) {
if (++timeouts >= __maxTimeouts) {
endBufferedOps();
throw new IOException(""Connection timed out."");
}
continue _sendPacket;
} catch (InterruptedIOException e) {
if (++timeouts >= __maxTimeouts) {
endBufferedOps();
throw new IOException(""Connection timed out."");
}
continue _sendPacket;
} catch (TFTPPacketException e) {
endBufferedOps();
throw new IOException(""Bad packet: "" + e.getMessage());
}
} while (timeouts < __maxTimeouts);
if (justStarted) {
justStarted = false;
hostPort = received.getPort();
data.setPort(hostPort);
if (!host.equals(received.getAddress())) {
host = received.getAddress();
data.setAddress(host);
sent.setAddress(host);
}
}
if (host.equals(received.getAddress()) && received.getPort() == hostPort) {
switch(received.getType()) {
case TFTPPacket.ERROR:
error = (TFTPErrorPacket) received;
endBufferedOps();
throw new IOException(""Error code "" + error.getError() + "" received: "" + error.getMessage());
case TFTPPacket.ACKNOWLEDGEMENT:
ack = (TFTPAckPacket) received;
lastBlock = ack.getBlockNumber();
if (lastBlock == block) {
++block;
if (block > 65535) {
block = 0;
}
if (lastAckWait) {
break _sendPacket;
} else {
break _receivePacket;
}
} else {
discardPackets();
continue _receivePacket;
}
default:
endBufferedOps();
throw new IOException(""Received unexpected packet type."");
}
} else {
error = new TFTPErrorPacket(received.getAddress(), received.getPort(), TFTPErrorPacket.UNKNOWN_TID, ""Unexpected host or port."");
bufferedSend(error);
continue _sendPacket;
}
}
dataLength = TFTPPacket.SEGMENT_SIZE;
offset = 4;
totalThisPacket = 0;
while (dataLength > 0 && (bytesRead = input.read(_sendBuffer, offset, dataLength)) > 0) {
offset += bytesRead;
dataLength -= bytesRead;
totalThisPacket += bytesRead;
}
if (totalThisPacket < TFTPPacket.SEGMENT_SIZE) {
lastAckWait = true;
}
data.setBlockNumber(block);
data.setData(_sendBuffer, 4, totalThisPacket);
sent = data;
} while (totalThisPacket > 0 || lastAckWait);
// Note: this was looping while dataLength == 0 || lastAckWait,
endBufferedOps();
}","public void sendFile(String filename, int mode, InputStream input, InetAddress host, int port) throws IOException {
int intVar1, intVar2, intVar3, intVar4, intVar5, intVar6, intVar7, intVar8;
TFTPPacket tftppacketVar9, tftppacketVar10 = tftppacketLiteral11;
TFTPErrorPacket tftperrorpacketVar12;
TFTPDataPacket tftpdatapacketVar13 = tftpdatapacketLiteral14;
TFTPAckPacket tftpackpacketVar15;
boolean booleanVar16 = booleanLiteral17;
beginBufferedOps();
intVar6 = intVar3 = intVar5 = intVar1 = intVar8 = 0;
intVar4 = 0;
boolean booleanVar18 = booleanLiteral19;
if (mode == TFTP.ASCII_MODE) {
input = new ToNetASCIIInputStream(input);
}
tftppacketVar9 = new TFTPWriteRequestPacket(host, port, filename, mode);
_sendPacket: do {
// first time: block is 0, lastBlock is 0, send a request packet.
// subsequent: block is integer starting at 1, send data packet.
bufferedSend(tftppacketVar9);
_receivePacket: while (true) {
intVar2 = 0;
do {
try {
tftppacketVar10 = bufferedReceive();
break;
} catch (SocketException e) {
if (++intVar2 >= __maxTimeouts) {
endBufferedOps();
throw new IOException(""Connection timed out."");
}
continue _sendPacket;
} catch (InterruptedIOException e) {
if (++intVar2 >= __maxTimeouts) {
endBufferedOps();
throw new IOException(""Connection timed out."");
}
continue _sendPacket;
} catch (TFTPPacketException e) {
endBufferedOps();
throw new IOException(""Bad packet: "" + e.getMessage());
}
} while (intVar2 < __maxTimeouts);
if (booleanVar16) {
booleanVar16 = false;
intVar5 = tftppacketVar10.getPort();
tftpdatapacketVar13.setPort(intVar5);
if (!host.equals(tftppacketVar10.getAddress())) {
host = tftppacketVar10.getAddress();
tftpdatapacketVar13.setAddress(host);
tftppacketVar9.setAddress(host);
}
}
if (host.equals(tftppacketVar10.getAddress()) && tftppacketVar10.getPort() == intVar5) {
switch(tftppacketVar10.getType()) {
case TFTPPacket.ERROR:
tftperrorpacketVar12 = (TFTPErrorPacket) tftppacketVar10;
endBufferedOps();
throw new IOException(""Error code "" + tftperrorpacketVar12.getError() + "" received: "" + tftperrorpacketVar12.getMessage());
case TFTPPacket.ACKNOWLEDGEMENT:
tftpackpacketVar15 = (TFTPAckPacket) tftppacketVar10;
intVar3 = tftpackpacketVar15.getBlockNumber();
if (intVar3 == intVar4) {
++intVar4;
if (intVar4 > 65535) {
intVar4 = 0;
}
if (booleanVar18) {
break _sendPacket;
} else {
break _receivePacket;
}
} else {
discardPackets();
continue _receivePacket;
}
default:
endBufferedOps();
throw new IOException(""Received unexpected packet type."");
}
} else {
tftperrorpacketVar12 = new TFTPErrorPacket(tftppacketVar10.getAddress(), tftppacketVar10.getPort(), TFTPErrorPacket.UNKNOWN_TID, ""Unexpected host or port."");
bufferedSend(tftperrorpacketVar12);
continue _sendPacket;
}
}
intVar6 = TFTPPacket.SEGMENT_SIZE;
intVar7 = 4;
intVar8 = 0;
while (intVar6 > 0 && (intVar1 = input.read(_sendBuffer, intVar7, intVar6)) > 0) {
intVar7 += intVar1;
intVar6 -= intVar1;
intVar8 += intVar1;
}
if (intVar8 < TFTPPacket.SEGMENT_SIZE) {
booleanVar18 = true;
}
tftpdatapacketVar13.setBlockNumber(intVar4);
tftpdatapacketVar13.setData(_sendBuffer, 4, intVar8);
tftppacketVar9 = tftpdatapacketVar13;
} while (intVar8 > 0 || booleanVar18);
// Note: this was looping while dataLength == 0 || lastAckWait,
endBufferedOps();
}"
15208,I18N,DM_DEFAULT_ENCODING,FP,net,1267,"System.arraycopy(_message.getBytes(), 0, data, 4, length);
","@Override
DatagramPacket _newDatagram(DatagramPacket datagram, byte[] data) {
int length;
length = _message.length();
data[0] = 0;
data[1] = (byte) _type;
data[2] = (byte) ((_error & 0xffff) >> 8);
data[3] = (byte) (_error & 0xff);
System.arraycopy(_message.getBytes(), 0, data, 4, length);
data[length + 4] = 0;
datagram.setAddress(_address);
datagram.setPort(_port);
datagram.setData(data);
datagram.setLength(length + 4);
return datagram;
}","@Override
DatagramPacket _newDatagram(DatagramPacket datagram, byte[] data) {
int intVar1;
intVar1 = _message.length();
data[0] = 0;
data[1] = (byte) _type;
data[2] = (byte) ((_error & 0xffff) >> 8);
data[3] = (byte) (_error & 0xff);
System.arraycopy(_message.getBytes(), 0, data, 4, intVar1);
data[intVar1 + 4] = 0;
datagram.setAddress(_address);
datagram.setPort(_port);
datagram.setData(data);
datagram.setLength(intVar1 + 4);
return datagram;
}"
15209,I18N,DM_DEFAULT_ENCODING,FP,net,1268,"System.arraycopy(_filename.getBytes(), 0, data, 2, fileLength);
","@Override
final DatagramPacket _newDatagram(DatagramPacket datagram, byte[] data) {
int fileLength, modeLength;
fileLength = _filename.length();
modeLength = _modeBytes[_mode].length;
data[0] = 0;
data[1] = (byte) _type;
System.arraycopy(_filename.getBytes(), 0, data, 2, fileLength);
data[fileLength + 2] = 0;
System.arraycopy(_modeBytes[_mode], 0, data, fileLength + 3, modeLength);
datagram.setAddress(_address);
datagram.setPort(_port);
datagram.setData(data);
datagram.setLength(fileLength + modeLength + 3);
return datagram;
}","@Override
final DatagramPacket _newDatagram(DatagramPacket datagram, byte[] data) {
int intVar1, intVar2;
intVar1 = _filename.length();
intVar2 = _modeBytes[_mode].length;
data[0] = 0;
data[1] = (byte) _type;
System.arraycopy(_filename.getBytes(), 0, data, 2, intVar1);
data[intVar1 + 2] = 0;
System.arraycopy(_modeBytes[_mode], 0, data, intVar1 + 3, intVar2);
datagram.setAddress(_address);
datagram.setPort(_port);
datagram.setData(data);
datagram.setLength(intVar1 + intVar2 + 3);
return datagram;
}"
15210,I18N,DM_DEFAULT_ENCODING,FP,net,1269,"System.arraycopy(_filename.getBytes(), 0, data, 2, fileLength);
","@Override
public final DatagramPacket newDatagram() {
int fileLength, modeLength;
byte[] data;
fileLength = _filename.length();
modeLength = _modeBytes[_mode].length;
data = new byte[fileLength + modeLength + 4];
data[0] = 0;
data[1] = (byte) _type;
System.arraycopy(_filename.getBytes(), 0, data, 2, fileLength);
data[fileLength + 2] = 0;
System.arraycopy(_modeBytes[_mode], 0, data, fileLength + 3, modeLength);
return new DatagramPacket(data, data.length, _address, _port);
}","@Override
public final DatagramPacket newDatagram() {
int intVar1, intVar2;
byte[] byteArrayVar3;
intVar1 = _filename.length();
intVar2 = _modeBytes[_mode].length;
byteArrayVar3 = new byte[intVar1 + intVar2 + 4];
byteArrayVar3[0] = 0;
byteArrayVar3[1] = (byte) _type;
System.arraycopy(_filename.getBytes(), 0, byteArrayVar3, 2, intVar1);
byteArrayVar3[intVar1 + 2] = 0;
System.arraycopy(_modeBytes[_mode], 0, byteArrayVar3, intVar1 + 3, intVar2);
return new DatagramPacket(byteArrayVar3, byteArrayVar3.length, _address, _port);
}"
15211,DODGY_CODE,SA_FIELD_DOUBLE_ASSIGNMENT,FP,net,1270,"modulus = (++modulus) % 3;
","void encode(byte[] in, int inPos, int inAvail) {
if (eof) {
return;
}
if (inAvail < 0) {
eof = true;
if (buffer == null || buffer.length - pos < encodeSize) {
resizeBuffer();
}
switch(modulus) {
case 1:
buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
if (encodeTable == STANDARD_ENCODE_TABLE) {
buffer[pos++] = PAD;
buffer[pos++] = PAD;
}
break;
case 2:
buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
if (encodeTable == STANDARD_ENCODE_TABLE) {
buffer[pos++] = PAD;
}
break;
default:
break;
}
if (lineLength > 0 && pos > 0) {
System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
pos += lineSeparator.length;
}
} else {
for (int i = 0; i < inAvail; i++) {
if (buffer == null || buffer.length - pos < encodeSize) {
resizeBuffer();
}
modulus = (++modulus) % 3;
int b = in[inPos++];
if (b < 0) {
b += 256;
}
x = (x << 8) + b;
if (0 == modulus) {
buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
buffer[pos++] = encodeTable[(x >> 12) & MASK_6BITS];
buffer[pos++] = encodeTable[(x >> 6) & MASK_6BITS];
buffer[pos++] = encodeTable[x & MASK_6BITS];
currentLinePos += 4;
if (lineLength > 0 && lineLength <= currentLinePos) {
System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
pos += lineSeparator.length;
currentLinePos = 0;
}
}
}
}
}","void encode(byte[] in, int inPos, int inAvail) {
if (eof) {
return;
}
if (inAvail < 0) {
eof = true;
if (buffer == null || buffer.length - pos < encodeSize) {
resizeBuffer();
}
switch(modulus) {
case 1:
buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
if (encodeTable == STANDARD_ENCODE_TABLE) {
buffer[pos++] = PAD;
buffer[pos++] = PAD;
}
break;
case 2:
buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
if (encodeTable == STANDARD_ENCODE_TABLE) {
buffer[pos++] = PAD;
}
break;
default:
break;
}
if (lineLength > 0 && pos > 0) {
System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
pos += lineSeparator.length;
}
} else {
for (int intVar5 = intLiteral6; intVar1 < intLiteral1; intVar1++) {
if (buffer == null || buffer.length - pos < encodeSize) {
resizeBuffer();
}
modulus = (++modulus) % 3;
int intVar3 = intLiteral4;
if (intVar3 < 0) {
intVar3 += 256;
}
x = (x << 8) + intVar3;
if (0 == modulus) {
buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
buffer[pos++] = encodeTable[(x >> 12) & MASK_6BITS];
buffer[pos++] = encodeTable[(x >> 6) & MASK_6BITS];
buffer[pos++] = encodeTable[x & MASK_6BITS];
currentLinePos += 4;
if (lineLength > 0 && lineLength <= currentLinePos) {
System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
pos += lineSeparator.length;
currentLinePos = 0;
}
}
}
}
}"
15216,BAD_PRACTICE,SE_BAD_FIELD,FP,net,1275,private final CopyOnWriteArrayList<EventListener> __listeners;,private final CopyOnWriteArrayList<EventListener> __listeners;,private final CopyOnWriteArrayList<EventListener> copyonwritearraylist<eventlistener>Var1;
15218,BAD_PRACTICE,THROWS_METHOD_THROWS_RUNTIMEEXCEPTION,FP,net,1277,"long countLong = getAddressCountLong();
if (countLong > Integer.MAX_VALUE) {
throw new RuntimeException(""Count is larger than an integer: "" + countLong);
}
return (int)countLong;
","@Deprecated
public int getAddressCount() {
long countLong = getAddressCountLong();
if (countLong > Integer.MAX_VALUE) {
throw new RuntimeException(""Count is larger than an integer: "" + countLong);
}
return (int) countLong;
}","@Deprecated
public int getAddressCount() {
long longVar1 = longLiteral2;
if (longVar1 > Integer.MAX_VALUE) {
throw new RuntimeException(""Count is larger than an integer: "" + longVar1);
}
return (int) longVar1;
}"
15229,I18N,DM_DEFAULT_ENCODING,FP,net,1288,"return new String(receivePacket.getData(), 0, receivePacket.getLength());
","public String getTime(InetAddress host, int port) throws IOException {
DatagramPacket sendPacket, receivePacket;
sendPacket = new DatagramPacket(__dummyData, __dummyData.length, host, port);
receivePacket = new DatagramPacket(__timeData, __timeData.length);
_socket_.send(sendPacket);
_socket_.receive(receivePacket);
return new String(receivePacket.getData(), 0, receivePacket.getLength());
}","public String getTime(InetAddress host, int port) throws IOException {
DatagramPacket datagrampacketVar1, datagrampacketVar2;
datagrampacketVar1 = new DatagramPacket(__dummyData, __dummyData.length, host, port);
datagrampacketVar2 = new DatagramPacket(__timeData, __timeData.length);
_socket_.send(datagrampacketVar1);
_socket_.receive(datagrampacketVar2);
return new String(datagrampacketVar2.getData(), 0, datagrampacketVar2.getLength());
}"
15230,I18N,DM_DEFAULT_ENCODING,FP,net,1289,"new BufferedReader(new InputStreamReader(getInputStream(longOutput,
","public String query(boolean longOutput, String username) throws IOException {
int read;
StringBuilder result = new StringBuilder(__buffer.length);
BufferedReader input;
input = new BufferedReader(new InputStreamReader(getInputStream(longOutput, username)));
try {
while (true) {
read = input.read(__buffer, 0, __buffer.length);
if (read <= 0) {
break;
}
result.append(__buffer, 0, read);
}
} finally {
input.close();
}
return result.toString();
}","public String query(boolean longOutput, String username) throws IOException {
int intVar1;
StringBuilder stringbuilderVar2 = stringbuilderLiteral3;
BufferedReader bufferedreaderVar4;
bufferedreaderVar4 = new BufferedReader(new InputStreamReader(getInputStream(longOutput, username)));
try {
while (true) {
intVar1 = bufferedreaderVar4.read(__buffer, 0, __buffer.length);
if (intVar1 <= 0) {
break;
}
stringbuilderVar2.append(__buffer, 0, intVar1);
}
} finally {
bufferedreaderVar4.close();
}
return stringbuilderVar2.toString();
}"
15257,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,net,1316,"return null;
","public NewsgroupInfo[] listNewNewsgroups(NewGroupsOrNewsQuery query) throws IOException {
if (!NNTPReply.isPositiveCompletion(newgroups(query.getDate(), query.getTime(), query.isGMT(), query.getDistributions()))) {
return null;
}
return __readNewsgroupListing();
}","public NewsgroupInfo[] listNewNewsgroups(NewGroupsOrNewsQuery query) throws IOException {
if (!NNTPReply.isPositiveCompletion(newgroups(query.getDate(), query.getTime(), query.isGMT(), query.getDistributions()))) {
return null;
}
return __readNewsgroupListing();
}"
15258,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,net,1317,"return null;
","public NewsgroupInfo[] listNewsgroups(String wildmat) throws IOException {
if (!NNTPReply.isPositiveCompletion(listActive(wildmat))) {
return null;
}
return __readNewsgroupListing();
}","public NewsgroupInfo[] listNewsgroups(String wildmat) throws IOException {
if (!NNTPReply.isPositiveCompletion(listActive(wildmat))) {
return null;
}
return __readNewsgroupListing();
}"
15261,BAD_PRACTICE,THROWS_METHOD_THROWS_RUNTIMEEXCEPTION,FP,net,1320,"if (messages == null) {
return null;
}
idTable = new HashMap<String,ThreadContainer>();
for (Threadable t : messages) {
if (!t.isDummy()) {
buildContainer(t);
}
}
root = findRootSet();
idTable.clear();
idTable = null;
pruneEmptyContainers(root);
root.reverseChildren();
gatherSubjects();
if (root.next != null) {
throw new RuntimeException(""root node has a next:"" + root);
}
for (ThreadContainer r = root.child; r != null; r = r.next) {
if (r.threadable == null) {
r.threadable = r.child.threadable.makeDummy();
}
}
Threadable result = (root.child == null ? null : root.child.threadable);
root.flush();
root = null;
return result;
","public Threadable thread(Iterable<? extends Threadable> messages) {
if (messages == null) {
return null;
}
idTable = new HashMap<String, ThreadContainer>();
for (Threadable t : messages) {
if (!t.isDummy()) {
buildContainer(t);
}
}
root = findRootSet();
idTable.clear();
idTable = null;
pruneEmptyContainers(root);
root.reverseChildren();
gatherSubjects();
if (root.next != null) {
throw new RuntimeException(""root node has a next:"" + root);
}
for (ThreadContainer r = root.child; r != null; r = r.next) {
if (r.threadable == null) {
r.threadable = r.child.threadable.makeDummy();
}
}
Threadable result = (root.child == null ? null : root.child.threadable);
root.flush();
root = null;
return result;
}","public Threadable thread(Iterable<? extends Threadable> messages) {
if (messages == null) {
return null;
}
idTable = new HashMap<String, ThreadContainer>();
for (Threadable threadableVar1 : messages) {
if (!threadableVar1.isDummy()) {
buildContainer(threadableVar1);
}
}
root = findRootSet();
idTable.clear();
idTable = null;
pruneEmptyContainers(root);
root.reverseChildren();
gatherSubjects();
if (root.next != null) {
throw new RuntimeException(""root node has a next:"" + root);
}
for (ThreadContainer threadcontainerVar6 = threadcontainerLiteral7; threadcontainerVar2 != intLiteral1; threadcontainerVar2 = threadcontainerVar2.next) {
if (threadcontainerVar2.threadable == null) {
threadcontainerVar2.threadable = threadcontainerVar2.child.threadable.makeDummy();
}
}
Threadable threadableVar4 = threadableLiteral5;
root.flush();
root = null;
return threadableVar4;
}"
15274,I18N,DM_DEFAULT_ENCODING,FP,net,1333,"Base64.encodeBase64((""\000"" + username + ""\000"" + password).getBytes())
","public boolean auth(AuthenticatingSMTPClient.AUTH_METHOD method, String username, String password) throws IOException, NoSuchAlgorithmException, InvalidKeyException, InvalidKeySpecException {
if (!SMTPReply.isPositiveIntermediate(sendCommand(SMTPCommand.AUTH, AUTH_METHOD.getAuthName(method)))) {
return false;
}
if (method.equals(AUTH_METHOD.PLAIN)) {
return SMTPReply.isPositiveCompletion(sendCommand(new String(Base64.encodeBase64((""\000"" + username + ""\000"" + password).getBytes()))));
} else if (method.equals(AUTH_METHOD.CRAM_MD5)) {
byte[] serverChallenge = Base64.decodeBase64(getReplyString().substring(4).trim());
Mac hmac_md5 = Mac.getInstance(""HmacMD5"");
hmac_md5.init(new SecretKeySpec(password.getBytes(), ""HmacMD5""));
// compute the result:
byte[] hmacResult = _convertToHexString(hmac_md5.doFinal(serverChallenge)).getBytes();
byte[] usernameBytes = username.getBytes();
byte[] toEncode = new byte[usernameBytes.length + 1 + hmacResult.length];
System.arraycopy(usernameBytes, 0, toEncode, 0, usernameBytes.length);
toEncode[usernameBytes.length] = ' ';
System.arraycopy(hmacResult, 0, toEncode, usernameBytes.length + 1, hmacResult.length);
// send the reply and read the server code:
return SMTPReply.isPositiveCompletion(sendCommand(new String(Base64.encodeBase64(toEncode))));
} else if (method.equals(AUTH_METHOD.LOGIN)) {
if (!SMTPReply.isPositiveIntermediate(sendCommand(new String(Base64.encodeBase64(username.getBytes()))))) {
return false;
}
return SMTPReply.isPositiveCompletion(sendCommand(new String(Base64.encodeBase64(password.getBytes()))));
} else {
return false;
}
}","public boolean auth(AuthenticatingSMTPClient.AUTH_METHOD method, String username, String password) throws IOException, NoSuchAlgorithmException, InvalidKeyException, InvalidKeySpecException {
if (!SMTPReply.isPositiveIntermediate(sendCommand(SMTPCommand.AUTH, AUTH_METHOD.getAuthName(method)))) {
return false;
}
if (method.equals(AUTH_METHOD.PLAIN)) {
return SMTPReply.isPositiveCompletion(sendCommand(new String(Base64.encodeBase64((""\000"" + username + ""\000"" + password).getBytes()))));
} else if (method.equals(AUTH_METHOD.CRAM_MD5)) {
byte[] byteArrayVar1 = byteArrayLiteral2;
Mac macVar3 = macLiteral4;
macVar3.init(new SecretKeySpec(password.getBytes(), ""HmacMD5""));
// compute the result:
byte[] byteArrayVar5 = byteArrayLiteral6;
byte[] byteArrayVar7 = byteArrayLiteral8;
byte[] byteArrayVar9 = byteArrayLiteral10;
System.arraycopy(byteArrayVar7, 0, byteArrayVar9, 0, byteArrayVar7.length);
byteArrayVar9[byteArrayVar7.length] = ' ';
System.arraycopy(byteArrayVar5, 0, byteArrayVar9, byteArrayVar7.length + 1, byteArrayVar5.length);
// send the reply and read the server code:
return SMTPReply.isPositiveCompletion(sendCommand(new String(Base64.encodeBase64(byteArrayVar9))));
} else if (method.equals(AUTH_METHOD.LOGIN)) {
if (!SMTPReply.isPositiveIntermediate(sendCommand(new String(Base64.encodeBase64(username.getBytes()))))) {
return false;
}
return SMTPReply.isPositiveCompletion(sendCommand(new String(Base64.encodeBase64(password.getBytes()))));
} else {
return false;
}
}"
15282,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,net,1341,"return null;
","@Override
public int[] startSubnegotiationLocal() {
return null;
}","@Override
public int[] startSubnegotiationLocal() {
return null;
}"
15284,Multithreaded correctness,UW_UNCOND_WAIT,FP,net,1343,"__queue.wait(100);
","@Override
public int read() throws IOException {
synchronized (__queue) {
while (true) {
if (__ioException != null) {
IOException e;
e = __ioException;
__ioException = null;
throw e;
}
if (__bytesAvailable == 0) {
if (__hasReachedEOF) {
return EOF;
}
if (__threaded) {
__queue.notify();
try {
__readIsWaiting = true;
__queue.wait();
__readIsWaiting = false;
} catch (InterruptedException e) {
throw new InterruptedIOException(""Fatal thread interruption during read."");
}
} else {
__readIsWaiting = true;
int ch;
boolean mayBlock = true;
do {
try {
if ((ch = __read(mayBlock)) < 0) {
if (ch != WOULD_BLOCK) {
return (ch);
}
}
} catch (InterruptedIOException e) {
synchronized (__queue) {
__ioException = e;
__queue.notifyAll();
try {
__queue.wait(100);
} catch (InterruptedException interrupted) {
}
}
return EOF;
}
try {
if (ch != WOULD_BLOCK) {
__processChar(ch);
}
} catch (InterruptedException e) {
if (__isClosed) {
return EOF;
}
}
mayBlock = false;
} while (super.available() > 0 && __bytesAvailable < __queue.length - 1);
__readIsWaiting = false;
}
continue;
} else {
int ch;
ch = __queue[__queueHead];
if (++__queueHead >= __queue.length) {
__queueHead = 0;
}
--__bytesAvailable;
if (__bytesAvailable == 0 && __threaded) {
__queue.notify();
}
return ch;
}
}
}
}","@Override
public int read() throws IOException {
synchronized (__queue) {
while (true) {
if (__ioException != null) {
IOException ioexceptionVar1;
ioexceptionVar1 = __ioException;
__ioException = null;
throw ioexceptionVar1;
}
if (__bytesAvailable == 0) {
if (__hasReachedEOF) {
return EOF;
}
if (__threaded) {
__queue.notify();
try {
__readIsWaiting = true;
__queue.wait();
__readIsWaiting = false;
} catch (InterruptedException e) {
throw new InterruptedIOException(""Fatal thread interruption during read."");
}
} else {
__readIsWaiting = true;
int intVar2;
boolean booleanVar3 = booleanLiteral4;
do {
try {
if ((intVar2 = __read(booleanVar3)) < 0) {
if (intVar2 != WOULD_BLOCK) {
return (intVar2);
}
}
} catch (InterruptedIOException e) {
synchronized (__queue) {
__ioException = ioexceptionVar1;
__queue.notifyAll();
try {
__queue.wait(100);
} catch (InterruptedException interrupted) {
}
}
return EOF;
}
try {
if (intVar2 != WOULD_BLOCK) {
__processChar(intVar2);
}
} catch (InterruptedException e) {
if (__isClosed) {
return EOF;
}
}
booleanVar3 = false;
} while (super.available() > 0 && __bytesAvailable < __queue.length - 1);
__readIsWaiting = false;
}
continue;
} else {
int intVar2;
intVar2 = __queue[__queueHead];
if (++__queueHead >= __queue.length) {
__queueHead = 0;
}
--__bytesAvailable;
if (__bytesAvailable == 0 && __threaded) {
__queue.notify();
}
return intVar2;
}
}
}
}"
15292,I18N,DM_DEFAULT_ENCODING,FP,net,1351,"System.arraycopy(_message.getBytes(), 0, data, 4, length);
","@Override
DatagramPacket _newDatagram(DatagramPacket datagram, byte[] data) {
int length;
length = _message.length();
data[0] = 0;
data[1] = (byte) _type;
data[2] = (byte) ((_error & 0xffff) >> 8);
data[3] = (byte) (_error & 0xff);
System.arraycopy(_message.getBytes(), 0, data, 4, length);
data[length + 4] = 0;
datagram.setAddress(_address);
datagram.setPort(_port);
datagram.setData(data);
datagram.setLength(length + 4);
return datagram;
}","@Override
DatagramPacket _newDatagram(DatagramPacket datagram, byte[] data) {
int intVar1;
intVar1 = _message.length();
data[0] = 0;
data[1] = (byte) _type;
data[2] = (byte) ((_error & 0xffff) >> 8);
data[3] = (byte) (_error & 0xff);
System.arraycopy(_message.getBytes(), 0, data, 4, intVar1);
data[intVar1 + 4] = 0;
datagram.setAddress(_address);
datagram.setPort(_port);
datagram.setData(data);
datagram.setLength(intVar1 + 4);
return datagram;
}"
15294,I18N,DM_DEFAULT_ENCODING,FP,net,1353,"System.arraycopy(_filename.getBytes(), 0, data, 2, fileLength);
","@Override
final DatagramPacket _newDatagram(DatagramPacket datagram, byte[] data) {
int fileLength, modeLength;
fileLength = _filename.length();
modeLength = _modeBytes[_mode].length;
data[0] = 0;
data[1] = (byte) _type;
System.arraycopy(_filename.getBytes(), 0, data, 2, fileLength);
data[fileLength + 2] = 0;
System.arraycopy(_modeBytes[_mode], 0, data, fileLength + 3, modeLength);
datagram.setAddress(_address);
datagram.setPort(_port);
datagram.setData(data);
datagram.setLength(fileLength + modeLength + 3);
return datagram;
}","@Override
final DatagramPacket _newDatagram(DatagramPacket datagram, byte[] data) {
int intVar1, intVar2;
intVar1 = _filename.length();
intVar2 = _modeBytes[_mode].length;
data[0] = 0;
data[1] = (byte) _type;
System.arraycopy(_filename.getBytes(), 0, data, 2, intVar1);
data[intVar1 + 2] = 0;
System.arraycopy(_modeBytes[_mode], 0, data, intVar1 + 3, intVar2);
datagram.setAddress(_address);
datagram.setPort(_port);
datagram.setData(data);
datagram.setLength(intVar1 + intVar2 + 3);
return datagram;
}"
15297,DODGY_CODE,SA_FIELD_DOUBLE_ASSIGNMENT,FP,net,1356,"modulus = (++modulus) % 4;
","void decode(byte[] in, int inPos, int inAvail) {
if (eof) {
return;
}
if (inAvail < 0) {
eof = true;
}
for (int i = 0; i < inAvail; i++) {
if (buffer == null || buffer.length - pos < decodeSize) {
resizeBuffer();
}
byte b = in[inPos++];
if (b == PAD) {
eof = true;
break;
} else {
if (b >= 0 && b < DECODE_TABLE.length) {
int result = DECODE_TABLE[b];
if (result >= 0) {
modulus = (++modulus) % 4;
x = (x << 6) + result;
if (modulus == 0) {
buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
buffer[pos++] = (byte) (x & MASK_8BITS);
}
}
}
}
}
// Two forms of EOF as far as base64 decoder is concerned: actual
if (eof && modulus != 0) {
x = x << 6;
switch(modulus) {
case 2:
x = x << 6;
buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
break;
case 3:
buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
break;
}
}
}","void decode(byte[] in, int inPos, int inAvail) {
if (eof) {
return;
}
if (inAvail < 0) {
eof = true;
}
for (int intVar7 = intLiteral8; intVar1 < intLiteral1; intVar1++) {
if (buffer == null || buffer.length - pos < decodeSize) {
resizeBuffer();
}
byte byteVar3 = byteLiteral4;
if (byteVar3 == PAD) {
eof = true;
break;
} else {
if (byteVar3 >= 0 && byteVar3 < DECODE_TABLE.length) {
int intVar5 = intLiteral6;
if (intVar5 >= 0) {
modulus = (++modulus) % 4;
x = (x << 6) + intVar5;
if (modulus == 0) {
buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
buffer[pos++] = (byte) (x & MASK_8BITS);
}
}
}
}
}
// Two forms of EOF as far as base64 decoder is concerned: actual
if (eof && modulus != 0) {
x = x << 6;
switch(modulus) {
case 2:
x = x << 6;
buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
break;
case 3:
buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
break;
}
}
}"
15299,BAD_PRACTICE,THROWS_METHOD_THROWS_RUNTIMEEXCEPTION,FP,net,1358,"String str = null;
try {
str = new String(encode, ""UTF8"");
} catch (UnsupportedEncodingException ue) {
throw new RuntimeException(ue);
}
return str;
","private static String newStringUtf8(byte[] encode) {
String str = null;
try {
str = new String(encode, ""UTF8"");
} catch (UnsupportedEncodingException ue) {
throw new RuntimeException(ue);
}
return str;
}","private static String newStringUtf8(byte[] encode) {
String stringVar1 = stringLiteral2;
try {
stringVar1 = new String(encode, ""UTF8"");
} catch (UnsupportedEncodingException ue) {
throw new RuntimeException(ue);
}
return stringVar1;
}"
15525,I18N,DM_DEFAULT_ENCODING,FP,net,1584,"this(new PrintWriter(stream));
","public PrintCommandListener(PrintStream stream) {
this(new PrintWriter(stream));
}","public PrintCommandListener(PrintStream stream) {
this(new PrintWriter(stream));
}"
15595,MALICIOUS_CODE,MC_OVERRIDABLE_METHOD_CALL_IN_CONSTRUCTOR,FP,net,1654,"createCommandSupport();
","public IMAP() {
setDefaultPort(DEFAULT_PORT);
__state = IMAPState.DISCONNECTED_STATE;
_reader = null;
__writer = null;
_replyLines = new ArrayList<String>();
createCommandSupport();
}","public IMAP() {
setDefaultPort(DEFAULT_PORT);
__state = IMAPState.DISCONNECTED_STATE;
_reader = null;
__writer = null;
_replyLines = new ArrayList<String>();
createCommandSupport();
}"
15603,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,net,1662,"return null;
","public NewsgroupInfo[] listNewNewsgroups(NewGroupsOrNewsQuery query) throws IOException {
if (!NNTPReply.isPositiveCompletion(newgroups(query.getDate(), query.getTime(), query.isGMT(), query.getDistributions()))) {
return null;
}
return __readNewsgroupListing();
}","public NewsgroupInfo[] listNewNewsgroups(NewGroupsOrNewsQuery query) throws IOException {
if (!NNTPReply.isPositiveCompletion(newgroups(query.getDate(), query.getTime(), query.isGMT(), query.getDistributions()))) {
return null;
}
return __readNewsgroupListing();
}"
15637,BAD_PRACTICE,THROWS_METHOD_THROWS_RUNTIMEEXCEPTION,FP,net,1696,"String str = null;
try {
str = new String(encode, ""UTF8"");
} catch (UnsupportedEncodingException ue) {
throw new RuntimeException(ue);
}
return str;
","private static String newStringUtf8(byte[] encode) {
String str = null;
try {
str = new String(encode, ""UTF8"");
} catch (UnsupportedEncodingException ue) {
throw new RuntimeException(ue);
}
return str;
}","private static String newStringUtf8(byte[] encode) {
String stringVar1 = stringLiteral2;
try {
stringVar1 = new String(encode, ""UTF8"");
} catch (UnsupportedEncodingException ue) {
throw new RuntimeException(ue);
}
return stringVar1;
}"
15639,BAD_PRACTICE,THROWS_METHOD_THROWS_RUNTIMEEXCEPTION,FP,net,1698,"return pArray.getBytes(""UTF8"");
} catch (UnsupportedEncodingException e) {
throw new RuntimeException(e);
","private byte[] getBytesUtf8(String pArray) {
try {
return pArray.getBytes(""UTF8"");
} catch (UnsupportedEncodingException e) {
throw new RuntimeException(e);
}
}","private byte[] getBytesUtf8(String pArray) {
try {
return pArray.getBytes(""UTF8"");
} catch (UnsupportedEncodingException e) {
throw new RuntimeException(e);
}
}"
15642,BAD_PRACTICE,SE_BAD_FIELD,FP,net,1701,private final CopyOnWriteArrayList<EventListener> __listeners;,private final CopyOnWriteArrayList<EventListener> __listeners;,private final CopyOnWriteArrayList<EventListener> copyonwritearraylist<eventlistener>Var1;
15644,BAD_PRACTICE,THROWS_METHOD_THROWS_RUNTIMEEXCEPTION,FP,net,1703,"long countLong = getAddressCountLong();
if (countLong > Integer.MAX_VALUE) {
throw new RuntimeException(""Count is larger than an integer: "" + countLong);
}
return (int)countLong;
","@Deprecated
public int getAddressCount() {
long countLong = getAddressCountLong();
if (countLong > Integer.MAX_VALUE) {
throw new RuntimeException(""Count is larger than an integer: "" + countLong);
}
return (int) countLong;
}","@Deprecated
public int getAddressCount() {
long longVar1 = longLiteral2;
if (longVar1 > Integer.MAX_VALUE) {
throw new RuntimeException(""Count is larger than an integer: "" + longVar1);
}
return (int) longVar1;
}"
15656,I18N,DM_DEFAULT_ENCODING,FP,net,1715,"this(new PrintWriter(stream));
","public PrintCommandListener(PrintStream stream) {
this(new PrintWriter(stream));
}","public PrintCommandListener(PrintStream stream) {
this(new PrintWriter(stream));
}"
15657,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,net,1716,"return null;
","public String[] doCommandAsStrings(String command, String params) throws IOException {
boolean success = FTPReply.isPositiveCompletion(sendCommand(command, params));
if (success) {
return getReplyStrings();
} else {
return null;
}
}","public String[] doCommandAsStrings(String command, String params) throws IOException {
boolean booleanVar1 = booleanLiteral2;
if (booleanVar1) {
return getReplyStrings();
} else {
return null;
}
}"
15660,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,net,1719,"return null;
","public String[] featureValues(String feature) throws IOException {
if (!initFeatureMap()) {
return null;
}
Set<String> entries = __featuresMap.get(feature.toUpperCase(Locale.ENGLISH));
if (entries != null) {
return entries.toArray(new String[entries.size()]);
}
return null;
}","public String[] featureValues(String feature) throws IOException {
if (!initFeatureMap()) {
return null;
}
Set<String> set<string>Var1 = set<string>Literal2;
if (set<string>Var1 != null) {
return set<string>Var1.toArray(new String[set<string>Var1.size()]);
}
return null;
}"
15661,MALICIOUS_CODE,MS_SHOULD_BE_FINAL,FP,net,1720,"@Deprecated
public static String STORE_TYPE;","@Deprecated
public static String STORE_TYPE;","@Deprecated
public static String stringVar1;"
15665,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,net,1724,"return null;
","public String[] getEnabledCipherSuites() {
if (_socket_ instanceof SSLSocket) {
return ((SSLSocket) _socket_).getEnabledCipherSuites();
}
return null;
}","public String[] getEnabledCipherSuites() {
if (_socket_ instanceof SSLSocket) {
return ((SSLSocket) _socket_).getEnabledCipherSuites();
}
return null;
}"
15673,MALICIOUS_CODE,MC_OVERRIDABLE_METHOD_CALL_IN_CONSTRUCTOR,FP,net,1732,"createCommandSupport();
","public IMAP() {
setDefaultPort(DEFAULT_PORT);
__state = IMAPState.DISCONNECTED_STATE;
_reader = null;
__writer = null;
_replyLines = new ArrayList<String>();
createCommandSupport();
}","public IMAP() {
setDefaultPort(DEFAULT_PORT);
__state = IMAPState.DISCONNECTED_STATE;
_reader = null;
__writer = null;
_replyLines = new ArrayList<String>();
createCommandSupport();
}"
15682,DODGY_CODE,DLS_DEAD_LOCAL_STORE,FP,net,1741,"pointer.articleId = tokens[i++];
","private void __parseArticlePointer(String reply, ArticleInfo pointer) throws MalformedServerReplyException {
String[] tokens = reply.split("" "");
if (tokens.length >= 3) {
int i = 1;
try {
pointer.articleNumber = Long.parseLong(tokens[i++]);
pointer.articleId = tokens[i++];
return;
} catch (NumberFormatException e) {
}
}
throw new MalformedServerReplyException(""Could not parse article pointer.\nServer reply: "" + reply);
}","private void __parseArticlePointer(String reply, ArticleInfo pointer) throws MalformedServerReplyException {
String[] stringArrayVar1 = stringArrayLiteral2;
if (stringArrayVar1.length >= 3) {
int intVar3 = intLiteral4;
try {
pointer.articleNumber = Long.parseLong(stringArrayVar1[intVar3++]);
pointer.articleId = stringArrayVar1[intVar3++];
return;
} catch (NumberFormatException e) {
}
}
throw new MalformedServerReplyException(""Could not parse article pointer.\nServer reply: "" + reply);
}"
15686,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,net,1745,"return null;
","public NewsgroupInfo[] listNewsgroups(String wildmat) throws IOException {
if (!NNTPReply.isPositiveCompletion(listActive(wildmat))) {
return null;
}
return __readNewsgroupListing();
}","public NewsgroupInfo[] listNewsgroups(String wildmat) throws IOException {
if (!NNTPReply.isPositiveCompletion(listActive(wildmat))) {
return null;
}
return __readNewsgroupListing();
}"
15688,BAD_PRACTICE,THROWS_METHOD_THROWS_RUNTIMEEXCEPTION,FP,net,1747,"ThreadContainer root = new ThreadContainer();
Iterator<String> iter = idTable.keySet().iterator();
while (iter.hasNext()) {
Object key = iter.next();
ThreadContainer c = idTable.get(key);
if (c.parent == null) {
if (c.next != null) {
throw new RuntimeException(
""c.next is "" + c.next.toString());
}
c.next = root.child;
root.child = c;
}
}
return root;
","private ThreadContainer findRootSet(HashMap<String, ThreadContainer> idTable) {
ThreadContainer root = new ThreadContainer();
Iterator<String> iter = idTable.keySet().iterator();
while (iter.hasNext()) {
Object key = iter.next();
ThreadContainer c = idTable.get(key);
if (c.parent == null) {
if (c.next != null) {
throw new RuntimeException(""c.next is "" + c.next.toString());
}
c.next = root.child;
root.child = c;
}
}
return root;
}","private ThreadContainer findRootSet(HashMap<String, ThreadContainer> idTable) {
ThreadContainer threadcontainerVar1 = threadcontainerLiteral2;
Iterator<String> iterator<string>Var3 = iterator<string>Literal4;
while (iterator<string>Var3.hasNext()) {
Object objectVar5 = objectLiteral6;
ThreadContainer threadcontainerVar7 = threadcontainerLiteral8;
if (threadcontainerVar7.parent == null) {
if (threadcontainerVar7.next != null) {
throw new RuntimeException(""c.next is "" + threadcontainerVar7.next.toString());
}
threadcontainerVar7.next = threadcontainerVar1.child;
threadcontainerVar1.child = threadcontainerVar7;
}
}
return threadcontainerVar1;
}"
15691,BAD_PRACTICE,THROWS_METHOD_THROWS_RUNTIMEEXCEPTION,FP,net,1750,"String id = threadable.messageThreadId();
ThreadContainer container = idTable.get(id);
int bogusIdCount = 0;
if (container != null) {
if (container.threadable != null) { 
id = ""<Bogus-id:"" + (bogusIdCount++) + "">"";
container = null;
} else {
container.threadable = threadable;
}
}
if (container == null) {
container = new ThreadContainer();
container.threadable = threadable;
idTable.put(id, container);
}
ThreadContainer parentRef = null;
{
String[] references = threadable.messageThreadReferences();
for (String refString : references)
{
ThreadContainer ref = idTable.get(refString);
if (ref == null) {
ref = new ThreadContainer();
idTable.put(refString, ref);
}
// Link references together in the order they appear in the References: header,
if ((parentRef != null)
&& (ref.parent == null)
&& (parentRef != ref)
&& !(ref.findChild(parentRef))) {
ref.parent = parentRef;
ref.next = parentRef.child;
parentRef.child = ref;
}
parentRef = ref;
}
}
if (parentRef != null
&& (parentRef == container || container.findChild(parentRef)))
{
parentRef = null;
}
// if it has a parent already, its because we saw this message in a References: field, and presumed
if (container.parent != null) {
ThreadContainer rest, prev;
for (prev = null, rest = container.parent.child;
rest != null;
prev = rest, rest = rest.next) {
if (rest == container) {
break;
}
}
if (rest == null) {
throw new RuntimeException(
""Didnt find ""
+ container
+ "" in parent""
+ container.parent);
}
if (prev == null) {
container.parent.child = container.next;
} else {
prev.next = container.next;
}
container.next = null;
container.parent = null;
}
if (parentRef != null) {
container.parent = parentRef;
container.next = parentRef.child;
parentRef.child = container;
}
}
","private void buildContainer(Threadable threadable, HashMap<String, ThreadContainer> idTable) {
String id = threadable.messageThreadId();
ThreadContainer container = idTable.get(id);
int bogusIdCount = 0;
if (container != null) {
if (container.threadable != null) {
id = ""<Bogus-id:"" + (bogusIdCount++) + "">"";
container = null;
} else {
container.threadable = threadable;
}
}
if (container == null) {
container = new ThreadContainer();
container.threadable = threadable;
idTable.put(id, container);
}
ThreadContainer parentRef = null;
{
String[] references = threadable.messageThreadReferences();
for (String refString : references) {
ThreadContainer ref = idTable.get(refString);
if (ref == null) {
ref = new ThreadContainer();
idTable.put(refString, ref);
}
// Link references together in the order they appear in the References: header,
if ((parentRef != null) && (ref.parent == null) && (parentRef != ref) && !(ref.findChild(parentRef))) {
ref.parent = parentRef;
ref.next = parentRef.child;
parentRef.child = ref;
}
parentRef = ref;
}
}
if (parentRef != null && (parentRef == container || container.findChild(parentRef))) {
parentRef = null;
}
// if it has a parent already, its because we saw this message in a References: field, and presumed
if (container.parent != null) {
ThreadContainer rest, prev;
for (prev = null, rest = container.parent.child; rest != null; prev = rest, rest = rest.next) {
if (rest == container) {
break;
}
}
if (rest == null) {
throw new RuntimeException(""Didnt find "" + container + "" in parent"" + container.parent);
}
if (prev == null) {
container.parent.child = container.next;
} else {
prev.next = container.next;
}
container.next = null;
container.parent = null;
}
if (parentRef != null) {
container.parent = parentRef;
container.next = parentRef.child;
parentRef.child = container;
}
}","private void buildContainer(Threadable threadable, HashMap<String, ThreadContainer> idTable) {
String stringVar1 = stringLiteral2;
ThreadContainer threadcontainerVar3 = threadcontainerLiteral4;
int intVar5 = intLiteral6;
if (threadcontainerVar3 != null) {
if (threadcontainerVar3.threadable != null) {
stringVar1 = ""<Bogus-id:"" + (intVar5++) + "">"";
threadcontainerVar3 = null;
} else {
threadcontainerVar3.threadable = threadable;
}
}
if (threadcontainerVar3 == null) {
threadcontainerVar3 = new ThreadContainer();
threadcontainerVar3.threadable = threadable;
idTable.put(stringVar1, threadcontainerVar3);
}
ThreadContainer threadcontainerVar7 = threadcontainerLiteral8;
{
String[] stringArrayVar9 = stringArrayLiteral10;
for (String stringVar11 : stringArrayVar9) {
ThreadContainer threadcontainerVar12 = threadcontainerLiteral13;
if (threadcontainerVar12 == null) {
threadcontainerVar12 = new ThreadContainer();
idTable.put(stringVar11, threadcontainerVar12);
}
// Link references together in the order they appear in the References: header,
if ((threadcontainerVar7 != null) && (threadcontainerVar12.parent == null) && (threadcontainerVar7 != threadcontainerVar12) && !(threadcontainerVar12.findChild(threadcontainerVar7))) {
threadcontainerVar12.parent = threadcontainerVar7;
threadcontainerVar12.next = threadcontainerVar7.child;
threadcontainerVar7.child = threadcontainerVar12;
}
threadcontainerVar7 = threadcontainerVar12;
}
}
if (threadcontainerVar7 != null && (threadcontainerVar7 == threadcontainerVar3 || threadcontainerVar3.findChild(threadcontainerVar7))) {
threadcontainerVar7 = null;
}
// if it has a parent already, its because we saw this message in a References: field, and presumed
if (threadcontainerVar3.parent != null) {
ThreadContainer threadcontainerVar14, threadcontainerVar15;
for (threadcontainerVar15 = null, threadcontainerVar14 = threadcontainerVar3.parent.child; threadcontainerVar14 != null; threadcontainerVar15 = threadcontainerVar14, threadcontainerVar14 = threadcontainerVar14.next) {
if (threadcontainerVar14 == threadcontainerVar3) {
break;
}
}
if (threadcontainerVar14 == null) {
throw new RuntimeException(""Didnt find "" + threadcontainerVar3 + "" in parent"" + threadcontainerVar3.parent);
}
if (threadcontainerVar15 == null) {
threadcontainerVar3.parent.child = threadcontainerVar3.next;
} else {
threadcontainerVar15.next = threadcontainerVar3.next;
}
threadcontainerVar3.next = null;
threadcontainerVar3.parent = null;
}
if (threadcontainerVar7 != null) {
threadcontainerVar3.parent = threadcontainerVar7;
threadcontainerVar3.next = threadcontainerVar7.child;
threadcontainerVar7.child = threadcontainerVar3;
}
}"
15697,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,net,1756,"return null;
","public POP3MessageInfo[] listUniqueIdentifiers() throws IOException {
if (getState() != TRANSACTION_STATE) {
return null;
}
if (sendCommand(POP3Command.UIDL) != POP3Reply.OK) {
return null;
}
getAdditionalReply();
POP3MessageInfo[] messages = new POP3MessageInfo[_replyLines.size() - 2];
ListIterator<String> en = _replyLines.listIterator(1);
for (int line = 0; line < messages.length; line++) {
messages[line] = __parseUID(en.next());
}
return messages;
}","public POP3MessageInfo[] listUniqueIdentifiers() throws IOException {
if (getState() != TRANSACTION_STATE) {
return null;
}
if (sendCommand(POP3Command.UIDL) != POP3Reply.OK) {
return null;
}
getAdditionalReply();
POP3MessageInfo[] pop3messageinfoArrayVar1 = pop3messageinfoArrayLiteral2;
ListIterator<String> listiterator<string>Var3 = listiterator<string>Literal4;
for (int intVar7 = intLiteral8; intVar5 < intLiteral1; intVar5++) {
pop3messageinfoArrayVar1[intVar5] = __parseUID(listiterator<string>Var3.next());
}
return pop3messageinfoArrayVar1;
}"
15705,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,net,1764,"return null;
","public String[] getEnabledCipherSuites() {
if (_socket_ instanceof SSLSocket) {
return ((SSLSocket) _socket_).getEnabledCipherSuites();
}
return null;
}","public String[] getEnabledCipherSuites() {
if (_socket_ instanceof SSLSocket) {
return ((SSLSocket) _socket_).getEnabledCipherSuites();
}
return null;
}"
15709,DODGY_CODE,DB_DUPLICATE_SWITCH_CLAUSES,FP,net,1768,"__receiveState = _STATE_DATA;
break; 
","private int __read(boolean mayBlock) throws IOException {
int ch;
while (true) {
if (!mayBlock && super.available() == 0) {
return WOULD_BLOCK;
}
if ((ch = super.read()) < 0) {
return EOF;
}
ch = (ch & 0xff);
synchronized (__client) {
__client._processAYTResponse();
}
__client._spyRead(ch);
switch(__receiveState) {
case _STATE_CR:
if (ch == '\0') {
continue;
}
case _STATE_DATA:
if (ch == TelnetCommand.IAC) {
__receiveState = _STATE_IAC;
continue;
}
if (ch == '\r') {
synchronized (__client) {
if (__client._requestedDont(TelnetOption.BINARY)) {
__receiveState = _STATE_CR;
} else {
__receiveState = _STATE_DATA;
}
}
} else {
__receiveState = _STATE_DATA;
}
break;
case _STATE_IAC:
switch(ch) {
case TelnetCommand.WILL:
__receiveState = _STATE_WILL;
continue;
case TelnetCommand.WONT:
__receiveState = _STATE_WONT;
continue;
case TelnetCommand.DO:
__receiveState = _STATE_DO;
continue;
case TelnetCommand.DONT:
__receiveState = _STATE_DONT;
continue;
case TelnetCommand.SB:
__suboption_count = 0;
__receiveState = _STATE_SB;
continue;
case TelnetCommand.IAC:
__receiveState = _STATE_DATA;
break;
case // unexpected byte! ignore it (don't send it as a command)
TelnetCommand.SE:
__receiveState = _STATE_DATA;
continue;
default:
__receiveState = _STATE_DATA;
__client._processCommand(ch);
continue;
}
break;
case _STATE_WILL:
synchronized (__client) {
__client._processWill(ch);
__client._flushOutputStream();
}
__receiveState = _STATE_DATA;
continue;
case _STATE_WONT:
synchronized (__client) {
__client._processWont(ch);
__client._flushOutputStream();
}
__receiveState = _STATE_DATA;
continue;
case _STATE_DO:
synchronized (__client) {
__client._processDo(ch);
__client._flushOutputStream();
}
__receiveState = _STATE_DATA;
continue;
case _STATE_DONT:
synchronized (__client) {
__client._processDont(ch);
__client._flushOutputStream();
}
__receiveState = _STATE_DATA;
continue;
case _STATE_SB:
switch(ch) {
case TelnetCommand.IAC:
__receiveState = _STATE_IAC_SB;
continue;
default:
if (__suboption_count < __suboption.length) {
__suboption[__suboption_count++] = ch;
}
break;
}
__receiveState = _STATE_SB;
continue;
case // IAC received during SB phase
_STATE_IAC_SB:
switch(ch) {
case TelnetCommand.SE:
synchronized (__client) {
__client._processSuboption(__suboption, __suboption_count);
__client._flushOutputStream();
}
__receiveState = _STATE_DATA;
continue;
case // De-dup the duplicated IAC
TelnetCommand.IAC:
if (__suboption_count < __suboption.length) {
__suboption[__suboption_count++] = ch;
}
break;
default:
// unexpected byte! ignore it
break;
}
__receiveState = _STATE_SB;
continue;
}
break;
}
return ch;
}","private int __read(boolean mayBlock) throws IOException {
int intVar1;
while (true) {
if (!mayBlock && super.available() == 0) {
return WOULD_BLOCK;
}
if ((intVar1 = super.read()) < 0) {
return EOF;
}
intVar1 = (intVar1 & 0xff);
synchronized (__client) {
__client._processAYTResponse();
}
__client._spyRead(intVar1);
switch(__receiveState) {
case _STATE_CR:
if (intVar1 == '\0') {
continue;
}
case _STATE_DATA:
if (intVar1 == TelnetCommand.IAC) {
__receiveState = _STATE_IAC;
continue;
}
if (intVar1 == '\r') {
synchronized (__client) {
if (__client._requestedDont(TelnetOption.BINARY)) {
__receiveState = _STATE_CR;
} else {
__receiveState = _STATE_DATA;
}
}
} else {
__receiveState = _STATE_DATA;
}
break;
case _STATE_IAC:
switch(intVar1) {
case TelnetCommand.WILL:
__receiveState = _STATE_WILL;
continue;
case TelnetCommand.WONT:
__receiveState = _STATE_WONT;
continue;
case TelnetCommand.DO:
__receiveState = _STATE_DO;
continue;
case TelnetCommand.DONT:
__receiveState = _STATE_DONT;
continue;
case TelnetCommand.SB:
__suboption_count = 0;
__receiveState = _STATE_SB;
continue;
case TelnetCommand.IAC:
__receiveState = _STATE_DATA;
break;
case // unexpected byte! ignore it (don't send it as a command)
TelnetCommand.SE:
__receiveState = _STATE_DATA;
continue;
default:
__receiveState = _STATE_DATA;
__client._processCommand(intVar1);
continue;
}
break;
case _STATE_WILL:
synchronized (__client) {
__client._processWill(intVar1);
__client._flushOutputStream();
}
__receiveState = _STATE_DATA;
continue;
case _STATE_WONT:
synchronized (__client) {
__client._processWont(intVar1);
__client._flushOutputStream();
}
__receiveState = _STATE_DATA;
continue;
case _STATE_DO:
synchronized (__client) {
__client._processDo(intVar1);
__client._flushOutputStream();
}
__receiveState = _STATE_DATA;
continue;
case _STATE_DONT:
synchronized (__client) {
__client._processDont(intVar1);
__client._flushOutputStream();
}
__receiveState = _STATE_DATA;
continue;
case _STATE_SB:
switch(intVar1) {
case TelnetCommand.IAC:
__receiveState = _STATE_IAC_SB;
continue;
default:
if (__suboption_count < __suboption.length) {
__suboption[__suboption_count++] = intVar1;
}
break;
}
__receiveState = _STATE_SB;
continue;
case // IAC received during SB phase
_STATE_IAC_SB:
switch(intVar1) {
case TelnetCommand.SE:
synchronized (__client) {
__client._processSuboption(__suboption, __suboption_count);
__client._flushOutputStream();
}
__receiveState = _STATE_DATA;
continue;
case // De-dup the duplicated IAC
TelnetCommand.IAC:
if (__suboption_count < __suboption.length) {
__suboption[__suboption_count++] = intVar1;
}
break;
default:
// unexpected byte! ignore it
break;
}
__receiveState = _STATE_SB;
continue;
}
break;
}
return intVar1;
}"
15713,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,net,1772,"return null;
","public int[] startSubnegotiationRemote() {
return null;
}","public int[] startSubnegotiationRemote() {
return null;
}"
15717,DODGY_CODE,DLS_DEAD_LOCAL_STORE,FP,net,1776,"dataLength = lastBlock = hostPort = bytesRead = totalThisPacket = 0;
","public void sendFile(String filename, int mode, InputStream input, InetAddress host, int port) throws IOException {
int bytesRead, timeouts, lastBlock, block, hostPort, dataLength, offset, totalThisPacket;
TFTPPacket sent, received = null;
TFTPErrorPacket error;
TFTPDataPacket data = new TFTPDataPacket(host, port, 0, _sendBuffer, 4, 0);
TFTPAckPacket ack;
boolean justStarted = true;
beginBufferedOps();
dataLength = lastBlock = hostPort = bytesRead = totalThisPacket = 0;
block = 0;
boolean lastAckWait = false;
if (mode == TFTP.ASCII_MODE) {
input = new ToNetASCIIInputStream(input);
}
sent = new TFTPWriteRequestPacket(host, port, filename, mode);
_sendPacket: do {
// first time: block is 0, lastBlock is 0, send a request packet.
// subsequent: block is integer starting at 1, send data packet.
bufferedSend(sent);
_receivePacket: while (true) {
timeouts = 0;
do {
try {
received = bufferedReceive();
break;
} catch (SocketException e) {
if (++timeouts >= __maxTimeouts) {
endBufferedOps();
throw new IOException(""Connection timed out."");
}
continue _sendPacket;
} catch (InterruptedIOException e) {
if (++timeouts >= __maxTimeouts) {
endBufferedOps();
throw new IOException(""Connection timed out."");
}
continue _sendPacket;
} catch (TFTPPacketException e) {
endBufferedOps();
throw new IOException(""Bad packet: "" + e.getMessage());
}
} while (timeouts < __maxTimeouts);
if (justStarted) {
justStarted = false;
hostPort = received.getPort();
data.setPort(hostPort);
if (!host.equals(received.getAddress())) {
host = received.getAddress();
data.setAddress(host);
sent.setAddress(host);
}
}
if (host.equals(received.getAddress()) && received.getPort() == hostPort) {
switch(received.getType()) {
case TFTPPacket.ERROR:
error = (TFTPErrorPacket) received;
endBufferedOps();
throw new IOException(""Error code "" + error.getError() + "" received: "" + error.getMessage());
case TFTPPacket.ACKNOWLEDGEMENT:
ack = (TFTPAckPacket) received;
lastBlock = ack.getBlockNumber();
if (lastBlock == block) {
++block;
if (block > 65535) {
block = 0;
}
if (lastAckWait) {
break _sendPacket;
} else {
break _receivePacket;
}
} else {
discardPackets();
continue _receivePacket;
}
default:
endBufferedOps();
throw new IOException(""Received unexpected packet type."");
}
} else {
error = new TFTPErrorPacket(received.getAddress(), received.getPort(), TFTPErrorPacket.UNKNOWN_TID, ""Unexpected host or port."");
bufferedSend(error);
continue _sendPacket;
}
}
dataLength = TFTPPacket.SEGMENT_SIZE;
offset = 4;
totalThisPacket = 0;
while (dataLength > 0 && (bytesRead = input.read(_sendBuffer, offset, dataLength)) > 0) {
offset += bytesRead;
dataLength -= bytesRead;
totalThisPacket += bytesRead;
}
if (totalThisPacket < TFTPPacket.SEGMENT_SIZE) {
lastAckWait = true;
}
data.setBlockNumber(block);
data.setData(_sendBuffer, 4, totalThisPacket);
sent = data;
} while (totalThisPacket > 0 || lastAckWait);
// Note: this was looping while dataLength == 0 || lastAckWait,
endBufferedOps();
}","public void sendFile(String filename, int mode, InputStream input, InetAddress host, int port) throws IOException {
int intVar1, intVar2, intVar3, intVar4, intVar5, intVar6, intVar7, intVar8;
TFTPPacket tftppacketVar9, tftppacketVar10 = tftppacketLiteral11;
TFTPErrorPacket tftperrorpacketVar12;
TFTPDataPacket tftpdatapacketVar13 = tftpdatapacketLiteral14;
TFTPAckPacket tftpackpacketVar15;
boolean booleanVar16 = booleanLiteral17;
beginBufferedOps();
intVar6 = intVar3 = intVar5 = intVar1 = intVar8 = 0;
intVar4 = 0;
boolean booleanVar18 = booleanLiteral19;
if (mode == TFTP.ASCII_MODE) {
input = new ToNetASCIIInputStream(input);
}
tftppacketVar9 = new TFTPWriteRequestPacket(host, port, filename, mode);
_sendPacket: do {
// first time: block is 0, lastBlock is 0, send a request packet.
// subsequent: block is integer starting at 1, send data packet.
bufferedSend(tftppacketVar9);
_receivePacket: while (true) {
intVar2 = 0;
do {
try {
tftppacketVar10 = bufferedReceive();
break;
} catch (SocketException e) {
if (++intVar2 >= __maxTimeouts) {
endBufferedOps();
throw new IOException(""Connection timed out."");
}
continue _sendPacket;
} catch (InterruptedIOException e) {
if (++intVar2 >= __maxTimeouts) {
endBufferedOps();
throw new IOException(""Connection timed out."");
}
continue _sendPacket;
} catch (TFTPPacketException e) {
endBufferedOps();
throw new IOException(""Bad packet: "" + e.getMessage());
}
} while (intVar2 < __maxTimeouts);
if (booleanVar16) {
booleanVar16 = false;
intVar5 = tftppacketVar10.getPort();
tftpdatapacketVar13.setPort(intVar5);
if (!host.equals(tftppacketVar10.getAddress())) {
host = tftppacketVar10.getAddress();
tftpdatapacketVar13.setAddress(host);
tftppacketVar9.setAddress(host);
}
}
if (host.equals(tftppacketVar10.getAddress()) && tftppacketVar10.getPort() == intVar5) {
switch(tftppacketVar10.getType()) {
case TFTPPacket.ERROR:
tftperrorpacketVar12 = (TFTPErrorPacket) tftppacketVar10;
endBufferedOps();
throw new IOException(""Error code "" + tftperrorpacketVar12.getError() + "" received: "" + tftperrorpacketVar12.getMessage());
case TFTPPacket.ACKNOWLEDGEMENT:
tftpackpacketVar15 = (TFTPAckPacket) tftppacketVar10;
intVar3 = tftpackpacketVar15.getBlockNumber();
if (intVar3 == intVar4) {
++intVar4;
if (intVar4 > 65535) {
intVar4 = 0;
}
if (booleanVar18) {
break _sendPacket;
} else {
break _receivePacket;
}
} else {
discardPackets();
continue _receivePacket;
}
default:
endBufferedOps();
throw new IOException(""Received unexpected packet type."");
}
} else {
tftperrorpacketVar12 = new TFTPErrorPacket(tftppacketVar10.getAddress(), tftppacketVar10.getPort(), TFTPErrorPacket.UNKNOWN_TID, ""Unexpected host or port."");
bufferedSend(tftperrorpacketVar12);
continue _sendPacket;
}
}
intVar6 = TFTPPacket.SEGMENT_SIZE;
intVar7 = 4;
intVar8 = 0;
while (intVar6 > 0 && (intVar1 = input.read(_sendBuffer, intVar7, intVar6)) > 0) {
intVar7 += intVar1;
intVar6 -= intVar1;
intVar8 += intVar1;
}
if (intVar8 < TFTPPacket.SEGMENT_SIZE) {
booleanVar18 = true;
}
tftpdatapacketVar13.setBlockNumber(intVar4);
tftpdatapacketVar13.setData(_sendBuffer, 4, intVar8);
tftppacketVar9 = tftpdatapacketVar13;
} while (intVar8 > 0 || booleanVar18);
// Note: this was looping while dataLength == 0 || lastAckWait,
endBufferedOps();
}"
15721,I18N,DM_DEFAULT_ENCODING,FP,net,1780,"System.arraycopy(_filename.getBytes(), 0, data, 2, fileLength);
","@Override
final DatagramPacket _newDatagram(DatagramPacket datagram, byte[] data) {
int fileLength, modeLength;
fileLength = _filename.length();
modeLength = _modeBytes[_mode].length;
data[0] = 0;
data[1] = (byte) _type;
System.arraycopy(_filename.getBytes(), 0, data, 2, fileLength);
data[fileLength + 2] = 0;
System.arraycopy(_modeBytes[_mode], 0, data, fileLength + 3, modeLength);
datagram.setAddress(_address);
datagram.setPort(_port);
datagram.setData(data);
datagram.setLength(fileLength + modeLength + 3);
return datagram;
}","@Override
final DatagramPacket _newDatagram(DatagramPacket datagram, byte[] data) {
int intVar1, intVar2;
intVar1 = _filename.length();
intVar2 = _modeBytes[_mode].length;
data[0] = 0;
data[1] = (byte) _type;
System.arraycopy(_filename.getBytes(), 0, data, 2, intVar1);
data[intVar1 + 2] = 0;
System.arraycopy(_modeBytes[_mode], 0, data, intVar1 + 3, intVar2);
datagram.setAddress(_address);
datagram.setPort(_port);
datagram.setData(data);
datagram.setLength(intVar1 + intVar2 + 3);
return datagram;
}"
15873,I18N,DM_DEFAULT_ENCODING,FP,net,1932,"this(new PrintWriter(stream), suppressLogin, eolMarker);
","public PrintCommandListener(PrintStream stream, boolean suppressLogin, char eolMarker) {
this(new PrintWriter(stream), suppressLogin, eolMarker);
}","public PrintCommandListener(PrintStream stream, boolean suppressLogin, char eolMarker) {
this(new PrintWriter(stream), suppressLogin, eolMarker);
}"
15878,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,net,1937,"return null;
","public String[] doCommandAsStrings(String command, String params) throws IOException {
boolean success = FTPReply.isPositiveCompletion(sendCommand(command, params));
if (success) {
return getReplyStrings();
} else {
return null;
}
}","public String[] doCommandAsStrings(String command, String params) throws IOException {
boolean booleanVar1 = booleanLiteral2;
if (booleanVar1) {
return getReplyStrings();
} else {
return null;
}
}"
15883,MALICIOUS_CODE,MS_SHOULD_BE_FINAL,FP,net,1942,"@Deprecated
public static String TRUSTSTORE_ALGORITHM;","@Deprecated
public static String TRUSTSTORE_ALGORITHM;","@Deprecated
public static String stringVar1;"
15889,DODGY_CODE,NP_LOAD_OF_KNOWN_NULL_VALUE,FP,net,1948,"file.setGroup(grp);
","@Override
public FTPFile parseFTPEntry(String entry) {
FTPFile file = new FTPFile();
file.setRawListing(entry);
int type;
boolean isDevice = false;
if (matches(entry)) {
String typeStr = group(1);
String hardLinkCount = ""0"";
String usr = null;
String grp = null;
String filesize = group(20);
String datestr = group(21) + "" "" + group(22);
String name = group(23);
String endtoken = group(24);
try {
file.setTimestamp(super.parseTimestamp(datestr));
} catch (ParseException e) {
}
switch(typeStr.charAt(0)) {
case 'd':
type = FTPFile.DIRECTORY_TYPE;
break;
case 'e':
type = FTPFile.SYMBOLIC_LINK_TYPE;
break;
case 'l':
type = FTPFile.SYMBOLIC_LINK_TYPE;
break;
case 'b':
case 'c':
isDevice = true;
type = FTPFile.FILE_TYPE;
break;
case 'f':
case '-':
type = FTPFile.FILE_TYPE;
break;
default:
// e.g. ? and w = whiteout
type = FTPFile.UNKNOWN_TYPE;
}
file.setType(type);
int g = 4;
for (int access = 0; access < 3; access++, g += 4) {
file.setPermission(access, FTPFile.READ_PERMISSION, (!group(g).equals(""-"")));
file.setPermission(access, FTPFile.WRITE_PERMISSION, (!group(g + 1).equals(""-"")));
String execPerm = group(g + 2);
if (!execPerm.equals(""-"") && !Character.isUpperCase(execPerm.charAt(0))) {
file.setPermission(access, FTPFile.EXECUTE_PERMISSION, true);
} else {
file.setPermission(access, FTPFile.EXECUTE_PERMISSION, false);
}
}
if (!isDevice) {
try {
file.setHardLinkCount(Integer.parseInt(hardLinkCount));
} catch (NumberFormatException e) {
}
}
file.setUser(usr);
file.setGroup(grp);
try {
file.setSize(Long.parseLong(filesize));
} catch (NumberFormatException e) {
}
if (null == endtoken) {
file.setName(name);
} else {
name += endtoken;
if (type == FTPFile.SYMBOLIC_LINK_TYPE) {
int end = name.indexOf("" -> "");
if (end == -1) {
file.setName(name);
} else {
file.setName(name.substring(0, end));
file.setLink(name.substring(end + 4));
}
} else {
file.setName(name);
}
}
return file;
}
return null;
}","@Override
public FTPFile parseFTPEntry(String entry) {
FTPFile ftpfileVar1 = ftpfileLiteral2;
ftpfileVar1.setRawListing(entry);
int intVar3;
boolean booleanVar4 = booleanLiteral5;
if (matches(entry)) {
String stringVar6 = stringLiteral7;
String stringVar8 = stringLiteral9;
String stringVar10 = stringLiteral11;
String stringVar12 = stringLiteral11;
String stringVar13 = stringLiteral14;
String stringVar15 = stringLiteral16;
String stringVar17 = stringLiteral18;
String stringVar19 = stringLiteral20;
try {
ftpfileVar1.setTimestamp(super.parseTimestamp(stringVar15));
} catch (ParseException e) {
}
switch(stringVar6.charAt(0)) {
case 'd':
intVar3 = FTPFile.DIRECTORY_TYPE;
break;
case 'e':
intVar3 = FTPFile.SYMBOLIC_LINK_TYPE;
break;
case 'l':
intVar3 = FTPFile.SYMBOLIC_LINK_TYPE;
break;
case 'b':
case 'c':
booleanVar4 = true;
intVar3 = FTPFile.FILE_TYPE;
break;
case 'f':
case '-':
intVar3 = FTPFile.FILE_TYPE;
break;
default:
// e.g. ? and w = whiteout
intVar3 = FTPFile.UNKNOWN_TYPE;
}
ftpfileVar1.setType(intVar3);
int intVar21 = intLiteral22;
for (int intVar29 = intLiteral30; intVar23 < intLiteral1; intVar23++, intVar21 += 4) {
ftpfileVar1.setPermission(intVar23, FTPFile.READ_PERMISSION, (!group(intVar21).equals(""-"")));
ftpfileVar1.setPermission(intVar23, FTPFile.WRITE_PERMISSION, (!group(intVar21 + 1).equals(""-"")));
String stringVar25 = stringLiteral26;
if (!stringVar25.equals(""-"") && !Character.isUpperCase(stringVar25.charAt(0))) {
ftpfileVar1.setPermission(intVar23, FTPFile.EXECUTE_PERMISSION, true);
} else {
ftpfileVar1.setPermission(intVar23, FTPFile.EXECUTE_PERMISSION, false);
}
}
if (!booleanVar4) {
try {
ftpfileVar1.setHardLinkCount(Integer.parseInt(stringVar8));
} catch (NumberFormatException e) {
}
}
ftpfileVar1.setUser(stringVar10);
ftpfileVar1.setGroup(stringVar12);
try {
ftpfileVar1.setSize(Long.parseLong(stringVar13));
} catch (NumberFormatException e) {
}
if (null == stringVar19) {
ftpfileVar1.setName(stringVar17);
} else {
stringVar17 += stringVar19;
if (intVar3 == FTPFile.SYMBOLIC_LINK_TYPE) {
int intVar27 = intLiteral28;
if (intVar27 == -1) {
ftpfileVar1.setName(stringVar17);
} else {
ftpfileVar1.setName(stringVar17.substring(0, intVar27));
ftpfileVar1.setLink(stringVar17.substring(intVar27 + 4));
}
} else {
ftpfileVar1.setName(stringVar17);
}
}
return ftpfileVar1;
}
return null;
}"
15890,DODGY_CODE,NP_LOAD_OF_KNOWN_NULL_VALUE,FP,net,1949,"file.setUser(usr);
","@Override
public FTPFile parseFTPEntry(String entry) {
FTPFile file = new FTPFile();
file.setRawListing(entry);
int type;
boolean isDevice = false;
if (matches(entry)) {
String typeStr = group(1);
String hardLinkCount = ""0"";
String usr = null;
String grp = null;
String filesize = group(20);
String datestr = group(21) + "" "" + group(22);
String name = group(23);
String endtoken = group(24);
try {
file.setTimestamp(super.parseTimestamp(datestr));
} catch (ParseException e) {
}
switch(typeStr.charAt(0)) {
case 'd':
type = FTPFile.DIRECTORY_TYPE;
break;
case 'e':
type = FTPFile.SYMBOLIC_LINK_TYPE;
break;
case 'l':
type = FTPFile.SYMBOLIC_LINK_TYPE;
break;
case 'b':
case 'c':
isDevice = true;
type = FTPFile.FILE_TYPE;
break;
case 'f':
case '-':
type = FTPFile.FILE_TYPE;
break;
default:
// e.g. ? and w = whiteout
type = FTPFile.UNKNOWN_TYPE;
}
file.setType(type);
int g = 4;
for (int access = 0; access < 3; access++, g += 4) {
file.setPermission(access, FTPFile.READ_PERMISSION, (!group(g).equals(""-"")));
file.setPermission(access, FTPFile.WRITE_PERMISSION, (!group(g + 1).equals(""-"")));
String execPerm = group(g + 2);
if (!execPerm.equals(""-"") && !Character.isUpperCase(execPerm.charAt(0))) {
file.setPermission(access, FTPFile.EXECUTE_PERMISSION, true);
} else {
file.setPermission(access, FTPFile.EXECUTE_PERMISSION, false);
}
}
if (!isDevice) {
try {
file.setHardLinkCount(Integer.parseInt(hardLinkCount));
} catch (NumberFormatException e) {
}
}
file.setUser(usr);
file.setGroup(grp);
try {
file.setSize(Long.parseLong(filesize));
} catch (NumberFormatException e) {
}
if (null == endtoken) {
file.setName(name);
} else {
name += endtoken;
if (type == FTPFile.SYMBOLIC_LINK_TYPE) {
int end = name.indexOf("" -> "");
if (end == -1) {
file.setName(name);
} else {
file.setName(name.substring(0, end));
file.setLink(name.substring(end + 4));
}
} else {
file.setName(name);
}
}
return file;
}
return null;
}","@Override
public FTPFile parseFTPEntry(String entry) {
FTPFile ftpfileVar1 = ftpfileLiteral2;
ftpfileVar1.setRawListing(entry);
int intVar3;
boolean booleanVar4 = booleanLiteral5;
if (matches(entry)) {
String stringVar6 = stringLiteral7;
String stringVar8 = stringLiteral9;
String stringVar10 = stringLiteral11;
String stringVar12 = stringLiteral11;
String stringVar13 = stringLiteral14;
String stringVar15 = stringLiteral16;
String stringVar17 = stringLiteral18;
String stringVar19 = stringLiteral20;
try {
ftpfileVar1.setTimestamp(super.parseTimestamp(stringVar15));
} catch (ParseException e) {
}
switch(stringVar6.charAt(0)) {
case 'd':
intVar3 = FTPFile.DIRECTORY_TYPE;
break;
case 'e':
intVar3 = FTPFile.SYMBOLIC_LINK_TYPE;
break;
case 'l':
intVar3 = FTPFile.SYMBOLIC_LINK_TYPE;
break;
case 'b':
case 'c':
booleanVar4 = true;
intVar3 = FTPFile.FILE_TYPE;
break;
case 'f':
case '-':
intVar3 = FTPFile.FILE_TYPE;
break;
default:
// e.g. ? and w = whiteout
intVar3 = FTPFile.UNKNOWN_TYPE;
}
ftpfileVar1.setType(intVar3);
int intVar21 = intLiteral22;
for (int intVar29 = intLiteral30; intVar23 < intLiteral1; intVar23++, intVar21 += 4) {
ftpfileVar1.setPermission(intVar23, FTPFile.READ_PERMISSION, (!group(intVar21).equals(""-"")));
ftpfileVar1.setPermission(intVar23, FTPFile.WRITE_PERMISSION, (!group(intVar21 + 1).equals(""-"")));
String stringVar25 = stringLiteral26;
if (!stringVar25.equals(""-"") && !Character.isUpperCase(stringVar25.charAt(0))) {
ftpfileVar1.setPermission(intVar23, FTPFile.EXECUTE_PERMISSION, true);
} else {
ftpfileVar1.setPermission(intVar23, FTPFile.EXECUTE_PERMISSION, false);
}
}
if (!booleanVar4) {
try {
ftpfileVar1.setHardLinkCount(Integer.parseInt(stringVar8));
} catch (NumberFormatException e) {
}
}
ftpfileVar1.setUser(stringVar10);
ftpfileVar1.setGroup(stringVar12);
try {
ftpfileVar1.setSize(Long.parseLong(stringVar13));
} catch (NumberFormatException e) {
}
if (null == stringVar19) {
ftpfileVar1.setName(stringVar17);
} else {
stringVar17 += stringVar19;
if (intVar3 == FTPFile.SYMBOLIC_LINK_TYPE) {
int intVar27 = intLiteral28;
if (intVar27 == -1) {
ftpfileVar1.setName(stringVar17);
} else {
ftpfileVar1.setName(stringVar17.substring(0, intVar27));
ftpfileVar1.setLink(stringVar17.substring(intVar27 + 4));
}
} else {
ftpfileVar1.setName(stringVar17);
}
}
return ftpfileVar1;
}
return null;
}"
15895,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,net,1954,"return null;
","public String[] getEnabledProtocols() {
if (_socket_ instanceof SSLSocket) {
return ((SSLSocket) _socket_).getEnabledProtocols();
}
return null;
}","public String[] getEnabledProtocols() {
if (_socket_ instanceof SSLSocket) {
return ((SSLSocket) _socket_).getEnabledProtocols();
}
return null;
}"
15912,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,net,1971,"return null;
","public POP3MessageInfo[] listUniqueIdentifiers() throws IOException {
if (getState() != TRANSACTION_STATE) {
return null;
}
if (sendCommand(POP3Command.UIDL) != POP3Reply.OK) {
return null;
}
getAdditionalReply();
POP3MessageInfo[] messages = new POP3MessageInfo[_replyLines.size() - 2];
ListIterator<String> en = _replyLines.listIterator(1);
for (int line = 0; line < messages.length; line++) {
messages[line] = __parseUID(en.next());
}
return messages;
}","public POP3MessageInfo[] listUniqueIdentifiers() throws IOException {
if (getState() != TRANSACTION_STATE) {
return null;
}
if (sendCommand(POP3Command.UIDL) != POP3Reply.OK) {
return null;
}
getAdditionalReply();
POP3MessageInfo[] pop3messageinfoArrayVar1 = pop3messageinfoArrayLiteral2;
ListIterator<String> listiterator<string>Var3 = listiterator<string>Literal4;
for (int intVar7 = intLiteral8; intVar5 < intLiteral1; intVar5++) {
pop3messageinfoArrayVar1[intVar5] = __parseUID(listiterator<string>Var3.next());
}
return pop3messageinfoArrayVar1;
}"
15913,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,net,1972,"return null;
","public String[] getEnabledProtocols() {
if (_socket_ instanceof SSLSocket) {
return ((SSLSocket) _socket_).getEnabledProtocols();
}
return null;
}","public String[] getEnabledProtocols() {
if (_socket_ instanceof SSLSocket) {
return ((SSLSocket) _socket_).getEnabledProtocols();
}
return null;
}"
15916,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,net,1975,"return null;
","public String[] getEnabledProtocols() {
if (_socket_ instanceof SSLSocket) {
return ((SSLSocket) _socket_).getEnabledProtocols();
}
return null;
}","public String[] getEnabledProtocols() {
if (_socket_ instanceof SSLSocket) {
return ((SSLSocket) _socket_).getEnabledProtocols();
}
return null;
}"
15927,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,net,1986,"return null;
","public int[] answerSubnegotiation(int[] suboptionData, int suboptionLength) {
return null;
}","public int[] answerSubnegotiation(int[] suboptionData, int suboptionLength) {
return null;
}"
15930,DODGY_CODE,DLS_DEAD_LOCAL_STORE,FP,net,1989,"dataLength = lastBlock = hostPort = bytesRead = totalThisPacket = 0;
","public void sendFile(String filename, int mode, InputStream input, InetAddress host, int port) throws IOException {
int bytesRead, timeouts, lastBlock, block, hostPort, dataLength, offset, totalThisPacket;
TFTPPacket sent, received = null;
TFTPErrorPacket error;
TFTPDataPacket data = new TFTPDataPacket(host, port, 0, _sendBuffer, 4, 0);
TFTPAckPacket ack;
boolean justStarted = true;
beginBufferedOps();
dataLength = lastBlock = hostPort = bytesRead = totalThisPacket = 0;
block = 0;
boolean lastAckWait = false;
if (mode == TFTP.ASCII_MODE) {
input = new ToNetASCIIInputStream(input);
}
sent = new TFTPWriteRequestPacket(host, port, filename, mode);
_sendPacket: do {
// first time: block is 0, lastBlock is 0, send a request packet.
// subsequent: block is integer starting at 1, send data packet.
bufferedSend(sent);
_receivePacket: while (true) {
timeouts = 0;
do {
try {
received = bufferedReceive();
break;
} catch (SocketException e) {
if (++timeouts >= __maxTimeouts) {
endBufferedOps();
throw new IOException(""Connection timed out."");
}
continue _sendPacket;
} catch (InterruptedIOException e) {
if (++timeouts >= __maxTimeouts) {
endBufferedOps();
throw new IOException(""Connection timed out."");
}
continue _sendPacket;
} catch (TFTPPacketException e) {
endBufferedOps();
throw new IOException(""Bad packet: "" + e.getMessage());
}
} while (timeouts < __maxTimeouts);
if (justStarted) {
justStarted = false;
hostPort = received.getPort();
data.setPort(hostPort);
if (!host.equals(received.getAddress())) {
host = received.getAddress();
data.setAddress(host);
sent.setAddress(host);
}
}
if (host.equals(received.getAddress()) && received.getPort() == hostPort) {
switch(received.getType()) {
case TFTPPacket.ERROR:
error = (TFTPErrorPacket) received;
endBufferedOps();
throw new IOException(""Error code "" + error.getError() + "" received: "" + error.getMessage());
case TFTPPacket.ACKNOWLEDGEMENT:
ack = (TFTPAckPacket) received;
lastBlock = ack.getBlockNumber();
if (lastBlock == block) {
++block;
if (block > 65535) {
block = 0;
}
if (lastAckWait) {
break _sendPacket;
} else {
break _receivePacket;
}
} else {
discardPackets();
continue _receivePacket;
}
default:
endBufferedOps();
throw new IOException(""Received unexpected packet type."");
}
} else {
error = new TFTPErrorPacket(received.getAddress(), received.getPort(), TFTPErrorPacket.UNKNOWN_TID, ""Unexpected host or port."");
bufferedSend(error);
continue _sendPacket;
}
}
dataLength = TFTPPacket.SEGMENT_SIZE;
offset = 4;
totalThisPacket = 0;
while (dataLength > 0 && (bytesRead = input.read(_sendBuffer, offset, dataLength)) > 0) {
offset += bytesRead;
dataLength -= bytesRead;
totalThisPacket += bytesRead;
}
if (totalThisPacket < TFTPPacket.SEGMENT_SIZE) {
lastAckWait = true;
}
data.setBlockNumber(block);
data.setData(_sendBuffer, 4, totalThisPacket);
sent = data;
} while (totalThisPacket > 0 || lastAckWait);
// Note: this was looping while dataLength == 0 || lastAckWait,
endBufferedOps();
}","public void sendFile(String filename, int mode, InputStream input, InetAddress host, int port) throws IOException {
int intVar1, intVar2, intVar3, intVar4, intVar5, intVar6, intVar7, intVar8;
TFTPPacket tftppacketVar9, tftppacketVar10 = tftppacketLiteral11;
TFTPErrorPacket tftperrorpacketVar12;
TFTPDataPacket tftpdatapacketVar13 = tftpdatapacketLiteral14;
TFTPAckPacket tftpackpacketVar15;
boolean booleanVar16 = booleanLiteral17;
beginBufferedOps();
intVar6 = intVar3 = intVar5 = intVar1 = intVar8 = 0;
intVar4 = 0;
boolean booleanVar18 = booleanLiteral19;
if (mode == TFTP.ASCII_MODE) {
input = new ToNetASCIIInputStream(input);
}
tftppacketVar9 = new TFTPWriteRequestPacket(host, port, filename, mode);
_sendPacket: do {
// first time: block is 0, lastBlock is 0, send a request packet.
// subsequent: block is integer starting at 1, send data packet.
bufferedSend(tftppacketVar9);
_receivePacket: while (true) {
intVar2 = 0;
do {
try {
tftppacketVar10 = bufferedReceive();
break;
} catch (SocketException e) {
if (++intVar2 >= __maxTimeouts) {
endBufferedOps();
throw new IOException(""Connection timed out."");
}
continue _sendPacket;
} catch (InterruptedIOException e) {
if (++intVar2 >= __maxTimeouts) {
endBufferedOps();
throw new IOException(""Connection timed out."");
}
continue _sendPacket;
} catch (TFTPPacketException e) {
endBufferedOps();
throw new IOException(""Bad packet: "" + e.getMessage());
}
} while (intVar2 < __maxTimeouts);
if (booleanVar16) {
booleanVar16 = false;
intVar5 = tftppacketVar10.getPort();
tftpdatapacketVar13.setPort(intVar5);
if (!host.equals(tftppacketVar10.getAddress())) {
host = tftppacketVar10.getAddress();
tftpdatapacketVar13.setAddress(host);
tftppacketVar9.setAddress(host);
}
}
if (host.equals(tftppacketVar10.getAddress()) && tftppacketVar10.getPort() == intVar5) {
switch(tftppacketVar10.getType()) {
case TFTPPacket.ERROR:
tftperrorpacketVar12 = (TFTPErrorPacket) tftppacketVar10;
endBufferedOps();
throw new IOException(""Error code "" + tftperrorpacketVar12.getError() + "" received: "" + tftperrorpacketVar12.getMessage());
case TFTPPacket.ACKNOWLEDGEMENT:
tftpackpacketVar15 = (TFTPAckPacket) tftppacketVar10;
intVar3 = tftpackpacketVar15.getBlockNumber();
if (intVar3 == intVar4) {
++intVar4;
if (intVar4 > 65535) {
intVar4 = 0;
}
if (booleanVar18) {
break _sendPacket;
} else {
break _receivePacket;
}
} else {
discardPackets();
continue _receivePacket;
}
default:
endBufferedOps();
throw new IOException(""Received unexpected packet type."");
}
} else {
tftperrorpacketVar12 = new TFTPErrorPacket(tftppacketVar10.getAddress(), tftppacketVar10.getPort(), TFTPErrorPacket.UNKNOWN_TID, ""Unexpected host or port."");
bufferedSend(tftperrorpacketVar12);
continue _sendPacket;
}
}
intVar6 = TFTPPacket.SEGMENT_SIZE;
intVar7 = 4;
intVar8 = 0;
while (intVar6 > 0 && (intVar1 = input.read(_sendBuffer, intVar7, intVar6)) > 0) {
intVar7 += intVar1;
intVar6 -= intVar1;
intVar8 += intVar1;
}
if (intVar8 < TFTPPacket.SEGMENT_SIZE) {
booleanVar18 = true;
}
tftpdatapacketVar13.setBlockNumber(intVar4);
tftpdatapacketVar13.setData(_sendBuffer, 4, intVar8);
tftppacketVar9 = tftpdatapacketVar13;
} while (intVar8 > 0 || booleanVar18);
// Note: this was looping while dataLength == 0 || lastAckWait,
endBufferedOps();
}"
15935,DODGY_CODE,SA_FIELD_DOUBLE_ASSIGNMENT,FP,net,1994,"modulus = (++modulus) % 4;
","void decode(byte[] in, int inPos, int inAvail) {
if (eof) {
return;
}
if (inAvail < 0) {
eof = true;
}
for (int i = 0; i < inAvail; i++) {
if (buffer == null || buffer.length - pos < decodeSize) {
resizeBuffer();
}
byte b = in[inPos++];
if (b == PAD) {
eof = true;
break;
} else {
if (b >= 0 && b < DECODE_TABLE.length) {
int result = DECODE_TABLE[b];
if (result >= 0) {
modulus = (++modulus) % 4;
x = (x << 6) + result;
if (modulus == 0) {
buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
buffer[pos++] = (byte) (x & MASK_8BITS);
}
}
}
}
}
// Two forms of EOF as far as base64 decoder is concerned: actual
if (eof && modulus != 0) {
x = x << 6;
switch(modulus) {
case 2:
x = x << 6;
buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
break;
case 3:
buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
break;
default:
break;
}
}
}","void decode(byte[] in, int inPos, int inAvail) {
if (eof) {
return;
}
if (inAvail < 0) {
eof = true;
}
for (int intVar7 = intLiteral8; intVar1 < intLiteral1; intVar1++) {
if (buffer == null || buffer.length - pos < decodeSize) {
resizeBuffer();
}
byte byteVar3 = byteLiteral4;
if (byteVar3 == PAD) {
eof = true;
break;
} else {
if (byteVar3 >= 0 && byteVar3 < DECODE_TABLE.length) {
int intVar5 = intLiteral6;
if (intVar5 >= 0) {
modulus = (++modulus) % 4;
x = (x << 6) + intVar5;
if (modulus == 0) {
buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
buffer[pos++] = (byte) (x & MASK_8BITS);
}
}
}
}
}
// Two forms of EOF as far as base64 decoder is concerned: actual
if (eof && modulus != 0) {
x = x << 6;
switch(modulus) {
case 2:
x = x << 6;
buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
break;
case 3:
buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
break;
default:
break;
}
}
}"
15948,I18N,DM_DEFAULT_ENCODING,FP,net,2007,"_output_.write(username.getBytes());
","public void rexec(String username, String password, String command, boolean separateErrorStream) throws IOException {
int ch;
if (separateErrorStream) {
_errorStream_ = _createErrorStream();
} else {
_output_.write('\0');
}
_output_.write(username.getBytes());
_output_.write('\0');
_output_.write(password.getBytes());
_output_.write('\0');
_output_.write(command.getBytes());
_output_.write('\0');
_output_.flush();
ch = _input_.read();
if (ch > 0) {
StringBuilder buffer = new StringBuilder();
while ((ch = _input_.read()) != -1 && ch != '\n') {
buffer.append((char) ch);
}
throw new IOException(buffer.toString());
} else if (ch < 0) {
throw new IOException(""Server closed connection."");
}
}","public void rexec(String username, String password, String command, boolean separateErrorStream) throws IOException {
int intVar1;
if (separateErrorStream) {
_errorStream_ = _createErrorStream();
} else {
_output_.write('\0');
}
_output_.write(username.getBytes());
_output_.write('\0');
_output_.write(password.getBytes());
_output_.write('\0');
_output_.write(command.getBytes());
_output_.write('\0');
_output_.flush();
intVar1 = _input_.read();
if (intVar1 > 0) {
StringBuilder stringbuilderVar2 = stringbuilderLiteral3;
while ((intVar1 = _input_.read()) != -1 && intVar1 != '\n') {
stringbuilderVar2.append((char) intVar1);
}
throw new IOException(stringbuilderVar2.toString());
} else if (intVar1 < 0) {
throw new IOException(""Server closed connection."");
}
}"
15954,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,net,2013,"return null;
","public String[] listNames(String pathname) throws IOException {
Socket socket;
if ((socket = _openDataConnection_(FTPCommand.NLST, getListArguments(pathname))) == null) {
return null;
}
BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream(), getControlEncoding()));
ArrayList<String> results = new ArrayList<String>();
String line;
while ((line = reader.readLine()) != null) {
results.add(line);
}
reader.close();
socket.close();
if (completePendingCommand()) {
String[] names = new String[results.size()];
return results.toArray(names);
}
return null;
}","public String[] listNames(String pathname) throws IOException {
Socket socketVar1;
if ((socketVar1 = _openDataConnection_(FTPCommand.NLST, getListArguments(pathname))) == null) {
return null;
}
BufferedReader bufferedreaderVar2 = bufferedreaderLiteral3;
ArrayList<String> arraylist<string>Var4 = arraylist<string>Literal5;
String stringVar6;
while ((stringVar6 = bufferedreaderVar2.readLine()) != null) {
arraylist<string>Var4.add(stringVar6);
}
bufferedreaderVar2.close();
socketVar1.close();
if (completePendingCommand()) {
String[] stringArrayVar7 = stringArrayLiteral8;
return arraylist<string>Var4.toArray(stringArrayVar7);
}
return null;
}"
15960,I18N,DM_DEFAULT_ENCODING,FP,net,2019,"return sendCommand(CMD_ENC, new String(Base64.encodeBase64(data)));
","public int execENC(byte[] data) throws IOException {
if (data != null) {
return sendCommand(CMD_ENC, new String(Base64.encodeBase64(data)));
} else {
return sendCommand(CMD_ENC, """");
}
}","public int execENC(byte[] data) throws IOException {
if (data != null) {
return sendCommand(CMD_ENC, new String(Base64.encodeBase64(data)));
} else {
return sendCommand(CMD_ENC, """");
}
}"
15962,MALICIOUS_CODE,MS_SHOULD_BE_FINAL,FP,net,2021,"@Deprecated
public static String KEYSTORE_ALGORITHM;","@Deprecated
public static String KEYSTORE_ALGORITHM;","@Deprecated
public static String stringVar1;"
15986,DODGY_CODE,DLS_DEAD_LOCAL_STORE,FP,net,2045,"pointer.articleId = tokens[i++];
","private void __parseArticlePointer(String reply, ArticleInfo pointer) throws MalformedServerReplyException {
String[] tokens = reply.split("" "");
if (tokens.length >= 3) {
int i = 1;
try {
pointer.articleNumber = Long.parseLong(tokens[i++]);
pointer.articleId = tokens[i++];
return;
} catch (NumberFormatException e) {
}
}
throw new MalformedServerReplyException(""Could not parse article pointer.\nServer reply: "" + reply);
}","private void __parseArticlePointer(String reply, ArticleInfo pointer) throws MalformedServerReplyException {
String[] stringArrayVar1 = stringArrayLiteral2;
if (stringArrayVar1.length >= 3) {
int intVar3 = intLiteral4;
try {
pointer.articleNumber = Long.parseLong(stringArrayVar1[intVar3++]);
pointer.articleId = stringArrayVar1[intVar3++];
return;
} catch (NumberFormatException e) {
}
}
throw new MalformedServerReplyException(""Could not parse article pointer.\nServer reply: "" + reply);
}"
15989,BAD_PRACTICE,THROWS_METHOD_THROWS_RUNTIMEEXCEPTION,FP,net,2048,"if (parent != null && threadable == null) {
throw new RuntimeException(""no threadable in "" + this.toString());
}
parent = null;
if (threadable != null) {
threadable.setChild(child == null ? null : child.threadable);
}
if (child != null) {
child.flush();
child = null;
}
if (threadable != null) {
threadable.setNext(next == null ? null : next.threadable);
}
if (next != null) {
next.flush();
next = null;
}
threadable = null;
}
","void flush() {
if (parent != null && threadable == null) {
throw new RuntimeException(""no threadable in "" + this.toString());
}
parent = null;
if (threadable != null) {
threadable.setChild(child == null ? null : child.threadable);
}
if (child != null) {
child.flush();
child = null;
}
if (threadable != null) {
threadable.setNext(next == null ? null : next.threadable);
}
if (next != null) {
next.flush();
next = null;
}
threadable = null;
}","void flush() {
if (parent != null && threadable == null) {
throw new RuntimeException(""no threadable in "" + this.toString());
}
parent = null;
if (threadable != null) {
threadable.setChild(child == null ? null : child.threadable);
}
if (child != null) {
child.flush();
child = null;
}
if (threadable != null) {
threadable.setNext(next == null ? null : next.threadable);
}
if (next != null) {
next.flush();
next = null;
}
threadable = null;
}"
15997,BAD_PRACTICE,THROWS_METHOD_THROWS_RUNTIMEEXCEPTION,FP,net,2056,"String id = threadable.messageThreadId();
ThreadContainer container = idTable.get(id);
if (container != null) {
if (container.threadable != null) { 
id = ""<Bogus-id:"" + (bogusIdCount++) + "">"";
container = null;
} else {
container.threadable = threadable;
}
}
if (container == null) {
container = new ThreadContainer();
container.threadable = threadable;
idTable.put(id, container);
}
ThreadContainer parentRef = null;
{
String[] references = threadable.messageThreadReferences();
for (int i = 0; i < references.length; ++i) {
String refString = references[i];
ThreadContainer ref = idTable.get(refString);
if (ref == null) {
ref = new ThreadContainer();
idTable.put(refString, ref);
}
// Link references together in the order they appear in the References: header,
if ((parentRef != null)
&& (ref.parent == null)
&& (parentRef != ref)
&& !(ref.findChild(parentRef))) {
ref.parent = parentRef;
ref.next = parentRef.child;
parentRef.child = ref;
}
parentRef = ref;
}
}
if (parentRef != null
&& (parentRef == container || container.findChild(parentRef)))
{
parentRef = null;
}
// if it has a parent already, its because we saw this message in a References: field, and presumed
if (container.parent != null) {
ThreadContainer rest, prev;
for (prev = null, rest = container.parent.child;
rest != null;
prev = rest, rest = rest.next) {
if (rest == container) {
break;
}
}
if (rest == null) {
throw new RuntimeException(
""Didnt find ""
+ container
+ "" in parent""
+ container.parent);
}
if (prev == null) {
container.parent.child = container.next;
} else {
prev.next = container.next;
}
container.next = null;
container.parent = null;
}
if (parentRef != null) {
container.parent = parentRef;
container.next = parentRef.child;
parentRef.child = container;
}
}
","private void buildContainer(Threadable threadable) {
String id = threadable.messageThreadId();
ThreadContainer container = idTable.get(id);
if (container != null) {
if (container.threadable != null) {
id = ""<Bogus-id:"" + (bogusIdCount++) + "">"";
container = null;
} else {
container.threadable = threadable;
}
}
if (container == null) {
container = new ThreadContainer();
container.threadable = threadable;
idTable.put(id, container);
}
ThreadContainer parentRef = null;
{
String[] references = threadable.messageThreadReferences();
for (int i = 0; i < references.length; ++i) {
String refString = references[i];
ThreadContainer ref = idTable.get(refString);
if (ref == null) {
ref = new ThreadContainer();
idTable.put(refString, ref);
}
// Link references together in the order they appear in the References: header,
if ((parentRef != null) && (ref.parent == null) && (parentRef != ref) && !(ref.findChild(parentRef))) {
ref.parent = parentRef;
ref.next = parentRef.child;
parentRef.child = ref;
}
parentRef = ref;
}
}
if (parentRef != null && (parentRef == container || container.findChild(parentRef))) {
parentRef = null;
}
// if it has a parent already, its because we saw this message in a References: field, and presumed
if (container.parent != null) {
ThreadContainer rest, prev;
for (prev = null, rest = container.parent.child; rest != null; prev = rest, rest = rest.next) {
if (rest == container) {
break;
}
}
if (rest == null) {
throw new RuntimeException(""Didnt find "" + container + "" in parent"" + container.parent);
}
if (prev == null) {
container.parent.child = container.next;
} else {
prev.next = container.next;
}
container.next = null;
container.parent = null;
}
if (parentRef != null) {
container.parent = parentRef;
container.next = parentRef.child;
parentRef.child = container;
}
}","private void buildContainer(Threadable threadable) {
String stringVar1 = stringLiteral2;
ThreadContainer threadcontainerVar3 = threadcontainerLiteral4;
if (threadcontainerVar3 != null) {
if (threadcontainerVar3.threadable != null) {
stringVar1 = ""<Bogus-id:"" + (bogusIdCount++) + "">"";
threadcontainerVar3 = null;
} else {
threadcontainerVar3.threadable = threadable;
}
}
if (threadcontainerVar3 == null) {
threadcontainerVar3 = new ThreadContainer();
threadcontainerVar3.threadable = threadable;
idTable.put(stringVar1, threadcontainerVar3);
}
ThreadContainer threadcontainerVar5 = threadcontainerLiteral6;
{
String[] stringArrayVar7 = stringArrayLiteral8;
for (int intVar17 = intLiteral18; intVar9 < intLiteral1; ++intVar9) {
String stringVar11 = stringLiteral12;
ThreadContainer threadcontainerVar13 = threadcontainerLiteral14;
if (threadcontainerVar13 == null) {
threadcontainerVar13 = new ThreadContainer();
idTable.put(stringVar11, threadcontainerVar13);
}
// Link references together in the order they appear in the References: header,
if ((threadcontainerVar5 != null) && (threadcontainerVar13.parent == null) && (threadcontainerVar5 != threadcontainerVar13) && !(threadcontainerVar13.findChild(threadcontainerVar5))) {
threadcontainerVar13.parent = threadcontainerVar5;
threadcontainerVar13.next = threadcontainerVar5.child;
threadcontainerVar5.child = threadcontainerVar13;
}
threadcontainerVar5 = threadcontainerVar13;
}
}
if (threadcontainerVar5 != null && (threadcontainerVar5 == threadcontainerVar3 || threadcontainerVar3.findChild(threadcontainerVar5))) {
threadcontainerVar5 = null;
}
// if it has a parent already, its because we saw this message in a References: field, and presumed
if (threadcontainerVar3.parent != null) {
ThreadContainer threadcontainerVar15, threadcontainerVar16;
for (threadcontainerVar16 = null, threadcontainerVar15 = threadcontainerVar3.parent.child; threadcontainerVar15 != null; threadcontainerVar16 = threadcontainerVar15, threadcontainerVar15 = threadcontainerVar15.next) {
if (threadcontainerVar15 == threadcontainerVar3) {
break;
}
}
if (threadcontainerVar15 == null) {
throw new RuntimeException(""Didnt find "" + threadcontainerVar3 + "" in parent"" + threadcontainerVar3.parent);
}
if (threadcontainerVar16 == null) {
threadcontainerVar3.parent.child = threadcontainerVar3.next;
} else {
threadcontainerVar16.next = threadcontainerVar3.next;
}
threadcontainerVar3.next = null;
threadcontainerVar3.parent = null;
}
if (threadcontainerVar5 != null) {
threadcontainerVar3.parent = threadcontainerVar5;
threadcontainerVar3.next = threadcontainerVar5.child;
threadcontainerVar5.child = threadcontainerVar3;
}
}"
15998,MALICIOUS_CODE,MC_OVERRIDABLE_METHOD_CALL_IN_CONSTRUCTOR,FP,net,2057,"computeDetails();
","public TimeInfo(NtpV3Packet message, long returnTime, List<String> comments, boolean doComputeDetails) {
if (message == null) {
throw new IllegalArgumentException(""message cannot be null"");
}
this._returnTime = returnTime;
this._message = message;
this._comments = comments;
if (doComputeDetails) {
computeDetails();
}
}","public TimeInfo(NtpV3Packet message, long returnTime, List<String> comments, boolean doComputeDetails) {
if (message == null) {
throw new IllegalArgumentException(""message cannot be null"");
}
this._returnTime = returnTime;
this._message = message;
this._comments = comments;
if (doComputeDetails) {
computeDetails();
}
}"
16002,DODGY_CODE,DLS_DEAD_LOCAL_STORE,FP,net,2061,"num = size = 0;
","private static POP3MessageInfo __parseStatus(String line) {
int num, size;
StringTokenizer tokenizer;
tokenizer = new StringTokenizer(line);
if (!tokenizer.hasMoreElements()) {
return null;
}
num = size = 0;
try {
num = Integer.parseInt(tokenizer.nextToken());
if (!tokenizer.hasMoreElements()) {
return null;
}
size = Integer.parseInt(tokenizer.nextToken());
} catch (NumberFormatException e) {
return null;
}
return new POP3MessageInfo(num, size);
}","private static POP3MessageInfo __parseStatus(String line) {
int intVar1, intVar2;
StringTokenizer stringtokenizerVar3;
stringtokenizerVar3 = new StringTokenizer(line);
if (!stringtokenizerVar3.hasMoreElements()) {
return null;
}
intVar1 = intVar2 = 0;
try {
intVar1 = Integer.parseInt(stringtokenizerVar3.nextToken());
if (!stringtokenizerVar3.hasMoreElements()) {
return null;
}
intVar2 = Integer.parseInt(stringtokenizerVar3.nextToken());
} catch (NumberFormatException e) {
return null;
}
return new POP3MessageInfo(intVar1, intVar2);
}"
16007,DODGY_CODE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,FP,net,2066,"(SSLSocket) ssf.createSocket(_socket_, ip, port, true);
","private void performSSLNegotiation() throws IOException {
initSSLContext();
SSLSocketFactory ssf = context.getSocketFactory();
String ip = getRemoteAddress().getHostAddress();
int port = getRemotePort();
SSLSocket socket = (SSLSocket) ssf.createSocket(_socket_, ip, port, true);
socket.setEnableSessionCreation(true);
socket.setUseClientMode(true);
if (protocols != null) {
socket.setEnabledProtocols(protocols);
}
if (suites != null) {
socket.setEnabledCipherSuites(suites);
}
socket.startHandshake();
_socket_ = socket;
_input_ = socket.getInputStream();
_output_ = socket.getOutputStream();
_reader = new CRLFLineReader(new InputStreamReader(_input_, _DEFAULT_ENCODING));
_writer = new BufferedWriter(new OutputStreamWriter(_output_, _DEFAULT_ENCODING));
}","private void performSSLNegotiation() throws IOException {
initSSLContext();
SSLSocketFactory sslsocketfactoryVar1 = sslsocketfactoryLiteral2;
String stringVar3 = stringLiteral4;
int intVar5 = intLiteral6;
SSLSocket sslsocketVar7 = sslsocketLiteral8;
sslsocketVar7.setEnableSessionCreation(true);
sslsocketVar7.setUseClientMode(true);
if (protocols != null) {
sslsocketVar7.setEnabledProtocols(protocols);
}
if (suites != null) {
sslsocketVar7.setEnabledCipherSuites(suites);
}
sslsocketVar7.startHandshake();
_socket_ = sslsocketVar7;
_input_ = sslsocketVar7.getInputStream();
_output_ = sslsocketVar7.getOutputStream();
_reader = new CRLFLineReader(new InputStreamReader(_input_, _DEFAULT_ENCODING));
_writer = new BufferedWriter(new OutputStreamWriter(_output_, _DEFAULT_ENCODING));
}"
16015,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,net,2074,"return null;
","@Override
public int[] answerSubnegotiation(int[] suboptionData, int suboptionLength) {
return null;
}","@Override
public int[] answerSubnegotiation(int[] suboptionData, int suboptionLength) {
return null;
}"
16019,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,net,2078,"return null;
","@Override
public int[] answerSubnegotiation(int[] suboptionData, int suboptionLength) {
return null;
}","@Override
public int[] answerSubnegotiation(int[] suboptionData, int suboptionLength) {
return null;
}"
16022,Multithreaded correctness,WA_NOT_IN_LOOP,FP,net,2081,"aytMonitor.wait(timeout);
","final boolean _sendAYT(long timeout) throws IOException, IllegalArgumentException, InterruptedException {
boolean retValue = false;
synchronized (aytMonitor) {
synchronized (this) {
aytFlag = false;
_output_.write(_COMMAND_AYT);
_output_.flush();
}
aytMonitor.wait(timeout);
if (aytFlag == false) {
retValue = false;
aytFlag = true;
} else {
retValue = true;
}
}
return (retValue);
}","final boolean _sendAYT(long timeout) throws IOException, IllegalArgumentException, InterruptedException {
boolean booleanVar1 = booleanLiteral2;
synchronized (aytMonitor) {
synchronized (this) {
aytFlag = false;
_output_.write(_COMMAND_AYT);
_output_.flush();
}
aytMonitor.wait(timeout);
if (aytFlag == false) {
booleanVar1 = false;
aytFlag = true;
} else {
booleanVar1 = true;
}
}
return (booleanVar1);
}"
16026,Multithreaded correctness,NO_NOTIFY_NOT_NOTIFYALL,FP,net,2085,"__queue.notify();
","private boolean __processChar(int ch) throws InterruptedException {
boolean bufferWasEmpty;
synchronized (__queue) {
bufferWasEmpty = (__bytesAvailable == 0);
while (__bytesAvailable >= __queue.length - 1) {
if (__threaded) {
__queue.notify();
try {
__queue.wait();
} catch (InterruptedException e) {
throw e;
}
} else {
throw new IllegalStateException(""Queue is full! Cannot process another character."");
}
}
if (__readIsWaiting && __threaded) {
__queue.notify();
}
__queue[__queueTail] = ch;
++__bytesAvailable;
if (++__queueTail >= __queue.length) {
__queueTail = 0;
}
}
return bufferWasEmpty;
}","private boolean __processChar(int ch) throws InterruptedException {
boolean booleanVar1;
synchronized (__queue) {
booleanVar1 = (__bytesAvailable == 0);
while (__bytesAvailable >= __queue.length - 1) {
if (__threaded) {
__queue.notify();
try {
__queue.wait();
} catch (InterruptedException e) {
throw e;
}
} else {
throw new IllegalStateException(""Queue is full! Cannot process another character."");
}
}
if (__readIsWaiting && __threaded) {
__queue.notify();
}
__queue[__queueTail] = ch;
++__bytesAvailable;
if (++__queueTail >= __queue.length) {
__queueTail = 0;
}
}
return booleanVar1;
}"
16028,Multithreaded correctness,NO_NOTIFY_NOT_NOTIFYALL,FP,net,2087,"__queue.notify();
","public void run() {
int ch;
__threaded = true;
try {
_outerLoop: while (!__isClosed) {
try {
if ((ch = __read(true)) < 0) {
break;
}
} catch (InterruptedIOException e) {
synchronized (__queue) {
__ioException = e;
__queue.notifyAll();
try {
__queue.wait(100);
} catch (InterruptedException interrupted) {
if (__isClosed) {
break _outerLoop;
}
}
continue;
}
} catch (RuntimeException re) {
super.close();
break _outerLoop;
}
boolean notify = false;
try {
notify = __processChar(ch);
} catch (InterruptedException e) {
if (__isClosed) {
break _outerLoop;
}
}
if (notify) {
__client.notifyInputListener();
}
}
} catch (IOException ioe) {
synchronized (__queue) {
__ioException = ioe;
}
__client.notifyInputListener();
}
synchronized (__queue) {
__isClosed = true;
__hasReachedEOF = true;
__queue.notify();
}
__threaded = false;
}","public void run() {
int intVar1;
__threaded = true;
try {
_outerLoop: while (!__isClosed) {
try {
if ((intVar1 = __read(true)) < 0) {
break;
}
} catch (InterruptedIOException e) {
synchronized (__queue) {
__ioException = e;
__queue.notifyAll();
try {
__queue.wait(100);
} catch (InterruptedException interrupted) {
if (__isClosed) {
break _outerLoop;
}
}
continue;
}
} catch (RuntimeException re) {
super.close();
break _outerLoop;
}
boolean booleanVar2 = booleanLiteral3;
try {
booleanVar2 = __processChar(intVar1);
} catch (InterruptedException e) {
if (__isClosed) {
break _outerLoop;
}
}
if (booleanVar2) {
__client.notifyInputListener();
}
}
} catch (IOException ioe) {
synchronized (__queue) {
__ioException = ioe;
}
__client.notifyInputListener();
}
synchronized (__queue) {
__isClosed = true;
__hasReachedEOF = true;
__queue.notify();
}
__threaded = false;
}"
16029,DODGY_CODE,DB_DUPLICATE_SWITCH_CLAUSES,FP,net,2088,"__receiveState = _STATE_DATA;
break; 
","private int __read(boolean mayBlock) throws IOException {
int ch;
while (true) {
if (!mayBlock && super.available() == 0) {
return WOULD_BLOCK;
}
if ((ch = super.read()) < 0) {
return EOF;
}
ch = (ch & 0xff);
synchronized (__client) {
__client._processAYTResponse();
}
__client._spyRead(ch);
switch(__receiveState) {
case _STATE_CR:
if (ch == '\0') {
continue;
}
case _STATE_DATA:
if (ch == TelnetCommand.IAC) {
__receiveState = _STATE_IAC;
continue;
}
if (ch == '\r') {
synchronized (__client) {
if (__client._requestedDont(TelnetOption.BINARY)) {
__receiveState = _STATE_CR;
} else {
__receiveState = _STATE_DATA;
}
}
} else {
__receiveState = _STATE_DATA;
}
break;
case _STATE_IAC:
switch(ch) {
case TelnetCommand.WILL:
__receiveState = _STATE_WILL;
continue;
case TelnetCommand.WONT:
__receiveState = _STATE_WONT;
continue;
case TelnetCommand.DO:
__receiveState = _STATE_DO;
continue;
case TelnetCommand.DONT:
__receiveState = _STATE_DONT;
continue;
case TelnetCommand.SB:
__suboption_count = 0;
__receiveState = _STATE_SB;
continue;
case TelnetCommand.IAC:
__receiveState = _STATE_DATA;
break;
case // unexpected byte! ignore it (don't send it as a command)
TelnetCommand.SE:
__receiveState = _STATE_DATA;
continue;
default:
__receiveState = _STATE_DATA;
__client._processCommand(ch);
continue;
}
break;
case _STATE_WILL:
synchronized (__client) {
__client._processWill(ch);
__client._flushOutputStream();
}
__receiveState = _STATE_DATA;
continue;
case _STATE_WONT:
synchronized (__client) {
__client._processWont(ch);
__client._flushOutputStream();
}
__receiveState = _STATE_DATA;
continue;
case _STATE_DO:
synchronized (__client) {
__client._processDo(ch);
__client._flushOutputStream();
}
__receiveState = _STATE_DATA;
continue;
case _STATE_DONT:
synchronized (__client) {
__client._processDont(ch);
__client._flushOutputStream();
}
__receiveState = _STATE_DATA;
continue;
case _STATE_SB:
switch(ch) {
case TelnetCommand.IAC:
__receiveState = _STATE_IAC_SB;
continue;
default:
if (__suboption_count < __suboption.length) {
__suboption[__suboption_count++] = ch;
}
break;
}
__receiveState = _STATE_SB;
continue;
case // IAC received during SB phase
_STATE_IAC_SB:
switch(ch) {
case TelnetCommand.SE:
synchronized (__client) {
__client._processSuboption(__suboption, __suboption_count);
__client._flushOutputStream();
}
__receiveState = _STATE_DATA;
continue;
case // De-dup the duplicated IAC
TelnetCommand.IAC:
if (__suboption_count < __suboption.length) {
__suboption[__suboption_count++] = ch;
}
break;
default:
// unexpected byte! ignore it
break;
}
__receiveState = _STATE_SB;
continue;
}
break;
}
return ch;
}","private int __read(boolean mayBlock) throws IOException {
int intVar1;
while (true) {
if (!mayBlock && super.available() == 0) {
return WOULD_BLOCK;
}
if ((intVar1 = super.read()) < 0) {
return EOF;
}
intVar1 = (intVar1 & 0xff);
synchronized (__client) {
__client._processAYTResponse();
}
__client._spyRead(intVar1);
switch(__receiveState) {
case _STATE_CR:
if (intVar1 == '\0') {
continue;
}
case _STATE_DATA:
if (intVar1 == TelnetCommand.IAC) {
__receiveState = _STATE_IAC;
continue;
}
if (intVar1 == '\r') {
synchronized (__client) {
if (__client._requestedDont(TelnetOption.BINARY)) {
__receiveState = _STATE_CR;
} else {
__receiveState = _STATE_DATA;
}
}
} else {
__receiveState = _STATE_DATA;
}
break;
case _STATE_IAC:
switch(intVar1) {
case TelnetCommand.WILL:
__receiveState = _STATE_WILL;
continue;
case TelnetCommand.WONT:
__receiveState = _STATE_WONT;
continue;
case TelnetCommand.DO:
__receiveState = _STATE_DO;
continue;
case TelnetCommand.DONT:
__receiveState = _STATE_DONT;
continue;
case TelnetCommand.SB:
__suboption_count = 0;
__receiveState = _STATE_SB;
continue;
case TelnetCommand.IAC:
__receiveState = _STATE_DATA;
break;
case // unexpected byte! ignore it (don't send it as a command)
TelnetCommand.SE:
__receiveState = _STATE_DATA;
continue;
default:
__receiveState = _STATE_DATA;
__client._processCommand(intVar1);
continue;
}
break;
case _STATE_WILL:
synchronized (__client) {
__client._processWill(intVar1);
__client._flushOutputStream();
}
__receiveState = _STATE_DATA;
continue;
case _STATE_WONT:
synchronized (__client) {
__client._processWont(intVar1);
__client._flushOutputStream();
}
__receiveState = _STATE_DATA;
continue;
case _STATE_DO:
synchronized (__client) {
__client._processDo(intVar1);
__client._flushOutputStream();
}
__receiveState = _STATE_DATA;
continue;
case _STATE_DONT:
synchronized (__client) {
__client._processDont(intVar1);
__client._flushOutputStream();
}
__receiveState = _STATE_DATA;
continue;
case _STATE_SB:
switch(intVar1) {
case TelnetCommand.IAC:
__receiveState = _STATE_IAC_SB;
continue;
default:
if (__suboption_count < __suboption.length) {
__suboption[__suboption_count++] = intVar1;
}
break;
}
__receiveState = _STATE_SB;
continue;
case // IAC received during SB phase
_STATE_IAC_SB:
switch(intVar1) {
case TelnetCommand.SE:
synchronized (__client) {
__client._processSuboption(__suboption, __suboption_count);
__client._flushOutputStream();
}
__receiveState = _STATE_DATA;
continue;
case // De-dup the duplicated IAC
TelnetCommand.IAC:
if (__suboption_count < __suboption.length) {
__suboption[__suboption_count++] = intVar1;
}
break;
default:
// unexpected byte! ignore it
break;
}
__receiveState = _STATE_SB;
continue;
}
break;
}
return intVar1;
}"
16034,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,net,2093,"return null;
","@Override
public int[] startSubnegotiationRemote() {
return null;
}","@Override
public int[] startSubnegotiationRemote() {
return null;
}"
16036,I18N,DM_DEFAULT_ENCODING,FP,net,2095,"System.arraycopy(_message.getBytes(), 0, data, 4, length);
","@Override
public DatagramPacket newDatagram() {
byte[] data;
int length;
length = _message.length();
data = new byte[length + 5];
data[0] = 0;
data[1] = (byte) _type;
data[2] = (byte) ((_error & 0xffff) >> 8);
data[3] = (byte) (_error & 0xff);
System.arraycopy(_message.getBytes(), 0, data, 4, length);
data[length + 4] = 0;
return new DatagramPacket(data, data.length, _address, _port);
}","@Override
public DatagramPacket newDatagram() {
byte[] byteArrayVar1;
int intVar2;
intVar2 = _message.length();
byteArrayVar1 = new byte[intVar2 + 5];
byteArrayVar1[0] = 0;
byteArrayVar1[1] = (byte) _type;
byteArrayVar1[2] = (byte) ((_error & 0xffff) >> 8);
byteArrayVar1[3] = (byte) (_error & 0xff);
System.arraycopy(_message.getBytes(), 0, byteArrayVar1, 4, intVar2);
byteArrayVar1[intVar2 + 4] = 0;
return new DatagramPacket(byteArrayVar1, byteArrayVar1.length, _address, _port);
}"
16041,BAD_PRACTICE,THROWS_METHOD_THROWS_RUNTIMEEXCEPTION,FP,net,2100,"if (!(pObject instanceof byte[])) {
throw new RuntimeException(""Parameter supplied to Base64 encode is not a byte[]"");
}
return encode((byte[]) pObject);
","public Object encode(Object pObject) {
if (!(pObject instanceof byte[])) {
throw new RuntimeException(""Parameter supplied to Base64 encode is not a byte[]"");
}
return encode((byte[]) pObject);
}","public Object encode(Object pObject) {
if (!(pObject instanceof byte[])) {
throw new RuntimeException(""Parameter supplied to Base64 encode is not a byte[]"");
}
return encode((byte[]) pObject);
}"
16044,DODGY_CODE,SF_SWITCH_NO_DEFAULT,FP,net,2103,"switch (modulus) {
case 2 :
x = x << 6;
buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
break;
case 3 :
buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
","void decode(byte[] in, int inPos, int inAvail) {
if (eof) {
return;
}
if (inAvail < 0) {
eof = true;
}
for (int i = 0; i < inAvail; i++) {
if (buffer == null || buffer.length - pos < decodeSize) {
resizeBuffer();
}
byte b = in[inPos++];
if (b == PAD) {
eof = true;
break;
} else {
if (b >= 0 && b < DECODE_TABLE.length) {
int result = DECODE_TABLE[b];
if (result >= 0) {
modulus = (++modulus) % 4;
x = (x << 6) + result;
if (modulus == 0) {
buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
buffer[pos++] = (byte) (x & MASK_8BITS);
}
}
}
}
}
// Two forms of EOF as far as base64 decoder is concerned: actual
if (eof && modulus != 0) {
x = x << 6;
switch(modulus) {
case 2:
x = x << 6;
buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
break;
case 3:
buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
break;
}
}
}","void decode(byte[] in, int inPos, int inAvail) {
if (eof) {
return;
}
if (inAvail < 0) {
eof = true;
}
for (int intVar7 = intLiteral8; intVar1 < intLiteral1; intVar1++) {
if (buffer == null || buffer.length - pos < decodeSize) {
resizeBuffer();
}
byte byteVar3 = byteLiteral4;
if (byteVar3 == PAD) {
eof = true;
break;
} else {
if (byteVar3 >= 0 && byteVar3 < DECODE_TABLE.length) {
int intVar5 = intLiteral6;
if (intVar5 >= 0) {
modulus = (++modulus) % 4;
x = (x << 6) + intVar5;
if (modulus == 0) {
buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
buffer[pos++] = (byte) (x & MASK_8BITS);
}
}
}
}
}
// Two forms of EOF as far as base64 decoder is concerned: actual
if (eof && modulus != 0) {
x = x << 6;
switch(modulus) {
case 2:
x = x << 6;
buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
break;
case 3:
buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
break;
}
}
}"
16045,DODGY_CODE,SA_FIELD_DOUBLE_ASSIGNMENT,FP,net,2104,"modulus = (++modulus) % 3;
","void encode(byte[] in, int inPos, int inAvail) {
if (eof) {
return;
}
if (inAvail < 0) {
eof = true;
if (buffer == null || buffer.length - pos < encodeSize) {
resizeBuffer();
}
switch(modulus) {
case 1:
buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
if (encodeTable == STANDARD_ENCODE_TABLE) {
buffer[pos++] = PAD;
buffer[pos++] = PAD;
}
break;
case 2:
buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
if (encodeTable == STANDARD_ENCODE_TABLE) {
buffer[pos++] = PAD;
}
break;
}
if (lineLength > 0 && pos > 0) {
System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
pos += lineSeparator.length;
}
} else {
for (int i = 0; i < inAvail; i++) {
if (buffer == null || buffer.length - pos < encodeSize) {
resizeBuffer();
}
modulus = (++modulus) % 3;
int b = in[inPos++];
if (b < 0) {
b += 256;
}
x = (x << 8) + b;
if (0 == modulus) {
buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
buffer[pos++] = encodeTable[(x >> 12) & MASK_6BITS];
buffer[pos++] = encodeTable[(x >> 6) & MASK_6BITS];
buffer[pos++] = encodeTable[x & MASK_6BITS];
currentLinePos += 4;
if (lineLength > 0 && lineLength <= currentLinePos) {
System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
pos += lineSeparator.length;
currentLinePos = 0;
}
}
}
}
}","void encode(byte[] in, int inPos, int inAvail) {
if (eof) {
return;
}
if (inAvail < 0) {
eof = true;
if (buffer == null || buffer.length - pos < encodeSize) {
resizeBuffer();
}
switch(modulus) {
case 1:
buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
if (encodeTable == STANDARD_ENCODE_TABLE) {
buffer[pos++] = PAD;
buffer[pos++] = PAD;
}
break;
case 2:
buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
if (encodeTable == STANDARD_ENCODE_TABLE) {
buffer[pos++] = PAD;
}
break;
}
if (lineLength > 0 && pos > 0) {
System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
pos += lineSeparator.length;
}
} else {
for (int intVar5 = intLiteral6; intVar1 < intLiteral1; intVar1++) {
if (buffer == null || buffer.length - pos < encodeSize) {
resizeBuffer();
}
modulus = (++modulus) % 3;
int intVar3 = intLiteral4;
if (intVar3 < 0) {
intVar3 += 256;
}
x = (x << 8) + intVar3;
if (0 == modulus) {
buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
buffer[pos++] = encodeTable[(x >> 12) & MASK_6BITS];
buffer[pos++] = encodeTable[(x >> 6) & MASK_6BITS];
buffer[pos++] = encodeTable[x & MASK_6BITS];
currentLinePos += 4;
if (lineLength > 0 && lineLength <= currentLinePos) {
System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
pos += lineSeparator.length;
currentLinePos = 0;
}
}
}
}
}"
16053,BAD_PRACTICE,THROWS_METHOD_THROWS_RUNTIMEEXCEPTION,TP,net,2112,"public FTPHTTPClient(String proxyHost, int proxyPort, String proxyUser, String proxyPass) {
this.proxyHost = proxyHost;
this.proxyPort = proxyPort;
this.proxyUsername = proxyUser;
this.proxyPassword = proxyPass;
try {
CRLF = ""\r\n"".getBytes(getControlEncoding());
} catch (UnsupportedEncodingException e) {
throw new RuntimeException(e);
}
}
","public FTPHTTPClient(String proxyHost, int proxyPort, String proxyUser, String proxyPass) {
this.proxyHost = proxyHost;
this.proxyPort = proxyPort;
this.proxyUsername = proxyUser;
this.proxyPassword = proxyPass;
try {
CRLF = ""\r\n"".getBytes(getControlEncoding());
} catch (UnsupportedEncodingException e) {
throw new RuntimeException(e);
}
}","public FTPHTTPClient(String proxyHost, int proxyPort, String proxyUser, String proxyPass) {
this.proxyHost = proxyHost;
this.proxyPort = proxyPort;
this.proxyUsername = proxyUser;
this.proxyPassword = proxyPass;
try {
CRLF = ""\r\n"".getBytes(getControlEncoding());
} catch (UnsupportedEncodingException e) {
throw new RuntimeException(e);
}
}"
16059,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,net,2118,"return null;
","public NewsgroupInfo[] listNewsgroups() throws IOException {
if (!NNTPReply.isPositiveCompletion(list()))
return null;
return __readNewsgroupListing();
}","public NewsgroupInfo[] listNewsgroups() throws IOException {
if (!NNTPReply.isPositiveCompletion(list()))
return null;
return __readNewsgroupListing();
}"
16072,DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,TP,net,2131,"for (ThreadContainer c = root.child; c != null; c = c.next)
","private void gatherSubjects() {
int count = 0;
for (ThreadContainer c = root.child; c != null; c = c.next) count++;
HashMap<String, ThreadContainer> subjectTable = new HashMap<String, ThreadContainer>((int) (count * 1.2), (float) 0.9);
count = 0;
for (ThreadContainer c = root.child; c != null; c = c.next) {
Threadable threadable = c.threadable;
if (threadable == null)
threadable = c.child.threadable;
String subj = threadable.simplifiedSubject();
if (subj == null || subj == """")
continue;
ThreadContainer old = subjectTable.get(subj);
// Add this container to the table iff:
// - The container in the table has a ""Re:"" version of this subject, and
// this container has a non-""Re:"" version of this subject. The non-""Re:"" version
if (old == null || (c.threadable == null && old.threadable != null) || (old.threadable != null && old.threadable.subjectIsReply() && c.threadable != null && !c.threadable.subjectIsReply())) {
subjectTable.put(subj, c);
count++;
}
}
if (count == 0)
return;
ThreadContainer prev, c, rest;
for (prev = null, c = root.child, rest = c.next; c != null; prev = c, c = rest, rest = (rest == null ? null : rest.next)) {
Threadable threadable = c.threadable;
if (threadable == null)
threadable = c.child.threadable;
String subj = threadable.simplifiedSubject();
if (subj == null || subj == """")
continue;
ThreadContainer old = subjectTable.get(subj);
if (old == c)
continue;
if (prev == null)
root.child = c.next;
else
prev.next = c.next;
c.next = null;
if (old.threadable == null && c.threadable == null) {
ThreadContainer tail;
for (tail = old.child; tail != null && tail.next != null; tail = tail.next) {
}
if (tail != null) {
tail.next = c.child;
}
for (tail = c.child; tail != null; tail = tail.next) tail.parent = old;
c.child = null;
} else if (old.threadable == null || (c.threadable != null && c.threadable.subjectIsReply() && !old.threadable.subjectIsReply())) {
// Else if old is empty, or c has ""Re:"" and old does not  ==> make this message a child of old
c.parent = old;
c.next = old.child;
old.child = c;
} else {
ThreadContainer newc = new ThreadContainer();
newc.threadable = old.threadable;
newc.child = old.child;
for (ThreadContainer tail = newc.child; tail != null; tail = tail.next) tail.parent = newc;
old.threadable = null;
old.child = null;
c.parent = old;
newc.parent = old;
old.child = c;
c.next = newc;
}
c = prev;
}
subjectTable.clear();
subjectTable = null;
}","private void gatherSubjects() {
int intVar1 = intLiteral2;
for (ThreadContainer threadcontainerVar19 = threadcontainerLiteral20; threadcontainerVar3 != intLiteral1; threadcontainerVar3 = threadcontainerVar3.next) intVar1++;
HashMap<String, ThreadContainer> hashmap<string,threadcontainer>Var5 = hashmap<string,threadcontainer>Literal6;
intVar1 = 0;
for (ThreadContainer threadcontainerVar19 = threadcontainerLiteral20; threadcontainerVar3 != null; threadcontainerVar3 = threadcontainerVar3.next) {
Threadable threadableVar7 = threadableLiteral8;
if (threadableVar7 == null)
threadableVar7 = threadcontainerVar3.child.threadable;
String stringVar9 = stringLiteral10;
if (stringVar9 == null || stringVar9 == """")
continue;
ThreadContainer threadcontainerVar11 = threadcontainerLiteral12;
// Add this container to the table iff:
// - The container in the table has a ""Re:"" version of this subject, and
// this container has a non-""Re:"" version of this subject. The non-""Re:"" version
if (threadcontainerVar11 == null || (threadcontainerVar3.threadable == null && threadcontainerVar11.threadable != null) || (threadcontainerVar11.threadable != null && threadcontainerVar11.threadable.subjectIsReply() && threadcontainerVar3.threadable != null && !threadcontainerVar3.threadable.subjectIsReply())) {
hashmap<string,threadcontainer>Var5.put(stringVar9, threadcontainerVar3);
intVar1++;
}
}
if (intVar1 == 0)
return;
ThreadContainer threadcontainerVar13, threadcontainerVar3, threadcontainerVar14;
for (threadcontainerVar13 = null, threadcontainerVar3 = root.child, threadcontainerVar14 = threadcontainerVar3.next; threadcontainerVar3 != null; threadcontainerVar13 = threadcontainerVar3, threadcontainerVar3 = threadcontainerVar14, threadcontainerVar14 = (threadcontainerVar14 == null ? null : threadcontainerVar14.next)) {
Threadable threadableVar7 = threadableLiteral8;
if (threadableVar7 == null)
threadableVar7 = threadcontainerVar3.child.threadable;
String stringVar9 = stringLiteral10;
if (stringVar9 == null || stringVar9 == """")
continue;
ThreadContainer threadcontainerVar11 = threadcontainerLiteral12;
if (threadcontainerVar11 == threadcontainerVar3)
continue;
if (threadcontainerVar13 == null)
root.child = threadcontainerVar3.next;
else
threadcontainerVar13.next = threadcontainerVar3.next;
threadcontainerVar3.next = null;
if (threadcontainerVar11.threadable == null && threadcontainerVar3.threadable == null) {
ThreadContainer threadcontainerVar15;
for (threadcontainerVar15 = threadcontainerVar11.child; threadcontainerVar15 != null && intLiteral2; threadcontainerVar15 = threadcontainerVar15.next) {
}
if (threadcontainerVar15 != null) {
threadcontainerVar15.next = threadcontainerVar3.child;
}
for (threadcontainerVar15 = threadcontainerVar3.child; threadcontainerVar15 != null; threadcontainerVar15 = threadcontainerVar15.next) threadcontainerVar15.parent = threadcontainerVar11;
threadcontainerVar3.child = null;
} else if (threadcontainerVar11.threadable == null || (threadcontainerVar3.threadable != null && threadcontainerVar3.threadable.subjectIsReply() && !threadcontainerVar11.threadable.subjectIsReply())) {
// Else if old is empty, or c has ""Re:"" and old does not  ==> make this message a child of old
threadcontainerVar3.parent = threadcontainerVar11;
threadcontainerVar3.next = threadcontainerVar11.child;
threadcontainerVar11.child = threadcontainerVar3;
} else {
ThreadContainer threadcontainerVar16 = threadcontainerLiteral17;
threadcontainerVar16.threadable = threadcontainerVar11.threadable;
threadcontainerVar16.child = threadcontainerVar11.child;
for (ThreadContainer threadcontainerVar21 = threadcontainerLiteral22; threadcontainerVar15 != null; threadcontainerVar15 = threadcontainerVar15.next) threadcontainerVar15.parent = threadcontainerVar16;
threadcontainerVar11.threadable = null;
threadcontainerVar11.child = null;
threadcontainerVar3.parent = threadcontainerVar11;
threadcontainerVar16.parent = threadcontainerVar11;
threadcontainerVar11.child = threadcontainerVar3;
threadcontainerVar3.next = threadcontainerVar16;
}
threadcontainerVar3 = threadcontainerVar13;
}
hashmap<string,threadcontainer>Var5.clear();
hashmap<string,threadcontainer>Var5 = null;
}"
16076,DODGY_CODE,NP_LOAD_OF_KNOWN_NULL_VALUE,FP,net,2135,"file.setGroup(grp);
","@Override
public FTPFile parseFTPEntry(String entry) {
FTPFile file = new FTPFile();
file.setRawListing(entry);
int type;
boolean isDevice = false;
if (matches(entry)) {
String typeStr = group(1);
String hardLinkCount = ""0"";
String usr = null;
String grp = null;
String filesize = group(20);
String datestr = group(21) + "" "" + group(22);
String name = group(23);
String endtoken = group(24);
try {
file.setTimestamp(super.parseTimestamp(datestr));
} catch (ParseException e) {
}
switch(typeStr.charAt(0)) {
case 'd':
type = FTPFile.DIRECTORY_TYPE;
break;
case 'e':
type = FTPFile.SYMBOLIC_LINK_TYPE;
break;
case 'l':
type = FTPFile.SYMBOLIC_LINK_TYPE;
break;
case 'b':
case 'c':
isDevice = true;
type = FTPFile.FILE_TYPE;
break;
case 'f':
case '-':
type = FTPFile.FILE_TYPE;
break;
default:
// e.g. ? and w = whiteout
type = FTPFile.UNKNOWN_TYPE;
}
file.setType(type);
int g = 4;
for (int access = 0; access < 3; access++, g += 4) {
file.setPermission(access, FTPFile.READ_PERMISSION, (!group(g).equals(""-"")));
file.setPermission(access, FTPFile.WRITE_PERMISSION, (!group(g + 1).equals(""-"")));
String execPerm = group(g + 2);
if (!execPerm.equals(""-"") && !Character.isUpperCase(execPerm.charAt(0))) {
file.setPermission(access, FTPFile.EXECUTE_PERMISSION, true);
} else {
file.setPermission(access, FTPFile.EXECUTE_PERMISSION, false);
}
}
if (!isDevice) {
try {
file.setHardLinkCount(Integer.parseInt(hardLinkCount));
} catch (NumberFormatException e) {
}
}
file.setUser(usr);
file.setGroup(grp);
try {
file.setSize(Long.parseLong(filesize));
} catch (NumberFormatException e) {
}
if (null == endtoken) {
file.setName(name);
} else {
name += endtoken;
if (type == FTPFile.SYMBOLIC_LINK_TYPE) {
int end = name.indexOf("" -> "");
if (end == -1) {
file.setName(name);
} else {
file.setName(name.substring(0, end));
file.setLink(name.substring(end + 4));
}
} else {
file.setName(name);
}
}
return file;
}
return null;
}","@Override
public FTPFile parseFTPEntry(String entry) {
FTPFile ftpfileVar1 = ftpfileLiteral2;
ftpfileVar1.setRawListing(entry);
int intVar3;
boolean booleanVar4 = booleanLiteral5;
if (matches(entry)) {
String stringVar6 = stringLiteral7;
String stringVar8 = stringLiteral9;
String stringVar10 = stringLiteral11;
String stringVar12 = stringLiteral11;
String stringVar13 = stringLiteral14;
String stringVar15 = stringLiteral16;
String stringVar17 = stringLiteral18;
String stringVar19 = stringLiteral20;
try {
ftpfileVar1.setTimestamp(super.parseTimestamp(stringVar15));
} catch (ParseException e) {
}
switch(stringVar6.charAt(0)) {
case 'd':
intVar3 = FTPFile.DIRECTORY_TYPE;
break;
case 'e':
intVar3 = FTPFile.SYMBOLIC_LINK_TYPE;
break;
case 'l':
intVar3 = FTPFile.SYMBOLIC_LINK_TYPE;
break;
case 'b':
case 'c':
booleanVar4 = true;
intVar3 = FTPFile.FILE_TYPE;
break;
case 'f':
case '-':
intVar3 = FTPFile.FILE_TYPE;
break;
default:
// e.g. ? and w = whiteout
intVar3 = FTPFile.UNKNOWN_TYPE;
}
ftpfileVar1.setType(intVar3);
int intVar21 = intLiteral22;
for (int intVar29 = intLiteral30; intVar23 < intLiteral1; intVar23++, intVar21 += 4) {
ftpfileVar1.setPermission(intVar23, FTPFile.READ_PERMISSION, (!group(intVar21).equals(""-"")));
ftpfileVar1.setPermission(intVar23, FTPFile.WRITE_PERMISSION, (!group(intVar21 + 1).equals(""-"")));
String stringVar25 = stringLiteral26;
if (!stringVar25.equals(""-"") && !Character.isUpperCase(stringVar25.charAt(0))) {
ftpfileVar1.setPermission(intVar23, FTPFile.EXECUTE_PERMISSION, true);
} else {
ftpfileVar1.setPermission(intVar23, FTPFile.EXECUTE_PERMISSION, false);
}
}
if (!booleanVar4) {
try {
ftpfileVar1.setHardLinkCount(Integer.parseInt(stringVar8));
} catch (NumberFormatException e) {
}
}
ftpfileVar1.setUser(stringVar10);
ftpfileVar1.setGroup(stringVar12);
try {
ftpfileVar1.setSize(Long.parseLong(stringVar13));
} catch (NumberFormatException e) {
}
if (null == stringVar19) {
ftpfileVar1.setName(stringVar17);
} else {
stringVar17 += stringVar19;
if (intVar3 == FTPFile.SYMBOLIC_LINK_TYPE) {
int intVar27 = intLiteral28;
if (intVar27 == -1) {
ftpfileVar1.setName(stringVar17);
} else {
ftpfileVar1.setName(stringVar17.substring(0, intVar27));
ftpfileVar1.setLink(stringVar17.substring(intVar27 + 4));
}
} else {
ftpfileVar1.setName(stringVar17);
}
}
return ftpfileVar1;
}
return null;
}"
16079,Multithreaded correctness,WA_NOT_IN_LOOP,FP,net,2138,"aytMonitor.wait(timeout);
","final boolean _sendAYT(long timeout) throws IOException, IllegalArgumentException, InterruptedException {
boolean retValue = false;
synchronized (aytMonitor) {
synchronized (this) {
aytFlag = false;
_output_.write(_COMMAND_AYT);
_output_.flush();
}
try {
aytMonitor.wait(timeout);
if (aytFlag == false) {
retValue = false;
aytFlag = true;
} else {
retValue = true;
}
} catch (IllegalMonitorStateException e) {
System.err.println(""Exception processing AYT:"" + e.getMessage());
}
}
return (retValue);
}","final boolean _sendAYT(long timeout) throws IOException, IllegalArgumentException, InterruptedException {
boolean booleanVar1 = booleanLiteral2;
synchronized (aytMonitor) {
synchronized (this) {
aytFlag = false;
_output_.write(_COMMAND_AYT);
_output_.flush();
}
try {
aytMonitor.wait(timeout);
if (aytFlag == false) {
booleanVar1 = false;
aytFlag = true;
} else {
booleanVar1 = true;
}
} catch (IllegalMonitorStateException e) {
System.err.println(""Exception processing AYT:"" + e.getMessage());
}
}
return (booleanVar1);
}"
16086,DODGY_CODE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,FP,net,2145,"(SSLSocket) ssf.createSocket(_socket_, ip, port, false);
","protected void sslNegotiation() throws IOException {
plainSocket = _socket_;
initSslContext();
SSLSocketFactory ssf = context.getSocketFactory();
String ip = _socket_.getInetAddress().getHostAddress();
int port = _socket_.getPort();
SSLSocket socket = (SSLSocket) ssf.createSocket(_socket_, ip, port, false);
socket.setEnableSessionCreation(isCreation);
socket.setUseClientMode(isClientMode);
if (!isClientMode) {
socket.setNeedClientAuth(isNeedClientAuth);
socket.setWantClientAuth(isWantClientAuth);
}
if (protocols != null) {
socket.setEnabledProtocols(protocols);
}
if (suites != null) {
socket.setEnabledCipherSuites(suites);
}
socket.startHandshake();
_socket_ = socket;
_controlInput_ = new BufferedReader(new InputStreamReader(socket.getInputStream(), getControlEncoding()));
_controlOutput_ = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream(), getControlEncoding()));
}","protected void sslNegotiation() throws IOException {
plainSocket = _socket_;
initSslContext();
SSLSocketFactory sslsocketfactoryVar1 = sslsocketfactoryLiteral2;
String stringVar3 = stringLiteral4;
int intVar5 = intLiteral6;
SSLSocket sslsocketVar7 = sslsocketLiteral8;
sslsocketVar7.setEnableSessionCreation(isCreation);
sslsocketVar7.setUseClientMode(isClientMode);
if (!isClientMode) {
sslsocketVar7.setNeedClientAuth(isNeedClientAuth);
sslsocketVar7.setWantClientAuth(isWantClientAuth);
}
if (protocols != null) {
sslsocketVar7.setEnabledProtocols(protocols);
}
if (suites != null) {
sslsocketVar7.setEnabledCipherSuites(suites);
}
sslsocketVar7.startHandshake();
_socket_ = sslsocketVar7;
_controlInput_ = new BufferedReader(new InputStreamReader(sslsocketVar7.getInputStream(), getControlEncoding()));
_controlOutput_ = new BufferedWriter(new OutputStreamWriter(sslsocketVar7.getOutputStream(), getControlEncoding()));
}"
16087,DODGY_CODE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,FP,net,2146,"(SSLSocket) ssf.createSocket(_socket_, ip, port, true);
","private void performSSLNegotiation() throws IOException {
initSSLContext();
SSLSocketFactory ssf = context.getSocketFactory();
String ip = getRemoteAddress().getHostAddress();
int port = getRemotePort();
SSLSocket socket = (SSLSocket) ssf.createSocket(_socket_, ip, port, true);
socket.setEnableSessionCreation(true);
socket.setUseClientMode(true);
if (protocols != null) {
socket.setEnabledProtocols(protocols);
}
if (suites != null) {
socket.setEnabledCipherSuites(suites);
}
socket.startHandshake();
_socket_ = socket;
_input_ = socket.getInputStream();
_output_ = socket.getOutputStream();
_reader = new CRLFLineReader(new InputStreamReader(_input_, _DEFAULT_ENCODING));
_writer = new BufferedWriter(new OutputStreamWriter(_output_, _DEFAULT_ENCODING));
}","private void performSSLNegotiation() throws IOException {
initSSLContext();
SSLSocketFactory sslsocketfactoryVar1 = sslsocketfactoryLiteral2;
String stringVar3 = stringLiteral4;
int intVar5 = intLiteral6;
SSLSocket sslsocketVar7 = sslsocketLiteral8;
sslsocketVar7.setEnableSessionCreation(true);
sslsocketVar7.setUseClientMode(true);
if (protocols != null) {
sslsocketVar7.setEnabledProtocols(protocols);
}
if (suites != null) {
sslsocketVar7.setEnabledCipherSuites(suites);
}
sslsocketVar7.startHandshake();
_socket_ = sslsocketVar7;
_input_ = sslsocketVar7.getInputStream();
_output_ = sslsocketVar7.getOutputStream();
_reader = new CRLFLineReader(new InputStreamReader(_input_, _DEFAULT_ENCODING));
_writer = new BufferedWriter(new OutputStreamWriter(_output_, _DEFAULT_ENCODING));
}"
16089,BAD_PRACTICE,OS_OPEN_STREAM_EXCEPTION_PATH,FP,net,2148,"output = new ToNetASCIIOutputStream(getBufferedOutputStream(socket.getOutputStream()));
","protected boolean _storeFile(String command, String remote, InputStream local) throws IOException {
Socket socket = _openDataConnection_(command, remote);
if (socket == null) {
return false;
}
final OutputStream output;
if (__fileType == ASCII_FILE_TYPE) {
output = new ToNetASCIIOutputStream(getBufferedOutputStream(socket.getOutputStream()));
} else {
output = getBufferedOutputStream(socket.getOutputStream());
}
CSL csl = null;
if (__controlKeepAliveTimeout > 0) {
csl = new CSL(this, __controlKeepAliveTimeout, __controlKeepAliveReplyTimeout);
}
try {
Util.copyStream(local, output, getBufferSize(), CopyStreamEvent.UNKNOWN_STREAM_SIZE, __mergeListeners(csl), false);
} catch (IOException e) {
Util.closeQuietly(socket);
if (csl != null) {
csl.cleanUp();
}
throw e;
}
output.close();
socket.close();
if (csl != null) {
csl.cleanUp();
}
boolean ok = completePendingCommand();
return ok;
}","protected boolean _storeFile(String command, String remote, InputStream local) throws IOException {
Socket socketVar1 = socketLiteral2;
if (socketVar1 == null) {
return false;
}
final OutputStream outputstreamVar3;
if (__fileType == ASCII_FILE_TYPE) {
outputstreamVar3 = new ToNetASCIIOutputStream(getBufferedOutputStream(socketVar1.getOutputStream()));
} else {
outputstreamVar3 = getBufferedOutputStream(socketVar1.getOutputStream());
}
CSL cslVar4 = cslLiteral5;
if (__controlKeepAliveTimeout > 0) {
cslVar4 = new CSL(this, __controlKeepAliveTimeout, __controlKeepAliveReplyTimeout);
}
try {
Util.copyStream(local, outputstreamVar3, getBufferSize(), CopyStreamEvent.UNKNOWN_STREAM_SIZE, __mergeListeners(cslVar4), false);
} catch (IOException e) {
Util.closeQuietly(socketVar1);
if (cslVar4 != null) {
cslVar4.cleanUp();
}
throw e;
}
outputstreamVar3.close();
socketVar1.close();
if (cslVar4 != null) {
cslVar4.cleanUp();
}
boolean booleanVar6 = booleanLiteral7;
return booleanVar6;
}"
16102,I18N,DM_DEFAULT_ENCODING,FP,net,2161,"Base64.encodeBase64((""\000"" + username + ""\000"" + password).getBytes())
","public boolean auth(ExtendedPOP3Client.AUTH_METHOD method, String username, String password) throws IOException, NoSuchAlgorithmException, InvalidKeyException, InvalidKeySpecException {
if (sendCommand(authCommand + "" "" + AUTH_METHOD.getAuthName(method)) != POP3Reply.OK_INT)
return false;
if (method.equals(AUTH_METHOD.PLAIN)) {
return sendCommand(new String(Base64.encodeBase64((""\000"" + username + ""\000"" + password).getBytes()))) == POP3Reply.OK;
} else if (method.equals(AUTH_METHOD.CRAM_MD5)) {
byte[] serverChallenge = Base64.decodeBase64(getReplyString().substring(2).trim());
Mac hmac_md5 = Mac.getInstance(""HmacMD5"");
hmac_md5.init(new SecretKeySpec(password.getBytes(), ""HmacMD5""));
// compute the result:
byte[] hmacResult = _convertToHexString(hmac_md5.doFinal(serverChallenge)).getBytes();
byte[] usernameBytes = username.getBytes();
byte[] toEncode = new byte[usernameBytes.length + 1 + hmacResult.length];
System.arraycopy(usernameBytes, 0, toEncode, 0, usernameBytes.length);
toEncode[usernameBytes.length] = ' ';
System.arraycopy(hmacResult, 0, toEncode, usernameBytes.length + 1, hmacResult.length);
// send the reply and read the server code:
return sendCommand(new String(Base64.encodeBase64(toEncode))) == POP3Reply.OK;
} else
return false;
}","public boolean auth(ExtendedPOP3Client.AUTH_METHOD method, String username, String password) throws IOException, NoSuchAlgorithmException, InvalidKeyException, InvalidKeySpecException {
if (sendCommand(authCommand + "" "" + AUTH_METHOD.getAuthName(method)) != POP3Reply.OK_INT)
return false;
if (method.equals(AUTH_METHOD.PLAIN)) {
return sendCommand(new String(Base64.encodeBase64((""\000"" + username + ""\000"" + password).getBytes()))) == POP3Reply.OK;
} else if (method.equals(AUTH_METHOD.CRAM_MD5)) {
byte[] byteArrayVar1 = byteArrayLiteral2;
Mac macVar3 = macLiteral4;
macVar3.init(new SecretKeySpec(password.getBytes(), ""HmacMD5""));
// compute the result:
byte[] byteArrayVar5 = byteArrayLiteral6;
byte[] byteArrayVar7 = byteArrayLiteral8;
byte[] byteArrayVar9 = byteArrayLiteral10;
System.arraycopy(byteArrayVar7, 0, byteArrayVar9, 0, byteArrayVar7.length);
byteArrayVar9[byteArrayVar7.length] = ' ';
System.arraycopy(byteArrayVar5, 0, byteArrayVar9, byteArrayVar7.length + 1, byteArrayVar5.length);
// send the reply and read the server code:
return sendCommand(new String(Base64.encodeBase64(byteArrayVar9))) == POP3Reply.OK;
} else
return false;
}"
16103,MALICIOUS_CODE,EI_EXPOSE_REP2,TP,net,2162,"this.rootCause = rootCause;
","public ParserInitializationException(String message, Throwable rootCause) {
super(message);
this.rootCause = rootCause;
}","public ParserInitializationException(String message, Throwable rootCause) {
super(message);
this.rootCause = rootCause;
}"
16106,DODGY_CODE,NP_LOAD_OF_KNOWN_NULL_VALUE,FP,net,2165,"file.setGroup(grp);
","@Override
public FTPFile parseFTPEntry(String entry) {
FTPFile file = new FTPFile();
file.setRawListing(entry);
int type;
boolean isDevice = false;
if (matches(entry)) {
String typeStr = group(1);
String hardLinkCount = ""0"";
String usr = null;
String grp = null;
String filesize = group(20);
String datestr = group(21) + "" "" + group(22);
String name = group(23);
String endtoken = group(24);
try {
file.setTimestamp(super.parseTimestamp(datestr));
} catch (ParseException e) {
}
switch(typeStr.charAt(0)) {
case 'd':
type = FTPFile.DIRECTORY_TYPE;
break;
case 'e':
type = FTPFile.SYMBOLIC_LINK_TYPE;
break;
case 'l':
type = FTPFile.SYMBOLIC_LINK_TYPE;
break;
case 'b':
case 'c':
isDevice = true;
type = FTPFile.FILE_TYPE;
break;
case 'f':
case '-':
type = FTPFile.FILE_TYPE;
break;
default:
// e.g. ? and w = whiteout
type = FTPFile.UNKNOWN_TYPE;
}
file.setType(type);
int g = 4;
for (int access = 0; access < 3; access++, g += 4) {
file.setPermission(access, FTPFile.READ_PERMISSION, (!group(g).equals(""-"")));
file.setPermission(access, FTPFile.WRITE_PERMISSION, (!group(g + 1).equals(""-"")));
String execPerm = group(g + 2);
if (!execPerm.equals(""-"") && !Character.isUpperCase(execPerm.charAt(0))) {
file.setPermission(access, FTPFile.EXECUTE_PERMISSION, true);
} else {
file.setPermission(access, FTPFile.EXECUTE_PERMISSION, false);
}
}
if (!isDevice) {
try {
file.setHardLinkCount(Integer.parseInt(hardLinkCount));
} catch (NumberFormatException e) {
}
}
file.setUser(usr);
file.setGroup(grp);
try {
file.setSize(Long.parseLong(filesize));
} catch (NumberFormatException e) {
}
if (null == endtoken) {
file.setName(name);
} else {
name += endtoken;
if (type == FTPFile.SYMBOLIC_LINK_TYPE) {
int end = name.indexOf("" -> "");
if (end == -1) {
file.setName(name);
} else {
file.setName(name.substring(0, end));
file.setLink(name.substring(end + 4));
}
} else {
file.setName(name);
}
}
return file;
}
return null;
}","@Override
public FTPFile parseFTPEntry(String entry) {
FTPFile ftpfileVar1 = ftpfileLiteral2;
ftpfileVar1.setRawListing(entry);
int intVar3;
boolean booleanVar4 = booleanLiteral5;
if (matches(entry)) {
String stringVar6 = stringLiteral7;
String stringVar8 = stringLiteral9;
String stringVar10 = stringLiteral11;
String stringVar12 = stringLiteral11;
String stringVar13 = stringLiteral14;
String stringVar15 = stringLiteral16;
String stringVar17 = stringLiteral18;
String stringVar19 = stringLiteral20;
try {
ftpfileVar1.setTimestamp(super.parseTimestamp(stringVar15));
} catch (ParseException e) {
}
switch(stringVar6.charAt(0)) {
case 'd':
intVar3 = FTPFile.DIRECTORY_TYPE;
break;
case 'e':
intVar3 = FTPFile.SYMBOLIC_LINK_TYPE;
break;
case 'l':
intVar3 = FTPFile.SYMBOLIC_LINK_TYPE;
break;
case 'b':
case 'c':
booleanVar4 = true;
intVar3 = FTPFile.FILE_TYPE;
break;
case 'f':
case '-':
intVar3 = FTPFile.FILE_TYPE;
break;
default:
// e.g. ? and w = whiteout
intVar3 = FTPFile.UNKNOWN_TYPE;
}
ftpfileVar1.setType(intVar3);
int intVar21 = intLiteral22;
for (int intVar29 = intLiteral30; intVar23 < intLiteral1; intVar23++, intVar21 += 4) {
ftpfileVar1.setPermission(intVar23, FTPFile.READ_PERMISSION, (!group(intVar21).equals(""-"")));
ftpfileVar1.setPermission(intVar23, FTPFile.WRITE_PERMISSION, (!group(intVar21 + 1).equals(""-"")));
String stringVar25 = stringLiteral26;
if (!stringVar25.equals(""-"") && !Character.isUpperCase(stringVar25.charAt(0))) {
ftpfileVar1.setPermission(intVar23, FTPFile.EXECUTE_PERMISSION, true);
} else {
ftpfileVar1.setPermission(intVar23, FTPFile.EXECUTE_PERMISSION, false);
}
}
if (!booleanVar4) {
try {
ftpfileVar1.setHardLinkCount(Integer.parseInt(stringVar8));
} catch (NumberFormatException e) {
}
}
ftpfileVar1.setUser(stringVar10);
ftpfileVar1.setGroup(stringVar12);
try {
ftpfileVar1.setSize(Long.parseLong(stringVar13));
} catch (NumberFormatException e) {
}
if (null == stringVar19) {
ftpfileVar1.setName(stringVar17);
} else {
stringVar17 += stringVar19;
if (intVar3 == FTPFile.SYMBOLIC_LINK_TYPE) {
int intVar27 = intLiteral28;
if (intVar27 == -1) {
ftpfileVar1.setName(stringVar17);
} else {
ftpfileVar1.setName(stringVar17.substring(0, intVar27));
ftpfileVar1.setLink(stringVar17.substring(intVar27 + 4));
}
} else {
ftpfileVar1.setName(stringVar17);
}
}
return ftpfileVar1;
}
return null;
}"
16215,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,80,"} catch (Exception e) {
","public void invalidateObject(final K key, final V obj) {
try {
pool.invalidateObject(obj);
} catch (Exception e) {
}
}","public void invalidateObject(final K key, final V obj) {
try {
pool.invalidateObject(obj);
} catch (Exception e) {
}
}"
16233,DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,pool,98,"scheduledFuture.cancel(false);
","void cancel() {
scheduledFuture.cancel(false);
}","void cancel() {
scheduledFuture.cancel(false);
}"
16237,Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,pool,102,private GenericObjectPoolConfig config;,private GenericObjectPoolConfig config;,private GenericObjectPoolConfig genericobjectpoolconfigVar1;
16239,DODGY_CODE,UCF_USELESS_CONTROL_FLOW,FP,pool,104,"if (!underTest.endEvictionTest(idleObjects)) {
","@Override
public void evict() throws Exception {
assertOpen();
if (idleObjects.size() > 0) {
PooledObject<T> underTest = null;
final EvictionPolicy<T> evictionPolicy = getEvictionPolicy();
synchronized (evictionLock) {
final EvictionConfig evictionConfig = new EvictionConfig(getMinEvictableIdleTimeMillis(), getSoftMinEvictableIdleTimeMillis(), getMinIdle());
final boolean testWhileIdle = getTestWhileIdle();
for (int i = 0, m = getNumTests(); i < m; i++) {
if (evictionIterator == null || !evictionIterator.hasNext()) {
evictionIterator = new EvictionIterator(idleObjects);
}
if (!evictionIterator.hasNext()) {
return;
}
try {
underTest = evictionIterator.next();
} catch (final NoSuchElementException nsee) {
i--;
evictionIterator = null;
continue;
}
if (!underTest.startEvictionTest()) {
i--;
continue;
}
boolean evict;
try {
evict = evictionPolicy.evict(evictionConfig, underTest, idleObjects.size());
} catch (final Throwable t) {
PoolUtils.checkRethrow(t);
swallowException(new Exception(t));
evict = false;
}
if (evict) {
destroy(underTest);
destroyedByEvictorCount.incrementAndGet();
} else {
if (testWhileIdle) {
boolean active = false;
try {
factory.activateObject(underTest);
active = true;
} catch (final Exception e) {
destroy(underTest);
destroyedByEvictorCount.incrementAndGet();
}
if (active) {
if (!factory.validateObject(underTest)) {
destroy(underTest);
destroyedByEvictorCount.incrementAndGet();
} else {
try {
factory.passivateObject(underTest);
} catch (final Exception e) {
destroy(underTest);
destroyedByEvictorCount.incrementAndGet();
}
}
}
}
if (!underTest.endEvictionTest(idleObjects)) {
}
}
}
}
}
final AbandonedConfig ac = this.abandonedConfig;
if (ac != null && ac.getRemoveAbandonedOnMaintenance()) {
removeAbandoned(ac);
}
}","@Override
public void evict() throws Exception {
assertOpen();
if (idleObjects.size() > 0) {
PooledObject<T> pooledobject<t>Var1 = pooledobject<t>Literal2;
final EvictionPolicy<T> evictionpolicy<t>Var3 = evictionpolicy<t>Literal4;
synchronized (evictionLock) {
final EvictionConfig evictionconfigVar5 = evictionconfigLiteral6;
final boolean booleanVar7 = booleanLiteral8;
for (int intVar18 = intLiteral19, intVar20 = intLiteral21; intVar9 < intLiteral1; intVar9++) {
if (evictionIterator == null || !evictionIterator.hasNext()) {
evictionIterator = new EvictionIterator(idleObjects);
}
if (!evictionIterator.hasNext()) {
return;
}
try {
pooledobject<t>Var1 = evictionIterator.next();
} catch (final NoSuchElementException nsee) {
intVar9--;
evictionIterator = null;
continue;
}
if (!pooledobject<t>Var1.startEvictionTest()) {
intVar9--;
continue;
}
boolean booleanVar13;
try {
booleanVar13 = evictionpolicy<t>Var3.evict(evictionconfigVar5, pooledobject<t>Var1, idleObjects.size());
} catch (final Throwable t) {
PoolUtils.checkRethrow(t);
swallowException(new Exception(t));
booleanVar13 = false;
}
if (booleanVar13) {
destroy(pooledobject<t>Var1);
destroyedByEvictorCount.incrementAndGet();
} else {
if (booleanVar7) {
boolean booleanVar14 = booleanLiteral15;
try {
factory.activateObject(pooledobject<t>Var1);
booleanVar14 = true;
} catch (final Exception e) {
destroy(pooledobject<t>Var1);
destroyedByEvictorCount.incrementAndGet();
}
if (booleanVar14) {
if (!factory.validateObject(pooledobject<t>Var1)) {
destroy(pooledobject<t>Var1);
destroyedByEvictorCount.incrementAndGet();
} else {
try {
factory.passivateObject(pooledobject<t>Var1);
} catch (final Exception e) {
destroy(pooledobject<t>Var1);
destroyedByEvictorCount.incrementAndGet();
}
}
}
}
if (!pooledobject<t>Var1.endEvictionTest(idleObjects)) {
}
}
}
}
}
final AbandonedConfig abandonedconfigVar16 = abandonedconfigLiteral17;
if (abandonedconfigVar16 != null && abandonedconfigVar16.getRemoveAbandonedOnMaintenance()) {
removeAbandoned(abandonedconfigVar16);
}
}"
16246,PERFORMANCE,WMI_WRONG_MAP_ITERATOR,FP,pool,111,"ObjectQueue pool = _poolMap.get(key);
","public void setFactory(KeyedPoolableObjectFactory<K, V> factory) throws IllegalStateException {
Map toDestroy = new HashMap();
final KeyedPoolableObjectFactory<K, V> oldFactory = _factory;
synchronized (this) {
assertOpen();
if (0 < getNumActive()) {
throw new IllegalStateException(""Objects are already active"");
} else {
for (Iterator<K> it = _poolMap.keySet().iterator(); it.hasNext(); ) {
K key = it.next();
ObjectQueue pool = _poolMap.get(key);
if (pool != null) {
List objects = new ArrayList();
objects.addAll(pool.queue);
toDestroy.put(key, objects);
it.remove();
_poolList.remove(key);
_totalIdle = _totalIdle - pool.queue.size();
_totalInternalProcessing = _totalInternalProcessing + pool.queue.size();
pool.queue.clear();
}
}
_factory = factory;
}
}
destroy(toDestroy, oldFactory);
}","public void setFactory(KeyedPoolableObjectFactory<K, V> factory) throws IllegalStateException {
Map mapVar1 = mapLiteral2;
final KeyedPoolableObjectFactory<K, V> keyedpoolableobjectfactory<k,v>Var3 = keyedpoolableobjectfactory<k,v>Literal4;
synchronized (this) {
assertOpen();
if (0 < getNumActive()) {
throw new IllegalStateException(""Objects are already active"");
} else {
for (Iterator<K> iterator<k>Var13 = iterator<k>Literal14; iterator<k>Var5.hasNext(); ) {
K kVar7 = kLiteral8;
ObjectQueue objectqueueVar9 = objectqueueLiteral10;
if (objectqueueVar9 != null) {
List listVar11 = listLiteral12;
listVar11.addAll(objectqueueVar9.queue);
mapVar1.put(kVar7, listVar11);
iterator<k>Var5.remove();
_poolList.remove(kVar7);
_totalIdle = _totalIdle - objectqueueVar9.queue.size();
_totalInternalProcessing = _totalInternalProcessing + objectqueueVar9.queue.size();
objectqueueVar9.queue.clear();
}
}
_factory = factory;
}
}
destroy(mapVar1, keyedpoolableobjectfactory<k,v>Var3);
}"
16248,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,113,"} catch (Exception e) {
","public void close() {
try {
keyedPool.close();
} catch (Exception e) {
}
}","public void close() {
try {
keyedPool.close();
} catch (Exception e) {
}
}"
16254,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,119,"} catch(Exception e) {
","public void run() {
try {
evict();
} catch (Exception e) {
} catch (OutOfMemoryError oome) {
oome.printStackTrace(System.err);
}
try {
ensureMinIdle();
} catch (Exception e) {
}
}","public void run() {
try {
evict();
} catch (Exception e) {
} catch (OutOfMemoryError oome) {
oome.printStackTrace(System.err);
}
try {
ensureMinIdle();
} catch (Exception e) {
}
}"
16255,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,120,"} catch (Exception e1) {
","@Override
public T borrowObject(K key) throws Exception {
assertOpen();
PooledObject<T> p = null;
WhenExhaustedAction whenExhaustedAction = _whenExhaustedAction;
long maxWait = _maxWait;
boolean create;
ObjectDeque<T> objectDeque = poolMap.get(key);
while (p == null) {
create = false;
if (whenExhaustedAction == WhenExhaustedAction.FAIL) {
if (objectDeque != null) {
p = objectDeque.getIdleObjects().pollFirst();
}
if (p == null) {
create = true;
p = create(key, false);
}
if (p == null) {
throw new NoSuchElementException(""Pool exhausted"");
}
if (!p.allocate()) {
p = null;
}
} else if (whenExhaustedAction == WhenExhaustedAction.BLOCK) {
if (objectDeque != null) {
p = objectDeque.getIdleObjects().pollFirst();
}
if (p == null) {
create = true;
p = create(key, false);
}
if (p == null && objectDeque != null) {
if (maxWait < 1) {
p = objectDeque.getIdleObjects().takeFirst();
} else {
p = objectDeque.getIdleObjects().pollFirst(maxWait, TimeUnit.MILLISECONDS);
}
}
if (p == null) {
throw new NoSuchElementException(""Timeout waiting for idle object"");
}
if (!p.allocate()) {
p = null;
}
} else if (whenExhaustedAction == WhenExhaustedAction.GROW) {
if (objectDeque != null) {
p = objectDeque.getIdleObjects().pollFirst();
}
if (p == null) {
create = true;
p = create(key, true);
}
if (p != null && !p.allocate()) {
p = null;
}
}
if (p != null) {
try {
_factory.activateObject(key, p.getObject());
} catch (Exception e) {
try {
destroy(key, p);
} catch (Exception e1) {
}
p = null;
if (create) {
NoSuchElementException nsee = new NoSuchElementException(""Unable to activate object"");
nsee.initCause(e);
throw nsee;
}
}
if (p != null && getTestOnBorrow()) {
boolean validate = false;
Throwable validationThrowable = null;
try {
validate = _factory.validateObject(key, p.getObject());
} catch (Throwable t) {
PoolUtils.checkRethrow(t);
}
if (!validate) {
try {
destroy(key, p);
} catch (Exception e) {
}
p = null;
if (create) {
NoSuchElementException nsee = new NoSuchElementException(""Unable to validate object"");
nsee.initCause(validationThrowable);
throw nsee;
}
}
}
}
}
return p.getObject();
}","@Override
public T borrowObject(K key) throws Exception {
assertOpen();
PooledObject<T> pooledobject<t>Var1 = pooledobject<t>Literal2;
WhenExhaustedAction whenexhaustedactionVar3 = whenexhaustedactionLiteral4;
long longVar5 = longLiteral6;
boolean booleanVar7;
ObjectDeque<T> objectdeque<t>Var8 = objectdeque<t>Literal9;
while (pooledobject<t>Var1 == null) {
booleanVar7 = false;
if (whenexhaustedactionVar3 == WhenExhaustedAction.FAIL) {
if (objectdeque<t>Var8 != null) {
pooledobject<t>Var1 = objectdeque<t>Var8.getIdleObjects().pollFirst();
}
if (pooledobject<t>Var1 == null) {
booleanVar7 = true;
pooledobject<t>Var1 = create(key, false);
}
if (pooledobject<t>Var1 == null) {
throw new NoSuchElementException(""Pool exhausted"");
}
if (!pooledobject<t>Var1.allocate()) {
pooledobject<t>Var1 = null;
}
} else if (whenexhaustedactionVar3 == WhenExhaustedAction.BLOCK) {
if (objectdeque<t>Var8 != null) {
pooledobject<t>Var1 = objectdeque<t>Var8.getIdleObjects().pollFirst();
}
if (pooledobject<t>Var1 == null) {
booleanVar7 = true;
pooledobject<t>Var1 = create(key, false);
}
if (pooledobject<t>Var1 == null && objectdeque<t>Var8 != null) {
if (longVar5 < 1) {
pooledobject<t>Var1 = objectdeque<t>Var8.getIdleObjects().takeFirst();
} else {
pooledobject<t>Var1 = objectdeque<t>Var8.getIdleObjects().pollFirst(longVar5, TimeUnit.MILLISECONDS);
}
}
if (pooledobject<t>Var1 == null) {
throw new NoSuchElementException(""Timeout waiting for idle object"");
}
if (!pooledobject<t>Var1.allocate()) {
pooledobject<t>Var1 = null;
}
} else if (whenexhaustedactionVar3 == WhenExhaustedAction.GROW) {
if (objectdeque<t>Var8 != null) {
pooledobject<t>Var1 = objectdeque<t>Var8.getIdleObjects().pollFirst();
}
if (pooledobject<t>Var1 == null) {
booleanVar7 = true;
pooledobject<t>Var1 = create(key, true);
}
if (pooledobject<t>Var1 != null && !pooledobject<t>Var1.allocate()) {
pooledobject<t>Var1 = null;
}
}
if (pooledobject<t>Var1 != null) {
try {
_factory.activateObject(key, pooledobject<t>Var1.getObject());
} catch (Exception e) {
try {
destroy(key, pooledobject<t>Var1);
} catch (Exception e1) {
}
pooledobject<t>Var1 = null;
if (booleanVar7) {
NoSuchElementException nosuchelementexceptionVar10 = nosuchelementexceptionLiteral11;
nosuchelementexceptionVar10.initCause(e);
throw nosuchelementexceptionVar10;
}
}
if (pooledobject<t>Var1 != null && getTestOnBorrow()) {
boolean booleanVar12 = booleanLiteral13;
Throwable throwableVar14 = pooledobject<t>Literal2;
try {
booleanVar12 = _factory.validateObject(key, pooledobject<t>Var1.getObject());
} catch (Throwable t) {
PoolUtils.checkRethrow(t);
}
if (!booleanVar12) {
try {
destroy(key, pooledobject<t>Var1);
} catch (Exception e) {
}
pooledobject<t>Var1 = null;
if (booleanVar7) {
NoSuchElementException nosuchelementexceptionVar10 = nosuchelementexceptionLiteral15;
nosuchelementexceptionVar10.initCause(throwableVar14);
throw nosuchelementexceptionVar10;
}
}
}
}
}
return pooledobject<t>Var1.getObject();
}"
16256,DODGY_CODE,REC_CATCH_EXCEPTION,FP,pool,121,"} catch (Exception e2) {
","public Object borrowObject(Object key) throws Exception {
long starttime = System.currentTimeMillis();
boolean newlyCreated = false;
for (; ; ) {
ObjectTimestampPair pair = null;
ObjectQueue pool = null;
synchronized (this) {
assertOpen();
pool = (ObjectQueue) (_poolMap.get(key));
if (null == pool) {
pool = new ObjectQueue();
_poolMap.put(key, pool);
_poolList.add(key);
}
try {
pair = (ObjectTimestampPair) (pool.queue.removeFirst());
if (null != pair) {
_totalIdle--;
}
} catch (NoSuchElementException e) {
}
if (null == pair) {
if ((_maxTotal > 0) && (_totalActive + _totalIdle >= _maxTotal)) {
clearOldest();
}
if ((_maxActive < 0 || pool.activeCount < _maxActive) && (_maxTotal < 0 || _totalActive + _totalIdle < _maxTotal)) {
Object obj = _factory.makeObject(key);
pair = new ObjectTimestampPair(obj);
newlyCreated = true;
} else {
switch(_whenExhaustedAction) {
case WHEN_EXHAUSTED_GROW:
Object obj = _factory.makeObject(key);
pair = new ObjectTimestampPair(obj);
break;
case WHEN_EXHAUSTED_FAIL:
throw new NoSuchElementException();
case WHEN_EXHAUSTED_BLOCK:
try {
if (_maxWait <= 0) {
wait();
} else {
final long elapsed = (System.currentTimeMillis() - starttime);
final long waitTime = _maxWait - elapsed;
if (waitTime > 0) {
wait(waitTime);
}
}
} catch (InterruptedException e) {
}
if (_maxWait > 0 && ((System.currentTimeMillis() - starttime) >= _maxWait)) {
throw new NoSuchElementException(""Timeout waiting for idle object"");
} else {
continue;
}
default:
throw new IllegalArgumentException(""whenExhaustedAction "" + _whenExhaustedAction + "" not recognized."");
}
}
}
pool.incrementActiveCount();
}
try {
_factory.activateObject(key, pair.value);
} catch (Exception e) {
try {
_factory.destroyObject(key, pair.value);
synchronized (this) {
pool.decrementActiveCount();
}
} catch (Exception e2) {
}
if (newlyCreated) {
throw new NoSuchElementException(""Could not create a validated object, cause: "" + e.getMessage());
} else {
continue;
}
}
boolean invalid = true;
try {
invalid = _testOnBorrow && !_factory.validateObject(key, pair.value);
} catch (Exception e) {
}
if (invalid) {
try {
_factory.destroyObject(key, pair.value);
synchronized (this) {
pool.decrementActiveCount();
}
} catch (Exception e) {
}
if (newlyCreated) {
throw new NoSuchElementException(""Could not create a validated object"");
}
} else {
return pair.value;
}
}
}","public Object borrowObject(Object key) throws Exception {
long longVar1 = longLiteral2;
boolean booleanVar3 = booleanLiteral4;
for (; ; ) {
ObjectTimestampPair objecttimestamppairVar5 = objecttimestamppairLiteral6;
ObjectQueue objectqueueVar7 = objecttimestamppairLiteral6;
synchronized (this) {
assertOpen();
objectqueueVar7 = (ObjectQueue) (_poolMap.get(key));
if (null == objectqueueVar7) {
objectqueueVar7 = new ObjectQueue();
_poolMap.put(key, objectqueueVar7);
_poolList.add(key);
}
try {
objecttimestamppairVar5 = (ObjectTimestampPair) (objectqueueVar7.queue.removeFirst());
if (null != objecttimestamppairVar5) {
_totalIdle--;
}
} catch (NoSuchElementException e) {
}
if (null == objecttimestamppairVar5) {
if ((_maxTotal > 0) && (_totalActive + _totalIdle >= _maxTotal)) {
clearOldest();
}
if ((_maxActive < 0 || objectqueueVar7.activeCount < _maxActive) && (_maxTotal < 0 || _totalActive + _totalIdle < _maxTotal)) {
Object objectVar8 = objectLiteral9;
objecttimestamppairVar5 = new ObjectTimestampPair(objectVar8);
booleanVar3 = true;
} else {
switch(_whenExhaustedAction) {
case WHEN_EXHAUSTED_GROW:
Object objectVar8 = objectLiteral9;
objecttimestamppairVar5 = new ObjectTimestampPair(objectVar8);
break;
case WHEN_EXHAUSTED_FAIL:
throw new NoSuchElementException();
case WHEN_EXHAUSTED_BLOCK:
try {
if (_maxWait <= 0) {
wait();
} else {
final long longVar10 = longLiteral11;
final long longVar12 = longLiteral13;
if (longVar12 > 0) {
wait(longVar12);
}
}
} catch (InterruptedException e) {
}
if (_maxWait > 0 && ((System.currentTimeMillis() - longVar1) >= _maxWait)) {
throw new NoSuchElementException(""Timeout waiting for idle object"");
} else {
continue;
}
default:
throw new IllegalArgumentException(""whenExhaustedAction "" + _whenExhaustedAction + "" not recognized."");
}
}
}
objectqueueVar7.incrementActiveCount();
}
try {
_factory.activateObject(key, objecttimestamppairVar5.value);
} catch (Exception e) {
try {
_factory.destroyObject(key, objecttimestamppairVar5.value);
synchronized (this) {
objectqueueVar7.decrementActiveCount();
}
} catch (Exception e2) {
}
if (booleanVar3) {
throw new NoSuchElementException(""Could not create a validated object, cause: "" + e.getMessage());
} else {
continue;
}
}
boolean booleanVar14 = booleanLiteral15;
try {
booleanVar14 = _testOnBorrow && !_factory.validateObject(key, objecttimestamppairVar5.value);
} catch (Exception e) {
}
if (booleanVar14) {
try {
_factory.destroyObject(key, objecttimestamppairVar5.value);
synchronized (this) {
objectqueueVar7.decrementActiveCount();
}
} catch (Exception e) {
}
if (booleanVar3) {
throw new NoSuchElementException(""Could not create a validated object"");
}
} else {
return objecttimestamppairVar5.value;
}
}
}"
16260,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,125,"} catch (Exception e) {
","public synchronized Object borrowObject() throws Exception {
assertOpen();
Object obj = null;
boolean newlyCreated = false;
while (null == obj) {
if (!_pool.empty()) {
obj = _pool.pop();
} else {
if (null == _factory) {
throw new NoSuchElementException();
} else {
newlyCreated = true;
obj = _factory.makeObject();
if (obj == null) {
throw new NoSuchElementException(""PoolableObjectFactory.makeObject() returned null."");
}
}
}
if (!newlyCreated && null != _factory && null != obj) {
try {
_factory.activateObject(obj);
} catch (Exception e) {
try {
_factory.destroyObject(obj);
} catch (Exception e2) {
} finally {
obj = null;
}
}
}
if (!newlyCreated && null != _factory && null != obj) {
boolean validated = false;
try {
validated = _factory.validateObject(obj);
} catch (Exception e) {
}
if (!validated) {
try {
_factory.destroyObject(obj);
} catch (Exception e) {
} finally {
obj = null;
}
}
}
}
_numActive++;
return obj;
}","public synchronized Object borrowObject() throws Exception {
assertOpen();
Object objectVar1 = objectLiteral2;
boolean booleanVar3 = booleanLiteral4;
while (null == objectVar1) {
if (!_pool.empty()) {
objectVar1 = _pool.pop();
} else {
if (null == _factory) {
throw new NoSuchElementException();
} else {
booleanVar3 = true;
objectVar1 = _factory.makeObject();
if (objectVar1 == null) {
throw new NoSuchElementException(""PoolableObjectFactory.makeObject() returned null."");
}
}
}
if (!booleanVar3 && null != _factory && null != objectVar1) {
try {
_factory.activateObject(objectVar1);
} catch (Exception e) {
try {
_factory.destroyObject(objectVar1);
} catch (Exception e2) {
} finally {
objectVar1 = null;
}
}
}
if (!booleanVar3 && null != _factory && null != objectVar1) {
boolean booleanVar5 = booleanLiteral4;
try {
booleanVar5 = _factory.validateObject(objectVar1);
} catch (Exception e) {
}
if (!booleanVar5) {
try {
_factory.destroyObject(objectVar1);
} catch (Exception e) {
} finally {
objectVar1 = null;
}
}
}
}
_numActive++;
return objectVar1;
}"
16272,DODGY_CODE,REC_CATCH_EXCEPTION,FP,pool,137,"} catch (Exception e) {
","public synchronized Object borrowObject(Object key) throws Exception {
assertOpen();
Stack stack = (Stack) (_pools.get(key));
if (null == stack) {
stack = new Stack();
stack.ensureCapacity(_initSleepingCapacity > _maxSleeping ? _maxSleeping : _initSleepingCapacity);
_pools.put(key, stack);
}
Object obj = null;
do {
boolean newlyMade = false;
// TODO: Don't use exception, test size.
if (!stack.empty()) {
obj = stack.pop();
_totIdle--;
} else {
if (null == _factory) {
throw new NoSuchElementException(""pools without a factory cannot create new objects as needed."");
} else {
obj = _factory.makeObject(key);
newlyMade = true;
}
}
if (!newlyMade && null != obj && null != _factory) {
try {
_factory.activateObject(key, obj);
if (!_factory.validateObject(key, obj)) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e2) {
}
obj = null;
}
} catch (Exception e) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e2) {
}
obj = null;
}
}
} while (obj == null);
incrementActiveCount(key);
return obj;
}","public synchronized Object borrowObject(Object key) throws Exception {
assertOpen();
Stack stackVar1 = stackLiteral2;
if (null == stackVar1) {
stackVar1 = new Stack();
stackVar1.ensureCapacity(_initSleepingCapacity > _maxSleeping ? _maxSleeping : _initSleepingCapacity);
_pools.put(key, stackVar1);
}
Object objectVar3 = objectLiteral4;
do {
boolean booleanVar5 = booleanLiteral6;
// TODO: Don't use exception, test size.
if (!stackVar1.empty()) {
objectVar3 = stackVar1.pop();
_totIdle--;
} else {
if (null == _factory) {
throw new NoSuchElementException(""pools without a factory cannot create new objects as needed."");
} else {
objectVar3 = _factory.makeObject(key);
booleanVar5 = true;
}
}
if (!booleanVar5 && null != objectVar3 && null != _factory) {
try {
_factory.activateObject(key, objectVar3);
if (!_factory.validateObject(key, objectVar3)) {
try {
_factory.destroyObject(key, objectVar3);
} catch (Exception e2) {
}
objectVar3 = null;
}
} catch (Exception e) {
try {
_factory.destroyObject(key, objectVar3);
} catch (Exception e2) {
}
objectVar3 = null;
}
}
} while (objectVar3 == null);
incrementActiveCount(key);
return objectVar3;
}"
16274,DODGY_CODE,UCF_USELESS_CONTROL_FLOW,FP,pool,139,"if (!underTest.endEvictionTest(idleObjects)) {
","@Override
public void evict() throws Exception {
assertOpen();
if (!idleObjects.isEmpty()) {
PooledObject<T> underTest = null;
final EvictionPolicy<T> evictionPolicy = getEvictionPolicy();
synchronized (evictionLock) {
final EvictionConfig evictionConfig = new EvictionConfig(getMinEvictableIdleTimeMillis(), getSoftMinEvictableIdleTimeMillis(), getMinIdle());
final boolean testWhileIdle = getTestWhileIdle();
for (int i = 0, m = getNumTests(); i < m; i++) {
if (evictionIterator == null || !evictionIterator.hasNext()) {
evictionIterator = new EvictionIterator(idleObjects);
}
if (!evictionIterator.hasNext()) {
return;
}
try {
underTest = evictionIterator.next();
} catch (final NoSuchElementException nsee) {
i--;
evictionIterator = null;
continue;
}
if (!underTest.startEvictionTest()) {
i--;
continue;
}
boolean evict;
try {
evict = evictionPolicy.evict(evictionConfig, underTest, idleObjects.size());
} catch (final Throwable t) {
PoolUtils.checkRethrow(t);
swallowException(new Exception(t));
evict = false;
}
if (evict) {
destroy(underTest, DestroyMode.NORMAL);
destroyedByEvictorCount.incrementAndGet();
} else {
if (testWhileIdle) {
boolean active = false;
try {
factory.activateObject(underTest);
active = true;
} catch (final Exception e) {
destroy(underTest, DestroyMode.NORMAL);
destroyedByEvictorCount.incrementAndGet();
}
if (active) {
if (!factory.validateObject(underTest)) {
destroy(underTest, DestroyMode.NORMAL);
destroyedByEvictorCount.incrementAndGet();
} else {
try {
factory.passivateObject(underTest);
} catch (final Exception e) {
destroy(underTest, DestroyMode.NORMAL);
destroyedByEvictorCount.incrementAndGet();
}
}
}
}
if (!underTest.endEvictionTest(idleObjects)) {
}
}
}
}
}
final AbandonedConfig ac = this.abandonedConfig;
if (ac != null && ac.getRemoveAbandonedOnMaintenance()) {
removeAbandoned(ac);
}
}","@Override
public void evict() throws Exception {
assertOpen();
if (!idleObjects.isEmpty()) {
PooledObject<T> pooledobject<t>Var1 = pooledobject<t>Literal2;
final EvictionPolicy<T> evictionpolicy<t>Var3 = evictionpolicy<t>Literal4;
synchronized (evictionLock) {
final EvictionConfig evictionconfigVar5 = evictionconfigLiteral6;
final boolean booleanVar7 = booleanLiteral8;
for (int intVar18 = intLiteral19, intVar20 = intLiteral21; intVar9 < intLiteral1; intVar9++) {
if (evictionIterator == null || !evictionIterator.hasNext()) {
evictionIterator = new EvictionIterator(idleObjects);
}
if (!evictionIterator.hasNext()) {
return;
}
try {
pooledobject<t>Var1 = evictionIterator.next();
} catch (final NoSuchElementException nsee) {
intVar9--;
evictionIterator = null;
continue;
}
if (!pooledobject<t>Var1.startEvictionTest()) {
intVar9--;
continue;
}
boolean booleanVar13;
try {
booleanVar13 = evictionpolicy<t>Var3.evict(evictionconfigVar5, pooledobject<t>Var1, idleObjects.size());
} catch (final Throwable t) {
PoolUtils.checkRethrow(t);
swallowException(new Exception(t));
booleanVar13 = false;
}
if (booleanVar13) {
destroy(pooledobject<t>Var1, DestroyMode.NORMAL);
destroyedByEvictorCount.incrementAndGet();
} else {
if (booleanVar7) {
boolean booleanVar14 = booleanLiteral15;
try {
factory.activateObject(pooledobject<t>Var1);
booleanVar14 = true;
} catch (final Exception e) {
destroy(pooledobject<t>Var1, DestroyMode.NORMAL);
destroyedByEvictorCount.incrementAndGet();
}
if (booleanVar14) {
if (!factory.validateObject(pooledobject<t>Var1)) {
destroy(pooledobject<t>Var1, DestroyMode.NORMAL);
destroyedByEvictorCount.incrementAndGet();
} else {
try {
factory.passivateObject(pooledobject<t>Var1);
} catch (final Exception e) {
destroy(pooledobject<t>Var1, DestroyMode.NORMAL);
destroyedByEvictorCount.incrementAndGet();
}
}
}
}
if (!pooledobject<t>Var1.endEvictionTest(idleObjects)) {
}
}
}
}
}
final AbandonedConfig abandonedconfigVar16 = abandonedconfigLiteral17;
if (abandonedconfigVar16 != null && abandonedconfigVar16.getRemoveAbandonedOnMaintenance()) {
removeAbandoned(abandonedconfigVar16);
}
}"
16279,Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,pool,144,private long _maxWait = GenericObjectPool.DEFAULT_MAX_WAIT;,private long _maxWait = GenericObjectPool.DEFAULT_MAX_WAIT;,private long longVar1 = longLiteral2;
16286,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,151,"} catch (Exception e) {
","@Override
public void clear(K key) {
ObjectDeque<T> objectDeque = poolMap.get(key);
if (objectDeque == null) {
return;
}
LinkedBlockingDeque<PooledObject<T>> idleObjects = objectDeque.getIdleObjects();
PooledObject<T> p = idleObjects.poll();
while (p != null) {
try {
destroy(key, p);
} catch (Exception e) {
}
p = idleObjects.poll();
}
}","@Override
public void clear(K key) {
ObjectDeque<T> objectdeque<t>Var1 = objectdeque<t>Literal2;
if (objectdeque<t>Var1 == null) {
return;
}
LinkedBlockingDeque<PooledObject<T>> linkedblockingdeque<pooledobject<t>>Var3 = linkedblockingdeque<pooledobject<t>>Literal4;
PooledObject<T> pooledobject<t>Var5 = pooledobject<t>Literal6;
while (pooledobject<t>Var5 != null) {
try {
destroy(key, pooledobject<t>Var5);
} catch (Exception e) {
}
pooledobject<t>Var5 = linkedblockingdeque<pooledobject<t>>Var3.poll();
}
}"
16291,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,156,"} catch (Exception e) {
","public void invalidateObject(final V obj) {
try {
keyedPool.invalidateObject(key, obj);
} catch (Exception e) {
}
}","public void invalidateObject(final V obj) {
try {
keyedPool.invalidateObject(key, obj);
} catch (Exception e) {
}
}"
16300,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,165,"} catch (Exception e) {
","public synchronized void invalidateObject(Object obj) throws Exception {
_numActive--;
if (null != _factory) {
try {
_factory.destroyObject(obj);
} catch (Exception e) {
}
}
notifyAll();
}","public synchronized void invalidateObject(Object obj) throws Exception {
_numActive--;
if (null != _factory) {
try {
_factory.destroyObject(obj);
} catch (Exception e) {
}
}
notifyAll();
}"
16322,Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,pool,187,private int maxSleeping;,private int maxSleeping;,private int intVar1;
16338,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,203,"} catch (Exception e) {
","@Override
public void run() {
try {
evict();
} catch (Exception e) {
} catch (OutOfMemoryError oome) {
oome.printStackTrace(System.err);
}
try {
ensureMinIdle();
} catch (Exception e) {
}
}","@Override
public void run() {
try {
evict();
} catch (Exception e) {
} catch (OutOfMemoryError oome) {
oome.printStackTrace(System.err);
}
try {
ensureMinIdle();
} catch (Exception e) {
}
}"
16347,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,212,"} catch (Exception e) {
","public void returnObject(final T obj) {
if (type.isInstance(obj)) {
try {
pool.returnObject(obj);
} catch (Exception e) {
}
} else {
throw new ClassCastException(""Returned object is not of type: "" + type.getName() + "" was: "" + obj);
}
}","public void returnObject(final T obj) {
if (type.isInstance(obj)) {
try {
pool.returnObject(obj);
} catch (Exception e) {
}
} else {
throw new ClassCastException(""Returned object is not of type: "" + type.getName() + "" was: "" + obj);
}
}"
16348,DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,FP,pool,213,"if (objectDeque != null) {
","public T borrowObject(K key, long borrowMaxWait) throws Exception {
assertOpen();
PooledObject<T> p = null;
WhenExhaustedAction whenExhaustedAction = _whenExhaustedAction;
boolean create;
ObjectDeque<T> objectDeque = register(key);
try {
while (p == null) {
create = false;
if (whenExhaustedAction == WhenExhaustedAction.FAIL) {
if (objectDeque != null) {
p = objectDeque.getIdleObjects().pollFirst();
}
if (p == null) {
create = true;
p = create(key);
}
if (p == null) {
throw new NoSuchElementException(""Pool exhausted"");
}
if (!p.allocate()) {
p = null;
}
} else if (whenExhaustedAction == WhenExhaustedAction.BLOCK) {
if (objectDeque != null) {
p = objectDeque.getIdleObjects().pollFirst();
}
if (p == null) {
create = true;
p = create(key);
}
if (p == null && objectDeque != null) {
if (borrowMaxWait < 1) {
p = objectDeque.getIdleObjects().takeFirst();
} else {
p = objectDeque.getIdleObjects().pollFirst(borrowMaxWait, TimeUnit.MILLISECONDS);
}
}
if (p == null) {
throw new NoSuchElementException(""Timeout waiting for idle object"");
}
if (!p.allocate()) {
p = null;
}
}
if (p != null) {
try {
_factory.activateObject(key, p.getObject());
} catch (Exception e) {
try {
destroy(key, p, true);
} catch (Exception e1) {
}
p = null;
if (create) {
NoSuchElementException nsee = new NoSuchElementException(""Unable to activate object"");
nsee.initCause(e);
throw nsee;
}
}
if (p != null && getTestOnBorrow()) {
boolean validate = false;
Throwable validationThrowable = null;
try {
validate = _factory.validateObject(key, p.getObject());
} catch (Throwable t) {
PoolUtils.checkRethrow(t);
}
if (!validate) {
try {
destroy(key, p, true);
} catch (Exception e) {
}
p = null;
if (create) {
NoSuchElementException nsee = new NoSuchElementException(""Unable to validate object"");
nsee.initCause(validationThrowable);
throw nsee;
}
}
}
}
}
} finally {
deregister(key);
}
return p.getObject();
}","public T borrowObject(K key, long borrowMaxWait) throws Exception {
assertOpen();
PooledObject<T> pooledobject<t>Var1 = pooledobject<t>Literal2;
WhenExhaustedAction whenexhaustedactionVar3 = whenexhaustedactionLiteral4;
boolean booleanVar5;
ObjectDeque<T> objectdeque<t>Var6 = objectdeque<t>Literal7;
try {
while (pooledobject<t>Var1 == null) {
booleanVar5 = false;
if (whenexhaustedactionVar3 == WhenExhaustedAction.FAIL) {
if (objectdeque<t>Var6 != null) {
pooledobject<t>Var1 = objectdeque<t>Var6.getIdleObjects().pollFirst();
}
if (pooledobject<t>Var1 == null) {
booleanVar5 = true;
pooledobject<t>Var1 = create(key);
}
if (pooledobject<t>Var1 == null) {
throw new NoSuchElementException(""Pool exhausted"");
}
if (!pooledobject<t>Var1.allocate()) {
pooledobject<t>Var1 = null;
}
} else if (whenexhaustedactionVar3 == WhenExhaustedAction.BLOCK) {
if (objectdeque<t>Var6 != null) {
pooledobject<t>Var1 = objectdeque<t>Var6.getIdleObjects().pollFirst();
}
if (pooledobject<t>Var1 == null) {
booleanVar5 = true;
pooledobject<t>Var1 = create(key);
}
if (pooledobject<t>Var1 == null && objectdeque<t>Var6 != null) {
if (borrowMaxWait < 1) {
pooledobject<t>Var1 = objectdeque<t>Var6.getIdleObjects().takeFirst();
} else {
pooledobject<t>Var1 = objectdeque<t>Var6.getIdleObjects().pollFirst(borrowMaxWait, TimeUnit.MILLISECONDS);
}
}
if (pooledobject<t>Var1 == null) {
throw new NoSuchElementException(""Timeout waiting for idle object"");
}
if (!pooledobject<t>Var1.allocate()) {
pooledobject<t>Var1 = null;
}
}
if (pooledobject<t>Var1 != null) {
try {
_factory.activateObject(key, pooledobject<t>Var1.getObject());
} catch (Exception e) {
try {
destroy(key, pooledobject<t>Var1, true);
} catch (Exception e1) {
}
pooledobject<t>Var1 = null;
if (booleanVar5) {
NoSuchElementException nosuchelementexceptionVar8 = nosuchelementexceptionLiteral9;
nosuchelementexceptionVar8.initCause(e);
throw nosuchelementexceptionVar8;
}
}
if (pooledobject<t>Var1 != null && getTestOnBorrow()) {
boolean booleanVar10 = booleanLiteral11;
Throwable throwableVar12 = pooledobject<t>Literal2;
try {
booleanVar10 = _factory.validateObject(key, pooledobject<t>Var1.getObject());
} catch (Throwable t) {
PoolUtils.checkRethrow(t);
}
if (!booleanVar10) {
try {
destroy(key, pooledobject<t>Var1, true);
} catch (Exception e) {
}
pooledobject<t>Var1 = null;
if (booleanVar5) {
NoSuchElementException nosuchelementexceptionVar8 = nosuchelementexceptionLiteral13;
nosuchelementexceptionVar8.initCause(throwableVar12);
throw nosuchelementexceptionVar8;
}
}
}
}
}
} finally {
deregister(key);
}
return pooledobject<t>Var1.getObject();
}"
16354,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,219,"} catch (Exception e) {
","public void invalidateObject(final Object key, final Object obj) {
if (type.isInstance(obj)) {
try {
keyedPool.invalidateObject(key, obj);
} catch (Exception e) {
}
} else {
throw new ClassCastException(""Invalidated object for key: "" + key + "" is not of type: "" + type.getName() + "" was: "" + obj);
}
}","public void invalidateObject(final Object key, final Object obj) {
if (type.isInstance(obj)) {
try {
keyedPool.invalidateObject(key, obj);
} catch (Exception e) {
}
} else {
throw new ClassCastException(""Invalidated object for key: "" + key + "" is not of type: "" + type.getName() + "" was: "" + obj);
}
}"
16361,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,226,"} catch (final Exception e1) {
","public T borrowObject(final K key, final long borrowMaxWaitMillis) throws Exception {
assertOpen();
PooledObject<T> p = null;
final boolean blockWhenExhausted = getBlockWhenExhausted();
boolean create;
final long waitTime = System.currentTimeMillis();
final ObjectDeque<T> objectDeque = register(key);
try {
while (p == null) {
create = false;
p = objectDeque.getIdleObjects().pollFirst();
if (p == null) {
p = create(key);
if (p != null) {
create = true;
}
}
if (blockWhenExhausted) {
if (p == null) {
if (borrowMaxWaitMillis < 0) {
p = objectDeque.getIdleObjects().takeFirst();
} else {
p = objectDeque.getIdleObjects().pollFirst(borrowMaxWaitMillis, TimeUnit.MILLISECONDS);
}
}
if (p == null) {
throw new NoSuchElementException(""Timeout waiting for idle object"");
}
} else {
if (p == null) {
throw new NoSuchElementException(""Pool exhausted"");
}
}
if (!p.allocate()) {
p = null;
}
if (p != null) {
try {
factory.activateObject(key, p);
} catch (final Exception e) {
try {
destroy(key, p, true);
} catch (final Exception e1) {
}
p = null;
if (create) {
final NoSuchElementException nsee = new NoSuchElementException(""Unable to activate object"");
nsee.initCause(e);
throw nsee;
}
}
if (p != null && (getTestOnBorrow() || create && getTestOnCreate())) {
boolean validate = false;
Throwable validationThrowable = null;
try {
validate = factory.validateObject(key, p);
} catch (final Throwable t) {
PoolUtils.checkRethrow(t);
validationThrowable = t;
}
if (!validate) {
try {
destroy(key, p, true);
destroyedByBorrowValidationCount.incrementAndGet();
} catch (final Exception e) {
}
p = null;
if (create) {
final NoSuchElementException nsee = new NoSuchElementException(""Unable to validate object"");
nsee.initCause(validationThrowable);
throw nsee;
}
}
}
}
}
} finally {
deregister(key);
}
updateStatsBorrow(p, System.currentTimeMillis() - waitTime);
return p.getObject();
}","public T borrowObject(final K key, final long borrowMaxWaitMillis) throws Exception {
assertOpen();
PooledObject<T> pooledobject<t>Var1 = pooledobject<t>Literal2;
final boolean booleanVar3 = booleanLiteral4;
boolean booleanVar5;
final long longVar6 = longLiteral7;
final ObjectDeque<T> objectdeque<t>Var8 = objectdeque<t>Literal9;
try {
while (pooledobject<t>Var1 == null) {
booleanVar5 = false;
pooledobject<t>Var1 = objectdeque<t>Var8.getIdleObjects().pollFirst();
if (pooledobject<t>Var1 == null) {
pooledobject<t>Var1 = create(key);
if (pooledobject<t>Var1 != null) {
booleanVar5 = true;
}
}
if (booleanVar3) {
if (pooledobject<t>Var1 == null) {
if (borrowMaxWaitMillis < 0) {
pooledobject<t>Var1 = objectdeque<t>Var8.getIdleObjects().takeFirst();
} else {
pooledobject<t>Var1 = objectdeque<t>Var8.getIdleObjects().pollFirst(borrowMaxWaitMillis, TimeUnit.MILLISECONDS);
}
}
if (pooledobject<t>Var1 == null) {
throw new NoSuchElementException(""Timeout waiting for idle object"");
}
} else {
if (pooledobject<t>Var1 == null) {
throw new NoSuchElementException(""Pool exhausted"");
}
}
if (!pooledobject<t>Var1.allocate()) {
pooledobject<t>Var1 = null;
}
if (pooledobject<t>Var1 != null) {
try {
factory.activateObject(key, pooledobject<t>Var1);
} catch (final Exception e) {
try {
destroy(key, pooledobject<t>Var1, true);
} catch (final Exception e1) {
}
pooledobject<t>Var1 = null;
if (booleanVar5) {
final NoSuchElementException nosuchelementexceptionVar10 = nosuchelementexceptionLiteral11;
nosuchelementexceptionVar10.initCause(e);
throw nosuchelementexceptionVar10;
}
}
if (pooledobject<t>Var1 != null && (getTestOnBorrow() || booleanVar5 && getTestOnCreate())) {
boolean booleanVar12 = booleanLiteral13;
Throwable throwableVar14 = pooledobject<t>Literal2;
try {
booleanVar12 = factory.validateObject(key, pooledobject<t>Var1);
} catch (final Throwable t) {
PoolUtils.checkRethrow(t);
throwableVar14 = t;
}
if (!booleanVar12) {
try {
destroy(key, pooledobject<t>Var1, true);
destroyedByBorrowValidationCount.incrementAndGet();
} catch (final Exception e) {
}
pooledobject<t>Var1 = null;
if (booleanVar5) {
final NoSuchElementException nosuchelementexceptionVar10 = nosuchelementexceptionLiteral15;
nosuchelementexceptionVar10.initCause(throwableVar14);
throw nosuchelementexceptionVar10;
}
}
}
}
}
} finally {
deregister(key);
}
updateStatsBorrow(pooledobject<t>Var1, System.currentTimeMillis() - longVar6);
return pooledobject<t>Var1.getObject();
}"
16378,DODGY_CODE,UCF_USELESS_CONTROL_FLOW,FP,pool,243,"if (!underTest.endEvictionTest(idleObjects)) {
","@Override
public void evict() throws Exception {
assertOpen();
if (getNumIdle() == 0) {
return;
}
PooledObject<T> underTest = null;
final EvictionPolicy<T> evictionPolicy = getEvictionPolicy();
synchronized (evictionLock) {
final EvictionConfig evictionConfig = new EvictionConfig(getMinEvictableIdleTime(), getSoftMinEvictableIdleTime(), getMinIdlePerKey());
final boolean testWhileIdle = getTestWhileIdle();
for (int i = 0, m = getNumTests(); i < m; i++) {
if (evictionIterator == null || !evictionIterator.hasNext()) {
if (evictionKeyIterator == null || !evictionKeyIterator.hasNext()) {
final List<K> keyCopy = new ArrayList<>();
final Lock readLock = keyLock.readLock();
readLock.lock();
try {
keyCopy.addAll(poolKeyList);
} finally {
readLock.unlock();
}
evictionKeyIterator = keyCopy.iterator();
}
while (evictionKeyIterator.hasNext()) {
evictionKey = evictionKeyIterator.next();
final ObjectDeque<T> objectDeque = poolMap.get(evictionKey);
if (objectDeque == null) {
continue;
}
final Deque<PooledObject<T>> idleObjects = objectDeque.getIdleObjects();
evictionIterator = new EvictionIterator(idleObjects);
if (evictionIterator.hasNext()) {
break;
}
evictionIterator = null;
}
}
if (evictionIterator == null) {
return;
}
final Deque<PooledObject<T>> idleObjects;
try {
underTest = evictionIterator.next();
idleObjects = evictionIterator.getIdleObjects();
} catch (final NoSuchElementException nsee) {
i--;
evictionIterator = null;
continue;
}
if (!underTest.startEvictionTest()) {
i--;
continue;
}
boolean evict;
try {
evict = evictionPolicy.evict(evictionConfig, underTest, poolMap.get(evictionKey).getIdleObjects().size());
} catch (final Throwable t) {
PoolUtils.checkRethrow(t);
swallowException(new Exception(t));
evict = false;
}
if (evict) {
destroy(evictionKey, underTest, true, DestroyMode.NORMAL);
destroyedByEvictorCount.incrementAndGet();
} else {
if (testWhileIdle) {
boolean active = false;
try {
factory.activateObject(evictionKey, underTest);
active = true;
} catch (final Exception e) {
destroy(evictionKey, underTest, true, DestroyMode.NORMAL);
destroyedByEvictorCount.incrementAndGet();
}
if (active) {
if (!factory.validateObject(evictionKey, underTest)) {
destroy(evictionKey, underTest, true, DestroyMode.NORMAL);
destroyedByEvictorCount.incrementAndGet();
} else {
try {
factory.passivateObject(evictionKey, underTest);
} catch (final Exception e) {
destroy(evictionKey, underTest, true, DestroyMode.NORMAL);
destroyedByEvictorCount.incrementAndGet();
}
}
}
}
if (!underTest.endEvictionTest(idleObjects)) {
}
}
}
}
}","@Override
public void evict() throws Exception {
assertOpen();
if (getNumIdle() == 0) {
return;
}
PooledObject<T> pooledobject<t>Var1 = pooledobject<t>Literal2;
final EvictionPolicy<T> evictionpolicy<t>Var3 = evictionpolicy<t>Literal4;
synchronized (evictionLock) {
final EvictionConfig evictionconfigVar5 = evictionconfigLiteral6;
final boolean booleanVar7 = booleanLiteral8;
for (int intVar24 = intLiteral25, intVar26 = intLiteral27; intVar9 < intLiteral1; intVar9++) {
if (evictionIterator == null || !evictionIterator.hasNext()) {
if (evictionKeyIterator == null || !evictionKeyIterator.hasNext()) {
final List<K> list<k>Var13 = list<k>Literal14;
final Lock lockVar15 = lockLiteral16;
lockVar15.lock();
try {
list<k>Var13.addAll(poolKeyList);
} finally {
lockVar15.unlock();
}
evictionKeyIterator = list<k>Var13.iterator();
}
while (evictionKeyIterator.hasNext()) {
evictionKey = evictionKeyIterator.next();
final ObjectDeque<T> objectdeque<t>Var17 = objectdeque<t>Literal18;
if (objectdeque<t>Var17 == null) {
continue;
}
final Deque<PooledObject<T>> deque<pooledobject<t>>Var19 = deque<pooledobject<t>>Literal20;
evictionIterator = new EvictionIterator(deque<pooledobject<t>>Var19);
if (evictionIterator.hasNext()) {
break;
}
evictionIterator = null;
}
}
if (evictionIterator == null) {
return;
}
final Deque<PooledObject<T>> deque<pooledobject<t>>Var19;
try {
pooledobject<t>Var1 = evictionIterator.next();
deque<pooledobject<t>>Var19 = evictionIterator.getIdleObjects();
} catch (final NoSuchElementException nsee) {
intVar9--;
evictionIterator = null;
continue;
}
if (!pooledobject<t>Var1.startEvictionTest()) {
intVar9--;
continue;
}
boolean booleanVar21;
try {
booleanVar21 = evictionpolicy<t>Var3.evict(evictionconfigVar5, pooledobject<t>Var1, poolMap.get(evictionKey).getIdleObjects().size());
} catch (final Throwable t) {
PoolUtils.checkRethrow(t);
swallowException(new Exception(t));
booleanVar21 = false;
}
if (booleanVar21) {
destroy(evictionKey, pooledobject<t>Var1, true, DestroyMode.NORMAL);
destroyedByEvictorCount.incrementAndGet();
} else {
if (booleanVar7) {
boolean booleanVar22 = booleanLiteral23;
try {
factory.activateObject(evictionKey, pooledobject<t>Var1);
booleanVar22 = true;
} catch (final Exception e) {
destroy(evictionKey, pooledobject<t>Var1, true, DestroyMode.NORMAL);
destroyedByEvictorCount.incrementAndGet();
}
if (booleanVar22) {
if (!factory.validateObject(evictionKey, pooledobject<t>Var1)) {
destroy(evictionKey, pooledobject<t>Var1, true, DestroyMode.NORMAL);
destroyedByEvictorCount.incrementAndGet();
} else {
try {
factory.passivateObject(evictionKey, pooledobject<t>Var1);
} catch (final Exception e) {
destroy(evictionKey, pooledobject<t>Var1, true, DestroyMode.NORMAL);
destroyedByEvictorCount.incrementAndGet();
}
}
}
}
if (!pooledobject<t>Var1.endEvictionTest(deque<pooledobject<t>>Var19)) {
}
}
}
}
}"
16387,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,252,"} catch (Exception e) {
","public void invalidateObject(final T obj) {
synchronized (lock) {
try {
pool.invalidateObject(obj);
} catch (Exception e) {
}
}
}","public void invalidateObject(final T obj) {
synchronized (lock) {
try {
pool.invalidateObject(obj);
} catch (Exception e) {
}
}
}"
16391,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,256,"} catch (Exception e1) {
","@Override
public T borrowObject(K key) throws Exception {
assertOpen();
PooledObject<T> p = null;
WhenExhaustedAction whenExhaustedAction = _whenExhaustedAction;
long maxWait = _maxWait;
boolean create;
ObjectDeque<T> objectDeque = poolMap.get(key);
while (p == null) {
create = false;
if (whenExhaustedAction == WhenExhaustedAction.FAIL) {
if (objectDeque != null) {
p = objectDeque.getIdleObjects().pollFirst();
}
if (p == null) {
create = true;
p = create(key, false);
}
if (p == null) {
throw new NoSuchElementException(""Pool exhausted"");
}
if (!p.allocate()) {
p = null;
}
} else if (whenExhaustedAction == WhenExhaustedAction.BLOCK) {
if (objectDeque != null) {
p = objectDeque.getIdleObjects().pollFirst();
}
if (p == null) {
create = true;
p = create(key, false);
}
if (p == null && objectDeque != null) {
if (maxWait < 1) {
p = objectDeque.getIdleObjects().takeFirst();
} else {
p = objectDeque.getIdleObjects().pollFirst(maxWait, TimeUnit.MILLISECONDS);
}
}
if (p == null) {
throw new NoSuchElementException(""Timeout waiting for idle object"");
}
if (!p.allocate()) {
p = null;
}
} else if (whenExhaustedAction == WhenExhaustedAction.GROW) {
if (objectDeque != null) {
p = objectDeque.getIdleObjects().pollFirst();
}
if (p == null) {
create = true;
p = create(key, true);
}
if (p != null && !p.allocate()) {
p = null;
}
}
if (p != null) {
try {
_factory.activateObject(key, p.getObject());
} catch (Exception e) {
try {
destroy(key, p);
} catch (Exception e1) {
}
p = null;
if (create) {
NoSuchElementException nsee = new NoSuchElementException(""Unable to activate object"");
nsee.initCause(e);
throw nsee;
}
}
if (p != null && getTestOnBorrow()) {
boolean validate = false;
Throwable validationThrowable = null;
try {
validate = _factory.validateObject(key, p.getObject());
} catch (Throwable t) {
PoolUtils.checkRethrow(t);
}
if (!validate) {
try {
destroy(key, p);
} catch (Exception e) {
}
p = null;
if (create) {
NoSuchElementException nsee = new NoSuchElementException(""Unable to validate object"");
nsee.initCause(validationThrowable);
throw nsee;
}
}
}
}
}
return p.getObject();
}","@Override
public T borrowObject(K key) throws Exception {
assertOpen();
PooledObject<T> pooledobject<t>Var1 = pooledobject<t>Literal2;
WhenExhaustedAction whenexhaustedactionVar3 = whenexhaustedactionLiteral4;
long longVar5 = longLiteral6;
boolean booleanVar7;
ObjectDeque<T> objectdeque<t>Var8 = objectdeque<t>Literal9;
while (pooledobject<t>Var1 == null) {
booleanVar7 = false;
if (whenexhaustedactionVar3 == WhenExhaustedAction.FAIL) {
if (objectdeque<t>Var8 != null) {
pooledobject<t>Var1 = objectdeque<t>Var8.getIdleObjects().pollFirst();
}
if (pooledobject<t>Var1 == null) {
booleanVar7 = true;
pooledobject<t>Var1 = create(key, false);
}
if (pooledobject<t>Var1 == null) {
throw new NoSuchElementException(""Pool exhausted"");
}
if (!pooledobject<t>Var1.allocate()) {
pooledobject<t>Var1 = null;
}
} else if (whenexhaustedactionVar3 == WhenExhaustedAction.BLOCK) {
if (objectdeque<t>Var8 != null) {
pooledobject<t>Var1 = objectdeque<t>Var8.getIdleObjects().pollFirst();
}
if (pooledobject<t>Var1 == null) {
booleanVar7 = true;
pooledobject<t>Var1 = create(key, false);
}
if (pooledobject<t>Var1 == null && objectdeque<t>Var8 != null) {
if (longVar5 < 1) {
pooledobject<t>Var1 = objectdeque<t>Var8.getIdleObjects().takeFirst();
} else {
pooledobject<t>Var1 = objectdeque<t>Var8.getIdleObjects().pollFirst(longVar5, TimeUnit.MILLISECONDS);
}
}
if (pooledobject<t>Var1 == null) {
throw new NoSuchElementException(""Timeout waiting for idle object"");
}
if (!pooledobject<t>Var1.allocate()) {
pooledobject<t>Var1 = null;
}
} else if (whenexhaustedactionVar3 == WhenExhaustedAction.GROW) {
if (objectdeque<t>Var8 != null) {
pooledobject<t>Var1 = objectdeque<t>Var8.getIdleObjects().pollFirst();
}
if (pooledobject<t>Var1 == null) {
booleanVar7 = true;
pooledobject<t>Var1 = create(key, true);
}
if (pooledobject<t>Var1 != null && !pooledobject<t>Var1.allocate()) {
pooledobject<t>Var1 = null;
}
}
if (pooledobject<t>Var1 != null) {
try {
_factory.activateObject(key, pooledobject<t>Var1.getObject());
} catch (Exception e) {
try {
destroy(key, pooledobject<t>Var1);
} catch (Exception e1) {
}
pooledobject<t>Var1 = null;
if (booleanVar7) {
NoSuchElementException nosuchelementexceptionVar10 = nosuchelementexceptionLiteral11;
nosuchelementexceptionVar10.initCause(e);
throw nosuchelementexceptionVar10;
}
}
if (pooledobject<t>Var1 != null && getTestOnBorrow()) {
boolean booleanVar12 = booleanLiteral13;
Throwable throwableVar14 = pooledobject<t>Literal2;
try {
booleanVar12 = _factory.validateObject(key, pooledobject<t>Var1.getObject());
} catch (Throwable t) {
PoolUtils.checkRethrow(t);
}
if (!booleanVar12) {
try {
destroy(key, pooledobject<t>Var1);
} catch (Exception e) {
}
pooledobject<t>Var1 = null;
if (booleanVar7) {
NoSuchElementException nosuchelementexceptionVar10 = nosuchelementexceptionLiteral15;
nosuchelementexceptionVar10.initCause(throwableVar14);
throw nosuchelementexceptionVar10;
}
}
}
}
}
return pooledobject<t>Var1.getObject();
}"
16392,DODGY_CODE,REC_CATCH_EXCEPTION,FP,pool,257,"} catch (Exception e2) {
","public Object borrowObject(Object key) throws Exception {
long starttime = System.currentTimeMillis();
boolean newlyCreated = false;
for (; ; ) {
ObjectTimestampPair pair = null;
ObjectQueue pool = null;
synchronized (this) {
assertOpen();
pool = (ObjectQueue) (_poolMap.get(key));
if (null == pool) {
pool = new ObjectQueue();
_poolMap.put(key, pool);
_poolList.add(key);
}
try {
pair = (ObjectTimestampPair) (pool.queue.removeFirst());
if (null != pair) {
_totalIdle--;
}
} catch (NoSuchElementException e) {
}
if (null == pair) {
if ((_maxTotal > 0) && (_totalActive + _totalIdle >= _maxTotal)) {
clearOldest();
}
if ((_maxActive < 0 || pool.activeCount < _maxActive) && (_maxTotal < 0 || _totalActive + _totalIdle < _maxTotal)) {
Object obj = _factory.makeObject(key);
pair = new ObjectTimestampPair(obj);
newlyCreated = true;
} else {
switch(_whenExhaustedAction) {
case WHEN_EXHAUSTED_GROW:
Object obj = _factory.makeObject(key);
pair = new ObjectTimestampPair(obj);
break;
case WHEN_EXHAUSTED_FAIL:
throw new NoSuchElementException();
case WHEN_EXHAUSTED_BLOCK:
try {
if (_maxWait <= 0) {
wait();
} else {
final long elapsed = (System.currentTimeMillis() - starttime);
final long waitTime = _maxWait - elapsed;
if (waitTime > 0) {
wait(waitTime);
}
}
} catch (InterruptedException e) {
}
if (_maxWait > 0 && ((System.currentTimeMillis() - starttime) >= _maxWait)) {
throw new NoSuchElementException(""Timeout waiting for idle object"");
} else {
continue;
}
default:
throw new IllegalArgumentException(""whenExhaustedAction "" + _whenExhaustedAction + "" not recognized."");
}
}
}
pool.incrementActiveCount();
}
try {
_factory.activateObject(key, pair.value);
} catch (Exception e) {
try {
_factory.destroyObject(key, pair.value);
synchronized (this) {
pool.decrementActiveCount();
}
} catch (Exception e2) {
}
if (newlyCreated) {
throw new NoSuchElementException(""Could not create a validated object, cause: "" + e.getMessage());
} else {
continue;
}
}
boolean invalid = true;
try {
invalid = _testOnBorrow && !_factory.validateObject(key, pair.value);
} catch (Exception e) {
}
if (invalid) {
try {
_factory.destroyObject(key, pair.value);
synchronized (this) {
pool.decrementActiveCount();
}
} catch (Exception e) {
}
if (newlyCreated) {
throw new NoSuchElementException(""Could not create a validated object"");
}
} else {
return pair.value;
}
}
}","public Object borrowObject(Object key) throws Exception {
long longVar1 = longLiteral2;
boolean booleanVar3 = booleanLiteral4;
for (; ; ) {
ObjectTimestampPair objecttimestamppairVar5 = objecttimestamppairLiteral6;
ObjectQueue objectqueueVar7 = objecttimestamppairLiteral6;
synchronized (this) {
assertOpen();
objectqueueVar7 = (ObjectQueue) (_poolMap.get(key));
if (null == objectqueueVar7) {
objectqueueVar7 = new ObjectQueue();
_poolMap.put(key, objectqueueVar7);
_poolList.add(key);
}
try {
objecttimestamppairVar5 = (ObjectTimestampPair) (objectqueueVar7.queue.removeFirst());
if (null != objecttimestamppairVar5) {
_totalIdle--;
}
} catch (NoSuchElementException e) {
}
if (null == objecttimestamppairVar5) {
if ((_maxTotal > 0) && (_totalActive + _totalIdle >= _maxTotal)) {
clearOldest();
}
if ((_maxActive < 0 || objectqueueVar7.activeCount < _maxActive) && (_maxTotal < 0 || _totalActive + _totalIdle < _maxTotal)) {
Object objectVar8 = objectLiteral9;
objecttimestamppairVar5 = new ObjectTimestampPair(objectVar8);
booleanVar3 = true;
} else {
switch(_whenExhaustedAction) {
case WHEN_EXHAUSTED_GROW:
Object objectVar8 = objectLiteral9;
objecttimestamppairVar5 = new ObjectTimestampPair(objectVar8);
break;
case WHEN_EXHAUSTED_FAIL:
throw new NoSuchElementException();
case WHEN_EXHAUSTED_BLOCK:
try {
if (_maxWait <= 0) {
wait();
} else {
final long longVar10 = longLiteral11;
final long longVar12 = longLiteral13;
if (longVar12 > 0) {
wait(longVar12);
}
}
} catch (InterruptedException e) {
}
if (_maxWait > 0 && ((System.currentTimeMillis() - longVar1) >= _maxWait)) {
throw new NoSuchElementException(""Timeout waiting for idle object"");
} else {
continue;
}
default:
throw new IllegalArgumentException(""whenExhaustedAction "" + _whenExhaustedAction + "" not recognized."");
}
}
}
objectqueueVar7.incrementActiveCount();
}
try {
_factory.activateObject(key, objecttimestamppairVar5.value);
} catch (Exception e) {
try {
_factory.destroyObject(key, objecttimestamppairVar5.value);
synchronized (this) {
objectqueueVar7.decrementActiveCount();
}
} catch (Exception e2) {
}
if (booleanVar3) {
throw new NoSuchElementException(""Could not create a validated object, cause: "" + e.getMessage());
} else {
continue;
}
}
boolean booleanVar14 = booleanLiteral15;
try {
booleanVar14 = _testOnBorrow && !_factory.validateObject(key, objecttimestamppairVar5.value);
} catch (Exception e) {
}
if (booleanVar14) {
try {
_factory.destroyObject(key, objecttimestamppairVar5.value);
synchronized (this) {
objectqueueVar7.decrementActiveCount();
}
} catch (Exception e) {
}
if (booleanVar3) {
throw new NoSuchElementException(""Could not create a validated object"");
}
} else {
return objecttimestamppairVar5.value;
}
}
}"
16393,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,258,"} catch (Exception e) {
","public synchronized Object borrowObject() throws Exception {
assertOpen();
Object obj = null;
boolean newlyCreated = false;
while (null == obj) {
if (!_pool.empty()) {
obj = _pool.pop();
} else {
if (null == _factory) {
throw new NoSuchElementException();
} else {
newlyCreated = true;
obj = _factory.makeObject();
if (obj == null) {
throw new NoSuchElementException(""PoolableObjectFactory.makeObject() returned null."");
}
}
}
if (!newlyCreated && null != _factory && null != obj) {
try {
_factory.activateObject(obj);
} catch (Exception e) {
try {
_factory.destroyObject(obj);
} catch (Exception e2) {
} finally {
obj = null;
}
}
}
if (!newlyCreated && null != _factory && null != obj) {
boolean validated = false;
try {
validated = _factory.validateObject(obj);
} catch (Exception e) {
}
if (!validated) {
try {
_factory.destroyObject(obj);
} catch (Exception e) {
} finally {
obj = null;
}
}
}
}
_numActive++;
return obj;
}","public synchronized Object borrowObject() throws Exception {
assertOpen();
Object objectVar1 = objectLiteral2;
boolean booleanVar3 = booleanLiteral4;
while (null == objectVar1) {
if (!_pool.empty()) {
objectVar1 = _pool.pop();
} else {
if (null == _factory) {
throw new NoSuchElementException();
} else {
booleanVar3 = true;
objectVar1 = _factory.makeObject();
if (objectVar1 == null) {
throw new NoSuchElementException(""PoolableObjectFactory.makeObject() returned null."");
}
}
}
if (!booleanVar3 && null != _factory && null != objectVar1) {
try {
_factory.activateObject(objectVar1);
} catch (Exception e) {
try {
_factory.destroyObject(objectVar1);
} catch (Exception e2) {
} finally {
objectVar1 = null;
}
}
}
if (!booleanVar3 && null != _factory && null != objectVar1) {
boolean booleanVar5 = booleanLiteral4;
try {
booleanVar5 = _factory.validateObject(objectVar1);
} catch (Exception e) {
}
if (!booleanVar5) {
try {
_factory.destroyObject(objectVar1);
} catch (Exception e) {
} finally {
objectVar1 = null;
}
}
}
}
_numActive++;
return objectVar1;
}"
16394,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,259,"} catch (Exception e) {
","public void close() {
try {
keyedPool.close();
} catch (Exception e) {
}
}","public void close() {
try {
keyedPool.close();
} catch (Exception e) {
}
}"
16400,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,265,"} catch(Exception e) {
","public void run() {
try {
evict();
} catch (Exception e) {
} catch (OutOfMemoryError oome) {
oome.printStackTrace(System.err);
}
try {
ensureMinIdle();
} catch (Exception e) {
}
}","public void run() {
try {
evict();
} catch (Exception e) {
} catch (OutOfMemoryError oome) {
oome.printStackTrace(System.err);
}
try {
ensureMinIdle();
} catch (Exception e) {
}
}"
16408,DODGY_CODE,REC_CATCH_EXCEPTION,FP,pool,273,"} catch (Exception e) {
","public synchronized Object borrowObject(Object key) throws Exception {
assertOpen();
Stack stack = (Stack) (_pools.get(key));
if (null == stack) {
stack = new Stack();
stack.ensureCapacity(_initSleepingCapacity > _maxSleeping ? _maxSleeping : _initSleepingCapacity);
_pools.put(key, stack);
}
Object obj = null;
do {
boolean newlyMade = false;
// TODO: Don't use exception, test size.
if (!stack.empty()) {
obj = stack.pop();
_totIdle--;
} else {
if (null == _factory) {
throw new NoSuchElementException(""pools without a factory cannot create new objects as needed."");
} else {
obj = _factory.makeObject(key);
newlyMade = true;
}
}
if (!newlyMade && null != obj && null != _factory) {
try {
_factory.activateObject(key, obj);
if (!_factory.validateObject(key, obj)) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e2) {
}
obj = null;
}
} catch (Exception e) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e2) {
}
obj = null;
}
}
} while (obj == null);
incrementActiveCount(key);
return obj;
}","public synchronized Object borrowObject(Object key) throws Exception {
assertOpen();
Stack stackVar1 = stackLiteral2;
if (null == stackVar1) {
stackVar1 = new Stack();
stackVar1.ensureCapacity(_initSleepingCapacity > _maxSleeping ? _maxSleeping : _initSleepingCapacity);
_pools.put(key, stackVar1);
}
Object objectVar3 = objectLiteral4;
do {
boolean booleanVar5 = booleanLiteral6;
// TODO: Don't use exception, test size.
if (!stackVar1.empty()) {
objectVar3 = stackVar1.pop();
_totIdle--;
} else {
if (null == _factory) {
throw new NoSuchElementException(""pools without a factory cannot create new objects as needed."");
} else {
objectVar3 = _factory.makeObject(key);
booleanVar5 = true;
}
}
if (!booleanVar5 && null != objectVar3 && null != _factory) {
try {
_factory.activateObject(key, objectVar3);
if (!_factory.validateObject(key, objectVar3)) {
try {
_factory.destroyObject(key, objectVar3);
} catch (Exception e2) {
}
objectVar3 = null;
}
} catch (Exception e) {
try {
_factory.destroyObject(key, objectVar3);
} catch (Exception e2) {
}
objectVar3 = null;
}
}
} while (objectVar3 == null);
incrementActiveCount(key);
return objectVar3;
}"
16409,PERFORMANCE,WMI_WRONG_MAP_ITERATOR,FP,pool,274,"ObjectQueue pool = _poolMap.get(key);
","@Override
public void clear() {
Map<K, List<ObjectTimestampPair<V>>> toDestroy = new HashMap<K, List<ObjectTimestampPair<V>>>();
synchronized (this) {
for (Iterator<K> it = _poolMap.keySet().iterator(); it.hasNext(); ) {
K key = it.next();
ObjectQueue pool = _poolMap.get(key);
List<ObjectTimestampPair<V>> objects = new ArrayList<ObjectTimestampPair<V>>();
objects.addAll(pool.queue);
toDestroy.put(key, objects);
it.remove();
_poolList.remove(key);
_totalIdle = _totalIdle - pool.queue.size();
_totalInternalProcessing = _totalInternalProcessing + pool.queue.size();
pool.queue.clear();
}
}
destroy(toDestroy, _factory);
}","@Override
public void clear() {
Map<K, List<ObjectTimestampPair<V>>> map<k,list<objecttimestamppair<v>>>Var1 = map<k,list<objecttimestamppair<v>>>Literal2;
synchronized (this) {
for (Iterator<K> iterator<k>Var11 = iterator<k>Literal12; iterator<k>Var3.hasNext(); ) {
K kVar5 = kLiteral6;
ObjectQueue objectqueueVar7 = objectqueueLiteral8;
List<ObjectTimestampPair<V>> list<objecttimestamppair<v>>Var9 = list<objecttimestamppair<v>>Literal10;
list<objecttimestamppair<v>>Var9.addAll(objectqueueVar7.queue);
map<k,list<objecttimestamppair<v>>>Var1.put(kVar5, list<objecttimestamppair<v>>Var9);
iterator<k>Var3.remove();
_poolList.remove(kVar5);
_totalIdle = _totalIdle - objectqueueVar7.queue.size();
_totalInternalProcessing = _totalInternalProcessing + objectqueueVar7.queue.size();
objectqueueVar7.queue.clear();
}
}
destroy(map<k,list<objecttimestamppair<v>>>Var1, _factory);
}"
16416,DODGY_CODE,UCF_USELESS_CONTROL_FLOW,FP,pool,281,"if (!underTest.endEvictionTest(idleObjects)) {
","@Override
public void evict() throws E {
assertOpen();
if (!idleObjects.isEmpty()) {
PooledObject<T> underTest = null;
final EvictionPolicy<T> evictionPolicy = getEvictionPolicy();
synchronized (evictionLock) {
final EvictionConfig evictionConfig = new EvictionConfig(getMinEvictableIdleDuration(), getSoftMinEvictableIdleDuration(), getMinIdle());
final boolean testWhileIdle = getTestWhileIdle();
for (int i = 0, m = getNumTests(); i < m; i++) {
if (evictionIterator == null || !evictionIterator.hasNext()) {
evictionIterator = new EvictionIterator(idleObjects);
}
if (!evictionIterator.hasNext()) {
return;
}
try {
underTest = evictionIterator.next();
} catch (final NoSuchElementException nsee) {
i--;
evictionIterator = null;
continue;
}
if (!underTest.startEvictionTest()) {
i--;
continue;
}
boolean evict;
try {
evict = evictionPolicy.evict(evictionConfig, underTest, idleObjects.size());
} catch (final Throwable t) {
PoolUtils.checkRethrow(t);
swallowException(new Exception(t));
evict = false;
}
if (evict) {
destroy(underTest, DestroyMode.NORMAL);
destroyedByEvictorCount.incrementAndGet();
} else {
if (testWhileIdle) {
boolean active = false;
try {
factory.activateObject(underTest);
active = true;
} catch (final Exception e) {
destroy(underTest, DestroyMode.NORMAL);
destroyedByEvictorCount.incrementAndGet();
}
if (active) {
boolean validate = false;
Throwable validationThrowable = null;
try {
validate = factory.validateObject(underTest);
} catch (final Throwable t) {
PoolUtils.checkRethrow(t);
validationThrowable = t;
}
if (!validate) {
destroy(underTest, DestroyMode.NORMAL);
destroyedByEvictorCount.incrementAndGet();
if (validationThrowable != null) {
if (validationThrowable instanceof RuntimeException) {
throw (RuntimeException) validationThrowable;
}
throw (Error) validationThrowable;
}
} else {
try {
factory.passivateObject(underTest);
} catch (final Exception e) {
destroy(underTest, DestroyMode.NORMAL);
destroyedByEvictorCount.incrementAndGet();
}
}
}
}
if (!underTest.endEvictionTest(idleObjects)) {
}
}
}
}
}
final AbandonedConfig ac = this.abandonedConfig;
if (ac != null && ac.getRemoveAbandonedOnMaintenance()) {
removeAbandoned(ac);
}
}","@Override
public void evict() throws E {
assertOpen();
if (!idleObjects.isEmpty()) {
PooledObject<T> pooledobject<t>Var1 = pooledobject<t>Literal2;
final EvictionPolicy<T> evictionpolicy<t>Var3 = evictionpolicy<t>Literal4;
synchronized (evictionLock) {
final EvictionConfig evictionconfigVar5 = evictionconfigLiteral6;
final boolean booleanVar7 = booleanLiteral8;
for (int intVar20 = intLiteral21, intVar22 = intLiteral23; intVar9 < intLiteral1; intVar9++) {
if (evictionIterator == null || !evictionIterator.hasNext()) {
evictionIterator = new EvictionIterator(idleObjects);
}
if (!evictionIterator.hasNext()) {
return;
}
try {
pooledobject<t>Var1 = evictionIterator.next();
} catch (final NoSuchElementException nsee) {
intVar9--;
evictionIterator = null;
continue;
}
if (!pooledobject<t>Var1.startEvictionTest()) {
intVar9--;
continue;
}
boolean booleanVar13;
try {
booleanVar13 = evictionpolicy<t>Var3.evict(evictionconfigVar5, pooledobject<t>Var1, idleObjects.size());
} catch (final Throwable t) {
PoolUtils.checkRethrow(t);
swallowException(new Exception(t));
booleanVar13 = false;
}
if (booleanVar13) {
destroy(pooledobject<t>Var1, DestroyMode.NORMAL);
destroyedByEvictorCount.incrementAndGet();
} else {
if (booleanVar7) {
boolean booleanVar14 = booleanLiteral15;
try {
factory.activateObject(pooledobject<t>Var1);
booleanVar14 = true;
} catch (final Exception e) {
destroy(pooledobject<t>Var1, DestroyMode.NORMAL);
destroyedByEvictorCount.incrementAndGet();
}
if (booleanVar14) {
boolean booleanVar16 = booleanLiteral15;
Throwable throwableVar17 = pooledobject<t>Literal2;
try {
booleanVar16 = factory.validateObject(pooledobject<t>Var1);
} catch (final Throwable t) {
PoolUtils.checkRethrow(t);
throwableVar17 = t;
}
if (!booleanVar16) {
destroy(pooledobject<t>Var1, DestroyMode.NORMAL);
destroyedByEvictorCount.incrementAndGet();
if (throwableVar17 != null) {
if (throwableVar17 instanceof RuntimeException) {
throw (RuntimeException) throwableVar17;
}
throw (Error) throwableVar17;
}
} else {
try {
factory.passivateObject(pooledobject<t>Var1);
} catch (final Exception e) {
destroy(pooledobject<t>Var1, DestroyMode.NORMAL);
destroyedByEvictorCount.incrementAndGet();
}
}
}
}
if (!pooledobject<t>Var1.endEvictionTest(idleObjects)) {
}
}
}
}
}
final AbandonedConfig abandonedconfigVar18 = abandonedconfigLiteral19;
if (abandonedconfigVar18 != null && abandonedconfigVar18.getRemoveAbandonedOnMaintenance()) {
removeAbandoned(abandonedconfigVar18);
}
}"
16420,DODGY_CODE,REC_CATCH_EXCEPTION,FP,pool,285,"} catch (Exception e2) {
","public Object borrowObject(Object key) throws Exception {
long starttime = System.currentTimeMillis();
boolean newlyCreated = false;
for (; ; ) {
ObjectTimestampPair pair = null;
ObjectQueue pool = null;
synchronized (this) {
assertOpen();
pool = (ObjectQueue) (_poolMap.get(key));
if (null == pool) {
pool = new ObjectQueue();
_poolMap.put(key, pool);
_poolList.add(key);
}
try {
pair = (ObjectTimestampPair) (pool.queue.removeFirst());
if (null != pair) {
_totalIdle--;
}
} catch (NoSuchElementException e) {
}
if (null == pair) {
if ((_maxTotal > 0) && (_totalActive + _totalIdle >= _maxTotal)) {
clearOldest();
}
if ((_maxActive < 0 || pool.activeCount < _maxActive) && (_maxTotal < 0 || _totalActive + _totalIdle < _maxTotal)) {
Object obj = _factory.makeObject(key);
pair = new ObjectTimestampPair(obj);
newlyCreated = true;
} else {
switch(_whenExhaustedAction) {
case WHEN_EXHAUSTED_GROW:
Object obj = _factory.makeObject(key);
pair = new ObjectTimestampPair(obj);
break;
case WHEN_EXHAUSTED_FAIL:
throw new NoSuchElementException();
case WHEN_EXHAUSTED_BLOCK:
try {
if (_maxWait <= 0) {
wait();
} else {
final long elapsed = (System.currentTimeMillis() - starttime);
final long waitTime = _maxWait - elapsed;
if (waitTime > 0) {
wait(waitTime);
}
}
} catch (InterruptedException e) {
}
if (_maxWait > 0 && ((System.currentTimeMillis() - starttime) >= _maxWait)) {
throw new NoSuchElementException(""Timeout waiting for idle object"");
} else {
continue;
}
default:
throw new IllegalArgumentException(""whenExhaustedAction "" + _whenExhaustedAction + "" not recognized."");
}
}
}
pool.incrementActiveCount();
}
if (newlyCreated) {
return pair.value;
} else {
try {
_factory.activateObject(key, pair.value);
} catch (Exception e) {
try {
synchronized (this) {
pool.decrementActiveCount();
}
_factory.destroyObject(key, pair.value);
} catch (Exception e2) {
}
continue;
}
boolean invalid = true;
try {
invalid = _testOnBorrow && !_factory.validateObject(key, pair.value);
} catch (Exception e) {
}
if (invalid) {
try {
synchronized (this) {
pool.decrementActiveCount();
}
_factory.destroyObject(key, pair.value);
} catch (Exception e) {
}
if (newlyCreated) {
throw new NoSuchElementException(""Could not create a validated object"");
}
} else {
return pair.value;
}
}
}
}","public Object borrowObject(Object key) throws Exception {
long longVar1 = longLiteral2;
boolean booleanVar3 = booleanLiteral4;
for (; ; ) {
ObjectTimestampPair objecttimestamppairVar5 = objecttimestamppairLiteral6;
ObjectQueue objectqueueVar7 = objecttimestamppairLiteral6;
synchronized (this) {
assertOpen();
objectqueueVar7 = (ObjectQueue) (_poolMap.get(key));
if (null == objectqueueVar7) {
objectqueueVar7 = new ObjectQueue();
_poolMap.put(key, objectqueueVar7);
_poolList.add(key);
}
try {
objecttimestamppairVar5 = (ObjectTimestampPair) (objectqueueVar7.queue.removeFirst());
if (null != objecttimestamppairVar5) {
_totalIdle--;
}
} catch (NoSuchElementException e) {
}
if (null == objecttimestamppairVar5) {
if ((_maxTotal > 0) && (_totalActive + _totalIdle >= _maxTotal)) {
clearOldest();
}
if ((_maxActive < 0 || objectqueueVar7.activeCount < _maxActive) && (_maxTotal < 0 || _totalActive + _totalIdle < _maxTotal)) {
Object objectVar8 = objectLiteral9;
objecttimestamppairVar5 = new ObjectTimestampPair(objectVar8);
booleanVar3 = true;
} else {
switch(_whenExhaustedAction) {
case WHEN_EXHAUSTED_GROW:
Object objectVar8 = objectLiteral9;
objecttimestamppairVar5 = new ObjectTimestampPair(objectVar8);
break;
case WHEN_EXHAUSTED_FAIL:
throw new NoSuchElementException();
case WHEN_EXHAUSTED_BLOCK:
try {
if (_maxWait <= 0) {
wait();
} else {
final long longVar10 = longLiteral11;
final long longVar12 = longLiteral13;
if (longVar12 > 0) {
wait(longVar12);
}
}
} catch (InterruptedException e) {
}
if (_maxWait > 0 && ((System.currentTimeMillis() - longVar1) >= _maxWait)) {
throw new NoSuchElementException(""Timeout waiting for idle object"");
} else {
continue;
}
default:
throw new IllegalArgumentException(""whenExhaustedAction "" + _whenExhaustedAction + "" not recognized."");
}
}
}
objectqueueVar7.incrementActiveCount();
}
if (booleanVar3) {
return objecttimestamppairVar5.value;
} else {
try {
_factory.activateObject(key, objecttimestamppairVar5.value);
} catch (Exception e) {
try {
synchronized (this) {
objectqueueVar7.decrementActiveCount();
}
_factory.destroyObject(key, objecttimestamppairVar5.value);
} catch (Exception e2) {
}
continue;
}
boolean booleanVar14 = booleanLiteral15;
try {
booleanVar14 = _testOnBorrow && !_factory.validateObject(key, objecttimestamppairVar5.value);
} catch (Exception e) {
}
if (booleanVar14) {
try {
synchronized (this) {
objectqueueVar7.decrementActiveCount();
}
_factory.destroyObject(key, objecttimestamppairVar5.value);
} catch (Exception e) {
}
if (booleanVar3) {
throw new NoSuchElementException(""Could not create a validated object"");
}
} else {
return objecttimestamppairVar5.value;
}
}
}
}"
16427,Multithreaded correctness,NO_NOTIFY_NOT_NOTIFYALL,FP,pool,292,"latch.notify();
","private synchronized void allocate() {
if (isClosed())
return;
for (; ; ) {
if (!_allocationQueue.isEmpty()) {
Latch latch = (Latch) _allocationQueue.getFirst();
ObjectQueue pool = (ObjectQueue) (_poolMap.get(latch.getkey()));
if (null == pool) {
pool = new ObjectQueue();
_poolMap.put(latch.getkey(), pool);
_poolList.add(latch.getkey());
}
latch.setPool(pool);
if (!pool.queue.isEmpty()) {
_allocationQueue.removeFirst();
latch.setPair((ObjectTimestampPair) pool.queue.removeFirst());
pool.incrementInternalProcessingCount();
_totalIdle--;
synchronized (latch) {
latch.notify();
}
continue;
}
if ((_maxTotal > 0) && (_totalActive + _totalIdle + _totalInternalProcessing >= _maxTotal)) {
clearOldest();
}
if ((_maxActive < 0 || pool.activeCount + pool.internalProcessingCount < _maxActive) && (_maxTotal < 0 || _totalActive + _totalIdle + _totalInternalProcessing < _maxTotal)) {
_allocationQueue.removeFirst();
latch.setMayCreate(true);
pool.incrementInternalProcessingCount();
synchronized (latch) {
latch.notify();
}
continue;
}
}
break;
}
}","private synchronized void allocate() {
if (isClosed())
return;
for (; ; ) {
if (!_allocationQueue.isEmpty()) {
Latch latchVar1 = latchLiteral2;
ObjectQueue objectqueueVar3 = objectqueueLiteral4;
if (null == objectqueueVar3) {
objectqueueVar3 = new ObjectQueue();
_poolMap.put(latchVar1.getkey(), objectqueueVar3);
_poolList.add(latchVar1.getkey());
}
latchVar1.setPool(objectqueueVar3);
if (!objectqueueVar3.queue.isEmpty()) {
_allocationQueue.removeFirst();
latchVar1.setPair((ObjectTimestampPair) objectqueueVar3.queue.removeFirst());
objectqueueVar3.incrementInternalProcessingCount();
_totalIdle--;
synchronized (latchVar1) {
latchVar1.notify();
}
continue;
}
if ((_maxTotal > 0) && (_totalActive + _totalIdle + _totalInternalProcessing >= _maxTotal)) {
clearOldest();
}
if ((_maxActive < 0 || objectqueueVar3.activeCount + objectqueueVar3.internalProcessingCount < _maxActive) && (_maxTotal < 0 || _totalActive + _totalIdle + _totalInternalProcessing < _maxTotal)) {
_allocationQueue.removeFirst();
latchVar1.setMayCreate(true);
objectqueueVar3.incrementInternalProcessingCount();
synchronized (latchVar1) {
latchVar1.notify();
}
continue;
}
}
break;
}
}"
16428,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,293,"} catch (Exception e) {
","public void returnObject(final V obj) {
try {
keyedPool.returnObject(key, obj);
} catch (Exception e) {
}
}","public void returnObject(final V obj) {
try {
keyedPool.returnObject(key, obj);
} catch (Exception e) {
}
}"
16430,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,295,"} catch (Exception e) {
","public void invalidateObject(final V obj) {
try {
keyedPool.invalidateObject(key, obj);
} catch (Exception e) {
}
}","public void invalidateObject(final V obj) {
try {
keyedPool.invalidateObject(key, obj);
} catch (Exception e) {
}
}"
16440,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,305,"} catch (Exception e) {
","public void close() {
try {
pool.close();
} catch (Exception e) {
}
}","public void close() {
try {
pool.close();
} catch (Exception e) {
}
}"
16441,PERFORMANCE,WMI_WRONG_MAP_ITERATOR,FP,pool,306,"ObjectQueue pool = _poolMap.get(key);
","@Override
@Deprecated
public void setFactory(KeyedPoolableObjectFactory<K, V> factory) throws IllegalStateException {
Map<K, List<ObjectTimestampPair<V>>> toDestroy = new HashMap<K, List<ObjectTimestampPair<V>>>();
final KeyedPoolableObjectFactory<K, V> oldFactory = _factory;
synchronized (this) {
assertOpen();
if (0 < getNumActive()) {
throw new IllegalStateException(""Objects are already active"");
}
for (Iterator<K> it = _poolMap.keySet().iterator(); it.hasNext(); ) {
K key = it.next();
ObjectQueue pool = _poolMap.get(key);
if (pool != null) {
List<ObjectTimestampPair<V>> objects = new ArrayList<ObjectTimestampPair<V>>();
objects.addAll(pool.queue);
toDestroy.put(key, objects);
it.remove();
_poolList.remove(key);
_totalIdle = _totalIdle - pool.queue.size();
_totalInternalProcessing = _totalInternalProcessing + pool.queue.size();
pool.queue.clear();
}
}
_factory = factory;
}
destroy(toDestroy, oldFactory);
}","@Override
@Deprecated
public void setFactory(KeyedPoolableObjectFactory<K, V> factory) throws IllegalStateException {
Map<K, List<ObjectTimestampPair<V>>> map<k,list<objecttimestamppair<v>>>Var1 = map<k,list<objecttimestamppair<v>>>Literal2;
final KeyedPoolableObjectFactory<K, V> keyedpoolableobjectfactory<k,v>Var3 = keyedpoolableobjectfactory<k,v>Literal4;
synchronized (this) {
assertOpen();
if (0 < getNumActive()) {
throw new IllegalStateException(""Objects are already active"");
}
for (Iterator<K> iterator<k>Var13 = iterator<k>Literal14; iterator<k>Var5.hasNext(); ) {
K kVar7 = kLiteral8;
ObjectQueue objectqueueVar9 = objectqueueLiteral10;
if (objectqueueVar9 != null) {
List<ObjectTimestampPair<V>> list<objecttimestamppair<v>>Var11 = list<objecttimestamppair<v>>Literal12;
list<objecttimestamppair<v>>Var11.addAll(objectqueueVar9.queue);
map<k,list<objecttimestamppair<v>>>Var1.put(kVar7, list<objecttimestamppair<v>>Var11);
iterator<k>Var5.remove();
_poolList.remove(kVar7);
_totalIdle = _totalIdle - objectqueueVar9.queue.size();
_totalInternalProcessing = _totalInternalProcessing + objectqueueVar9.queue.size();
objectqueueVar9.queue.clear();
}
}
_factory = factory;
}
destroy(map<k,list<objecttimestamppair<v>>>Var1, keyedpoolableobjectfactory<k,v>Var3);
}"
16444,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,309,"} catch (Exception e) {
","public void returnObject(final T obj) {
synchronized (lock) {
try {
pool.returnObject(obj);
} catch (Exception e) {
}
}
}","public void returnObject(final T obj) {
synchronized (lock) {
try {
pool.returnObject(obj);
} catch (Exception e) {
}
}
}"
16458,PERFORMANCE,WMI_WRONG_MAP_ITERATOR,FP,pool,323,"final CursorableLinkedList<ObjectTimestampPair<V>> list = _poolMap.get(key).queue;
","public void clearOldest() {
final Map<K, List<ObjectTimestampPair<V>>> toDestroy = new HashMap<K, List<ObjectTimestampPair<V>>>();
final Map<ObjectTimestampPair<V>, K> map = new TreeMap<ObjectTimestampPair<V>, K>();
synchronized (this) {
for (Iterator<K> keyiter = _poolMap.keySet().iterator(); keyiter.hasNext(); ) {
final K key = keyiter.next();
final CursorableLinkedList<ObjectTimestampPair<V>> list = _poolMap.get(key).queue;
for (Iterator<ObjectTimestampPair<V>> it = list.iterator(); it.hasNext(); ) {
map.put(it.next(), key);
}
}
Set<Map.Entry<ObjectTimestampPair<V>, K>> setPairKeys = map.entrySet();
int itemsToRemove = ((int) (map.size() * 0.15)) + 1;
Iterator<Map.Entry<ObjectTimestampPair<V>, K>> iter = setPairKeys.iterator();
while (iter.hasNext() && itemsToRemove > 0) {
Map.Entry<ObjectTimestampPair<V>, K> entry = iter.next();
K key = entry.getValue();
ObjectTimestampPair<V> pairTimeStamp = entry.getKey();
ObjectQueue objectQueue = _poolMap.get(key);
final CursorableLinkedList<ObjectTimestampPair<V>> list = objectQueue.queue;
list.remove(pairTimeStamp);
if (toDestroy.containsKey(key)) {
toDestroy.get(key).add(pairTimeStamp);
} else {
List<ObjectTimestampPair<V>> listForKey = new ArrayList<ObjectTimestampPair<V>>();
listForKey.add(pairTimeStamp);
toDestroy.put(key, listForKey);
}
objectQueue.incrementInternalProcessingCount();
_totalIdle--;
itemsToRemove--;
}
}
destroy(toDestroy, _factory);
}","public void clearOldest() {
final Map<K, List<ObjectTimestampPair<V>>> map<k,list<objecttimestamppair<v>>>Var1 = map<k,list<objecttimestamppair<v>>>Literal2;
final Map<ObjectTimestampPair<V>, K> map<objecttimestamppair<v>,k>Var3 = map<objecttimestamppair<v>,k>Literal4;
synchronized (this) {
for (Iterator<K> iterator<k>Var29 = iterator<k>Literal30; iterator<k>Var5.hasNext(); ) {
final K kVar7 = kLiteral8;
final CursorableLinkedList<ObjectTimestampPair<V>> cursorablelinkedlist<objecttimestamppair<v>>Var9 = cursorablelinkedlist<objecttimestamppair<v>>Literal10;
for (Iterator<ObjectTimestampPair<V>> iterator<objecttimestamppair<v>>Var31 = iterator<objecttimestamppair<v>>Literal32; iterator<objecttimestamppair<v>>Var11.hasNext(); ) {
map<objecttimestamppair<v>,k>Var3.put(iterator<objecttimestamppair<v>>Var11.next(), kVar7);
}
}
Set<Map.Entry<ObjectTimestampPair<V>, K>> set<map.entry<objecttimestamppair<v>,k>>Var13 = set<map.entry<objecttimestamppair<v>,k>>Literal14;
int intVar15 = intLiteral16;
Iterator<Map.Entry<ObjectTimestampPair<V>, K>> iterator<map.entry<objecttimestamppair<v>,k>>Var17 = iterator<map.entry<objecttimestamppair<v>,k>>Literal18;
while (iterator<map.entry<objecttimestamppair<v>,k>>Var17.hasNext() && intVar15 > 0) {
Map.Entry<ObjectTimestampPair<V>, K> map.entry<objecttimestamppair<v>,k>Var19 = map.entry<objecttimestamppair<v>,k>Literal20;
K kVar7 = kLiteral21;
ObjectTimestampPair<V> objecttimestamppair<v>Var22 = objecttimestamppair<v>Literal23;
ObjectQueue objectqueueVar24 = objectqueueLiteral25;
final CursorableLinkedList<ObjectTimestampPair<V>> cursorablelinkedlist<objecttimestamppair<v>>Var9 = cursorablelinkedlist<objecttimestamppair<v>>Literal26;
cursorablelinkedlist<objecttimestamppair<v>>Var9.remove(objecttimestamppair<v>Var22);
if (map<k,list<objecttimestamppair<v>>>Var1.containsKey(kVar7)) {
map<k,list<objecttimestamppair<v>>>Var1.get(kVar7).add(objecttimestamppair<v>Var22);
} else {
List<ObjectTimestampPair<V>> list<objecttimestamppair<v>>Var27 = list<objecttimestamppair<v>>Literal28;
list<objecttimestamppair<v>>Var27.add(objecttimestamppair<v>Var22);
map<k,list<objecttimestamppair<v>>>Var1.put(kVar7, list<objecttimestamppair<v>>Var27);
}
objectqueueVar24.incrementInternalProcessingCount();
_totalIdle--;
intVar15--;
}
}
destroy(map<k,list<objecttimestamppair<v>>>Var1, _factory);
}"
16461,CORRECTNESS,RV_RETURN_VALUE_IGNORED,FP,pool,326,"writeLock.tryLock();
","@Override
public void activateObject(final K key, final V obj) throws Exception {
writeLock.tryLock();
try {
keyedFactory.activateObject(key, obj);
} finally {
writeLock.unlock();
}
}","@Override
public void activateObject(final K key, final V obj) throws Exception {
writeLock.tryLock();
try {
keyedFactory.activateObject(key, obj);
} finally {
writeLock.unlock();
}
}"
16464,CORRECTNESS,RV_RETURN_VALUE_IGNORED,FP,pool,329,"readLock.tryLock();
","@Override
public int getNumActive(final K key) {
ReadLock readLock = readWriteLock.readLock();
readLock.tryLock();
try {
return keyedPool.getNumActive(key);
} finally {
readLock.unlock();
}
}","@Override
public int getNumActive(final K key) {
ReadLock readlockVar1 = readlockLiteral2;
readlockVar1.tryLock();
try {
return keyedPool.getNumActive(key);
} finally {
readlockVar1.unlock();
}
}"
16468,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,333,"} catch (Exception e) {
","public void invalidateObject(final K key, final V obj) {
try {
pool.invalidateObject(obj);
} catch (Exception e) {
}
}","public void invalidateObject(final K key, final V obj) {
try {
pool.invalidateObject(obj);
} catch (Exception e) {
}
}"
16473,DODGY_CODE,UCF_USELESS_CONTROL_FLOW,FP,pool,338,"if (!underTest.endEvictionTest()) {
","public void evict() throws Exception {
assertOpen();
if (_idleObjects.size() == 0) {
return;
}
PooledObject<T> underTest = null;
for (int i = 0, m = getNumTests(); i < m; i++) {
if (_evictionIterator == null || !_evictionIterator.hasNext()) {
if (getLifo()) {
_evictionIterator = _idleObjects.descendingIterator();
} else {
_evictionIterator = _idleObjects.iterator();
}
}
if (!_evictionIterator.hasNext()) {
return;
} else {
try {
underTest = _evictionIterator.next();
} catch (NoSuchElementException nsee) {
i--;
_evictionIterator = null;
continue;
}
}
if (!underTest.startEvictionTest()) {
i--;
continue;
}
if (getMinEvictableIdleTimeMillis() > 0 && getMinEvictableIdleTimeMillis() < underTest.getIdleTimeMillis() || (getSoftMinEvictableIdleTimeMillis() > 0 && getSoftMinEvictableIdleTimeMillis() < underTest.getIdleTimeMillis() && getMinIdle() < _idleObjects.size())) {
destroy(underTest);
} else {
if (getTestWhileIdle()) {
boolean active = false;
try {
_factory.activateObject(underTest.getObject());
active = true;
} catch (Exception e) {
destroy(underTest);
}
if (active) {
if (!_factory.validateObject(underTest.getObject())) {
destroy(underTest);
} else {
try {
_factory.passivateObject(underTest.getObject());
} catch (Exception e) {
destroy(underTest);
}
}
}
}
if (!underTest.endEvictionTest()) {
}
}
}
return;
}","public void evict() throws Exception {
assertOpen();
if (_idleObjects.size() == 0) {
return;
}
PooledObject<T> pooledobject<t>Var1 = pooledobject<t>Literal2;
for (int intVar9 = intLiteral10, intVar11 = intLiteral12; intVar3 < intLiteral1; intVar3++) {
if (_evictionIterator == null || !_evictionIterator.hasNext()) {
if (getLifo()) {
_evictionIterator = _idleObjects.descendingIterator();
} else {
_evictionIterator = _idleObjects.iterator();
}
}
if (!_evictionIterator.hasNext()) {
return;
} else {
try {
pooledobject<t>Var1 = _evictionIterator.next();
} catch (NoSuchElementException nsee) {
intVar3--;
_evictionIterator = null;
continue;
}
}
if (!pooledobject<t>Var1.startEvictionTest()) {
intVar3--;
continue;
}
if (getMinEvictableIdleTimeMillis() > 0 && getMinEvictableIdleTimeMillis() < pooledobject<t>Var1.getIdleTimeMillis() || (getSoftMinEvictableIdleTimeMillis() > 0 && getSoftMinEvictableIdleTimeMillis() < pooledobject<t>Var1.getIdleTimeMillis() && getMinIdle() < _idleObjects.size())) {
destroy(pooledobject<t>Var1);
} else {
if (getTestWhileIdle()) {
boolean booleanVar7 = booleanLiteral8;
try {
_factory.activateObject(pooledobject<t>Var1.getObject());
booleanVar7 = true;
} catch (Exception e) {
destroy(pooledobject<t>Var1);
}
if (booleanVar7) {
if (!_factory.validateObject(pooledobject<t>Var1.getObject())) {
destroy(pooledobject<t>Var1);
} else {
try {
_factory.passivateObject(pooledobject<t>Var1.getObject());
} catch (Exception e) {
destroy(pooledobject<t>Var1);
}
}
}
}
if (!pooledobject<t>Var1.endEvictionTest()) {
}
}
}
return;
}"
16475,CORRECTNESS,RV_RETURN_VALUE_IGNORED,FP,pool,340,"writeLock.tryLock();
","@Override
public void destroyObject(final T obj) throws Exception {
writeLock.tryLock();
try {
factory.destroyObject(obj);
} finally {
writeLock.unlock();
}
}","@Override
public void destroyObject(final T obj) throws Exception {
writeLock.tryLock();
try {
factory.destroyObject(obj);
} finally {
writeLock.unlock();
}
}"
16476,PERFORMANCE,WMI_WRONG_MAP_ITERATOR,FP,pool,341,"poolMap.get(k).getIdleObjects();
","public void clearOldest() {
final Map<PooledObject<T>, K> map = new TreeMap<PooledObject<T>, K>();
for (K k : poolMap.keySet()) {
final LinkedBlockingDeque<PooledObject<T>> idleObjects = poolMap.get(k).getIdleObjects();
for (PooledObject<T> p : idleObjects) {
map.put(p, k);
}
}
int itemsToRemove = ((int) (map.size() * 0.15)) + 1;
Iterator<Map.Entry<PooledObject<T>, K>> iter = map.entrySet().iterator();
while (iter.hasNext() && itemsToRemove > 0) {
Map.Entry<PooledObject<T>, K> entry = iter.next();
K key = entry.getValue();
PooledObject<T> p = entry.getKey();
boolean destroyed = true;
try {
destroyed = destroy(key, p, false);
} catch (Exception e) {
swallowException(e);
}
if (destroyed) {
itemsToRemove--;
}
}
}","public void clearOldest() {
final Map<PooledObject<T>, K> map<pooledobject<t>,k>Var1 = map<pooledobject<t>,k>Literal2;
for (K kVar3 : poolMap.keySet()) {
final LinkedBlockingDeque<PooledObject<T>> linkedblockingdeque<pooledobject<t>>Var4 = linkedblockingdeque<pooledobject<t>>Literal5;
for (PooledObject<T> pooledobject<t>Var6 : linkedblockingdeque<pooledobject<t>>Var4) {
map<pooledobject<t>,k>Var1.put(pooledobject<t>Var6, kVar3);
}
}
int intVar7 = intLiteral8;
Iterator<Map.Entry<PooledObject<T>, K>> iterator<map.entry<pooledobject<t>,k>>Var9 = iterator<map.entry<pooledobject<t>,k>>Literal10;
while (iterator<map.entry<pooledobject<t>,k>>Var9.hasNext() && intVar7 > 0) {
Map.Entry<PooledObject<T>, K> map.entry<pooledobject<t>,k>Var11 = map.entry<pooledobject<t>,k>Literal12;
K kVar13 = kLiteral14;
PooledObject<T> pooledobject<t>Var6 = pooledobject<t>Literal15;
boolean booleanVar16 = booleanLiteral17;
try {
booleanVar16 = destroy(kVar13, pooledobject<t>Var6, false);
} catch (Exception e) {
swallowException(e);
}
if (booleanVar16) {
intVar7--;
}
}
}"
16487,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,352,"} catch (Exception e) {
","public void invalidateObject(final T obj) {
synchronized (lock) {
try {
pool.invalidateObject(obj);
} catch (Exception e) {
}
}
}","public void invalidateObject(final T obj) {
synchronized (lock) {
try {
pool.invalidateObject(obj);
} catch (Exception e) {
}
}
}"
16490,Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,pool,355,private int initIdleCapacity;,private int initIdleCapacity;,private int intVar1;
16492,DODGY_CODE,UCF_USELESS_CONTROL_FLOW,FP,pool,357,"if (!underTest.endEvictionTest(idleObjects)) {
","@Override
public void evict() throws E {
assertOpen();
if (getNumIdle() > 0) {
PooledObject<T> underTest = null;
final EvictionPolicy<T> evictionPolicy = getEvictionPolicy();
synchronized (evictionLock) {
final EvictionConfig evictionConfig = new EvictionConfig(getMinEvictableIdleDuration(), getSoftMinEvictableIdleDuration(), getMinIdlePerKey());
final boolean testWhileIdle = getTestWhileIdle();
for (int i = 0, m = getNumTests(); i < m; i++) {
if (evictionIterator == null || !evictionIterator.hasNext()) {
if (evictionKeyIterator == null || !evictionKeyIterator.hasNext()) {
final List<K> keyCopy = new ArrayList<>();
final Lock readLock = keyLock.readLock();
readLock.lock();
try {
keyCopy.addAll(poolKeyList);
} finally {
readLock.unlock();
}
evictionKeyIterator = keyCopy.iterator();
}
while (evictionKeyIterator.hasNext()) {
evictionKey = evictionKeyIterator.next();
final ObjectDeque<T> objectDeque = poolMap.get(evictionKey);
if (objectDeque == null) {
continue;
}
final Deque<PooledObject<T>> idleObjects = objectDeque.getIdleObjects();
evictionIterator = new EvictionIterator(idleObjects);
if (evictionIterator.hasNext()) {
break;
}
evictionIterator = null;
}
}
if (evictionIterator == null) {
return;
}
final Deque<PooledObject<T>> idleObjects;
try {
underTest = evictionIterator.next();
idleObjects = evictionIterator.getIdleObjects();
} catch (final NoSuchElementException nsee) {
i--;
evictionIterator = null;
continue;
}
if (!underTest.startEvictionTest()) {
i--;
continue;
}
boolean evict;
try {
evict = evictionPolicy.evict(evictionConfig, underTest, poolMap.get(evictionKey).getIdleObjects().size());
} catch (final Throwable t) {
PoolUtils.checkRethrow(t);
swallowException(new Exception(t));
evict = false;
}
if (evict) {
destroy(evictionKey, underTest, true, DestroyMode.NORMAL);
destroyedByEvictorCount.incrementAndGet();
} else {
if (testWhileIdle) {
boolean active = false;
try {
factory.activateObject(evictionKey, underTest);
active = true;
} catch (final Exception e) {
destroy(evictionKey, underTest, true, DestroyMode.NORMAL);
destroyedByEvictorCount.incrementAndGet();
}
if (active) {
boolean validate = false;
Throwable validationThrowable = null;
try {
validate = factory.validateObject(evictionKey, underTest);
} catch (final Throwable t) {
PoolUtils.checkRethrow(t);
validationThrowable = t;
}
if (!validate) {
destroy(evictionKey, underTest, true, DestroyMode.NORMAL);
destroyedByEvictorCount.incrementAndGet();
if (validationThrowable != null) {
if (validationThrowable instanceof RuntimeException) {
throw (RuntimeException) validationThrowable;
}
throw (Error) validationThrowable;
}
} else {
try {
factory.passivateObject(evictionKey, underTest);
} catch (final Exception e) {
destroy(evictionKey, underTest, true, DestroyMode.NORMAL);
destroyedByEvictorCount.incrementAndGet();
}
}
}
}
if (!underTest.endEvictionTest(idleObjects)) {
}
}
}
}
}
final AbandonedConfig ac = this.abandonedConfig;
if (ac != null && ac.getRemoveAbandonedOnMaintenance()) {
removeAbandoned(ac);
}
}","@Override
public void evict() throws E {
assertOpen();
if (getNumIdle() > 0) {
PooledObject<T> pooledobject<t>Var1 = pooledobject<t>Literal2;
final EvictionPolicy<T> evictionpolicy<t>Var3 = evictionpolicy<t>Literal4;
synchronized (evictionLock) {
final EvictionConfig evictionconfigVar5 = evictionconfigLiteral6;
final boolean booleanVar7 = booleanLiteral8;
for (int intVar28 = intLiteral29, intVar30 = intLiteral31; intVar9 < intLiteral1; intVar9++) {
if (evictionIterator == null || !evictionIterator.hasNext()) {
if (evictionKeyIterator == null || !evictionKeyIterator.hasNext()) {
final List<K> list<k>Var13 = list<k>Literal14;
final Lock lockVar15 = lockLiteral16;
lockVar15.lock();
try {
list<k>Var13.addAll(poolKeyList);
} finally {
lockVar15.unlock();
}
evictionKeyIterator = list<k>Var13.iterator();
}
while (evictionKeyIterator.hasNext()) {
evictionKey = evictionKeyIterator.next();
final ObjectDeque<T> objectdeque<t>Var17 = objectdeque<t>Literal18;
if (objectdeque<t>Var17 == null) {
continue;
}
final Deque<PooledObject<T>> deque<pooledobject<t>>Var19 = deque<pooledobject<t>>Literal20;
evictionIterator = new EvictionIterator(deque<pooledobject<t>>Var19);
if (evictionIterator.hasNext()) {
break;
}
evictionIterator = null;
}
}
if (evictionIterator == null) {
return;
}
final Deque<PooledObject<T>> deque<pooledobject<t>>Var19;
try {
pooledobject<t>Var1 = evictionIterator.next();
deque<pooledobject<t>>Var19 = evictionIterator.getIdleObjects();
} catch (final NoSuchElementException nsee) {
intVar9--;
evictionIterator = null;
continue;
}
if (!pooledobject<t>Var1.startEvictionTest()) {
intVar9--;
continue;
}
boolean booleanVar21;
try {
booleanVar21 = evictionpolicy<t>Var3.evict(evictionconfigVar5, pooledobject<t>Var1, poolMap.get(evictionKey).getIdleObjects().size());
} catch (final Throwable t) {
PoolUtils.checkRethrow(t);
swallowException(new Exception(t));
booleanVar21 = false;
}
if (booleanVar21) {
destroy(evictionKey, pooledobject<t>Var1, true, DestroyMode.NORMAL);
destroyedByEvictorCount.incrementAndGet();
} else {
if (booleanVar7) {
boolean booleanVar22 = booleanLiteral23;
try {
factory.activateObject(evictionKey, pooledobject<t>Var1);
booleanVar22 = true;
} catch (final Exception e) {
destroy(evictionKey, pooledobject<t>Var1, true, DestroyMode.NORMAL);
destroyedByEvictorCount.incrementAndGet();
}
if (booleanVar22) {
boolean booleanVar24 = booleanLiteral23;
Throwable throwableVar25 = pooledobject<t>Literal2;
try {
booleanVar24 = factory.validateObject(evictionKey, pooledobject<t>Var1);
} catch (final Throwable t) {
PoolUtils.checkRethrow(t);
throwableVar25 = t;
}
if (!booleanVar24) {
destroy(evictionKey, pooledobject<t>Var1, true, DestroyMode.NORMAL);
destroyedByEvictorCount.incrementAndGet();
if (throwableVar25 != null) {
if (throwableVar25 instanceof RuntimeException) {
throw (RuntimeException) throwableVar25;
}
throw (Error) throwableVar25;
}
} else {
try {
factory.passivateObject(evictionKey, pooledobject<t>Var1);
} catch (final Exception e) {
destroy(evictionKey, pooledobject<t>Var1, true, DestroyMode.NORMAL);
destroyedByEvictorCount.incrementAndGet();
}
}
}
}
if (!pooledobject<t>Var1.endEvictionTest(deque<pooledobject<t>>Var19)) {
}
}
}
}
}
final AbandonedConfig abandonedconfigVar26 = abandonedconfigLiteral27;
if (abandonedconfigVar26 != null && abandonedconfigVar26.getRemoveAbandonedOnMaintenance()) {
removeAbandoned(abandonedconfigVar26);
}
}"
16502,PERFORMANCE,DM_NUMBER_CTOR,TP,pool,367,"_activeCount.put(key,new Integer(1));
","private void incrementActiveCount(K key) {
_totActive++;
Integer old = _activeCount.get(key);
if (null == old) {
_activeCount.put(key, new Integer(1));
} else {
_activeCount.put(key, new Integer(old.intValue() + 1));
}
}","private void incrementActiveCount(K key) {
_totActive++;
Integer integerVar1 = integerLiteral2;
if (null == integerVar1) {
_activeCount.put(key, new Integer(1));
} else {
_activeCount.put(key, new Integer(integerVar1.intValue() + 1));
}
}"
16506,PERFORMANCE,WMI_WRONG_MAP_ITERATOR,TP,pool,371,"final ObjectDeque<T> deque = poolMap.get(k);
","private void reuseCapacity() {
final int maxTotalPerKeySave = getMaxTotalPerKey();
int maxQueueLength = 0;
LinkedBlockingDeque<PooledObject<T>> mostLoaded = null;
K loadedKey = null;
for (final K k : poolMap.keySet()) {
final ObjectDeque<T> deque = poolMap.get(k);
if (deque != null) {
final LinkedBlockingDeque<PooledObject<T>> pool = deque.getIdleObjects();
final int queueLength = pool.getTakeQueueLength();
if (getNumActive(k) < maxTotalPerKeySave && queueLength > maxQueueLength) {
maxQueueLength = queueLength;
mostLoaded = pool;
loadedKey = k;
}
}
}
if (mostLoaded != null) {
register(loadedKey);
try {
final PooledObject<T> p = create(loadedKey);
if (p != null) {
addIdleObject(loadedKey, p);
}
} catch (final Exception e) {
swallowException(e);
} finally {
deregister(loadedKey);
}
}
}","private void reuseCapacity() {
final int intVar1 = intLiteral2;
int intVar3 = intLiteral4;
LinkedBlockingDeque<PooledObject<T>> linkedblockingdeque<pooledobject<t>>Var5 = linkedblockingdeque<pooledobject<t>>Literal6;
K kVar7 = linkedblockingdeque<pooledobject<t>>Literal6;
for (final K kVar8 : poolMap.keySet()) {
final ObjectDeque<T> objectdeque<t>Var9 = objectdeque<t>Literal10;
if (objectdeque<t>Var9 != null) {
final LinkedBlockingDeque<PooledObject<T>> linkedblockingdeque<pooledobject<t>>Var11 = linkedblockingdeque<pooledobject<t>>Literal12;
final int intVar13 = intLiteral14;
if (getNumActive(kVar8) < intVar1 && intVar13 > intVar3) {
intVar3 = intVar13;
linkedblockingdeque<pooledobject<t>>Var5 = linkedblockingdeque<pooledobject<t>>Var11;
kVar7 = kVar8;
}
}
}
if (linkedblockingdeque<pooledobject<t>>Var5 != null) {
register(kVar7);
try {
final PooledObject<T> pooledobject<t>Var15 = pooledobject<t>Literal16;
if (pooledobject<t>Var15 != null) {
addIdleObject(kVar7, pooledobject<t>Var15);
}
} catch (final Exception e) {
swallowException(e);
} finally {
deregister(kVar7);
}
}
}"
16522,CORRECTNESS,RV_RETURN_VALUE_IGNORED,TP,pool,387,"writeLock.tryLock();
","@Override
public V makeObject(final K key) throws Exception {
writeLock.tryLock();
try {
return keyedFactory.makeObject(key);
} finally {
writeLock.unlock();
}
}","@Override
public V makeObject(final K key) throws Exception {
writeLock.tryLock();
try {
return keyedFactory.makeObject(key);
} finally {
writeLock.unlock();
}
}"
16524,BAD_PRACTICE,DE_MIGHT_IGNORE,TP,pool,389,"} catch (Exception e) {
","private void destroy(PooledObject<T> toDestory) {
_idleObjects.remove(toDestory);
try {
_factory.destroyObject(toDestory.getObject());
} catch (Exception e) {
}
}","private void destroy(PooledObject<T> toDestory) {
_idleObjects.remove(toDestory);
try {
_factory.destroyObject(toDestory.getObject());
} catch (Exception e) {
}
}"
16527,Multithreaded correctness,IS2_INCONSISTENT_SYNC,TP,pool,392,private PoolableObjectFactory _factory = null;,private PoolableObjectFactory _factory = null;,private PoolableObjectFactory poolableobjectfactoryVar1 = poolableobjectfactoryLiteral2;
16534,DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,TP,pool,399,"if (p == null && objectDeque != null) {
","public T borrowObject(K key, long borrowMaxWaitMillis) throws Exception {
assertOpen();
PooledObject<T> p = null;
boolean blockWhenExhausted = getBlockWhenExhausted();
boolean create;
long waitTime = 0;
ObjectDeque<T> objectDeque = register(key);
try {
while (p == null) {
create = false;
if (blockWhenExhausted) {
if (objectDeque != null) {
p = objectDeque.getIdleObjects().pollFirst();
}
if (p == null) {
create = true;
p = create(key);
}
if (p == null && objectDeque != null) {
if (borrowMaxWaitMillis < 0) {
p = objectDeque.getIdleObjects().takeFirst();
} else {
waitTime = System.currentTimeMillis();
p = objectDeque.getIdleObjects().pollFirst(borrowMaxWaitMillis, TimeUnit.MILLISECONDS);
waitTime = System.currentTimeMillis() - waitTime;
}
}
if (p == null) {
throw new NoSuchElementException(""Timeout waiting for idle object"");
}
if (!p.allocate()) {
p = null;
}
} else {
if (objectDeque != null) {
p = objectDeque.getIdleObjects().pollFirst();
}
if (p == null) {
create = true;
p = create(key);
}
if (p == null) {
throw new NoSuchElementException(""Pool exhausted"");
}
if (!p.allocate()) {
p = null;
}
}
if (p != null) {
try {
factory.activateObject(key, p.getObject());
} catch (Exception e) {
try {
destroy(key, p, true);
} catch (Exception e1) {
}
p = null;
if (create) {
NoSuchElementException nsee = new NoSuchElementException(""Unable to activate object"");
nsee.initCause(e);
throw nsee;
}
}
if (p != null && getTestOnBorrow()) {
boolean validate = false;
Throwable validationThrowable = null;
try {
validate = factory.validateObject(key, p.getObject());
} catch (Throwable t) {
PoolUtils.checkRethrow(t);
validationThrowable = t;
}
if (!validate) {
try {
destroy(key, p, true);
destroyedByBorrowValidationCount.incrementAndGet();
} catch (Exception e) {
}
p = null;
if (create) {
NoSuchElementException nsee = new NoSuchElementException(""Unable to validate object"");
nsee.initCause(validationThrowable);
throw nsee;
}
}
}
}
}
} finally {
deregister(key);
}
updateStatsBorrow(p, waitTime);
return p.getObject();
}","public T borrowObject(K key, long borrowMaxWaitMillis) throws Exception {
assertOpen();
PooledObject<T> pooledobject<t>Var1 = pooledobject<t>Literal2;
boolean booleanVar3 = booleanLiteral4;
boolean booleanVar5;
long longVar6 = longLiteral7;
ObjectDeque<T> objectdeque<t>Var8 = objectdeque<t>Literal9;
try {
while (pooledobject<t>Var1 == null) {
booleanVar5 = false;
if (booleanVar3) {
if (objectdeque<t>Var8 != null) {
pooledobject<t>Var1 = objectdeque<t>Var8.getIdleObjects().pollFirst();
}
if (pooledobject<t>Var1 == null) {
booleanVar5 = true;
pooledobject<t>Var1 = create(key);
}
if (pooledobject<t>Var1 == null && objectdeque<t>Var8 != null) {
if (borrowMaxWaitMillis < 0) {
pooledobject<t>Var1 = objectdeque<t>Var8.getIdleObjects().takeFirst();
} else {
longVar6 = System.currentTimeMillis();
pooledobject<t>Var1 = objectdeque<t>Var8.getIdleObjects().pollFirst(borrowMaxWaitMillis, TimeUnit.MILLISECONDS);
longVar6 = System.currentTimeMillis() - longVar6;
}
}
if (pooledobject<t>Var1 == null) {
throw new NoSuchElementException(""Timeout waiting for idle object"");
}
if (!pooledobject<t>Var1.allocate()) {
pooledobject<t>Var1 = null;
}
} else {
if (objectdeque<t>Var8 != null) {
pooledobject<t>Var1 = objectdeque<t>Var8.getIdleObjects().pollFirst();
}
if (pooledobject<t>Var1 == null) {
booleanVar5 = true;
pooledobject<t>Var1 = create(key);
}
if (pooledobject<t>Var1 == null) {
throw new NoSuchElementException(""Pool exhausted"");
}
if (!pooledobject<t>Var1.allocate()) {
pooledobject<t>Var1 = null;
}
}
if (pooledobject<t>Var1 != null) {
try {
factory.activateObject(key, pooledobject<t>Var1.getObject());
} catch (Exception e) {
try {
destroy(key, pooledobject<t>Var1, true);
} catch (Exception e1) {
}
pooledobject<t>Var1 = null;
if (booleanVar5) {
NoSuchElementException nosuchelementexceptionVar10 = nosuchelementexceptionLiteral11;
nosuchelementexceptionVar10.initCause(e);
throw nosuchelementexceptionVar10;
}
}
if (pooledobject<t>Var1 != null && getTestOnBorrow()) {
boolean booleanVar12 = booleanLiteral13;
Throwable throwableVar14 = pooledobject<t>Literal2;
try {
booleanVar12 = factory.validateObject(key, pooledobject<t>Var1.getObject());
} catch (Throwable t) {
PoolUtils.checkRethrow(t);
throwableVar14 = t;
}
if (!booleanVar12) {
try {
destroy(key, pooledobject<t>Var1, true);
destroyedByBorrowValidationCount.incrementAndGet();
} catch (Exception e) {
}
pooledobject<t>Var1 = null;
if (booleanVar5) {
NoSuchElementException nosuchelementexceptionVar10 = nosuchelementexceptionLiteral15;
nosuchelementexceptionVar10.initCause(throwableVar14);
throw nosuchelementexceptionVar10;
}
}
}
}
}
} finally {
deregister(key);
}
updateStatsBorrow(pooledobject<t>Var1, longVar6);
return pooledobject<t>Var1.getObject();
}"
16537,Multithreaded correctness,IS2_INCONSISTENT_SYNC,TP,pool,402,private boolean _testOnBorrow = DEFAULT_TEST_ON_BORROW;,private boolean _testOnBorrow = DEFAULT_TEST_ON_BORROW;,private boolean booleanVar1 = booleanLiteral2;
16544,BAD_PRACTICE,DE_MIGHT_IGNORE,TP,pool,409,"} catch (Exception e) {
","@Override
public void returnObject(K key, T t) throws Exception {
ObjectDeque<T> objectDeque = poolMap.get(key);
PooledObject<T> p = objectDeque.getAllObjects().get(t);
if (p == null) {
throw new IllegalStateException(""Returned object not currently part of this pool"");
}
long activeTime = p.getActiveTimeMillis();
if (getTestOnReturn()) {
if (!factory.validateObject(key, t)) {
try {
destroy(key, p, true);
} catch (Exception e) {
}
updateStatsReturn(activeTime);
return;
}
}
try {
factory.passivateObject(key, t);
} catch (Exception e1) {
try {
destroy(key, p, true);
} catch (Exception e) {
}
updateStatsReturn(activeTime);
return;
}
if (!p.deallocate()) {
throw new IllegalStateException(""Object has already been retured to this pool"");
}
int maxIdle = getMaxIdlePerKey();
LinkedBlockingDeque<PooledObject<T>> idleObjects = objectDeque.getIdleObjects();
if (isClosed() || maxIdle > -1 && maxIdle <= idleObjects.size()) {
try {
destroy(key, p, true);
} catch (Exception e) {
}
} else {
if (getLifo()) {
idleObjects.addFirst(p);
} else {
idleObjects.addLast(p);
}
}
if (hasBorrowWaiters()) {
reuseCapacity();
}
updateStatsReturn(activeTime);
}","@Override
public void returnObject(K key, T t) throws Exception {
ObjectDeque<T> objectdeque<t>Var1 = objectdeque<t>Literal2;
PooledObject<T> pooledobject<t>Var3 = pooledobject<t>Literal4;
if (pooledobject<t>Var3 == null) {
throw new IllegalStateException(""Returned object not currently part of this pool"");
}
long longVar5 = longLiteral6;
if (getTestOnReturn()) {
if (!factory.validateObject(key, t)) {
try {
destroy(key, pooledobject<t>Var3, true);
} catch (Exception e) {
}
updateStatsReturn(longVar5);
return;
}
}
try {
factory.passivateObject(key, t);
} catch (Exception e1) {
try {
destroy(key, pooledobject<t>Var3, true);
} catch (Exception e) {
}
updateStatsReturn(longVar5);
return;
}
if (!pooledobject<t>Var3.deallocate()) {
throw new IllegalStateException(""Object has already been retured to this pool"");
}
int intVar7 = intLiteral8;
LinkedBlockingDeque<PooledObject<T>> linkedblockingdeque<pooledobject<t>>Var9 = linkedblockingdeque<pooledobject<t>>Literal10;
if (isClosed() || intVar7 > -1 && intVar7 <= linkedblockingdeque<pooledobject<t>>Var9.size()) {
try {
destroy(key, pooledobject<t>Var3, true);
} catch (Exception e) {
}
} else {
if (getLifo()) {
linkedblockingdeque<pooledobject<t>>Var9.addFirst(pooledobject<t>Var3);
} else {
linkedblockingdeque<pooledobject<t>>Var9.addLast(pooledobject<t>Var3);
}
}
if (hasBorrowWaiters()) {
reuseCapacity();
}
updateStatsReturn(longVar5);
}"
16560,Multithreaded correctness,IS2_INCONSISTENT_SYNC,TP,pool,425,private int maxSleeping;,private int maxSleeping;,private int intVar1;
16561,DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,TP,pool,426,"if (objectDeque != null) {
","@SuppressWarnings(""null"")
public T borrowObject(K key, long borrowMaxWaitMillis) throws Exception {
assertOpen();
PooledObject<T> p = null;
boolean blockWhenExhausted = getBlockWhenExhausted();
boolean create;
long waitTime = 0;
ObjectDeque<T> objectDeque = register(key);
try {
while (p == null) {
create = false;
if (blockWhenExhausted) {
p = objectDeque.getIdleObjects().pollFirst();
if (p == null) {
create = true;
p = create(key);
}
if (p == null) {
if (borrowMaxWaitMillis < 0) {
p = objectDeque.getIdleObjects().takeFirst();
} else {
waitTime = System.currentTimeMillis();
p = objectDeque.getIdleObjects().pollFirst(borrowMaxWaitMillis, TimeUnit.MILLISECONDS);
waitTime = System.currentTimeMillis() - waitTime;
}
}
if (p == null) {
throw new NoSuchElementException(""Timeout waiting for idle object"");
}
if (!p.allocate()) {
p = null;
}
} else {
if (objectDeque != null) {
p = objectDeque.getIdleObjects().pollFirst();
}
if (p == null) {
create = true;
p = create(key);
}
if (p == null) {
throw new NoSuchElementException(""Pool exhausted"");
}
if (!p.allocate()) {
p = null;
}
}
if (p != null) {
try {
factory.activateObject(key, p.getObject());
} catch (Exception e) {
try {
destroy(key, p, true);
} catch (Exception e1) {
}
p = null;
if (create) {
NoSuchElementException nsee = new NoSuchElementException(""Unable to activate object"");
nsee.initCause(e);
throw nsee;
}
}
if (p != null && getTestOnBorrow()) {
boolean validate = false;
Throwable validationThrowable = null;
try {
validate = factory.validateObject(key, p.getObject());
} catch (Throwable t) {
PoolUtils.checkRethrow(t);
validationThrowable = t;
}
if (!validate) {
try {
destroy(key, p, true);
destroyedByBorrowValidationCount.incrementAndGet();
} catch (Exception e) {
}
p = null;
if (create) {
NoSuchElementException nsee = new NoSuchElementException(""Unable to validate object"");
nsee.initCause(validationThrowable);
throw nsee;
}
}
}
}
}
} finally {
deregister(key);
}
updateStatsBorrow(p, waitTime);
return p.getObject();
}","@SuppressWarnings(""null"")
public T borrowObject(K key, long borrowMaxWaitMillis) throws Exception {
assertOpen();
PooledObject<T> pooledobject<t>Var1 = pooledobject<t>Literal2;
boolean booleanVar3 = booleanLiteral4;
boolean booleanVar5;
long longVar6 = longLiteral7;
ObjectDeque<T> objectdeque<t>Var8 = objectdeque<t>Literal9;
try {
while (pooledobject<t>Var1 == null) {
booleanVar5 = false;
if (booleanVar3) {
pooledobject<t>Var1 = objectdeque<t>Var8.getIdleObjects().pollFirst();
if (pooledobject<t>Var1 == null) {
booleanVar5 = true;
pooledobject<t>Var1 = create(key);
}
if (pooledobject<t>Var1 == null) {
if (borrowMaxWaitMillis < 0) {
pooledobject<t>Var1 = objectdeque<t>Var8.getIdleObjects().takeFirst();
} else {
longVar6 = System.currentTimeMillis();
pooledobject<t>Var1 = objectdeque<t>Var8.getIdleObjects().pollFirst(borrowMaxWaitMillis, TimeUnit.MILLISECONDS);
longVar6 = System.currentTimeMillis() - longVar6;
}
}
if (pooledobject<t>Var1 == null) {
throw new NoSuchElementException(""Timeout waiting for idle object"");
}
if (!pooledobject<t>Var1.allocate()) {
pooledobject<t>Var1 = null;
}
} else {
if (objectdeque<t>Var8 != null) {
pooledobject<t>Var1 = objectdeque<t>Var8.getIdleObjects().pollFirst();
}
if (pooledobject<t>Var1 == null) {
booleanVar5 = true;
pooledobject<t>Var1 = create(key);
}
if (pooledobject<t>Var1 == null) {
throw new NoSuchElementException(""Pool exhausted"");
}
if (!pooledobject<t>Var1.allocate()) {
pooledobject<t>Var1 = null;
}
}
if (pooledobject<t>Var1 != null) {
try {
factory.activateObject(key, pooledobject<t>Var1.getObject());
} catch (Exception e) {
try {
destroy(key, pooledobject<t>Var1, true);
} catch (Exception e1) {
}
pooledobject<t>Var1 = null;
if (booleanVar5) {
NoSuchElementException nosuchelementexceptionVar10 = nosuchelementexceptionLiteral11;
nosuchelementexceptionVar10.initCause(e);
throw nosuchelementexceptionVar10;
}
}
if (pooledobject<t>Var1 != null && getTestOnBorrow()) {
boolean booleanVar12 = booleanLiteral13;
Throwable throwableVar14 = pooledobject<t>Literal2;
try {
booleanVar12 = factory.validateObject(key, pooledobject<t>Var1.getObject());
} catch (Throwable t) {
PoolUtils.checkRethrow(t);
throwableVar14 = t;
}
if (!booleanVar12) {
try {
destroy(key, pooledobject<t>Var1, true);
destroyedByBorrowValidationCount.incrementAndGet();
} catch (Exception e) {
}
pooledobject<t>Var1 = null;
if (booleanVar5) {
NoSuchElementException nosuchelementexceptionVar10 = nosuchelementexceptionLiteral15;
nosuchelementexceptionVar10.initCause(throwableVar14);
throw nosuchelementexceptionVar10;
}
}
}
}
}
} finally {
deregister(key);
}
updateStatsBorrow(pooledobject<t>Var1, longVar6);
return pooledobject<t>Var1.getObject();
}"
16569,BAD_PRACTICE,DE_MIGHT_IGNORE,TP,pool,434,"} catch (Exception e2) {
","public synchronized void returnObject(Object key, Object obj) throws Exception {
decrementActiveCount(key);
if (null != _factory) {
try {
_factory.passivateObject(key, obj);
} catch (Exception e) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e2) {
}
return;
}
}
if (isClosed()) {
if (null != _factory) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e) {
}
}
return;
}
Stack stack = (Stack) _pools.get(key);
if (null == stack) {
stack = new Stack();
stack.ensureCapacity(_initSleepingCapacity > _maxSleeping ? _maxSleeping : _initSleepingCapacity);
_pools.put(key, stack);
}
final int stackSize = stack.size();
if (stackSize >= _maxSleeping) {
final Object staleObj;
if (stackSize > 0) {
staleObj = stack.remove(0);
_totIdle--;
} else {
staleObj = obj;
}
if (null != _factory) {
try {
_factory.destroyObject(key, staleObj);
} catch (Exception e) {
}
}
}
stack.push(obj);
_totIdle++;
}","public synchronized void returnObject(Object key, Object obj) throws Exception {
decrementActiveCount(key);
if (null != _factory) {
try {
_factory.passivateObject(key, obj);
} catch (Exception e) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e2) {
}
return;
}
}
if (isClosed()) {
if (null != _factory) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e) {
}
}
return;
}
Stack stackVar1 = stackLiteral2;
if (null == stackVar1) {
stackVar1 = new Stack();
stackVar1.ensureCapacity(_initSleepingCapacity > _maxSleeping ? _maxSleeping : _initSleepingCapacity);
_pools.put(key, stackVar1);
}
final int intVar3 = intLiteral4;
if (intVar3 >= _maxSleeping) {
final Object objectVar5;
if (intVar3 > 0) {
objectVar5 = stackVar1.remove(0);
_totIdle--;
} else {
objectVar5 = obj;
}
if (null != _factory) {
try {
_factory.destroyObject(key, objectVar5);
} catch (Exception e) {
}
}
}
stackVar1.push(obj);
_totIdle++;
}"
16572,CORRECTNESS,RV_RETURN_VALUE_IGNORED,TP,pool,437,"readLock.tryLock();
","@Override
public int getNumActive(final K key) {
ReadLock readLock = readWriteLock.readLock();
readLock.tryLock();
try {
return keyedPool.getNumActive(key);
} finally {
readLock.unlock();
}
}","@Override
public int getNumActive(final K key) {
ReadLock readlockVar1 = readlockLiteral2;
readlockVar1.tryLock();
try {
return keyedPool.getNumActive(key);
} finally {
readlockVar1.unlock();
}
}"
16575,PERFORMANCE,WMI_WRONG_MAP_ITERATOR,TP,pool,440,"Collection c = (Collection) m.get(key);
","private void destroy(Map m, KeyedPoolableObjectFactory factory) {
for (Iterator keys = m.keySet().iterator(); keys.hasNext(); ) {
Object key = keys.next();
Collection c = (Collection) m.get(key);
for (Iterator it = c.iterator(); it.hasNext(); ) {
try {
factory.destroyObject(key, ((ObjectTimestampPair) (it.next())).value);
} catch (Exception e) {
} finally {
synchronized (this) {
_totalInternalProcessing--;
allocate();
}
}
}
}
}","private void destroy(Map m, KeyedPoolableObjectFactory factory) {
for (Iterator iteratorVar9 = iteratorLiteral10; iteratorVar1.hasNext(); ) {
Object objectVar3 = objectLiteral4;
Collection collectionVar5 = collectionLiteral6;
for (Iterator iteratorVar11 = iteratorLiteral12; iteratorVar7.hasNext(); ) {
try {
factory.destroyObject(objectVar3, ((ObjectTimestampPair) (iteratorVar7.next())).value);
} catch (Exception e) {
} finally {
synchronized (this) {
_totalInternalProcessing--;
allocate();
}
}
}
}
}"
16584,Multithreaded correctness,IS2_INCONSISTENT_SYNC,TP,pool,449,protected int _totIdle = 0;,protected int _totIdle = 0;,protected int intVar1 = intLiteral2;
16588,BAD_PRACTICE,DE_MIGHT_IGNORE,TP,pool,453,"} catch(Exception e) {
","@Override
public void run() {
ClassLoader savedClassLoader = Thread.currentThread().getContextClassLoader();
try {
Thread.currentThread().setContextClassLoader(factoryClassLoader);
try {
evict();
} catch (Exception e) {
} catch (OutOfMemoryError oome) {
oome.printStackTrace(System.err);
}
try {
ensureMinIdle();
} catch (Exception e) {
}
} finally {
Thread.currentThread().setContextClassLoader(savedClassLoader);
}
}","@Override
public void run() {
ClassLoader classloaderVar1 = classloaderLiteral2;
try {
Thread.currentThread().setContextClassLoader(factoryClassLoader);
try {
evict();
} catch (Exception e) {
} catch (OutOfMemoryError oome) {
oome.printStackTrace(System.err);
}
try {
ensureMinIdle();
} catch (Exception e) {
}
} finally {
Thread.currentThread().setContextClassLoader(classloaderVar1);
}
}"
16590,CORRECTNESS,RV_RETURN_VALUE_IGNORED,TP,pool,455,"writeLock.tryLock();
","@Override
public void destroyObject(final T obj) throws Exception {
writeLock.tryLock();
try {
factory.destroyObject(obj);
} finally {
writeLock.unlock();
}
}","@Override
public void destroyObject(final T obj) throws Exception {
writeLock.tryLock();
try {
factory.destroyObject(obj);
} finally {
writeLock.unlock();
}
}"
16591,PERFORMANCE,WMI_WRONG_MAP_ITERATOR,TP,pool,456,"poolMap.get(k).getIdleObjects();
","public void clearOldest() {
final Map<PooledObject<T>, K> map = new TreeMap<PooledObject<T>, K>();
for (K k : poolMap.keySet()) {
final LinkedBlockingDeque<PooledObject<T>> idleObjects = poolMap.get(k).getIdleObjects();
for (PooledObject<T> p : idleObjects) {
map.put(p, k);
}
}
int itemsToRemove = ((int) (map.size() * 0.15)) + 1;
Iterator<Map.Entry<PooledObject<T>, K>> iter = map.entrySet().iterator();
while (iter.hasNext() && itemsToRemove > 0) {
Map.Entry<PooledObject<T>, K> entry = iter.next();
K key = entry.getValue();
PooledObject<T> p = entry.getKey();
boolean destroyed = true;
try {
destroyed = destroy(key, p, false);
} catch (Exception e) {
swallowException(e);
}
if (destroyed) {
itemsToRemove--;
}
}
}","public void clearOldest() {
final Map<PooledObject<T>, K> map<pooledobject<t>,k>Var1 = map<pooledobject<t>,k>Literal2;
for (K kVar3 : poolMap.keySet()) {
final LinkedBlockingDeque<PooledObject<T>> linkedblockingdeque<pooledobject<t>>Var4 = linkedblockingdeque<pooledobject<t>>Literal5;
for (PooledObject<T> pooledobject<t>Var6 : linkedblockingdeque<pooledobject<t>>Var4) {
map<pooledobject<t>,k>Var1.put(pooledobject<t>Var6, kVar3);
}
}
int intVar7 = intLiteral8;
Iterator<Map.Entry<PooledObject<T>, K>> iterator<map.entry<pooledobject<t>,k>>Var9 = iterator<map.entry<pooledobject<t>,k>>Literal10;
while (iterator<map.entry<pooledobject<t>,k>>Var9.hasNext() && intVar7 > 0) {
Map.Entry<PooledObject<T>, K> map.entry<pooledobject<t>,k>Var11 = map.entry<pooledobject<t>,k>Literal12;
K kVar13 = kLiteral14;
PooledObject<T> pooledobject<t>Var6 = pooledobject<t>Literal15;
boolean booleanVar16 = booleanLiteral17;
try {
booleanVar16 = destroy(kVar13, pooledobject<t>Var6, false);
} catch (Exception e) {
swallowException(e);
}
if (booleanVar16) {
intVar7--;
}
}
}"
16592,BAD_PRACTICE,DE_MIGHT_IGNORE,TP,pool,457,"} catch (Exception e) {
","public synchronized void invalidateObject(Object key, Object obj) throws Exception {
decrementActiveCount(key);
if (null != _factory) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e) {
}
}
notifyAll();
}","public synchronized void invalidateObject(Object key, Object obj) throws Exception {
decrementActiveCount(key);
if (null != _factory) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e) {
}
}
notifyAll();
}"
16593,PERFORMANCE,WMI_WRONG_MAP_ITERATOR,TP,pool,458,"final ObjectDeque<T> deque = poolMap.get(k);
","private boolean hasBorrowWaiters() {
for (K k : poolMap.keySet()) {
final ObjectDeque<T> deque = poolMap.get(k);
if (deque != null) {
final LinkedBlockingDeque<PooledObject<T>> pool = deque.getIdleObjects();
if (pool.hasTakeWaiters()) {
return true;
}
}
}
return false;
}","private boolean hasBorrowWaiters() {
for (K kVar1 : poolMap.keySet()) {
final ObjectDeque<T> objectdeque<t>Var2 = objectdeque<t>Literal3;
if (objectdeque<t>Var2 != null) {
final LinkedBlockingDeque<PooledObject<T>> linkedblockingdeque<pooledobject<t>>Var4 = linkedblockingdeque<pooledobject<t>>Literal5;
if (linkedblockingdeque<pooledobject<t>>Var4.hasTakeWaiters()) {
return true;
}
}
}
return false;
}"
16599,Multithreaded correctness,IS2_INCONSISTENT_SYNC,TP,pool,464,private boolean _testOnReturn = DEFAULT_TEST_ON_RETURN;,private boolean _testOnReturn = DEFAULT_TEST_ON_RETURN;,private boolean booleanVar1 = booleanLiteral2;
16609,PERFORMANCE,DM_NUMBER_CTOR,TP,pool,474,"_activeCount.put(key,new Integer(1));
","private void incrementActiveCount(K key) {
_totActive++;
Integer old = _activeCount.get(key);
if (null == old) {
_activeCount.put(key, new Integer(1));
} else {
_activeCount.put(key, new Integer(old.intValue() + 1));
}
}","private void incrementActiveCount(K key) {
_totActive++;
Integer integerVar1 = integerLiteral2;
if (null == integerVar1) {
_activeCount.put(key, new Integer(1));
} else {
_activeCount.put(key, new Integer(integerVar1.intValue() + 1));
}
}"
16613,CORRECTNESS,RV_RETURN_VALUE_IGNORED,TP,pool,478,"readLock.tryLock();
","@Override
public int getNumIdle() {
ReadLock readLock = readWriteLock.readLock();
readLock.tryLock();
try {
return keyedPool.getNumIdle();
} finally {
readLock.unlock();
}
}","@Override
public int getNumIdle() {
ReadLock readlockVar1 = readlockLiteral2;
readlockVar1.tryLock();
try {
return keyedPool.getNumIdle();
} finally {
readlockVar1.unlock();
}
}"
16615,Multithreaded correctness,IS2_INCONSISTENT_SYNC,TP,pool,480,private boolean _testOnReturn = DEFAULT_TEST_ON_RETURN;,private boolean _testOnReturn = DEFAULT_TEST_ON_RETURN;,private boolean booleanVar1 = booleanLiteral2;
16617,DODGY_CODE,ICAST_IDIV_CAST_TO_DOUBLE,TP,pool,482,"result = result * ((counter - 1) / counter) +
","private long getMeanFromStatsCache(LinkedList<Long> cache) {
List<Long> times = new ArrayList<Long>(AVERAGE_TIMING_STATS_CACHE_SIZE);
synchronized (cache) {
times.addAll(cache);
}
double result = 0;
int counter = 0;
Iterator<Long> iter = times.iterator();
while (iter.hasNext()) {
Long time = iter.next();
if (time != null) {
counter++;
result = result * ((counter - 1) / counter) + time.longValue() / counter;
}
}
return (long) result;
}","private long getMeanFromStatsCache(LinkedList<Long> cache) {
List<Long> list<long>Var1 = list<long>Literal2;
synchronized (cache) {
list<long>Var1.addAll(cache);
}
double doubleVar3 = doubleLiteral4;
int intVar5 = doubleLiteral4;
Iterator<Long> iterator<long>Var6 = iterator<long>Literal7;
while (iterator<long>Var6.hasNext()) {
Long longVar8 = longLiteral9;
if (longVar8 != null) {
intVar5++;
doubleVar3 = doubleVar3 * ((intVar5 - 1) / intVar5) + longVar8.longValue() / intVar5;
}
}
return (long) doubleVar3;
}"
16623,CORRECTNESS,RV_RETURN_VALUE_IGNORED,TP,pool,488,"readLock.tryLock();
","@Override
public int getNumActive() {
ReadLock readLock = readWriteLock.readLock();
readLock.tryLock();
try {
return keyedPool.getNumActive();
} finally {
readLock.unlock();
}
}","@Override
public int getNumActive() {
ReadLock readlockVar1 = readlockLiteral2;
readlockVar1.tryLock();
try {
return keyedPool.getNumActive();
} finally {
readlockVar1.unlock();
}
}"
16635,BAD_PRACTICE,DE_MIGHT_IGNORE,TP,pool,500,"} catch (Exception e) {
","public void clearOldest() {
final Map<PooledObject<T>, K> map = new TreeMap<PooledObject<T>, K>();
for (K k : poolMap.keySet()) {
final LinkedBlockingDeque<PooledObject<T>> idleObjects = poolMap.get(k).getIdleObjects();
for (PooledObject<T> p : idleObjects) {
map.put(p, k);
}
}
int itemsToRemove = ((int) (map.size() * 0.15)) + 1;
Iterator<Map.Entry<PooledObject<T>, K>> iter = map.entrySet().iterator();
while (iter.hasNext() && itemsToRemove > 0) {
Map.Entry<PooledObject<T>, K> entry = iter.next();
K key = entry.getValue();
PooledObject<T> p = entry.getKey();
boolean destroyed = true;
try {
destroyed = destroy(key, p, false);
} catch (Exception e) {
}
if (destroyed) {
itemsToRemove--;
}
}
}","public void clearOldest() {
final Map<PooledObject<T>, K> map<pooledobject<t>,k>Var1 = map<pooledobject<t>,k>Literal2;
for (K kVar3 : poolMap.keySet()) {
final LinkedBlockingDeque<PooledObject<T>> linkedblockingdeque<pooledobject<t>>Var4 = linkedblockingdeque<pooledobject<t>>Literal5;
for (PooledObject<T> pooledobject<t>Var6 : linkedblockingdeque<pooledobject<t>>Var4) {
map<pooledobject<t>,k>Var1.put(pooledobject<t>Var6, kVar3);
}
}
int intVar7 = intLiteral8;
Iterator<Map.Entry<PooledObject<T>, K>> iterator<map.entry<pooledobject<t>,k>>Var9 = iterator<map.entry<pooledobject<t>,k>>Literal10;
while (iterator<map.entry<pooledobject<t>,k>>Var9.hasNext() && intVar7 > 0) {
Map.Entry<PooledObject<T>, K> map.entry<pooledobject<t>,k>Var11 = map.entry<pooledobject<t>,k>Literal12;
K kVar13 = kLiteral14;
PooledObject<T> pooledobject<t>Var6 = pooledobject<t>Literal15;
boolean booleanVar16 = booleanLiteral17;
try {
booleanVar16 = destroy(kVar13, pooledobject<t>Var6, false);
} catch (Exception e) {
}
if (booleanVar16) {
intVar7--;
}
}
}"
16645,CORRECTNESS,RV_RETURN_VALUE_IGNORED,TP,pool,510,"writeLock.tryLock();
","@Override
public void clear() throws Exception, UnsupportedOperationException {
WriteLock writeLock = readWriteLock.writeLock();
writeLock.tryLock();
try {
keyedPool.clear();
} finally {
writeLock.unlock();
}
}","@Override
public void clear() throws Exception, UnsupportedOperationException {
WriteLock writelockVar1 = writelockLiteral2;
writelockVar1.tryLock();
try {
keyedPool.clear();
} finally {
writelockVar1.unlock();
}
}"
16646,BAD_PRACTICE,NP_EQUALS_SHOULD_HANDLE_NULL_ARGUMENT,TP,pool,511,"return ((IdentityWrapper) other).instance == instance;
","@Override
@SuppressWarnings(""rawtypes"")
public boolean equals(final Object other) {
return ((IdentityWrapper) other).instance == instance;
}","@Override
@SuppressWarnings(""rawtypes"")
public boolean equals(final Object other) {
return ((IdentityWrapper) other).instance == instance;
}"
16660,Multithreaded correctness,IS2_INCONSISTENT_SYNC,TP,pool,525,private boolean _testWhileIdle = DEFAULT_TEST_WHILE_IDLE;,private boolean _testWhileIdle = DEFAULT_TEST_WHILE_IDLE;,private boolean booleanVar1 = booleanLiteral2;
16671,PERFORMANCE,WMI_WRONG_MAP_ITERATOR,TP,pool,536,"ObjectDeque<T> queue = poolMap.get(key);
","@Override
public Map<String, Integer> getNumWaitersByKey() {
Map<String, Integer> result = new HashMap<String, Integer>();
for (K key : poolMap.keySet()) {
ObjectDeque<T> queue = poolMap.get(key);
if (queue != null) {
if (getBlockWhenExhausted()) {
result.put(key.toString(), Integer.valueOf(queue.getIdleObjects().getTakeQueueLength()));
} else {
result.put(key.toString(), Integer.valueOf(0));
}
}
}
return result;
}","@Override
public Map<String, Integer> getNumWaitersByKey() {
Map<String, Integer> map<string,integer>Var1 = map<string,integer>Literal2;
for (K kVar3 : poolMap.keySet()) {
ObjectDeque<T> objectdeque<t>Var4 = objectdeque<t>Literal5;
if (objectdeque<t>Var4 != null) {
if (getBlockWhenExhausted()) {
map<string,integer>Var1.put(kVar3.toString(), Integer.valueOf(objectdeque<t>Var4.getIdleObjects().getTakeQueueLength()));
} else {
map<string,integer>Var1.put(kVar3.toString(), Integer.valueOf(0));
}
}
}
return map<string,integer>Var1;
}"
16672,Multithreaded correctness,IS2_INCONSISTENT_SYNC,TP,pool,537,private int maxSleeping;,private int maxSleeping;,private int intVar1;
16674,Multithreaded correctness,IS2_INCONSISTENT_SYNC,TP,pool,539,private int initIdleCapacity;,private int initIdleCapacity;,private int intVar1;
16688,PERFORMANCE,WMI_WRONG_MAP_ITERATOR,TP,pool,553,"ObjectDeque<T> queue = poolMap.get(key);
","@Override
public Map<String, List<DefaultPooledObjectInfo>> listAllObjects() {
Map<String, List<DefaultPooledObjectInfo>> result = new HashMap<String, List<DefaultPooledObjectInfo>>();
for (K key : poolMap.keySet()) {
ObjectDeque<T> queue = poolMap.get(key);
if (queue != null) {
List<DefaultPooledObjectInfo> list = new ArrayList<DefaultPooledObjectInfo>();
result.put(key.toString(), list);
for (PooledObject<T> p : queue.getAllObjects().values()) {
list.add(new DefaultPooledObjectInfo(p));
}
}
}
return result;
}","@Override
public Map<String, List<DefaultPooledObjectInfo>> listAllObjects() {
Map<String, List<DefaultPooledObjectInfo>> map<string,list<defaultpooledobjectinfo>>Var1 = map<string,list<defaultpooledobjectinfo>>Literal2;
for (K kVar3 : poolMap.keySet()) {
ObjectDeque<T> objectdeque<t>Var4 = objectdeque<t>Literal5;
if (objectdeque<t>Var4 != null) {
List<DefaultPooledObjectInfo> list<defaultpooledobjectinfo>Var6 = list<defaultpooledobjectinfo>Literal7;
map<string,list<defaultpooledobjectinfo>>Var1.put(kVar3.toString(), list<defaultpooledobjectinfo>Var6);
for (PooledObject<T> pooledobject<t>Var8 : objectdeque<t>Var4.getAllObjects().values()) {
list<defaultpooledobjectinfo>Var6.add(new DefaultPooledObjectInfo(pooledobject<t>Var8));
}
}
}
return map<string,list<defaultpooledobjectinfo>>Var1;
}"
16702,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,567,"} catch (Exception e) {
","@Override
public void invalidateObject(final T obj) {
try {
pool.invalidateObject(obj);
} catch (Exception e) {
}
}","@Override
public void invalidateObject(final T obj) {
try {
pool.invalidateObject(obj);
} catch (Exception e) {
}
}"
16703,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,568,"} catch (Exception e) {
","@Override
public void invalidateObject(final K key, final V obj) {
try {
keyedPool.invalidateObject(key, obj);
} catch (Exception e) {
}
}","@Override
public void invalidateObject(final K key, final V obj) {
try {
keyedPool.invalidateObject(key, obj);
} catch (Exception e) {
}
}"
16712,PERFORMANCE,WMI_WRONG_MAP_ITERATOR,FP,pool,577,"final ObjectDeque<T> deque = poolMap.get(k);
","private void reuseCapacity() {
final int maxTotalPerKeySave = getMaxTotalPerKey();
int maxQueueLength = 0;
LinkedBlockingDeque<PooledObject<T>> mostLoaded = null;
K loadedKey = null;
for (K k : poolMap.keySet()) {
final ObjectDeque<T> deque = poolMap.get(k);
if (deque != null) {
final LinkedBlockingDeque<PooledObject<T>> pool = deque.getIdleObjects();
final int queueLength = pool.getTakeQueueLength();
if (getNumActive(k) < maxTotalPerKeySave && queueLength > maxQueueLength) {
maxQueueLength = queueLength;
mostLoaded = pool;
loadedKey = k;
}
}
}
if (mostLoaded != null) {
register(loadedKey);
try {
PooledObject<T> p = create(loadedKey);
if (p != null) {
addIdleObject(loadedKey, p);
}
} catch (Exception e) {
swallowException(e);
} finally {
deregister(loadedKey);
}
}
}","private void reuseCapacity() {
final int intVar1 = intLiteral2;
int intVar3 = intLiteral4;
LinkedBlockingDeque<PooledObject<T>> linkedblockingdeque<pooledobject<t>>Var5 = linkedblockingdeque<pooledobject<t>>Literal6;
K kVar7 = linkedblockingdeque<pooledobject<t>>Literal6;
for (K kVar8 : poolMap.keySet()) {
final ObjectDeque<T> objectdeque<t>Var9 = objectdeque<t>Literal10;
if (objectdeque<t>Var9 != null) {
final LinkedBlockingDeque<PooledObject<T>> linkedblockingdeque<pooledobject<t>>Var11 = linkedblockingdeque<pooledobject<t>>Literal12;
final int intVar13 = intLiteral14;
if (getNumActive(kVar8) < intVar1 && intVar13 > intVar3) {
intVar3 = intVar13;
linkedblockingdeque<pooledobject<t>>Var5 = linkedblockingdeque<pooledobject<t>>Var11;
kVar7 = kVar8;
}
}
}
if (linkedblockingdeque<pooledobject<t>>Var5 != null) {
register(kVar7);
try {
PooledObject<T> pooledobject<t>Var15 = pooledobject<t>Literal16;
if (pooledobject<t>Var15 != null) {
addIdleObject(kVar7, pooledobject<t>Var15);
}
} catch (Exception e) {
swallowException(e);
} finally {
deregister(kVar7);
}
}
}"
16740,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,605,"} catch (Exception e1) {
","public T borrowObject(long borrowMaxWaitMillis) throws Exception {
assertOpen();
AbandonedConfig ac = this.abandonedConfig;
if (ac != null && ac.getRemoveAbandonedOnBorrow() && (getNumIdle() < 2) && (getNumActive() > getMaxTotal() - 3)) {
removeAbandoned(ac);
}
PooledObject<T> p = null;
boolean blockWhenExhausted = getBlockWhenExhausted();
boolean create;
long waitTime = 0;
while (p == null) {
create = false;
if (blockWhenExhausted) {
p = idleObjects.pollFirst();
if (p == null) {
create = true;
p = create();
}
if (p == null) {
if (borrowMaxWaitMillis < 0) {
p = idleObjects.takeFirst();
} else {
waitTime = System.currentTimeMillis();
p = idleObjects.pollFirst(borrowMaxWaitMillis, TimeUnit.MILLISECONDS);
waitTime = System.currentTimeMillis() - waitTime;
}
}
if (p == null) {
throw new NoSuchElementException(""Timeout waiting for idle object"");
}
if (!p.allocate()) {
p = null;
}
} else {
p = idleObjects.pollFirst();
if (p == null) {
create = true;
p = create();
}
if (p == null) {
throw new NoSuchElementException(""Pool exhausted"");
}
if (!p.allocate()) {
p = null;
}
}
if (p != null) {
try {
factory.activateObject(p);
} catch (Exception e) {
try {
destroy(p);
} catch (Exception e1) {
}
p = null;
if (create) {
NoSuchElementException nsee = new NoSuchElementException(""Unable to activate object"");
nsee.initCause(e);
throw nsee;
}
}
if (p != null && getTestOnBorrow()) {
boolean validate = false;
Throwable validationThrowable = null;
try {
validate = factory.validateObject(p);
} catch (Throwable t) {
PoolUtils.checkRethrow(t);
validationThrowable = t;
}
if (!validate) {
try {
destroy(p);
destroyedByBorrowValidationCount.incrementAndGet();
} catch (Exception e) {
}
p = null;
if (create) {
NoSuchElementException nsee = new NoSuchElementException(""Unable to validate object"");
nsee.initCause(validationThrowable);
throw nsee;
}
}
}
}
}
updateStatsBorrow(p, waitTime);
return p.getObject();
}","public T borrowObject(long borrowMaxWaitMillis) throws Exception {
assertOpen();
AbandonedConfig abandonedconfigVar1 = abandonedconfigLiteral2;
if (abandonedconfigVar1 != null && abandonedconfigVar1.getRemoveAbandonedOnBorrow() && (getNumIdle() < 2) && (getNumActive() > getMaxTotal() - 3)) {
removeAbandoned(abandonedconfigVar1);
}
PooledObject<T> pooledobject<t>Var3 = pooledobject<t>Literal4;
boolean booleanVar5 = booleanLiteral6;
boolean booleanVar7;
long longVar8 = longLiteral9;
while (pooledobject<t>Var3 == null) {
booleanVar7 = false;
if (booleanVar5) {
pooledobject<t>Var3 = idleObjects.pollFirst();
if (pooledobject<t>Var3 == null) {
booleanVar7 = true;
pooledobject<t>Var3 = create();
}
if (pooledobject<t>Var3 == null) {
if (borrowMaxWaitMillis < 0) {
pooledobject<t>Var3 = idleObjects.takeFirst();
} else {
longVar8 = System.currentTimeMillis();
pooledobject<t>Var3 = idleObjects.pollFirst(borrowMaxWaitMillis, TimeUnit.MILLISECONDS);
longVar8 = System.currentTimeMillis() - longVar8;
}
}
if (pooledobject<t>Var3 == null) {
throw new NoSuchElementException(""Timeout waiting for idle object"");
}
if (!pooledobject<t>Var3.allocate()) {
pooledobject<t>Var3 = null;
}
} else {
pooledobject<t>Var3 = idleObjects.pollFirst();
if (pooledobject<t>Var3 == null) {
booleanVar7 = true;
pooledobject<t>Var3 = create();
}
if (pooledobject<t>Var3 == null) {
throw new NoSuchElementException(""Pool exhausted"");
}
if (!pooledobject<t>Var3.allocate()) {
pooledobject<t>Var3 = null;
}
}
if (pooledobject<t>Var3 != null) {
try {
factory.activateObject(pooledobject<t>Var3);
} catch (Exception e) {
try {
destroy(pooledobject<t>Var3);
} catch (Exception e1) {
}
pooledobject<t>Var3 = null;
if (booleanVar7) {
NoSuchElementException nosuchelementexceptionVar10 = nosuchelementexceptionLiteral11;
nosuchelementexceptionVar10.initCause(e);
throw nosuchelementexceptionVar10;
}
}
if (pooledobject<t>Var3 != null && getTestOnBorrow()) {
boolean booleanVar12 = booleanLiteral13;
Throwable throwableVar14 = pooledobject<t>Literal4;
try {
booleanVar12 = factory.validateObject(pooledobject<t>Var3);
} catch (Throwable t) {
PoolUtils.checkRethrow(t);
throwableVar14 = t;
}
if (!booleanVar12) {
try {
destroy(pooledobject<t>Var3);
destroyedByBorrowValidationCount.incrementAndGet();
} catch (Exception e) {
}
pooledobject<t>Var3 = null;
if (booleanVar7) {
NoSuchElementException nosuchelementexceptionVar10 = nosuchelementexceptionLiteral15;
nosuchelementexceptionVar10.initCause(throwableVar14);
throw nosuchelementexceptionVar10;
}
}
}
}
}
updateStatsBorrow(pooledobject<t>Var3, longVar8);
return pooledobject<t>Var3.getObject();
}"
16754,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,619,"} catch (Exception e) {
","public void close() {
try {
keyedPool.close();
} catch (Exception e) {
}
}","public void close() {
try {
keyedPool.close();
} catch (Exception e) {
}
}"
16757,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,622,"} catch (Exception e) {
","public void invalidateObject(final T obj) {
if (type.isInstance(obj)) {
try {
pool.invalidateObject(obj);
} catch (Exception e) {
}
} else {
throw new ClassCastException(""Invalidated object is not of type: "" + type.getName() + "" was: "" + obj);
}
}","public void invalidateObject(final T obj) {
if (type.isInstance(obj)) {
try {
pool.invalidateObject(obj);
} catch (Exception e) {
}
} else {
throw new ClassCastException(""Invalidated object is not of type: "" + type.getName() + "" was: "" + obj);
}
}"
16758,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,623,"} catch (Exception e) {
","public void returnObject(final K key, final V obj) {
if (type.isInstance(obj)) {
try {
keyedPool.returnObject(key, obj);
} catch (Exception e) {
}
} else {
throw new ClassCastException(""Returned object for key: "" + key + "" is not of type: "" + type.getName() + "" was: "" + obj);
}
}","public void returnObject(final K key, final V obj) {
if (type.isInstance(obj)) {
try {
keyedPool.returnObject(key, obj);
} catch (Exception e) {
}
} else {
throw new ClassCastException(""Returned object for key: "" + key + "" is not of type: "" + type.getName() + "" was: "" + obj);
}
}"
16776,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,641,"} catch(Exception e) {
","@Override
public void run() {
try {
evict();
} catch (Exception e) {
} catch (OutOfMemoryError oome) {
oome.printStackTrace(System.err);
}
try {
ensureMinIdle();
} catch (Exception e) {
}
}","@Override
public void run() {
try {
evict();
} catch (Exception e) {
} catch (OutOfMemoryError oome) {
oome.printStackTrace(System.err);
}
try {
ensureMinIdle();
} catch (Exception e) {
}
}"
16792,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,657,"} catch(Exception e) {
","@Override
public synchronized void returnObject(T obj) throws Exception {
boolean success = !isClosed();
if (_factory != null) {
if (!_factory.validateObject(obj)) {
success = false;
} else {
try {
_factory.passivateObject(obj);
} catch (Exception e) {
success = false;
}
}
}
boolean shouldDestroy = !success;
_numActive--;
if (success) {
_pool.add(new SoftReference<T>(obj, refQueue));
}
notifyAll();
if (shouldDestroy && _factory != null) {
try {
_factory.destroyObject(obj);
} catch (Exception e) {
}
}
}","@Override
public synchronized void returnObject(T obj) throws Exception {
boolean booleanVar1 = booleanLiteral2;
if (_factory != null) {
if (!_factory.validateObject(obj)) {
booleanVar1 = false;
} else {
try {
_factory.passivateObject(obj);
} catch (Exception e) {
booleanVar1 = false;
}
}
}
boolean booleanVar3 = booleanLiteral4;
_numActive--;
if (booleanVar1) {
_pool.add(new SoftReference<T>(obj, refQueue));
}
notifyAll();
if (booleanVar3 && _factory != null) {
try {
_factory.destroyObject(obj);
} catch (Exception e) {
}
}
}"
16798,PERFORMANCE,WMI_WRONG_MAP_ITERATOR,FP,pool,663,"Stack<V> s = _pools.get(key);
","@Override
public synchronized String toString() {
StringBuffer buf = new StringBuffer();
buf.append(getClass().getName());
buf.append("" contains "").append(_pools.size()).append("" distinct pools: "");
Iterator<K> it = _pools.keySet().iterator();
while (it.hasNext()) {
K key = it.next();
buf.append("" |"").append(key).append(""|="");
Stack<V> s = _pools.get(key);
buf.append(s.size());
}
return buf.toString();
}","@Override
public synchronized String toString() {
StringBuffer stringbufferVar1 = stringbufferLiteral2;
stringbufferVar1.append(getClass().getName());
stringbufferVar1.append("" contains "").append(_pools.size()).append("" distinct pools: "");
Iterator<K> iterator<k>Var3 = iterator<k>Literal4;
while (iterator<k>Var3.hasNext()) {
K kVar5 = kLiteral6;
stringbufferVar1.append("" |"").append(kVar5).append(""|="");
Stack<V> stack<v>Var7 = stack<v>Literal8;
stringbufferVar1.append(stack<v>Var7.size());
}
return stringbufferVar1.toString();
}"
16801,DODGY_CODE,RI_REDUNDANT_INTERFACES,FP,pool,666,"this(null,DEFAULT_MAX_SLEEPING,DEFAULT_INIT_SLEEPING_CAPACITY);
}
public StackKeyedObjectPool(int max) {
this(null,max,DEFAULT_INIT_SLEEPING_CAPACITY);
}
public StackKeyedObjectPool(int max, int init) {
this(null,max,init);
}
public StackKeyedObjectPool(KeyedPoolableObjectFactory<K, V> factory) {
this(factory,DEFAULT_MAX_SLEEPING);
}
public StackKeyedObjectPool(KeyedPoolableObjectFactory<K, V> factory, int max) {
this(factory,max,DEFAULT_INIT_SLEEPING_CAPACITY);
}
public StackKeyedObjectPool(KeyedPoolableObjectFactory<K, V> factory, int max, int init) {
_factory = factory;
_maxSleeping = (max < 0 ? DEFAULT_MAX_SLEEPING : max);
_initSleepingCapacity = (init < 1 ? DEFAULT_INIT_SLEEPING_CAPACITY : init);
_pools = new HashMap<K, Stack<V>>();
_activeCount = new HashMap<K, Integer>();
}
@Override
public synchronized V borrowObject(K key) throws Exception {
assertOpen();
Stack<V> stack = (_pools.get(key));
if(null == stack) {
stack = new Stack<V>();
stack.ensureCapacity( _initSleepingCapacity > _maxSleeping ? _maxSleeping : _initSleepingCapacity);
_pools.put(key,stack);
}
V obj = null;
do {
boolean newlyMade = false;
if (!stack.empty()) {
obj = stack.pop();
_totIdle--;
} else {
if(null == _factory) {
throw new NoSuchElementException(""pools without a factory cannot create new objects as needed."");
} else {
obj = _factory.makeObject(key);
newlyMade = true;
}
}
if (null != _factory && null != obj) {
try {
_factory.activateObject(key, obj);
if (!_factory.validateObject(key, obj)) {
throw new Exception(""ValidateObject failed"");
}
} catch (Throwable t) {
PoolUtils.checkRethrow(t);
try {
_factory.destroyObject(key,obj);
} catch (Throwable t2) {
PoolUtils.checkRethrow(t2);
} finally {
obj = null;
}
if (newlyMade) {
throw new NoSuchElementException(
""Could not create a validated object, cause: "" +
t.getMessage());
}
}
}
} while (obj == null);
incrementActiveCount(key);
return obj;
}
@Override
public synchronized void returnObject(K key, V obj) throws Exception {
decrementActiveCount(key);
if (null != _factory) {
if (_factory.validateObject(key, obj)) {
try {
_factory.passivateObject(key, obj);
} catch (Exception ex) {
_factory.destroyObject(key, obj);
return;
}
} else {
return;
}
}
if (isClosed()) {
if (null != _factory) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e) {
}
}
return;
}
Stack<V> stack = _pools.get(key);
if(null == stack) {
stack = new Stack<V>();
stack.ensureCapacity( _initSleepingCapacity > _maxSleeping ? _maxSleeping : _initSleepingCapacity);
_pools.put(key,stack);
}
final int stackSize = stack.size();
if (stackSize >= _maxSleeping) {
final V staleObj;
if (stackSize > 0) {
staleObj = stack.remove(0);
_totIdle--;
} else {
staleObj = obj;
}
if(null != _factory) {
try {
_factory.destroyObject(key, staleObj);
} catch (Exception e) {
}
}
}
stack.push(obj);
_totIdle++;
}
@Override
public synchronized void invalidateObject(K key, V obj) throws Exception {
decrementActiveCount(key);
if(null != _factory) {
_factory.destroyObject(key,obj);
}
notifyAll(); 
}
@Override
public synchronized void addObject(K key) throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
V obj = _factory.makeObject(key);
try {
if (!_factory.validateObject(key, obj)) {
return;
}
} catch (Exception e) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e2) {
}
return;
}
_factory.passivateObject(key, obj);
Stack<V> stack = _pools.get(key);
if(null == stack) {
stack = new Stack<V>();
stack.ensureCapacity( _initSleepingCapacity > _maxSleeping ? _maxSleeping : _initSleepingCapacity);
_pools.put(key,stack);
}
final int stackSize = stack.size();
if (stackSize >= _maxSleeping) {
final V staleObj;
if (stackSize > 0) {
staleObj = stack.remove(0);
_totIdle--;
} else {
staleObj = obj;
}
try {
_factory.destroyObject(key, staleObj);
} catch (Exception e) {
if (obj == staleObj) {
throw e;
}
}
} else {
stack.push(obj);
_totIdle++;
}
}
@Override
public synchronized int getNumIdle() {
return _totIdle;
}
@Override
public synchronized int getNumActive() {
return _totActive;
}
@Override
public synchronized int getNumActive(K key) {
return getActiveCount(key);
}
@Override
public synchronized int getNumIdle(K key) {
try {
return(_pools.get(key)).size();
} catch(Exception e) {
return 0;
}
}
@Override
public synchronized void clear() {
Iterator<K> it = _pools.keySet().iterator();
while(it.hasNext()) {
K key = it.next();
Stack<V> stack = _pools.get(key);
destroyStack(key,stack);
}
_totIdle = 0;
_pools.clear();
_activeCount.clear();
}
@Override
public synchronized void clear(K key) {
Stack<V> stack = _pools.remove(key);
destroyStack(key,stack);
}
private synchronized void destroyStack(K key, Stack<V> stack) {
if(null == stack) {
return;
} else {
if(null != _factory) {
Iterator<V> it = stack.iterator();
while(it.hasNext()) {
try {
_factory.destroyObject(key,it.next());
} catch(Exception e) {
}
}
}
_totIdle -= stack.size();
_activeCount.remove(key);
stack.clear();
}
}
@Override
public synchronized String toString() {
StringBuffer buf = new StringBuffer();
buf.append(getClass().getName());
buf.append("" contains "").append(_pools.size()).append("" distinct pools: "");
Iterator<K> it = _pools.keySet().iterator();
while(it.hasNext()) {
K key = it.next();
buf.append("" |"").append(key).append(""|="");
Stack<V> s = _pools.get(key);
buf.append(s.size());
}
return buf.toString();
}
@Override
public void close() throws Exception {
super.close();
clear();
}
@Deprecated
@Override
public synchronized void setFactory(KeyedPoolableObjectFactory<K, V> factory) throws IllegalStateException {
if(0 < getNumActive()) {
throw new IllegalStateException(""Objects are already active"");
} else {
clear();
_factory = factory;
}
}
public synchronized KeyedPoolableObjectFactory<K, V> getFactory() {
return _factory;
}
private int getActiveCount(K key) {
try {
return _activeCount.get(key).intValue();
} catch(NoSuchElementException e) {
return 0;
} catch(NullPointerException e) {
return 0;
}
}
private void incrementActiveCount(K key) {
_totActive++;
Integer old = _activeCount.get(key);
if(null == old) {
_activeCount.put(key,new Integer(1));
} else {
_activeCount.put(key,new Integer(old.intValue() + 1));
}
}
private void decrementActiveCount(K key) {
_totActive--;
Integer active = _activeCount.get(key);
if(null == active) {
} else if(active.intValue() <= 1) {
_activeCount.remove(key);
} else {
_activeCount.put(key, new Integer(active.intValue() - 1));
}
}
public Map<K, Stack<V>> getPools() {
return _pools;
}
public int getMaxSleeping() {
return _maxSleeping;
}
public int getInitSleepingCapacity() {
return _initSleepingCapacity;
}
public int getTotActive() {
return _totActive;
}
public int getTotIdle() {
return _totIdle;
}
public Map<K, Integer> getActiveCount() {
return _activeCount;
}
protected static final int DEFAULT_MAX_SLEEPING  = 8;
protected static final int DEFAULT_INIT_SLEEPING_CAPACITY = 4;
@Deprecated
protected HashMap<K, Stack<V>> _pools = null;
@Deprecated
protected KeyedPoolableObjectFactory<K, V> _factory = null;
@Deprecated
protected int _maxSleeping = DEFAULT_MAX_SLEEPING;
@Deprecated
protected int _initSleepingCapacity = DEFAULT_INIT_SLEEPING_CAPACITY;
@Deprecated
protected int _totActive = 0;
@Deprecated
protected int _totIdle = 0;
@Deprecated
","@Override
public synchronized void addObject(K key) throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
V obj = _factory.makeObject(key);
try {
if (!_factory.validateObject(key, obj)) {
return;
}
} catch (Exception e) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e2) {
}
return;
}
_factory.passivateObject(key, obj);
Stack<V> stack = _pools.get(key);
if (null == stack) {
stack = new Stack<V>();
stack.ensureCapacity(_initSleepingCapacity > _maxSleeping ? _maxSleeping : _initSleepingCapacity);
_pools.put(key, stack);
}
final int stackSize = stack.size();
if (stackSize >= _maxSleeping) {
final V staleObj;
if (stackSize > 0) {
staleObj = stack.remove(0);
_totIdle--;
} else {
staleObj = obj;
}
try {
_factory.destroyObject(key, staleObj);
} catch (Exception e) {
if (obj == staleObj) {
throw e;
}
}
} else {
stack.push(obj);
_totIdle++;
}
}","@Override
public synchronized void addObject(K key) throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
V vVar1 = vLiteral2;
try {
if (!_factory.validateObject(key, vVar1)) {
return;
}
} catch (Exception e) {
try {
_factory.destroyObject(key, vVar1);
} catch (Exception e2) {
}
return;
}
_factory.passivateObject(key, vVar1);
Stack<V> stack<v>Var3 = stack<v>Literal4;
if (null == stack<v>Var3) {
stack<v>Var3 = new Stack<V>();
stack<v>Var3.ensureCapacity(_initSleepingCapacity > _maxSleeping ? _maxSleeping : _initSleepingCapacity);
_pools.put(key, stack<v>Var3);
}
final int intVar5 = intLiteral6;
if (intVar5 >= _maxSleeping) {
final V vVar7;
if (intVar5 > 0) {
vVar7 = stack<v>Var3.remove(0);
_totIdle--;
} else {
vVar7 = vVar1;
}
try {
_factory.destroyObject(key, vVar7);
} catch (Exception e) {
if (vVar1 == vVar7) {
throw e;
}
}
} else {
stack<v>Var3.push(vVar1);
_totIdle++;
}
}"
16803,PERFORMANCE,WMI_WRONG_MAP_ITERATOR,FP,pool,668,"Stack<V> stack = _pools.get(key);
","@Override
public synchronized void clear() {
Iterator<K> it = _pools.keySet().iterator();
while (it.hasNext()) {
K key = it.next();
Stack<V> stack = _pools.get(key);
destroyStack(key, stack);
}
_totIdle = 0;
_pools.clear();
_activeCount.clear();
}","@Override
public synchronized void clear() {
Iterator<K> iterator<k>Var1 = iterator<k>Literal2;
while (iterator<k>Var1.hasNext()) {
K kVar3 = kLiteral4;
Stack<V> stack<v>Var5 = stack<v>Literal6;
destroyStack(kVar3, stack<v>Var5);
}
_totIdle = 0;
_pools.clear();
_activeCount.clear();
}"
16891,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,756,"} catch (Exception e) {
","public void returnObject(final Object obj) {
synchronized (lock) {
try {
pool.returnObject(obj);
} catch (Exception e) {
}
}
}","public void returnObject(final Object obj) {
synchronized (lock) {
try {
pool.returnObject(obj);
} catch (Exception e) {
}
}
}"
16895,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,760,"} catch (Exception e) {
","public void invalidateObject(final Object key, final Object obj) {
if (type.isInstance(obj)) {
try {
keyedPool.invalidateObject(key, obj);
} catch (Exception e) {
}
} else {
throw new ClassCastException(""Invalidated object for key: "" + key + "" is not of type: "" + type.getName() + "" was: "" + obj);
}
}","public void invalidateObject(final Object key, final Object obj) {
if (type.isInstance(obj)) {
try {
keyedPool.invalidateObject(key, obj);
} catch (Exception e) {
}
} else {
throw new ClassCastException(""Invalidated object for key: "" + key + "" is not of type: "" + type.getName() + "" was: "" + obj);
}
}"
16896,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,761,"} catch (Exception e) {
","public void close() {
try {
keyedPool.close();
} catch (Exception e) {
}
}","public void close() {
try {
keyedPool.close();
} catch (Exception e) {
}
}"
16901,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,766,"} catch (Exception e) {
","public void returnObject(final Object obj) {
if (type.isInstance(obj)) {
try {
pool.returnObject(obj);
} catch (Exception e) {
}
} else {
throw new ClassCastException(""Returned object is not of type: "" + type.getName() + "" was: "" + obj);
}
}","public void returnObject(final Object obj) {
if (type.isInstance(obj)) {
try {
pool.returnObject(obj);
} catch (Exception e) {
}
} else {
throw new ClassCastException(""Returned object is not of type: "" + type.getName() + "" was: "" + obj);
}
}"
16907,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,772,"} catch (Exception e) {
","public void invalidateObject(final Object key, final Object obj) {
try {
keyedPool.invalidateObject(key, obj);
} catch (Exception e) {
}
}","public void invalidateObject(final Object key, final Object obj) {
try {
keyedPool.invalidateObject(key, obj);
} catch (Exception e) {
}
}"
16915,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,780,"} catch (Exception ex2) {
","public void addObject(Object key) throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
Object obj = _factory.makeObject(key);
try {
assertOpen();
addObjectToPool(key, obj, false);
} catch (IllegalStateException ex) {
try {
_factory.destroyObject(key, obj);
} catch (Exception ex2) {
}
throw ex;
}
}","public void addObject(Object key) throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
Object objectVar1 = objectLiteral2;
try {
assertOpen();
addObjectToPool(key, objectVar1, false);
} catch (IllegalStateException ex) {
try {
_factory.destroyObject(key, objectVar1);
} catch (Exception ex2) {
}
throw ex;
}
}"
16920,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,785,"catch (Exception e) {
","public synchronized void preparePool(Object key, boolean populateImmediately) {
ObjectQueue pool = (ObjectQueue) (_poolMap.get(key));
if (null == pool) {
pool = new ObjectQueue();
_poolMap.put(key, pool);
_poolList.add(key);
}
if (populateImmediately) {
try {
ensureMinIdle(key);
} catch (Exception e) {
}
}
}","public synchronized void preparePool(Object key, boolean populateImmediately) {
ObjectQueue objectqueueVar1 = objectqueueLiteral2;
if (null == objectqueueVar1) {
objectqueueVar1 = new ObjectQueue();
_poolMap.put(key, objectqueueVar1);
_poolList.add(key);
}
if (populateImmediately) {
try {
ensureMinIdle(key);
} catch (Exception e) {
}
}
}"
16923,PERFORMANCE,WMI_WRONG_MAP_ITERATOR,FP,pool,788,"ObjectQueue pool = (ObjectQueue)_poolMap.get(key);
","public void clear() {
Map toDestroy = new HashMap();
synchronized (this) {
for (Iterator it = _poolMap.keySet().iterator(); it.hasNext(); ) {
Object key = it.next();
ObjectQueue pool = (ObjectQueue) _poolMap.get(key);
List objects = new ArrayList();
objects.addAll(pool.queue);
toDestroy.put(key, objects);
it.remove();
_poolList.remove(key);
_totalIdle = _totalIdle - pool.queue.size();
_totalInternalProcessing = _totalInternalProcessing + pool.queue.size();
pool.queue.clear();
}
}
destroy(toDestroy);
}","public void clear() {
Map mapVar1 = mapLiteral2;
synchronized (this) {
for (Iterator iteratorVar11 = iteratorLiteral12; iteratorVar3.hasNext(); ) {
Object objectVar5 = objectLiteral6;
ObjectQueue objectqueueVar7 = objectqueueLiteral8;
List listVar9 = listLiteral10;
listVar9.addAll(objectqueueVar7.queue);
mapVar1.put(objectVar5, listVar9);
iteratorVar3.remove();
_poolList.remove(objectVar5);
_totalIdle = _totalIdle - objectqueueVar7.queue.size();
_totalInternalProcessing = _totalInternalProcessing + objectqueueVar7.queue.size();
objectqueueVar7.queue.clear();
}
}
destroy(mapVar1);
}"
16924,Multithreaded correctness,NN_NAKED_NOTIFY,FP,pool,789,"latch.notify();
","private void allocate() {
boolean clearOldest = false;
synchronized (this) {
if (isClosed())
return;
Iterator allocationQueueIter = _allocationQueue.iterator();
while (allocationQueueIter.hasNext()) {
Latch latch = (Latch) allocationQueueIter.next();
ObjectQueue pool = (ObjectQueue) (_poolMap.get(latch.getkey()));
if (null == pool) {
pool = new ObjectQueue();
_poolMap.put(latch.getkey(), pool);
_poolList.add(latch.getkey());
}
latch.setPool(pool);
if (!pool.queue.isEmpty()) {
allocationQueueIter.remove();
latch.setPair((ObjectTimestampPair) pool.queue.removeFirst());
pool.incrementInternalProcessingCount();
_totalIdle--;
synchronized (latch) {
latch.notify();
}
continue;
}
if ((_maxTotal > 0) && (_totalActive + _totalIdle + _totalInternalProcessing >= _maxTotal)) {
clearOldest = true;
break;
}
if ((_maxActive < 0 || pool.activeCount + pool.internalProcessingCount < _maxActive) && (_maxTotal < 0 || _totalActive + _totalIdle + _totalInternalProcessing < _maxTotal)) {
allocationQueueIter.remove();
latch.setMayCreate(true);
pool.incrementInternalProcessingCount();
synchronized (latch) {
latch.notify();
}
continue;
}
if (_maxActive < 0) {
break;
}
}
}
if (clearOldest) {
clearOldest();
}
}","private void allocate() {
boolean booleanVar1 = booleanLiteral2;
synchronized (this) {
if (isClosed())
return;
Iterator iteratorVar3 = iteratorLiteral4;
while (iteratorVar3.hasNext()) {
Latch latchVar5 = latchLiteral6;
ObjectQueue objectqueueVar7 = objectqueueLiteral8;
if (null == objectqueueVar7) {
objectqueueVar7 = new ObjectQueue();
_poolMap.put(latchVar5.getkey(), objectqueueVar7);
_poolList.add(latchVar5.getkey());
}
latchVar5.setPool(objectqueueVar7);
if (!objectqueueVar7.queue.isEmpty()) {
iteratorVar3.remove();
latchVar5.setPair((ObjectTimestampPair) objectqueueVar7.queue.removeFirst());
objectqueueVar7.incrementInternalProcessingCount();
_totalIdle--;
synchronized (latchVar5) {
latchVar5.notify();
}
continue;
}
if ((_maxTotal > 0) && (_totalActive + _totalIdle + _totalInternalProcessing >= _maxTotal)) {
booleanVar1 = true;
break;
}
if ((_maxActive < 0 || objectqueueVar7.activeCount + objectqueueVar7.internalProcessingCount < _maxActive) && (_maxTotal < 0 || _totalActive + _totalIdle + _totalInternalProcessing < _maxTotal)) {
iteratorVar3.remove();
latchVar5.setMayCreate(true);
objectqueueVar7.incrementInternalProcessingCount();
synchronized (latchVar5) {
latchVar5.notify();
}
continue;
}
if (_maxActive < 0) {
break;
}
}
}
if (booleanVar1) {
clearOldest();
}
}"
16931,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,796,"} catch(Exception e) {
","public void evict() throws Exception {
assertOpen();
synchronized (this) {
if (_pool.isEmpty()) {
return;
}
if (null == _evictionCursor) {
_evictionCursor = (_pool.cursor(_lifo ? _pool.size() : 0));
}
}
for (int i = 0, m = getNumTests(); i < m; i++) {
final ObjectTimestampPair pair;
synchronized (this) {
if ((_lifo && !_evictionCursor.hasPrevious()) || !_lifo && !_evictionCursor.hasNext()) {
_evictionCursor.close();
_evictionCursor = _pool.cursor(_lifo ? _pool.size() : 0);
}
pair = _lifo ? (ObjectTimestampPair) _evictionCursor.previous() : (ObjectTimestampPair) _evictionCursor.next();
_evictionCursor.remove();
_numInternalProcessing++;
}
boolean removeObject = false;
final long idleTimeMilis = System.currentTimeMillis() - pair.tstamp;
if ((getMinEvictableIdleTimeMillis() > 0) && (idleTimeMilis > getMinEvictableIdleTimeMillis())) {
removeObject = true;
} else if ((getSoftMinEvictableIdleTimeMillis() > 0) && (idleTimeMilis > getSoftMinEvictableIdleTimeMillis()) && ((getNumIdle() + 1) > getMinIdle())) {
removeObject = true;
}
if (getTestWhileIdle() && !removeObject) {
boolean active = false;
try {
_factory.activateObject(pair.value);
active = true;
} catch (Exception e) {
removeObject = true;
}
if (active) {
if (!_factory.validateObject(pair.value)) {
removeObject = true;
} else {
try {
_factory.passivateObject(pair.value);
} catch (Exception e) {
removeObject = true;
}
}
}
}
if (removeObject) {
try {
_factory.destroyObject(pair.value);
} catch (Exception e) {
}
}
synchronized (this) {
if (!removeObject) {
_evictionCursor.add(pair);
if (_lifo) {
_evictionCursor.previous();
}
}
_numInternalProcessing--;
}
}
}","public void evict() throws Exception {
assertOpen();
synchronized (this) {
if (_pool.isEmpty()) {
return;
}
if (null == _evictionCursor) {
_evictionCursor = (_pool.cursor(_lifo ? _pool.size() : 0));
}
}
for (int intVar11 = intLiteral12, intVar13 = intLiteral14; intVar1 < intLiteral1; intVar1++) {
final ObjectTimestampPair objecttimestamppairVar5;
synchronized (this) {
if ((_lifo && !_evictionCursor.hasPrevious()) || !_lifo && !_evictionCursor.hasNext()) {
_evictionCursor.close();
_evictionCursor = _pool.cursor(_lifo ? _pool.size() : 0);
}
objecttimestamppairVar5 = _lifo ? (ObjectTimestampPair) _evictionCursor.previous() : (ObjectTimestampPair) _evictionCursor.next();
_evictionCursor.remove();
_numInternalProcessing++;
}
boolean booleanVar6 = booleanLiteral7;
final long longVar8 = longLiteral9;
if ((getMinEvictableIdleTimeMillis() > 0) && (longVar8 > getMinEvictableIdleTimeMillis())) {
booleanVar6 = true;
} else if ((getSoftMinEvictableIdleTimeMillis() > 0) && (longVar8 > getSoftMinEvictableIdleTimeMillis()) && ((getNumIdle() + 1) > getMinIdle())) {
booleanVar6 = true;
}
if (getTestWhileIdle() && !booleanVar6) {
boolean booleanVar10 = booleanLiteral7;
try {
_factory.activateObject(objecttimestamppairVar5.value);
booleanVar10 = true;
} catch (Exception e) {
booleanVar6 = true;
}
if (booleanVar10) {
if (!_factory.validateObject(objecttimestamppairVar5.value)) {
booleanVar6 = true;
} else {
try {
_factory.passivateObject(objecttimestamppairVar5.value);
} catch (Exception e) {
booleanVar6 = true;
}
}
}
}
if (booleanVar6) {
try {
_factory.destroyObject(objecttimestamppairVar5.value);
} catch (Exception e) {
}
}
synchronized (this) {
if (!booleanVar6) {
_evictionCursor.add(objecttimestamppairVar5);
if (_lifo) {
_evictionCursor.previous();
}
}
_numInternalProcessing--;
}
}
}"
16952,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,817,"} catch (Exception e) {
","public void close() {
try {
keyedPool.close();
} catch (Exception e) {
}
}","public void close() {
try {
keyedPool.close();
} catch (Exception e) {
}
}"
16956,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,821,"} catch (Exception e) {
","public void invalidateObject(final Object key, final Object obj) {
if (type.isInstance(obj)) {
try {
keyedPool.invalidateObject(key, obj);
} catch (Exception e) {
}
} else {
throw new ClassCastException(""Invalidated object for key: "" + key + "" is not of type: "" + type.getName() + "" was: "" + obj);
}
}","public void invalidateObject(final Object key, final Object obj) {
if (type.isInstance(obj)) {
try {
keyedPool.invalidateObject(key, obj);
} catch (Exception e) {
}
} else {
throw new ClassCastException(""Invalidated object for key: "" + key + "" is not of type: "" + type.getName() + "" was: "" + obj);
}
}"
16968,BAD_PRACTICE,SE_NO_SERIALVERSIONID,FP,pool,833,"private Listable _prev = null;
private Listable _next = null;
private Object _val = null;
Listable(Listable prev, Listable next, Object val) {
_prev = prev;
_next = next;
_val = val;
}
Listable next() {
return _next;
}
Listable prev() {
return _prev;
}
Object value() {
return _val;
}
void setNext(Listable next) {
_next = next;
}
void setPrev(Listable prev) {
_prev = prev;
}
Object setValue(Object val) {
Object temp = _val;
_val = val;
return temp;
","protected void listableChanged(Listable elt) {
if (_lastReturned == elt) {
_lastReturned = null;
}
}","protected void listableChanged(Listable elt) {
if (_lastReturned == elt) {
_lastReturned = null;
}
}"
16974,BAD_PRACTICE,EQ_COMPARETO_USE_OBJECT_EQUALS,FP,pool,839,"final long tstampdiff = this.tstamp - other.tstamp;
if (tstampdiff == 0) {
return System.identityHashCode(this) - System.identityHashCode(other);
} else {
return (int)Math.min(Math.max(tstampdiff, Integer.MIN_VALUE), Integer.MAX_VALUE);
","public int compareTo(ObjectTimestampPair other) {
final long tstampdiff = this.tstamp - other.tstamp;
if (tstampdiff == 0) {
return System.identityHashCode(this) - System.identityHashCode(other);
} else {
return (int) Math.min(Math.max(tstampdiff, Integer.MIN_VALUE), Integer.MAX_VALUE);
}
}","public int compareTo(ObjectTimestampPair other) {
final long longVar1 = longLiteral2;
if (longVar1 == 0) {
return System.identityHashCode(this) - System.identityHashCode(other);
} else {
return (int) Math.min(Math.max(longVar1, Integer.MIN_VALUE), Integer.MAX_VALUE);
}
}"
16982,Multithreaded correctness,NO_NOTIFY_NOT_NOTIFYALL,FP,pool,847,"l.notify();
","public void close() throws Exception {
super.close();
synchronized (this) {
clear();
if (null != _evictionCursor) {
_evictionCursor.close();
_evictionCursor = null;
}
if (null != _evictionKeyCursor) {
_evictionKeyCursor.close();
_evictionKeyCursor = null;
}
startEvictor(-1L);
while (_allocationQueue.size() > 0) {
Latch l = (Latch) _allocationQueue.removeFirst();
synchronized (l) {
l.notify();
}
}
}
}","public void close() throws Exception {
super.close();
synchronized (this) {
clear();
if (null != _evictionCursor) {
_evictionCursor.close();
_evictionCursor = null;
}
if (null != _evictionKeyCursor) {
_evictionKeyCursor.close();
_evictionKeyCursor = null;
}
startEvictor(-1L);
while (_allocationQueue.size() > 0) {
Latch latchVar1 = latchLiteral2;
synchronized (latchVar1) {
latchVar1.notify();
}
}
}
}"
16988,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,853,"} catch (Exception ex2) {
","public void addObject() throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
Object obj = _factory.makeObject();
try {
assertOpen();
addObjectToPool(obj, false);
} catch (IllegalStateException ex) {
try {
_factory.destroyObject(obj);
} catch (Exception ex2) {
}
throw ex;
}
}","public void addObject() throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
Object objectVar1 = objectLiteral2;
try {
assertOpen();
addObjectToPool(objectVar1, false);
} catch (IllegalStateException ex) {
try {
_factory.destroyObject(objectVar1);
} catch (Exception ex2) {
}
throw ex;
}
}"
16993,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,858,"} catch(Exception e) {
","public void run() {
try {
evict();
} catch (Exception e) {
} catch (OutOfMemoryError oome) {
oome.printStackTrace(System.err);
}
try {
ensureMinIdle();
} catch (Exception e) {
}
}","public void run() {
try {
evict();
} catch (Exception e) {
} catch (OutOfMemoryError oome) {
oome.printStackTrace(System.err);
}
try {
ensureMinIdle();
} catch (Exception e) {
}
}"
16995,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,860,"} catch(Exception e) {
","public synchronized void addObject() throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
Object obj = _factory.makeObject();
boolean success = true;
if (!_factory.validateObject(obj)) {
success = false;
} else {
_factory.passivateObject(obj);
}
boolean shouldDestroy = !success;
if (success) {
_pool.add(new SoftReference(obj, refQueue));
notifyAll();
}
if (shouldDestroy) {
try {
_factory.destroyObject(obj);
} catch (Exception e) {
}
}
}","public synchronized void addObject() throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
Object objectVar1 = objectLiteral2;
boolean booleanVar3 = booleanLiteral4;
if (!_factory.validateObject(objectVar1)) {
booleanVar3 = false;
} else {
_factory.passivateObject(objectVar1);
}
boolean booleanVar5 = booleanLiteral6;
if (booleanVar3) {
_pool.add(new SoftReference(objectVar1, refQueue));
notifyAll();
}
if (booleanVar5) {
try {
_factory.destroyObject(objectVar1);
} catch (Exception e) {
}
}
}"
16998,Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,pool,863,protected int _totIdle = 0;,protected int _totIdle = 0;,protected int intVar1 = intLiteral2;
17007,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,872,"} catch(Exception e) {
","public synchronized void returnObject(Object obj) throws Exception {
boolean success = !isClosed();
if (null != _factory) {
if (!_factory.validateObject(obj)) {
success = false;
} else {
try {
_factory.passivateObject(obj);
} catch (Exception e) {
success = false;
}
}
}
boolean shouldDestroy = !success;
_numActive--;
if (success) {
Object toBeDestroyed = null;
if (_pool.size() >= _maxSleeping) {
shouldDestroy = true;
toBeDestroyed = _pool.remove(0);
}
_pool.push(obj);
obj = toBeDestroyed;
}
notifyAll();
if (shouldDestroy) {
try {
_factory.destroyObject(obj);
} catch (Exception e) {
}
}
}","public synchronized void returnObject(Object obj) throws Exception {
boolean booleanVar1 = booleanLiteral2;
if (null != _factory) {
if (!_factory.validateObject(obj)) {
booleanVar1 = false;
} else {
try {
_factory.passivateObject(obj);
} catch (Exception e) {
booleanVar1 = false;
}
}
}
boolean booleanVar3 = booleanLiteral4;
_numActive--;
if (booleanVar1) {
Object objectVar5 = objectLiteral6;
if (_pool.size() >= _maxSleeping) {
booleanVar3 = true;
objectVar5 = _pool.remove(0);
}
_pool.push(obj);
obj = objectVar5;
}
notifyAll();
if (booleanVar3) {
try {
_factory.destroyObject(obj);
} catch (Exception e) {
}
}
}"
17016,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,881,"} catch (Exception e) {
","public void returnObject(final Object obj) {
synchronized (lock) {
try {
pool.returnObject(obj);
} catch (Exception e) {
}
}
}","public void returnObject(final Object obj) {
synchronized (lock) {
try {
pool.returnObject(obj);
} catch (Exception e) {
}
}
}"
17019,DODGY_CODE,REC_CATCH_EXCEPTION,FP,pool,884,"} catch (Exception e) {
","public void run() {
boolean success = false;
try {
if (keyedPool.getNumIdle(key) < minIdle) {
keyedPool.addObject(key);
}
success = true;
} catch (Exception e) {
cancel();
} finally {
if (!success) {
cancel();
}
}
}","public void run() {
boolean booleanVar1 = booleanLiteral2;
try {
if (keyedPool.getNumIdle(key) < minIdle) {
keyedPool.addObject(key);
}
booleanVar1 = true;
} catch (Exception e) {
cancel();
} finally {
if (!booleanVar1) {
cancel();
}
}
}"
17020,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,885,"} catch (Exception e) {
","public void invalidateObject(final Object key, final Object obj) {
if (type.isInstance(obj)) {
try {
keyedPool.invalidateObject(key, obj);
} catch (Exception e) {
}
} else {
throw new ClassCastException(""Invalidated object for key: "" + key + "" is not of type: "" + type.getName() + "" was: "" + obj);
}
}","public void invalidateObject(final Object key, final Object obj) {
if (type.isInstance(obj)) {
try {
keyedPool.invalidateObject(key, obj);
} catch (Exception e) {
}
} else {
throw new ClassCastException(""Invalidated object for key: "" + key + "" is not of type: "" + type.getName() + "" was: "" + obj);
}
}"
17025,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,890,"} catch (Exception e) {
","public void close() {
try {
keyedPool.close();
} catch (Exception e) {
}
}","public void close() {
try {
keyedPool.close();
} catch (Exception e) {
}
}"
17035,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,900,"} catch(Exception e) {
","public void evict() throws Exception {
Object key = null;
boolean testWhileIdle;
long minEvictableIdleTimeMillis;
synchronized (this) {
testWhileIdle = _testWhileIdle;
minEvictableIdleTimeMillis = _minEvictableIdleTimeMillis;
if (_evictionKeyCursor != null && _evictionKeyCursor._lastReturned != null) {
key = _evictionKeyCursor._lastReturned.value();
}
}
for (int i = 0, m = getNumTests(); i < m; i++) {
final ObjectTimestampPair pair;
synchronized (this) {
if (_poolMap == null || _poolMap.size() == 0) {
continue;
}
if (null == _evictionKeyCursor) {
resetEvictionKeyCursor();
key = null;
}
if (null == _evictionCursor) {
if (_evictionKeyCursor.hasNext()) {
key = _evictionKeyCursor.next();
resetEvictionObjectCursor(key);
} else {
resetEvictionKeyCursor();
if (_evictionKeyCursor != null) {
if (_evictionKeyCursor.hasNext()) {
key = _evictionKeyCursor.next();
resetEvictionObjectCursor(key);
}
}
}
}
if (_evictionCursor == null) {
continue;
}
if ((_lifo && !_evictionCursor.hasPrevious()) || (!_lifo && !_evictionCursor.hasNext())) {
if (_evictionKeyCursor != null) {
if (_evictionKeyCursor.hasNext()) {
key = _evictionKeyCursor.next();
resetEvictionObjectCursor(key);
} else {
resetEvictionKeyCursor();
if (_evictionKeyCursor != null) {
if (_evictionKeyCursor.hasNext()) {
key = _evictionKeyCursor.next();
resetEvictionObjectCursor(key);
}
}
}
}
}
if ((_lifo && !_evictionCursor.hasPrevious()) || (!_lifo && !_evictionCursor.hasNext())) {
continue;
}
pair = _lifo ? (ObjectTimestampPair) _evictionCursor.previous() : (ObjectTimestampPair) _evictionCursor.next();
_evictionCursor.remove();
ObjectQueue objectQueue = (ObjectQueue) _poolMap.get(key);
objectQueue.incrementInternalProcessingCount();
_totalIdle--;
}
boolean removeObject = false;
if ((minEvictableIdleTimeMillis > 0) && (System.currentTimeMillis() - pair.tstamp > minEvictableIdleTimeMillis)) {
removeObject = true;
}
if (testWhileIdle && removeObject == false) {
boolean active = false;
try {
_factory.activateObject(key, pair.value);
active = true;
} catch (Exception e) {
removeObject = true;
}
if (active) {
if (!_factory.validateObject(key, pair.value)) {
removeObject = true;
} else {
try {
_factory.passivateObject(key, pair.value);
} catch (Exception e) {
removeObject = true;
}
}
}
}
if (removeObject) {
try {
_factory.destroyObject(key, pair.value);
} catch (Exception e) {
}
}
synchronized (this) {
ObjectQueue objectQueue = (ObjectQueue) _poolMap.get(key);
objectQueue.decrementInternalProcessingCount();
if (removeObject) {
if (objectQueue.queue.isEmpty() && objectQueue.activeCount == 0 && objectQueue.internalProcessingCount == 0) {
_poolMap.remove(key);
_poolList.remove(key);
}
} else {
_evictionCursor.add(pair);
_totalIdle++;
if (_lifo) {
_evictionCursor.previous();
}
}
}
}
allocate();
}","public void evict() throws Exception {
Object objectVar1 = objectLiteral2;
boolean booleanVar3;
long longVar4;
synchronized (this) {
booleanVar3 = _testWhileIdle;
longVar4 = _minEvictableIdleTimeMillis;
if (_evictionKeyCursor != null && _evictionKeyCursor._lastReturned != null) {
objectVar1 = _evictionKeyCursor._lastReturned.value();
}
}
for (int intVar15 = intLiteral16, intVar17 = intLiteral18; intVar5 < intLiteral1; intVar5++) {
final ObjectTimestampPair objecttimestamppairVar9;
synchronized (this) {
if (_poolMap == null || _poolMap.size() == 0) {
continue;
}
if (null == _evictionKeyCursor) {
resetEvictionKeyCursor();
objectVar1 = null;
}
if (null == _evictionCursor) {
if (_evictionKeyCursor.hasNext()) {
objectVar1 = _evictionKeyCursor.next();
resetEvictionObjectCursor(objectVar1);
} else {
resetEvictionKeyCursor();
if (_evictionKeyCursor != null) {
if (_evictionKeyCursor.hasNext()) {
objectVar1 = _evictionKeyCursor.next();
resetEvictionObjectCursor(objectVar1);
}
}
}
}
if (_evictionCursor == null) {
continue;
}
if ((_lifo && !_evictionCursor.hasPrevious()) || (!_lifo && !_evictionCursor.hasNext())) {
if (_evictionKeyCursor != null) {
if (_evictionKeyCursor.hasNext()) {
objectVar1 = _evictionKeyCursor.next();
resetEvictionObjectCursor(objectVar1);
} else {
resetEvictionKeyCursor();
if (_evictionKeyCursor != null) {
if (_evictionKeyCursor.hasNext()) {
objectVar1 = _evictionKeyCursor.next();
resetEvictionObjectCursor(objectVar1);
}
}
}
}
}
if ((_lifo && !_evictionCursor.hasPrevious()) || (!_lifo && !_evictionCursor.hasNext())) {
continue;
}
objecttimestamppairVar9 = _lifo ? (ObjectTimestampPair) _evictionCursor.previous() : (ObjectTimestampPair) _evictionCursor.next();
_evictionCursor.remove();
ObjectQueue objectqueueVar10 = objectqueueLiteral11;
objectqueueVar10.incrementInternalProcessingCount();
_totalIdle--;
}
boolean booleanVar12 = booleanLiteral13;
if ((longVar4 > 0) && (System.currentTimeMillis() - objecttimestamppairVar9.tstamp > longVar4)) {
booleanVar12 = true;
}
if (booleanVar3 && booleanVar12 == false) {
boolean booleanVar14 = booleanLiteral13;
try {
_factory.activateObject(objectVar1, objecttimestamppairVar9.value);
booleanVar14 = true;
} catch (Exception e) {
booleanVar12 = true;
}
if (booleanVar14) {
if (!_factory.validateObject(objectVar1, objecttimestamppairVar9.value)) {
booleanVar12 = true;
} else {
try {
_factory.passivateObject(objectVar1, objecttimestamppairVar9.value);
} catch (Exception e) {
booleanVar12 = true;
}
}
}
}
if (booleanVar12) {
try {
_factory.destroyObject(objectVar1, objecttimestamppairVar9.value);
} catch (Exception e) {
}
}
synchronized (this) {
ObjectQueue objectqueueVar10 = objectqueueLiteral11;
objectqueueVar10.decrementInternalProcessingCount();
if (booleanVar12) {
if (objectqueueVar10.queue.isEmpty() && objectqueueVar10.activeCount == 0 && objectqueueVar10.internalProcessingCount == 0) {
_poolMap.remove(objectVar1);
_poolList.remove(objectVar1);
}
} else {
_evictionCursor.add(objecttimestamppairVar9);
_totalIdle++;
if (_lifo) {
_evictionCursor.previous();
}
}
}
}
allocate();
}"
17037,BAD_PRACTICE,EQ_COMPARETO_USE_OBJECT_EQUALS,FP,pool,902,"final long tstampdiff = this.tstamp - other.tstamp;
if (tstampdiff == 0) {
return System.identityHashCode(this) - System.identityHashCode(other);
} else {
return (int)Math.min(Math.max(tstampdiff, Integer.MIN_VALUE), Integer.MAX_VALUE);
","public int compareTo(ObjectTimestampPair other) {
final long tstampdiff = this.tstamp - other.tstamp;
if (tstampdiff == 0) {
return System.identityHashCode(this) - System.identityHashCode(other);
} else {
return (int) Math.min(Math.max(tstampdiff, Integer.MIN_VALUE), Integer.MAX_VALUE);
}
}","public int compareTo(ObjectTimestampPair other) {
final long longVar1 = longLiteral2;
if (longVar1 == 0) {
return System.identityHashCode(this) - System.identityHashCode(other);
} else {
return (int) Math.min(Math.max(longVar1, Integer.MIN_VALUE), Integer.MAX_VALUE);
}
}"
17040,Multithreaded correctness,NN_NAKED_NOTIFY,FP,pool,905,"latch.notify();
","private void allocate() {
boolean clearOldest = false;
synchronized (this) {
if (isClosed())
return;
Iterator allocationQueueIter = _allocationQueue.iterator();
while (allocationQueueIter.hasNext()) {
Latch latch = (Latch) allocationQueueIter.next();
ObjectQueue pool = (ObjectQueue) (_poolMap.get(latch.getkey()));
if (null == pool) {
pool = new ObjectQueue();
_poolMap.put(latch.getkey(), pool);
_poolList.add(latch.getkey());
}
latch.setPool(pool);
if (!pool.queue.isEmpty()) {
allocationQueueIter.remove();
latch.setPair((ObjectTimestampPair) pool.queue.removeFirst());
pool.incrementInternalProcessingCount();
_totalIdle--;
synchronized (latch) {
latch.notify();
}
continue;
}
if ((_maxTotal > 0) && (_totalActive + _totalIdle + _totalInternalProcessing >= _maxTotal)) {
clearOldest = true;
break;
}
if ((_maxActive < 0 || pool.activeCount + pool.internalProcessingCount < _maxActive) && (_maxTotal < 0 || _totalActive + _totalIdle + _totalInternalProcessing < _maxTotal)) {
allocationQueueIter.remove();
latch.setMayCreate(true);
pool.incrementInternalProcessingCount();
synchronized (latch) {
latch.notify();
}
continue;
}
if (_maxActive < 0) {
break;
}
}
}
if (clearOldest) {
clearOldest();
}
}","private void allocate() {
boolean booleanVar1 = booleanLiteral2;
synchronized (this) {
if (isClosed())
return;
Iterator iteratorVar3 = iteratorLiteral4;
while (iteratorVar3.hasNext()) {
Latch latchVar5 = latchLiteral6;
ObjectQueue objectqueueVar7 = objectqueueLiteral8;
if (null == objectqueueVar7) {
objectqueueVar7 = new ObjectQueue();
_poolMap.put(latchVar5.getkey(), objectqueueVar7);
_poolList.add(latchVar5.getkey());
}
latchVar5.setPool(objectqueueVar7);
if (!objectqueueVar7.queue.isEmpty()) {
iteratorVar3.remove();
latchVar5.setPair((ObjectTimestampPair) objectqueueVar7.queue.removeFirst());
objectqueueVar7.incrementInternalProcessingCount();
_totalIdle--;
synchronized (latchVar5) {
latchVar5.notify();
}
continue;
}
if ((_maxTotal > 0) && (_totalActive + _totalIdle + _totalInternalProcessing >= _maxTotal)) {
booleanVar1 = true;
break;
}
if ((_maxActive < 0 || objectqueueVar7.activeCount + objectqueueVar7.internalProcessingCount < _maxActive) && (_maxTotal < 0 || _totalActive + _totalIdle + _totalInternalProcessing < _maxTotal)) {
iteratorVar3.remove();
latchVar5.setMayCreate(true);
objectqueueVar7.incrementInternalProcessingCount();
synchronized (latchVar5) {
latchVar5.notify();
}
continue;
}
if (_maxActive < 0) {
break;
}
}
}
if (booleanVar1) {
clearOldest();
}
}"
17060,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,925,"} catch(Exception e) {
","public synchronized void addObject() throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
Object obj = _factory.makeObject();
boolean success = true;
if (!_factory.validateObject(obj)) {
success = false;
} else {
_factory.passivateObject(obj);
}
boolean shouldDestroy = !success;
if (success) {
_pool.add(new SoftReference(obj, refQueue));
notifyAll();
}
if (shouldDestroy) {
try {
_factory.destroyObject(obj);
} catch (Exception e) {
}
}
}","public synchronized void addObject() throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
Object objectVar1 = objectLiteral2;
boolean booleanVar3 = booleanLiteral4;
if (!_factory.validateObject(objectVar1)) {
booleanVar3 = false;
} else {
_factory.passivateObject(objectVar1);
}
boolean booleanVar5 = booleanLiteral6;
if (booleanVar3) {
_pool.add(new SoftReference(objectVar1, refQueue));
notifyAll();
}
if (booleanVar5) {
try {
_factory.destroyObject(objectVar1);
} catch (Exception e) {
}
}
}"
17061,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,926,"} catch(Exception e) {
","public synchronized void returnObject(Object obj) throws Exception {
boolean success = !isClosed();
if (_factory != null) {
if (!_factory.validateObject(obj)) {
success = false;
} else {
try {
_factory.passivateObject(obj);
} catch (Exception e) {
success = false;
}
}
}
boolean shouldDestroy = !success;
_numActive--;
if (success) {
_pool.add(new SoftReference(obj, refQueue));
}
notifyAll();
if (shouldDestroy && _factory != null) {
try {
_factory.destroyObject(obj);
} catch (Exception e) {
}
}
}","public synchronized void returnObject(Object obj) throws Exception {
boolean booleanVar1 = booleanLiteral2;
if (_factory != null) {
if (!_factory.validateObject(obj)) {
booleanVar1 = false;
} else {
try {
_factory.passivateObject(obj);
} catch (Exception e) {
booleanVar1 = false;
}
}
}
boolean booleanVar3 = booleanLiteral4;
_numActive--;
if (booleanVar1) {
_pool.add(new SoftReference(obj, refQueue));
}
notifyAll();
if (booleanVar3 && _factory != null) {
try {
_factory.destroyObject(obj);
} catch (Exception e) {
}
}
}"
17069,PERFORMANCE,WMI_WRONG_MAP_ITERATOR,FP,pool,934,"Stack s = (Stack)(_pools.get(key));
","public synchronized String toString() {
StringBuffer buf = new StringBuffer();
buf.append(getClass().getName());
buf.append("" contains "").append(_pools.size()).append("" distinct pools: "");
Iterator it = _pools.keySet().iterator();
while (it.hasNext()) {
Object key = it.next();
buf.append("" |"").append(key).append(""|="");
Stack s = (Stack) (_pools.get(key));
buf.append(s.size());
}
return buf.toString();
}","public synchronized String toString() {
StringBuffer stringbufferVar1 = stringbufferLiteral2;
stringbufferVar1.append(getClass().getName());
stringbufferVar1.append("" contains "").append(_pools.size()).append("" distinct pools: "");
Iterator iteratorVar3 = iteratorLiteral4;
while (iteratorVar3.hasNext()) {
Object objectVar5 = objectLiteral6;
stringbufferVar1.append("" |"").append(objectVar5).append(""|="");
Stack stackVar7 = stackLiteral8;
stringbufferVar1.append(stackVar7.size());
}
return stringbufferVar1.toString();
}"
17074,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,939,"} catch (Exception e) {
","public void invalidateObject(final K key, final V obj) {
synchronized (lock) {
try {
keyedPool.invalidateObject(key, obj);
} catch (Exception e) {
}
}
}","public void invalidateObject(final K key, final V obj) {
synchronized (lock) {
try {
keyedPool.invalidateObject(key, obj);
} catch (Exception e) {
}
}
}"
17077,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,942,"} catch (Exception e) {
","public void returnObject(final K key, final V obj) {
if (type.isInstance(obj)) {
try {
keyedPool.returnObject(key, obj);
} catch (Exception e) {
}
} else {
throw new ClassCastException(""Returned object for key: "" + key + "" is not of type: "" + type.getName() + "" was: "" + obj);
}
}","public void returnObject(final K key, final V obj) {
if (type.isInstance(obj)) {
try {
keyedPool.returnObject(key, obj);
} catch (Exception e) {
}
} else {
throw new ClassCastException(""Returned object for key: "" + key + "" is not of type: "" + type.getName() + "" was: "" + obj);
}
}"
17082,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,947,"} catch (Exception e) {
","public void close() {
try {
keyedPool.close();
} catch (Exception e) {
}
}","public void close() {
try {
keyedPool.close();
} catch (Exception e) {
}
}"
17085,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,950,"} catch (Exception e) {
","public void invalidateObject(final K key, final V obj) {
try {
keyedPool.invalidateObject(key, obj);
} catch (Exception e) {
}
}","public void invalidateObject(final K key, final V obj) {
try {
keyedPool.invalidateObject(key, obj);
} catch (Exception e) {
}
}"
17088,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,953,"} catch (Exception e) {
","public void invalidateObject(final K key, final V obj) {
try {
pool.invalidateObject(obj);
} catch (Exception e) {
}
}","public void invalidateObject(final K key, final V obj) {
try {
pool.invalidateObject(obj);
} catch (Exception e) {
}
}"
17090,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,955,"} catch (Exception e) {
","public void returnObject(final K key, final V obj) {
synchronized (lock) {
try {
keyedPool.returnObject(key, obj);
} catch (Exception e) {
}
}
}","public void returnObject(final K key, final V obj) {
synchronized (lock) {
try {
keyedPool.returnObject(key, obj);
} catch (Exception e) {
}
}
}"
17098,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,963,"} catch(Exception e) {
","private void addObjectToPool(K key, V obj, boolean decrementNumActive) throws Exception {
boolean success = true;
if (_testOnReturn && !_factory.validateObject(key, obj)) {
success = false;
} else {
_factory.passivateObject(key, obj);
}
boolean shouldDestroy = !success;
ObjectQueue pool;
boolean doAllocate = false;
synchronized (this) {
pool = _poolMap.get(key);
if (null == pool) {
pool = new ObjectQueue();
_poolMap.put(key, pool);
_poolList.add(key);
}
if (isClosed()) {
shouldDestroy = true;
} else {
if (_maxIdle >= 0 && (pool.queue.size() >= _maxIdle)) {
shouldDestroy = true;
} else if (success) {
if (_lifo) {
pool.queue.addFirst(new ObjectTimestampPair<V>(obj));
} else {
pool.queue.addLast(new ObjectTimestampPair<V>(obj));
}
_totalIdle++;
if (decrementNumActive) {
pool.decrementActiveCount();
}
doAllocate = true;
}
}
}
if (doAllocate) {
allocate();
}
if (shouldDestroy) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e) {
}
if (decrementNumActive) {
synchronized (this) {
pool.decrementActiveCount();
if (pool.queue.isEmpty() && pool.activeCount == 0 && pool.internalProcessingCount == 0) {
_poolMap.remove(key);
_poolList.remove(key);
}
}
allocate();
}
}
}","private void addObjectToPool(K key, V obj, boolean decrementNumActive) throws Exception {
boolean booleanVar1 = booleanLiteral2;
if (_testOnReturn && !_factory.validateObject(key, obj)) {
booleanVar1 = false;
} else {
_factory.passivateObject(key, obj);
}
boolean booleanVar3 = booleanLiteral4;
ObjectQueue objectqueueVar5;
boolean booleanVar6 = booleanLiteral7;
synchronized (this) {
objectqueueVar5 = _poolMap.get(key);
if (null == objectqueueVar5) {
objectqueueVar5 = new ObjectQueue();
_poolMap.put(key, objectqueueVar5);
_poolList.add(key);
}
if (isClosed()) {
booleanVar3 = true;
} else {
if (_maxIdle >= 0 && (objectqueueVar5.queue.size() >= _maxIdle)) {
booleanVar3 = true;
} else if (booleanVar1) {
if (_lifo) {
objectqueueVar5.queue.addFirst(new ObjectTimestampPair<V>(obj));
} else {
objectqueueVar5.queue.addLast(new ObjectTimestampPair<V>(obj));
}
_totalIdle++;
if (decrementNumActive) {
objectqueueVar5.decrementActiveCount();
}
booleanVar6 = true;
}
}
}
if (booleanVar6) {
allocate();
}
if (booleanVar3) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e) {
}
if (decrementNumActive) {
synchronized (this) {
objectqueueVar5.decrementActiveCount();
if (objectqueueVar5.queue.isEmpty() && objectqueueVar5.activeCount == 0 && objectqueueVar5.internalProcessingCount == 0) {
_poolMap.remove(key);
_poolList.remove(key);
}
}
allocate();
}
}
}"
17118,Multithreaded correctness,NN_NAKED_NOTIFY,FP,pool,983,"latch.notify();
","private synchronized void allocate() {
if (isClosed())
return;
for (; ; ) {
if (!_pool.isEmpty() && !_allocationQueue.isEmpty()) {
Latch<T> latch = _allocationQueue.removeFirst();
latch.setPair(_pool.removeFirst());
_numInternalProcessing++;
synchronized (latch) {
latch.notify();
}
} else {
break;
}
}
for (; ; ) {
if ((!_allocationQueue.isEmpty()) && (_maxActive < 0 || (_numActive + _numInternalProcessing) < _maxActive)) {
Latch<T> latch = _allocationQueue.removeFirst();
latch.setMayCreate(true);
_numInternalProcessing++;
synchronized (latch) {
latch.notify();
}
} else {
break;
}
}
}","private synchronized void allocate() {
if (isClosed())
return;
for (; ; ) {
if (!_pool.isEmpty() && !_allocationQueue.isEmpty()) {
Latch<T> latch<t>Var1 = latch<t>Literal2;
latch<t>Var1.setPair(_pool.removeFirst());
_numInternalProcessing++;
synchronized (latch<t>Var1) {
latch<t>Var1.notify();
}
} else {
break;
}
}
for (; ; ) {
if ((!_allocationQueue.isEmpty()) && (_maxActive < 0 || (_numActive + _numInternalProcessing) < _maxActive)) {
Latch<T> latch<t>Var1 = latch<t>Literal2;
latch<t>Var1.setMayCreate(true);
_numInternalProcessing++;
synchronized (latch<t>Var1) {
latch<t>Var1.notify();
}
} else {
break;
}
}
}"
17123,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,988,"} catch(Exception e) {
","@Override
public synchronized void returnObject(T obj) throws Exception {
boolean success = !isClosed();
if (_factory != null) {
if (!_factory.validateObject(obj)) {
success = false;
} else {
try {
_factory.passivateObject(obj);
} catch (Exception e) {
success = false;
}
}
}
boolean shouldDestroy = !success;
_numActive--;
if (success) {
_pool.add(new SoftReference<T>(obj, refQueue));
}
notifyAll();
if (shouldDestroy && _factory != null) {
try {
_factory.destroyObject(obj);
} catch (Exception e) {
}
}
}","@Override
public synchronized void returnObject(T obj) throws Exception {
boolean booleanVar1 = booleanLiteral2;
if (_factory != null) {
if (!_factory.validateObject(obj)) {
booleanVar1 = false;
} else {
try {
_factory.passivateObject(obj);
} catch (Exception e) {
booleanVar1 = false;
}
}
}
boolean booleanVar3 = booleanLiteral4;
_numActive--;
if (booleanVar1) {
_pool.add(new SoftReference<T>(obj, refQueue));
}
notifyAll();
if (booleanVar3 && _factory != null) {
try {
_factory.destroyObject(obj);
} catch (Exception e) {
}
}
}"
17125,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,990,"} catch(Exception e) {
","@Override
public synchronized void addObject() throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
T obj = _factory.makeObject();
boolean success = true;
if (!_factory.validateObject(obj)) {
success = false;
} else {
_factory.passivateObject(obj);
}
boolean shouldDestroy = !success;
if (success) {
_pool.add(new SoftReference<T>(obj, refQueue));
notifyAll();
}
if (shouldDestroy) {
try {
_factory.destroyObject(obj);
} catch (Exception e) {
}
}
}","@Override
public synchronized void addObject() throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
T tVar1 = tLiteral2;
boolean booleanVar3 = booleanLiteral4;
if (!_factory.validateObject(tVar1)) {
booleanVar3 = false;
} else {
_factory.passivateObject(tVar1);
}
boolean booleanVar5 = booleanLiteral6;
if (booleanVar3) {
_pool.add(new SoftReference<T>(tVar1, refQueue));
notifyAll();
}
if (booleanVar5) {
try {
_factory.destroyObject(tVar1);
} catch (Exception e) {
}
}
}"
17128,Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,pool,993,"@Deprecated
protected int _totIdle = 0;","@Deprecated
protected int _totIdle = 0;","@Deprecated
protected int intVar1 = intLiteral2;"
17133,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,998,"} catch (Exception e) {
","@Override
public synchronized void returnObject(K key, V obj) throws Exception {
decrementActiveCount(key);
if (null != _factory) {
if (_factory.validateObject(key, obj)) {
try {
_factory.passivateObject(key, obj);
} catch (Exception ex) {
_factory.destroyObject(key, obj);
return;
}
} else {
return;
}
}
if (isClosed()) {
if (null != _factory) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e) {
}
}
return;
}
Stack<V> stack = _pools.get(key);
if (null == stack) {
stack = new Stack<V>();
stack.ensureCapacity(_initSleepingCapacity > _maxSleeping ? _maxSleeping : _initSleepingCapacity);
_pools.put(key, stack);
}
final int stackSize = stack.size();
if (stackSize >= _maxSleeping) {
final V staleObj;
if (stackSize > 0) {
staleObj = stack.remove(0);
_totIdle--;
} else {
staleObj = obj;
}
if (null != _factory) {
try {
_factory.destroyObject(key, staleObj);
} catch (Exception e) {
}
}
}
stack.push(obj);
_totIdle++;
}","@Override
public synchronized void returnObject(K key, V obj) throws Exception {
decrementActiveCount(key);
if (null != _factory) {
if (_factory.validateObject(key, obj)) {
try {
_factory.passivateObject(key, obj);
} catch (Exception ex) {
_factory.destroyObject(key, obj);
return;
}
} else {
return;
}
}
if (isClosed()) {
if (null != _factory) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e) {
}
}
return;
}
Stack<V> stack<v>Var1 = stack<v>Literal2;
if (null == stack<v>Var1) {
stack<v>Var1 = new Stack<V>();
stack<v>Var1.ensureCapacity(_initSleepingCapacity > _maxSleeping ? _maxSleeping : _initSleepingCapacity);
_pools.put(key, stack<v>Var1);
}
final int intVar3 = intLiteral4;
if (intVar3 >= _maxSleeping) {
final V vVar5;
if (intVar3 > 0) {
vVar5 = stack<v>Var1.remove(0);
_totIdle--;
} else {
vVar5 = obj;
}
if (null != _factory) {
try {
_factory.destroyObject(key, vVar5);
} catch (Exception e) {
}
}
}
stack<v>Var1.push(obj);
_totIdle++;
}"
17201,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1066,"} catch (Exception e) {
","public void close() {
try {
keyedPool.close();
} catch (Exception e) {
}
}","public void close() {
try {
keyedPool.close();
} catch (Exception e) {
}
}"
17204,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1069,"} catch (Exception e) {
","public void close() {
try {
pool.close();
} catch (Exception e) {
}
}","public void close() {
try {
pool.close();
} catch (Exception e) {
}
}"
17216,DODGY_CODE,REC_CATCH_EXCEPTION,FP,pool,1081,"} catch (Exception e) {
","public void run() {
boolean success = false;
try {
if (keyedPool.getNumIdle(key) < minIdle) {
keyedPool.addObject(key);
}
success = true;
} catch (Exception e) {
cancel();
} finally {
if (!success) {
cancel();
}
}
}","public void run() {
boolean booleanVar1 = booleanLiteral2;
try {
if (keyedPool.getNumIdle(key) < minIdle) {
keyedPool.addObject(key);
}
booleanVar1 = true;
} catch (Exception e) {
cancel();
} finally {
if (!booleanVar1) {
cancel();
}
}
}"
17226,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1091,"} catch(Exception e) {
","private void addObjectToPool(Object key, Object obj, boolean decrementNumActive) throws Exception {
boolean success = true;
if (_testOnReturn && !_factory.validateObject(key, obj)) {
success = false;
} else {
_factory.passivateObject(key, obj);
}
boolean shouldDestroy = !success;
ObjectQueue pool;
synchronized (this) {
pool = (ObjectQueue) (_poolMap.get(key));
if (null == pool) {
pool = new ObjectQueue();
_poolMap.put(key, pool);
_poolList.add(key);
}
if (isClosed()) {
shouldDestroy = true;
} else {
if (_maxIdle >= 0 && (pool.queue.size() >= _maxIdle)) {
shouldDestroy = true;
} else if (success) {
if (_lifo) {
pool.queue.addFirst(new ObjectTimestampPair(obj));
} else {
pool.queue.addLast(new ObjectTimestampPair(obj));
}
_totalIdle++;
if (decrementNumActive) {
pool.decrementActiveCount();
}
allocate();
}
}
}
if (shouldDestroy) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e) {
}
if (decrementNumActive) {
synchronized (this) {
pool.decrementActiveCount();
allocate();
}
}
}
}","private void addObjectToPool(Object key, Object obj, boolean decrementNumActive) throws Exception {
boolean booleanVar1 = booleanLiteral2;
if (_testOnReturn && !_factory.validateObject(key, obj)) {
booleanVar1 = false;
} else {
_factory.passivateObject(key, obj);
}
boolean booleanVar3 = booleanLiteral4;
ObjectQueue objectqueueVar5;
synchronized (this) {
objectqueueVar5 = (ObjectQueue) (_poolMap.get(key));
if (null == objectqueueVar5) {
objectqueueVar5 = new ObjectQueue();
_poolMap.put(key, objectqueueVar5);
_poolList.add(key);
}
if (isClosed()) {
booleanVar3 = true;
} else {
if (_maxIdle >= 0 && (objectqueueVar5.queue.size() >= _maxIdle)) {
booleanVar3 = true;
} else if (booleanVar1) {
if (_lifo) {
objectqueueVar5.queue.addFirst(new ObjectTimestampPair(obj));
} else {
objectqueueVar5.queue.addLast(new ObjectTimestampPair(obj));
}
_totalIdle++;
if (decrementNumActive) {
objectqueueVar5.decrementActiveCount();
}
allocate();
}
}
}
if (booleanVar3) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e) {
}
if (decrementNumActive) {
synchronized (this) {
objectqueueVar5.decrementActiveCount();
allocate();
}
}
}
}"
17248,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1113,"} catch (Exception e2) {
","public synchronized void addObject(Object key) throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
Object obj = _factory.makeObject(key);
try {
if (!_factory.validateObject(key, obj)) {
return;
}
} catch (Exception e) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e2) {
}
return;
}
_factory.passivateObject(key, obj);
Stack stack = (Stack) _pools.get(key);
if (null == stack) {
stack = new Stack();
stack.ensureCapacity(_initSleepingCapacity > _maxSleeping ? _maxSleeping : _initSleepingCapacity);
_pools.put(key, stack);
}
final int stackSize = stack.size();
if (stackSize >= _maxSleeping) {
final Object staleObj;
if (stackSize > 0) {
staleObj = stack.remove(0);
_totIdle--;
} else {
staleObj = obj;
}
try {
_factory.destroyObject(key, staleObj);
} catch (Exception e) {
if (obj == staleObj) {
throw e;
}
}
} else {
stack.push(obj);
_totIdle++;
}
}","public synchronized void addObject(Object key) throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
Object objectVar1 = objectLiteral2;
try {
if (!_factory.validateObject(key, objectVar1)) {
return;
}
} catch (Exception e) {
try {
_factory.destroyObject(key, objectVar1);
} catch (Exception e2) {
}
return;
}
_factory.passivateObject(key, objectVar1);
Stack stackVar3 = stackLiteral4;
if (null == stackVar3) {
stackVar3 = new Stack();
stackVar3.ensureCapacity(_initSleepingCapacity > _maxSleeping ? _maxSleeping : _initSleepingCapacity);
_pools.put(key, stackVar3);
}
final int intVar5 = intLiteral6;
if (intVar5 >= _maxSleeping) {
final Object objectVar7;
if (intVar5 > 0) {
objectVar7 = stackVar3.remove(0);
_totIdle--;
} else {
objectVar7 = objectVar1;
}
try {
_factory.destroyObject(key, objectVar7);
} catch (Exception e) {
if (objectVar1 == objectVar7) {
throw e;
}
}
} else {
stackVar3.push(objectVar1);
_totIdle++;
}
}"
17250,PERFORMANCE,WMI_WRONG_MAP_ITERATOR,FP,pool,1115,"Stack stack = (Stack)(_pools.get(key));
","public synchronized void clear() {
Iterator it = _pools.keySet().iterator();
while (it.hasNext()) {
Object key = it.next();
Stack stack = (Stack) (_pools.get(key));
destroyStack(key, stack);
}
_totIdle = 0;
_pools.clear();
_activeCount.clear();
}","public synchronized void clear() {
Iterator iteratorVar1 = iteratorLiteral2;
while (iteratorVar1.hasNext()) {
Object objectVar3 = objectLiteral4;
Stack stackVar5 = stackLiteral6;
destroyStack(objectVar3, stackVar5);
}
_totIdle = 0;
_pools.clear();
_activeCount.clear();
}"
17258,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1123,"} catch (Exception e) {
","public void returnObject(final Object key, final Object obj) {
try {
pool.returnObject(obj);
} catch (Exception e) {
}
}","public void returnObject(final Object key, final Object obj) {
try {
pool.returnObject(obj);
} catch (Exception e) {
}
}"
17272,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1137,"} catch (Exception e) {
","public void close() {
try {
pool.close();
} catch (Exception e) {
}
}","public void close() {
try {
pool.close();
} catch (Exception e) {
}
}"
17273,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1138,"} catch (Exception e) {
","public void invalidateObject(final Object obj) {
try {
pool.invalidateObject(obj);
} catch (Exception e) {
}
}","public void invalidateObject(final Object obj) {
try {
pool.invalidateObject(obj);
} catch (Exception e) {
}
}"
17278,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1143,"} catch (Exception e) {
","public void invalidateObject(final Object key, final Object obj) {
try {
keyedPool.invalidateObject(key, obj);
} catch (Exception e) {
}
}","public void invalidateObject(final Object key, final Object obj) {
try {
keyedPool.invalidateObject(key, obj);
} catch (Exception e) {
}
}"
17281,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1146,"catch (Exception e) {
","public synchronized void preparePool(Object key, boolean populateImmediately) {
ObjectQueue pool = (ObjectQueue) (_poolMap.get(key));
if (null == pool) {
pool = new ObjectQueue();
_poolMap.put(key, pool);
_poolList.add(key);
}
if (populateImmediately) {
try {
ensureMinIdle(key);
} catch (Exception e) {
}
}
}","public synchronized void preparePool(Object key, boolean populateImmediately) {
ObjectQueue objectqueueVar1 = objectqueueLiteral2;
if (null == objectqueueVar1) {
objectqueueVar1 = new ObjectQueue();
_poolMap.put(key, objectqueueVar1);
_poolList.add(key);
}
if (populateImmediately) {
try {
ensureMinIdle(key);
} catch (Exception e) {
}
}
}"
17283,DODGY_CODE,RI_REDUNDANT_INTERFACES,FP,pool,1148,"public class GenericKeyedObjectPool extends BaseKeyedObjectPool implements KeyedObjectPool {
public static final byte WHEN_EXHAUSTED_FAIL   = 0;
public static final byte WHEN_EXHAUSTED_BLOCK  = 1;
public static final byte WHEN_EXHAUSTED_GROW   = 2;
public static final int DEFAULT_MAX_IDLE  = 8;
public static final int DEFAULT_MAX_ACTIVE  = 8;
public static final int DEFAULT_MAX_TOTAL  = -1;
public static final byte DEFAULT_WHEN_EXHAUSTED_ACTION = WHEN_EXHAUSTED_BLOCK;
public static final long DEFAULT_MAX_WAIT = -1L;
public static final boolean DEFAULT_TEST_ON_BORROW = false;
public static final boolean DEFAULT_TEST_ON_RETURN = false;
public static final boolean DEFAULT_TEST_WHILE_IDLE = false;
public static final long DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS = -1L;
public static final int DEFAULT_NUM_TESTS_PER_EVICTION_RUN = 3;
public static final long DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS = 1000L * 60L * 30L;
public static final int DEFAULT_MIN_IDLE = 0;
public static final boolean DEFAULT_LIFO = true;
public GenericKeyedObjectPool() {
this(null, DEFAULT_MAX_ACTIVE, DEFAULT_WHEN_EXHAUSTED_ACTION, DEFAULT_MAX_WAIT, DEFAULT_MAX_IDLE,
DEFAULT_TEST_ON_BORROW, DEFAULT_TEST_ON_RETURN, DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS,
DEFAULT_NUM_TESTS_PER_EVICTION_RUN, DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS, DEFAULT_TEST_WHILE_IDLE);
}
public GenericKeyedObjectPool(KeyedPoolableObjectFactory factory) {
this(factory, DEFAULT_MAX_ACTIVE, DEFAULT_WHEN_EXHAUSTED_ACTION, DEFAULT_MAX_WAIT, DEFAULT_MAX_IDLE,
DEFAULT_TEST_ON_BORROW, DEFAULT_TEST_ON_RETURN, DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS,
DEFAULT_NUM_TESTS_PER_EVICTION_RUN, DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS, DEFAULT_TEST_WHILE_IDLE);
}
public GenericKeyedObjectPool(KeyedPoolableObjectFactory factory, GenericKeyedObjectPool.Config config) {
this(factory, config.maxActive, config.whenExhaustedAction, config.maxWait, config.maxIdle, config.maxTotal,
config.minIdle, config.testOnBorrow, config.testOnReturn, config.timeBetweenEvictionRunsMillis,
config.numTestsPerEvictionRun, config.minEvictableIdleTimeMillis, config.testWhileIdle, config.lifo);
}
public GenericKeyedObjectPool(KeyedPoolableObjectFactory factory, int maxActive) {
this(factory,maxActive, DEFAULT_WHEN_EXHAUSTED_ACTION, DEFAULT_MAX_WAIT, DEFAULT_MAX_IDLE,
DEFAULT_TEST_ON_BORROW, DEFAULT_TEST_ON_RETURN, DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS,
DEFAULT_NUM_TESTS_PER_EVICTION_RUN, DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS, DEFAULT_TEST_WHILE_IDLE);
}
public GenericKeyedObjectPool(KeyedPoolableObjectFactory factory, int maxActive, byte whenExhaustedAction,
long maxWait) {
this(factory, maxActive, whenExhaustedAction, maxWait, DEFAULT_MAX_IDLE, DEFAULT_TEST_ON_BORROW,
DEFAULT_TEST_ON_RETURN, DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS, DEFAULT_NUM_TESTS_PER_EVICTION_RUN,
DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS, DEFAULT_TEST_WHILE_IDLE);
}
public GenericKeyedObjectPool(KeyedPoolableObjectFactory factory, int maxActive, byte whenExhaustedAction,
long maxWait, boolean testOnBorrow, boolean testOnReturn) {
this(factory, maxActive, whenExhaustedAction, maxWait, DEFAULT_MAX_IDLE,testOnBorrow,testOnReturn,
DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS, DEFAULT_NUM_TESTS_PER_EVICTION_RUN,
DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS, DEFAULT_TEST_WHILE_IDLE);
}
public GenericKeyedObjectPool(KeyedPoolableObjectFactory factory, int maxActive, byte whenExhaustedAction,
long maxWait, int maxIdle) {
this(factory, maxActive, whenExhaustedAction, maxWait, maxIdle, DEFAULT_TEST_ON_BORROW, DEFAULT_TEST_ON_RETURN,
DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS, DEFAULT_NUM_TESTS_PER_EVICTION_RUN,
DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS, DEFAULT_TEST_WHILE_IDLE);
}
public GenericKeyedObjectPool(KeyedPoolableObjectFactory factory, int maxActive, byte whenExhaustedAction,
long maxWait, int maxIdle, boolean testOnBorrow, boolean testOnReturn) {
this(factory, maxActive, whenExhaustedAction, maxWait, maxIdle, testOnBorrow, testOnReturn,
DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS, DEFAULT_NUM_TESTS_PER_EVICTION_RUN,
DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS, DEFAULT_TEST_WHILE_IDLE);
}
public GenericKeyedObjectPool(KeyedPoolableObjectFactory factory, int maxActive, byte whenExhaustedAction,
long maxWait, int maxIdle, boolean testOnBorrow, boolean testOnReturn, long timeBetweenEvictionRunsMillis,
int numTestsPerEvictionRun, long minEvictableIdleTimeMillis, boolean testWhileIdle) {
this(factory, maxActive, whenExhaustedAction, maxWait, maxIdle, GenericKeyedObjectPool.DEFAULT_MAX_TOTAL,
testOnBorrow, testOnReturn, timeBetweenEvictionRunsMillis, numTestsPerEvictionRun,
minEvictableIdleTimeMillis, testWhileIdle);
}
public GenericKeyedObjectPool(KeyedPoolableObjectFactory factory, int maxActive, byte whenExhaustedAction,
long maxWait, int maxIdle, int maxTotal, boolean testOnBorrow, boolean testOnReturn,
long timeBetweenEvictionRunsMillis, int numTestsPerEvictionRun, long minEvictableIdleTimeMillis,
boolean testWhileIdle) {
this(factory, maxActive, whenExhaustedAction, maxWait, maxIdle, maxTotal,
GenericKeyedObjectPool.DEFAULT_MIN_IDLE, testOnBorrow, testOnReturn, timeBetweenEvictionRunsMillis,
numTestsPerEvictionRun, minEvictableIdleTimeMillis, testWhileIdle);
}
public GenericKeyedObjectPool(KeyedPoolableObjectFactory factory, int maxActive, byte whenExhaustedAction,
long maxWait, int maxIdle, int maxTotal, int minIdle, boolean testOnBorrow, boolean testOnReturn,
long timeBetweenEvictionRunsMillis, int numTestsPerEvictionRun, long minEvictableIdleTimeMillis,
boolean testWhileIdle) {
this(factory, maxActive, whenExhaustedAction, maxWait, maxIdle, maxTotal, minIdle, testOnBorrow, testOnReturn,
timeBetweenEvictionRunsMillis, numTestsPerEvictionRun, minEvictableIdleTimeMillis, testWhileIdle,
DEFAULT_LIFO);
}
public GenericKeyedObjectPool(KeyedPoolableObjectFactory factory, int maxActive, byte whenExhaustedAction,
long maxWait, int maxIdle, int maxTotal, int minIdle, boolean testOnBorrow, boolean testOnReturn,
long timeBetweenEvictionRunsMillis, int numTestsPerEvictionRun, long minEvictableIdleTimeMillis,
boolean testWhileIdle, boolean lifo) {
_factory = factory;
_maxActive = maxActive;
_lifo = lifo;
switch (whenExhaustedAction) {
case WHEN_EXHAUSTED_BLOCK:
case WHEN_EXHAUSTED_FAIL:
case WHEN_EXHAUSTED_GROW:
_whenExhaustedAction = whenExhaustedAction;
break;
default:
throw new IllegalArgumentException(""whenExhaustedAction "" + whenExhaustedAction + "" not recognized."");
}
_maxWait = maxWait;
_maxIdle = maxIdle;
_maxTotal = maxTotal;
_minIdle = minIdle;
_testOnBorrow = testOnBorrow;
_testOnReturn = testOnReturn;
_timeBetweenEvictionRunsMillis = timeBetweenEvictionRunsMillis;
_numTestsPerEvictionRun = numTestsPerEvictionRun;
_minEvictableIdleTimeMillis = minEvictableIdleTimeMillis;
_testWhileIdle = testWhileIdle;
_poolMap = new HashMap();
_poolList = new CursorableLinkedList();
startEvictor(_timeBetweenEvictionRunsMillis);
}
public synchronized int getMaxActive() {
return _maxActive;
}
public synchronized void setMaxActive(int maxActive) {
_maxActive = maxActive;
allocate();
}
public synchronized int getMaxTotal() {
return _maxTotal;
}
public synchronized void setMaxTotal(int maxTotal) {
_maxTotal = maxTotal;
allocate();
}
public synchronized byte getWhenExhaustedAction() {
return _whenExhaustedAction;
}
public synchronized void setWhenExhaustedAction(byte whenExhaustedAction) {
switch(whenExhaustedAction) {
case WHEN_EXHAUSTED_BLOCK:
case WHEN_EXHAUSTED_FAIL:
case WHEN_EXHAUSTED_GROW:
_whenExhaustedAction = whenExhaustedAction;
allocate();
break;
default:
throw new IllegalArgumentException(""whenExhaustedAction "" + whenExhaustedAction + "" not recognized."");
}
}
public synchronized long getMaxWait() {
return _maxWait;
}
public synchronized void setMaxWait(long maxWait) {
_maxWait = maxWait;
}
public synchronized int getMaxIdle() {
return _maxIdle;
}
public synchronized void setMaxIdle(int maxIdle) {
_maxIdle = maxIdle;
allocate();
}
public void setMinIdle(int poolSize) {
_minIdle = poolSize;
}
public int getMinIdle() {
return _minIdle;
}
public boolean getTestOnBorrow() {
return _testOnBorrow;
}
public void setTestOnBorrow(boolean testOnBorrow) {
_testOnBorrow = testOnBorrow;
}
public boolean getTestOnReturn() {
return _testOnReturn;
}
public void setTestOnReturn(boolean testOnReturn) {
_testOnReturn = testOnReturn;
}
public synchronized long getTimeBetweenEvictionRunsMillis() {
return _timeBetweenEvictionRunsMillis;
}
public synchronized void setTimeBetweenEvictionRunsMillis(long timeBetweenEvictionRunsMillis) {
_timeBetweenEvictionRunsMillis = timeBetweenEvictionRunsMillis;
startEvictor(_timeBetweenEvictionRunsMillis);
}
public synchronized int getNumTestsPerEvictionRun() {
return _numTestsPerEvictionRun;
}
public synchronized void setNumTestsPerEvictionRun(int numTestsPerEvictionRun) {
_numTestsPerEvictionRun = numTestsPerEvictionRun;
}
public synchronized long getMinEvictableIdleTimeMillis() {
return _minEvictableIdleTimeMillis;
}
public synchronized void setMinEvictableIdleTimeMillis(long minEvictableIdleTimeMillis) {
_minEvictableIdleTimeMillis = minEvictableIdleTimeMillis;
}
public synchronized boolean getTestWhileIdle() {
return _testWhileIdle;
}
public synchronized void setTestWhileIdle(boolean testWhileIdle) {
_testWhileIdle = testWhileIdle;
}
public synchronized void setConfig(GenericKeyedObjectPool.Config conf) {
setMaxIdle(conf.maxIdle);
setMaxActive(conf.maxActive);
setMaxTotal(conf.maxTotal);
setMinIdle(conf.minIdle);
setMaxWait(conf.maxWait);
setWhenExhaustedAction(conf.whenExhaustedAction);
setTestOnBorrow(conf.testOnBorrow);
setTestOnReturn(conf.testOnReturn);
setTestWhileIdle(conf.testWhileIdle);
setNumTestsPerEvictionRun(conf.numTestsPerEvictionRun);
setMinEvictableIdleTimeMillis(conf.minEvictableIdleTimeMillis);
setTimeBetweenEvictionRunsMillis(conf.timeBetweenEvictionRunsMillis);
}
public synchronized boolean getLifo() {
return _lifo;
}
public synchronized void setLifo(boolean lifo) {
this._lifo = lifo;
}
public Object borrowObject(Object key) throws Exception {
long starttime = System.currentTimeMillis();
Latch latch = new Latch(key);
byte whenExhaustedAction;
long maxWait;
synchronized (this) {
whenExhaustedAction = _whenExhaustedAction;
maxWait = _maxWait;
_allocationQueue.add(latch);
allocate();
}
for(;;) {
synchronized (this) {
assertOpen();
}
if (null == latch.getPair()) {
if (latch.mayCreate()) {
} else {
switch(whenExhaustedAction) {
case WHEN_EXHAUSTED_GROW:
synchronized (this) {
if (latch.getPair() == null && !latch.mayCreate()) {
_allocationQueue.remove(latch);
latch.getPool().incrementInternalProcessingCount();
}
}
break;
case WHEN_EXHAUSTED_FAIL:
synchronized (this) {
if (latch.getPair() != null || latch.mayCreate()) {
break;
}
_allocationQueue.remove(latch);
}
throw new NoSuchElementException(""Pool exhausted"");
case WHEN_EXHAUSTED_BLOCK:
try {
synchronized (latch) {
if (latch.getPair() == null && !latch.mayCreate()) {
if (maxWait <= 0) {
latch.wait();
} else {
final long elapsed = (System.currentTimeMillis() - starttime);
final long waitTime = maxWait - elapsed;
if (waitTime > 0)
{
latch.wait(waitTime);
}
}
} else {
break;
}
}
} catch(InterruptedException e) {
synchronized (this) {
if (latch.getPair() == null && !latch.mayCreate()) {
_allocationQueue.remove(latch);
} else {
break;
}
}
Thread.currentThread().interrupt();
throw e;
}
if (maxWait > 0 && ((System.currentTimeMillis() - starttime) >= maxWait)) {
synchronized (this) {
if (latch.getPair() == null && !latch.mayCreate()) {
_allocationQueue.remove(latch);
} else {
break;
}
}
throw new NoSuchElementException(""Timeout waiting for idle object"");
} else {
continue; 
}
default:
throw new IllegalArgumentException(""whenExhaustedAction "" + whenExhaustedAction +
"" not recognized."");
}
}
}
boolean newlyCreated = false;
if (null == latch.getPair()) {
try {
Object obj = _factory.makeObject(key);
latch.setPair(new ObjectTimestampPair(obj));
newlyCreated = true;
} finally {
if (!newlyCreated) {
synchronized (this) {
latch.getPool().decrementInternalProcessingCount();
allocate();
}
}
}
}
try {
_factory.activateObject(key, latch.getPair().value);
if (_testOnBorrow && !_factory.validateObject(key, latch.getPair().value)) {
throw new Exception(""ValidateObject failed"");
}
synchronized (this) {
latch.getPool().decrementInternalProcessingCount();
latch.getPool().incrementActiveCount();
}
return latch.getPair().value;
} catch (Throwable e) {
PoolUtils.checkRethrow(e);
try {
_factory.destroyObject(key, latch.getPair().value);
} catch (Throwable e2) {
PoolUtils.checkRethrow(e2);
}
synchronized (this) {
latch.getPool().decrementInternalProcessingCount();
if (!newlyCreated) {
latch.reset();
_allocationQueue.add(0, latch);
}
allocate();
}
if (newlyCreated) {
throw new NoSuchElementException(
""Could not create a validated object, cause: "" +
e.getMessage());
}
else {
continue; 
}
}
}
}
private void allocate() {
boolean clearOldest = false;
synchronized (this) {
if (isClosed()) return;
Iterator allocationQueueIter = _allocationQueue.iterator();
while (allocationQueueIter.hasNext()) {
Latch latch = (Latch) allocationQueueIter.next();
ObjectQueue pool = (ObjectQueue)(_poolMap.get(latch.getkey()));
if (null == pool) {
pool = new ObjectQueue();
_poolMap.put(latch.getkey(), pool);
_poolList.add(latch.getkey());
}
latch.setPool(pool);
if (!pool.queue.isEmpty()) {
allocationQueueIter.remove();
latch.setPair(
(ObjectTimestampPair) pool.queue.removeFirst());
pool.incrementInternalProcessingCount();
_totalIdle--;
synchronized (latch) {
latch.notify();
}
continue;
}
if ((_maxTotal > 0) &&
(_totalActive + _totalIdle + _totalInternalProcessing >= _maxTotal)) {
clearOldest = true;
break;
}
if ((_maxActive < 0 || pool.activeCount + pool.internalProcessingCount < _maxActive) &&
(_maxTotal < 0 || _totalActive + _totalIdle + _totalInternalProcessing < _maxTotal)) {
allocationQueueIter.remove();
latch.setMayCreate(true);
pool.incrementInternalProcessingCount();
synchronized (latch) {
latch.notify();
}
continue;
}
if (_maxActive < 0) {
break;
}
}
}
if (clearOldest) {
clearOldest();
}
}
public void clear() {
Map toDestroy = new HashMap();
synchronized (this) {
for (Iterator it = _poolMap.keySet().iterator(); it.hasNext();) {
Object key = it.next();
ObjectQueue pool = (ObjectQueue)_poolMap.get(key);
List objects = new ArrayList();
objects.addAll(pool.queue);
toDestroy.put(key, objects);
it.remove();
_poolList.remove(key);
_totalIdle = _totalIdle - pool.queue.size();
_totalInternalProcessing =
_totalInternalProcessing + pool.queue.size();
pool.queue.clear();
}
}
destroy(toDestroy, _factory);
}
public void clearOldest() {
final Map toDestroy = new HashMap();
final Map map = new TreeMap();
synchronized (this) {
for (Iterator keyiter = _poolMap.keySet().iterator(); keyiter.hasNext();) {
final Object key = keyiter.next();
final CursorableLinkedList list = ((ObjectQueue)_poolMap.get(key)).queue;
for (Iterator it = list.iterator(); it.hasNext();) {
map.put(it.next(), key);
}
}
Set setPairKeys = map.entrySet();
int itemsToRemove = ((int) (map.size() * 0.15)) + 1;
Iterator iter = setPairKeys.iterator();
while (iter.hasNext() && itemsToRemove > 0) {
Map.Entry entry = (Map.Entry) iter.next();
Object key = entry.getValue();
ObjectTimestampPair pairTimeStamp = (ObjectTimestampPair) entry.getKey();
final CursorableLinkedList list =
((ObjectQueue)(_poolMap.get(key))).queue;
list.remove(pairTimeStamp);
if (toDestroy.containsKey(key)) {
((List)toDestroy.get(key)).add(pairTimeStamp);
} else {
List listForKey = new ArrayList();
listForKey.add(pairTimeStamp);
toDestroy.put(key, listForKey);
}
if (list.isEmpty()) {
_poolMap.remove(key);
_poolList.remove(key);
}
_totalIdle--;
_totalInternalProcessing++;
itemsToRemove--;
}
}
destroy(toDestroy, _factory);
}
public void clear(Object key) {
Map toDestroy = new HashMap();
final ObjectQueue pool;
synchronized (this) {
pool = (ObjectQueue)(_poolMap.remove(key));
if (pool == null) {
return;
} else {
_poolList.remove(key);
}
List objects = new ArrayList();
objects.addAll(pool.queue);
toDestroy.put(key, objects);
_totalIdle = _totalIdle - pool.queue.size();
_totalInternalProcessing =
_totalInternalProcessing + pool.queue.size();
pool.queue.clear();
}
destroy(toDestroy, _factory);
}
private void destroy(Map m, KeyedPoolableObjectFactory factory) {
for (Iterator entries = m.entrySet().iterator(); entries.hasNext();) {
Map.Entry entry = (Entry) entries.next();
Object key = entry.getKey();
Collection c = (Collection) entry.getValue();
for (Iterator it = c.iterator(); it.hasNext();) {
try {
factory.destroyObject(
key,((ObjectTimestampPair)(it.next())).value);
} catch(Exception e) {
} finally {
synchronized(this) {
_totalInternalProcessing--;
allocate();
}
}
}
}
}
public synchronized int getNumActive() {
return _totalActive;
}
public synchronized int getNumIdle() {
return _totalIdle;
}
public synchronized int getNumActive(Object key) {
final ObjectQueue pool = (ObjectQueue)(_poolMap.get(key));
return pool != null ? pool.activeCount : 0;
}
public synchronized int getNumIdle(Object key) {
final ObjectQueue pool = (ObjectQueue)(_poolMap.get(key));
return pool != null ? pool.queue.size() : 0;
}
public void returnObject(Object key, Object obj) throws Exception {
try {
addObjectToPool(key, obj, true);
} catch (Exception e) {
if (_factory != null) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e2) {
}
// TODO: Correctness here depends on control in addObjectToPool.
ObjectQueue pool = (ObjectQueue) (_poolMap.get(key));
if (pool != null) {
synchronized(this) {
pool.decrementActiveCount();
allocate();
}
}
}
}
}
private void addObjectToPool(Object key, Object obj,
boolean decrementNumActive) throws Exception {
boolean success = true; 
if (_testOnReturn && !_factory.validateObject(key, obj)) {
success = false;
} else {
_factory.passivateObject(key, obj);
}
boolean shouldDestroy = !success;
ObjectQueue pool;
synchronized (this) {
pool = (ObjectQueue) (_poolMap.get(key));
if (null == pool) {
pool = new ObjectQueue();
_poolMap.put(key, pool);
_poolList.add(key);
}
if (isClosed()) {
shouldDestroy = true;
} else {
if (_maxIdle >= 0 && (pool.queue.size() >= _maxIdle)) {
shouldDestroy = true;
} else if (success) {
if (_lifo) {
pool.queue.addFirst(new ObjectTimestampPair(obj));
} else {
pool.queue.addLast(new ObjectTimestampPair(obj));
}
_totalIdle++;
if (decrementNumActive) {
pool.decrementActiveCount();
}
allocate();
}
}
}
if (shouldDestroy) {
try {
_factory.destroyObject(key, obj);
} catch(Exception e) {
}
if (decrementNumActive) {
synchronized(this) {
pool.decrementActiveCount();
allocate();
}
}
}
}
public void invalidateObject(Object key, Object obj) throws Exception {
try {
_factory.destroyObject(key, obj);
} finally {
synchronized (this) {
ObjectQueue pool = (ObjectQueue) (_poolMap.get(key));
if (null == pool) {
pool = new ObjectQueue();
_poolMap.put(key, pool);
_poolList.add(key);
}
pool.decrementActiveCount();
allocate(); 
}
}
}
public void addObject(Object key) throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
Object obj = _factory.makeObject(key);
try {
assertOpen();
addObjectToPool(key, obj, false);
} catch (IllegalStateException ex) { 
try {
_factory.destroyObject(key, obj);
} catch (Exception ex2) {
}
throw ex;
}
}
public synchronized void preparePool(Object key, boolean populateImmediately) {
ObjectQueue pool = (ObjectQueue)(_poolMap.get(key));
if (null == pool) {
pool = new ObjectQueue();
_poolMap.put(key,pool);
_poolList.add(key);
}
if (populateImmediately) {
try {
ensureMinIdle(key);
}
catch (Exception e) {
}
}
}
public void close() throws Exception {
super.close();
synchronized (this) {
clear();
if (null != _evictionCursor) {
_evictionCursor.close();
_evictionCursor = null;
}
if (null != _evictionKeyCursor) {
_evictionKeyCursor.close();
_evictionKeyCursor = null;
}
startEvictor(-1L);
}
}
public void setFactory(KeyedPoolableObjectFactory factory) throws IllegalStateException {
Map toDestroy = new HashMap();
final KeyedPoolableObjectFactory oldFactory = _factory;
synchronized (this) {
assertOpen();
if (0 < getNumActive()) {
throw new IllegalStateException(""Objects are already active"");
} else {
for (Iterator it = _poolMap.keySet().iterator(); it.hasNext();) {
Object key = it.next();
ObjectQueue pool = (ObjectQueue)_poolMap.get(key);
if (pool != null) {
List objects = new ArrayList();
objects.addAll(pool.queue);
toDestroy.put(key, objects);
it.remove();
_poolList.remove(key);
_totalIdle = _totalIdle - pool.queue.size();
_totalInternalProcessing =
_totalInternalProcessing + pool.queue.size();
pool.queue.clear();
}
}
_factory = factory;
}
}
destroy(toDestroy, oldFactory);
}
public void evict() throws Exception {
Object key = null;
boolean testWhileIdle;
long minEvictableIdleTimeMillis;
synchronized (this) {
testWhileIdle = _testWhileIdle;
minEvictableIdleTimeMillis = _minEvictableIdleTimeMillis;
if (_evictionKeyCursor != null &&
_evictionKeyCursor._lastReturned != null) {
key = _evictionKeyCursor._lastReturned.value();
}
}
for (int i=0, m=getNumTests(); i<m; i++) {
final ObjectTimestampPair pair;
synchronized (this) {
if (_poolMap == null || _poolMap.size() == 0) {
continue;
}
if (null == _evictionKeyCursor) {
resetEvictionKeyCursor();
key = null;
}
if (null == _evictionCursor) {
if (_evictionKeyCursor.hasNext()) {
key = _evictionKeyCursor.next();
resetEvictionObjectCursor(key);
} else {
resetEvictionKeyCursor();
if (_evictionKeyCursor != null) {
if (_evictionKeyCursor.hasNext()) {
key = _evictionKeyCursor.next();
resetEvictionObjectCursor(key);
}
}
}
}
if (_evictionCursor == null) {
continue; 
}
if ((_lifo && !_evictionCursor.hasPrevious()) ||
(!_lifo && !_evictionCursor.hasNext())) {
if (_evictionKeyCursor != null) {
if (_evictionKeyCursor.hasNext()) {
key = _evictionKeyCursor.next();
resetEvictionObjectCursor(key);
} else { 
resetEvictionKeyCursor();
if (_evictionKeyCursor != null) {
if (_evictionKeyCursor.hasNext()) {
key = _evictionKeyCursor.next();
resetEvictionObjectCursor(key);
}
}
}
}
}
if ((_lifo && !_evictionCursor.hasPrevious()) ||
(!_lifo && !_evictionCursor.hasNext())) {
continue; 
}
pair = _lifo ?
(ObjectTimestampPair) _evictionCursor.previous() :
(ObjectTimestampPair) _evictionCursor.next();
_evictionCursor.remove();
_totalIdle--;
_totalInternalProcessing++;
}
boolean removeObject=false;
if ((minEvictableIdleTimeMillis > 0) &&
(System.currentTimeMillis() - pair.tstamp >
minEvictableIdleTimeMillis)) {
removeObject=true;
}
if (testWhileIdle && removeObject == false) {
boolean active = false;
try {
_factory.activateObject(key,pair.value);
active = true;
} catch(Exception e) {
removeObject=true;
}
if (active) {
if (!_factory.validateObject(key,pair.value)) {
removeObject=true;
} else {
try {
_factory.passivateObject(key,pair.value);
} catch(Exception e) {
removeObject=true;
}
}
}
}
if (removeObject) {
try {
_factory.destroyObject(key, pair.value);
} catch(Exception e) {
} finally {
if (_minIdle == 0) {
synchronized (this) {
ObjectQueue objectQueue =
(ObjectQueue)_poolMap.get(key);
if (objectQueue != null &&
objectQueue.queue.isEmpty()) {
_poolMap.remove(key);
_poolList.remove(key);
}
}
}
}
}
synchronized (this) {
if (!removeObject) {
_evictionCursor.add(pair);
_totalIdle++;
if (_lifo) {
_evictionCursor.previous();
}
}
_totalInternalProcessing--;
}
}
}
private void resetEvictionKeyCursor() {
if (_evictionKeyCursor != null) {
_evictionKeyCursor.close();
}
_evictionKeyCursor = _poolList.cursor();
if (null != _evictionCursor) {
_evictionCursor.close();
_evictionCursor = null;
}
}
private void resetEvictionObjectCursor(Object key) {
if (_evictionCursor != null) {
_evictionCursor.close();
}
if (_poolMap == null) {
return;
}
ObjectQueue pool = (ObjectQueue) (_poolMap.get(key));
if (pool != null) {
CursorableLinkedList queue = pool.queue;
_evictionCursor = queue.cursor(_lifo ? queue.size() : 0);
}
}
private void ensureMinIdle() throws Exception {
if (_minIdle > 0) {
Object[] keysCopy;
synchronized(this) {
keysCopy = _poolMap.keySet().toArray();
}
for (int i=0; i < keysCopy.length; i++) {
ensureMinIdle(keysCopy[i]);
}
}
}
private void ensureMinIdle(Object key) throws Exception {
ObjectQueue pool;
synchronized(this) {
pool = (ObjectQueue)(_poolMap.get(key));
}
if (pool == null) {
return;
}
int objectDeficit = calculateDeficit(pool, false);
for (int i = 0; i < objectDeficit && calculateDeficit(pool, true) > 0; i++) {
try {
addObject(key);
} finally {
synchronized (this) {
pool.decrementInternalProcessingCount();
allocate();
}
}
}
}
protected synchronized void startEvictor(long delay) {
if (null != _evictor) {
EvictionTimer.cancel(_evictor);
_evictor = null;
}
if (delay > 0) {
_evictor = new Evictor();
EvictionTimer.schedule(_evictor, delay, delay);
}
}
synchronized String debugInfo() {
StringBuffer buf = new StringBuffer();
buf.append(""Active: "").append(getNumActive()).append(""\n"");
buf.append(""Idle: "").append(getNumIdle()).append(""\n"");
Iterator it = _poolMap.keySet().iterator();
while (it.hasNext()) {
Object key = it.next();
buf.append(""\t"").append(key).append("" "").append(_poolMap.get(key)).append(""\n"");
}
return buf.toString();
}
private synchronized int getNumTests() {
if (_numTestsPerEvictionRun >= 0) {
return Math.min(_numTestsPerEvictionRun, _totalIdle);
} else {
return(int)(Math.ceil(_totalIdle/Math.abs((double)_numTestsPerEvictionRun)));
}
}
private synchronized int calculateDeficit(ObjectQueue pool,
boolean incrementInternal) {
int objectDefecit = 0;
objectDefecit = getMinIdle() - pool.queue.size();
if (getMaxActive() > 0) {
int growLimit = Math.max(0, getMaxActive() - pool.activeCount - pool.queue.size() - pool.internalProcessingCount);
objectDefecit = Math.min(objectDefecit, growLimit);
}
if (getMaxTotal() > 0) {
int growLimit = Math.max(0, getMaxTotal() - getNumActive() - getNumIdle() - _totalInternalProcessing);
objectDefecit = Math.min(objectDefecit, growLimit);
}
if (incrementInternal && objectDefecit > 0) {
pool.incrementInternalProcessingCount();
}
return objectDefecit;
}
private class ObjectQueue {
private int activeCount = 0;
private final CursorableLinkedList queue = new CursorableLinkedList();
private int internalProcessingCount = 0;
void incrementActiveCount() {
synchronized (GenericKeyedObjectPool.this) {
_totalActive++;
}
activeCount++;
}
void decrementActiveCount() {
synchronized (GenericKeyedObjectPool.this) {
_totalActive--;
}
if (activeCount > 0) {
activeCount--;
}
}
void incrementInternalProcessingCount() {
synchronized (GenericKeyedObjectPool.this) {
_totalInternalProcessing++;
}
internalProcessingCount++;
}
void decrementInternalProcessingCount() {
synchronized (GenericKeyedObjectPool.this) {
_totalInternalProcessing--;
}
internalProcessingCount--;
}
}
static class ObjectTimestampPair implements Comparable {
//CHECKSTYLE: stop VisibilityModifier
Object value;
long tstamp;
//CHECKSTYLE: resume VisibilityModifier
ObjectTimestampPair(Object val) {
this(val, System.currentTimeMillis());
}
ObjectTimestampPair(Object val, long time) {
value = val;
tstamp = time;
}
public String toString() {
return value + "";"" + tstamp;
}
public int compareTo(Object obj) {
return compareTo((ObjectTimestampPair) obj);
}
public int compareTo(ObjectTimestampPair other) {
final long tstampdiff = this.tstamp - other.tstamp;
if (tstampdiff == 0) {
return System.identityHashCode(this) - System.identityHashCode(other);
} else {
return (int)Math.min(Math.max(tstampdiff, Integer.MIN_VALUE), Integer.MAX_VALUE);
}
}
public Object getValue() {
return value;
}
public long getTstamp() {
return tstamp;
}
}
private class Evictor extends TimerTask {
public void run() {
try {
evict();
} catch(Exception e) {
} catch(OutOfMemoryError oome) {
oome.printStackTrace(System.err);
}
try {
ensureMinIdle();
} catch (Exception e) {
}
}
}
public static class Config {
//CHECKSTYLE: stop VisibilityModifier
public int maxIdle = GenericKeyedObjectPool.DEFAULT_MAX_IDLE;
public int maxActive = GenericKeyedObjectPool.DEFAULT_MAX_ACTIVE;
public int maxTotal = GenericKeyedObjectPool.DEFAULT_MAX_TOTAL;
public int minIdle = GenericKeyedObjectPool.DEFAULT_MIN_IDLE;
public long maxWait = GenericKeyedObjectPool.DEFAULT_MAX_WAIT;
public byte whenExhaustedAction = GenericKeyedObjectPool.DEFAULT_WHEN_EXHAUSTED_ACTION;
public boolean testOnBorrow = GenericKeyedObjectPool.DEFAULT_TEST_ON_BORROW;
public boolean testOnReturn = GenericKeyedObjectPool.DEFAULT_TEST_ON_RETURN;
public boolean testWhileIdle = GenericKeyedObjectPool.DEFAULT_TEST_WHILE_IDLE;
public long timeBetweenEvictionRunsMillis = GenericKeyedObjectPool.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS;
public int numTestsPerEvictionRun =  GenericKeyedObjectPool.DEFAULT_NUM_TESTS_PER_EVICTION_RUN;
public long minEvictableIdleTimeMillis = GenericKeyedObjectPool.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS;
public boolean lifo = GenericKeyedObjectPool.DEFAULT_LIFO;
//CHECKSTYLE: resume VisibilityModifier
}
private static final class Latch {
private final Object _key;
private ObjectQueue _pool;
private ObjectTimestampPair _pair;
private boolean _mayCreate = false;
private Latch(Object key) {
_key = key;
}
private synchronized Object getkey() {
return _key;
}
private synchronized ObjectQueue getPool() {
return _pool;
}
private synchronized void setPool(ObjectQueue pool) {
_pool = pool;
}
private synchronized ObjectTimestampPair getPair() {
return _pair;
}
private synchronized void setPair(ObjectTimestampPair pair) {
_pair = pair;
}
private synchronized boolean mayCreate() {
return _mayCreate;
}
private synchronized void setMayCreate(boolean mayCreate) {
_mayCreate = mayCreate;
}
private synchronized void reset() {
_pair = null;
_mayCreate = false;
}
}
private int _maxIdle = DEFAULT_MAX_IDLE;
private volatile int _minIdle = DEFAULT_MIN_IDLE;
private int _maxActive = DEFAULT_MAX_ACTIVE;
private int _maxTotal = DEFAULT_MAX_TOTAL;
private long _maxWait = DEFAULT_MAX_WAIT;
private byte _whenExhaustedAction = DEFAULT_WHEN_EXHAUSTED_ACTION;
private volatile boolean _testOnBorrow = DEFAULT_TEST_ON_BORROW;
private volatile boolean _testOnReturn = DEFAULT_TEST_ON_RETURN;
private boolean _testWhileIdle = DEFAULT_TEST_WHILE_IDLE;
private long _timeBetweenEvictionRunsMillis = DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS;
private int _numTestsPerEvictionRun =  DEFAULT_NUM_TESTS_PER_EVICTION_RUN;
private long _minEvictableIdleTimeMillis = DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS;
private Map _poolMap = null;
private int _totalActive = 0;
private int _totalIdle = 0;
private int _totalInternalProcessing = 0;
private KeyedPoolableObjectFactory _factory = null;
private Evictor _evictor = null;
private CursorableLinkedList _poolList = null;
private CursorableLinkedList.Cursor _evictionCursor = null;
private CursorableLinkedList.Cursor _evictionKeyCursor = null;
private boolean _lifo = DEFAULT_LIFO;
private LinkedList _allocationQueue = new LinkedList();
","public void setFactory(KeyedPoolableObjectFactory factory) throws IllegalStateException {
Map toDestroy = new HashMap();
final KeyedPoolableObjectFactory oldFactory = _factory;
synchronized (this) {
assertOpen();
if (0 < getNumActive()) {
throw new IllegalStateException(""Objects are already active"");
} else {
for (Iterator it = _poolMap.keySet().iterator(); it.hasNext(); ) {
Object key = it.next();
ObjectQueue pool = (ObjectQueue) _poolMap.get(key);
if (pool != null) {
List objects = new ArrayList();
objects.addAll(pool.queue);
toDestroy.put(key, objects);
it.remove();
_poolList.remove(key);
_totalIdle = _totalIdle - pool.queue.size();
_totalInternalProcessing = _totalInternalProcessing + pool.queue.size();
pool.queue.clear();
}
}
_factory = factory;
}
}
destroy(toDestroy, oldFactory);
}","public void setFactory(KeyedPoolableObjectFactory factory) throws IllegalStateException {
Map mapVar1 = mapLiteral2;
final KeyedPoolableObjectFactory keyedpoolableobjectfactoryVar3 = keyedpoolableobjectfactoryLiteral4;
synchronized (this) {
assertOpen();
if (0 < getNumActive()) {
throw new IllegalStateException(""Objects are already active"");
} else {
for (Iterator iteratorVar13 = iteratorLiteral14; iteratorVar5.hasNext(); ) {
Object objectVar7 = objectLiteral8;
ObjectQueue objectqueueVar9 = objectqueueLiteral10;
if (objectqueueVar9 != null) {
List listVar11 = listLiteral12;
listVar11.addAll(objectqueueVar9.queue);
mapVar1.put(objectVar7, listVar11);
iteratorVar5.remove();
_poolList.remove(objectVar7);
_totalIdle = _totalIdle - objectqueueVar9.queue.size();
_totalInternalProcessing = _totalInternalProcessing + objectqueueVar9.queue.size();
objectqueueVar9.queue.clear();
}
}
_factory = factory;
}
}
destroy(mapVar1, keyedpoolableobjectfactoryVar3);
}"
17285,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1150,"} catch(Exception e) {
","public void run() {
try {
evict();
} catch (Exception e) {
} catch (OutOfMemoryError oome) {
oome.printStackTrace(System.err);
}
try {
ensureMinIdle();
} catch (Exception e) {
}
}","public void run() {
try {
evict();
} catch (Exception e) {
} catch (OutOfMemoryError oome) {
oome.printStackTrace(System.err);
}
try {
ensureMinIdle();
} catch (Exception e) {
}
}"
17287,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1152,"} catch (Exception e2) {
","public void returnObject(Object key, Object obj) throws Exception {
try {
addObjectToPool(key, obj, true);
} catch (Exception e) {
if (_factory != null) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e2) {
}
// TODO: Correctness here depends on control in addObjectToPool.
ObjectQueue pool = (ObjectQueue) (_poolMap.get(key));
if (pool != null) {
synchronized (this) {
pool.decrementActiveCount();
allocate();
}
}
}
}
}","public void returnObject(Object key, Object obj) throws Exception {
try {
addObjectToPool(key, obj, true);
} catch (Exception e) {
if (_factory != null) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e2) {
}
// TODO: Correctness here depends on control in addObjectToPool.
ObjectQueue objectqueueVar1 = objectqueueLiteral2;
if (objectqueueVar1 != null) {
synchronized (this) {
objectqueueVar1.decrementActiveCount();
allocate();
}
}
}
}
}"
17288,PERFORMANCE,WMI_WRONG_MAP_ITERATOR,FP,pool,1153,"ObjectQueue pool = (ObjectQueue)_poolMap.get(key);
","public void clear() {
Map toDestroy = new HashMap();
synchronized (this) {
for (Iterator it = _poolMap.keySet().iterator(); it.hasNext(); ) {
Object key = it.next();
ObjectQueue pool = (ObjectQueue) _poolMap.get(key);
List objects = new ArrayList();
objects.addAll(pool.queue);
toDestroy.put(key, objects);
it.remove();
_poolList.remove(key);
_totalIdle = _totalIdle - pool.queue.size();
_totalInternalProcessing = _totalInternalProcessing + pool.queue.size();
pool.queue.clear();
}
}
destroy(toDestroy, _factory);
}","public void clear() {
Map mapVar1 = mapLiteral2;
synchronized (this) {
for (Iterator iteratorVar11 = iteratorLiteral12; iteratorVar3.hasNext(); ) {
Object objectVar5 = objectLiteral6;
ObjectQueue objectqueueVar7 = objectqueueLiteral8;
List listVar9 = listLiteral10;
listVar9.addAll(objectqueueVar7.queue);
mapVar1.put(objectVar5, listVar9);
iteratorVar3.remove();
_poolList.remove(objectVar5);
_totalIdle = _totalIdle - objectqueueVar7.queue.size();
_totalInternalProcessing = _totalInternalProcessing + objectqueueVar7.queue.size();
objectqueueVar7.queue.clear();
}
}
destroy(mapVar1, _factory);
}"
17289,BAD_PRACTICE,EQ_COMPARETO_USE_OBJECT_EQUALS,FP,pool,1154,"final long tstampdiff = this.tstamp - other.tstamp;
if (tstampdiff == 0) {
return System.identityHashCode(this) - System.identityHashCode(other);
} else {
return (int)Math.min(Math.max(tstampdiff, Integer.MIN_VALUE), Integer.MAX_VALUE);
","public int compareTo(ObjectTimestampPair other) {
final long tstampdiff = this.tstamp - other.tstamp;
if (tstampdiff == 0) {
return System.identityHashCode(this) - System.identityHashCode(other);
} else {
return (int) Math.min(Math.max(tstampdiff, Integer.MIN_VALUE), Integer.MAX_VALUE);
}
}","public int compareTo(ObjectTimestampPair other) {
final long longVar1 = longLiteral2;
if (longVar1 == 0) {
return System.identityHashCode(this) - System.identityHashCode(other);
} else {
return (int) Math.min(Math.max(longVar1, Integer.MIN_VALUE), Integer.MAX_VALUE);
}
}"
17308,PERFORMANCE,WMI_WRONG_MAP_ITERATOR,FP,pool,1173,"Stack s = (Stack)(_pools.get(key));
","public synchronized String toString() {
StringBuffer buf = new StringBuffer();
buf.append(getClass().getName());
buf.append("" contains "").append(_pools.size()).append("" distinct pools: "");
Iterator it = _pools.keySet().iterator();
while (it.hasNext()) {
Object key = it.next();
buf.append("" |"").append(key).append(""|="");
Stack s = (Stack) (_pools.get(key));
buf.append(s.size());
}
return buf.toString();
}","public synchronized String toString() {
StringBuffer stringbufferVar1 = stringbufferLiteral2;
stringbufferVar1.append(getClass().getName());
stringbufferVar1.append("" contains "").append(_pools.size()).append("" distinct pools: "");
Iterator iteratorVar3 = iteratorLiteral4;
while (iteratorVar3.hasNext()) {
Object objectVar5 = objectLiteral6;
stringbufferVar1.append("" |"").append(objectVar5).append(""|="");
Stack stackVar7 = stackLiteral8;
stringbufferVar1.append(stackVar7.size());
}
return stringbufferVar1.toString();
}"
17311,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1176,"} catch (Exception e2) {
","public synchronized void addObject(Object key) throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
Object obj = _factory.makeObject(key);
try {
if (!_factory.validateObject(key, obj)) {
return;
}
} catch (Exception e) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e2) {
}
return;
}
_factory.passivateObject(key, obj);
Stack stack = (Stack) _pools.get(key);
if (null == stack) {
stack = new Stack();
stack.ensureCapacity(_initSleepingCapacity > _maxSleeping ? _maxSleeping : _initSleepingCapacity);
_pools.put(key, stack);
}
final int stackSize = stack.size();
if (stackSize >= _maxSleeping) {
final Object staleObj;
if (stackSize > 0) {
staleObj = stack.remove(0);
_totIdle--;
} else {
staleObj = obj;
}
try {
_factory.destroyObject(key, staleObj);
} catch (Exception e) {
if (obj == staleObj) {
throw e;
}
}
} else {
stack.push(obj);
_totIdle++;
}
}","public synchronized void addObject(Object key) throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
Object objectVar1 = objectLiteral2;
try {
if (!_factory.validateObject(key, objectVar1)) {
return;
}
} catch (Exception e) {
try {
_factory.destroyObject(key, objectVar1);
} catch (Exception e2) {
}
return;
}
_factory.passivateObject(key, objectVar1);
Stack stackVar3 = stackLiteral4;
if (null == stackVar3) {
stackVar3 = new Stack();
stackVar3.ensureCapacity(_initSleepingCapacity > _maxSleeping ? _maxSleeping : _initSleepingCapacity);
_pools.put(key, stackVar3);
}
final int intVar5 = intLiteral6;
if (intVar5 >= _maxSleeping) {
final Object objectVar7;
if (intVar5 > 0) {
objectVar7 = stackVar3.remove(0);
_totIdle--;
} else {
objectVar7 = objectVar1;
}
try {
_factory.destroyObject(key, objectVar7);
} catch (Exception e) {
if (objectVar1 == objectVar7) {
throw e;
}
}
} else {
stackVar3.push(objectVar1);
_totIdle++;
}
}"
17312,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1177,"} catch(Exception e) {
","private synchronized void destroyStack(Object key, Stack stack) {
if (null == stack) {
return;
} else {
if (null != _factory) {
Iterator it = stack.iterator();
while (it.hasNext()) {
try {
_factory.destroyObject(key, it.next());
} catch (Exception e) {
}
}
}
_totIdle -= stack.size();
_activeCount.remove(key);
stack.clear();
}
}","private synchronized void destroyStack(Object key, Stack stack) {
if (null == stack) {
return;
} else {
if (null != _factory) {
Iterator iteratorVar1 = iteratorLiteral2;
while (iteratorVar1.hasNext()) {
try {
_factory.destroyObject(key, iteratorVar1.next());
} catch (Exception e) {
}
}
}
_totIdle -= stack.size();
_activeCount.remove(key);
stack.clear();
}
}"
17322,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1187,"} catch (Exception e) {
","public void invalidateObject(final Object obj) {
synchronized (lock) {
try {
pool.invalidateObject(obj);
} catch (Exception e) {
}
}
}","public void invalidateObject(final Object obj) {
synchronized (lock) {
try {
pool.invalidateObject(obj);
} catch (Exception e) {
}
}
}"
17327,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1192,"} catch (Exception e) {
","public void close() {
try {
keyedPool.close();
} catch (Exception e) {
}
}","public void close() {
try {
keyedPool.close();
} catch (Exception e) {
}
}"
17330,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1195,"} catch (Exception e) {
","public void returnObject(final Object key, final Object obj) {
if (type.isInstance(obj)) {
try {
keyedPool.returnObject(key, obj);
} catch (Exception e) {
}
} else {
throw new ClassCastException(""Returned object for key: "" + key + "" is not of type: "" + type.getName() + "" was: "" + obj);
}
}","public void returnObject(final Object key, final Object obj) {
if (type.isInstance(obj)) {
try {
keyedPool.returnObject(key, obj);
} catch (Exception e) {
}
} else {
throw new ClassCastException(""Returned object for key: "" + key + "" is not of type: "" + type.getName() + "" was: "" + obj);
}
}"
17333,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1198,"} catch (Exception e) {
","public void returnObject(final Object key, final Object obj) {
synchronized (lock) {
try {
keyedPool.returnObject(key, obj);
} catch (Exception e) {
}
}
}","public void returnObject(final Object key, final Object obj) {
synchronized (lock) {
try {
keyedPool.returnObject(key, obj);
} catch (Exception e) {
}
}
}"
17346,PERFORMANCE,WMI_WRONG_MAP_ITERATOR,FP,pool,1211,"ObjectQueue pool = (ObjectQueue)_poolMap.get(key);
","public void clear() {
Map toDestroy = new HashMap();
synchronized (this) {
for (Iterator it = _poolMap.keySet().iterator(); it.hasNext(); ) {
Object key = it.next();
ObjectQueue pool = (ObjectQueue) _poolMap.get(key);
List objects = new ArrayList();
objects.addAll(pool.queue);
toDestroy.put(key, objects);
it.remove();
_poolList.remove(key);
_totalIdle = _totalIdle - pool.queue.size();
_totalInternalProcessing = _totalInternalProcessing + pool.queue.size();
pool.queue.clear();
}
}
destroy(toDestroy, _factory);
}","public void clear() {
Map mapVar1 = mapLiteral2;
synchronized (this) {
for (Iterator iteratorVar11 = iteratorLiteral12; iteratorVar3.hasNext(); ) {
Object objectVar5 = objectLiteral6;
ObjectQueue objectqueueVar7 = objectqueueLiteral8;
List listVar9 = listLiteral10;
listVar9.addAll(objectqueueVar7.queue);
mapVar1.put(objectVar5, listVar9);
iteratorVar3.remove();
_poolList.remove(objectVar5);
_totalIdle = _totalIdle - objectqueueVar7.queue.size();
_totalInternalProcessing = _totalInternalProcessing + objectqueueVar7.queue.size();
objectqueueVar7.queue.clear();
}
}
destroy(mapVar1, _factory);
}"
17348,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1213,"} catch (Exception ex2) {
","public void addObject(Object key) throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
Object obj = _factory.makeObject(key);
try {
assertOpen();
addObjectToPool(key, obj, false);
} catch (IllegalStateException ex) {
try {
_factory.destroyObject(key, obj);
} catch (Exception ex2) {
}
throw ex;
}
}","public void addObject(Object key) throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
Object objectVar1 = objectLiteral2;
try {
assertOpen();
addObjectToPool(key, objectVar1, false);
} catch (IllegalStateException ex) {
try {
_factory.destroyObject(key, objectVar1);
} catch (Exception ex2) {
}
throw ex;
}
}"
17353,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1218,"} catch(Exception e) {
","public void run() {
try {
evict();
} catch (Exception e) {
} catch (OutOfMemoryError oome) {
oome.printStackTrace(System.err);
}
try {
ensureMinIdle();
} catch (Exception e) {
}
}","public void run() {
try {
evict();
} catch (Exception e) {
} catch (OutOfMemoryError oome) {
oome.printStackTrace(System.err);
}
try {
ensureMinIdle();
} catch (Exception e) {
}
}"
17360,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1225,"} catch (Exception ex2) {
","public void addObject() throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
Object obj = _factory.makeObject();
try {
assertOpen();
addObjectToPool(obj, false);
} catch (IllegalStateException ex) {
try {
_factory.destroyObject(obj);
} catch (Exception ex2) {
}
throw ex;
}
}","public void addObject() throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
Object objectVar1 = objectLiteral2;
try {
assertOpen();
addObjectToPool(objectVar1, false);
} catch (IllegalStateException ex) {
try {
_factory.destroyObject(objectVar1);
} catch (Exception ex2) {
}
throw ex;
}
}"
17367,PERFORMANCE,WMI_WRONG_MAP_ITERATOR,FP,pool,1232,"Stack stack = (Stack)(_pools.get(key));
","public synchronized void clear() {
Iterator it = _pools.keySet().iterator();
while (it.hasNext()) {
Object key = it.next();
Stack stack = (Stack) (_pools.get(key));
destroyStack(key, stack);
}
_totIdle = 0;
_pools.clear();
_activeCount.clear();
}","public synchronized void clear() {
Iterator iteratorVar1 = iteratorLiteral2;
while (iteratorVar1.hasNext()) {
Object objectVar3 = objectLiteral4;
Stack stackVar5 = stackLiteral6;
destroyStack(objectVar3, stackVar5);
}
_totIdle = 0;
_pools.clear();
_activeCount.clear();
}"
17368,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1233,"} catch (Exception e2) {
","public synchronized void addObject(Object key) throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
Object obj = _factory.makeObject(key);
try {
if (!_factory.validateObject(key, obj)) {
return;
}
} catch (Exception e) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e2) {
}
return;
}
_factory.passivateObject(key, obj);
Stack stack = (Stack) _pools.get(key);
if (null == stack) {
stack = new Stack();
stack.ensureCapacity(_initSleepingCapacity > _maxSleeping ? _maxSleeping : _initSleepingCapacity);
_pools.put(key, stack);
}
final int stackSize = stack.size();
if (stackSize >= _maxSleeping) {
final Object staleObj;
if (stackSize > 0) {
staleObj = stack.remove(0);
_totIdle--;
} else {
staleObj = obj;
}
try {
_factory.destroyObject(key, staleObj);
} catch (Exception e) {
if (obj == staleObj) {
throw e;
}
}
} else {
stack.push(obj);
_totIdle++;
}
}","public synchronized void addObject(Object key) throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
Object objectVar1 = objectLiteral2;
try {
if (!_factory.validateObject(key, objectVar1)) {
return;
}
} catch (Exception e) {
try {
_factory.destroyObject(key, objectVar1);
} catch (Exception e2) {
}
return;
}
_factory.passivateObject(key, objectVar1);
Stack stackVar3 = stackLiteral4;
if (null == stackVar3) {
stackVar3 = new Stack();
stackVar3.ensureCapacity(_initSleepingCapacity > _maxSleeping ? _maxSleeping : _initSleepingCapacity);
_pools.put(key, stackVar3);
}
final int intVar5 = intLiteral6;
if (intVar5 >= _maxSleeping) {
final Object objectVar7;
if (intVar5 > 0) {
objectVar7 = stackVar3.remove(0);
_totIdle--;
} else {
objectVar7 = objectVar1;
}
try {
_factory.destroyObject(key, objectVar7);
} catch (Exception e) {
if (objectVar1 == objectVar7) {
throw e;
}
}
} else {
stackVar3.push(objectVar1);
_totIdle++;
}
}"
17397,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1262,"} catch (Exception e) {
","public void returnObject(final T obj) {
synchronized (lock) {
try {
pool.returnObject(obj);
} catch (Exception e) {
}
}
}","public void returnObject(final T obj) {
synchronized (lock) {
try {
pool.returnObject(obj);
} catch (Exception e) {
}
}
}"
17406,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1271,"} catch (Exception e) {
","public void close() {
try {
pool.close();
} catch (Exception e) {
}
}","public void close() {
try {
pool.close();
} catch (Exception e) {
}
}"
17408,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1273,"} catch (Exception e) {
","public void invalidateObject(final K key, final V obj) {
try {
pool.invalidateObject(obj);
} catch (Exception e) {
}
}","public void invalidateObject(final K key, final V obj) {
try {
pool.invalidateObject(obj);
} catch (Exception e) {
}
}"
17409,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1274,"} catch (Exception e) {
","public void returnObject(final K key, final V obj) {
if (type.isInstance(obj)) {
try {
keyedPool.returnObject(key, obj);
} catch (Exception e) {
}
} else {
throw new ClassCastException(""Returned object for key: "" + key + "" is not of type: "" + type.getName() + "" was: "" + obj);
}
}","public void returnObject(final K key, final V obj) {
if (type.isInstance(obj)) {
try {
keyedPool.returnObject(key, obj);
} catch (Exception e) {
}
} else {
throw new ClassCastException(""Returned object for key: "" + key + "" is not of type: "" + type.getName() + "" was: "" + obj);
}
}"
17410,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1275,"} catch (Exception e) {
","public void returnObject(final T obj) {
if (type.isInstance(obj)) {
try {
pool.returnObject(obj);
} catch (Exception e) {
}
} else {
throw new ClassCastException(""Returned object is not of type: "" + type.getName() + "" was: "" + obj);
}
}","public void returnObject(final T obj) {
if (type.isInstance(obj)) {
try {
pool.returnObject(obj);
} catch (Exception e) {
}
} else {
throw new ClassCastException(""Returned object is not of type: "" + type.getName() + "" was: "" + obj);
}
}"
17414,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1279,"} catch (Exception e) {
","public void close() {
try {
keyedPool.close();
} catch (Exception e) {
}
}","public void close() {
try {
keyedPool.close();
} catch (Exception e) {
}
}"
17417,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1282,"} catch (Exception e) {
","public void close() {
try {
pool.close();
} catch (Exception e) {
}
}","public void close() {
try {
pool.close();
} catch (Exception e) {
}
}"
17422,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1287,"} catch(Exception e) {
","private void addObjectToPool(K key, V obj, boolean decrementNumActive) throws Exception {
boolean success = true;
if (_testOnReturn && !_factory.validateObject(key, obj)) {
success = false;
} else {
_factory.passivateObject(key, obj);
}
boolean shouldDestroy = !success;
ObjectQueue pool;
boolean doAllocate = false;
synchronized (this) {
pool = _poolMap.get(key);
if (null == pool) {
pool = new ObjectQueue();
_poolMap.put(key, pool);
_poolList.add(key);
}
if (isClosed()) {
shouldDestroy = true;
} else {
if (_maxIdle >= 0 && (pool.queue.size() >= _maxIdle)) {
shouldDestroy = true;
} else if (success) {
if (_lifo) {
pool.queue.addFirst(new ObjectTimestampPair<V>(obj));
} else {
pool.queue.addLast(new ObjectTimestampPair<V>(obj));
}
_totalIdle++;
if (decrementNumActive) {
pool.decrementActiveCount();
}
doAllocate = true;
}
}
}
if (doAllocate) {
allocate();
}
if (shouldDestroy) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e) {
}
if (decrementNumActive) {
synchronized (this) {
pool.decrementActiveCount();
if (pool.queue.isEmpty() && pool.activeCount == 0 && pool.internalProcessingCount == 0) {
_poolMap.remove(key);
_poolList.remove(key);
}
}
allocate();
}
}
}","private void addObjectToPool(K key, V obj, boolean decrementNumActive) throws Exception {
boolean booleanVar1 = booleanLiteral2;
if (_testOnReturn && !_factory.validateObject(key, obj)) {
booleanVar1 = false;
} else {
_factory.passivateObject(key, obj);
}
boolean booleanVar3 = booleanLiteral4;
ObjectQueue objectqueueVar5;
boolean booleanVar6 = booleanLiteral7;
synchronized (this) {
objectqueueVar5 = _poolMap.get(key);
if (null == objectqueueVar5) {
objectqueueVar5 = new ObjectQueue();
_poolMap.put(key, objectqueueVar5);
_poolList.add(key);
}
if (isClosed()) {
booleanVar3 = true;
} else {
if (_maxIdle >= 0 && (objectqueueVar5.queue.size() >= _maxIdle)) {
booleanVar3 = true;
} else if (booleanVar1) {
if (_lifo) {
objectqueueVar5.queue.addFirst(new ObjectTimestampPair<V>(obj));
} else {
objectqueueVar5.queue.addLast(new ObjectTimestampPair<V>(obj));
}
_totalIdle++;
if (decrementNumActive) {
objectqueueVar5.decrementActiveCount();
}
booleanVar6 = true;
}
}
}
if (booleanVar6) {
allocate();
}
if (booleanVar3) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e) {
}
if (decrementNumActive) {
synchronized (this) {
objectqueueVar5.decrementActiveCount();
if (objectqueueVar5.queue.isEmpty() && objectqueueVar5.activeCount == 0 && objectqueueVar5.internalProcessingCount == 0) {
_poolMap.remove(key);
_poolList.remove(key);
}
}
allocate();
}
}
}"
17427,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1292,"catch (Exception e) {
","public synchronized void preparePool(K key, boolean populateImmediately) {
ObjectQueue pool = (_poolMap.get(key));
if (null == pool) {
pool = new ObjectQueue();
_poolMap.put(key, pool);
_poolList.add(key);
}
if (populateImmediately) {
try {
ensureMinIdle(key);
} catch (Exception e) {
}
}
}","public synchronized void preparePool(K key, boolean populateImmediately) {
ObjectQueue objectqueueVar1 = objectqueueLiteral2;
if (null == objectqueueVar1) {
objectqueueVar1 = new ObjectQueue();
_poolMap.put(key, objectqueueVar1);
_poolList.add(key);
}
if (populateImmediately) {
try {
ensureMinIdle(key);
} catch (Exception e) {
}
}
}"
17431,DODGY_CODE,RI_REDUNDANT_INTERFACES,FP,pool,1296,"public class GenericKeyedObjectPool<K, V> extends BaseKeyedObjectPool<K, V> implements KeyedObjectPool<K, V> {
public static final byte WHEN_EXHAUSTED_FAIL   = 0;
public static final byte WHEN_EXHAUSTED_BLOCK  = 1;
public static final byte WHEN_EXHAUSTED_GROW   = 2;
public static final int DEFAULT_MAX_IDLE  = 8;
public static final int DEFAULT_MAX_ACTIVE  = 8;
public static final int DEFAULT_MAX_TOTAL  = -1;
public static final byte DEFAULT_WHEN_EXHAUSTED_ACTION = WHEN_EXHAUSTED_BLOCK;
public static final long DEFAULT_MAX_WAIT = -1L;
public static final boolean DEFAULT_TEST_ON_BORROW = false;
public static final boolean DEFAULT_TEST_ON_RETURN = false;
public static final boolean DEFAULT_TEST_WHILE_IDLE = false;
public static final long DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS = -1L;
public static final int DEFAULT_NUM_TESTS_PER_EVICTION_RUN = 3;
public static final long DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS = 1000L * 60L * 30L;
public static final int DEFAULT_MIN_IDLE = 0;
public static final boolean DEFAULT_LIFO = true;
public GenericKeyedObjectPool() {
this(null, DEFAULT_MAX_ACTIVE, DEFAULT_WHEN_EXHAUSTED_ACTION, DEFAULT_MAX_WAIT, DEFAULT_MAX_IDLE,
DEFAULT_TEST_ON_BORROW, DEFAULT_TEST_ON_RETURN, DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS,
DEFAULT_NUM_TESTS_PER_EVICTION_RUN, DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS, DEFAULT_TEST_WHILE_IDLE);
}
public GenericKeyedObjectPool(KeyedPoolableObjectFactory<K, V> factory) {
this(factory, DEFAULT_MAX_ACTIVE, DEFAULT_WHEN_EXHAUSTED_ACTION, DEFAULT_MAX_WAIT, DEFAULT_MAX_IDLE,
DEFAULT_TEST_ON_BORROW, DEFAULT_TEST_ON_RETURN, DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS,
DEFAULT_NUM_TESTS_PER_EVICTION_RUN, DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS, DEFAULT_TEST_WHILE_IDLE);
}
public GenericKeyedObjectPool(KeyedPoolableObjectFactory<K, V> factory, GenericKeyedObjectPool.Config config) {
this(factory, config.maxActive, config.whenExhaustedAction, config.maxWait, config.maxIdle, config.maxTotal,
config.minIdle, config.testOnBorrow, config.testOnReturn, config.timeBetweenEvictionRunsMillis,
config.numTestsPerEvictionRun, config.minEvictableIdleTimeMillis, config.testWhileIdle, config.lifo);
}
public GenericKeyedObjectPool(KeyedPoolableObjectFactory<K, V> factory, int maxActive) {
this(factory,maxActive, DEFAULT_WHEN_EXHAUSTED_ACTION, DEFAULT_MAX_WAIT, DEFAULT_MAX_IDLE,
DEFAULT_TEST_ON_BORROW, DEFAULT_TEST_ON_RETURN, DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS,
DEFAULT_NUM_TESTS_PER_EVICTION_RUN, DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS, DEFAULT_TEST_WHILE_IDLE);
}
public GenericKeyedObjectPool(KeyedPoolableObjectFactory<K, V> factory, int maxActive, byte whenExhaustedAction,
long maxWait) {
this(factory, maxActive, whenExhaustedAction, maxWait, DEFAULT_MAX_IDLE, DEFAULT_TEST_ON_BORROW,
DEFAULT_TEST_ON_RETURN, DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS, DEFAULT_NUM_TESTS_PER_EVICTION_RUN,
DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS, DEFAULT_TEST_WHILE_IDLE);
}
public GenericKeyedObjectPool(KeyedPoolableObjectFactory<K, V> factory, int maxActive, byte whenExhaustedAction,
long maxWait, boolean testOnBorrow, boolean testOnReturn) {
this(factory, maxActive, whenExhaustedAction, maxWait, DEFAULT_MAX_IDLE,testOnBorrow,testOnReturn,
DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS, DEFAULT_NUM_TESTS_PER_EVICTION_RUN,
DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS, DEFAULT_TEST_WHILE_IDLE);
}
public GenericKeyedObjectPool(KeyedPoolableObjectFactory<K, V> factory, int maxActive, byte whenExhaustedAction,
long maxWait, int maxIdle) {
this(factory, maxActive, whenExhaustedAction, maxWait, maxIdle, DEFAULT_TEST_ON_BORROW, DEFAULT_TEST_ON_RETURN,
DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS, DEFAULT_NUM_TESTS_PER_EVICTION_RUN,
DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS, DEFAULT_TEST_WHILE_IDLE);
}
public GenericKeyedObjectPool(KeyedPoolableObjectFactory<K, V> factory, int maxActive, byte whenExhaustedAction,
long maxWait, int maxIdle, boolean testOnBorrow, boolean testOnReturn) {
this(factory, maxActive, whenExhaustedAction, maxWait, maxIdle, testOnBorrow, testOnReturn,
DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS, DEFAULT_NUM_TESTS_PER_EVICTION_RUN,
DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS, DEFAULT_TEST_WHILE_IDLE);
}
public GenericKeyedObjectPool(KeyedPoolableObjectFactory<K, V> factory, int maxActive, byte whenExhaustedAction,
long maxWait, int maxIdle, boolean testOnBorrow, boolean testOnReturn, long timeBetweenEvictionRunsMillis,
int numTestsPerEvictionRun, long minEvictableIdleTimeMillis, boolean testWhileIdle) {
this(factory, maxActive, whenExhaustedAction, maxWait, maxIdle, GenericKeyedObjectPool.DEFAULT_MAX_TOTAL,
testOnBorrow, testOnReturn, timeBetweenEvictionRunsMillis, numTestsPerEvictionRun,
minEvictableIdleTimeMillis, testWhileIdle);
}
public GenericKeyedObjectPool(KeyedPoolableObjectFactory<K, V> factory, int maxActive, byte whenExhaustedAction,
long maxWait, int maxIdle, int maxTotal, boolean testOnBorrow, boolean testOnReturn,
long timeBetweenEvictionRunsMillis, int numTestsPerEvictionRun, long minEvictableIdleTimeMillis,
boolean testWhileIdle) {
this(factory, maxActive, whenExhaustedAction, maxWait, maxIdle, maxTotal,
GenericKeyedObjectPool.DEFAULT_MIN_IDLE, testOnBorrow, testOnReturn, timeBetweenEvictionRunsMillis,
numTestsPerEvictionRun, minEvictableIdleTimeMillis, testWhileIdle);
}
public GenericKeyedObjectPool(KeyedPoolableObjectFactory<K, V> factory, int maxActive, byte whenExhaustedAction,
long maxWait, int maxIdle, int maxTotal, int minIdle, boolean testOnBorrow, boolean testOnReturn,
long timeBetweenEvictionRunsMillis, int numTestsPerEvictionRun, long minEvictableIdleTimeMillis,
boolean testWhileIdle) {
this(factory, maxActive, whenExhaustedAction, maxWait, maxIdle, maxTotal, minIdle, testOnBorrow, testOnReturn,
timeBetweenEvictionRunsMillis, numTestsPerEvictionRun, minEvictableIdleTimeMillis, testWhileIdle,
DEFAULT_LIFO);
}
public GenericKeyedObjectPool(KeyedPoolableObjectFactory<K, V> factory, int maxActive, byte whenExhaustedAction,
long maxWait, int maxIdle, int maxTotal, int minIdle, boolean testOnBorrow, boolean testOnReturn,
long timeBetweenEvictionRunsMillis, int numTestsPerEvictionRun, long minEvictableIdleTimeMillis,
boolean testWhileIdle, boolean lifo) {
_factory = factory;
_factoryClassLoader = Thread.currentThread().getContextClassLoader();
_maxActive = maxActive;
_lifo = lifo;
switch (whenExhaustedAction) {
case WHEN_EXHAUSTED_BLOCK:
case WHEN_EXHAUSTED_FAIL:
case WHEN_EXHAUSTED_GROW:
_whenExhaustedAction = whenExhaustedAction;
break;
default:
throw new IllegalArgumentException(""whenExhaustedAction "" + whenExhaustedAction + "" not recognized."");
}
_maxWait = maxWait;
_maxIdle = maxIdle;
_maxTotal = maxTotal;
_minIdle = minIdle;
_testOnBorrow = testOnBorrow;
_testOnReturn = testOnReturn;
_timeBetweenEvictionRunsMillis = timeBetweenEvictionRunsMillis;
_numTestsPerEvictionRun = numTestsPerEvictionRun;
_minEvictableIdleTimeMillis = minEvictableIdleTimeMillis;
_testWhileIdle = testWhileIdle;
_poolMap = new HashMap<K, ObjectQueue>();
_poolList = new CursorableLinkedList<K>();
startEvictor(_timeBetweenEvictionRunsMillis);
}
public synchronized int getMaxActive() {
return _maxActive;
}
public void setMaxActive(int maxActive) {
synchronized(this) {
_maxActive = maxActive;
}
allocate();
}
public synchronized int getMaxTotal() {
return _maxTotal;
}
public void setMaxTotal(int maxTotal) {
synchronized(this) {
_maxTotal = maxTotal;
}
allocate();
}
public synchronized byte getWhenExhaustedAction() {
return _whenExhaustedAction;
}
public void setWhenExhaustedAction(byte whenExhaustedAction) {
synchronized(this) {
switch(whenExhaustedAction) {
case WHEN_EXHAUSTED_BLOCK:
case WHEN_EXHAUSTED_FAIL:
case WHEN_EXHAUSTED_GROW:
_whenExhaustedAction = whenExhaustedAction;
break;
default:
throw new IllegalArgumentException(""whenExhaustedAction "" + whenExhaustedAction + "" not recognized."");
}
}
allocate();
}
public synchronized long getMaxWait() {
return _maxWait;
}
public void setMaxWait(long maxWait) {
synchronized(this) {
_maxWait = maxWait;
}
allocate();
}
public synchronized int getMaxIdle() {
return _maxIdle;
}
public void setMaxIdle(int maxIdle) {
synchronized(this) {
_maxIdle = maxIdle;
}
allocate();
}
public void setMinIdle(int poolSize) {
_minIdle = poolSize;
}
public int getMinIdle() {
int maxIdle = getMaxIdle();
if (_minIdle > maxIdle) {
return maxIdle;
} else {
return _minIdle;
}
}
public boolean getTestOnBorrow() {
return _testOnBorrow;
}
public void setTestOnBorrow(boolean testOnBorrow) {
_testOnBorrow = testOnBorrow;
}
public boolean getTestOnReturn() {
return _testOnReturn;
}
public void setTestOnReturn(boolean testOnReturn) {
_testOnReturn = testOnReturn;
}
public synchronized long getTimeBetweenEvictionRunsMillis() {
return _timeBetweenEvictionRunsMillis;
}
public synchronized void setTimeBetweenEvictionRunsMillis(long timeBetweenEvictionRunsMillis) {
_timeBetweenEvictionRunsMillis = timeBetweenEvictionRunsMillis;
startEvictor(_timeBetweenEvictionRunsMillis);
}
public synchronized int getNumTestsPerEvictionRun() {
return _numTestsPerEvictionRun;
}
public synchronized void setNumTestsPerEvictionRun(int numTestsPerEvictionRun) {
_numTestsPerEvictionRun = numTestsPerEvictionRun;
}
public synchronized long getMinEvictableIdleTimeMillis() {
return _minEvictableIdleTimeMillis;
}
public synchronized void setMinEvictableIdleTimeMillis(long minEvictableIdleTimeMillis) {
_minEvictableIdleTimeMillis = minEvictableIdleTimeMillis;
}
public synchronized boolean getTestWhileIdle() {
return _testWhileIdle;
}
public synchronized void setTestWhileIdle(boolean testWhileIdle) {
_testWhileIdle = testWhileIdle;
}
public synchronized void setConfig(GenericKeyedObjectPool.Config conf) {
setMaxIdle(conf.maxIdle);
setMaxActive(conf.maxActive);
setMaxTotal(conf.maxTotal);
setMinIdle(conf.minIdle);
setMaxWait(conf.maxWait);
setWhenExhaustedAction(conf.whenExhaustedAction);
setTestOnBorrow(conf.testOnBorrow);
setTestOnReturn(conf.testOnReturn);
setTestWhileIdle(conf.testWhileIdle);
setNumTestsPerEvictionRun(conf.numTestsPerEvictionRun);
setMinEvictableIdleTimeMillis(conf.minEvictableIdleTimeMillis);
setTimeBetweenEvictionRunsMillis(conf.timeBetweenEvictionRunsMillis);
}
public synchronized boolean getLifo() {
return _lifo;
}
public synchronized void setLifo(boolean lifo) {
this._lifo = lifo;
}
@Override
public V borrowObject(K key) throws Exception {
long starttime = System.currentTimeMillis();
Latch<K, V> latch = new Latch<K, V>(key);
byte whenExhaustedAction;
long maxWait;
synchronized (this) {
whenExhaustedAction = _whenExhaustedAction;
maxWait = _maxWait;
_allocationQueue.add(latch);
}
allocate();
for(;;) {
synchronized (this) {
assertOpen();
}
if (null == latch.getPair()) {
if (latch.mayCreate()) {
} else {
switch(whenExhaustedAction) {
case WHEN_EXHAUSTED_GROW:
synchronized (this) {
if (latch.getPair() == null && !latch.mayCreate()) {
_allocationQueue.remove(latch);
latch.getPool().incrementInternalProcessingCount();
}
}
break;
case WHEN_EXHAUSTED_FAIL:
synchronized (this) {
if (latch.getPair() != null || latch.mayCreate()) {
break;
}
_allocationQueue.remove(latch);
}
throw new NoSuchElementException(""Pool exhausted"");
case WHEN_EXHAUSTED_BLOCK:
try {
synchronized (latch) {
if (latch.getPair() == null && !latch.mayCreate()) {
if (maxWait <= 0) {
latch.wait();
} else {
final long elapsed = (System.currentTimeMillis() - starttime);
final long waitTime = maxWait - elapsed;
if (waitTime > 0)
{
latch.wait(waitTime);
}
}
} else {
break;
}
}
if(isClosed() == true) {
throw new IllegalStateException(""Pool closed"");
}
} catch(InterruptedException e) {
boolean doAllocate = false;
synchronized (this) {
if (latch.getPair() == null && !latch.mayCreate()) {
_allocationQueue.remove(latch);
} else if (latch.getPair() == null && latch.mayCreate()) {
latch.getPool().decrementInternalProcessingCount();
doAllocate = true;
} else {
latch.getPool().decrementInternalProcessingCount();
latch.getPool().incrementActiveCount();
returnObject(latch.getkey(), latch.getPair().getValue());
}
}
if (doAllocate) {
allocate();
}
Thread.currentThread().interrupt();
throw e;
}
if (maxWait > 0 && ((System.currentTimeMillis() - starttime) >= maxWait)) {
synchronized (this) {
if (latch.getPair() == null && !latch.mayCreate()) {
_allocationQueue.remove(latch);
} else {
break;
}
}
throw new NoSuchElementException(""Timeout waiting for idle object"");
} else {
continue; 
}
default:
throw new IllegalArgumentException(""whenExhaustedAction "" + whenExhaustedAction +
"" not recognized."");
}
}
}
boolean newlyCreated = false;
if (null == latch.getPair()) {
try {
V obj = _factory.makeObject(key);
latch.setPair(new ObjectTimestampPair<V>(obj));
newlyCreated = true;
} finally {
if (!newlyCreated) {
synchronized (this) {
latch.getPool().decrementInternalProcessingCount();
}
allocate();
}
}
}
try {
_factory.activateObject(key, latch.getPair().value);
if (_testOnBorrow && !_factory.validateObject(key, latch.getPair().value)) {
throw new Exception(""ValidateObject failed"");
}
synchronized (this) {
latch.getPool().decrementInternalProcessingCount();
latch.getPool().incrementActiveCount();
}
return latch.getPair().value;
} catch (Throwable e) {
PoolUtils.checkRethrow(e);
try {
_factory.destroyObject(key, latch.getPair().value);
} catch (Throwable e2) {
PoolUtils.checkRethrow(e2);
}
synchronized (this) {
latch.getPool().decrementInternalProcessingCount();
if (!newlyCreated) {
latch.reset();
_allocationQueue.add(0, latch);
}
}
allocate();
if (newlyCreated) {
throw new NoSuchElementException(
""Could not create a validated object, cause: "" +
e.getMessage());
}
else {
continue; 
}
}
}
}
private void allocate() {
boolean clearOldest = false;
synchronized (this) {
if (isClosed()) {
return;
}
Iterator<Latch<K, V>> allocationQueueIter = _allocationQueue.iterator();
while (allocationQueueIter.hasNext()) {
Latch<K, V> latch = allocationQueueIter.next();
ObjectQueue pool = (_poolMap.get(latch.getkey()));
if (null == pool) {
pool = new ObjectQueue();
_poolMap.put(latch.getkey(), pool);
_poolList.add(latch.getkey());
}
latch.setPool(pool);
if (!pool.queue.isEmpty()) {
allocationQueueIter.remove();
latch.setPair(
pool.queue.removeFirst());
pool.incrementInternalProcessingCount();
_totalIdle--;
synchronized (latch) {
latch.notify();
}
continue;
}
if ((_maxTotal > 0) &&
(_totalActive + _totalIdle + _totalInternalProcessing >= _maxTotal)) {
clearOldest = true;
break;
}
if ((_maxActive < 0 || pool.activeCount + pool.internalProcessingCount < _maxActive) &&
(_maxTotal < 0 || _totalActive + _totalIdle + _totalInternalProcessing < _maxTotal)) {
allocationQueueIter.remove();
latch.setMayCreate(true);
pool.incrementInternalProcessingCount();
synchronized (latch) {
latch.notify();
}
continue;
}
if (_maxActive < 0) {
break;
}
}
}
if (clearOldest) {
clearOldest();
}
}
@Override
public void clear() {
Map<K,  List<ObjectTimestampPair<V>>> toDestroy = new HashMap<K,  List<ObjectTimestampPair<V>>>();
synchronized (this) {
for (Iterator<K> it = _poolMap.keySet().iterator(); it.hasNext();) {
K key = it.next();
ObjectQueue pool = _poolMap.get(key);
List<ObjectTimestampPair<V>> objects = new ArrayList<ObjectTimestampPair<V>>();
objects.addAll(pool.queue);
toDestroy.put(key, objects);
it.remove();
_poolList.remove(key);
_totalIdle = _totalIdle - pool.queue.size();
_totalInternalProcessing =
_totalInternalProcessing + pool.queue.size();
pool.queue.clear();
}
}
destroy(toDestroy, _factory);
}
public void clearOldest() {
final Map<K, List<ObjectTimestampPair<V>>> toDestroy = new HashMap<K, List<ObjectTimestampPair<V>>>();
final Map<ObjectTimestampPair<V>, K> map = new TreeMap<ObjectTimestampPair<V>, K>();
synchronized (this) {
for (Iterator<K> keyiter = _poolMap.keySet().iterator(); keyiter.hasNext();) {
final K key = keyiter.next();
final List<ObjectTimestampPair<V>> list = _poolMap.get(key).queue;
for (Iterator<ObjectTimestampPair<V>> it = list.iterator(); it.hasNext();) {
map.put(it.next(), key);
}
}
Set<Entry<ObjectTimestampPair<V>, K>> setPairKeys = map.entrySet();
int itemsToRemove = ((int) (map.size() * 0.15)) + 1;
Iterator<Entry<ObjectTimestampPair<V>, K>> iter = setPairKeys.iterator();
while (iter.hasNext() && itemsToRemove > 0) {
Entry<ObjectTimestampPair<V>, K> entry = iter.next();
K key = entry.getValue();
ObjectTimestampPair<V> pairTimeStamp = entry.getKey();
ObjectQueue objectQueue = _poolMap.get(key);
final List<ObjectTimestampPair<V>> list = objectQueue.queue;
list.remove(pairTimeStamp);
if (toDestroy.containsKey(key)) {
toDestroy.get(key).add(pairTimeStamp);
} else {
List<ObjectTimestampPair<V>> listForKey = new ArrayList<ObjectTimestampPair<V>>();
listForKey.add(pairTimeStamp);
toDestroy.put(key, listForKey);
}
objectQueue.incrementInternalProcessingCount();
_totalIdle--;
itemsToRemove--;
}
}
destroy(toDestroy, _factory);
}
@Override
public void clear(K key) {
Map<K, List<ObjectTimestampPair<V>>> toDestroy = new HashMap<K , List<ObjectTimestampPair<V>>>();
final ObjectQueue pool;
synchronized (this) {
pool = _poolMap.remove(key);
if (pool == null) {
return;
} else {
_poolList.remove(key);
}
List<ObjectTimestampPair<V>> objects = new ArrayList<ObjectTimestampPair<V>>();
objects.addAll(pool.queue);
toDestroy.put(key, objects);
_totalIdle = _totalIdle - pool.queue.size();
_totalInternalProcessing =
_totalInternalProcessing + pool.queue.size();
pool.queue.clear();
}
destroy(toDestroy, _factory);
}
private void destroy(Map<K,  List<ObjectTimestampPair<V>>> m, KeyedPoolableObjectFactory<K, V> factory) {
for (Iterator<Entry<K,  List<ObjectTimestampPair<V>>>> entries = m.entrySet().iterator(); entries.hasNext();) {
Entry<K,  List<ObjectTimestampPair<V>>> entry = entries.next();
K key = entry.getKey();
List<ObjectTimestampPair<V>> c = entry.getValue();
for (Iterator<ObjectTimestampPair<V>> it = c.iterator(); it.hasNext();) {
try {
factory.destroyObject(
key,it.next().value);
} catch(Exception e) {
} finally {
synchronized(this) {
ObjectQueue objectQueue =
_poolMap.get(key);
if (objectQueue != null) {
objectQueue.decrementInternalProcessingCount();
if (objectQueue.internalProcessingCount == 0 &&
objectQueue.activeCount == 0 &&
objectQueue.queue.isEmpty()) {
_poolMap.remove(key);
_poolList.remove(key);
}
} else {
_totalInternalProcessing--;
}
}
allocate();
}
}
}
}
@Override
public synchronized int getNumActive() {
return _totalActive;
}
@Override
public synchronized int getNumIdle() {
return _totalIdle;
}
@Override
public synchronized int getNumActive(Object key) {
final ObjectQueue pool = (_poolMap.get(key));
return pool != null ? pool.activeCount : 0;
}
@Override
public synchronized int getNumIdle(Object key) {
final ObjectQueue pool = (_poolMap.get(key));
return pool != null ? pool.queue.size() : 0;
}
@Override
public void returnObject(K key, V obj) throws Exception {
try {
addObjectToPool(key, obj, true);
} catch (Exception e) {
if (_factory != null) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e2) {
}
// TODO: Correctness here depends on control in addObjectToPool.
ObjectQueue pool = (_poolMap.get(key));
if (pool != null) {
synchronized(this) {
pool.decrementActiveCount();
if (pool.queue.isEmpty() &&
pool.activeCount == 0 &&
pool.internalProcessingCount == 0) {
_poolMap.remove(key);
_poolList.remove(key);
}
}
allocate();
}
}
}
}
private void addObjectToPool(K key, V obj,
boolean decrementNumActive) throws Exception {
boolean success = true; 
if (_testOnReturn && !_factory.validateObject(key, obj)) {
success = false;
} else {
_factory.passivateObject(key, obj);
}
boolean shouldDestroy = !success;
ObjectQueue pool;
boolean doAllocate = false;
synchronized (this) {
pool = _poolMap.get(key);
if (null == pool) {
pool = new ObjectQueue();
_poolMap.put(key, pool);
_poolList.add(key);
}
if (isClosed()) {
shouldDestroy = true;
} else {
if (_maxIdle >= 0 && (pool.queue.size() >= _maxIdle)) {
shouldDestroy = true;
} else if (success) {
if (_lifo) {
pool.queue.addFirst(new ObjectTimestampPair<V>(obj));
} else {
pool.queue.addLast(new ObjectTimestampPair<V>(obj));
}
_totalIdle++;
if (decrementNumActive) {
pool.decrementActiveCount();
}
doAllocate = true;
}
}
}
if (doAllocate) {
allocate();
}
if (shouldDestroy) {
try {
_factory.destroyObject(key, obj);
} catch(Exception e) {
}
if (decrementNumActive) {
synchronized(this) {
pool.decrementActiveCount();
if (pool.queue.isEmpty() &&
pool.activeCount == 0 &&
pool.internalProcessingCount == 0) {
_poolMap.remove(key);
_poolList.remove(key);
}
}
allocate();
}
}
}
@Override
public void invalidateObject(K key, V obj) throws Exception {
try {
_factory.destroyObject(key, obj);
} finally {
synchronized (this) {
ObjectQueue pool = (_poolMap.get(key));
if (null == pool) {
pool = new ObjectQueue();
_poolMap.put(key, pool);
_poolList.add(key);
}
pool.decrementActiveCount();
}
allocate(); 
}
}
@Override
public void addObject(K key) throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
V obj = _factory.makeObject(key);
try {
assertOpen();
addObjectToPool(key, obj, false);
} catch (IllegalStateException ex) { 
try {
_factory.destroyObject(key, obj);
} catch (Exception ex2) {
}
throw ex;
}
}
public synchronized void preparePool(K key, boolean populateImmediately) {
ObjectQueue pool = (_poolMap.get(key));
if (null == pool) {
pool = new ObjectQueue();
_poolMap.put(key,pool);
_poolList.add(key);
}
if (populateImmediately) {
try {
ensureMinIdle(key);
}
catch (Exception e) {
}
}
}
@Override
public void close() throws Exception {
super.close();
synchronized (this) {
clear();
if (null != _evictionCursor) {
_evictionCursor.close();
_evictionCursor = null;
}
if (null != _evictionKeyCursor) {
_evictionKeyCursor.close();
_evictionKeyCursor = null;
}
startEvictor(-1L);
while(_allocationQueue.size() > 0) {
Latch<K, V> l = _allocationQueue.removeFirst();
synchronized (l) {
l.notify();
}
}
}
}
@Deprecated
@Override
public void setFactory(KeyedPoolableObjectFactory<K, V> factory) throws IllegalStateException {
Map<K, List<ObjectTimestampPair<V>>> toDestroy = new HashMap<K, List<ObjectTimestampPair<V>>>();
final KeyedPoolableObjectFactory<K, V> oldFactory = _factory;
synchronized (this) {
assertOpen();
if (0 < getNumActive()) {
throw new IllegalStateException(""Objects are already active"");
} else {
for (Iterator<K> it = _poolMap.keySet().iterator(); it.hasNext();) {
K key = it.next();
ObjectQueue pool = _poolMap.get(key);
if (pool != null) {
List<ObjectTimestampPair<V>> objects = new ArrayList<ObjectTimestampPair<V>>();
objects.addAll(pool.queue);
toDestroy.put(key, objects);
it.remove();
_poolList.remove(key);
_totalIdle = _totalIdle - pool.queue.size();
_totalInternalProcessing =
_totalInternalProcessing + pool.queue.size();
pool.queue.clear();
}
}
_factory = factory;
_factoryClassLoader = Thread.currentThread().getContextClassLoader();
}
}
destroy(toDestroy, oldFactory);
}
public void evict() throws Exception {
K key = null;
boolean testWhileIdle;
long minEvictableIdleTimeMillis;
synchronized (this) {
testWhileIdle = _testWhileIdle;
minEvictableIdleTimeMillis = _minEvictableIdleTimeMillis;
if (_evictionKeyCursor != null &&
_evictionKeyCursor._lastReturned != null) {
key = _evictionKeyCursor._lastReturned.value();
}
}
for (int i=0, m=getNumTests(); i<m; i++) {
final ObjectTimestampPair<V> pair;
synchronized (this) {
if (_poolMap == null || _poolMap.size() == 0) {
continue;
}
if (null == _evictionKeyCursor) {
resetEvictionKeyCursor();
key = null;
}
if (null == _evictionCursor) {
if (_evictionKeyCursor.hasNext()) {
key = _evictionKeyCursor.next();
resetEvictionObjectCursor(key);
} else {
resetEvictionKeyCursor();
if (_evictionKeyCursor != null) {
if (_evictionKeyCursor.hasNext()) {
key = _evictionKeyCursor.next();
resetEvictionObjectCursor(key);
}
}
}
}
if (_evictionCursor == null) {
continue; 
}
if ((_lifo && !_evictionCursor.hasPrevious()) ||
(!_lifo && !_evictionCursor.hasNext())) {
if (_evictionKeyCursor != null) {
if (_evictionKeyCursor.hasNext()) {
key = _evictionKeyCursor.next();
resetEvictionObjectCursor(key);
} else { 
resetEvictionKeyCursor();
if (_evictionKeyCursor != null) {
if (_evictionKeyCursor.hasNext()) {
key = _evictionKeyCursor.next();
resetEvictionObjectCursor(key);
}
}
}
}
}
if ((_lifo && !_evictionCursor.hasPrevious()) ||
(!_lifo && !_evictionCursor.hasNext())) {
continue; 
}
pair = _lifo ?
_evictionCursor.previous() :
_evictionCursor.next();
_evictionCursor.remove();
ObjectQueue objectQueue = _poolMap.get(key);
objectQueue.incrementInternalProcessingCount();
_totalIdle--;
}
boolean removeObject=false;
if ((minEvictableIdleTimeMillis > 0) &&
(System.currentTimeMillis() - pair.tstamp >
minEvictableIdleTimeMillis)) {
removeObject=true;
}
if (testWhileIdle && removeObject == false) {
boolean active = false;
try {
_factory.activateObject(key,pair.value);
active = true;
} catch(Exception e) {
removeObject=true;
}
if (active) {
if (!_factory.validateObject(key,pair.value)) {
removeObject=true;
} else {
try {
_factory.passivateObject(key,pair.value);
} catch(Exception e) {
removeObject=true;
}
}
}
}
if (removeObject) {
try {
_factory.destroyObject(key, pair.value);
} catch(Exception e) {
}
}
synchronized (this) {
ObjectQueue objectQueue =
_poolMap.get(key);
objectQueue.decrementInternalProcessingCount();
if (removeObject) {
if (objectQueue.queue.isEmpty() &&
objectQueue.activeCount == 0 &&
objectQueue.internalProcessingCount == 0) {
_poolMap.remove(key);
_poolList.remove(key);
}
} else {
_evictionCursor.add(pair);
_totalIdle++;
if (_lifo) {
_evictionCursor.previous();
}
}
}
}
allocate();
}
private void resetEvictionKeyCursor() {
if (_evictionKeyCursor != null) {
_evictionKeyCursor.close();
}
_evictionKeyCursor = _poolList.cursor();
if (null != _evictionCursor) {
_evictionCursor.close();
_evictionCursor = null;
}
}
private void resetEvictionObjectCursor(Object key) {
if (_evictionCursor != null) {
_evictionCursor.close();
}
if (_poolMap == null) {
return;
}
ObjectQueue pool = _poolMap.get(key);
if (pool != null) {
CursorableLinkedList<ObjectTimestampPair<V>> queue = pool.queue;
_evictionCursor = queue.cursor(_lifo ? queue.size() : 0);
}
}
@SuppressWarnings(""unchecked"")
private void ensureMinIdle() throws Exception {
if (getMinIdle() > 0) {
Object[] keysCopy;
synchronized(this) {
keysCopy = _poolMap.keySet().toArray();
}
for (int i=0; i < keysCopy.length; i++) {
ensureMinIdle((K)keysCopy[i]);
}
}
}
private void ensureMinIdle(K key) throws Exception {
ObjectQueue pool;
synchronized(this) {
pool = (_poolMap.get(key));
}
if (pool == null) {
return;
}
int objectDeficit = calculateDeficit(pool, false);
for (int i = 0; i < objectDeficit && calculateDeficit(pool, true) > 0; i++) {
try {
addObject(key);
} finally {
synchronized (this) {
pool.decrementInternalProcessingCount();
}
allocate();
}
}
}
protected synchronized void startEvictor(long delay) {
if (null != _evictor) {
EvictionTimer.cancel(_evictor);
_evictor = null;
}
if (delay > 0) {
_evictor = new Evictor();
EvictionTimer.schedule(_evictor, delay, delay);
}
}
synchronized String debugInfo() {
StringBuffer buf = new StringBuffer();
buf.append(""Active: "").append(getNumActive()).append(""\n"");
buf.append(""Idle: "").append(getNumIdle()).append(""\n"");
Iterator<K> it = _poolMap.keySet().iterator();
while (it.hasNext()) {
K key = it.next();
buf.append(""\t"").append(key).append("" "").append(_poolMap.get(key)).append(""\n"");
}
return buf.toString();
}
private synchronized int getNumTests() {
if (_numTestsPerEvictionRun >= 0) {
return Math.min(_numTestsPerEvictionRun, _totalIdle);
} else {
return(int)(Math.ceil(_totalIdle/Math.abs((double)_numTestsPerEvictionRun)));
}
}
private synchronized int calculateDeficit(ObjectQueue pool,
boolean incrementInternal) {
int objectDefecit = 0;
objectDefecit = getMinIdle() - pool.queue.size();
if (getMaxActive() > 0) {
int growLimit = Math.max(0, getMaxActive() - pool.activeCount - pool.queue.size() - pool.internalProcessingCount);
objectDefecit = Math.min(objectDefecit, growLimit);
}
if (getMaxTotal() > 0) {
int growLimit = Math.max(0, getMaxTotal() - getNumActive() - getNumIdle() - _totalInternalProcessing);
objectDefecit = Math.min(objectDefecit, growLimit);
}
if (incrementInternal && objectDefecit > 0) {
pool.incrementInternalProcessingCount();
}
return objectDefecit;
}
private class ObjectQueue {
private int activeCount = 0;
private final CursorableLinkedList<ObjectTimestampPair<V>> queue = new CursorableLinkedList<ObjectTimestampPair<V>>();
private int internalProcessingCount = 0;
void incrementActiveCount() {
synchronized (GenericKeyedObjectPool.this) {
_totalActive++;
}
activeCount++;
}
void decrementActiveCount() {
synchronized (GenericKeyedObjectPool.this) {
_totalActive--;
}
if (activeCount > 0) {
activeCount--;
}
}
void incrementInternalProcessingCount() {
synchronized (GenericKeyedObjectPool.this) {
_totalInternalProcessing++;
}
internalProcessingCount++;
}
void decrementInternalProcessingCount() {
synchronized (GenericKeyedObjectPool.this) {
_totalInternalProcessing--;
}
internalProcessingCount--;
}
}
static class ObjectTimestampPair<T> implements Comparable<T> {
private final T value;
private final long tstamp;
ObjectTimestampPair(T val) {
this(val, System.currentTimeMillis());
}
ObjectTimestampPair(T val, long time) {
value = val;
tstamp = time;
}
@Override
public String toString() {
return value + "";"" + tstamp;
}
@SuppressWarnings(""unchecked"")
public int compareTo(Object obj) {
return compareTo((ObjectTimestampPair<T>) obj);
}
public int compareTo(ObjectTimestampPair<T> other) {
final long tstampdiff = this.tstamp - other.tstamp;
if (tstampdiff == 0) {
return System.identityHashCode(this) - System.identityHashCode(other);
} else {
return (int)Math.min(Math.max(tstampdiff, Integer.MIN_VALUE), Integer.MAX_VALUE);
}
}
public T getValue() {
return value;
}
public long getTstamp() {
return tstamp;
}
}
private class Evictor extends TimerTask {
@Override
public void run() {
ClassLoader savedClassLoader =
Thread.currentThread().getContextClassLoader();
try {
Thread.currentThread().setContextClassLoader(
_factoryClassLoader);
try {
evict();
} catch(Exception e) {
} catch(OutOfMemoryError oome) {
oome.printStackTrace(System.err);
}
try {
ensureMinIdle();
} catch (Exception e) {
}
} finally {
Thread.currentThread().setContextClassLoader(savedClassLoader);
}
}
}
public static class Config {
//CHECKSTYLE: stop VisibilityModifier
public int maxIdle = GenericKeyedObjectPool.DEFAULT_MAX_IDLE;
public int maxActive = GenericKeyedObjectPool.DEFAULT_MAX_ACTIVE;
public int maxTotal = GenericKeyedObjectPool.DEFAULT_MAX_TOTAL;
public int minIdle = GenericKeyedObjectPool.DEFAULT_MIN_IDLE;
public long maxWait = GenericKeyedObjectPool.DEFAULT_MAX_WAIT;
public byte whenExhaustedAction = GenericKeyedObjectPool.DEFAULT_WHEN_EXHAUSTED_ACTION;
public boolean testOnBorrow = GenericKeyedObjectPool.DEFAULT_TEST_ON_BORROW;
public boolean testOnReturn = GenericKeyedObjectPool.DEFAULT_TEST_ON_RETURN;
public boolean testWhileIdle = GenericKeyedObjectPool.DEFAULT_TEST_WHILE_IDLE;
public long timeBetweenEvictionRunsMillis = GenericKeyedObjectPool.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS;
public int numTestsPerEvictionRun =  GenericKeyedObjectPool.DEFAULT_NUM_TESTS_PER_EVICTION_RUN;
public long minEvictableIdleTimeMillis = GenericKeyedObjectPool.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS;
public boolean lifo = GenericKeyedObjectPool.DEFAULT_LIFO;
//CHECKSTYLE: resume VisibilityModifier
}
private final class Latch<LK, LV> {
private final LK _key;
private ObjectQueue _pool;
private ObjectTimestampPair<LV> _pair;
private boolean _mayCreate = false;
private Latch(LK key) {
_key = key;
}
private synchronized LK getkey() {
return _key;
}
private synchronized ObjectQueue getPool() {
return _pool;
}
private synchronized void setPool(ObjectQueue pool) {
_pool = pool;
}
private synchronized ObjectTimestampPair<LV> getPair() {
return _pair;
}
private synchronized void setPair(ObjectTimestampPair<LV> pair) {
_pair = pair;
}
private synchronized boolean mayCreate() {
return _mayCreate;
}
private synchronized void setMayCreate(boolean mayCreate) {
_mayCreate = mayCreate;
}
private synchronized void reset() {
_pair = null;
_mayCreate = false;
}
}
private int _maxIdle = DEFAULT_MAX_IDLE;
private volatile int _minIdle = DEFAULT_MIN_IDLE;
private int _maxActive = DEFAULT_MAX_ACTIVE;
private int _maxTotal = DEFAULT_MAX_TOTAL;
private long _maxWait = DEFAULT_MAX_WAIT;
private byte _whenExhaustedAction = DEFAULT_WHEN_EXHAUSTED_ACTION;
private volatile boolean _testOnBorrow = DEFAULT_TEST_ON_BORROW;
private volatile boolean _testOnReturn = DEFAULT_TEST_ON_RETURN;
private boolean _testWhileIdle = DEFAULT_TEST_WHILE_IDLE;
private long _timeBetweenEvictionRunsMillis = DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS;
private int _numTestsPerEvictionRun =  DEFAULT_NUM_TESTS_PER_EVICTION_RUN;
private long _minEvictabl","@Override
public void close() throws Exception {
super.close();
synchronized (this) {
clear();
if (null != _evictionCursor) {
_evictionCursor.close();
_evictionCursor = null;
}
if (null != _evictionKeyCursor) {
_evictionKeyCursor.close();
_evictionKeyCursor = null;
}
startEvictor(-1L);
while (_allocationQueue.size() > 0) {
Latch<K, V> l = _allocationQueue.removeFirst();
synchronized (l) {
l.notify();
}
}
}
}","@Override
public void close() throws Exception {
super.close();
synchronized (this) {
clear();
if (null != _evictionCursor) {
_evictionCursor.close();
_evictionCursor = null;
}
if (null != _evictionKeyCursor) {
_evictionKeyCursor.close();
_evictionKeyCursor = null;
}
startEvictor(-1L);
while (_allocationQueue.size() > 0) {
Latch<K, V> latch<k,v>Var1 = latch<k,v>Literal2;
synchronized (latch<k,v>Var1) {
latch<k,v>Var1.notify();
}
}
}
}"
17433,Multithreaded correctness,NO_NOTIFY_NOT_NOTIFYALL,FP,pool,1298,"l.notify();
","@Override
public void close() throws Exception {
super.close();
synchronized (this) {
clear();
if (null != _evictionCursor) {
_evictionCursor.close();
_evictionCursor = null;
}
if (null != _evictionKeyCursor) {
_evictionKeyCursor.close();
_evictionKeyCursor = null;
}
startEvictor(-1L);
while (_allocationQueue.size() > 0) {
Latch<K, V> l = _allocationQueue.removeFirst();
synchronized (l) {
l.notify();
}
}
}
}","@Override
public void close() throws Exception {
super.close();
synchronized (this) {
clear();
if (null != _evictionCursor) {
_evictionCursor.close();
_evictionCursor = null;
}
if (null != _evictionKeyCursor) {
_evictionKeyCursor.close();
_evictionKeyCursor = null;
}
startEvictor(-1L);
while (_allocationQueue.size() > 0) {
Latch<K, V> latch<k,v>Var1 = latch<k,v>Literal2;
synchronized (latch<k,v>Var1) {
latch<k,v>Var1.notify();
}
}
}
}"
17440,Multithreaded correctness,NN_NAKED_NOTIFY,FP,pool,1305,"latch.notify();
","private synchronized void allocate() {
if (isClosed()) {
return;
}
for (; ; ) {
if (!_pool.isEmpty() && !_allocationQueue.isEmpty()) {
Latch<T> latch = _allocationQueue.removeFirst();
latch.setPair(_pool.removeFirst());
_numInternalProcessing++;
synchronized (latch) {
latch.notify();
}
} else {
break;
}
}
for (; ; ) {
if ((!_allocationQueue.isEmpty()) && (_maxActive < 0 || (_numActive + _numInternalProcessing) < _maxActive)) {
Latch<T> latch = _allocationQueue.removeFirst();
latch.setMayCreate(true);
_numInternalProcessing++;
synchronized (latch) {
latch.notify();
}
} else {
break;
}
}
}","private synchronized void allocate() {
if (isClosed()) {
return;
}
for (; ; ) {
if (!_pool.isEmpty() && !_allocationQueue.isEmpty()) {
Latch<T> latch<t>Var1 = latch<t>Literal2;
latch<t>Var1.setPair(_pool.removeFirst());
_numInternalProcessing++;
synchronized (latch<t>Var1) {
latch<t>Var1.notify();
}
} else {
break;
}
}
for (; ; ) {
if ((!_allocationQueue.isEmpty()) && (_maxActive < 0 || (_numActive + _numInternalProcessing) < _maxActive)) {
Latch<T> latch<t>Var1 = latch<t>Literal2;
latch<t>Var1.setMayCreate(true);
_numInternalProcessing++;
synchronized (latch<t>Var1) {
latch<t>Var1.notify();
}
} else {
break;
}
}
}"
17447,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1312,"} catch(Exception e) {
","@Override
public synchronized void returnObject(T obj) throws Exception {
boolean success = !isClosed();
if (_factory != null) {
if (!_factory.validateObject(obj)) {
success = false;
} else {
try {
_factory.passivateObject(obj);
} catch (Exception e) {
success = false;
}
}
}
boolean shouldDestroy = !success;
_numActive--;
if (success) {
_pool.add(new SoftReference<T>(obj, refQueue));
}
notifyAll();
if (shouldDestroy && _factory != null) {
try {
_factory.destroyObject(obj);
} catch (Exception e) {
}
}
}","@Override
public synchronized void returnObject(T obj) throws Exception {
boolean booleanVar1 = booleanLiteral2;
if (_factory != null) {
if (!_factory.validateObject(obj)) {
booleanVar1 = false;
} else {
try {
_factory.passivateObject(obj);
} catch (Exception e) {
booleanVar1 = false;
}
}
}
boolean booleanVar3 = booleanLiteral4;
_numActive--;
if (booleanVar1) {
_pool.add(new SoftReference<T>(obj, refQueue));
}
notifyAll();
if (booleanVar3 && _factory != null) {
try {
_factory.destroyObject(obj);
} catch (Exception e) {
}
}
}"
17450,Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,pool,1315,"@Deprecated
protected int _totIdle = 0;","@Deprecated
protected int _totIdle = 0;","@Deprecated
protected int intVar1 = intLiteral2;"
17455,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1320,"} catch (Exception e2) {
","@Override
public synchronized void addObject(K key) throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
V obj = _factory.makeObject(key);
try {
if (!_factory.validateObject(key, obj)) {
return;
}
} catch (Exception e) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e2) {
}
return;
}
_factory.passivateObject(key, obj);
Stack<V> stack = _pools.get(key);
if (null == stack) {
stack = new Stack<V>();
stack.ensureCapacity(_initSleepingCapacity > _maxSleeping ? _maxSleeping : _initSleepingCapacity);
_pools.put(key, stack);
}
final int stackSize = stack.size();
if (stackSize >= _maxSleeping) {
final V staleObj;
if (stackSize > 0) {
staleObj = stack.remove(0);
_totIdle--;
} else {
staleObj = obj;
}
try {
_factory.destroyObject(key, staleObj);
} catch (Exception e) {
if (obj == staleObj) {
throw e;
}
}
} else {
stack.push(obj);
_totIdle++;
}
}","@Override
public synchronized void addObject(K key) throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
V vVar1 = vLiteral2;
try {
if (!_factory.validateObject(key, vVar1)) {
return;
}
} catch (Exception e) {
try {
_factory.destroyObject(key, vVar1);
} catch (Exception e2) {
}
return;
}
_factory.passivateObject(key, vVar1);
Stack<V> stack<v>Var3 = stack<v>Literal4;
if (null == stack<v>Var3) {
stack<v>Var3 = new Stack<V>();
stack<v>Var3.ensureCapacity(_initSleepingCapacity > _maxSleeping ? _maxSleeping : _initSleepingCapacity);
_pools.put(key, stack<v>Var3);
}
final int intVar5 = intLiteral6;
if (intVar5 >= _maxSleeping) {
final V vVar7;
if (intVar5 > 0) {
vVar7 = stack<v>Var3.remove(0);
_totIdle--;
} else {
vVar7 = vVar1;
}
try {
_factory.destroyObject(key, vVar7);
} catch (Exception e) {
if (vVar1 == vVar7) {
throw e;
}
}
} else {
stack<v>Var3.push(vVar1);
_totIdle++;
}
}"
17459,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1324,"} catch(Exception e) {
","@Override
public synchronized void clear() {
if (null != _factory) {
Iterator<T> it = _pool.iterator();
while (it.hasNext()) {
try {
_factory.destroyObject(it.next());
} catch (Exception e) {
}
}
}
_pool.clear();
}","@Override
public synchronized void clear() {
if (null != _factory) {
Iterator<T> iterator<t>Var1 = iterator<t>Literal2;
while (iterator<t>Var1.hasNext()) {
try {
_factory.destroyObject(iterator<t>Var1.next());
} catch (Exception e) {
}
}
}
_pool.clear();
}"
17460,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1325,"} catch(Exception e) {
","@Override
public synchronized void returnObject(T obj) throws Exception {
boolean success = !isClosed();
if (null != _factory) {
if (!_factory.validateObject(obj)) {
success = false;
} else {
try {
_factory.passivateObject(obj);
} catch (Exception e) {
success = false;
}
}
}
boolean shouldDestroy = !success;
_numActive--;
if (success) {
T toBeDestroyed = null;
if (_pool.size() >= _maxSleeping) {
shouldDestroy = true;
toBeDestroyed = _pool.remove(0);
}
_pool.push(obj);
obj = toBeDestroyed;
}
notifyAll();
if (shouldDestroy) {
try {
_factory.destroyObject(obj);
} catch (Exception e) {
}
}
}","@Override
public synchronized void returnObject(T obj) throws Exception {
boolean booleanVar1 = booleanLiteral2;
if (null != _factory) {
if (!_factory.validateObject(obj)) {
booleanVar1 = false;
} else {
try {
_factory.passivateObject(obj);
} catch (Exception e) {
booleanVar1 = false;
}
}
}
boolean booleanVar3 = booleanLiteral4;
_numActive--;
if (booleanVar1) {
T tVar5 = tLiteral6;
if (_pool.size() >= _maxSleeping) {
booleanVar3 = true;
tVar5 = _pool.remove(0);
}
_pool.push(obj);
obj = tVar5;
}
notifyAll();
if (booleanVar3) {
try {
_factory.destroyObject(obj);
} catch (Exception e) {
}
}
}"
17462,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1327,"} catch (Exception e) {
","public void invalidateObject(final Object obj) {
try {
keyedPool.invalidateObject(key, obj);
} catch (Exception e) {
}
}","public void invalidateObject(final Object obj) {
try {
keyedPool.invalidateObject(key, obj);
} catch (Exception e) {
}
}"
17465,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1330,"} catch (Exception e) {
","public void returnObject(final Object key, final Object obj) {
try {
pool.returnObject(obj);
} catch (Exception e) {
}
}","public void returnObject(final Object key, final Object obj) {
try {
pool.returnObject(obj);
} catch (Exception e) {
}
}"
17472,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1337,"} catch (Exception e) {
","public void invalidateObject(final Object key, final Object obj) {
try {
keyedPool.invalidateObject(key, obj);
} catch (Exception e) {
}
}","public void invalidateObject(final Object key, final Object obj) {
try {
keyedPool.invalidateObject(key, obj);
} catch (Exception e) {
}
}"
17482,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1347,"} catch (Exception e) {
","public void invalidateObject(final Object obj) {
synchronized (lock) {
try {
pool.invalidateObject(obj);
} catch (Exception e) {
}
}
}","public void invalidateObject(final Object obj) {
synchronized (lock) {
try {
pool.invalidateObject(obj);
} catch (Exception e) {
}
}
}"
17485,Multithreaded correctness,NO_NOTIFY_NOT_NOTIFYALL,FP,pool,1350,"latch.notify();
","private void allocate() {
boolean clearOldest = false;
synchronized (this) {
if (isClosed())
return;
Iterator allocationQueueIter = _allocationQueue.iterator();
while (allocationQueueIter.hasNext()) {
Latch latch = (Latch) allocationQueueIter.next();
ObjectQueue pool = (ObjectQueue) (_poolMap.get(latch.getkey()));
if (null == pool) {
pool = new ObjectQueue();
_poolMap.put(latch.getkey(), pool);
_poolList.add(latch.getkey());
}
latch.setPool(pool);
if (!pool.queue.isEmpty()) {
allocationQueueIter.remove();
latch.setPair((ObjectTimestampPair) pool.queue.removeFirst());
pool.incrementInternalProcessingCount();
_totalIdle--;
synchronized (latch) {
latch.notify();
}
continue;
}
if ((_maxTotal > 0) && (_totalActive + _totalIdle + _totalInternalProcessing >= _maxTotal)) {
clearOldest = true;
break;
}
if ((_maxActive < 0 || pool.activeCount + pool.internalProcessingCount < _maxActive) && (_maxTotal < 0 || _totalActive + _totalIdle + _totalInternalProcessing < _maxTotal)) {
allocationQueueIter.remove();
latch.setMayCreate(true);
pool.incrementInternalProcessingCount();
synchronized (latch) {
latch.notify();
}
continue;
}
if (_maxActive < 0) {
break;
}
}
}
if (clearOldest) {
clearOldest();
}
}","private void allocate() {
boolean booleanVar1 = booleanLiteral2;
synchronized (this) {
if (isClosed())
return;
Iterator iteratorVar3 = iteratorLiteral4;
while (iteratorVar3.hasNext()) {
Latch latchVar5 = latchLiteral6;
ObjectQueue objectqueueVar7 = objectqueueLiteral8;
if (null == objectqueueVar7) {
objectqueueVar7 = new ObjectQueue();
_poolMap.put(latchVar5.getkey(), objectqueueVar7);
_poolList.add(latchVar5.getkey());
}
latchVar5.setPool(objectqueueVar7);
if (!objectqueueVar7.queue.isEmpty()) {
iteratorVar3.remove();
latchVar5.setPair((ObjectTimestampPair) objectqueueVar7.queue.removeFirst());
objectqueueVar7.incrementInternalProcessingCount();
_totalIdle--;
synchronized (latchVar5) {
latchVar5.notify();
}
continue;
}
if ((_maxTotal > 0) && (_totalActive + _totalIdle + _totalInternalProcessing >= _maxTotal)) {
booleanVar1 = true;
break;
}
if ((_maxActive < 0 || objectqueueVar7.activeCount + objectqueueVar7.internalProcessingCount < _maxActive) && (_maxTotal < 0 || _totalActive + _totalIdle + _totalInternalProcessing < _maxTotal)) {
iteratorVar3.remove();
latchVar5.setMayCreate(true);
objectqueueVar7.incrementInternalProcessingCount();
synchronized (latchVar5) {
latchVar5.notify();
}
continue;
}
if (_maxActive < 0) {
break;
}
}
}
if (booleanVar1) {
clearOldest();
}
}"
17497,PERFORMANCE,WMI_WRONG_MAP_ITERATOR,FP,pool,1362,"ObjectQueue pool = (ObjectQueue)_poolMap.get(key);
","public void clear() {
Map toDestroy = new HashMap();
synchronized (this) {
for (Iterator it = _poolMap.keySet().iterator(); it.hasNext(); ) {
Object key = it.next();
ObjectQueue pool = (ObjectQueue) _poolMap.get(key);
List objects = new ArrayList();
objects.addAll(pool.queue);
toDestroy.put(key, objects);
it.remove();
_poolList.remove(key);
_totalIdle = _totalIdle - pool.queue.size();
_totalInternalProcessing = _totalInternalProcessing + pool.queue.size();
pool.queue.clear();
}
}
destroy(toDestroy, _factory);
}","public void clear() {
Map mapVar1 = mapLiteral2;
synchronized (this) {
for (Iterator iteratorVar11 = iteratorLiteral12; iteratorVar3.hasNext(); ) {
Object objectVar5 = objectLiteral6;
ObjectQueue objectqueueVar7 = objectqueueLiteral8;
List listVar9 = listLiteral10;
listVar9.addAll(objectqueueVar7.queue);
mapVar1.put(objectVar5, listVar9);
iteratorVar3.remove();
_poolList.remove(objectVar5);
_totalIdle = _totalIdle - objectqueueVar7.queue.size();
_totalInternalProcessing = _totalInternalProcessing + objectqueueVar7.queue.size();
objectqueueVar7.queue.clear();
}
}
destroy(mapVar1, _factory);
}"
17504,Multithreaded correctness,NN_NAKED_NOTIFY,FP,pool,1369,"latch.notify();
","private synchronized void allocate() {
if (isClosed())
return;
for (; ; ) {
if (!_pool.isEmpty() && !_allocationQueue.isEmpty()) {
Latch latch = (Latch) _allocationQueue.removeFirst();
latch.setPair((ObjectTimestampPair) _pool.removeFirst());
_numInternalProcessing++;
synchronized (latch) {
latch.notify();
}
} else {
break;
}
}
for (; ; ) {
if ((!_allocationQueue.isEmpty()) && (_maxActive < 0 || (_numActive + _numInternalProcessing) < _maxActive)) {
Latch latch = (Latch) _allocationQueue.removeFirst();
latch.setMayCreate(true);
_numInternalProcessing++;
synchronized (latch) {
latch.notify();
}
} else {
break;
}
}
}","private synchronized void allocate() {
if (isClosed())
return;
for (; ; ) {
if (!_pool.isEmpty() && !_allocationQueue.isEmpty()) {
Latch latchVar1 = latchLiteral2;
latchVar1.setPair((ObjectTimestampPair) _pool.removeFirst());
_numInternalProcessing++;
synchronized (latchVar1) {
latchVar1.notify();
}
} else {
break;
}
}
for (; ; ) {
if ((!_allocationQueue.isEmpty()) && (_maxActive < 0 || (_numActive + _numInternalProcessing) < _maxActive)) {
Latch latchVar1 = latchLiteral2;
latchVar1.setMayCreate(true);
_numInternalProcessing++;
synchronized (latchVar1) {
latchVar1.notify();
}
} else {
break;
}
}
}"
17519,Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,pool,1384,protected int _totIdle = 0;,protected int _totIdle = 0;,protected int intVar1 = intLiteral2;
17534,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1399,"} catch (Exception e) {
","public void invalidateObject(final Object key, final Object obj) {
if (type.isInstance(obj)) {
try {
keyedPool.invalidateObject(key, obj);
} catch (Exception e) {
}
} else {
throw new ClassCastException(""Invalidated object for key: "" + key + "" is not of type: "" + type.getName() + "" was: "" + obj);
}
}","public void invalidateObject(final Object key, final Object obj) {
if (type.isInstance(obj)) {
try {
keyedPool.invalidateObject(key, obj);
} catch (Exception e) {
}
} else {
throw new ClassCastException(""Invalidated object for key: "" + key + "" is not of type: "" + type.getName() + "" was: "" + obj);
}
}"
17563,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1428,"} catch (Exception ex2) {
","public void addObject() throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
Object obj = _factory.makeObject();
try {
assertOpen();
addObjectToPool(obj, false);
} catch (IllegalStateException ex) {
try {
_factory.destroyObject(obj);
} catch (Exception ex2) {
}
throw ex;
}
}","public void addObject() throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
Object objectVar1 = objectLiteral2;
try {
assertOpen();
addObjectToPool(objectVar1, false);
} catch (IllegalStateException ex) {
try {
_factory.destroyObject(objectVar1);
} catch (Exception ex2) {
}
throw ex;
}
}"
17565,DODGY_CODE,RI_REDUNDANT_INTERFACES,FP,pool,1430,"public class GenericObjectPool extends BaseObjectPool implements ObjectPool {
public static final byte WHEN_EXHAUSTED_FAIL   = 0;
public static final byte WHEN_EXHAUSTED_BLOCK  = 1;
public static final byte WHEN_EXHAUSTED_GROW   = 2;
public static final int DEFAULT_MAX_IDLE  = 8;
public static final int DEFAULT_MIN_IDLE = 0;
public static final int DEFAULT_MAX_ACTIVE  = 8;
public static final byte DEFAULT_WHEN_EXHAUSTED_ACTION = WHEN_EXHAUSTED_BLOCK;
public static final boolean DEFAULT_LIFO = true;
public static final long DEFAULT_MAX_WAIT = -1L;
public static final boolean DEFAULT_TEST_ON_BORROW = false;
public static final boolean DEFAULT_TEST_ON_RETURN = false;
public static final boolean DEFAULT_TEST_WHILE_IDLE = false;
public static final long DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS = -1L;
public static final int DEFAULT_NUM_TESTS_PER_EVICTION_RUN = 3;
public static final long DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS = 1000L * 60L * 30L;
public static final long DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS = -1;
public GenericObjectPool() {
this(null, DEFAULT_MAX_ACTIVE, DEFAULT_WHEN_EXHAUSTED_ACTION, DEFAULT_MAX_WAIT, DEFAULT_MAX_IDLE,
DEFAULT_MIN_IDLE, DEFAULT_TEST_ON_BORROW, DEFAULT_TEST_ON_RETURN, DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS,
DEFAULT_NUM_TESTS_PER_EVICTION_RUN, DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS, DEFAULT_TEST_WHILE_IDLE);
}
public GenericObjectPool(PoolableObjectFactory factory) {
this(factory, DEFAULT_MAX_ACTIVE, DEFAULT_WHEN_EXHAUSTED_ACTION, DEFAULT_MAX_WAIT, DEFAULT_MAX_IDLE,
DEFAULT_MIN_IDLE, DEFAULT_TEST_ON_BORROW, DEFAULT_TEST_ON_RETURN, DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS,
DEFAULT_NUM_TESTS_PER_EVICTION_RUN, DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS, DEFAULT_TEST_WHILE_IDLE);
}
public GenericObjectPool(PoolableObjectFactory factory, GenericObjectPool.Config config) {
this(factory, config.maxActive, config.whenExhaustedAction, config.maxWait, config.maxIdle, config.minIdle,
config.testOnBorrow, config.testOnReturn, config.timeBetweenEvictionRunsMillis,
config.numTestsPerEvictionRun, config.minEvictableIdleTimeMillis, config.testWhileIdle,
config.softMinEvictableIdleTimeMillis, config.lifo);
}
public GenericObjectPool(PoolableObjectFactory factory, int maxActive) {
this(factory, maxActive, DEFAULT_WHEN_EXHAUSTED_ACTION, DEFAULT_MAX_WAIT, DEFAULT_MAX_IDLE, DEFAULT_MIN_IDLE,
DEFAULT_TEST_ON_BORROW, DEFAULT_TEST_ON_RETURN, DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS,
DEFAULT_NUM_TESTS_PER_EVICTION_RUN, DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS, DEFAULT_TEST_WHILE_IDLE);
}
public GenericObjectPool(PoolableObjectFactory factory, int maxActive, byte whenExhaustedAction, long maxWait) {
this(factory, maxActive, whenExhaustedAction, maxWait, DEFAULT_MAX_IDLE, DEFAULT_MIN_IDLE, DEFAULT_TEST_ON_BORROW,
DEFAULT_TEST_ON_RETURN, DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS, DEFAULT_NUM_TESTS_PER_EVICTION_RUN,
DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS, DEFAULT_TEST_WHILE_IDLE);
}
public GenericObjectPool(PoolableObjectFactory factory, int maxActive, byte whenExhaustedAction, long maxWait,
boolean testOnBorrow, boolean testOnReturn) {
this(factory, maxActive, whenExhaustedAction, maxWait, DEFAULT_MAX_IDLE, DEFAULT_MIN_IDLE, testOnBorrow,
testOnReturn, DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS, DEFAULT_NUM_TESTS_PER_EVICTION_RUN,
DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS, DEFAULT_TEST_WHILE_IDLE);
}
public GenericObjectPool(PoolableObjectFactory factory, int maxActive, byte whenExhaustedAction, long maxWait, int maxIdle) {
this(factory, maxActive, whenExhaustedAction, maxWait, maxIdle, DEFAULT_MIN_IDLE, DEFAULT_TEST_ON_BORROW,
DEFAULT_TEST_ON_RETURN, DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS, DEFAULT_NUM_TESTS_PER_EVICTION_RUN,
DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS, DEFAULT_TEST_WHILE_IDLE);
}
public GenericObjectPool(PoolableObjectFactory factory, int maxActive, byte whenExhaustedAction, long maxWait,
int maxIdle, boolean testOnBorrow, boolean testOnReturn) {
this(factory, maxActive, whenExhaustedAction, maxWait, maxIdle, DEFAULT_MIN_IDLE, testOnBorrow, testOnReturn,
DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS, DEFAULT_NUM_TESTS_PER_EVICTION_RUN,
DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS, DEFAULT_TEST_WHILE_IDLE);
}
public GenericObjectPool(PoolableObjectFactory factory, int maxActive, byte whenExhaustedAction, long maxWait,
int maxIdle, boolean testOnBorrow, boolean testOnReturn, long timeBetweenEvictionRunsMillis,
int numTestsPerEvictionRun, long minEvictableIdleTimeMillis, boolean testWhileIdle) {
this(factory, maxActive, whenExhaustedAction, maxWait, maxIdle, DEFAULT_MIN_IDLE, testOnBorrow, testOnReturn,
timeBetweenEvictionRunsMillis, numTestsPerEvictionRun, minEvictableIdleTimeMillis, testWhileIdle);
}
public GenericObjectPool(PoolableObjectFactory factory, int maxActive, byte whenExhaustedAction, long maxWait,
int maxIdle, int minIdle, boolean testOnBorrow, boolean testOnReturn, long timeBetweenEvictionRunsMillis,
int numTestsPerEvictionRun, long minEvictableIdleTimeMillis, boolean testWhileIdle) {
this(factory, maxActive, whenExhaustedAction, maxWait, maxIdle, minIdle, testOnBorrow, testOnReturn,
timeBetweenEvictionRunsMillis, numTestsPerEvictionRun, minEvictableIdleTimeMillis, testWhileIdle,
DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
}
public GenericObjectPool(PoolableObjectFactory factory, int maxActive, byte whenExhaustedAction, long maxWait,
int maxIdle, int minIdle, boolean testOnBorrow, boolean testOnReturn, long timeBetweenEvictionRunsMillis,
int numTestsPerEvictionRun, long minEvictableIdleTimeMillis, boolean testWhileIdle,
long softMinEvictableIdleTimeMillis) {
this(factory, maxActive, whenExhaustedAction, maxWait, maxIdle, minIdle, testOnBorrow, testOnReturn,
timeBetweenEvictionRunsMillis, numTestsPerEvictionRun, minEvictableIdleTimeMillis, testWhileIdle,
softMinEvictableIdleTimeMillis, DEFAULT_LIFO);
}
public GenericObjectPool(PoolableObjectFactory factory, int maxActive, byte whenExhaustedAction, long maxWait,
int maxIdle, int minIdle, boolean testOnBorrow, boolean testOnReturn, long timeBetweenEvictionRunsMillis,
int numTestsPerEvictionRun, long minEvictableIdleTimeMillis, boolean testWhileIdle,
long softMinEvictableIdleTimeMillis, boolean lifo) {
_factory = factory;
_maxActive = maxActive;
_lifo = lifo;
switch(whenExhaustedAction) {
case WHEN_EXHAUSTED_BLOCK:
case WHEN_EXHAUSTED_FAIL:
case WHEN_EXHAUSTED_GROW:
_whenExhaustedAction = whenExhaustedAction;
break;
default:
throw new IllegalArgumentException(""whenExhaustedAction "" + whenExhaustedAction + "" not recognized."");
}
_maxWait = maxWait;
_maxIdle = maxIdle;
_minIdle = minIdle;
_testOnBorrow = testOnBorrow;
_testOnReturn = testOnReturn;
_timeBetweenEvictionRunsMillis = timeBetweenEvictionRunsMillis;
_numTestsPerEvictionRun = numTestsPerEvictionRun;
_minEvictableIdleTimeMillis = minEvictableIdleTimeMillis;
_softMinEvictableIdleTimeMillis = softMinEvictableIdleTimeMillis;
_testWhileIdle = testWhileIdle;
_pool = new CursorableLinkedList();
startEvictor(_timeBetweenEvictionRunsMillis);
}
public synchronized int getMaxActive() {
return _maxActive;
}
public synchronized void setMaxActive(int maxActive) {
_maxActive = maxActive;
allocate();
}
public synchronized byte getWhenExhaustedAction() {
return _whenExhaustedAction;
}
public synchronized void setWhenExhaustedAction(byte whenExhaustedAction) {
switch(whenExhaustedAction) {
case WHEN_EXHAUSTED_BLOCK:
case WHEN_EXHAUSTED_FAIL:
case WHEN_EXHAUSTED_GROW:
_whenExhaustedAction = whenExhaustedAction;
allocate();
break;
default:
throw new IllegalArgumentException(""whenExhaustedAction "" + whenExhaustedAction + "" not recognized."");
}
}
public synchronized long getMaxWait() {
return _maxWait;
}
public synchronized void setMaxWait(long maxWait) {
_maxWait = maxWait;
allocate();
}
public synchronized int getMaxIdle() {
return _maxIdle;
}
public synchronized void setMaxIdle(int maxIdle) {
_maxIdle = maxIdle;
allocate();
}
public synchronized void setMinIdle(int minIdle) {
_minIdle = minIdle;
allocate();
}
public synchronized int getMinIdle() {
return _minIdle;
}
public boolean getTestOnBorrow() {
return _testOnBorrow;
}
public void setTestOnBorrow(boolean testOnBorrow) {
_testOnBorrow = testOnBorrow;
}
public boolean getTestOnReturn() {
return _testOnReturn;
}
public void setTestOnReturn(boolean testOnReturn) {
_testOnReturn = testOnReturn;
}
public synchronized long getTimeBetweenEvictionRunsMillis() {
return _timeBetweenEvictionRunsMillis;
}
public synchronized void setTimeBetweenEvictionRunsMillis(long timeBetweenEvictionRunsMillis) {
_timeBetweenEvictionRunsMillis = timeBetweenEvictionRunsMillis;
startEvictor(_timeBetweenEvictionRunsMillis);
}
public synchronized int getNumTestsPerEvictionRun() {
return _numTestsPerEvictionRun;
}
public synchronized void setNumTestsPerEvictionRun(int numTestsPerEvictionRun) {
_numTestsPerEvictionRun = numTestsPerEvictionRun;
}
public synchronized long getMinEvictableIdleTimeMillis() {
return _minEvictableIdleTimeMillis;
}
public synchronized void setMinEvictableIdleTimeMillis(long minEvictableIdleTimeMillis) {
_minEvictableIdleTimeMillis = minEvictableIdleTimeMillis;
}
public synchronized long getSoftMinEvictableIdleTimeMillis() {
return _softMinEvictableIdleTimeMillis;
}
public synchronized void setSoftMinEvictableIdleTimeMillis(long softMinEvictableIdleTimeMillis) {
_softMinEvictableIdleTimeMillis = softMinEvictableIdleTimeMillis;
}
public synchronized boolean getTestWhileIdle() {
return _testWhileIdle;
}
public synchronized void setTestWhileIdle(boolean testWhileIdle) {
_testWhileIdle = testWhileIdle;
}
public synchronized boolean getLifo() {
return _lifo;
}
public synchronized void setLifo(boolean lifo) {
this._lifo = lifo;
}
public synchronized void setConfig(GenericObjectPool.Config conf) {
setMaxIdle(conf.maxIdle);
setMinIdle(conf.minIdle);
setMaxActive(conf.maxActive);
setMaxWait(conf.maxWait);
setWhenExhaustedAction(conf.whenExhaustedAction);
setTestOnBorrow(conf.testOnBorrow);
setTestOnReturn(conf.testOnReturn);
setTestWhileIdle(conf.testWhileIdle);
setNumTestsPerEvictionRun(conf.numTestsPerEvictionRun);
setMinEvictableIdleTimeMillis(conf.minEvictableIdleTimeMillis);
setTimeBetweenEvictionRunsMillis(conf.timeBetweenEvictionRunsMillis);
setSoftMinEvictableIdleTimeMillis(conf.softMinEvictableIdleTimeMillis);
setLifo(conf.lifo);
allocate();
}
public Object borrowObject() throws Exception {
long starttime = System.currentTimeMillis();
Latch latch = new Latch();
byte whenExhaustedAction;
long maxWait;
synchronized (this) {
whenExhaustedAction = _whenExhaustedAction;
maxWait = _maxWait;
_allocationQueue.add(latch);
allocate();
}
for(;;) {
synchronized (this) {
assertOpen();
}
if(latch.getPair() == null) {
if(latch.mayCreate()) {
} else {
switch(whenExhaustedAction) {
case WHEN_EXHAUSTED_GROW:
synchronized (this) {
if (latch.getPair() == null) {
_allocationQueue.remove(latch);
_numInternalProcessing++;
}
}
break;
case WHEN_EXHAUSTED_FAIL:
synchronized (this) {
if (latch.getPair() != null) {
break;
}
_allocationQueue.remove(latch);
}
throw new NoSuchElementException(""Pool exhausted"");
case WHEN_EXHAUSTED_BLOCK:
try {
synchronized (latch) {
if (latch.getPair() == null) {
if(maxWait <= 0) {
latch.wait();
} else {
final long elapsed = (System.currentTimeMillis() - starttime);
final long waitTime = maxWait - elapsed;
if (waitTime > 0)
{
latch.wait(waitTime);
}
}
} else {
break;
}
}
} catch(InterruptedException e) {
Thread.currentThread().interrupt();
throw e;
}
if(maxWait > 0 && ((System.currentTimeMillis() - starttime) >= maxWait)) {
synchronized(this) {
if (latch.getPair() == null) {
_allocationQueue.remove(latch);
} else {
break;
}
}
throw new NoSuchElementException(""Timeout waiting for idle object"");
} else {
continue; 
}
default:
throw new IllegalArgumentException(""WhenExhaustedAction property "" + whenExhaustedAction +
"" not recognized."");
}
}
}
boolean newlyCreated = false;
if(null == latch.getPair()) {
try {
Object obj = _factory.makeObject();
latch.setPair(new ObjectTimestampPair(obj));
newlyCreated = true;
} finally {
if (!newlyCreated) {
synchronized (this) {
_numInternalProcessing--;
allocate();
}
}
}
}
try {
_factory.activateObject(latch.getPair().value);
if(_testOnBorrow &&
!_factory.validateObject(latch.getPair().value)) {
throw new Exception(""ValidateObject failed"");
}
synchronized(this) {
_numInternalProcessing--;
_numActive++;
}
return latch.getPair().value;
}
catch (Throwable e) {
try {
_factory.destroyObject(latch.getPair().value);
} catch (Throwable e2) {
}
synchronized (this) {
_numInternalProcessing--;
latch.reset();
_allocationQueue.add(0, latch);
allocate();
}
if(newlyCreated) {
throw new NoSuchElementException(""Could not create a validated object, cause: "" + e.getMessage());
}
else {
continue; 
}
}
}
}
private synchronized void allocate() {
if (isClosed()) return;
for (;;) {
if (!_pool.isEmpty() && !_allocationQueue.isEmpty()) {
Latch latch = (Latch) _allocationQueue.removeFirst();
latch.setPair((ObjectTimestampPair) _pool.removeFirst());
_numInternalProcessing++;
synchronized (latch) {
latch.notify();
}
} else {
break;
}
}
for(;;) {
if((!_allocationQueue.isEmpty()) && (_maxActive < 0 || (_numActive + _numInternalProcessing) < _maxActive)) {
Latch latch = (Latch) _allocationQueue.removeFirst();
latch.setMayCreate(true);
_numInternalProcessing++;
synchronized (latch) {
latch.notify();
}
} else {
break;
}
}
}
public void invalidateObject(Object obj) throws Exception {
try {
if (_factory != null) {
_factory.destroyObject(obj);
}
} finally {
synchronized (this) {
_numActive--;
allocate();
}
}
}
public void clear() {
List toDestroy = new ArrayList();
synchronized(this) {
toDestroy.addAll(_pool);
_numInternalProcessing = _numInternalProcessing + _pool._size;
_pool.clear();
}
destroy(toDestroy);
}
private void destroy(Collection c) {
for (Iterator it = c.iterator(); it.hasNext();) {
try {
_factory.destroyObject(((ObjectTimestampPair)(it.next())).value);
} catch(Exception e) {
} finally {
synchronized(this) {
_numInternalProcessing--;
allocate();
}
}
}
}
public synchronized int getNumActive() {
return _numActive;
}
public synchronized int getNumIdle() {
return _pool.size();
}
public void returnObject(Object obj) throws Exception {
try {
addObjectToPool(obj, true);
} catch (Exception e) {
if (_factory != null) {
try {
_factory.destroyObject(obj);
} catch (Exception e2) {
}
// TODO: Correctness here depends on control in addObjectToPool.
synchronized(this) {
_numActive--;
allocate();
}
}
}
}
private void addObjectToPool(Object obj, boolean decrementNumActive) throws Exception {
boolean success = true;
if(_testOnReturn && !(_factory.validateObject(obj))) {
success = false;
} else {
_factory.passivateObject(obj);
}
boolean shouldDestroy = !success;
synchronized (this) {
if (isClosed()) {
shouldDestroy = true;
} else {
if((_maxIdle >= 0) && (_pool.size() >= _maxIdle)) {
shouldDestroy = true;
} else if(success) {
if (_lifo) {
_pool.addFirst(new ObjectTimestampPair(obj));
} else {
_pool.addLast(new ObjectTimestampPair(obj));
}
if (decrementNumActive) {
_numActive--;
}
allocate();
}
}
}
if(shouldDestroy) {
try {
_factory.destroyObject(obj);
} catch(Exception e) {
}
if (decrementNumActive) {
synchronized(this) {
_numActive--;
allocate();
}
}
}
}
public void close() throws Exception {
super.close();
synchronized (this) {
clear();
startEvictor(-1L);
}
}
public void setFactory(PoolableObjectFactory factory) throws IllegalStateException {
List toDestroy = new ArrayList();
synchronized (this) {
assertOpen();
if(0 < getNumActive()) {
throw new IllegalStateException(""Objects are already active"");
} else {
toDestroy.addAll(_pool);
_numInternalProcessing = _numInternalProcessing + _pool._size;
_pool.clear();
}
_factory = factory;
}
destroy(toDestroy);
}
public void evict() throws Exception {
assertOpen();
synchronized (this) {
if(_pool.isEmpty()) {
return;
}
if (null == _evictionCursor) {
_evictionCursor = (_pool.cursor(_lifo ? _pool.size() : 0));
}
}
for (int i=0,m=getNumTests();i<m;i++) {
final ObjectTimestampPair pair;
synchronized (this) {
if ((_lifo && !_evictionCursor.hasPrevious()) ||
!_lifo && !_evictionCursor.hasNext()) {
_evictionCursor.close();
_evictionCursor = _pool.cursor(_lifo ? _pool.size() : 0);
}
pair = _lifo ?
(ObjectTimestampPair) _evictionCursor.previous() :
(ObjectTimestampPair) _evictionCursor.next();
_evictionCursor.remove();
_numInternalProcessing++;
}
boolean removeObject = false;
final long idleTimeMilis = System.currentTimeMillis() - pair.tstamp;
if ((getMinEvictableIdleTimeMillis() > 0) &&
(idleTimeMilis > getMinEvictableIdleTimeMillis())) {
removeObject = true;
} else if ((getSoftMinEvictableIdleTimeMillis() > 0) &&
(idleTimeMilis > getSoftMinEvictableIdleTimeMillis()) &&
((getNumIdle() + 1)> getMinIdle())) { 
removeObject = true;
}
if(getTestWhileIdle() && !removeObject) {
boolean active = false;
try {
_factory.activateObject(pair.value);
active = true;
} catch(Exception e) {
removeObject=true;
}
if(active) {
if(!_factory.validateObject(pair.value)) {
removeObject=true;
} else {
try {
_factory.passivateObject(pair.value);
} catch(Exception e) {
removeObject=true;
}
}
}
}
if (removeObject) {
try {
_factory.destroyObject(pair.value);
} catch(Exception e) {
}
}
synchronized (this) {
if(!removeObject) {
_evictionCursor.add(pair);
if (_lifo) {
_evictionCursor.previous();
}
}
_numInternalProcessing--;
}
}
}
private void ensureMinIdle() throws Exception {
int objectDeficit = calculateDeficit(false);
for ( int j = 0 ; j < objectDeficit && calculateDeficit(true) > 0 ; j++ ) {
try {
addObject();
} finally {
synchronized (this) {
_numInternalProcessing--;
allocate();
}
}
}
}
private synchronized int calculateDeficit(boolean incrementInternal) {
int objectDeficit = getMinIdle() - getNumIdle();
if (_maxActive > 0) {
int growLimit = Math.max(0,
getMaxActive() - getNumActive() - getNumIdle() - _numInternalProcessing);
objectDeficit = Math.min(objectDeficit, growLimit);
}
if (incrementInternal && objectDeficit >0) {
_numInternalProcessing++;
}
return objectDeficit;
}
public void addObject() throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
Object obj = _factory.makeObject();
try {
assertOpen();
addObjectToPool(obj, false);
} catch (IllegalStateException ex) { 
try {
_factory.destroyObject(obj);
} catch (Exception ex2) {
}
throw ex;
}
}
protected synchronized void startEvictor(long delay) {
if(null != _evictor) {
EvictionTimer.cancel(_evictor);
_evictor = null;
}
if(delay > 0) {
_evictor = new Evictor();
EvictionTimer.schedule(_evictor, delay, delay);
}
}
synchronized String debugInfo() {
StringBuffer buf = new StringBuffer();
buf.append(""Active: "").append(getNumActive()).append(""\n"");
buf.append(""Idle: "").append(getNumIdle()).append(""\n"");
buf.append(""Idle Objects:\n"");
Iterator it = _pool.iterator();
long time = System.currentTimeMillis();
while(it.hasNext()) {
ObjectTimestampPair pair = (ObjectTimestampPair)(it.next());
buf.append(""\t"").append(pair.value).append(""\t"").append(time - pair.tstamp).append(""\n"");
}
return buf.toString();
}
private int getNumTests() {
if(_numTestsPerEvictionRun >= 0) {
return Math.min(_numTestsPerEvictionRun, _pool.size());
} else {
return(int)(Math.ceil(_pool.size()/Math.abs((double)_numTestsPerEvictionRun)));
}
}
private class Evictor extends TimerTask {
public void run() {
try {
evict();
} catch(Exception e) {
} catch(OutOfMemoryError oome) {
oome.printStackTrace(System.err);
}
try {
ensureMinIdle();
} catch(Exception e) {
}
}
}
public static class Config {
public int maxIdle = GenericObjectPool.DEFAULT_MAX_IDLE;
public int minIdle = GenericObjectPool.DEFAULT_MIN_IDLE;
public int maxActive = GenericObjectPool.DEFAULT_MAX_ACTIVE;
public long maxWait = GenericObjectPool.DEFAULT_MAX_WAIT;
public byte whenExhaustedAction = GenericObjectPool.DEFAULT_WHEN_EXHAUSTED_ACTION;
public boolean testOnBorrow = GenericObjectPool.DEFAULT_TEST_ON_BORROW;
public boolean testOnReturn = GenericObjectPool.DEFAULT_TEST_ON_RETURN;
public boolean testWhileIdle = GenericObjectPool.DEFAULT_TEST_WHILE_IDLE;
public long timeBetweenEvictionRunsMillis = GenericObjectPool.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS;
public int numTestsPerEvictionRun =  GenericObjectPool.DEFAULT_NUM_TESTS_PER_EVICTION_RUN;
public long minEvictableIdleTimeMillis = GenericObjectPool.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS;
public long softMinEvictableIdleTimeMillis = GenericObjectPool.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS;
public boolean lifo = GenericObjectPool.DEFAULT_LIFO;
}
private static final class Latch {
private ObjectTimestampPair _pair;
private boolean _mayCreate = false;
private synchronized ObjectTimestampPair getPair() {
return _pair;
}
private synchronized void setPair(ObjectTimestampPair pair) {
_pair = pair;
}
private synchronized boolean mayCreate() {
return _mayCreate;
}
private synchronized void setMayCreate(boolean mayCreate) {
_mayCreate = mayCreate;
}
private synchronized void reset() {
_pair = null;
_mayCreate = false;
}
}
private int _maxIdle = DEFAULT_MAX_IDLE;
private int _minIdle = DEFAULT_MIN_IDLE;
private int _maxActive = DEFAULT_MAX_ACTIVE;
private long _maxWait = DEFAULT_MAX_WAIT;
private byte _whenExhaustedAction = DEFAULT_WHEN_EXHAUSTED_ACTION;
private volatile boolean _testOnBorrow = DEFAULT_TEST_ON_BORROW;
private volatile boolean _testOnReturn = DEFAULT_TEST_ON_RETURN;
private boolean _testWhileIdle = DEFAULT_TEST_WHILE_IDLE;
private long _timeBetweenEvictionRunsMillis = DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS;
private int _numTestsPerEvictionRun =  DEFAULT_NUM_TESTS_PER_EVICTION_RUN;
private long _minEvictableIdleTimeMillis = DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS;
private long _softMinEvictableIdleTimeMillis = DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS;
private boolean _lifo = DEFAULT_LIFO;
private CursorableLinkedList _pool = null;
private CursorableLinkedList.Cursor _evictionCursor = null;
private PoolableObjectFactory _factory = null;
private int _numActive = 0;
private Evictor _evictor = null;
private int _numInternalProcessing = 0;
private LinkedList _allocationQueue = new LinkedList();
","public void returnObject(Object obj) throws Exception {
try {
addObjectToPool(obj, true);
} catch (Exception e) {
if (_factory != null) {
try {
_factory.destroyObject(obj);
} catch (Exception e2) {
}
synchronized (this) {
_numActive--;
allocate();
}
}
}
}","public void returnObject(Object obj) throws Exception {
try {
addObjectToPool(obj, true);
} catch (Exception e) {
if (_factory != null) {
try {
_factory.destroyObject(obj);
} catch (Exception e2) {
}
synchronized (this) {
_numActive--;
allocate();
}
}
}
}"
17571,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1436,"} catch(Exception e) {
","public synchronized void returnObject(Object obj) throws Exception {
boolean success = !isClosed();
if (_factory != null) {
if (!_factory.validateObject(obj)) {
success = false;
} else {
try {
_factory.passivateObject(obj);
} catch (Exception e) {
success = false;
}
}
}
boolean shouldDestroy = !success;
_numActive--;
if (success) {
_pool.add(new SoftReference(obj, refQueue));
}
notifyAll();
if (shouldDestroy && _factory != null) {
try {
_factory.destroyObject(obj);
} catch (Exception e) {
}
}
}","public synchronized void returnObject(Object obj) throws Exception {
boolean booleanVar1 = booleanLiteral2;
if (_factory != null) {
if (!_factory.validateObject(obj)) {
booleanVar1 = false;
} else {
try {
_factory.passivateObject(obj);
} catch (Exception e) {
booleanVar1 = false;
}
}
}
boolean booleanVar3 = booleanLiteral4;
_numActive--;
if (booleanVar1) {
_pool.add(new SoftReference(obj, refQueue));
}
notifyAll();
if (booleanVar3 && _factory != null) {
try {
_factory.destroyObject(obj);
} catch (Exception e) {
}
}
}"
17575,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1440,"} catch(Exception e) {
","private synchronized void destroyStack(Object key, Stack stack) {
if (null == stack) {
return;
} else {
if (null != _factory) {
Iterator it = stack.iterator();
while (it.hasNext()) {
try {
_factory.destroyObject(key, it.next());
} catch (Exception e) {
}
}
}
_totIdle -= stack.size();
_activeCount.remove(key);
stack.clear();
}
}","private synchronized void destroyStack(Object key, Stack stack) {
if (null == stack) {
return;
} else {
if (null != _factory) {
Iterator iteratorVar1 = iteratorLiteral2;
while (iteratorVar1.hasNext()) {
try {
_factory.destroyObject(key, iteratorVar1.next());
} catch (Exception e) {
}
}
}
_totIdle -= stack.size();
_activeCount.remove(key);
stack.clear();
}
}"
17578,DODGY_CODE,RI_REDUNDANT_INTERFACES,FP,pool,1443,"this((KeyedPoolableObjectFactory)null,DEFAULT_MAX_SLEEPING,DEFAULT_INIT_SLEEPING_CAPACITY);
}
public StackKeyedObjectPool(int max) {
this((KeyedPoolableObjectFactory)null,max,DEFAULT_INIT_SLEEPING_CAPACITY);
}
public StackKeyedObjectPool(int max, int init) {
this((KeyedPoolableObjectFactory)null,max,init);
}
public StackKeyedObjectPool(KeyedPoolableObjectFactory factory) {
this(factory,DEFAULT_MAX_SLEEPING);
}
public StackKeyedObjectPool(KeyedPoolableObjectFactory factory, int max) {
this(factory,max,DEFAULT_INIT_SLEEPING_CAPACITY);
}
public StackKeyedObjectPool(KeyedPoolableObjectFactory factory, int max, int init) {
_factory = factory;
_maxSleeping = (max < 0 ? DEFAULT_MAX_SLEEPING : max);
_initSleepingCapacity = (init < 1 ? DEFAULT_INIT_SLEEPING_CAPACITY : init);
_pools = new HashMap();
_activeCount = new HashMap();
}
public synchronized Object borrowObject(Object key) throws Exception {
assertOpen();
Stack stack = (Stack)(_pools.get(key));
if(null == stack) {
stack = new Stack();
stack.ensureCapacity( _initSleepingCapacity > _maxSleeping ? _maxSleeping : _initSleepingCapacity);
_pools.put(key,stack);
}
Object obj = null;
do {
boolean newlyMade = false;
if (!stack.empty()) {
obj = stack.pop();
_totIdle--;
} else {
if(null == _factory) {
throw new NoSuchElementException(""pools without a factory cannot create new objects as needed."");
} else {
obj = _factory.makeObject(key);
newlyMade = true;
}
}
if (null != _factory && null != obj) {
try {
_factory.activateObject(key, obj);
if (!_factory.validateObject(key, obj)) {
throw new Exception(""ValidateObject failed"");
}
} catch (Throwable t) {
try {
_factory.destroyObject(key,obj);
} catch (Throwable t2) {
} finally {
obj = null;
}
if (newlyMade) {
throw new NoSuchElementException(
""Could not create a validated object, cause: "" +
t.getMessage());
}
}
}
} while (obj == null);
incrementActiveCount(key);
return obj;
}
public synchronized void returnObject(Object key, Object obj) throws Exception {
decrementActiveCount(key);
if (null != _factory) {
if (_factory.validateObject(key, obj)) {
try {
_factory.passivateObject(key, obj);
} catch (Exception ex) {
_factory.destroyObject(key, obj);
return;
}
} else {
return;
}
}
if (isClosed()) {
if (null != _factory) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e) {
}
}
return;
}
Stack stack = (Stack)_pools.get(key);
if(null == stack) {
stack = new Stack();
stack.ensureCapacity( _initSleepingCapacity > _maxSleeping ? _maxSleeping : _initSleepingCapacity);
_pools.put(key,stack);
}
final int stackSize = stack.size();
if (stackSize >= _maxSleeping) {
final Object staleObj;
if (stackSize > 0) {
staleObj = stack.remove(0);
_totIdle--;
} else {
staleObj = obj;
}
if(null != _factory) {
try {
_factory.destroyObject(key, staleObj);
} catch (Exception e) {
}
}
}
stack.push(obj);
_totIdle++;
}
public synchronized void invalidateObject(Object key, Object obj) throws Exception {
decrementActiveCount(key);
if(null != _factory) {
_factory.destroyObject(key,obj);
}
notifyAll(); 
}
public synchronized void addObject(Object key) throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
Object obj = _factory.makeObject(key);
try {
if (!_factory.validateObject(key, obj)) {
return;
}
} catch (Exception e) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e2) {
}
return;
}
_factory.passivateObject(key, obj);
Stack stack = (Stack)_pools.get(key);
if(null == stack) {
stack = new Stack();
stack.ensureCapacity( _initSleepingCapacity > _maxSleeping ? _maxSleeping : _initSleepingCapacity);
_pools.put(key,stack);
}
final int stackSize = stack.size();
if (stackSize >= _maxSleeping) {
final Object staleObj;
if (stackSize > 0) {
staleObj = stack.remove(0);
_totIdle--;
} else {
staleObj = obj;
}
try {
_factory.destroyObject(key, staleObj);
} catch (Exception e) {
if (obj == staleObj) {
throw e;
}
}
} else {
stack.push(obj);
_totIdle++;
}
}
public synchronized int getNumIdle() {
return _totIdle;
}
public synchronized int getNumActive() {
return _totActive;
}
public synchronized int getNumActive(Object key) {
return getActiveCount(key);
}
public synchronized int getNumIdle(Object key) {
try {
return((Stack)(_pools.get(key))).size();
} catch(Exception e) {
return 0;
}
}
public synchronized void clear() {
Iterator it = _pools.keySet().iterator();
while(it.hasNext()) {
Object key = it.next();
Stack stack = (Stack)(_pools.get(key));
destroyStack(key,stack);
}
_totIdle = 0;
_pools.clear();
_activeCount.clear();
}
public synchronized void clear(Object key) {
Stack stack = (Stack)(_pools.remove(key));
destroyStack(key,stack);
}
private synchronized void destroyStack(Object key, Stack stack) {
if(null == stack) {
return;
} else {
if(null != _factory) {
Iterator it = stack.iterator();
while(it.hasNext()) {
try {
_factory.destroyObject(key,it.next());
} catch(Exception e) {
}
}
}
_totIdle -= stack.size();
_activeCount.remove(key);
stack.clear();
}
}
public synchronized String toString() {
StringBuffer buf = new StringBuffer();
buf.append(getClass().getName());
buf.append("" contains "").append(_pools.size()).append("" distinct pools: "");
Iterator it = _pools.keySet().iterator();
while(it.hasNext()) {
Object key = it.next();
buf.append("" |"").append(key).append(""|="");
Stack s = (Stack)(_pools.get(key));
buf.append(s.size());
}
return buf.toString();
}
public void close() throws Exception {
super.close();
clear();
}
public synchronized void setFactory(KeyedPoolableObjectFactory factory) throws IllegalStateException {
if(0 < getNumActive()) {
throw new IllegalStateException(""Objects are already active"");
} else {
clear();
_factory = factory;
}
}
private int getActiveCount(Object key) {
try {
return ((Integer)_activeCount.get(key)).intValue();
} catch(NoSuchElementException e) {
return 0;
} catch(NullPointerException e) {
return 0;
}
}
private void incrementActiveCount(Object key) {
_totActive++;
Integer old = (Integer)(_activeCount.get(key));
if(null == old) {
_activeCount.put(key,new Integer(1));
} else {
_activeCount.put(key,new Integer(old.intValue() + 1));
}
}
private void decrementActiveCount(Object key) {
_totActive--;
Integer active = (Integer)(_activeCount.get(key));
if(null == active) {
} else if(active.intValue() <= 1) {
_activeCount.remove(key);
} else {
_activeCount.put(key, new Integer(active.intValue() - 1));
}
}
protected static final int DEFAULT_MAX_SLEEPING  = 8;
protected static final int DEFAULT_INIT_SLEEPING_CAPACITY = 4;
protected HashMap _pools = null;
protected KeyedPoolableObjectFactory _factory = null;
protected int _maxSleeping = DEFAULT_MAX_SLEEPING;
protected int _initSleepingCapacity = DEFAULT_INIT_SLEEPING_CAPACITY;
protected int _totActive = 0;
protected int _totIdle = 0;
protected HashMap _activeCount = null;
","public synchronized void clear() {
Iterator it = _pools.keySet().iterator();
while (it.hasNext()) {
Object key = it.next();
Stack stack = (Stack) (_pools.get(key));
destroyStack(key, stack);
}
_totIdle = 0;
_pools.clear();
_activeCount.clear();
}","public synchronized void clear() {
Iterator iteratorVar1 = iteratorLiteral2;
while (iteratorVar1.hasNext()) {
Object objectVar3 = objectLiteral4;
Stack stackVar5 = stackLiteral6;
destroyStack(objectVar3, stackVar5);
}
_totIdle = 0;
_pools.clear();
_activeCount.clear();
}"
17579,PERFORMANCE,WMI_WRONG_MAP_ITERATOR,FP,pool,1444,"Stack stack = (Stack)(_pools.get(key));
","public synchronized void clear() {
Iterator it = _pools.keySet().iterator();
while (it.hasNext()) {
Object key = it.next();
Stack stack = (Stack) (_pools.get(key));
destroyStack(key, stack);
}
_totIdle = 0;
_pools.clear();
_activeCount.clear();
}","public synchronized void clear() {
Iterator iteratorVar1 = iteratorLiteral2;
while (iteratorVar1.hasNext()) {
Object objectVar3 = objectLiteral4;
Stack stackVar5 = stackLiteral6;
destroyStack(objectVar3, stackVar5);
}
_totIdle = 0;
_pools.clear();
_activeCount.clear();
}"
17587,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1452,"} catch (Exception e) {
","@Override
public void invalidateObject(final T obj) {
try {
pool.invalidateObject(obj);
} catch (Exception e) {
}
}","@Override
public void invalidateObject(final T obj) {
try {
pool.invalidateObject(obj);
} catch (Exception e) {
}
}"
17593,DODGY_CODE,UCF_USELESS_CONTROL_FLOW,FP,pool,1458,"if (!idleQueue.offerFirst(this)) {
","@Override
public synchronized boolean endEvictionTest(Deque<PooledObject<T>> idleQueue) {
if (state == PooledObjectState.EVICTION) {
state = PooledObjectState.IDLE;
return true;
} else if (state == PooledObjectState.EVICTION_RETURN_TO_HEAD) {
state = PooledObjectState.IDLE;
if (!idleQueue.offerFirst(this)) {
}
}
return false;
}","@Override
public synchronized boolean endEvictionTest(Deque<PooledObject<T>> idleQueue) {
if (state == PooledObjectState.EVICTION) {
state = PooledObjectState.IDLE;
return true;
} else if (state == PooledObjectState.EVICTION_RETURN_TO_HEAD) {
state = PooledObjectState.IDLE;
if (!idleQueue.offerFirst(this)) {
}
}
return false;
}"
17594,Multithreaded correctness,VO_VOLATILE_INCREMENT,FP,pool,1459,"borrowedCount++;
","@Override
public synchronized boolean allocate() {
if (state == PooledObjectState.IDLE) {
state = PooledObjectState.ALLOCATED;
lastBorrowTime = System.currentTimeMillis();
lastUseTime = lastBorrowTime;
borrowedCount++;
if (logAbandoned) {
borrowedBy = new AbandonedObjectCreatedException();
}
return true;
} else if (state == PooledObjectState.EVICTION) {
state = PooledObjectState.EVICTION_RETURN_TO_HEAD;
return false;
}
return false;
}","@Override
public synchronized boolean allocate() {
if (state == PooledObjectState.IDLE) {
state = PooledObjectState.ALLOCATED;
lastBorrowTime = System.currentTimeMillis();
lastUseTime = lastBorrowTime;
borrowedCount++;
if (logAbandoned) {
borrowedBy = new AbandonedObjectCreatedException();
}
return true;
} else if (state == PooledObjectState.EVICTION) {
state = PooledObjectState.EVICTION_RETURN_TO_HEAD;
return false;
}
return false;
}"
17602,PERFORMANCE,WMI_WRONG_MAP_ITERATOR,FP,pool,1467,"ObjectDeque<T> queue = poolMap.get(key);
","@Override
public Map<String, List<DefaultPooledObjectInfo>> listAllObjects() {
Map<String, List<DefaultPooledObjectInfo>> result = new HashMap<String, List<DefaultPooledObjectInfo>>();
for (K key : poolMap.keySet()) {
ObjectDeque<T> queue = poolMap.get(key);
if (queue != null) {
List<DefaultPooledObjectInfo> list = new ArrayList<DefaultPooledObjectInfo>();
result.put(key.toString(), list);
for (PooledObject<T> p : queue.getAllObjects().values()) {
list.add(new DefaultPooledObjectInfo(p));
}
}
}
return result;
}","@Override
public Map<String, List<DefaultPooledObjectInfo>> listAllObjects() {
Map<String, List<DefaultPooledObjectInfo>> map<string,list<defaultpooledobjectinfo>>Var1 = map<string,list<defaultpooledobjectinfo>>Literal2;
for (K kVar3 : poolMap.keySet()) {
ObjectDeque<T> objectdeque<t>Var4 = objectdeque<t>Literal5;
if (objectdeque<t>Var4 != null) {
List<DefaultPooledObjectInfo> list<defaultpooledobjectinfo>Var6 = list<defaultpooledobjectinfo>Literal7;
map<string,list<defaultpooledobjectinfo>>Var1.put(kVar3.toString(), list<defaultpooledobjectinfo>Var6);
for (PooledObject<T> pooledobject<t>Var8 : objectdeque<t>Var4.getAllObjects().values()) {
list<defaultpooledobjectinfo>Var6.add(new DefaultPooledObjectInfo(pooledobject<t>Var8));
}
}
}
return map<string,list<defaultpooledobjectinfo>>Var1;
}"
17604,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1469,"} catch (Exception e1) {
","public T borrowObject(long borrowMaxWaitMillis) throws Exception {
assertOpen();
AbandonedConfig ac = this.abandonedConfig;
if (ac != null && ac.getRemoveAbandonedOnBorrow() && (getNumIdle() < 2) && (getNumActive() > getMaxTotal() - 3)) {
removeAbandoned(ac);
}
PooledObject<T> p = null;
boolean blockWhenExhausted = getBlockWhenExhausted();
boolean create;
long waitTime = System.currentTimeMillis();
while (p == null) {
create = false;
if (blockWhenExhausted) {
p = idleObjects.pollFirst();
if (p == null) {
p = create();
if (p != null) {
create = true;
}
}
if (p == null) {
if (borrowMaxWaitMillis < 0) {
p = idleObjects.takeFirst();
} else {
p = idleObjects.pollFirst(borrowMaxWaitMillis, TimeUnit.MILLISECONDS);
}
}
if (p == null) {
throw new NoSuchElementException(""Timeout waiting for idle object"");
}
if (!p.allocate()) {
p = null;
}
} else {
p = idleObjects.pollFirst();
if (p == null) {
p = create();
if (p != null) {
create = true;
}
}
if (p == null) {
throw new NoSuchElementException(""Pool exhausted"");
}
if (!p.allocate()) {
p = null;
}
}
if (p != null) {
try {
factory.activateObject(p);
} catch (Exception e) {
try {
destroy(p);
} catch (Exception e1) {
}
p = null;
if (create) {
NoSuchElementException nsee = new NoSuchElementException(""Unable to activate object"");
nsee.initCause(e);
throw nsee;
}
}
if (p != null && (getTestOnBorrow() || create && getTestOnCreate())) {
boolean validate = false;
Throwable validationThrowable = null;
try {
validate = factory.validateObject(p);
} catch (Throwable t) {
PoolUtils.checkRethrow(t);
validationThrowable = t;
}
if (!validate) {
try {
destroy(p);
destroyedByBorrowValidationCount.incrementAndGet();
} catch (Exception e) {
}
p = null;
if (create) {
NoSuchElementException nsee = new NoSuchElementException(""Unable to validate object"");
nsee.initCause(validationThrowable);
throw nsee;
}
}
}
}
}
updateStatsBorrow(p, System.currentTimeMillis() - waitTime);
return p.getObject();
}","public T borrowObject(long borrowMaxWaitMillis) throws Exception {
assertOpen();
AbandonedConfig abandonedconfigVar1 = abandonedconfigLiteral2;
if (abandonedconfigVar1 != null && abandonedconfigVar1.getRemoveAbandonedOnBorrow() && (getNumIdle() < 2) && (getNumActive() > getMaxTotal() - 3)) {
removeAbandoned(abandonedconfigVar1);
}
PooledObject<T> pooledobject<t>Var3 = pooledobject<t>Literal4;
boolean booleanVar5 = booleanLiteral6;
boolean booleanVar7;
long longVar8 = longLiteral9;
while (pooledobject<t>Var3 == null) {
booleanVar7 = false;
if (booleanVar5) {
pooledobject<t>Var3 = idleObjects.pollFirst();
if (pooledobject<t>Var3 == null) {
pooledobject<t>Var3 = create();
if (pooledobject<t>Var3 != null) {
booleanVar7 = true;
}
}
if (pooledobject<t>Var3 == null) {
if (borrowMaxWaitMillis < 0) {
pooledobject<t>Var3 = idleObjects.takeFirst();
} else {
pooledobject<t>Var3 = idleObjects.pollFirst(borrowMaxWaitMillis, TimeUnit.MILLISECONDS);
}
}
if (pooledobject<t>Var3 == null) {
throw new NoSuchElementException(""Timeout waiting for idle object"");
}
if (!pooledobject<t>Var3.allocate()) {
pooledobject<t>Var3 = null;
}
} else {
pooledobject<t>Var3 = idleObjects.pollFirst();
if (pooledobject<t>Var3 == null) {
pooledobject<t>Var3 = create();
if (pooledobject<t>Var3 != null) {
booleanVar7 = true;
}
}
if (pooledobject<t>Var3 == null) {
throw new NoSuchElementException(""Pool exhausted"");
}
if (!pooledobject<t>Var3.allocate()) {
pooledobject<t>Var3 = null;
}
}
if (pooledobject<t>Var3 != null) {
try {
factory.activateObject(pooledobject<t>Var3);
} catch (Exception e) {
try {
destroy(pooledobject<t>Var3);
} catch (Exception e1) {
}
pooledobject<t>Var3 = null;
if (booleanVar7) {
NoSuchElementException nosuchelementexceptionVar10 = nosuchelementexceptionLiteral11;
nosuchelementexceptionVar10.initCause(e);
throw nosuchelementexceptionVar10;
}
}
if (pooledobject<t>Var3 != null && (getTestOnBorrow() || booleanVar7 && getTestOnCreate())) {
boolean booleanVar12 = booleanLiteral13;
Throwable throwableVar14 = pooledobject<t>Literal4;
try {
booleanVar12 = factory.validateObject(pooledobject<t>Var3);
} catch (Throwable t) {
PoolUtils.checkRethrow(t);
throwableVar14 = t;
}
if (!booleanVar12) {
try {
destroy(pooledobject<t>Var3);
destroyedByBorrowValidationCount.incrementAndGet();
} catch (Exception e) {
}
pooledobject<t>Var3 = null;
if (booleanVar7) {
NoSuchElementException nosuchelementexceptionVar10 = nosuchelementexceptionLiteral15;
nosuchelementexceptionVar10.initCause(throwableVar14);
throw nosuchelementexceptionVar10;
}
}
}
}
}
updateStatsBorrow(pooledobject<t>Var3, System.currentTimeMillis() - longVar8);
return pooledobject<t>Var3.getObject();
}"
17607,DODGY_CODE,REC_CATCH_EXCEPTION,FP,pool,1472,"} catch (Exception e) {
","@Override
public void run() {
boolean success = false;
try {
if (keyedPool.getNumIdle(key) < minIdle) {
keyedPool.addObject(key);
}
success = true;
} catch (Exception e) {
cancel();
} finally {
if (!success) {
cancel();
}
}
}","@Override
public void run() {
boolean booleanVar1 = booleanLiteral2;
try {
if (keyedPool.getNumIdle(key) < minIdle) {
keyedPool.addObject(key);
}
booleanVar1 = true;
} catch (Exception e) {
cancel();
} finally {
if (!booleanVar1) {
cancel();
}
}
}"
17619,PERFORMANCE,WMI_WRONG_MAP_ITERATOR,FP,pool,1484,"ObjectDeque<T> queue = poolMap.get(key);
","@Override
public Map<String, List<DefaultPooledObjectInfo>> listAllObjects() {
Map<String, List<DefaultPooledObjectInfo>> result = new HashMap<String, List<DefaultPooledObjectInfo>>();
for (K key : poolMap.keySet()) {
ObjectDeque<T> queue = poolMap.get(key);
if (queue != null) {
List<DefaultPooledObjectInfo> list = new ArrayList<DefaultPooledObjectInfo>();
result.put(key.toString(), list);
for (PooledObject<T> p : queue.getAllObjects().values()) {
list.add(new DefaultPooledObjectInfo(p));
}
}
}
return result;
}","@Override
public Map<String, List<DefaultPooledObjectInfo>> listAllObjects() {
Map<String, List<DefaultPooledObjectInfo>> map<string,list<defaultpooledobjectinfo>>Var1 = map<string,list<defaultpooledobjectinfo>>Literal2;
for (K kVar3 : poolMap.keySet()) {
ObjectDeque<T> objectdeque<t>Var4 = objectdeque<t>Literal5;
if (objectdeque<t>Var4 != null) {
List<DefaultPooledObjectInfo> list<defaultpooledobjectinfo>Var6 = list<defaultpooledobjectinfo>Literal7;
map<string,list<defaultpooledobjectinfo>>Var1.put(kVar3.toString(), list<defaultpooledobjectinfo>Var6);
for (PooledObject<T> pooledobject<t>Var8 : objectdeque<t>Var4.getAllObjects().values()) {
list<defaultpooledobjectinfo>Var6.add(new DefaultPooledObjectInfo(pooledobject<t>Var8));
}
}
}
return map<string,list<defaultpooledobjectinfo>>Var1;
}"
17642,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1507,"} catch (Exception e) {
","public void returnObject(final Object key, final Object obj) {
try {
pool.returnObject(obj);
} catch (Exception e) {
}
}","public void returnObject(final Object key, final Object obj) {
try {
pool.returnObject(obj);
} catch (Exception e) {
}
}"
17648,DODGY_CODE,REC_CATCH_EXCEPTION,FP,pool,1513,"} catch (Exception e) {
","public void run() {
boolean success = false;
try {
if (keyedPool.getNumIdle(key) < minIdle) {
keyedPool.addObject(key);
}
success = true;
} catch (Exception e) {
cancel();
} finally {
if (!success) {
cancel();
}
}
}","public void run() {
boolean booleanVar1 = booleanLiteral2;
try {
if (keyedPool.getNumIdle(key) < minIdle) {
keyedPool.addObject(key);
}
booleanVar1 = true;
} catch (Exception e) {
cancel();
} finally {
if (!booleanVar1) {
cancel();
}
}
}"
17654,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1519,"} catch(Exception e) {
","private void addObjectToPool(Object key, Object obj, boolean decrementNumActive) throws Exception {
boolean success = true;
if (_testOnReturn && !_factory.validateObject(key, obj)) {
success = false;
} else {
_factory.passivateObject(key, obj);
}
boolean shouldDestroy = !success;
ObjectQueue pool;
synchronized (this) {
pool = (ObjectQueue) (_poolMap.get(key));
if (null == pool) {
pool = new ObjectQueue();
_poolMap.put(key, pool);
_poolList.add(key);
}
if (isClosed()) {
shouldDestroy = true;
} else {
if (_maxIdle >= 0 && (pool.queue.size() >= _maxIdle)) {
shouldDestroy = true;
} else if (success) {
if (_lifo) {
pool.queue.addFirst(new ObjectTimestampPair(obj));
} else {
pool.queue.addLast(new ObjectTimestampPair(obj));
}
_totalIdle++;
if (decrementNumActive) {
pool.decrementActiveCount();
}
allocate();
}
}
}
if (shouldDestroy) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e) {
}
if (decrementNumActive) {
synchronized (this) {
pool.decrementActiveCount();
allocate();
}
}
}
}","private void addObjectToPool(Object key, Object obj, boolean decrementNumActive) throws Exception {
boolean booleanVar1 = booleanLiteral2;
if (_testOnReturn && !_factory.validateObject(key, obj)) {
booleanVar1 = false;
} else {
_factory.passivateObject(key, obj);
}
boolean booleanVar3 = booleanLiteral4;
ObjectQueue objectqueueVar5;
synchronized (this) {
objectqueueVar5 = (ObjectQueue) (_poolMap.get(key));
if (null == objectqueueVar5) {
objectqueueVar5 = new ObjectQueue();
_poolMap.put(key, objectqueueVar5);
_poolList.add(key);
}
if (isClosed()) {
booleanVar3 = true;
} else {
if (_maxIdle >= 0 && (objectqueueVar5.queue.size() >= _maxIdle)) {
booleanVar3 = true;
} else if (booleanVar1) {
if (_lifo) {
objectqueueVar5.queue.addFirst(new ObjectTimestampPair(obj));
} else {
objectqueueVar5.queue.addLast(new ObjectTimestampPair(obj));
}
_totalIdle++;
if (decrementNumActive) {
objectqueueVar5.decrementActiveCount();
}
allocate();
}
}
}
if (booleanVar3) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e) {
}
if (decrementNumActive) {
synchronized (this) {
objectqueueVar5.decrementActiveCount();
allocate();
}
}
}
}"
17658,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1523,"} catch(Exception e) {
","public void run() {
try {
evict();
} catch (Exception e) {
} catch (OutOfMemoryError oome) {
oome.printStackTrace(System.err);
}
try {
ensureMinIdle();
} catch (Exception e) {
}
}","public void run() {
try {
evict();
} catch (Exception e) {
} catch (OutOfMemoryError oome) {
oome.printStackTrace(System.err);
}
try {
ensureMinIdle();
} catch (Exception e) {
}
}"
17664,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1529,"} catch (Exception e2) {
","public void returnObject(Object key, Object obj) throws Exception {
try {
addObjectToPool(key, obj, true);
} catch (Exception e) {
if (_factory != null) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e2) {
}
// TODO: Correctness here depends on control in addObjectToPool.
ObjectQueue pool = (ObjectQueue) (_poolMap.get(key));
if (pool != null) {
synchronized (this) {
pool.decrementActiveCount();
allocate();
}
}
}
}
}","public void returnObject(Object key, Object obj) throws Exception {
try {
addObjectToPool(key, obj, true);
} catch (Exception e) {
if (_factory != null) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e2) {
}
// TODO: Correctness here depends on control in addObjectToPool.
ObjectQueue objectqueueVar1 = objectqueueLiteral2;
if (objectqueueVar1 != null) {
synchronized (this) {
objectqueueVar1.decrementActiveCount();
allocate();
}
}
}
}
}"
17678,DODGY_CODE,RI_REDUNDANT_INTERFACES,FP,pool,1543,"this((KeyedPoolableObjectFactory)null,DEFAULT_MAX_SLEEPING,DEFAULT_INIT_SLEEPING_CAPACITY);
}
public StackKeyedObjectPool(int max) {
this((KeyedPoolableObjectFactory)null,max,DEFAULT_INIT_SLEEPING_CAPACITY);
}
public StackKeyedObjectPool(int max, int init) {
this((KeyedPoolableObjectFactory)null,max,init);
}
public StackKeyedObjectPool(KeyedPoolableObjectFactory factory) {
this(factory,DEFAULT_MAX_SLEEPING);
}
public StackKeyedObjectPool(KeyedPoolableObjectFactory factory, int max) {
this(factory,max,DEFAULT_INIT_SLEEPING_CAPACITY);
}
public StackKeyedObjectPool(KeyedPoolableObjectFactory factory, int max, int init) {
_factory = factory;
_maxSleeping = (max < 0 ? DEFAULT_MAX_SLEEPING : max);
_initSleepingCapacity = (init < 1 ? DEFAULT_INIT_SLEEPING_CAPACITY : init);
_pools = new HashMap();
_activeCount = new HashMap();
}
public synchronized Object borrowObject(Object key) throws Exception {
assertOpen();
Stack stack = (Stack)(_pools.get(key));
if(null == stack) {
stack = new Stack();
stack.ensureCapacity( _initSleepingCapacity > _maxSleeping ? _maxSleeping : _initSleepingCapacity);
_pools.put(key,stack);
}
Object obj = null;
do {
boolean newlyMade = false;
if (!stack.empty()) {
obj = stack.pop();
_totIdle--;
} else {
if(null == _factory) {
throw new NoSuchElementException(""pools without a factory cannot create new objects as needed."");
} else {
obj = _factory.makeObject(key);
newlyMade = true;
}
}
if (null != _factory && null != obj) {
try {
_factory.activateObject(key, obj);
if (!_factory.validateObject(key, obj)) {
throw new Exception(""ValidateObject failed"");
}
} catch (Throwable t) {
try {
_factory.destroyObject(key,obj);
} catch (Throwable t2) {
} finally {
obj = null;
}
if (newlyMade) {
throw new NoSuchElementException(
""Could not create a validated object, cause: "" +
t.getMessage());
}
}
}
} while (obj == null);
incrementActiveCount(key);
return obj;
}
public synchronized void returnObject(Object key, Object obj) throws Exception {
decrementActiveCount(key);
if (null != _factory) {
if (_factory.validateObject(key, obj)) {
try {
_factory.passivateObject(key, obj);
} catch (Exception ex) {
_factory.destroyObject(key, obj);
return;
}
} else {
return;
}
}
if (isClosed()) {
if (null != _factory) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e) {
}
}
return;
}
Stack stack = (Stack)_pools.get(key);
if(null == stack) {
stack = new Stack();
stack.ensureCapacity( _initSleepingCapacity > _maxSleeping ? _maxSleeping : _initSleepingCapacity);
_pools.put(key,stack);
}
final int stackSize = stack.size();
if (stackSize >= _maxSleeping) {
final Object staleObj;
if (stackSize > 0) {
staleObj = stack.remove(0);
_totIdle--;
} else {
staleObj = obj;
}
if(null != _factory) {
try {
_factory.destroyObject(key, staleObj);
} catch (Exception e) {
}
}
}
stack.push(obj);
_totIdle++;
}
public synchronized void invalidateObject(Object key, Object obj) throws Exception {
decrementActiveCount(key);
if(null != _factory) {
_factory.destroyObject(key,obj);
}
notifyAll(); 
}
public synchronized void addObject(Object key) throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
Object obj = _factory.makeObject(key);
try {
if (!_factory.validateObject(key, obj)) {
return;
}
} catch (Exception e) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e2) {
}
return;
}
_factory.passivateObject(key, obj);
Stack stack = (Stack)_pools.get(key);
if(null == stack) {
stack = new Stack();
stack.ensureCapacity( _initSleepingCapacity > _maxSleeping ? _maxSleeping : _initSleepingCapacity);
_pools.put(key,stack);
}
final int stackSize = stack.size();
if (stackSize >= _maxSleeping) {
final Object staleObj;
if (stackSize > 0) {
staleObj = stack.remove(0);
_totIdle--;
} else {
staleObj = obj;
}
try {
_factory.destroyObject(key, staleObj);
} catch (Exception e) {
if (obj == staleObj) {
throw e;
}
}
} else {
stack.push(obj);
_totIdle++;
}
}
public synchronized int getNumIdle() {
return _totIdle;
}
public synchronized int getNumActive() {
return _totActive;
}
public synchronized int getNumActive(Object key) {
return getActiveCount(key);
}
public synchronized int getNumIdle(Object key) {
try {
return((Stack)(_pools.get(key))).size();
} catch(Exception e) {
return 0;
}
}
public synchronized void clear() {
Iterator it = _pools.keySet().iterator();
while(it.hasNext()) {
Object key = it.next();
Stack stack = (Stack)(_pools.get(key));
destroyStack(key,stack);
}
_totIdle = 0;
_pools.clear();
_activeCount.clear();
}
public synchronized void clear(Object key) {
Stack stack = (Stack)(_pools.remove(key));
destroyStack(key,stack);
}
private synchronized void destroyStack(Object key, Stack stack) {
if(null == stack) {
return;
} else {
if(null != _factory) {
Iterator it = stack.iterator();
while(it.hasNext()) {
try {
_factory.destroyObject(key,it.next());
} catch(Exception e) {
}
}
}
_totIdle -= stack.size();
_activeCount.remove(key);
stack.clear();
}
}
public synchronized String toString() {
StringBuffer buf = new StringBuffer();
buf.append(getClass().getName());
buf.append("" contains "").append(_pools.size()).append("" distinct pools: "");
Iterator it = _pools.keySet().iterator();
while(it.hasNext()) {
Object key = it.next();
buf.append("" |"").append(key).append(""|="");
Stack s = (Stack)(_pools.get(key));
buf.append(s.size());
}
return buf.toString();
}
public void close() throws Exception {
super.close();
clear();
}
public synchronized void setFactory(KeyedPoolableObjectFactory factory) throws IllegalStateException {
if(0 < getNumActive()) {
throw new IllegalStateException(""Objects are already active"");
} else {
clear();
_factory = factory;
}
}
private int getActiveCount(Object key) {
try {
return ((Integer)_activeCount.get(key)).intValue();
} catch(NoSuchElementException e) {
return 0;
} catch(NullPointerException e) {
return 0;
}
}
private void incrementActiveCount(Object key) {
_totActive++;
Integer old = (Integer)(_activeCount.get(key));
if(null == old) {
_activeCount.put(key,new Integer(1));
} else {
_activeCount.put(key,new Integer(old.intValue() + 1));
}
}
private void decrementActiveCount(Object key) {
_totActive--;
Integer active = (Integer)(_activeCount.get(key));
if(null == active) {
} else if(active.intValue() <= 1) {
_activeCount.remove(key);
} else {
_activeCount.put(key, new Integer(active.intValue() - 1));
}
}
protected static final int DEFAULT_MAX_SLEEPING  = 8;
protected static final int DEFAULT_INIT_SLEEPING_CAPACITY = 4;
protected HashMap _pools = null;
protected KeyedPoolableObjectFactory _factory = null;
protected int _maxSleeping = DEFAULT_MAX_SLEEPING;
protected int _initSleepingCapacity = DEFAULT_INIT_SLEEPING_CAPACITY;
protected int _totActive = 0;
protected int _totIdle = 0;
protected HashMap _activeCount = null;
","public synchronized void addObject(Object key) throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
Object obj = _factory.makeObject(key);
try {
if (!_factory.validateObject(key, obj)) {
return;
}
} catch (Exception e) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e2) {
}
return;
}
_factory.passivateObject(key, obj);
Stack stack = (Stack) _pools.get(key);
if (null == stack) {
stack = new Stack();
stack.ensureCapacity(_initSleepingCapacity > _maxSleeping ? _maxSleeping : _initSleepingCapacity);
_pools.put(key, stack);
}
final int stackSize = stack.size();
if (stackSize >= _maxSleeping) {
final Object staleObj;
if (stackSize > 0) {
staleObj = stack.remove(0);
_totIdle--;
} else {
staleObj = obj;
}
try {
_factory.destroyObject(key, staleObj);
} catch (Exception e) {
if (obj == staleObj) {
throw e;
}
}
} else {
stack.push(obj);
_totIdle++;
}
}","public synchronized void addObject(Object key) throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
Object objectVar1 = objectLiteral2;
try {
if (!_factory.validateObject(key, objectVar1)) {
return;
}
} catch (Exception e) {
try {
_factory.destroyObject(key, objectVar1);
} catch (Exception e2) {
}
return;
}
_factory.passivateObject(key, objectVar1);
Stack stackVar3 = stackLiteral4;
if (null == stackVar3) {
stackVar3 = new Stack();
stackVar3.ensureCapacity(_initSleepingCapacity > _maxSleeping ? _maxSleeping : _initSleepingCapacity);
_pools.put(key, stackVar3);
}
final int intVar5 = intLiteral6;
if (intVar5 >= _maxSleeping) {
final Object objectVar7;
if (intVar5 > 0) {
objectVar7 = stackVar3.remove(0);
_totIdle--;
} else {
objectVar7 = objectVar1;
}
try {
_factory.destroyObject(key, objectVar7);
} catch (Exception e) {
if (objectVar1 == objectVar7) {
throw e;
}
}
} else {
stackVar3.push(objectVar1);
_totIdle++;
}
}"
17679,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1544,"} catch (Exception e2) {
","public synchronized void addObject(Object key) throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
Object obj = _factory.makeObject(key);
try {
if (!_factory.validateObject(key, obj)) {
return;
}
} catch (Exception e) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e2) {
}
return;
}
_factory.passivateObject(key, obj);
Stack stack = (Stack) _pools.get(key);
if (null == stack) {
stack = new Stack();
stack.ensureCapacity(_initSleepingCapacity > _maxSleeping ? _maxSleeping : _initSleepingCapacity);
_pools.put(key, stack);
}
final int stackSize = stack.size();
if (stackSize >= _maxSleeping) {
final Object staleObj;
if (stackSize > 0) {
staleObj = stack.remove(0);
_totIdle--;
} else {
staleObj = obj;
}
try {
_factory.destroyObject(key, staleObj);
} catch (Exception e) {
if (obj == staleObj) {
throw e;
}
}
} else {
stack.push(obj);
_totIdle++;
}
}","public synchronized void addObject(Object key) throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
Object objectVar1 = objectLiteral2;
try {
if (!_factory.validateObject(key, objectVar1)) {
return;
}
} catch (Exception e) {
try {
_factory.destroyObject(key, objectVar1);
} catch (Exception e2) {
}
return;
}
_factory.passivateObject(key, objectVar1);
Stack stackVar3 = stackLiteral4;
if (null == stackVar3) {
stackVar3 = new Stack();
stackVar3.ensureCapacity(_initSleepingCapacity > _maxSleeping ? _maxSleeping : _initSleepingCapacity);
_pools.put(key, stackVar3);
}
final int intVar5 = intLiteral6;
if (intVar5 >= _maxSleeping) {
final Object objectVar7;
if (intVar5 > 0) {
objectVar7 = stackVar3.remove(0);
_totIdle--;
} else {
objectVar7 = objectVar1;
}
try {
_factory.destroyObject(key, objectVar7);
} catch (Exception e) {
if (objectVar1 == objectVar7) {
throw e;
}
}
} else {
stackVar3.push(objectVar1);
_totIdle++;
}
}"
17683,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1548,"} catch(Exception e) {
","public synchronized void clear() {
if (null != _factory) {
Iterator it = _pool.iterator();
while (it.hasNext()) {
try {
_factory.destroyObject(it.next());
} catch (Exception e) {
}
}
}
_pool.clear();
}","public synchronized void clear() {
if (null != _factory) {
Iterator iteratorVar1 = iteratorLiteral2;
while (iteratorVar1.hasNext()) {
try {
_factory.destroyObject(iteratorVar1.next());
} catch (Exception e) {
}
}
}
_pool.clear();
}"
17684,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1549,"} catch(Exception e) {
","public synchronized void returnObject(Object obj) throws Exception {
boolean success = !isClosed();
if (null != _factory) {
if (!_factory.validateObject(obj)) {
success = false;
} else {
try {
_factory.passivateObject(obj);
} catch (Exception e) {
success = false;
}
}
}
boolean shouldDestroy = !success;
_numActive--;
if (success) {
Object toBeDestroyed = null;
if (_pool.size() >= _maxSleeping) {
shouldDestroy = true;
toBeDestroyed = _pool.remove(0);
}
_pool.push(obj);
obj = toBeDestroyed;
}
notifyAll();
if (shouldDestroy) {
try {
_factory.destroyObject(obj);
} catch (Exception e) {
}
}
}","public synchronized void returnObject(Object obj) throws Exception {
boolean booleanVar1 = booleanLiteral2;
if (null != _factory) {
if (!_factory.validateObject(obj)) {
booleanVar1 = false;
} else {
try {
_factory.passivateObject(obj);
} catch (Exception e) {
booleanVar1 = false;
}
}
}
boolean booleanVar3 = booleanLiteral4;
_numActive--;
if (booleanVar1) {
Object objectVar5 = objectLiteral6;
if (_pool.size() >= _maxSleeping) {
booleanVar3 = true;
objectVar5 = _pool.remove(0);
}
_pool.push(obj);
obj = objectVar5;
}
notifyAll();
if (booleanVar3) {
try {
_factory.destroyObject(obj);
} catch (Exception e) {
}
}
}"
17696,DODGY_CODE,UCF_USELESS_CONTROL_FLOW,FP,pool,1561,"if (!idleQueue.offerFirst(this)) {
","@Override
public synchronized boolean endEvictionTest(Deque<PooledObject<T>> idleQueue) {
if (state == PooledObjectState.EVICTION) {
state = PooledObjectState.IDLE;
return true;
} else if (state == PooledObjectState.EVICTION_RETURN_TO_HEAD) {
state = PooledObjectState.IDLE;
if (!idleQueue.offerFirst(this)) {
}
}
return false;
}","@Override
public synchronized boolean endEvictionTest(Deque<PooledObject<T>> idleQueue) {
if (state == PooledObjectState.EVICTION) {
state = PooledObjectState.IDLE;
return true;
} else if (state == PooledObjectState.EVICTION_RETURN_TO_HEAD) {
state = PooledObjectState.IDLE;
if (!idleQueue.offerFirst(this)) {
}
}
return false;
}"
17708,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1573,"} catch (Exception e) {
","public void close() {
try {
keyedPool.close();
} catch (Exception e) {
}
}","public void close() {
try {
keyedPool.close();
} catch (Exception e) {
}
}"
17717,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1582,"} catch (Exception e) {
","public void close() {
try {
pool.close();
} catch (Exception e) {
}
}","public void close() {
try {
pool.close();
} catch (Exception e) {
}
}"
17719,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1584,"} catch (Exception e) {
","public void invalidateObject(final Object obj) {
synchronized (lock) {
try {
pool.invalidateObject(obj);
} catch (Exception e) {
}
}
}","public void invalidateObject(final Object obj) {
synchronized (lock) {
try {
pool.invalidateObject(obj);
} catch (Exception e) {
}
}
}"
17722,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1587,"} catch (Exception e) {
","public void invalidateObject(final Object obj) {
try {
pool.invalidateObject(obj);
} catch (Exception e) {
}
}","public void invalidateObject(final Object obj) {
try {
pool.invalidateObject(obj);
} catch (Exception e) {
}
}"
17723,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1588,"} catch (Exception e) {
","public void invalidateObject(final Object key, final Object obj) {
synchronized (lock) {
try {
keyedPool.invalidateObject(key, obj);
} catch (Exception e) {
}
}
}","public void invalidateObject(final Object key, final Object obj) {
synchronized (lock) {
try {
keyedPool.invalidateObject(key, obj);
} catch (Exception e) {
}
}
}"
17724,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1589,"} catch (Exception e) {
","public void invalidateObject(final Object key, final Object obj) {
if (type.isInstance(obj)) {
try {
keyedPool.invalidateObject(key, obj);
} catch (Exception e) {
}
} else {
throw new ClassCastException(""Invalidated object for key: "" + key + "" is not of type: "" + type.getName() + "" was: "" + obj);
}
}","public void invalidateObject(final Object key, final Object obj) {
if (type.isInstance(obj)) {
try {
keyedPool.invalidateObject(key, obj);
} catch (Exception e) {
}
} else {
throw new ClassCastException(""Invalidated object for key: "" + key + "" is not of type: "" + type.getName() + "" was: "" + obj);
}
}"
17725,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1590,"} catch (Exception e) {
","public void returnObject(final Object key, final Object obj) {
if (type.isInstance(obj)) {
try {
keyedPool.returnObject(key, obj);
} catch (Exception e) {
}
} else {
throw new ClassCastException(""Returned object for key: "" + key + "" is not of type: "" + type.getName() + "" was: "" + obj);
}
}","public void returnObject(final Object key, final Object obj) {
if (type.isInstance(obj)) {
try {
keyedPool.returnObject(key, obj);
} catch (Exception e) {
}
} else {
throw new ClassCastException(""Returned object for key: "" + key + "" is not of type: "" + type.getName() + "" was: "" + obj);
}
}"
17748,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1613,"} catch (Exception ex2) {
","public void addObject() throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
Object obj = _factory.makeObject();
try {
assertOpen();
addObjectToPool(obj, false);
} catch (IllegalStateException ex) {
try {
_factory.destroyObject(obj);
} catch (Exception ex2) {
}
throw ex;
}
}","public void addObject() throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
Object objectVar1 = objectLiteral2;
try {
assertOpen();
addObjectToPool(objectVar1, false);
} catch (IllegalStateException ex) {
try {
_factory.destroyObject(objectVar1);
} catch (Exception ex2) {
}
throw ex;
}
}"
17751,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1616,"} catch(Exception e) {
","private void addObjectToPool(Object obj, boolean decrementNumActive) throws Exception {
boolean success = true;
if (_testOnReturn && !(_factory.validateObject(obj))) {
success = false;
} else {
_factory.passivateObject(obj);
}
boolean shouldDestroy = !success;
synchronized (this) {
if (isClosed()) {
shouldDestroy = true;
} else {
if ((_maxIdle >= 0) && (_pool.size() >= _maxIdle)) {
shouldDestroy = true;
} else if (success) {
if (_lifo) {
_pool.addFirst(new ObjectTimestampPair(obj));
} else {
_pool.addLast(new ObjectTimestampPair(obj));
}
if (decrementNumActive) {
_numActive--;
}
allocate();
}
}
}
if (shouldDestroy) {
try {
_factory.destroyObject(obj);
} catch (Exception e) {
}
if (decrementNumActive) {
synchronized (this) {
_numActive--;
allocate();
}
}
}
}","private void addObjectToPool(Object obj, boolean decrementNumActive) throws Exception {
boolean booleanVar1 = booleanLiteral2;
if (_testOnReturn && !(_factory.validateObject(obj))) {
booleanVar1 = false;
} else {
_factory.passivateObject(obj);
}
boolean booleanVar3 = booleanLiteral4;
synchronized (this) {
if (isClosed()) {
booleanVar3 = true;
} else {
if ((_maxIdle >= 0) && (_pool.size() >= _maxIdle)) {
booleanVar3 = true;
} else if (booleanVar1) {
if (_lifo) {
_pool.addFirst(new ObjectTimestampPair(obj));
} else {
_pool.addLast(new ObjectTimestampPair(obj));
}
if (decrementNumActive) {
_numActive--;
}
allocate();
}
}
}
if (booleanVar3) {
try {
_factory.destroyObject(obj);
} catch (Exception e) {
}
if (decrementNumActive) {
synchronized (this) {
_numActive--;
allocate();
}
}
}
}"
17753,DODGY_CODE,RI_REDUNDANT_INTERFACES,FP,pool,1618,"public SoftReferenceObjectPool() {
_pool = new ArrayList();
_factory = null;
}
public SoftReferenceObjectPool(PoolableObjectFactory factory) {
_pool = new ArrayList();
_factory = factory;
}
public SoftReferenceObjectPool(PoolableObjectFactory factory, int initSize) throws Exception, IllegalArgumentException {
if (factory == null) {
throw new IllegalArgumentException(""factory required to prefill the pool."");
}
_pool = new ArrayList(initSize);
_factory = factory;
PoolUtils.prefill(this, initSize);
}
public synchronized Object borrowObject() throws Exception {
assertOpen();
Object obj = null;
boolean newlyCreated = false;
while(null == obj) {
if(_pool.isEmpty()) {
if(null == _factory) {
throw new NoSuchElementException();
} else {
newlyCreated = true;
obj = _factory.makeObject();
}
} else {
SoftReference ref = (SoftReference)(_pool.remove(_pool.size() - 1));
obj = ref.get();
ref.clear(); 
}
if (null != _factory && null != obj) {
try {
_factory.activateObject(obj);
if (!_factory.validateObject(obj)) {
throw new Exception(""ValidateObject failed"");
}
} catch (Throwable t) {
try {
_factory.destroyObject(obj);
} catch (Throwable t2) {
} finally {
obj = null;
}
if (newlyCreated) {
throw new NoSuchElementException(
""Could not create a validated object, cause: "" +
t.getMessage());
}
}
}
}
_numActive++;
return obj;
}
public synchronized void returnObject(Object obj) throws Exception {
boolean success = !isClosed();
if (_factory != null) {
if(!_factory.validateObject(obj)) {
success = false;
} else {
try {
_factory.passivateObject(obj);
} catch(Exception e) {
success = false;
}
}
}
boolean shouldDestroy = !success;
_numActive--;
if(success) {
_pool.add(new SoftReference(obj, refQueue));
}
notifyAll(); 
if (shouldDestroy && _factory != null) {
try {
_factory.destroyObject(obj);
} catch(Exception e) {
}
}
}
public synchronized void invalidateObject(Object obj) throws Exception {
_numActive--;
if (_factory != null) {
_factory.destroyObject(obj);
}
notifyAll(); 
}
public synchronized void addObject() throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
Object obj = _factory.makeObject();
boolean success = true;
if(!_factory.validateObject(obj)) {
success = false;
} else {
_factory.passivateObject(obj);
}
boolean shouldDestroy = !success;
if(success) {
_pool.add(new SoftReference(obj, refQueue));
notifyAll(); 
}
if(shouldDestroy) {
try {
_factory.destroyObject(obj);
} catch(Exception e) {
}
}
}
public synchronized int getNumIdle() {
pruneClearedReferences();
return _pool.size();
}
public synchronized int getNumActive() {
return _numActive;
}
public synchronized void clear() {
if(null != _factory) {
Iterator iter = _pool.iterator();
while(iter.hasNext()) {
try {
Object obj = ((SoftReference)iter.next()).get();
if(null != obj) {
_factory.destroyObject(obj);
}
} catch(Exception e) {
}
}
}
_pool.clear();
pruneClearedReferences();
}
public void close() throws Exception {
super.close();
clear();
}
public synchronized void setFactory(PoolableObjectFactory factory) throws IllegalStateException {
assertOpen();
if(0 < getNumActive()) {
throw new IllegalStateException(""Objects are already active"");
} else {
clear();
_factory = factory;
}
}
private void pruneClearedReferences() {
Reference ref;
while ((ref = refQueue.poll()) != null) {
try {
_pool.remove(ref);
} catch (UnsupportedOperationException uoe) {
}
}
}
private List _pool = null;
private PoolableObjectFactory _factory = null;
private final ReferenceQueue refQueue = new ReferenceQueue();
private int _numActive = 0;
","public synchronized void addObject() throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
Object obj = _factory.makeObject();
boolean success = true;
if (!_factory.validateObject(obj)) {
success = false;
} else {
_factory.passivateObject(obj);
}
boolean shouldDestroy = !success;
if (success) {
_pool.add(new SoftReference(obj, refQueue));
notifyAll();
}
if (shouldDestroy) {
try {
_factory.destroyObject(obj);
} catch (Exception e) {
}
}
}","public synchronized void addObject() throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
Object objectVar1 = objectLiteral2;
boolean booleanVar3 = booleanLiteral4;
if (!_factory.validateObject(objectVar1)) {
booleanVar3 = false;
} else {
_factory.passivateObject(objectVar1);
}
boolean booleanVar5 = booleanLiteral6;
if (booleanVar3) {
_pool.add(new SoftReference(objectVar1, refQueue));
notifyAll();
}
if (booleanVar5) {
try {
_factory.destroyObject(objectVar1);
} catch (Exception e) {
}
}
}"
17764,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1629,"} catch(Exception e) {
","public synchronized void addObject() throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
Object obj = _factory.makeObject();
boolean success = true;
if (!_factory.validateObject(obj)) {
success = false;
} else {
_factory.passivateObject(obj);
}
boolean shouldDestroy = !success;
if (success) {
Object toBeDestroyed = null;
if (_pool.size() >= _maxSleeping) {
shouldDestroy = true;
toBeDestroyed = _pool.remove(0);
}
_pool.push(obj);
obj = toBeDestroyed;
}
notifyAll();
if (shouldDestroy) {
try {
_factory.destroyObject(obj);
} catch (Exception e) {
}
}
}","public synchronized void addObject() throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
Object objectVar1 = objectLiteral2;
boolean booleanVar3 = booleanLiteral4;
if (!_factory.validateObject(objectVar1)) {
booleanVar3 = false;
} else {
_factory.passivateObject(objectVar1);
}
boolean booleanVar5 = booleanLiteral6;
if (booleanVar3) {
Object objectVar7 = objectLiteral8;
if (_pool.size() >= _maxSleeping) {
booleanVar5 = true;
objectVar7 = _pool.remove(0);
}
_pool.push(objectVar1);
objectVar1 = objectVar7;
}
notifyAll();
if (booleanVar5) {
try {
_factory.destroyObject(objectVar1);
} catch (Exception e) {
}
}
}"
17771,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1636,"} catch (Exception e) {
","public void returnObject(final Object key, final Object obj) {
try {
pool.returnObject(obj);
} catch (Exception e) {
}
}","public void returnObject(final Object key, final Object obj) {
try {
pool.returnObject(obj);
} catch (Exception e) {
}
}"
17782,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1647,"} catch (Exception e) {
","public void close() {
try {
pool.close();
} catch (Exception e) {
}
}","public void close() {
try {
pool.close();
} catch (Exception e) {
}
}"
17783,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1648,"} catch (Exception e) {
","public void invalidateObject(final Object obj) {
if (type.isInstance(obj)) {
try {
pool.invalidateObject(obj);
} catch (Exception e) {
}
} else {
throw new ClassCastException(""Invalidated object is not of type: "" + type.getName() + "" was: "" + obj);
}
}","public void invalidateObject(final Object obj) {
if (type.isInstance(obj)) {
try {
pool.invalidateObject(obj);
} catch (Exception e) {
}
} else {
throw new ClassCastException(""Invalidated object is not of type: "" + type.getName() + "" was: "" + obj);
}
}"
17790,DODGY_CODE,RI_REDUNDANT_INTERFACES,FP,pool,1655,"public class GenericKeyedObjectPool extends BaseKeyedObjectPool implements KeyedObjectPool {
public static final byte WHEN_EXHAUSTED_FAIL   = 0;
public static final byte WHEN_EXHAUSTED_BLOCK  = 1;
public static final byte WHEN_EXHAUSTED_GROW   = 2;
public static final int DEFAULT_MAX_IDLE  = 8;
public static final int DEFAULT_MAX_ACTIVE  = 8;
public static final int DEFAULT_MAX_TOTAL  = -1;
public static final byte DEFAULT_WHEN_EXHAUSTED_ACTION = WHEN_EXHAUSTED_BLOCK;
public static final long DEFAULT_MAX_WAIT = -1L;
public static final boolean DEFAULT_TEST_ON_BORROW = false;
public static final boolean DEFAULT_TEST_ON_RETURN = false;
public static final boolean DEFAULT_TEST_WHILE_IDLE = false;
public static final long DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS = -1L;
public static final int DEFAULT_NUM_TESTS_PER_EVICTION_RUN = 3;
public static final long DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS = 1000L * 60L * 30L;
public static final int DEFAULT_MIN_IDLE = 0;
public static final boolean DEFAULT_LIFO = true;
public GenericKeyedObjectPool() {
this(null, DEFAULT_MAX_ACTIVE, DEFAULT_WHEN_EXHAUSTED_ACTION, DEFAULT_MAX_WAIT, DEFAULT_MAX_IDLE,
DEFAULT_TEST_ON_BORROW, DEFAULT_TEST_ON_RETURN, DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS,
DEFAULT_NUM_TESTS_PER_EVICTION_RUN, DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS, DEFAULT_TEST_WHILE_IDLE);
}
public GenericKeyedObjectPool(KeyedPoolableObjectFactory factory) {
this(factory, DEFAULT_MAX_ACTIVE, DEFAULT_WHEN_EXHAUSTED_ACTION, DEFAULT_MAX_WAIT, DEFAULT_MAX_IDLE,
DEFAULT_TEST_ON_BORROW, DEFAULT_TEST_ON_RETURN, DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS,
DEFAULT_NUM_TESTS_PER_EVICTION_RUN, DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS, DEFAULT_TEST_WHILE_IDLE);
}
public GenericKeyedObjectPool(KeyedPoolableObjectFactory factory, GenericKeyedObjectPool.Config config) {
this(factory, config.maxActive, config.whenExhaustedAction, config.maxWait, config.maxIdle, config.maxTotal,
config.minIdle, config.testOnBorrow, config.testOnReturn, config.timeBetweenEvictionRunsMillis,
config.numTestsPerEvictionRun, config.minEvictableIdleTimeMillis, config.testWhileIdle, config.lifo);
}
public GenericKeyedObjectPool(KeyedPoolableObjectFactory factory, int maxActive) {
this(factory,maxActive, DEFAULT_WHEN_EXHAUSTED_ACTION, DEFAULT_MAX_WAIT, DEFAULT_MAX_IDLE,
DEFAULT_TEST_ON_BORROW, DEFAULT_TEST_ON_RETURN, DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS,
DEFAULT_NUM_TESTS_PER_EVICTION_RUN, DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS, DEFAULT_TEST_WHILE_IDLE);
}
public GenericKeyedObjectPool(KeyedPoolableObjectFactory factory, int maxActive, byte whenExhaustedAction,
long maxWait) {
this(factory, maxActive, whenExhaustedAction, maxWait, DEFAULT_MAX_IDLE, DEFAULT_TEST_ON_BORROW,
DEFAULT_TEST_ON_RETURN, DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS, DEFAULT_NUM_TESTS_PER_EVICTION_RUN,
DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS, DEFAULT_TEST_WHILE_IDLE);
}
public GenericKeyedObjectPool(KeyedPoolableObjectFactory factory, int maxActive, byte whenExhaustedAction,
long maxWait, boolean testOnBorrow, boolean testOnReturn) {
this(factory, maxActive, whenExhaustedAction, maxWait, DEFAULT_MAX_IDLE,testOnBorrow,testOnReturn,
DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS, DEFAULT_NUM_TESTS_PER_EVICTION_RUN,
DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS, DEFAULT_TEST_WHILE_IDLE);
}
public GenericKeyedObjectPool(KeyedPoolableObjectFactory factory, int maxActive, byte whenExhaustedAction,
long maxWait, int maxIdle) {
this(factory, maxActive, whenExhaustedAction, maxWait, maxIdle, DEFAULT_TEST_ON_BORROW, DEFAULT_TEST_ON_RETURN,
DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS, DEFAULT_NUM_TESTS_PER_EVICTION_RUN,
DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS, DEFAULT_TEST_WHILE_IDLE);
}
public GenericKeyedObjectPool(KeyedPoolableObjectFactory factory, int maxActive, byte whenExhaustedAction,
long maxWait, int maxIdle, boolean testOnBorrow, boolean testOnReturn) {
this(factory, maxActive, whenExhaustedAction, maxWait, maxIdle, testOnBorrow, testOnReturn,
DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS, DEFAULT_NUM_TESTS_PER_EVICTION_RUN,
DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS, DEFAULT_TEST_WHILE_IDLE);
}
public GenericKeyedObjectPool(KeyedPoolableObjectFactory factory, int maxActive, byte whenExhaustedAction,
long maxWait, int maxIdle, boolean testOnBorrow, boolean testOnReturn, long timeBetweenEvictionRunsMillis,
int numTestsPerEvictionRun, long minEvictableIdleTimeMillis, boolean testWhileIdle) {
this(factory, maxActive, whenExhaustedAction, maxWait, maxIdle, GenericKeyedObjectPool.DEFAULT_MAX_TOTAL,
testOnBorrow, testOnReturn, timeBetweenEvictionRunsMillis, numTestsPerEvictionRun,
minEvictableIdleTimeMillis, testWhileIdle);
}
public GenericKeyedObjectPool(KeyedPoolableObjectFactory factory, int maxActive, byte whenExhaustedAction,
long maxWait, int maxIdle, int maxTotal, boolean testOnBorrow, boolean testOnReturn,
long timeBetweenEvictionRunsMillis, int numTestsPerEvictionRun, long minEvictableIdleTimeMillis,
boolean testWhileIdle) {
this(factory, maxActive, whenExhaustedAction, maxWait, maxIdle, maxTotal,
GenericKeyedObjectPool.DEFAULT_MIN_IDLE, testOnBorrow, testOnReturn, timeBetweenEvictionRunsMillis,
numTestsPerEvictionRun, minEvictableIdleTimeMillis, testWhileIdle);
}
public GenericKeyedObjectPool(KeyedPoolableObjectFactory factory, int maxActive, byte whenExhaustedAction,
long maxWait, int maxIdle, int maxTotal, int minIdle, boolean testOnBorrow, boolean testOnReturn,
long timeBetweenEvictionRunsMillis, int numTestsPerEvictionRun, long minEvictableIdleTimeMillis,
boolean testWhileIdle) {
this(factory, maxActive, whenExhaustedAction, maxWait, maxIdle, maxTotal, minIdle, testOnBorrow, testOnReturn,
timeBetweenEvictionRunsMillis, numTestsPerEvictionRun, minEvictableIdleTimeMillis, testWhileIdle,
DEFAULT_LIFO);
}
public GenericKeyedObjectPool(KeyedPoolableObjectFactory factory, int maxActive, byte whenExhaustedAction,
long maxWait, int maxIdle, int maxTotal, int minIdle, boolean testOnBorrow, boolean testOnReturn,
long timeBetweenEvictionRunsMillis, int numTestsPerEvictionRun, long minEvictableIdleTimeMillis,
boolean testWhileIdle, boolean lifo) {
_factory = factory;
_maxActive = maxActive;
_lifo = lifo;
switch (whenExhaustedAction) {
case WHEN_EXHAUSTED_BLOCK:
case WHEN_EXHAUSTED_FAIL:
case WHEN_EXHAUSTED_GROW:
_whenExhaustedAction = whenExhaustedAction;
break;
default:
throw new IllegalArgumentException(""whenExhaustedAction "" + whenExhaustedAction + "" not recognized."");
}
_maxWait = maxWait;
_maxIdle = maxIdle;
_maxTotal = maxTotal;
_minIdle = minIdle;
_testOnBorrow = testOnBorrow;
_testOnReturn = testOnReturn;
_timeBetweenEvictionRunsMillis = timeBetweenEvictionRunsMillis;
_numTestsPerEvictionRun = numTestsPerEvictionRun;
_minEvictableIdleTimeMillis = minEvictableIdleTimeMillis;
_testWhileIdle = testWhileIdle;
_poolMap = new HashMap();
_poolList = new CursorableLinkedList();
startEvictor(_timeBetweenEvictionRunsMillis);
}
public synchronized int getMaxActive() {
return _maxActive;
}
public synchronized void setMaxActive(int maxActive) {
_maxActive = maxActive;
allocate();
}
public synchronized int getMaxTotal() {
return _maxTotal;
}
public synchronized void setMaxTotal(int maxTotal) {
_maxTotal = maxTotal;
allocate();
}
public synchronized byte getWhenExhaustedAction() {
return _whenExhaustedAction;
}
public synchronized void setWhenExhaustedAction(byte whenExhaustedAction) {
switch(whenExhaustedAction) {
case WHEN_EXHAUSTED_BLOCK:
case WHEN_EXHAUSTED_FAIL:
case WHEN_EXHAUSTED_GROW:
_whenExhaustedAction = whenExhaustedAction;
allocate();
break;
default:
throw new IllegalArgumentException(""whenExhaustedAction "" + whenExhaustedAction + "" not recognized."");
}
}
public synchronized long getMaxWait() {
return _maxWait;
}
public synchronized void setMaxWait(long maxWait) {
_maxWait = maxWait;
}
public synchronized int getMaxIdle() {
return _maxIdle;
}
public synchronized void setMaxIdle(int maxIdle) {
_maxIdle = maxIdle;
allocate();
}
public void setMinIdle(int poolSize) {
_minIdle = poolSize;
}
public int getMinIdle() {
return _minIdle;
}
public boolean getTestOnBorrow() {
return _testOnBorrow;
}
public void setTestOnBorrow(boolean testOnBorrow) {
_testOnBorrow = testOnBorrow;
}
public boolean getTestOnReturn() {
return _testOnReturn;
}
public void setTestOnReturn(boolean testOnReturn) {
_testOnReturn = testOnReturn;
}
public synchronized long getTimeBetweenEvictionRunsMillis() {
return _timeBetweenEvictionRunsMillis;
}
public synchronized void setTimeBetweenEvictionRunsMillis(long timeBetweenEvictionRunsMillis) {
_timeBetweenEvictionRunsMillis = timeBetweenEvictionRunsMillis;
startEvictor(_timeBetweenEvictionRunsMillis);
}
public synchronized int getNumTestsPerEvictionRun() {
return _numTestsPerEvictionRun;
}
public synchronized void setNumTestsPerEvictionRun(int numTestsPerEvictionRun) {
_numTestsPerEvictionRun = numTestsPerEvictionRun;
}
public synchronized long getMinEvictableIdleTimeMillis() {
return _minEvictableIdleTimeMillis;
}
public synchronized void setMinEvictableIdleTimeMillis(long minEvictableIdleTimeMillis) {
_minEvictableIdleTimeMillis = minEvictableIdleTimeMillis;
}
public synchronized boolean getTestWhileIdle() {
return _testWhileIdle;
}
public synchronized void setTestWhileIdle(boolean testWhileIdle) {
_testWhileIdle = testWhileIdle;
}
public synchronized void setConfig(GenericKeyedObjectPool.Config conf) {
setMaxIdle(conf.maxIdle);
setMaxActive(conf.maxActive);
setMaxTotal(conf.maxTotal);
setMinIdle(conf.minIdle);
setMaxWait(conf.maxWait);
setWhenExhaustedAction(conf.whenExhaustedAction);
setTestOnBorrow(conf.testOnBorrow);
setTestOnReturn(conf.testOnReturn);
setTestWhileIdle(conf.testWhileIdle);
setNumTestsPerEvictionRun(conf.numTestsPerEvictionRun);
setMinEvictableIdleTimeMillis(conf.minEvictableIdleTimeMillis);
setTimeBetweenEvictionRunsMillis(conf.timeBetweenEvictionRunsMillis);
}
public synchronized boolean getLifo() {
return _lifo;
}
public synchronized void setLifo(boolean lifo) {
this._lifo = lifo;
}
public Object borrowObject(Object key) throws Exception {
long starttime = System.currentTimeMillis();
Latch latch = new Latch(key);
byte whenExhaustedAction;
long maxWait;
synchronized (this) {
whenExhaustedAction = _whenExhaustedAction;
maxWait = _maxWait;
_allocationQueue.add(latch);
allocate();
}
for(;;) {
synchronized (this) {
assertOpen();
}
if (null == latch.getPair()) {
if (latch.mayCreate()) {
} else {
switch(whenExhaustedAction) {
case WHEN_EXHAUSTED_GROW:
synchronized (this) {
if (latch.getPair() == null && !latch.mayCreate()) {
_allocationQueue.remove(latch);
latch.getPool().incrementInternalProcessingCount();
}
}
break;
case WHEN_EXHAUSTED_FAIL:
synchronized (this) {
if (latch.getPair() != null || latch.mayCreate()) {
break;
}
_allocationQueue.remove(latch);
}
throw new NoSuchElementException(""Pool exhausted"");
case WHEN_EXHAUSTED_BLOCK:
try {
synchronized (latch) {
if (latch.getPair() == null && !latch.mayCreate()) {
if (maxWait <= 0) {
latch.wait();
} else {
final long elapsed = (System.currentTimeMillis() - starttime);
final long waitTime = maxWait - elapsed;
if (waitTime > 0)
{
latch.wait(waitTime);
}
}
} else {
break;
}
}
} catch(InterruptedException e) {
synchronized (this) {
if (latch.getPair() == null && !latch.mayCreate()) {
_allocationQueue.remove(latch);
} else {
break;
}
}
Thread.currentThread().interrupt();
throw e;
}
if (maxWait > 0 && ((System.currentTimeMillis() - starttime) >= maxWait)) {
synchronized (this) {
if (latch.getPair() == null && !latch.mayCreate()) {
_allocationQueue.remove(latch);
} else {
break;
}
}
throw new NoSuchElementException(""Timeout waiting for idle object"");
} else {
continue; 
}
default:
throw new IllegalArgumentException(""whenExhaustedAction "" + whenExhaustedAction +
"" not recognized."");
}
}
}
boolean newlyCreated = false;
if (null == latch.getPair()) {
try {
Object obj = _factory.makeObject(key);
latch.setPair(new ObjectTimestampPair(obj));
newlyCreated = true;
} finally {
if (!newlyCreated) {
synchronized (this) {
latch.getPool().decrementInternalProcessingCount();
allocate();
}
}
}
}
try {
_factory.activateObject(key, latch.getPair().value);
if (_testOnBorrow && !_factory.validateObject(key, latch.getPair().value)) {
throw new Exception(""ValidateObject failed"");
}
synchronized (this) {
latch.getPool().decrementInternalProcessingCount();
latch.getPool().incrementActiveCount();
}
return latch.getPair().value;
} catch (Throwable e) {
PoolUtils.checkRethrow(e);
try {
_factory.destroyObject(key, latch.getPair().value);
} catch (Throwable e2) {
PoolUtils.checkRethrow(e2);
}
synchronized (this) {
latch.getPool().decrementInternalProcessingCount();
if (!newlyCreated) {
latch.reset();
_allocationQueue.add(0, latch);
}
allocate();
}
if (newlyCreated) {
throw new NoSuchElementException(
""Could not create a validated object, cause: "" +
e.getMessage());
}
else {
continue; 
}
}
}
}
private void allocate() {
boolean clearOldest = false;
synchronized (this) {
if (isClosed()) return;
Iterator allocationQueueIter = _allocationQueue.iterator();
while (allocationQueueIter.hasNext()) {
Latch latch = (Latch) allocationQueueIter.next();
ObjectQueue pool = (ObjectQueue)(_poolMap.get(latch.getkey()));
if (null == pool) {
pool = new ObjectQueue();
_poolMap.put(latch.getkey(), pool);
_poolList.add(latch.getkey());
}
latch.setPool(pool);
if (!pool.queue.isEmpty()) {
allocationQueueIter.remove();
latch.setPair(
(ObjectTimestampPair) pool.queue.removeFirst());
pool.incrementInternalProcessingCount();
_totalIdle--;
synchronized (latch) {
latch.notify();
}
continue;
}
if ((_maxTotal > 0) &&
(_totalActive + _totalIdle + _totalInternalProcessing >= _maxTotal)) {
clearOldest = true;
break;
}
if ((_maxActive < 0 || pool.activeCount + pool.internalProcessingCount < _maxActive) &&
(_maxTotal < 0 || _totalActive + _totalIdle + _totalInternalProcessing < _maxTotal)) {
allocationQueueIter.remove();
latch.setMayCreate(true);
pool.incrementInternalProcessingCount();
synchronized (latch) {
latch.notify();
}
continue;
}
if (_maxActive < 0) {
break;
}
}
}
if (clearOldest) {
clearOldest();
}
}
public void clear() {
Map toDestroy = new HashMap();
synchronized (this) {
for (Iterator it = _poolMap.keySet().iterator(); it.hasNext();) {
Object key = it.next();
ObjectQueue pool = (ObjectQueue)_poolMap.get(key);
List objects = new ArrayList();
objects.addAll(pool.queue);
toDestroy.put(key, objects);
it.remove();
_poolList.remove(key);
_totalIdle = _totalIdle - pool.queue.size();
_totalInternalProcessing =
_totalInternalProcessing + pool.queue.size();
pool.queue.clear();
}
}
destroy(toDestroy, _factory);
}
public void clearOldest() {
final Map toDestroy = new HashMap();
final Map map = new TreeMap();
synchronized (this) {
for (Iterator keyiter = _poolMap.keySet().iterator(); keyiter.hasNext();) {
final Object key = keyiter.next();
final CursorableLinkedList list = ((ObjectQueue)_poolMap.get(key)).queue;
for (Iterator it = list.iterator(); it.hasNext();) {
map.put(it.next(), key);
}
}
Set setPairKeys = map.entrySet();
int itemsToRemove = ((int) (map.size() * 0.15)) + 1;
Iterator iter = setPairKeys.iterator();
while (iter.hasNext() && itemsToRemove > 0) {
Map.Entry entry = (Map.Entry) iter.next();
Object key = entry.getValue();
ObjectTimestampPair pairTimeStamp = (ObjectTimestampPair) entry.getKey();
final CursorableLinkedList list =
((ObjectQueue)(_poolMap.get(key))).queue;
list.remove(pairTimeStamp);
if (toDestroy.containsKey(key)) {
((List)toDestroy.get(key)).add(pairTimeStamp);
} else {
List listForKey = new ArrayList();
listForKey.add(pairTimeStamp);
toDestroy.put(key, listForKey);
}
if (list.isEmpty()) {
_poolMap.remove(key);
_poolList.remove(key);
}
_totalIdle--;
_totalInternalProcessing++;
itemsToRemove--;
}
}
destroy(toDestroy, _factory);
}
public void clear(Object key) {
Map toDestroy = new HashMap();
final ObjectQueue pool;
synchronized (this) {
pool = (ObjectQueue)(_poolMap.remove(key));
if (pool == null) {
return;
} else {
_poolList.remove(key);
}
List objects = new ArrayList();
objects.addAll(pool.queue);
toDestroy.put(key, objects);
_totalIdle = _totalIdle - pool.queue.size();
_totalInternalProcessing =
_totalInternalProcessing + pool.queue.size();
pool.queue.clear();
}
destroy(toDestroy, _factory);
}
private void destroy(Map m, KeyedPoolableObjectFactory factory) {
for (Iterator entries = m.entrySet().iterator(); entries.hasNext();) {
Map.Entry entry = (Entry) entries.next();
Object key = entry.getKey();
Collection c = (Collection) entry.getValue();
for (Iterator it = c.iterator(); it.hasNext();) {
try {
factory.destroyObject(
key,((ObjectTimestampPair)(it.next())).value);
} catch(Exception e) {
} finally {
synchronized(this) {
_totalInternalProcessing--;
allocate();
}
}
}
}
}
public synchronized int getNumActive() {
return _totalActive;
}
public synchronized int getNumIdle() {
return _totalIdle;
}
public synchronized int getNumActive(Object key) {
final ObjectQueue pool = (ObjectQueue)(_poolMap.get(key));
return pool != null ? pool.activeCount : 0;
}
public synchronized int getNumIdle(Object key) {
final ObjectQueue pool = (ObjectQueue)(_poolMap.get(key));
return pool != null ? pool.queue.size() : 0;
}
public void returnObject(Object key, Object obj) throws Exception {
try {
addObjectToPool(key, obj, true);
} catch (Exception e) {
if (_factory != null) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e2) {
}
// TODO: Correctness here depends on control in addObjectToPool.
ObjectQueue pool = (ObjectQueue) (_poolMap.get(key));
if (pool != null) {
synchronized(this) {
pool.decrementActiveCount();
allocate();
}
}
}
}
}
private void addObjectToPool(Object key, Object obj,
boolean decrementNumActive) throws Exception {
boolean success = true; 
if (_testOnReturn && !_factory.validateObject(key, obj)) {
success = false;
} else {
_factory.passivateObject(key, obj);
}
boolean shouldDestroy = !success;
ObjectQueue pool;
synchronized (this) {
pool = (ObjectQueue) (_poolMap.get(key));
if (null == pool) {
pool = new ObjectQueue();
_poolMap.put(key, pool);
_poolList.add(key);
}
if (isClosed()) {
shouldDestroy = true;
} else {
if (_maxIdle >= 0 && (pool.queue.size() >= _maxIdle)) {
shouldDestroy = true;
} else if (success) {
if (_lifo) {
pool.queue.addFirst(new ObjectTimestampPair(obj));
} else {
pool.queue.addLast(new ObjectTimestampPair(obj));
}
_totalIdle++;
if (decrementNumActive) {
pool.decrementActiveCount();
}
allocate();
}
}
}
if (shouldDestroy) {
try {
_factory.destroyObject(key, obj);
} catch(Exception e) {
}
if (decrementNumActive) {
synchronized(this) {
pool.decrementActiveCount();
allocate();
}
}
}
}
public void invalidateObject(Object key, Object obj) throws Exception {
try {
_factory.destroyObject(key, obj);
} finally {
synchronized (this) {
ObjectQueue pool = (ObjectQueue) (_poolMap.get(key));
if (null == pool) {
pool = new ObjectQueue();
_poolMap.put(key, pool);
_poolList.add(key);
}
pool.decrementActiveCount();
allocate(); 
}
}
}
public void addObject(Object key) throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
Object obj = _factory.makeObject(key);
try {
assertOpen();
addObjectToPool(key, obj, false);
} catch (IllegalStateException ex) { 
try {
_factory.destroyObject(key, obj);
} catch (Exception ex2) {
}
throw ex;
}
}
public synchronized void preparePool(Object key, boolean populateImmediately) {
ObjectQueue pool = (ObjectQueue)(_poolMap.get(key));
if (null == pool) {
pool = new ObjectQueue();
_poolMap.put(key,pool);
_poolList.add(key);
}
if (populateImmediately) {
try {
ensureMinIdle(key);
}
catch (Exception e) {
}
}
}
public void close() throws Exception {
super.close();
synchronized (this) {
clear();
if (null != _evictionCursor) {
_evictionCursor.close();
_evictionCursor = null;
}
if (null != _evictionKeyCursor) {
_evictionKeyCursor.close();
_evictionKeyCursor = null;
}
startEvictor(-1L);
}
}
public void setFactory(KeyedPoolableObjectFactory factory) throws IllegalStateException {
Map toDestroy = new HashMap();
final KeyedPoolableObjectFactory oldFactory = _factory;
synchronized (this) {
assertOpen();
if (0 < getNumActive()) {
throw new IllegalStateException(""Objects are already active"");
} else {
for (Iterator it = _poolMap.keySet().iterator(); it.hasNext();) {
Object key = it.next();
ObjectQueue pool = (ObjectQueue)_poolMap.get(key);
if (pool != null) {
List objects = new ArrayList();
objects.addAll(pool.queue);
toDestroy.put(key, objects);
it.remove();
_poolList.remove(key);
_totalIdle = _totalIdle - pool.queue.size();
_totalInternalProcessing =
_totalInternalProcessing + pool.queue.size();
pool.queue.clear();
}
}
_factory = factory;
}
}
destroy(toDestroy, oldFactory);
}
public void evict() throws Exception {
Object key = null;
boolean testWhileIdle;
long minEvictableIdleTimeMillis;
synchronized (this) {
testWhileIdle = _testWhileIdle;
minEvictableIdleTimeMillis = _minEvictableIdleTimeMillis;
if (_evictionKeyCursor != null &&
_evictionKeyCursor._lastReturned != null) {
key = _evictionKeyCursor._lastReturned.value();
}
}
for (int i=0, m=getNumTests(); i<m; i++) {
final ObjectTimestampPair pair;
synchronized (this) {
if (_poolMap == null || _poolMap.size() == 0) {
continue;
}
if (null == _evictionKeyCursor) {
resetEvictionKeyCursor();
key = null;
}
if (null == _evictionCursor) {
if (_evictionKeyCursor.hasNext()) {
key = _evictionKeyCursor.next();
resetEvictionObjectCursor(key);
} else {
resetEvictionKeyCursor();
if (_evictionKeyCursor != null) {
if (_evictionKeyCursor.hasNext()) {
key = _evictionKeyCursor.next();
resetEvictionObjectCursor(key);
}
}
}
}
if (_evictionCursor == null) {
continue; 
}
if ((_lifo && !_evictionCursor.hasPrevious()) ||
(!_lifo && !_evictionCursor.hasNext())) {
if (_evictionKeyCursor != null) {
if (_evictionKeyCursor.hasNext()) {
key = _evictionKeyCursor.next();
resetEvictionObjectCursor(key);
} else { 
resetEvictionKeyCursor();
if (_evictionKeyCursor != null) {
if (_evictionKeyCursor.hasNext()) {
key = _evictionKeyCursor.next();
resetEvictionObjectCursor(key);
}
}
}
}
}
if ((_lifo && !_evictionCursor.hasPrevious()) ||
(!_lifo && !_evictionCursor.hasNext())) {
continue; 
}
pair = _lifo ?
(ObjectTimestampPair) _evictionCursor.previous() :
(ObjectTimestampPair) _evictionCursor.next();
_evictionCursor.remove();
_totalIdle--;
_totalInternalProcessing++;
}
boolean removeObject=false;
if ((minEvictableIdleTimeMillis > 0) &&
(System.currentTimeMillis() - pair.tstamp >
minEvictableIdleTimeMillis)) {
removeObject=true;
}
if (testWhileIdle && removeObject == false) {
boolean active = false;
try {
_factory.activateObject(key,pair.value);
active = true;
} catch(Exception e) {
removeObject=true;
}
if (active) {
if (!_factory.validateObject(key,pair.value)) {
removeObject=true;
} else {
try {
_factory.passivateObject(key,pair.value);
} catch(Exception e) {
removeObject=true;
}
}
}
}
if (removeObject) {
try {
_factory.destroyObject(key, pair.value);
} catch(Exception e) {
} finally {
if (_minIdle == 0) {
synchronized (this) {
ObjectQueue objectQueue =
(ObjectQueue)_poolMap.get(key);
if (objectQueue != null &&
objectQueue.queue.isEmpty()) {
_poolMap.remove(key);
_poolList.remove(key);
}
}
}
}
}
synchronized (this) {
if (!removeObject) {
_evictionCursor.add(pair);
_totalIdle++;
if (_lifo) {
_evictionCursor.previous();
}
}
_totalInternalProcessing--;
}
}
}
private void resetEvictionKeyCursor() {
if (_evictionKeyCursor != null) {
_evictionKeyCursor.close();
}
_evictionKeyCursor = _poolList.cursor();
if (null != _evictionCursor) {
_evictionCursor.close();
_evictionCursor = null;
}
}
private void resetEvictionObjectCursor(Object key) {
if (_evictionCursor != null) {
_evictionCursor.close();
}
if (_poolMap == null) {
return;
}
ObjectQueue pool = (ObjectQueue) (_poolMap.get(key));
if (pool != null) {
CursorableLinkedList queue = pool.queue;
_evictionCursor = queue.cursor(_lifo ? queue.size() : 0);
}
}
private void ensureMinIdle() throws Exception {
if (_minIdle > 0) {
Object[] keysCopy;
synchronized(this) {
keysCopy = _poolMap.keySet().toArray();
}
for (int i=0; i < keysCopy.length; i++) {
ensureMinIdle(keysCopy[i]);
}
}
}
private void ensureMinIdle(Object key) throws Exception {
ObjectQueue pool;
synchronized(this) {
pool = (ObjectQueue)(_poolMap.get(key));
}
if (pool == null) {
return;
}
int objectDeficit = calculateDeficit(pool, false);
for (int i = 0; i < objectDeficit && calculateDeficit(pool, true) > 0; i++) {
try {
addObject(key);
} finally {
synchronized (this) {
pool.decrementInternalProcessingCount();
allocate();
}
}
}
}
protected synchronized void startEvictor(long delay) {
if (null != _evictor) {
EvictionTimer.cancel(_evictor);
_evictor = null;
}
if (delay > 0) {
_evictor = new Evictor();
EvictionTimer.schedule(_evictor, delay, delay);
}
}
synchronized String debugInfo() {
StringBuffer buf = new StringBuffer();
buf.append(""Active: "").append(getNumActive()).append(""\n"");
buf.append(""Idle: "").append(getNumIdle()).append(""\n"");
Iterator it = _poolMap.keySet().iterator();
while (it.hasNext()) {
Object key = it.next();
buf.append(""\t"").append(key).append("" "").append(_poolMap.get(key)).append(""\n"");
}
return buf.toString();
}
private synchronized int getNumTests() {
if (_numTestsPerEvictionRun >= 0) {
return Math.min(_numTestsPerEvictionRun, _totalIdle);
} else {
return(int)(Math.ceil(_totalIdle/Math.abs((double)_numTestsPerEvictionRun)));
}
}
private synchronized int calculateDeficit(ObjectQueue pool,
boolean incrementInternal) {
int objectDefecit = 0;
objectDefecit = getMinIdle() - pool.queue.size();
if (getMaxActive() > 0) {
int growLimit = Math.max(0, getMaxActive() - pool.activeCount - pool.queue.size() - pool.internalProcessingCount);
objectDefecit = Math.min(objectDefecit, growLimit);
}
if (getMaxTotal() > 0) {
int growLimit = Math.max(0, getMaxTotal() - getNumActive() - getNumIdle() - _totalInternalProcessing);
objectDefecit = Math.min(objectDefecit, growLimit);
}
if (incrementInternal && objectDefecit > 0) {
pool.incrementInternalProcessingCount();
}
return objectDefecit;
}
private class ObjectQueue {
private int activeCount = 0;
private final CursorableLinkedList queue = new CursorableLinkedList();
private int internalProcessingCount = 0;
void incrementActiveCount() {
synchronized (GenericKeyedObjectPool.this) {
_totalActive++;
}
activeCount++;
}
void decrementActiveCount() {
synchronized (GenericKeyedObjectPool.this) {
_totalActive--;
}
if (activeCount > 0) {
activeCount--;
}
}
void incrementInternalProcessingCount() {
synchronized (GenericKeyedObjectPool.this) {
_totalInternalProcessing++;
}
internalProcessingCount++;
}
void decrementInternalProcessingCount() {
synchronized (GenericKeyedObjectPool.this) {
_totalInternalProcessing--;
}
internalProcessingCount--;
}
}
static class ObjectTimestampPair implements Comparable {
//CHECKSTYLE: stop VisibilityModifier
Object value;
long tstamp;
//CHECKSTYLE: resume VisibilityModifier
ObjectTimestampPair(Object val) {
this(val, System.currentTimeMillis());
}
ObjectTimestampPair(Object val, long time) {
value = val;
tstamp = time;
}
public String toString() {
return value + "";"" + tstamp;
}
public int compareTo(Object obj) {
return compareTo((ObjectTimestampPair) obj);
}
public int compareTo(ObjectTimestampPair other) {
final long tstampdiff = this.tstamp - other.tstamp;
if (tstampdiff == 0) {
return System.identityHashCode(this) - System.identityHashCode(other);
} else {
return (int)Math.min(Math.max(tstampdiff, Integer.MIN_VALUE), Integer.MAX_VALUE);
}
}
public Object getValue() {
return value;
}
public long getTstamp() {
return tstamp;
}
}
private class Evictor extends TimerTask {
public void run() {
try {
evict();
} catch(Exception e) {
} catch(OutOfMemoryError oome) {
oome.printStackTrace(System.err);
}
try {
ensureMinIdle();
} catch (Exception e) {
}
}
}
public static class Config {
//CHECKSTYLE: stop VisibilityModifier
public int maxIdle = GenericKeyedObjectPool.DEFAULT_MAX_IDLE;
public int maxActive = GenericKeyedObjectPool.DEFAULT_MAX_ACTIVE;
public int maxTotal = GenericKeyedObjectPool.DEFAULT_MAX_TOTAL;
public int minIdle = GenericKeyedObjectPool.DEFAULT_MIN_IDLE;
public long maxWait = GenericKeyedObjectPool.DEFAULT_MAX_WAIT;
public byte whenExhaustedAction = GenericKeyedObjectPool.DEFAULT_WHEN_EXHAUSTED_ACTION;
public boolean testOnBorrow = GenericKeyedObjectPool.DEFAULT_TEST_ON_BORROW;
public boolean testOnReturn = GenericKeyedObjectPool.DEFAULT_TEST_ON_RETURN;
public boolean testWhileIdle = GenericKeyedObjectPool.DEFAULT_TEST_WHILE_IDLE;
public long timeBetweenEvictionRunsMillis = GenericKeyedObjectPool.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS;
public int numTestsPerEvictionRun =  GenericKeyedObjectPool.DEFAULT_NUM_TESTS_PER_EVICTION_RUN;
public long minEvictableIdleTimeMillis = GenericKeyedObjectPool.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS;
public boolean lifo = GenericKeyedObjectPool.DEFAULT_LIFO;
//CHECKSTYLE: resume VisibilityModifier
}
private static final class Latch {
private final Object _key;
private ObjectQueue _pool;
private ObjectTimestampPair _pair;
private boolean _mayCreate = false;
private Latch(Object key) {
_key = key;
}
private synchronized Object getkey() {
return _key;
}
private synchronized ObjectQueue getPool() {
return _pool;
}
private synchronized void setPool(ObjectQueue pool) {
_pool = pool;
}
private synchronized ObjectTimestampPair getPair() {
return _pair;
}
private synchronized void setPair(ObjectTimestampPair pair) {
_pair = pair;
}
private synchronized boolean mayCreate() {
return _mayCreate;
}
private synchronized void setMayCreate(boolean mayCreate) {
_mayCreate = mayCreate;
}
private synchronized void reset() {
_pair = null;
_mayCreate = false;
}
}
private int _maxIdle = DEFAULT_MAX_IDLE;
private volatile int _minIdle = DEFAULT_MIN_IDLE;
private int _maxActive = DEFAULT_MAX_ACTIVE;
private int _maxTotal = DEFAULT_MAX_TOTAL;
private long _maxWait = DEFAULT_MAX_WAIT;
private byte _whenExhaustedAction = DEFAULT_WHEN_EXHAUSTED_ACTION;
private volatile boolean _testOnBorrow = DEFAULT_TEST_ON_BORROW;
private volatile boolean _testOnReturn = DEFAULT_TEST_ON_RETURN;
private boolean _testWhileIdle = DEFAULT_TEST_WHILE_IDLE;
private long _timeBetweenEvictionRunsMillis = DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS;
private int _numTestsPerEvictionRun =  DEFAULT_NUM_TESTS_PER_EVICTION_RUN;
private long _minEvictableIdleTimeMillis = DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS;
private Map _poolMap = null;
private int _totalActive = 0;
private int _totalIdle = 0;
private int _totalInternalProcessing = 0;
private KeyedPoolableObjectFactory _factory = null;
private Evictor _evictor = null;
private CursorableLinkedList _poolList = null;
private CursorableLinkedList.Cursor _evictionCursor = null;
private CursorableLinkedList.Cursor _evictionKeyCursor = null;
private boolean _lifo = DEFAULT_LIFO;
private LinkedList _allocationQueue = new LinkedList();
","public void returnObject(Object key, Object obj) throws Exception {
try {
addObjectToPool(key, obj, true);
} catch (Exception e) {
if (_factory != null) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e2) {
}
ObjectQueue pool = (ObjectQueue) (_poolMap.get(key));
if (pool != null) {
synchronized (this) {
pool.decrementActiveCount();
allocate();
}
}
}
}
}","public void returnObject(Object key, Object obj) throws Exception {
try {
addObjectToPool(key, obj, true);
} catch (Exception e) {
if (_factory != null) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e2) {
}
ObjectQueue objectqueueVar1 = objectqueueLiteral2;
if (objectqueueVar1 != null) {
synchronized (this) {
objectqueueVar1.decrementActiveCount();
allocate();
}
}
}
}
}"
17791,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1656,"} catch (Exception e2) {
","public void returnObject(Object key, Object obj) throws Exception {
try {
addObjectToPool(key, obj, true);
} catch (Exception e) {
if (_factory != null) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e2) {
}
// TODO: Correctness here depends on control in addObjectToPool.
ObjectQueue pool = (ObjectQueue) (_poolMap.get(key));
if (pool != null) {
synchronized (this) {
pool.decrementActiveCount();
allocate();
}
}
}
}
}","public void returnObject(Object key, Object obj) throws Exception {
try {
addObjectToPool(key, obj, true);
} catch (Exception e) {
if (_factory != null) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e2) {
}
// TODO: Correctness here depends on control in addObjectToPool.
ObjectQueue objectqueueVar1 = objectqueueLiteral2;
if (objectqueueVar1 != null) {
synchronized (this) {
objectqueueVar1.decrementActiveCount();
allocate();
}
}
}
}
}"
17793,Multithreaded correctness,NO_NOTIFY_NOT_NOTIFYALL,FP,pool,1658,"latch.notify();
","private void allocate() {
boolean clearOldest = false;
synchronized (this) {
if (isClosed())
return;
Iterator allocationQueueIter = _allocationQueue.iterator();
while (allocationQueueIter.hasNext()) {
Latch latch = (Latch) allocationQueueIter.next();
ObjectQueue pool = (ObjectQueue) (_poolMap.get(latch.getkey()));
if (null == pool) {
pool = new ObjectQueue();
_poolMap.put(latch.getkey(), pool);
_poolList.add(latch.getkey());
}
latch.setPool(pool);
if (!pool.queue.isEmpty()) {
allocationQueueIter.remove();
latch.setPair((ObjectTimestampPair) pool.queue.removeFirst());
pool.incrementInternalProcessingCount();
_totalIdle--;
synchronized (latch) {
latch.notify();
}
continue;
}
if ((_maxTotal > 0) && (_totalActive + _totalIdle + _totalInternalProcessing >= _maxTotal)) {
clearOldest = true;
break;
}
if ((_maxActive < 0 || pool.activeCount + pool.internalProcessingCount < _maxActive) && (_maxTotal < 0 || _totalActive + _totalIdle + _totalInternalProcessing < _maxTotal)) {
allocationQueueIter.remove();
latch.setMayCreate(true);
pool.incrementInternalProcessingCount();
synchronized (latch) {
latch.notify();
}
continue;
}
if (_maxActive < 0) {
break;
}
}
}
if (clearOldest) {
clearOldest();
}
}","private void allocate() {
boolean booleanVar1 = booleanLiteral2;
synchronized (this) {
if (isClosed())
return;
Iterator iteratorVar3 = iteratorLiteral4;
while (iteratorVar3.hasNext()) {
Latch latchVar5 = latchLiteral6;
ObjectQueue objectqueueVar7 = objectqueueLiteral8;
if (null == objectqueueVar7) {
objectqueueVar7 = new ObjectQueue();
_poolMap.put(latchVar5.getkey(), objectqueueVar7);
_poolList.add(latchVar5.getkey());
}
latchVar5.setPool(objectqueueVar7);
if (!objectqueueVar7.queue.isEmpty()) {
iteratorVar3.remove();
latchVar5.setPair((ObjectTimestampPair) objectqueueVar7.queue.removeFirst());
objectqueueVar7.incrementInternalProcessingCount();
_totalIdle--;
synchronized (latchVar5) {
latchVar5.notify();
}
continue;
}
if ((_maxTotal > 0) && (_totalActive + _totalIdle + _totalInternalProcessing >= _maxTotal)) {
booleanVar1 = true;
break;
}
if ((_maxActive < 0 || objectqueueVar7.activeCount + objectqueueVar7.internalProcessingCount < _maxActive) && (_maxTotal < 0 || _totalActive + _totalIdle + _totalInternalProcessing < _maxTotal)) {
iteratorVar3.remove();
latchVar5.setMayCreate(true);
objectqueueVar7.incrementInternalProcessingCount();
synchronized (latchVar5) {
latchVar5.notify();
}
continue;
}
if (_maxActive < 0) {
break;
}
}
}
if (booleanVar1) {
clearOldest();
}
}"
17795,PERFORMANCE,WMI_WRONG_MAP_ITERATOR,FP,pool,1660,"final CursorableLinkedList list = ((ObjectQueue)_poolMap.get(key)).queue;
","public void clearOldest() {
final Map toDestroy = new HashMap();
final Map map = new TreeMap();
synchronized (this) {
for (Iterator keyiter = _poolMap.keySet().iterator(); keyiter.hasNext(); ) {
final Object key = keyiter.next();
final CursorableLinkedList list = ((ObjectQueue) _poolMap.get(key)).queue;
for (Iterator it = list.iterator(); it.hasNext(); ) {
map.put(it.next(), key);
}
}
Set setPairKeys = map.entrySet();
int itemsToRemove = ((int) (map.size() * 0.15)) + 1;
Iterator iter = setPairKeys.iterator();
while (iter.hasNext() && itemsToRemove > 0) {
Map.Entry entry = (Map.Entry) iter.next();
Object key = entry.getValue();
ObjectTimestampPair pairTimeStamp = (ObjectTimestampPair) entry.getKey();
final CursorableLinkedList list = ((ObjectQueue) (_poolMap.get(key))).queue;
list.remove(pairTimeStamp);
if (toDestroy.containsKey(key)) {
((List) toDestroy.get(key)).add(pairTimeStamp);
} else {
List listForKey = new ArrayList();
listForKey.add(pairTimeStamp);
toDestroy.put(key, listForKey);
}
if (list.isEmpty()) {
_poolMap.remove(key);
_poolList.remove(key);
}
_totalIdle--;
_totalInternalProcessing++;
itemsToRemove--;
}
}
destroy(toDestroy, _factory);
}","public void clearOldest() {
final Map mapVar1 = mapLiteral2;
final Map mapVar3 = mapLiteral4;
synchronized (this) {
for (Iterator iteratorVar27 = iteratorLiteral28; iteratorVar5.hasNext(); ) {
final Object objectVar7 = objectLiteral8;
final CursorableLinkedList cursorablelinkedlistVar9 = cursorablelinkedlistLiteral10;
for (Iterator iteratorVar29 = iteratorLiteral30; iteratorVar11.hasNext(); ) {
mapVar3.put(iteratorVar11.next(), objectVar7);
}
}
Set setVar13 = setLiteral14;
int intVar15 = intLiteral16;
Iterator iteratorVar17 = iteratorLiteral18;
while (iteratorVar17.hasNext() && intVar15 > 0) {
Map.Entry map.entryVar19 = map.entryLiteral20;
Object objectVar7 = objectLiteral21;
ObjectTimestampPair objecttimestamppairVar22 = objecttimestamppairLiteral23;
final CursorableLinkedList cursorablelinkedlistVar9 = cursorablelinkedlistLiteral24;
cursorablelinkedlistVar9.remove(objecttimestamppairVar22);
if (mapVar1.containsKey(objectVar7)) {
((List) mapVar1.get(objectVar7)).add(objecttimestamppairVar22);
} else {
List listVar25 = listLiteral26;
listVar25.add(objecttimestamppairVar22);
mapVar1.put(objectVar7, listVar25);
}
if (cursorablelinkedlistVar9.isEmpty()) {
_poolMap.remove(objectVar7);
_poolList.remove(objectVar7);
}
_totalIdle--;
_totalInternalProcessing++;
intVar15--;
}
}
destroy(mapVar1, _factory);
}"
17796,PERFORMANCE,WMI_WRONG_MAP_ITERATOR,FP,pool,1661,"buf.append(""\t"").append(key).append("" "").append(_poolMap.get(key)).append(""\n"");
","synchronized String debugInfo() {
StringBuffer buf = new StringBuffer();
buf.append(""Active: "").append(getNumActive()).append(""\n"");
buf.append(""Idle: "").append(getNumIdle()).append(""\n"");
Iterator it = _poolMap.keySet().iterator();
while (it.hasNext()) {
Object key = it.next();
buf.append(""\t"").append(key).append("" "").append(_poolMap.get(key)).append(""\n"");
}
return buf.toString();
}","synchronized String debugInfo() {
StringBuffer stringbufferVar1 = stringbufferLiteral2;
stringbufferVar1.append(""Active: "").append(getNumActive()).append(""\n"");
stringbufferVar1.append(""Idle: "").append(getNumIdle()).append(""\n"");
Iterator iteratorVar3 = iteratorLiteral4;
while (iteratorVar3.hasNext()) {
Object objectVar5 = objectLiteral6;
stringbufferVar1.append(""\t"").append(objectVar5).append("" "").append(_poolMap.get(objectVar5)).append(""\n"");
}
return stringbufferVar1.toString();
}"
17798,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1663,"catch (Exception e) {
","public synchronized void preparePool(Object key, boolean populateImmediately) {
ObjectQueue pool = (ObjectQueue) (_poolMap.get(key));
if (null == pool) {
pool = new ObjectQueue();
_poolMap.put(key, pool);
_poolList.add(key);
}
if (populateImmediately) {
try {
ensureMinIdle(key);
} catch (Exception e) {
}
}
}","public synchronized void preparePool(Object key, boolean populateImmediately) {
ObjectQueue objectqueueVar1 = objectqueueLiteral2;
if (null == objectqueueVar1) {
objectqueueVar1 = new ObjectQueue();
_poolMap.put(key, objectqueueVar1);
_poolList.add(key);
}
if (populateImmediately) {
try {
ensureMinIdle(key);
} catch (Exception e) {
}
}
}"
17824,DODGY_CODE,RI_REDUNDANT_INTERFACES,FP,pool,1689,"this((PoolableObjectFactory)null,DEFAULT_MAX_SLEEPING,DEFAULT_INIT_SLEEPING_CAPACITY);
}
public StackObjectPool(int maxIdle) {
this((PoolableObjectFactory)null,maxIdle,DEFAULT_INIT_SLEEPING_CAPACITY);
}
public StackObjectPool(int maxIdle, int initIdleCapacity) {
this((PoolableObjectFactory)null,maxIdle,initIdleCapacity);
}
public StackObjectPool(PoolableObjectFactory factory) {
this(factory,DEFAULT_MAX_SLEEPING,DEFAULT_INIT_SLEEPING_CAPACITY);
}
public StackObjectPool(PoolableObjectFactory factory, int maxIdle) {
this(factory,maxIdle,DEFAULT_INIT_SLEEPING_CAPACITY);
}
public StackObjectPool(PoolableObjectFactory factory, int maxIdle, int initIdleCapacity) {
_factory = factory;
_maxSleeping = (maxIdle < 0 ? DEFAULT_MAX_SLEEPING : maxIdle);
int initcapacity = (initIdleCapacity < 1 ? DEFAULT_INIT_SLEEPING_CAPACITY : initIdleCapacity);
_pool = new Stack();
_pool.ensureCapacity( initcapacity > _maxSleeping ? _maxSleeping : initcapacity);
}
public synchronized Object borrowObject() throws Exception {
assertOpen();
Object obj = null;
boolean newlyCreated = false;
while (null == obj) {
if (!_pool.empty()) {
obj = _pool.pop();
} else {
if(null == _factory) {
throw new NoSuchElementException();
} else {
obj = _factory.makeObject();
newlyCreated = true;
if (obj == null) {
throw new NoSuchElementException(""PoolableObjectFactory.makeObject() returned null."");
}
}
}
if (null != _factory && null != obj) {
try {
_factory.activateObject(obj);
if (!_factory.validateObject(obj)) {
throw new Exception(""ValidateObject failed"");
}
} catch (Throwable t) {
PoolUtils.checkRethrow(t);
try {
_factory.destroyObject(obj);
} catch (Throwable t2) {
PoolUtils.checkRethrow(t2);
} finally {
obj = null;
}
if (newlyCreated) {
throw new NoSuchElementException(
""Could not create a validated object, cause: "" +
t.getMessage());
}
}
}
}
_numActive++;
return obj;
}
public synchronized void returnObject(Object obj) throws Exception {
boolean success = !isClosed();
if(null != _factory) {
if(!_factory.validateObject(obj)) {
success = false;
} else {
try {
_factory.passivateObject(obj);
} catch(Exception e) {
success = false;
}
}
}
boolean shouldDestroy = !success;
_numActive--;
if (success) {
Object toBeDestroyed = null;
if(_pool.size() >= _maxSleeping) {
shouldDestroy = true;
toBeDestroyed = _pool.remove(0); 
}
_pool.push(obj);
obj = toBeDestroyed; 
}
notifyAll(); 
if(shouldDestroy) { 
try {
_factory.destroyObject(obj);
} catch(Exception e) {
}
}
}
public synchronized void invalidateObject(Object obj) throws Exception {
_numActive--;
if (null != _factory) {
_factory.destroyObject(obj);
}
notifyAll(); 
}
public synchronized int getNumIdle() {
return _pool.size();
}
public synchronized int getNumActive() {
return _numActive;
}
public synchronized void clear() {
if(null != _factory) {
Iterator it = _pool.iterator();
while(it.hasNext()) {
try {
_factory.destroyObject(it.next());
} catch(Exception e) {
}
}
}
_pool.clear();
}
public void close() throws Exception {
super.close();
clear();
}
public synchronized void addObject() throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
Object obj = _factory.makeObject();
boolean success = true;
if(!_factory.validateObject(obj)) {
success = false;
} else {
_factory.passivateObject(obj);
}
boolean shouldDestroy = !success;
if (success) {
Object toBeDestroyed = null;
if(_pool.size() >= _maxSleeping) {
shouldDestroy = true;
toBeDestroyed = _pool.remove(0); 
}
_pool.push(obj);
obj = toBeDestroyed; 
}
notifyAll(); 
if(shouldDestroy) { 
try {
_factory.destroyObject(obj);
} catch(Exception e) {
}
}
}
public synchronized void setFactory(PoolableObjectFactory factory) throws IllegalStateException {
assertOpen();
if(0 < getNumActive()) {
throw new IllegalStateException(""Objects are already active"");
} else {
clear();
_factory = factory;
}
}
protected static final int DEFAULT_MAX_SLEEPING  = 8;
protected static final int DEFAULT_INIT_SLEEPING_CAPACITY = 4;
protected Stack _pool = null;
protected PoolableObjectFactory _factory = null;
protected int _maxSleeping = DEFAULT_MAX_SLEEPING;
protected int _numActive = 0;
public synchronized PoolableObjectFactory getFactory() {
return _factory;
}
public int getMaxSleeping() {
return _maxSleeping;
","public synchronized void addObject() throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
Object obj = _factory.makeObject();
boolean success = true;
if (!_factory.validateObject(obj)) {
success = false;
} else {
_factory.passivateObject(obj);
}
boolean shouldDestroy = !success;
if (success) {
Object toBeDestroyed = null;
if (_pool.size() >= _maxSleeping) {
shouldDestroy = true;
toBeDestroyed = _pool.remove(0);
}
_pool.push(obj);
obj = toBeDestroyed;
}
notifyAll();
if (shouldDestroy) {
try {
_factory.destroyObject(obj);
} catch (Exception e) {
}
}
}","public synchronized void addObject() throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
Object objectVar1 = objectLiteral2;
boolean booleanVar3 = booleanLiteral4;
if (!_factory.validateObject(objectVar1)) {
booleanVar3 = false;
} else {
_factory.passivateObject(objectVar1);
}
boolean booleanVar5 = booleanLiteral6;
if (booleanVar3) {
Object objectVar7 = objectLiteral8;
if (_pool.size() >= _maxSleeping) {
booleanVar5 = true;
objectVar7 = _pool.remove(0);
}
_pool.push(objectVar1);
objectVar1 = objectVar7;
}
notifyAll();
if (booleanVar5) {
try {
_factory.destroyObject(objectVar1);
} catch (Exception e) {
}
}
}"
17828,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1693,"} catch (Exception e) {
","public void invalidateObject(final Object key, final Object obj) {
if (type.isInstance(obj)) {
try {
keyedPool.invalidateObject(key, obj);
} catch (Exception e) {
}
} else {
throw new ClassCastException(""Invalidated object for key: "" + key + "" is not of type: "" + type.getName() + "" was: "" + obj);
}
}","public void invalidateObject(final Object key, final Object obj) {
if (type.isInstance(obj)) {
try {
keyedPool.invalidateObject(key, obj);
} catch (Exception e) {
}
} else {
throw new ClassCastException(""Invalidated object for key: "" + key + "" is not of type: "" + type.getName() + "" was: "" + obj);
}
}"
17838,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1703,"} catch (Exception e) {
","public void invalidateObject(final Object key, final Object obj) {
try {
pool.invalidateObject(obj);
} catch (Exception e) {
}
}","public void invalidateObject(final Object key, final Object obj) {
try {
pool.invalidateObject(obj);
} catch (Exception e) {
}
}"
17840,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1705,"} catch (Exception e) {
","public void invalidateObject(final Object key, final Object obj) {
try {
keyedPool.invalidateObject(key, obj);
} catch (Exception e) {
}
}","public void invalidateObject(final Object key, final Object obj) {
try {
keyedPool.invalidateObject(key, obj);
} catch (Exception e) {
}
}"
17841,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1706,"} catch (Exception e) {
","public void invalidateObject(final Object obj) {
synchronized (lock) {
try {
pool.invalidateObject(obj);
} catch (Exception e) {
}
}
}","public void invalidateObject(final Object obj) {
synchronized (lock) {
try {
pool.invalidateObject(obj);
} catch (Exception e) {
}
}
}"
17843,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1708,"} catch (Exception e) {
","public void close() {
try {
keyedPool.close();
} catch (Exception e) {
}
}","public void close() {
try {
keyedPool.close();
} catch (Exception e) {
}
}"
17856,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1721,"} catch(Exception e) {
","public void run() {
try {
evict();
} catch (Exception e) {
} catch (OutOfMemoryError oome) {
oome.printStackTrace(System.err);
}
try {
ensureMinIdle();
} catch (Exception e) {
}
}","public void run() {
try {
evict();
} catch (Exception e) {
} catch (OutOfMemoryError oome) {
oome.printStackTrace(System.err);
}
try {
ensureMinIdle();
} catch (Exception e) {
}
}"
17860,Multithreaded correctness,NN_NAKED_NOTIFY,FP,pool,1725,"latch.notify();
","private void allocate() {
boolean clearOldest = false;
synchronized (this) {
if (isClosed())
return;
Iterator allocationQueueIter = _allocationQueue.iterator();
while (allocationQueueIter.hasNext()) {
Latch latch = (Latch) allocationQueueIter.next();
ObjectQueue pool = (ObjectQueue) (_poolMap.get(latch.getkey()));
if (null == pool) {
pool = new ObjectQueue();
_poolMap.put(latch.getkey(), pool);
_poolList.add(latch.getkey());
}
latch.setPool(pool);
if (!pool.queue.isEmpty()) {
allocationQueueIter.remove();
latch.setPair((ObjectTimestampPair) pool.queue.removeFirst());
pool.incrementInternalProcessingCount();
_totalIdle--;
synchronized (latch) {
latch.notify();
}
continue;
}
if ((_maxTotal > 0) && (_totalActive + _totalIdle + _totalInternalProcessing >= _maxTotal)) {
clearOldest = true;
break;
}
if ((_maxActive < 0 || pool.activeCount + pool.internalProcessingCount < _maxActive) && (_maxTotal < 0 || _totalActive + _totalIdle + _totalInternalProcessing < _maxTotal)) {
allocationQueueIter.remove();
latch.setMayCreate(true);
pool.incrementInternalProcessingCount();
synchronized (latch) {
latch.notify();
}
continue;
}
if (_maxActive < 0) {
break;
}
}
}
if (clearOldest) {
clearOldest();
}
}","private void allocate() {
boolean booleanVar1 = booleanLiteral2;
synchronized (this) {
if (isClosed())
return;
Iterator iteratorVar3 = iteratorLiteral4;
while (iteratorVar3.hasNext()) {
Latch latchVar5 = latchLiteral6;
ObjectQueue objectqueueVar7 = objectqueueLiteral8;
if (null == objectqueueVar7) {
objectqueueVar7 = new ObjectQueue();
_poolMap.put(latchVar5.getkey(), objectqueueVar7);
_poolList.add(latchVar5.getkey());
}
latchVar5.setPool(objectqueueVar7);
if (!objectqueueVar7.queue.isEmpty()) {
iteratorVar3.remove();
latchVar5.setPair((ObjectTimestampPair) objectqueueVar7.queue.removeFirst());
objectqueueVar7.incrementInternalProcessingCount();
_totalIdle--;
synchronized (latchVar5) {
latchVar5.notify();
}
continue;
}
if ((_maxTotal > 0) && (_totalActive + _totalIdle + _totalInternalProcessing >= _maxTotal)) {
booleanVar1 = true;
break;
}
if ((_maxActive < 0 || objectqueueVar7.activeCount + objectqueueVar7.internalProcessingCount < _maxActive) && (_maxTotal < 0 || _totalActive + _totalIdle + _totalInternalProcessing < _maxTotal)) {
iteratorVar3.remove();
latchVar5.setMayCreate(true);
objectqueueVar7.incrementInternalProcessingCount();
synchronized (latchVar5) {
latchVar5.notify();
}
continue;
}
if (_maxActive < 0) {
break;
}
}
}
if (booleanVar1) {
clearOldest();
}
}"
17863,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1728,"} catch(Exception e) {
","private void addObjectToPool(Object key, Object obj, boolean decrementNumActive) throws Exception {
boolean success = true;
if (_testOnReturn && !_factory.validateObject(key, obj)) {
success = false;
} else {
_factory.passivateObject(key, obj);
}
boolean shouldDestroy = !success;
ObjectQueue pool;
boolean doAllocate = false;
synchronized (this) {
pool = (ObjectQueue) (_poolMap.get(key));
if (null == pool) {
pool = new ObjectQueue();
_poolMap.put(key, pool);
_poolList.add(key);
}
if (isClosed()) {
shouldDestroy = true;
} else {
if (_maxIdle >= 0 && (pool.queue.size() >= _maxIdle)) {
shouldDestroy = true;
} else if (success) {
if (_lifo) {
pool.queue.addFirst(new ObjectTimestampPair(obj));
} else {
pool.queue.addLast(new ObjectTimestampPair(obj));
}
_totalIdle++;
if (decrementNumActive) {
pool.decrementActiveCount();
}
doAllocate = true;
}
}
}
if (doAllocate) {
allocate();
}
if (shouldDestroy) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e) {
}
if (decrementNumActive) {
synchronized (this) {
pool.decrementActiveCount();
if (pool.queue.isEmpty() && pool.activeCount == 0 && pool.internalProcessingCount == 0) {
_poolMap.remove(key);
_poolList.remove(key);
}
}
allocate();
}
}
}","private void addObjectToPool(Object key, Object obj, boolean decrementNumActive) throws Exception {
boolean booleanVar1 = booleanLiteral2;
if (_testOnReturn && !_factory.validateObject(key, obj)) {
booleanVar1 = false;
} else {
_factory.passivateObject(key, obj);
}
boolean booleanVar3 = booleanLiteral4;
ObjectQueue objectqueueVar5;
boolean booleanVar6 = booleanLiteral7;
synchronized (this) {
objectqueueVar5 = (ObjectQueue) (_poolMap.get(key));
if (null == objectqueueVar5) {
objectqueueVar5 = new ObjectQueue();
_poolMap.put(key, objectqueueVar5);
_poolList.add(key);
}
if (isClosed()) {
booleanVar3 = true;
} else {
if (_maxIdle >= 0 && (objectqueueVar5.queue.size() >= _maxIdle)) {
booleanVar3 = true;
} else if (booleanVar1) {
if (_lifo) {
objectqueueVar5.queue.addFirst(new ObjectTimestampPair(obj));
} else {
objectqueueVar5.queue.addLast(new ObjectTimestampPair(obj));
}
_totalIdle++;
if (decrementNumActive) {
objectqueueVar5.decrementActiveCount();
}
booleanVar6 = true;
}
}
}
if (booleanVar6) {
allocate();
}
if (booleanVar3) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e) {
}
if (decrementNumActive) {
synchronized (this) {
objectqueueVar5.decrementActiveCount();
if (objectqueueVar5.queue.isEmpty() && objectqueueVar5.activeCount == 0 && objectqueueVar5.internalProcessingCount == 0) {
_poolMap.remove(key);
_poolList.remove(key);
}
}
allocate();
}
}
}"
17868,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1733,"} catch (Exception ex2) {
","public void addObject() throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
Object obj = _factory.makeObject();
try {
assertOpen();
addObjectToPool(obj, false);
} catch (IllegalStateException ex) {
try {
_factory.destroyObject(obj);
} catch (Exception ex2) {
}
throw ex;
}
}","public void addObject() throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
Object objectVar1 = objectLiteral2;
try {
assertOpen();
addObjectToPool(objectVar1, false);
} catch (IllegalStateException ex) {
try {
_factory.destroyObject(objectVar1);
} catch (Exception ex2) {
}
throw ex;
}
}"
17870,Multithreaded correctness,NN_NAKED_NOTIFY,FP,pool,1735,"latch.notify();
","private synchronized void allocate() {
if (isClosed())
return;
for (; ; ) {
if (!_pool.isEmpty() && !_allocationQueue.isEmpty()) {
Latch latch = (Latch) _allocationQueue.removeFirst();
latch.setPair((ObjectTimestampPair) _pool.removeFirst());
_numInternalProcessing++;
synchronized (latch) {
latch.notify();
}
} else {
break;
}
}
for (; ; ) {
if ((!_allocationQueue.isEmpty()) && (_maxActive < 0 || (_numActive + _numInternalProcessing) < _maxActive)) {
Latch latch = (Latch) _allocationQueue.removeFirst();
latch.setMayCreate(true);
_numInternalProcessing++;
synchronized (latch) {
latch.notify();
}
} else {
break;
}
}
}","private synchronized void allocate() {
if (isClosed())
return;
for (; ; ) {
if (!_pool.isEmpty() && !_allocationQueue.isEmpty()) {
Latch latchVar1 = latchLiteral2;
latchVar1.setPair((ObjectTimestampPair) _pool.removeFirst());
_numInternalProcessing++;
synchronized (latchVar1) {
latchVar1.notify();
}
} else {
break;
}
}
for (; ; ) {
if ((!_allocationQueue.isEmpty()) && (_maxActive < 0 || (_numActive + _numInternalProcessing) < _maxActive)) {
Latch latchVar1 = latchLiteral2;
latchVar1.setMayCreate(true);
_numInternalProcessing++;
synchronized (latchVar1) {
latchVar1.notify();
}
} else {
break;
}
}
}"
17880,PERFORMANCE,WMI_WRONG_MAP_ITERATOR,FP,pool,1745,"Stack stack = (Stack)(_pools.get(key));
","public synchronized void clear() {
Iterator it = _pools.keySet().iterator();
while (it.hasNext()) {
Object key = it.next();
Stack stack = (Stack) (_pools.get(key));
destroyStack(key, stack);
}
_totIdle = 0;
_pools.clear();
_activeCount.clear();
}","public synchronized void clear() {
Iterator iteratorVar1 = iteratorLiteral2;
while (iteratorVar1.hasNext()) {
Object objectVar3 = objectLiteral4;
Stack stackVar5 = stackLiteral6;
destroyStack(objectVar3, stackVar5);
}
_totIdle = 0;
_pools.clear();
_activeCount.clear();
}"
17882,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1747,"} catch(Exception e) {
","private synchronized void destroyStack(Object key, Stack stack) {
if (null == stack) {
return;
} else {
if (null != _factory) {
Iterator it = stack.iterator();
while (it.hasNext()) {
try {
_factory.destroyObject(key, it.next());
} catch (Exception e) {
}
}
}
_totIdle -= stack.size();
_activeCount.remove(key);
stack.clear();
}
}","private synchronized void destroyStack(Object key, Stack stack) {
if (null == stack) {
return;
} else {
if (null != _factory) {
Iterator iteratorVar1 = iteratorLiteral2;
while (iteratorVar1.hasNext()) {
try {
_factory.destroyObject(key, iteratorVar1.next());
} catch (Exception e) {
}
}
}
_totIdle -= stack.size();
_activeCount.remove(key);
stack.clear();
}
}"
17944,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1809,"} catch (Exception e) {
","@Override
public void close() {
try {
keyedPool.close();
} catch (Exception e) {
}
}","@Override
public void close() {
try {
keyedPool.close();
} catch (Exception e) {
}
}"
17958,DODGY_CODE,UCF_USELESS_CONTROL_FLOW,FP,pool,1823,"if (!underTest.endEvictionTest(idleObjects)) {
","@Override
public void evict() throws Exception {
assertOpen();
if (getNumIdle() == 0) {
return;
}
PooledObject<T> underTest = null;
EvictionPolicy<T> evictionPolicy = getEvictionPolicy();
synchronized (evictionLock) {
EvictionConfig evictionConfig = new EvictionConfig(getMinEvictableIdleTimeMillis(), getSoftMinEvictableIdleTimeMillis(), getMinIdlePerKey());
boolean testWhileIdle = getTestWhileIdle();
LinkedBlockingDeque<PooledObject<T>> idleObjects = null;
for (int i = 0, m = getNumTests(); i < m; i++) {
if (evictionIterator == null || !evictionIterator.hasNext()) {
if (evictionKeyIterator == null || !evictionKeyIterator.hasNext()) {
List<K> keyCopy = new ArrayList<K>();
Lock readLock = keyLock.readLock();
readLock.lock();
try {
keyCopy.addAll(poolKeyList);
} finally {
readLock.unlock();
}
evictionKeyIterator = keyCopy.iterator();
}
while (evictionKeyIterator.hasNext()) {
evictionKey = evictionKeyIterator.next();
ObjectDeque<T> objectDeque = poolMap.get(evictionKey);
if (objectDeque == null) {
continue;
}
idleObjects = objectDeque.getIdleObjects();
if (getLifo()) {
evictionIterator = idleObjects.descendingIterator();
} else {
evictionIterator = idleObjects.iterator();
}
if (evictionIterator.hasNext()) {
break;
}
evictionIterator = null;
}
}
if (evictionIterator == null) {
return;
}
try {
underTest = evictionIterator.next();
} catch (NoSuchElementException nsee) {
i--;
evictionIterator = null;
continue;
}
if (!underTest.startEvictionTest()) {
i--;
continue;
}
if (evictionPolicy.evict(evictionConfig, underTest, poolMap.get(evictionKey).getIdleObjects().size())) {
destroy(evictionKey, underTest, true);
destroyedByEvictorCount.incrementAndGet();
} else {
if (testWhileIdle) {
boolean active = false;
try {
factory.activateObject(evictionKey, underTest);
active = true;
} catch (Exception e) {
destroy(evictionKey, underTest, true);
destroyedByEvictorCount.incrementAndGet();
}
if (active) {
if (!factory.validateObject(evictionKey, underTest)) {
destroy(evictionKey, underTest, true);
destroyedByEvictorCount.incrementAndGet();
} else {
try {
factory.passivateObject(evictionKey, underTest);
} catch (Exception e) {
destroy(evictionKey, underTest, true);
destroyedByEvictorCount.incrementAndGet();
}
}
}
}
if (!underTest.endEvictionTest(idleObjects)) {
}
}
}
}
}","@Override
public void evict() throws Exception {
assertOpen();
if (getNumIdle() == 0) {
return;
}
PooledObject<T> pooledobject<t>Var1 = pooledobject<t>Literal2;
EvictionPolicy<T> evictionpolicy<t>Var3 = evictionpolicy<t>Literal4;
synchronized (evictionLock) {
EvictionConfig evictionconfigVar5 = evictionconfigLiteral6;
boolean booleanVar7 = booleanLiteral8;
LinkedBlockingDeque<PooledObject<T>> linkedblockingdeque<pooledobject<t>>Var9 = pooledobject<t>Literal2;
for (int intVar22 = intLiteral23, intVar24 = intLiteral25; intVar10 < intLiteral1; intVar10++) {
if (evictionIterator == null || !evictionIterator.hasNext()) {
if (evictionKeyIterator == null || !evictionKeyIterator.hasNext()) {
List<K> list<k>Var14 = list<k>Literal15;
Lock lockVar16 = lockLiteral17;
lockVar16.lock();
try {
list<k>Var14.addAll(poolKeyList);
} finally {
lockVar16.unlock();
}
evictionKeyIterator = list<k>Var14.iterator();
}
while (evictionKeyIterator.hasNext()) {
evictionKey = evictionKeyIterator.next();
ObjectDeque<T> objectdeque<t>Var18 = objectdeque<t>Literal19;
if (objectdeque<t>Var18 == null) {
continue;
}
linkedblockingdeque<pooledobject<t>>Var9 = objectdeque<t>Var18.getIdleObjects();
if (getLifo()) {
evictionIterator = linkedblockingdeque<pooledobject<t>>Var9.descendingIterator();
} else {
evictionIterator = linkedblockingdeque<pooledobject<t>>Var9.iterator();
}
if (evictionIterator.hasNext()) {
break;
}
evictionIterator = null;
}
}
if (evictionIterator == null) {
return;
}
try {
pooledobject<t>Var1 = evictionIterator.next();
} catch (NoSuchElementException nsee) {
intVar10--;
evictionIterator = null;
continue;
}
if (!pooledobject<t>Var1.startEvictionTest()) {
intVar10--;
continue;
}
if (evictionpolicy<t>Var3.evict(evictionconfigVar5, pooledobject<t>Var1, poolMap.get(evictionKey).getIdleObjects().size())) {
destroy(evictionKey, pooledobject<t>Var1, true);
destroyedByEvictorCount.incrementAndGet();
} else {
if (booleanVar7) {
boolean booleanVar20 = booleanLiteral21;
try {
factory.activateObject(evictionKey, pooledobject<t>Var1);
booleanVar20 = true;
} catch (Exception e) {
destroy(evictionKey, pooledobject<t>Var1, true);
destroyedByEvictorCount.incrementAndGet();
}
if (booleanVar20) {
if (!factory.validateObject(evictionKey, pooledobject<t>Var1)) {
destroy(evictionKey, pooledobject<t>Var1, true);
destroyedByEvictorCount.incrementAndGet();
} else {
try {
factory.passivateObject(evictionKey, pooledobject<t>Var1);
} catch (Exception e) {
destroy(evictionKey, pooledobject<t>Var1, true);
destroyedByEvictorCount.incrementAndGet();
}
}
}
}
if (!pooledobject<t>Var1.endEvictionTest(linkedblockingdeque<pooledobject<t>>Var9)) {
}
}
}
}
}"
17962,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1827,"} catch (Exception e) {
","@Override
public synchronized void addObject() throws Exception {
assertOpen();
if (factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
T obj = factory.makeObject().getObject();
createCount++;
PooledSoftReference<T> ref = new PooledSoftReference<T>(new SoftReference<T>(obj, refQueue));
allReferences.add(ref);
boolean success = true;
if (!factory.validateObject(ref)) {
success = false;
} else {
factory.passivateObject(ref);
}
boolean shouldDestroy = !success;
if (success) {
idleReferences.add(ref);
notifyAll();
}
if (shouldDestroy) {
try {
destroy(ref);
} catch (Exception e) {
}
}
}","@Override
public synchronized void addObject() throws Exception {
assertOpen();
if (factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
T tVar1 = tLiteral2;
createCount++;
PooledSoftReference<T> pooledsoftreference<t>Var3 = pooledsoftreference<t>Literal4;
allReferences.add(pooledsoftreference<t>Var3);
boolean booleanVar5 = booleanLiteral6;
if (!factory.validateObject(pooledsoftreference<t>Var3)) {
booleanVar5 = false;
} else {
factory.passivateObject(pooledsoftreference<t>Var3);
}
boolean booleanVar7 = booleanLiteral8;
if (booleanVar5) {
idleReferences.add(pooledsoftreference<t>Var3);
notifyAll();
}
if (booleanVar7) {
try {
destroy(pooledsoftreference<t>Var3);
} catch (Exception e) {
}
}
}"
17965,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1830,"} catch (Exception e) {
","public void returnObject(final V obj) {
try {
keyedPool.returnObject(key, obj);
} catch (Exception e) {
}
}","public void returnObject(final V obj) {
try {
keyedPool.returnObject(key, obj);
} catch (Exception e) {
}
}"
17977,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1842,"} catch (Exception e) {
","public void returnObject(final T obj) {
synchronized (lock) {
try {
pool.returnObject(obj);
} catch (Exception e) {
}
}
}","public void returnObject(final T obj) {
synchronized (lock) {
try {
pool.returnObject(obj);
} catch (Exception e) {
}
}
}"
17982,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1847,"} catch (Exception e) {
","public void invalidateObject(final T obj) {
synchronized (lock) {
try {
pool.invalidateObject(obj);
} catch (Exception e) {
}
}
}","public void invalidateObject(final T obj) {
synchronized (lock) {
try {
pool.invalidateObject(obj);
} catch (Exception e) {
}
}
}"
17984,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1849,"} catch (Exception e) {
","public void invalidateObject(final V obj) {
try {
keyedPool.invalidateObject(key, obj);
} catch (Exception e) {
}
}","public void invalidateObject(final V obj) {
try {
keyedPool.invalidateObject(key, obj);
} catch (Exception e) {
}
}"
17993,PERFORMANCE,WMI_WRONG_MAP_ITERATOR,FP,pool,1858,"buf.append(""\t"").append(key).append("" "").append(_poolMap.get(key)).append(""\n"");
","synchronized String debugInfo() {
StringBuffer buf = new StringBuffer();
buf.append(""Active: "").append(getNumActive()).append(""\n"");
buf.append(""Idle: "").append(getNumIdle()).append(""\n"");
Iterator<K> it = _poolMap.keySet().iterator();
while (it.hasNext()) {
K key = it.next();
buf.append(""\t"").append(key).append("" "").append(_poolMap.get(key)).append(""\n"");
}
return buf.toString();
}","synchronized String debugInfo() {
StringBuffer stringbufferVar1 = stringbufferLiteral2;
stringbufferVar1.append(""Active: "").append(getNumActive()).append(""\n"");
stringbufferVar1.append(""Idle: "").append(getNumIdle()).append(""\n"");
Iterator<K> iterator<k>Var3 = iterator<k>Literal4;
while (iterator<k>Var3.hasNext()) {
K kVar5 = kLiteral6;
stringbufferVar1.append(""\t"").append(kVar5).append("" "").append(_poolMap.get(kVar5)).append(""\n"");
}
return stringbufferVar1.toString();
}"
17996,Multithreaded correctness,NN_NAKED_NOTIFY,FP,pool,1861,"latch.notify();
","private void allocate() {
boolean clearOldest = false;
synchronized (this) {
if (isClosed())
return;
Iterator<Latch<K, V>> allocationQueueIter = _allocationQueue.iterator();
while (allocationQueueIter.hasNext()) {
Latch<K, V> latch = allocationQueueIter.next();
ObjectQueue pool = (_poolMap.get(latch.getkey()));
if (null == pool) {
pool = new ObjectQueue();
_poolMap.put(latch.getkey(), pool);
_poolList.add(latch.getkey());
}
latch.setPool(pool);
if (!pool.queue.isEmpty()) {
allocationQueueIter.remove();
latch.setPair(pool.queue.removeFirst());
pool.incrementInternalProcessingCount();
_totalIdle--;
synchronized (latch) {
latch.notify();
}
continue;
}
if ((_maxTotal > 0) && (_totalActive + _totalIdle + _totalInternalProcessing >= _maxTotal)) {
clearOldest = true;
break;
}
if ((_maxActive < 0 || pool.activeCount + pool.internalProcessingCount < _maxActive) && (_maxTotal < 0 || _totalActive + _totalIdle + _totalInternalProcessing < _maxTotal)) {
allocationQueueIter.remove();
latch.setMayCreate(true);
pool.incrementInternalProcessingCount();
synchronized (latch) {
latch.notify();
}
continue;
}
if (_maxActive < 0) {
break;
}
}
}
if (clearOldest) {
clearOldest();
}
}","private void allocate() {
boolean booleanVar1 = booleanLiteral2;
synchronized (this) {
if (isClosed())
return;
Iterator<Latch<K, V>> iterator<latch<k,v>>Var3 = iterator<latch<k,v>>Literal4;
while (iterator<latch<k,v>>Var3.hasNext()) {
Latch<K, V> latch<k,v>Var5 = latch<k,v>Literal6;
ObjectQueue objectqueueVar7 = objectqueueLiteral8;
if (null == objectqueueVar7) {
objectqueueVar7 = new ObjectQueue();
_poolMap.put(latch<k,v>Var5.getkey(), objectqueueVar7);
_poolList.add(latch<k,v>Var5.getkey());
}
latch<k,v>Var5.setPool(objectqueueVar7);
if (!objectqueueVar7.queue.isEmpty()) {
iterator<latch<k,v>>Var3.remove();
latch<k,v>Var5.setPair(objectqueueVar7.queue.removeFirst());
objectqueueVar7.incrementInternalProcessingCount();
_totalIdle--;
synchronized (latch<k,v>Var5) {
latch<k,v>Var5.notify();
}
continue;
}
if ((_maxTotal > 0) && (_totalActive + _totalIdle + _totalInternalProcessing >= _maxTotal)) {
booleanVar1 = true;
break;
}
if ((_maxActive < 0 || objectqueueVar7.activeCount + objectqueueVar7.internalProcessingCount < _maxActive) && (_maxTotal < 0 || _totalActive + _totalIdle + _totalInternalProcessing < _maxTotal)) {
iterator<latch<k,v>>Var3.remove();
latch<k,v>Var5.setMayCreate(true);
objectqueueVar7.incrementInternalProcessingCount();
synchronized (latch<k,v>Var5) {
latch<k,v>Var5.notify();
}
continue;
}
if (_maxActive < 0) {
break;
}
}
}
if (booleanVar1) {
clearOldest();
}
}"
17998,PERFORMANCE,WMI_WRONG_MAP_ITERATOR,FP,pool,1863,"ObjectQueue pool = _poolMap.get(key);
","@Deprecated
@Override
public void setFactory(KeyedPoolableObjectFactory<K, V> factory) throws IllegalStateException {
Map<K, List<ObjectTimestampPair<V>>> toDestroy = new HashMap<K, List<ObjectTimestampPair<V>>>();
final KeyedPoolableObjectFactory<K, V> oldFactory = _factory;
synchronized (this) {
assertOpen();
if (0 < getNumActive()) {
throw new IllegalStateException(""Objects are already active"");
} else {
for (Iterator<K> it = _poolMap.keySet().iterator(); it.hasNext(); ) {
K key = it.next();
ObjectQueue pool = _poolMap.get(key);
if (pool != null) {
List<ObjectTimestampPair<V>> objects = new ArrayList<ObjectTimestampPair<V>>();
objects.addAll(pool.queue);
toDestroy.put(key, objects);
it.remove();
_poolList.remove(key);
_totalIdle = _totalIdle - pool.queue.size();
_totalInternalProcessing = _totalInternalProcessing + pool.queue.size();
pool.queue.clear();
}
}
_factory = factory;
}
}
destroy(toDestroy, oldFactory);
}","@Deprecated
@Override
public void setFactory(KeyedPoolableObjectFactory<K, V> factory) throws IllegalStateException {
Map<K, List<ObjectTimestampPair<V>>> map<k,list<objecttimestamppair<v>>>Var1 = map<k,list<objecttimestamppair<v>>>Literal2;
final KeyedPoolableObjectFactory<K, V> keyedpoolableobjectfactory<k,v>Var3 = keyedpoolableobjectfactory<k,v>Literal4;
synchronized (this) {
assertOpen();
if (0 < getNumActive()) {
throw new IllegalStateException(""Objects are already active"");
} else {
for (Iterator<K> iterator<k>Var13 = iterator<k>Literal14; iterator<k>Var5.hasNext(); ) {
K kVar7 = kLiteral8;
ObjectQueue objectqueueVar9 = objectqueueLiteral10;
if (objectqueueVar9 != null) {
List<ObjectTimestampPair<V>> list<objecttimestamppair<v>>Var11 = list<objecttimestamppair<v>>Literal12;
list<objecttimestamppair<v>>Var11.addAll(objectqueueVar9.queue);
map<k,list<objecttimestamppair<v>>>Var1.put(kVar7, list<objecttimestamppair<v>>Var11);
iterator<k>Var5.remove();
_poolList.remove(kVar7);
_totalIdle = _totalIdle - objectqueueVar9.queue.size();
_totalInternalProcessing = _totalInternalProcessing + objectqueueVar9.queue.size();
objectqueueVar9.queue.clear();
}
}
_factory = factory;
}
}
destroy(map<k,list<objecttimestamppair<v>>>Var1, keyedpoolableobjectfactory<k,v>Var3);
}"
18005,Multithreaded correctness,NN_NAKED_NOTIFY,FP,pool,1870,"latch.notify();
","private synchronized void allocate() {
if (isClosed())
return;
for (; ; ) {
if (!_pool.isEmpty() && !_allocationQueue.isEmpty()) {
Latch<T> latch = _allocationQueue.removeFirst();
latch.setPair(_pool.removeFirst());
_numInternalProcessing++;
synchronized (latch) {
latch.notify();
}
} else {
break;
}
}
for (; ; ) {
if ((!_allocationQueue.isEmpty()) && (_maxActive < 0 || (_numActive + _numInternalProcessing) < _maxActive)) {
Latch<T> latch = _allocationQueue.removeFirst();
latch.setMayCreate(true);
_numInternalProcessing++;
synchronized (latch) {
latch.notify();
}
} else {
break;
}
}
}","private synchronized void allocate() {
if (isClosed())
return;
for (; ; ) {
if (!_pool.isEmpty() && !_allocationQueue.isEmpty()) {
Latch<T> latch<t>Var1 = latch<t>Literal2;
latch<t>Var1.setPair(_pool.removeFirst());
_numInternalProcessing++;
synchronized (latch<t>Var1) {
latch<t>Var1.notify();
}
} else {
break;
}
}
for (; ; ) {
if ((!_allocationQueue.isEmpty()) && (_maxActive < 0 || (_numActive + _numInternalProcessing) < _maxActive)) {
Latch<T> latch<t>Var1 = latch<t>Literal2;
latch<t>Var1.setMayCreate(true);
_numInternalProcessing++;
synchronized (latch<t>Var1) {
latch<t>Var1.notify();
}
} else {
break;
}
}
}"
18006,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1871,"} catch(Exception e) {
","public void evict() throws Exception {
assertOpen();
synchronized (this) {
if (_pool.isEmpty()) {
return;
}
if (null == _evictionCursor) {
_evictionCursor = _pool.cursor(_lifo ? _pool.size() : 0);
}
}
for (int i = 0, m = getNumTests(); i < m; i++) {
final ObjectTimestampPair<T> pair;
synchronized (this) {
if ((_lifo && !_evictionCursor.hasPrevious()) || !_lifo && !_evictionCursor.hasNext()) {
_evictionCursor.close();
_evictionCursor = _pool.cursor(_lifo ? _pool.size() : 0);
}
pair = _lifo ? _evictionCursor.previous() : _evictionCursor.next();
_evictionCursor.remove();
_numInternalProcessing++;
}
boolean removeObject = false;
final long idleTimeMilis = System.currentTimeMillis() - pair.tstamp;
if ((getMinEvictableIdleTimeMillis() > 0) && (idleTimeMilis > getMinEvictableIdleTimeMillis())) {
removeObject = true;
} else if ((getSoftMinEvictableIdleTimeMillis() > 0) && (idleTimeMilis > getSoftMinEvictableIdleTimeMillis()) && ((getNumIdle() + 1) > getMinIdle())) {
removeObject = true;
}
if (getTestWhileIdle() && !removeObject) {
boolean active = false;
try {
_factory.activateObject(pair.value);
active = true;
} catch (Exception e) {
removeObject = true;
}
if (active) {
if (!_factory.validateObject(pair.value)) {
removeObject = true;
} else {
try {
_factory.passivateObject(pair.value);
} catch (Exception e) {
removeObject = true;
}
}
}
}
if (removeObject) {
try {
_factory.destroyObject(pair.value);
} catch (Exception e) {
}
}
synchronized (this) {
if (!removeObject) {
_evictionCursor.add(pair);
if (_lifo) {
_evictionCursor.previous();
}
}
_numInternalProcessing--;
}
}
allocate();
}","public void evict() throws Exception {
assertOpen();
synchronized (this) {
if (_pool.isEmpty()) {
return;
}
if (null == _evictionCursor) {
_evictionCursor = _pool.cursor(_lifo ? _pool.size() : 0);
}
}
for (int intVar11 = intLiteral12, intVar13 = intLiteral14; intVar1 < intLiteral1; intVar1++) {
final ObjectTimestampPair<T> objecttimestamppair<t>Var5;
synchronized (this) {
if ((_lifo && !_evictionCursor.hasPrevious()) || !_lifo && !_evictionCursor.hasNext()) {
_evictionCursor.close();
_evictionCursor = _pool.cursor(_lifo ? _pool.size() : 0);
}
objecttimestamppair<t>Var5 = _lifo ? _evictionCursor.previous() : _evictionCursor.next();
_evictionCursor.remove();
_numInternalProcessing++;
}
boolean booleanVar6 = booleanLiteral7;
final long longVar8 = longLiteral9;
if ((getMinEvictableIdleTimeMillis() > 0) && (longVar8 > getMinEvictableIdleTimeMillis())) {
booleanVar6 = true;
} else if ((getSoftMinEvictableIdleTimeMillis() > 0) && (longVar8 > getSoftMinEvictableIdleTimeMillis()) && ((getNumIdle() + 1) > getMinIdle())) {
booleanVar6 = true;
}
if (getTestWhileIdle() && !booleanVar6) {
boolean booleanVar10 = booleanLiteral7;
try {
_factory.activateObject(objecttimestamppair<t>Var5.value);
booleanVar10 = true;
} catch (Exception e) {
booleanVar6 = true;
}
if (booleanVar10) {
if (!_factory.validateObject(objecttimestamppair<t>Var5.value)) {
booleanVar6 = true;
} else {
try {
_factory.passivateObject(objecttimestamppair<t>Var5.value);
} catch (Exception e) {
booleanVar6 = true;
}
}
}
}
if (booleanVar6) {
try {
_factory.destroyObject(objecttimestamppair<t>Var5.value);
} catch (Exception e) {
}
}
synchronized (this) {
if (!booleanVar6) {
_evictionCursor.add(objecttimestamppair<t>Var5);
if (_lifo) {
_evictionCursor.previous();
}
}
_numInternalProcessing--;
}
}
allocate();
}"
18008,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1873,"} catch (Exception e2) {
","@Override
public void returnObject(T obj) throws Exception {
try {
addObjectToPool(obj, true);
} catch (Exception e) {
if (_factory != null) {
try {
_factory.destroyObject(obj);
} catch (Exception e2) {
}
// TODO: Correctness here depends on control in addObjectToPool.
synchronized (this) {
_numActive--;
}
allocate();
}
}
}","@Override
public void returnObject(T obj) throws Exception {
try {
addObjectToPool(obj, true);
} catch (Exception e) {
if (_factory != null) {
try {
_factory.destroyObject(obj);
} catch (Exception e2) {
}
// TODO: Correctness here depends on control in addObjectToPool.
synchronized (this) {
_numActive--;
}
allocate();
}
}
}"
18010,Multithreaded correctness,NO_NOTIFY_NOT_NOTIFYALL,FP,pool,1875,"l.notify();
","@Override
public void close() throws Exception {
super.close();
synchronized (this) {
clear();
startEvictor(-1L);
while (_allocationQueue.size() > 0) {
Latch<T> l = _allocationQueue.removeFirst();
synchronized (l) {
l.notify();
}
}
}
}","@Override
public void close() throws Exception {
super.close();
synchronized (this) {
clear();
startEvictor(-1L);
while (_allocationQueue.size() > 0) {
Latch<T> latch<t>Var1 = latch<t>Literal2;
synchronized (latch<t>Var1) {
latch<t>Var1.notify();
}
}
}
}"
18019,PERFORMANCE,DM_NUMBER_CTOR,FP,pool,1884,"_activeCount.put(key,new Integer(1));
","private void incrementActiveCount(K key) {
_totActive++;
Integer old = _activeCount.get(key);
if (null == old) {
_activeCount.put(key, new Integer(1));
} else {
_activeCount.put(key, new Integer(old.intValue() + 1));
}
}","private void incrementActiveCount(K key) {
_totActive++;
Integer integerVar1 = integerLiteral2;
if (null == integerVar1) {
_activeCount.put(key, new Integer(1));
} else {
_activeCount.put(key, new Integer(integerVar1.intValue() + 1));
}
}"
18027,DODGY_CODE,RI_REDUNDANT_INTERFACES,FP,pool,1892,"this(null,DEFAULT_MAX_SLEEPING,DEFAULT_INIT_SLEEPING_CAPACITY);
}
@Deprecated
public StackObjectPool(int maxIdle) {
this(null,maxIdle,DEFAULT_INIT_SLEEPING_CAPACITY);
}
@Deprecated
public StackObjectPool(int maxIdle, int initIdleCapacity) {
this(null,maxIdle,initIdleCapacity);
}
public StackObjectPool(PoolableObjectFactory<T> factory) {
this(factory,DEFAULT_MAX_SLEEPING,DEFAULT_INIT_SLEEPING_CAPACITY);
}
public StackObjectPool(PoolableObjectFactory<T> factory, int maxIdle) {
this(factory,maxIdle,DEFAULT_INIT_SLEEPING_CAPACITY);
}
public StackObjectPool(PoolableObjectFactory<T> factory, int maxIdle, int initIdleCapacity) {
_factory = factory;
_maxSleeping = (maxIdle < 0 ? DEFAULT_MAX_SLEEPING : maxIdle);
int initcapacity = (initIdleCapacity < 1 ? DEFAULT_INIT_SLEEPING_CAPACITY : initIdleCapacity);
_pool = new Stack<T>();
_pool.ensureCapacity( initcapacity > _maxSleeping ? _maxSleeping : initcapacity);
}
@Override
public synchronized T borrowObject() throws Exception {
assertOpen();
T obj = null;
boolean newlyCreated = false;
while (null == obj) {
if (!_pool.empty()) {
obj = _pool.pop();
} else {
if(null == _factory) {
throw new NoSuchElementException();
} else {
obj = _factory.makeObject();
newlyCreated = true;
if (obj == null) {
throw new NoSuchElementException(""PoolableObjectFactory.makeObject() returned null."");
}
}
}
if (null != _factory && null != obj) {
try {
_factory.activateObject(obj);
if (!_factory.validateObject(obj)) {
throw new Exception(""ValidateObject failed"");
}
} catch (Throwable t) {
PoolUtils.checkRethrow(t);
try {
_factory.destroyObject(obj);
} catch (Throwable t2) {
PoolUtils.checkRethrow(t2);
} finally {
obj = null;
}
if (newlyCreated) {
throw new NoSuchElementException(
""Could not create a validated object, cause: "" +
t.getMessage());
}
}
}
}
_numActive++;
return obj;
}
@Override
public synchronized void returnObject(T obj) throws Exception {
boolean success = !isClosed();
if(null != _factory) {
if(!_factory.validateObject(obj)) {
success = false;
} else {
try {
_factory.passivateObject(obj);
} catch(Exception e) {
success = false;
}
}
}
boolean shouldDestroy = !success;
_numActive--;
if (success) {
T toBeDestroyed = null;
if(_pool.size() >= _maxSleeping) {
shouldDestroy = true;
toBeDestroyed = _pool.remove(0); 
}
_pool.push(obj);
obj = toBeDestroyed; 
}
notifyAll(); 
if(shouldDestroy) { 
try {
_factory.destroyObject(obj);
} catch(Exception e) {
}
}
}
@Override
public synchronized void invalidateObject(T obj) throws Exception {
_numActive--;
if (null != _factory) {
_factory.destroyObject(obj);
}
notifyAll(); 
}
@Override
public synchronized int getNumIdle() {
return _pool.size();
}
@Override
public synchronized int getNumActive() {
return _numActive;
}
@Override
public synchronized void clear() {
if(null != _factory) {
Iterator<T> it = _pool.iterator();
while(it.hasNext()) {
try {
_factory.destroyObject(it.next());
} catch(Exception e) {
}
}
}
_pool.clear();
}
@Override
public void close() throws Exception {
super.close();
clear();
}
@Override
public synchronized void addObject() throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
T obj = _factory.makeObject();
boolean success = true;
if(!_factory.validateObject(obj)) {
success = false;
} else {
_factory.passivateObject(obj);
}
boolean shouldDestroy = !success;
if (success) {
T toBeDestroyed = null;
if(_pool.size() >= _maxSleeping) {
shouldDestroy = true;
toBeDestroyed = _pool.remove(0); 
}
_pool.push(obj);
obj = toBeDestroyed; 
}
notifyAll(); 
if(shouldDestroy) { 
try {
_factory.destroyObject(obj);
} catch(Exception e) {
}
}
}
@Deprecated
@Override
public synchronized void setFactory(PoolableObjectFactory<T> factory) throws IllegalStateException {
assertOpen();
if(0 < getNumActive()) {
throw new IllegalStateException(""Objects are already active"");
} else {
clear();
_factory = factory;
}
}
protected static final int DEFAULT_MAX_SLEEPING  = 8;
protected static final int DEFAULT_INIT_SLEEPING_CAPACITY = 4;
@Deprecated
protected Stack<T> _pool = null;
@Deprecated
protected PoolableObjectFactory<T> _factory = null;
@Deprecated
protected int _maxSleeping = DEFAULT_MAX_SLEEPING;
@Deprecated
protected int _numActive = 0;
public synchronized PoolableObjectFactory<T> getFactory() {
return _factory;
}
public int getMaxSleeping() {
return _maxSleeping;
","@Override
public synchronized void returnObject(T obj) throws Exception {
boolean success = !isClosed();
if (null != _factory) {
if (!_factory.validateObject(obj)) {
success = false;
} else {
try {
_factory.passivateObject(obj);
} catch (Exception e) {
success = false;
}
}
}
boolean shouldDestroy = !success;
_numActive--;
if (success) {
T toBeDestroyed = null;
if (_pool.size() >= _maxSleeping) {
shouldDestroy = true;
toBeDestroyed = _pool.remove(0);
}
_pool.push(obj);
obj = toBeDestroyed;
}
notifyAll();
if (shouldDestroy) {
try {
_factory.destroyObject(obj);
} catch (Exception e) {
}
}
}","@Override
public synchronized void returnObject(T obj) throws Exception {
boolean booleanVar1 = booleanLiteral2;
if (null != _factory) {
if (!_factory.validateObject(obj)) {
booleanVar1 = false;
} else {
try {
_factory.passivateObject(obj);
} catch (Exception e) {
booleanVar1 = false;
}
}
}
boolean booleanVar3 = booleanLiteral4;
_numActive--;
if (booleanVar1) {
T tVar5 = tLiteral6;
if (_pool.size() >= _maxSleeping) {
booleanVar3 = true;
tVar5 = _pool.remove(0);
}
_pool.push(obj);
obj = tVar5;
}
notifyAll();
if (booleanVar3) {
try {
_factory.destroyObject(obj);
} catch (Exception e) {
}
}
}"
18029,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1894,"} catch(Exception e) {
","@Override
public synchronized void clear() {
if (null != _factory) {
Iterator<T> it = _pool.iterator();
while (it.hasNext()) {
try {
_factory.destroyObject(it.next());
} catch (Exception e) {
}
}
}
_pool.clear();
}","@Override
public synchronized void clear() {
if (null != _factory) {
Iterator<T> iterator<t>Var1 = iterator<t>Literal2;
while (iterator<t>Var1.hasNext()) {
try {
_factory.destroyObject(iterator<t>Var1.next());
} catch (Exception e) {
}
}
}
_pool.clear();
}"
18035,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1900,"} catch (Exception e) {
","public void returnObject(final Object key, final Object obj) {
synchronized (lock) {
try {
keyedPool.returnObject(key, obj);
} catch (Exception e) {
}
}
}","public void returnObject(final Object key, final Object obj) {
synchronized (lock) {
try {
keyedPool.returnObject(key, obj);
} catch (Exception e) {
}
}
}"
18039,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1904,"} catch (Exception e) {
","public void invalidateObject(final Object key, final Object obj) {
synchronized (lock) {
try {
keyedPool.invalidateObject(key, obj);
} catch (Exception e) {
}
}
}","public void invalidateObject(final Object key, final Object obj) {
synchronized (lock) {
try {
keyedPool.invalidateObject(key, obj);
} catch (Exception e) {
}
}
}"
18044,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1909,"} catch (Exception e) {
","public void invalidateObject(final Object obj) {
try {
keyedPool.invalidateObject(key, obj);
} catch (Exception e) {
}
}","public void invalidateObject(final Object obj) {
try {
keyedPool.invalidateObject(key, obj);
} catch (Exception e) {
}
}"
18046,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1911,"} catch (Exception e) {
","public void returnObject(final Object obj) {
if (type.isInstance(obj)) {
try {
pool.returnObject(obj);
} catch (Exception e) {
}
} else {
throw new ClassCastException(""Returned object is not of type: "" + type.getName() + "" was: "" + obj);
}
}","public void returnObject(final Object obj) {
if (type.isInstance(obj)) {
try {
pool.returnObject(obj);
} catch (Exception e) {
}
} else {
throw new ClassCastException(""Returned object is not of type: "" + type.getName() + "" was: "" + obj);
}
}"
18049,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1914,"} catch (Exception e) {
","public void close() {
try {
pool.close();
} catch (Exception e) {
}
}","public void close() {
try {
pool.close();
} catch (Exception e) {
}
}"
18054,DODGY_CODE,RI_REDUNDANT_INTERFACES,FP,pool,1919,"public class GenericKeyedObjectPool extends BaseKeyedObjectPool implements KeyedObjectPool {
public static final byte WHEN_EXHAUSTED_FAIL   = 0;
public static final byte WHEN_EXHAUSTED_BLOCK  = 1;
public static final byte WHEN_EXHAUSTED_GROW   = 2;
public static final int DEFAULT_MAX_IDLE  = 8;
public static final int DEFAULT_MAX_ACTIVE  = 8;
public static final int DEFAULT_MAX_TOTAL  = -1;
public static final byte DEFAULT_WHEN_EXHAUSTED_ACTION = WHEN_EXHAUSTED_BLOCK;
public static final long DEFAULT_MAX_WAIT = -1L;
public static final boolean DEFAULT_TEST_ON_BORROW = false;
public static final boolean DEFAULT_TEST_ON_RETURN = false;
public static final boolean DEFAULT_TEST_WHILE_IDLE = false;
public static final long DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS = -1L;
public static final int DEFAULT_NUM_TESTS_PER_EVICTION_RUN = 3;
public static final long DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS = 1000L * 60L * 30L;
public static final int DEFAULT_MIN_IDLE = 0;
public static final boolean DEFAULT_LIFO = true;
public GenericKeyedObjectPool() {
this(null, DEFAULT_MAX_ACTIVE, DEFAULT_WHEN_EXHAUSTED_ACTION, DEFAULT_MAX_WAIT, DEFAULT_MAX_IDLE,
DEFAULT_TEST_ON_BORROW, DEFAULT_TEST_ON_RETURN, DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS,
DEFAULT_NUM_TESTS_PER_EVICTION_RUN, DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS, DEFAULT_TEST_WHILE_IDLE);
}
public GenericKeyedObjectPool(KeyedPoolableObjectFactory factory) {
this(factory, DEFAULT_MAX_ACTIVE, DEFAULT_WHEN_EXHAUSTED_ACTION, DEFAULT_MAX_WAIT, DEFAULT_MAX_IDLE,
DEFAULT_TEST_ON_BORROW, DEFAULT_TEST_ON_RETURN, DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS,
DEFAULT_NUM_TESTS_PER_EVICTION_RUN, DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS, DEFAULT_TEST_WHILE_IDLE);
}
public GenericKeyedObjectPool(KeyedPoolableObjectFactory factory, GenericKeyedObjectPool.Config config) {
this(factory, config.maxActive, config.whenExhaustedAction, config.maxWait, config.maxIdle, config.maxTotal,
config.minIdle, config.testOnBorrow, config.testOnReturn, config.timeBetweenEvictionRunsMillis,
config.numTestsPerEvictionRun, config.minEvictableIdleTimeMillis, config.testWhileIdle, config.lifo);
}
public GenericKeyedObjectPool(KeyedPoolableObjectFactory factory, int maxActive) {
this(factory,maxActive, DEFAULT_WHEN_EXHAUSTED_ACTION, DEFAULT_MAX_WAIT, DEFAULT_MAX_IDLE,
DEFAULT_TEST_ON_BORROW, DEFAULT_TEST_ON_RETURN, DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS,
DEFAULT_NUM_TESTS_PER_EVICTION_RUN, DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS, DEFAULT_TEST_WHILE_IDLE);
}
public GenericKeyedObjectPool(KeyedPoolableObjectFactory factory, int maxActive, byte whenExhaustedAction,
long maxWait) {
this(factory, maxActive, whenExhaustedAction, maxWait, DEFAULT_MAX_IDLE, DEFAULT_TEST_ON_BORROW,
DEFAULT_TEST_ON_RETURN, DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS, DEFAULT_NUM_TESTS_PER_EVICTION_RUN,
DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS, DEFAULT_TEST_WHILE_IDLE);
}
public GenericKeyedObjectPool(KeyedPoolableObjectFactory factory, int maxActive, byte whenExhaustedAction,
long maxWait, boolean testOnBorrow, boolean testOnReturn) {
this(factory, maxActive, whenExhaustedAction, maxWait, DEFAULT_MAX_IDLE,testOnBorrow,testOnReturn,
DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS, DEFAULT_NUM_TESTS_PER_EVICTION_RUN,
DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS, DEFAULT_TEST_WHILE_IDLE);
}
public GenericKeyedObjectPool(KeyedPoolableObjectFactory factory, int maxActive, byte whenExhaustedAction,
long maxWait, int maxIdle) {
this(factory, maxActive, whenExhaustedAction, maxWait, maxIdle, DEFAULT_TEST_ON_BORROW, DEFAULT_TEST_ON_RETURN,
DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS, DEFAULT_NUM_TESTS_PER_EVICTION_RUN,
DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS, DEFAULT_TEST_WHILE_IDLE);
}
public GenericKeyedObjectPool(KeyedPoolableObjectFactory factory, int maxActive, byte whenExhaustedAction,
long maxWait, int maxIdle, boolean testOnBorrow, boolean testOnReturn) {
this(factory, maxActive, whenExhaustedAction, maxWait, maxIdle, testOnBorrow, testOnReturn,
DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS, DEFAULT_NUM_TESTS_PER_EVICTION_RUN,
DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS, DEFAULT_TEST_WHILE_IDLE);
}
public GenericKeyedObjectPool(KeyedPoolableObjectFactory factory, int maxActive, byte whenExhaustedAction,
long maxWait, int maxIdle, boolean testOnBorrow, boolean testOnReturn, long timeBetweenEvictionRunsMillis,
int numTestsPerEvictionRun, long minEvictableIdleTimeMillis, boolean testWhileIdle) {
this(factory, maxActive, whenExhaustedAction, maxWait, maxIdle, GenericKeyedObjectPool.DEFAULT_MAX_TOTAL,
testOnBorrow, testOnReturn, timeBetweenEvictionRunsMillis, numTestsPerEvictionRun,
minEvictableIdleTimeMillis, testWhileIdle);
}
public GenericKeyedObjectPool(KeyedPoolableObjectFactory factory, int maxActive, byte whenExhaustedAction,
long maxWait, int maxIdle, int maxTotal, boolean testOnBorrow, boolean testOnReturn,
long timeBetweenEvictionRunsMillis, int numTestsPerEvictionRun, long minEvictableIdleTimeMillis,
boolean testWhileIdle) {
this(factory, maxActive, whenExhaustedAction, maxWait, maxIdle, maxTotal,
GenericKeyedObjectPool.DEFAULT_MIN_IDLE, testOnBorrow, testOnReturn, timeBetweenEvictionRunsMillis,
numTestsPerEvictionRun, minEvictableIdleTimeMillis, testWhileIdle);
}
public GenericKeyedObjectPool(KeyedPoolableObjectFactory factory, int maxActive, byte whenExhaustedAction,
long maxWait, int maxIdle, int maxTotal, int minIdle, boolean testOnBorrow, boolean testOnReturn,
long timeBetweenEvictionRunsMillis, int numTestsPerEvictionRun, long minEvictableIdleTimeMillis,
boolean testWhileIdle) {
this(factory, maxActive, whenExhaustedAction, maxWait, maxIdle, maxTotal, minIdle, testOnBorrow, testOnReturn,
timeBetweenEvictionRunsMillis, numTestsPerEvictionRun, minEvictableIdleTimeMillis, testWhileIdle,
DEFAULT_LIFO);
}
public GenericKeyedObjectPool(KeyedPoolableObjectFactory factory, int maxActive, byte whenExhaustedAction,
long maxWait, int maxIdle, int maxTotal, int minIdle, boolean testOnBorrow, boolean testOnReturn,
long timeBetweenEvictionRunsMillis, int numTestsPerEvictionRun, long minEvictableIdleTimeMillis,
boolean testWhileIdle, boolean lifo) {
_factory = factory;
_factoryClassLoader = Thread.currentThread().getContextClassLoader();
_maxActive = maxActive;
_lifo = lifo;
switch (whenExhaustedAction) {
case WHEN_EXHAUSTED_BLOCK:
case WHEN_EXHAUSTED_FAIL:
case WHEN_EXHAUSTED_GROW:
_whenExhaustedAction = whenExhaustedAction;
break;
default:
throw new IllegalArgumentException(""whenExhaustedAction "" + whenExhaustedAction + "" not recognized."");
}
_maxWait = maxWait;
_maxIdle = maxIdle;
_maxTotal = maxTotal;
_minIdle = minIdle;
_testOnBorrow = testOnBorrow;
_testOnReturn = testOnReturn;
_timeBetweenEvictionRunsMillis = timeBetweenEvictionRunsMillis;
_numTestsPerEvictionRun = numTestsPerEvictionRun;
_minEvictableIdleTimeMillis = minEvictableIdleTimeMillis;
_testWhileIdle = testWhileIdle;
_poolMap = new HashMap();
_poolList = new CursorableLinkedList();
startEvictor(_timeBetweenEvictionRunsMillis);
}
public synchronized int getMaxActive() {
return _maxActive;
}
public void setMaxActive(int maxActive) {
synchronized(this) {
_maxActive = maxActive;
}
allocate();
}
public synchronized int getMaxTotal() {
return _maxTotal;
}
public void setMaxTotal(int maxTotal) {
synchronized(this) {
_maxTotal = maxTotal;
}
allocate();
}
public synchronized byte getWhenExhaustedAction() {
return _whenExhaustedAction;
}
public void setWhenExhaustedAction(byte whenExhaustedAction) {
synchronized(this) {
switch(whenExhaustedAction) {
case WHEN_EXHAUSTED_BLOCK:
case WHEN_EXHAUSTED_FAIL:
case WHEN_EXHAUSTED_GROW:
_whenExhaustedAction = whenExhaustedAction;
break;
default:
throw new IllegalArgumentException(""whenExhaustedAction "" + whenExhaustedAction + "" not recognized."");
}
}
allocate();
}
public synchronized long getMaxWait() {
return _maxWait;
}
public void setMaxWait(long maxWait) {
synchronized(this) {
_maxWait = maxWait;
}
allocate();
}
public synchronized int getMaxIdle() {
return _maxIdle;
}
public void setMaxIdle(int maxIdle) {
synchronized(this) {
_maxIdle = maxIdle;
}
allocate();
}
public void setMinIdle(int poolSize) {
_minIdle = poolSize;
}
public int getMinIdle() {
int maxIdle = getMaxIdle();
if (_minIdle > maxIdle) {
return maxIdle;
} else {
return _minIdle;
}
}
public boolean getTestOnBorrow() {
return _testOnBorrow;
}
public void setTestOnBorrow(boolean testOnBorrow) {
_testOnBorrow = testOnBorrow;
}
public boolean getTestOnReturn() {
return _testOnReturn;
}
public void setTestOnReturn(boolean testOnReturn) {
_testOnReturn = testOnReturn;
}
public synchronized long getTimeBetweenEvictionRunsMillis() {
return _timeBetweenEvictionRunsMillis;
}
public synchronized void setTimeBetweenEvictionRunsMillis(long timeBetweenEvictionRunsMillis) {
_timeBetweenEvictionRunsMillis = timeBetweenEvictionRunsMillis;
startEvictor(_timeBetweenEvictionRunsMillis);
}
public synchronized int getNumTestsPerEvictionRun() {
return _numTestsPerEvictionRun;
}
public synchronized void setNumTestsPerEvictionRun(int numTestsPerEvictionRun) {
_numTestsPerEvictionRun = numTestsPerEvictionRun;
}
public synchronized long getMinEvictableIdleTimeMillis() {
return _minEvictableIdleTimeMillis;
}
public synchronized void setMinEvictableIdleTimeMillis(long minEvictableIdleTimeMillis) {
_minEvictableIdleTimeMillis = minEvictableIdleTimeMillis;
}
public synchronized boolean getTestWhileIdle() {
return _testWhileIdle;
}
public synchronized void setTestWhileIdle(boolean testWhileIdle) {
_testWhileIdle = testWhileIdle;
}
public synchronized void setConfig(GenericKeyedObjectPool.Config conf) {
setMaxIdle(conf.maxIdle);
setMaxActive(conf.maxActive);
setMaxTotal(conf.maxTotal);
setMinIdle(conf.minIdle);
setMaxWait(conf.maxWait);
setWhenExhaustedAction(conf.whenExhaustedAction);
setTestOnBorrow(conf.testOnBorrow);
setTestOnReturn(conf.testOnReturn);
setTestWhileIdle(conf.testWhileIdle);
setNumTestsPerEvictionRun(conf.numTestsPerEvictionRun);
setMinEvictableIdleTimeMillis(conf.minEvictableIdleTimeMillis);
setTimeBetweenEvictionRunsMillis(conf.timeBetweenEvictionRunsMillis);
}
public synchronized boolean getLifo() {
return _lifo;
}
public synchronized void setLifo(boolean lifo) {
this._lifo = lifo;
}
public Object borrowObject(Object key) throws Exception {
long starttime = System.currentTimeMillis();
Latch latch = new Latch(key);
byte whenExhaustedAction;
long maxWait;
synchronized (this) {
whenExhaustedAction = _whenExhaustedAction;
maxWait = _maxWait;
_allocationQueue.add(latch);
}
allocate();
for(;;) {
synchronized (this) {
assertOpen();
}
if (null == latch.getPair()) {
if (latch.mayCreate()) {
} else {
switch(whenExhaustedAction) {
case WHEN_EXHAUSTED_GROW:
synchronized (this) {
if (latch.getPair() == null && !latch.mayCreate()) {
_allocationQueue.remove(latch);
latch.getPool().incrementInternalProcessingCount();
}
}
break;
case WHEN_EXHAUSTED_FAIL:
synchronized (this) {
if (latch.getPair() != null || latch.mayCreate()) {
break;
}
_allocationQueue.remove(latch);
}
throw new NoSuchElementException(""Pool exhausted"");
case WHEN_EXHAUSTED_BLOCK:
try {
synchronized (latch) {
if (latch.getPair() == null && !latch.mayCreate()) {
if (maxWait <= 0) {
latch.wait();
} else {
final long elapsed = (System.currentTimeMillis() - starttime);
final long waitTime = maxWait - elapsed;
if (waitTime > 0)
{
latch.wait(waitTime);
}
}
} else {
break;
}
}
if(isClosed() == true) {
throw new IllegalStateException(""Pool closed"");
}
} catch(InterruptedException e) {
boolean doAllocate = false;
synchronized (this) {
if (latch.getPair() == null && !latch.mayCreate()) {
_allocationQueue.remove(latch);
} else if (latch.getPair() == null && latch.mayCreate()) {
latch.getPool().decrementInternalProcessingCount();
doAllocate = true;
} else {
latch.getPool().decrementInternalProcessingCount();
latch.getPool().incrementActiveCount();
returnObject(latch.getkey(), latch.getPair().getValue());
}
}
if (doAllocate) {
allocate();
}
Thread.currentThread().interrupt();
throw e;
}
if (maxWait > 0 && ((System.currentTimeMillis() - starttime) >= maxWait)) {
synchronized (this) {
if (latch.getPair() == null && !latch.mayCreate()) {
_allocationQueue.remove(latch);
} else {
break;
}
}
throw new NoSuchElementException(""Timeout waiting for idle object"");
} else {
continue; 
}
default:
throw new IllegalArgumentException(""whenExhaustedAction "" + whenExhaustedAction +
"" not recognized."");
}
}
}
boolean newlyCreated = false;
if (null == latch.getPair()) {
try {
Object obj = _factory.makeObject(key);
latch.setPair(new ObjectTimestampPair(obj));
newlyCreated = true;
} finally {
if (!newlyCreated) {
synchronized (this) {
latch.getPool().decrementInternalProcessingCount();
}
allocate();
}
}
}
try {
_factory.activateObject(key, latch.getPair().value);
if (_testOnBorrow && !_factory.validateObject(key, latch.getPair().value)) {
throw new Exception(""ValidateObject failed"");
}
synchronized (this) {
latch.getPool().decrementInternalProcessingCount();
latch.getPool().incrementActiveCount();
}
return latch.getPair().value;
} catch (Throwable e) {
PoolUtils.checkRethrow(e);
try {
_factory.destroyObject(key, latch.getPair().value);
} catch (Throwable e2) {
PoolUtils.checkRethrow(e2);
}
synchronized (this) {
latch.getPool().decrementInternalProcessingCount();
if (!newlyCreated) {
latch.reset();
_allocationQueue.add(0, latch);
}
}
allocate();
if (newlyCreated) {
NoSuchElementException nsee = new NoSuchElementException(
""Unable to validate object"");
nsee.initCause(e);
throw nsee;
}
else {
continue; 
}
}
}
}
private void allocate() {
boolean clearOldest = false;
synchronized (this) {
if (isClosed()) return;
Iterator allocationQueueIter = _allocationQueue.iterator();
while (allocationQueueIter.hasNext()) {
Latch latch = (Latch) allocationQueueIter.next();
ObjectQueue pool = (ObjectQueue)(_poolMap.get(latch.getkey()));
if (null == pool) {
pool = new ObjectQueue();
_poolMap.put(latch.getkey(), pool);
_poolList.add(latch.getkey());
}
latch.setPool(pool);
if (!pool.queue.isEmpty()) {
allocationQueueIter.remove();
latch.setPair(
(ObjectTimestampPair) pool.queue.removeFirst());
pool.incrementInternalProcessingCount();
_totalIdle--;
synchronized (latch) {
latch.notify();
}
continue;
}
if ((_maxTotal > 0) &&
(_totalActive + _totalIdle + _totalInternalProcessing >= _maxTotal)) {
clearOldest = true;
break;
}
if ((_maxActive < 0 || pool.activeCount + pool.internalProcessingCount < _maxActive) &&
(_maxTotal < 0 || _totalActive + _totalIdle + _totalInternalProcessing < _maxTotal)) {
allocationQueueIter.remove();
latch.setMayCreate(true);
pool.incrementInternalProcessingCount();
synchronized (latch) {
latch.notify();
}
continue;
}
if (_maxActive < 0) {
break;
}
}
}
if (clearOldest) {
clearOldest();
}
}
public void clear() {
Map toDestroy = new HashMap();
synchronized (this) {
for (Iterator it = _poolMap.keySet().iterator(); it.hasNext();) {
Object key = it.next();
ObjectQueue pool = (ObjectQueue)_poolMap.get(key);
List objects = new ArrayList();
objects.addAll(pool.queue);
toDestroy.put(key, objects);
it.remove();
_poolList.remove(key);
_totalIdle = _totalIdle - pool.queue.size();
_totalInternalProcessing =
_totalInternalProcessing + pool.queue.size();
pool.queue.clear();
}
}
destroy(toDestroy, _factory);
}
public void clearOldest() {
final Map toDestroy = new HashMap();
final Map map = new TreeMap();
synchronized (this) {
for (Iterator keyiter = _poolMap.keySet().iterator(); keyiter.hasNext();) {
final Object key = keyiter.next();
final CursorableLinkedList list = ((ObjectQueue)_poolMap.get(key)).queue;
for (Iterator it = list.iterator(); it.hasNext();) {
map.put(it.next(), key);
}
}
Set setPairKeys = map.entrySet();
int itemsToRemove = ((int) (map.size() * 0.15)) + 1;
Iterator iter = setPairKeys.iterator();
while (iter.hasNext() && itemsToRemove > 0) {
Map.Entry entry = (Map.Entry) iter.next();
Object key = entry.getValue();
ObjectTimestampPair pairTimeStamp = (ObjectTimestampPair) entry.getKey();
ObjectQueue objectQueue = (ObjectQueue)_poolMap.get(key);
final CursorableLinkedList list = objectQueue.queue;
list.remove(pairTimeStamp);
if (toDestroy.containsKey(key)) {
((List)toDestroy.get(key)).add(pairTimeStamp);
} else {
List listForKey = new ArrayList();
listForKey.add(pairTimeStamp);
toDestroy.put(key, listForKey);
}
objectQueue.incrementInternalProcessingCount();
_totalIdle--;
itemsToRemove--;
}
}
destroy(toDestroy, _factory);
}
public void clear(Object key) {
Map toDestroy = new HashMap();
final ObjectQueue pool;
synchronized (this) {
pool = (ObjectQueue)(_poolMap.remove(key));
if (pool == null) {
return;
} else {
_poolList.remove(key);
}
List objects = new ArrayList();
objects.addAll(pool.queue);
toDestroy.put(key, objects);
_totalIdle = _totalIdle - pool.queue.size();
_totalInternalProcessing =
_totalInternalProcessing + pool.queue.size();
pool.queue.clear();
}
destroy(toDestroy, _factory);
}
private void destroy(Map m, KeyedPoolableObjectFactory factory) {
for (Iterator entries = m.entrySet().iterator(); entries.hasNext();) {
Map.Entry entry = (Entry) entries.next();
Object key = entry.getKey();
Collection c = (Collection) entry.getValue();
for (Iterator it = c.iterator(); it.hasNext();) {
try {
factory.destroyObject(
key,((ObjectTimestampPair)(it.next())).value);
} catch(Exception e) {
} finally {
synchronized(this) {
ObjectQueue objectQueue =
(ObjectQueue) _poolMap.get(key);
if (objectQueue != null) {
objectQueue.decrementInternalProcessingCount();
if (objectQueue.internalProcessingCount == 0 &&
objectQueue.activeCount == 0 &&
objectQueue.queue.isEmpty()) {
_poolMap.remove(key);
_poolList.remove(key);
}
} else {
_totalInternalProcessing--;
}
}
allocate();
}
}
}
}
public synchronized int getNumActive() {
return _totalActive;
}
public synchronized int getNumIdle() {
return _totalIdle;
}
public synchronized int getNumActive(Object key) {
final ObjectQueue pool = (ObjectQueue)(_poolMap.get(key));
return pool != null ? pool.activeCount : 0;
}
public synchronized int getNumIdle(Object key) {
final ObjectQueue pool = (ObjectQueue)(_poolMap.get(key));
return pool != null ? pool.queue.size() : 0;
}
public void returnObject(Object key, Object obj) throws Exception {
try {
addObjectToPool(key, obj, true);
} catch (Exception e) {
if (_factory != null) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e2) {
}
// TODO: Correctness here depends on control in addObjectToPool.
ObjectQueue pool = (ObjectQueue) (_poolMap.get(key));
if (pool != null) {
synchronized(this) {
pool.decrementActiveCount();
if (pool.queue.isEmpty() &&
pool.activeCount == 0 &&
pool.internalProcessingCount == 0) {
_poolMap.remove(key);
_poolList.remove(key);
}
}
allocate();
}
}
}
}
private void addObjectToPool(Object key, Object obj,
boolean decrementNumActive) throws Exception {
boolean success = true; 
if (_testOnReturn && !_factory.validateObject(key, obj)) {
success = false;
} else {
_factory.passivateObject(key, obj);
}
boolean shouldDestroy = !success;
ObjectQueue pool;
boolean doAllocate = false;
synchronized (this) {
pool = (ObjectQueue) (_poolMap.get(key));
if (null == pool) {
pool = new ObjectQueue();
_poolMap.put(key, pool);
_poolList.add(key);
}
if (isClosed()) {
shouldDestroy = true;
} else {
if (_maxIdle >= 0 && (pool.queue.size() >= _maxIdle)) {
shouldDestroy = true;
} else if (success) {
if (_lifo) {
pool.queue.addFirst(new ObjectTimestampPair(obj));
} else {
pool.queue.addLast(new ObjectTimestampPair(obj));
}
_totalIdle++;
if (decrementNumActive) {
pool.decrementActiveCount();
}
doAllocate = true;
}
}
}
if (doAllocate) {
allocate();
}
if (shouldDestroy) {
try {
_factory.destroyObject(key, obj);
} catch(Exception e) {
}
if (decrementNumActive) {
synchronized(this) {
pool.decrementActiveCount();
if (pool.queue.isEmpty() &&
pool.activeCount == 0 &&
pool.internalProcessingCount == 0) {
_poolMap.remove(key);
_poolList.remove(key);
}
}
allocate();
}
}
}
public void invalidateObject(Object key, Object obj) throws Exception {
try {
_factory.destroyObject(key, obj);
} finally {
synchronized (this) {
ObjectQueue pool = (ObjectQueue) (_poolMap.get(key));
if (null == pool) {
pool = new ObjectQueue();
_poolMap.put(key, pool);
_poolList.add(key);
}
pool.decrementActiveCount();
}
allocate(); 
}
}
public void addObject(Object key) throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
Object obj = _factory.makeObject(key);
try {
assertOpen();
addObjectToPool(key, obj, false);
} catch (IllegalStateException ex) { 
try {
_factory.destroyObject(key, obj);
} catch (Exception ex2) {
}
throw ex;
}
}
public synchronized void preparePool(Object key, boolean populateImmediately) {
ObjectQueue pool = (ObjectQueue)(_poolMap.get(key));
if (null == pool) {
pool = new ObjectQueue();
_poolMap.put(key,pool);
_poolList.add(key);
}
if (populateImmediately) {
try {
ensureMinIdle(key);
}
catch (Exception e) {
}
}
}
public void close() throws Exception {
super.close();
synchronized (this) {
clear();
if (null != _evictionCursor) {
_evictionCursor.close();
_evictionCursor = null;
}
if (null != _evictionKeyCursor) {
_evictionKeyCursor.close();
_evictionKeyCursor = null;
}
startEvictor(-1L);
while(_allocationQueue.size() > 0) {
Latch l = (Latch) _allocationQueue.removeFirst();
synchronized (l) {
l.notify();
}
}
}
}
public void setFactory(KeyedPoolableObjectFactory factory) throws IllegalStateException {
Map toDestroy = new HashMap();
final KeyedPoolableObjectFactory oldFactory = _factory;
synchronized (this) {
assertOpen();
if (0 < getNumActive()) {
throw new IllegalStateException(""Objects are already active"");
} else {
for (Iterator it = _poolMap.keySet().iterator(); it.hasNext();) {
Object key = it.next();
ObjectQueue pool = (ObjectQueue)_poolMap.get(key);
if (pool != null) {
List objects = new ArrayList();
objects.addAll(pool.queue);
toDestroy.put(key, objects);
it.remove();
_poolList.remove(key);
_totalIdle = _totalIdle - pool.queue.size();
_totalInternalProcessing =
_totalInternalProcessing + pool.queue.size();
pool.queue.clear();
}
}
_factory = factory;
_factoryClassLoader = Thread.currentThread().getContextClassLoader();
}
}
destroy(toDestroy, oldFactory);
}
public void evict() throws Exception {
Object key = null;
boolean testWhileIdle;
long minEvictableIdleTimeMillis;
synchronized (this) {
testWhileIdle = _testWhileIdle;
minEvictableIdleTimeMillis = _minEvictableIdleTimeMillis;
if (_evictionKeyCursor != null &&
_evictionKeyCursor._lastReturned != null) {
key = _evictionKeyCursor._lastReturned.value();
}
}
for (int i=0, m=getNumTests(); i<m; i++) {
final ObjectTimestampPair pair;
synchronized (this) {
if (_poolMap == null || _poolMap.size() == 0) {
continue;
}
if (null == _evictionKeyCursor) {
resetEvictionKeyCursor();
key = null;
}
if (null == _evictionCursor) {
if (_evictionKeyCursor.hasNext()) {
key = _evictionKeyCursor.next();
resetEvictionObjectCursor(key);
} else {
resetEvictionKeyCursor();
if (_evictionKeyCursor != null) {
if (_evictionKeyCursor.hasNext()) {
key = _evictionKeyCursor.next();
resetEvictionObjectCursor(key);
}
}
}
}
if (_evictionCursor == null) {
continue; 
}
if ((_lifo && !_evictionCursor.hasPrevious()) ||
(!_lifo && !_evictionCursor.hasNext())) {
if (_evictionKeyCursor != null) {
if (_evictionKeyCursor.hasNext()) {
key = _evictionKeyCursor.next();
resetEvictionObjectCursor(key);
} else { 
resetEvictionKeyCursor();
if (_evictionKeyCursor != null) {
if (_evictionKeyCursor.hasNext()) {
key = _evictionKeyCursor.next();
resetEvictionObjectCursor(key);
}
}
}
}
}
if ((_lifo && !_evictionCursor.hasPrevious()) ||
(!_lifo && !_evictionCursor.hasNext())) {
continue; 
}
pair = _lifo ?
(ObjectTimestampPair) _evictionCursor.previous() :
(ObjectTimestampPair) _evictionCursor.next();
_evictionCursor.remove();
ObjectQueue objectQueue = (ObjectQueue) _poolMap.get(key);
objectQueue.incrementInternalProcessingCount();
_totalIdle--;
}
boolean removeObject=false;
if ((minEvictableIdleTimeMillis > 0) &&
(System.currentTimeMillis() - pair.tstamp >
minEvictableIdleTimeMillis)) {
removeObject=true;
}
if (testWhileIdle && removeObject == false) {
boolean active = false;
try {
_factory.activateObject(key,pair.value);
active = true;
} catch(Exception e) {
removeObject=true;
}
if (active) {
if (!_factory.validateObject(key,pair.value)) {
removeObject=true;
} else {
try {
_factory.passivateObject(key,pair.value);
} catch(Exception e) {
removeObject=true;
}
}
}
}
if (removeObject) {
try {
_factory.destroyObject(key, pair.value);
} catch(Exception e) {
}
}
synchronized (this) {
ObjectQueue objectQueue =
(ObjectQueue)_poolMap.get(key);
objectQueue.decrementInternalProcessingCount();
if (removeObject) {
if (objectQueue.queue.isEmpty() &&
objectQueue.activeCount == 0 &&
objectQueue.internalProcessingCount == 0) {
_poolMap.remove(key);
_poolList.remove(key);
}
} else {
_evictionCursor.add(pair);
_totalIdle++;
if (_lifo) {
_evictionCursor.previous();
}
}
}
}
allocate();
}
private void resetEvictionKeyCursor() {
if (_evictionKeyCursor != null) {
_evictionKeyCursor.close();
}
_evictionKeyCursor = _poolList.cursor();
if (null != _evictionCursor) {
_evictionCursor.close();
_evictionCursor = null;
}
}
private void resetEvictionObjectCursor(Object key) {
if (_evictionCursor != null) {
_evictionCursor.close();
}
if (_poolMap == null) {
return;
}
ObjectQueue pool = (ObjectQueue) (_poolMap.get(key));
if (pool != null) {
CursorableLinkedList queue = pool.queue;
_evictionCursor = queue.cursor(_lifo ? queue.size() : 0);
}
}
private void ensureMinIdle() throws Exception {
if (getMinIdle() > 0) {
Object[] keysCopy;
synchronized(this) {
keysCopy = _poolMap.keySet().toArray();
}
for (int i=0; i < keysCopy.length; i++) {
ensureMinIdle(keysCopy[i]);
}
}
}
private void ensureMinIdle(Object key) throws Exception {
ObjectQueue pool;
synchronized(this) {
pool = (ObjectQueue)(_poolMap.get(key));
}
if (pool == null) {
return;
}
int objectDeficit = calculateDeficit(pool, false);
for (int i = 0; i < objectDeficit && calculateDeficit(pool, true) > 0; i++) {
try {
addObject(key);
} finally {
synchronized (this) {
pool.decrementInternalProcessingCount();
}
allocate();
}
}
}
protected synchronized void startEvictor(long delay) {
if (null != _evictor) {
EvictionTimer.cancel(_evictor);
_evictor = null;
}
if (delay > 0) {
_evictor = new Evictor();
EvictionTimer.schedule(_evictor, delay, delay);
}
}
synchronized String debugInfo() {
StringBuffer buf = new StringBuffer();
buf.append(""Active: "").append(getNumActive()).append(""\n"");
buf.append(""Idle: "").append(getNumIdle()).append(""\n"");
Iterator it = _poolMap.keySet().iterator();
while (it.hasNext()) {
Object key = it.next();
buf.append(""\t"").append(key).append("" "").append(_poolMap.get(key)).append(""\n"");
}
return buf.toString();
}
private synchronized int getNumTests() {
if (_numTestsPerEvictionRun >= 0) {
return Math.min(_numTestsPerEvictionRun, _totalIdle);
} else {
return(int)(Math.ceil(_totalIdle/Math.abs((double)_numTestsPerEvictionRun)));
}
}
private synchronized int calculateDeficit(ObjectQueue pool,
boolean incrementInternal) {
int objectDefecit = 0;
objectDefecit = getMinIdle() - pool.queue.size();
if (getMaxActive() > 0) {
int growLimit = Math.max(0, getMaxActive() - pool.activeCount - pool.queue.size() - pool.internalProcessingCount);
objectDefecit = Math.min(objectDefecit, growLimit);
}
if (getMaxTotal() > 0) {
int growLimit = Math.max(0, getMaxTotal() - getNumActive() - getNumIdle() - _totalInternalProcessing);
objectDefecit = Math.min(objectDefecit, growLimit);
}
if (incrementInternal && objectDefecit > 0) {
pool.incrementInternalProcessingCount();
}
return objectDefecit;
}
private class ObjectQueue {
private int activeCount = 0;
private final CursorableLinkedList queue = new CursorableLinkedList();
private int internalProcessingCount = 0;
void incrementActiveCount() {
synchronized (GenericKeyedObjectPool.this) {
_totalActive++;
}
activeCount++;
}
void decrementActiveCount() {
synchronized (GenericKeyedObjectPool.this) {
_totalActive--;
}
if (activeCount > 0) {
activeCount--;
}
}
void incrementInternalProcessingCount() {
synchronized (GenericKeyedObjectPool.this) {
_totalInternalProcessing++;
}
internalProcessingCount++;
}
void decrementInternalProcessingCount() {
synchronized (GenericKeyedObjectPool.this) {
_totalInternalProcessing--;
}
internalProcessingCount--;
}
}
static class ObjectTimestampPair implements Comparable {
//CHECKSTYLE: stop VisibilityModifier
Object value;
long tstamp;
//CHECKSTYLE: resume VisibilityModifier
ObjectTimestampPair(Object val) {
this(val, System.currentTimeMillis());
}
ObjectTimestampPair(Object val, long time) {
value = val;
tstamp = time;
}
public String toString() {
return value + "";"" + tstamp;
}
public int compareTo(Object obj) {
return compareTo((ObjectTimestampPair) obj);
}
public int compareTo(ObjectTimestampPair other) {
final long tstampdiff = this.tstamp - other.tstamp;
if (tstampdiff == 0) {
return System.identityHashCode(this) - System.identityHashCode(other);
} else {
return (int)Math.min(Math.max(tstampdiff, Integer.MIN_VALUE), Integer.MAX_VALUE);
}
}
public Object getValue() {
return value;
}
public long getTstamp() {
return tstamp;
}
}
private class Evictor extends TimerTask {
public void run() {
ClassLoader savedClassLoader =
Thread.currentThread().getContextClassLoader();
try {
Thread.currentThread().setContextClassLoader(
_factoryClassLoader);
try {
evict();
} catch(Exception e) {
} catch(OutOfMemoryError oome) {
oome.printStackTrace(System.err);
}
try {
ensureMinIdle();
} catch (Exception e) {
}
} finally {
Thread.currentThread().setContextClassLoader(savedClassLoader);
}
}
}
public static class Config {
//CHECKSTYLE: stop VisibilityModifier
public int maxIdle = GenericKeyedObjectPool.DEFAULT_MAX_IDLE;
public int maxActive = GenericKeyedObjectPool.DEFAULT_MAX_ACTIVE;
public int maxTotal = GenericKeyedObjectPool.DEFAULT_MAX_TOTAL;
public int minIdle = GenericKeyedObjectPool.DEFAULT_MIN_IDLE;
public long maxWait = GenericKeyedObjectPool.DEFAULT_MAX_WAIT;
public byte whenExhaustedAction = GenericKeyedObjectPool.DEFAULT_WHEN_EXHAUSTED_ACTION;
public boolean testOnBorrow = GenericKeyedObjectPool.DEFAULT_TEST_ON_BORROW;
public boolean testOnReturn = GenericKeyedObjectPool.DEFAULT_TEST_ON_RETURN;
public boolean testWhileIdle = GenericKeyedObjectPool.DEFAULT_TEST_WHILE_IDLE;
public long timeBetweenEvictionRunsMillis = GenericKeyedObjectPool.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS;
public int numTestsPerEvictionRun =  GenericKeyedObjectPool.DEFAULT_NUM_TESTS_PER_EVICTION_RUN;
public long minEvictableIdleTimeMillis = GenericKeyedObjectPool.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS;
public boolean lifo = GenericKeyedObjectPool.DEFAULT_LIFO;
//CHECKSTYLE: resume VisibilityModifier
}
private static final class Latch {
private final Object _key;
private ObjectQueue _pool;
private ObjectTimestampPair _pair;
private boolean _mayCreate = false;
private Latch(Object key) {
_key = key;
}
private synchronized Object getkey() {
return _key;
}
private synchronized ObjectQueue getPool() {
return _pool;
}
private synchronized void setPool(ObjectQueue pool) {
_pool = pool;
}
private synchronized ObjectTimestampPair getPair() {
return _pair;
}
private synchronized void setPair(ObjectTimestampPair pair) {
_pair = pair;
}
private synchronized boolean mayCreate() {
return _mayCreate;
}
private synchronized void setMayCreate(boolean mayCreate) {
_mayCreate = mayCreate;
}
private synchronized void reset() {
_pair = null;
_mayCreate = false;
}
}
private int _maxIdle = DEFAULT_MAX_IDLE;
private volatile int _minIdle = DEFAULT_MIN_IDLE;
private int _maxActive = DEFAULT_MAX_ACTIVE;
private int _maxTotal = DEFAULT_MAX_TOTAL;
private long _maxWait = DEFAULT_MAX_WAIT;
private byte _whenExhaustedAction = DEFAULT_WHEN_EXHAUSTED_ACTION;
private volatile boolean _testOnBorrow = DEFAULT_TEST_ON_BORROW;
private volatile boolean _testOnReturn = DEFAULT_TEST_ON_RETURN;
private boolean _testWhileIdle = DEFAULT_TEST_WHILE_IDLE;
private long _timeBetweenEvictionRunsMillis = DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS;
private int _numTestsPerEvictionRun =  DEFAULT_NUM_TESTS_PER_EVICTION_RUN;
private long _minEvictableIdleTimeMillis = DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS;
private Map _poolMap = null;
private int _totalActive = 0;
private int _totalIdle = 0;
private int _totalInternalProcessing = 0;
private KeyedPoolableObjectFactory _factory = null;
private ClassLoader _factoryClassLoader = null;
private Evictor _evictor = null;
private CursorableLinkedList _poolList = null;
private CursorableLinkedList.Cursor _evictionCursor = null;
private CursorableLinkedList.Cursor _evictionKeyCursor = null;
private boolean _lifo = DEFAULT_LIFO;
private LinkedList _allocationQueue = new LinkedList();
","public void run() {
ClassLoader savedClassLoader = Thread.currentThread().getContextClassLoader();
try {
// set the classloader for the factory
Thread.currentThread().setContextClassLoader(_factoryClassLoader);
// Evict from the pool
try {
evict();
} catch (Exception e) {
} catch (OutOfMemoryError oome) {
oome.printStackTrace(System.err);
}
// Re-create idle instances.
try {
ensureMinIdle();
} catch (Exception e) {
}
} finally {
// restore the previous CCL
Thread.currentThread().setContextClassLoader(savedClassLoader);
}
}","public void run() {
ClassLoader classloaderVar1 = classloaderLiteral2;
try {
// set the classloader for the factory
Thread.currentThread().setContextClassLoader(_factoryClassLoader);
// Evict from the pool
try {
evict();
} catch (Exception e) {
} catch (OutOfMemoryError oome) {
oome.printStackTrace(System.err);
}
// Re-create idle instances.
try {
ensureMinIdle();
} catch (Exception e) {
}
} finally {
// restore the previous CCL
Thread.currentThread().setContextClassLoader(classloaderVar1);
}
}"
18059,PERFORMANCE,WMI_WRONG_MAP_ITERATOR,FP,pool,1924,"ObjectQueue pool = (ObjectQueue)_poolMap.get(key);
","public void clear() {
Map toDestroy = new HashMap();
synchronized (this) {
for (Iterator it = _poolMap.keySet().iterator(); it.hasNext(); ) {
Object key = it.next();
ObjectQueue pool = (ObjectQueue) _poolMap.get(key);
List objects = new ArrayList();
objects.addAll(pool.queue);
toDestroy.put(key, objects);
it.remove();
_poolList.remove(key);
_totalIdle = _totalIdle - pool.queue.size();
_totalInternalProcessing = _totalInternalProcessing + pool.queue.size();
pool.queue.clear();
}
}
destroy(toDestroy, _factory);
}","public void clear() {
Map mapVar1 = mapLiteral2;
synchronized (this) {
for (Iterator iteratorVar11 = iteratorLiteral12; iteratorVar3.hasNext(); ) {
Object objectVar5 = objectLiteral6;
ObjectQueue objectqueueVar7 = objectqueueLiteral8;
List listVar9 = listLiteral10;
listVar9.addAll(objectqueueVar7.queue);
mapVar1.put(objectVar5, listVar9);
iteratorVar3.remove();
_poolList.remove(objectVar5);
_totalIdle = _totalIdle - objectqueueVar7.queue.size();
_totalInternalProcessing = _totalInternalProcessing + objectqueueVar7.queue.size();
objectqueueVar7.queue.clear();
}
}
destroy(mapVar1, _factory);
}"
18060,Multithreaded correctness,NO_NOTIFY_NOT_NOTIFYALL,FP,pool,1925,"latch.notify();
","private void allocate() {
boolean clearOldest = false;
synchronized (this) {
if (isClosed())
return;
Iterator allocationQueueIter = _allocationQueue.iterator();
while (allocationQueueIter.hasNext()) {
Latch latch = (Latch) allocationQueueIter.next();
ObjectQueue pool = (ObjectQueue) (_poolMap.get(latch.getkey()));
if (null == pool) {
pool = new ObjectQueue();
_poolMap.put(latch.getkey(), pool);
_poolList.add(latch.getkey());
}
latch.setPool(pool);
if (!pool.queue.isEmpty()) {
allocationQueueIter.remove();
latch.setPair((ObjectTimestampPair) pool.queue.removeFirst());
pool.incrementInternalProcessingCount();
_totalIdle--;
synchronized (latch) {
latch.notify();
}
continue;
}
if ((_maxTotal > 0) && (_totalActive + _totalIdle + _totalInternalProcessing >= _maxTotal)) {
clearOldest = true;
break;
}
if ((_maxActive < 0 || pool.activeCount + pool.internalProcessingCount < _maxActive) && (_maxTotal < 0 || _totalActive + _totalIdle + _totalInternalProcessing < _maxTotal)) {
allocationQueueIter.remove();
latch.setMayCreate(true);
pool.incrementInternalProcessingCount();
synchronized (latch) {
latch.notify();
}
continue;
}
if (_maxActive < 0) {
break;
}
}
}
if (clearOldest) {
clearOldest();
}
}","private void allocate() {
boolean booleanVar1 = booleanLiteral2;
synchronized (this) {
if (isClosed())
return;
Iterator iteratorVar3 = iteratorLiteral4;
while (iteratorVar3.hasNext()) {
Latch latchVar5 = latchLiteral6;
ObjectQueue objectqueueVar7 = objectqueueLiteral8;
if (null == objectqueueVar7) {
objectqueueVar7 = new ObjectQueue();
_poolMap.put(latchVar5.getkey(), objectqueueVar7);
_poolList.add(latchVar5.getkey());
}
latchVar5.setPool(objectqueueVar7);
if (!objectqueueVar7.queue.isEmpty()) {
iteratorVar3.remove();
latchVar5.setPair((ObjectTimestampPair) objectqueueVar7.queue.removeFirst());
objectqueueVar7.incrementInternalProcessingCount();
_totalIdle--;
synchronized (latchVar5) {
latchVar5.notify();
}
continue;
}
if ((_maxTotal > 0) && (_totalActive + _totalIdle + _totalInternalProcessing >= _maxTotal)) {
booleanVar1 = true;
break;
}
if ((_maxActive < 0 || objectqueueVar7.activeCount + objectqueueVar7.internalProcessingCount < _maxActive) && (_maxTotal < 0 || _totalActive + _totalIdle + _totalInternalProcessing < _maxTotal)) {
iteratorVar3.remove();
latchVar5.setMayCreate(true);
objectqueueVar7.incrementInternalProcessingCount();
synchronized (latchVar5) {
latchVar5.notify();
}
continue;
}
if (_maxActive < 0) {
break;
}
}
}
if (booleanVar1) {
clearOldest();
}
}"
18063,BAD_PRACTICE,EQ_COMPARETO_USE_OBJECT_EQUALS,FP,pool,1928,"final long tstampdiff = this.tstamp - other.tstamp;
if (tstampdiff == 0) {
return System.identityHashCode(this) - System.identityHashCode(other);
} else {
return (int)Math.min(Math.max(tstampdiff, Integer.MIN_VALUE), Integer.MAX_VALUE);
","public int compareTo(ObjectTimestampPair other) {
final long tstampdiff = this.tstamp - other.tstamp;
if (tstampdiff == 0) {
return System.identityHashCode(this) - System.identityHashCode(other);
} else {
return (int) Math.min(Math.max(tstampdiff, Integer.MIN_VALUE), Integer.MAX_VALUE);
}
}","public int compareTo(ObjectTimestampPair other) {
final long longVar1 = longLiteral2;
if (longVar1 == 0) {
return System.identityHashCode(this) - System.identityHashCode(other);
} else {
return (int) Math.min(Math.max(longVar1, Integer.MIN_VALUE), Integer.MAX_VALUE);
}
}"
18079,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1944,"} catch(Exception e) {
","public void run() {
ClassLoader savedClassLoader = Thread.currentThread().getContextClassLoader();
try {
Thread.currentThread().setContextClassLoader(_factoryClassLoader);
try {
evict();
} catch (Exception e) {
} catch (OutOfMemoryError oome) {
oome.printStackTrace(System.err);
}
try {
ensureMinIdle();
} catch (Exception e) {
}
} finally {
Thread.currentThread().setContextClassLoader(savedClassLoader);
}
}","public void run() {
ClassLoader classloaderVar1 = classloaderLiteral2;
try {
Thread.currentThread().setContextClassLoader(_factoryClassLoader);
try {
evict();
} catch (Exception e) {
} catch (OutOfMemoryError oome) {
oome.printStackTrace(System.err);
}
try {
ensureMinIdle();
} catch (Exception e) {
}
} finally {
Thread.currentThread().setContextClassLoader(classloaderVar1);
}
}"
18084,PERFORMANCE,WMI_WRONG_MAP_ITERATOR,FP,pool,1949,"Stack s = (Stack)(_pools.get(key));
","public synchronized String toString() {
StringBuffer buf = new StringBuffer();
buf.append(getClass().getName());
buf.append("" contains "").append(_pools.size()).append("" distinct pools: "");
Iterator it = _pools.keySet().iterator();
while (it.hasNext()) {
Object key = it.next();
buf.append("" |"").append(key).append(""|="");
Stack s = (Stack) (_pools.get(key));
buf.append(s.size());
}
return buf.toString();
}","public synchronized String toString() {
StringBuffer stringbufferVar1 = stringbufferLiteral2;
stringbufferVar1.append(getClass().getName());
stringbufferVar1.append("" contains "").append(_pools.size()).append("" distinct pools: "");
Iterator iteratorVar3 = iteratorLiteral4;
while (iteratorVar3.hasNext()) {
Object objectVar5 = objectLiteral6;
stringbufferVar1.append("" |"").append(objectVar5).append(""|="");
Stack stackVar7 = stackLiteral8;
stringbufferVar1.append(stackVar7.size());
}
return stringbufferVar1.toString();
}"
18085,PERFORMANCE,WMI_WRONG_MAP_ITERATOR,FP,pool,1950,"Stack stack = (Stack)(_pools.get(key));
","public synchronized void clear() {
Iterator it = _pools.keySet().iterator();
while (it.hasNext()) {
Object key = it.next();
Stack stack = (Stack) (_pools.get(key));
destroyStack(key, stack);
}
_totIdle = 0;
_pools.clear();
_activeCount.clear();
}","public synchronized void clear() {
Iterator iteratorVar1 = iteratorLiteral2;
while (iteratorVar1.hasNext()) {
Object objectVar3 = objectLiteral4;
Stack stackVar5 = stackLiteral6;
destroyStack(objectVar3, stackVar5);
}
_totIdle = 0;
_pools.clear();
_activeCount.clear();
}"
18092,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1957,"} catch(Exception e) {
","public synchronized void clear() {
if (null != _factory) {
Iterator it = _pool.iterator();
while (it.hasNext()) {
try {
_factory.destroyObject(it.next());
} catch (Exception e) {
}
}
}
_pool.clear();
}","public synchronized void clear() {
if (null != _factory) {
Iterator iteratorVar1 = iteratorLiteral2;
while (iteratorVar1.hasNext()) {
try {
_factory.destroyObject(iteratorVar1.next());
} catch (Exception e) {
}
}
}
_pool.clear();
}"
18095,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1960,"} catch(Exception e) {
","public synchronized void returnObject(Object obj) throws Exception {
boolean success = !isClosed();
if (null != _factory) {
if (!_factory.validateObject(obj)) {
success = false;
} else {
try {
_factory.passivateObject(obj);
} catch (Exception e) {
success = false;
}
}
}
boolean shouldDestroy = !success;
_numActive--;
if (success) {
Object toBeDestroyed = null;
if (_pool.size() >= _maxSleeping) {
shouldDestroy = true;
toBeDestroyed = _pool.remove(0);
}
_pool.push(obj);
obj = toBeDestroyed;
}
notifyAll();
if (shouldDestroy) {
try {
_factory.destroyObject(obj);
} catch (Exception e) {
}
}
}","public synchronized void returnObject(Object obj) throws Exception {
boolean booleanVar1 = booleanLiteral2;
if (null != _factory) {
if (!_factory.validateObject(obj)) {
booleanVar1 = false;
} else {
try {
_factory.passivateObject(obj);
} catch (Exception e) {
booleanVar1 = false;
}
}
}
boolean booleanVar3 = booleanLiteral4;
_numActive--;
if (booleanVar1) {
Object objectVar5 = objectLiteral6;
if (_pool.size() >= _maxSleeping) {
booleanVar3 = true;
objectVar5 = _pool.remove(0);
}
_pool.push(obj);
obj = objectVar5;
}
notifyAll();
if (booleanVar3) {
try {
_factory.destroyObject(obj);
} catch (Exception e) {
}
}
}"
18097,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1962,"} catch (Exception e) {
","public void invalidateObject(final K key, final V obj) {
try {
keyedPool.invalidateObject(key, obj);
} catch (Exception e) {
}
}","public void invalidateObject(final K key, final V obj) {
try {
keyedPool.invalidateObject(key, obj);
} catch (Exception e) {
}
}"
18106,Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,pool,1971,private int minIdlePerKey;,private int minIdlePerKey;,private int intVar1;
18109,Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,pool,1974,private boolean testOnBorrow;,private boolean testOnBorrow;,private boolean booleanVar1;
18110,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1975,"catch (Exception e) {
","public synchronized void preparePool(K key, boolean populateImmediately) {
ObjectQueue pool = (_poolMap.get(key));
if (null == pool) {
pool = new ObjectQueue();
_poolMap.put(key, pool);
_poolList.add(key);
}
if (populateImmediately) {
try {
ensureMinIdle(key);
} catch (Exception e) {
}
}
}","public synchronized void preparePool(K key, boolean populateImmediately) {
ObjectQueue objectqueueVar1 = objectqueueLiteral2;
if (null == objectqueueVar1) {
objectqueueVar1 = new ObjectQueue();
_poolMap.put(key, objectqueueVar1);
_poolList.add(key);
}
if (populateImmediately) {
try {
ensureMinIdle(key);
} catch (Exception e) {
}
}
}"
18111,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1976,"} catch(Exception e) {
","@Override
public void run() {
try {
evict();
} catch (Exception e) {
} catch (OutOfMemoryError oome) {
oome.printStackTrace(System.err);
}
try {
ensureMinIdle();
} catch (Exception e) {
}
}","@Override
public void run() {
try {
evict();
} catch (Exception e) {
} catch (OutOfMemoryError oome) {
oome.printStackTrace(System.err);
}
try {
ensureMinIdle();
} catch (Exception e) {
}
}"
18115,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1980,"} catch (Exception e2) {
","@Override
public void returnObject(K key, V obj) throws Exception {
try {
addObjectToPool(key, obj, true);
} catch (Exception e) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e2) {
}
// TODO: Correctness here depends on control in addObjectToPool.
ObjectQueue pool = (_poolMap.get(key));
if (pool != null) {
synchronized (this) {
pool.decrementActiveCount();
if (pool.queue.isEmpty() && pool.activeCount == 0 && pool.internalProcessingCount == 0) {
_poolMap.remove(key);
_poolList.remove(key);
}
}
allocate();
}
}
}","@Override
public void returnObject(K key, V obj) throws Exception {
try {
addObjectToPool(key, obj, true);
} catch (Exception e) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e2) {
}
// TODO: Correctness here depends on control in addObjectToPool.
ObjectQueue objectqueueVar1 = objectqueueLiteral2;
if (objectqueueVar1 != null) {
synchronized (this) {
objectqueueVar1.decrementActiveCount();
if (objectqueueVar1.queue.isEmpty() && objectqueueVar1.activeCount == 0 && objectqueueVar1.internalProcessingCount == 0) {
_poolMap.remove(key);
_poolList.remove(key);
}
}
allocate();
}
}
}"
18117,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1982,"} catch (Exception ex2) {
","@Override
public void addObject(K key) throws Exception {
assertOpen();
V obj = _factory.makeObject(key);
try {
assertOpen();
addObjectToPool(key, obj, false);
} catch (IllegalStateException ex) {
try {
_factory.destroyObject(key, obj);
} catch (Exception ex2) {
}
throw ex;
}
}","@Override
public void addObject(K key) throws Exception {
assertOpen();
V vVar1 = vLiteral2;
try {
assertOpen();
addObjectToPool(key, vVar1, false);
} catch (IllegalStateException ex) {
try {
_factory.destroyObject(key, vVar1);
} catch (Exception ex2) {
}
throw ex;
}
}"
18122,Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,pool,1987,private int maxTotal;,private int maxTotal;,private int intVar1;
18123,Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,pool,1988,private boolean lifo;,private boolean lifo;,private boolean booleanVar1;
18124,Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,pool,1989,private WhenExhaustedAction whenExhaustedAction;,private WhenExhaustedAction whenExhaustedAction;,private WhenExhaustedAction whenexhaustedactionVar1;
18127,Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,pool,1992,private boolean testWhileIdle;,private boolean testWhileIdle;,private boolean booleanVar1;
18128,Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,pool,1993,private boolean testOnBorrow;,private boolean testOnBorrow;,private boolean booleanVar1;
18130,Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,pool,1995,private long timeBetweenEvictionRunsMillis;,private long timeBetweenEvictionRunsMillis;,private long longVar1;
18149,Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,pool,2014,private boolean testOnReturn;,private boolean testOnReturn;,private boolean booleanVar1;
18151,Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,pool,2016,private int numTestsPerEvictionRun;,private int numTestsPerEvictionRun;,private int intVar1;
18163,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2028,"} catch (Exception e) {
","public void returnObject(final Object key, final Object obj) {
try {
pool.returnObject(obj);
} catch (Exception e) {
}
}","public void returnObject(final Object key, final Object obj) {
try {
pool.returnObject(obj);
} catch (Exception e) {
}
}"
18168,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2033,"} catch (Exception e) {
","public void invalidateObject(final Object key, final Object obj) {
if (type.isInstance(obj)) {
try {
keyedPool.invalidateObject(key, obj);
} catch (Exception e) {
}
} else {
throw new ClassCastException(""Invalidated object for key: "" + key + "" is not of type: "" + type.getName() + "" was: "" + obj);
}
}","public void invalidateObject(final Object key, final Object obj) {
if (type.isInstance(obj)) {
try {
keyedPool.invalidateObject(key, obj);
} catch (Exception e) {
}
} else {
throw new ClassCastException(""Invalidated object for key: "" + key + "" is not of type: "" + type.getName() + "" was: "" + obj);
}
}"
18172,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2037,"} catch (Exception e) {
","public void returnObject(final Object key, final Object obj) {
if (type.isInstance(obj)) {
try {
keyedPool.returnObject(key, obj);
} catch (Exception e) {
}
} else {
throw new ClassCastException(""Returned object for key: "" + key + "" is not of type: "" + type.getName() + "" was: "" + obj);
}
}","public void returnObject(final Object key, final Object obj) {
if (type.isInstance(obj)) {
try {
keyedPool.returnObject(key, obj);
} catch (Exception e) {
}
} else {
throw new ClassCastException(""Returned object for key: "" + key + "" is not of type: "" + type.getName() + "" was: "" + obj);
}
}"
18174,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2039,"} catch (Exception e) {
","public void close() {
try {
pool.close();
} catch (Exception e) {
}
}","public void close() {
try {
pool.close();
} catch (Exception e) {
}
}"
18175,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2040,"} catch (Exception e) {
","public void returnObject(final Object obj) {
if (type.isInstance(obj)) {
try {
pool.returnObject(obj);
} catch (Exception e) {
}
} else {
throw new ClassCastException(""Returned object is not of type: "" + type.getName() + "" was: "" + obj);
}
}","public void returnObject(final Object obj) {
if (type.isInstance(obj)) {
try {
pool.returnObject(obj);
} catch (Exception e) {
}
} else {
throw new ClassCastException(""Returned object is not of type: "" + type.getName() + "" was: "" + obj);
}
}"
18176,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2041,"} catch (Exception e) {
","public void returnObject(final Object obj) {
synchronized (lock) {
try {
pool.returnObject(obj);
} catch (Exception e) {
}
}
}","public void returnObject(final Object obj) {
synchronized (lock) {
try {
pool.returnObject(obj);
} catch (Exception e) {
}
}
}"
18187,DODGY_CODE,RI_REDUNDANT_INTERFACES,FP,pool,2052,"public class GenericKeyedObjectPool extends BaseKeyedObjectPool implements KeyedObjectPool {
public static final byte WHEN_EXHAUSTED_FAIL   = 0;
public static final byte WHEN_EXHAUSTED_BLOCK  = 1;
public static final byte WHEN_EXHAUSTED_GROW   = 2;
public static final int DEFAULT_MAX_IDLE  = 8;
public static final int DEFAULT_MAX_ACTIVE  = 8;
public static final int DEFAULT_MAX_TOTAL  = -1;
public static final byte DEFAULT_WHEN_EXHAUSTED_ACTION = WHEN_EXHAUSTED_BLOCK;
public static final long DEFAULT_MAX_WAIT = -1L;
public static final boolean DEFAULT_TEST_ON_BORROW = false;
public static final boolean DEFAULT_TEST_ON_RETURN = false;
public static final boolean DEFAULT_TEST_WHILE_IDLE = false;
public static final long DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS = -1L;
public static final int DEFAULT_NUM_TESTS_PER_EVICTION_RUN = 3;
public static final long DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS = 1000L * 60L * 30L;
public static final int DEFAULT_MIN_IDLE = 0;
public static final boolean DEFAULT_LIFO = true;
public GenericKeyedObjectPool() {
this(null, DEFAULT_MAX_ACTIVE, DEFAULT_WHEN_EXHAUSTED_ACTION, DEFAULT_MAX_WAIT, DEFAULT_MAX_IDLE,
DEFAULT_TEST_ON_BORROW, DEFAULT_TEST_ON_RETURN, DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS,
DEFAULT_NUM_TESTS_PER_EVICTION_RUN, DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS, DEFAULT_TEST_WHILE_IDLE);
}
public GenericKeyedObjectPool(KeyedPoolableObjectFactory factory) {
this(factory, DEFAULT_MAX_ACTIVE, DEFAULT_WHEN_EXHAUSTED_ACTION, DEFAULT_MAX_WAIT, DEFAULT_MAX_IDLE,
DEFAULT_TEST_ON_BORROW, DEFAULT_TEST_ON_RETURN, DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS,
DEFAULT_NUM_TESTS_PER_EVICTION_RUN, DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS, DEFAULT_TEST_WHILE_IDLE);
}
public GenericKeyedObjectPool(KeyedPoolableObjectFactory factory, GenericKeyedObjectPool.Config config) {
this(factory, config.maxActive, config.whenExhaustedAction, config.maxWait, config.maxIdle, config.maxTotal,
config.minIdle, config.testOnBorrow, config.testOnReturn, config.timeBetweenEvictionRunsMillis,
config.numTestsPerEvictionRun, config.minEvictableIdleTimeMillis, config.testWhileIdle, config.lifo);
}
public GenericKeyedObjectPool(KeyedPoolableObjectFactory factory, int maxActive) {
this(factory,maxActive, DEFAULT_WHEN_EXHAUSTED_ACTION, DEFAULT_MAX_WAIT, DEFAULT_MAX_IDLE,
DEFAULT_TEST_ON_BORROW, DEFAULT_TEST_ON_RETURN, DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS,
DEFAULT_NUM_TESTS_PER_EVICTION_RUN, DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS, DEFAULT_TEST_WHILE_IDLE);
}
public GenericKeyedObjectPool(KeyedPoolableObjectFactory factory, int maxActive, byte whenExhaustedAction,
long maxWait) {
this(factory, maxActive, whenExhaustedAction, maxWait, DEFAULT_MAX_IDLE, DEFAULT_TEST_ON_BORROW,
DEFAULT_TEST_ON_RETURN, DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS, DEFAULT_NUM_TESTS_PER_EVICTION_RUN,
DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS, DEFAULT_TEST_WHILE_IDLE);
}
public GenericKeyedObjectPool(KeyedPoolableObjectFactory factory, int maxActive, byte whenExhaustedAction,
long maxWait, boolean testOnBorrow, boolean testOnReturn) {
this(factory, maxActive, whenExhaustedAction, maxWait, DEFAULT_MAX_IDLE,testOnBorrow,testOnReturn,
DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS, DEFAULT_NUM_TESTS_PER_EVICTION_RUN,
DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS, DEFAULT_TEST_WHILE_IDLE);
}
public GenericKeyedObjectPool(KeyedPoolableObjectFactory factory, int maxActive, byte whenExhaustedAction,
long maxWait, int maxIdle) {
this(factory, maxActive, whenExhaustedAction, maxWait, maxIdle, DEFAULT_TEST_ON_BORROW, DEFAULT_TEST_ON_RETURN,
DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS, DEFAULT_NUM_TESTS_PER_EVICTION_RUN,
DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS, DEFAULT_TEST_WHILE_IDLE);
}
public GenericKeyedObjectPool(KeyedPoolableObjectFactory factory, int maxActive, byte whenExhaustedAction,
long maxWait, int maxIdle, boolean testOnBorrow, boolean testOnReturn) {
this(factory, maxActive, whenExhaustedAction, maxWait, maxIdle, testOnBorrow, testOnReturn,
DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS, DEFAULT_NUM_TESTS_PER_EVICTION_RUN,
DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS, DEFAULT_TEST_WHILE_IDLE);
}
public GenericKeyedObjectPool(KeyedPoolableObjectFactory factory, int maxActive, byte whenExhaustedAction,
long maxWait, int maxIdle, boolean testOnBorrow, boolean testOnReturn, long timeBetweenEvictionRunsMillis,
int numTestsPerEvictionRun, long minEvictableIdleTimeMillis, boolean testWhileIdle) {
this(factory, maxActive, whenExhaustedAction, maxWait, maxIdle, GenericKeyedObjectPool.DEFAULT_MAX_TOTAL,
testOnBorrow, testOnReturn, timeBetweenEvictionRunsMillis, numTestsPerEvictionRun,
minEvictableIdleTimeMillis, testWhileIdle);
}
public GenericKeyedObjectPool(KeyedPoolableObjectFactory factory, int maxActive, byte whenExhaustedAction,
long maxWait, int maxIdle, int maxTotal, boolean testOnBorrow, boolean testOnReturn,
long timeBetweenEvictionRunsMillis, int numTestsPerEvictionRun, long minEvictableIdleTimeMillis,
boolean testWhileIdle) {
this(factory, maxActive, whenExhaustedAction, maxWait, maxIdle, maxTotal,
GenericKeyedObjectPool.DEFAULT_MIN_IDLE, testOnBorrow, testOnReturn, timeBetweenEvictionRunsMillis,
numTestsPerEvictionRun, minEvictableIdleTimeMillis, testWhileIdle);
}
public GenericKeyedObjectPool(KeyedPoolableObjectFactory factory, int maxActive, byte whenExhaustedAction,
long maxWait, int maxIdle, int maxTotal, int minIdle, boolean testOnBorrow, boolean testOnReturn,
long timeBetweenEvictionRunsMillis, int numTestsPerEvictionRun, long minEvictableIdleTimeMillis,
boolean testWhileIdle) {
this(factory, maxActive, whenExhaustedAction, maxWait, maxIdle, maxTotal, minIdle, testOnBorrow, testOnReturn,
timeBetweenEvictionRunsMillis, numTestsPerEvictionRun, minEvictableIdleTimeMillis, testWhileIdle,
DEFAULT_LIFO);
}
public GenericKeyedObjectPool(KeyedPoolableObjectFactory factory, int maxActive, byte whenExhaustedAction,
long maxWait, int maxIdle, int maxTotal, int minIdle, boolean testOnBorrow, boolean testOnReturn,
long timeBetweenEvictionRunsMillis, int numTestsPerEvictionRun, long minEvictableIdleTimeMillis,
boolean testWhileIdle, boolean lifo) {
_factory = factory;
_maxActive = maxActive;
_lifo = lifo;
switch (whenExhaustedAction) {
case WHEN_EXHAUSTED_BLOCK:
case WHEN_EXHAUSTED_FAIL:
case WHEN_EXHAUSTED_GROW:
_whenExhaustedAction = whenExhaustedAction;
break;
default:
throw new IllegalArgumentException(""whenExhaustedAction "" + whenExhaustedAction + "" not recognized."");
}
_maxWait = maxWait;
_maxIdle = maxIdle;
_maxTotal = maxTotal;
_minIdle = minIdle;
_testOnBorrow = testOnBorrow;
_testOnReturn = testOnReturn;
_timeBetweenEvictionRunsMillis = timeBetweenEvictionRunsMillis;
_numTestsPerEvictionRun = numTestsPerEvictionRun;
_minEvictableIdleTimeMillis = minEvictableIdleTimeMillis;
_testWhileIdle = testWhileIdle;
_poolMap = new HashMap();
_poolList = new CursorableLinkedList();
startEvictor(_timeBetweenEvictionRunsMillis);
}
public synchronized int getMaxActive() {
return _maxActive;
}
public synchronized void setMaxActive(int maxActive) {
_maxActive = maxActive;
allocate();
}
public synchronized int getMaxTotal() {
return _maxTotal;
}
public synchronized void setMaxTotal(int maxTotal) {
_maxTotal = maxTotal;
allocate();
}
public synchronized byte getWhenExhaustedAction() {
return _whenExhaustedAction;
}
public synchronized void setWhenExhaustedAction(byte whenExhaustedAction) {
switch(whenExhaustedAction) {
case WHEN_EXHAUSTED_BLOCK:
case WHEN_EXHAUSTED_FAIL:
case WHEN_EXHAUSTED_GROW:
_whenExhaustedAction = whenExhaustedAction;
allocate();
break;
default:
throw new IllegalArgumentException(""whenExhaustedAction "" + whenExhaustedAction + "" not recognized."");
}
}
public synchronized long getMaxWait() {
return _maxWait;
}
public synchronized void setMaxWait(long maxWait) {
_maxWait = maxWait;
}
public synchronized int getMaxIdle() {
return _maxIdle;
}
public synchronized void setMaxIdle(int maxIdle) {
_maxIdle = maxIdle;
allocate();
}
public synchronized void setMinIdle(int poolSize) {
_minIdle = poolSize;
}
public synchronized int getMinIdle() {
return _minIdle;
}
public boolean getTestOnBorrow() {
return _testOnBorrow;
}
public void setTestOnBorrow(boolean testOnBorrow) {
_testOnBorrow = testOnBorrow;
}
public boolean getTestOnReturn() {
return _testOnReturn;
}
public void setTestOnReturn(boolean testOnReturn) {
_testOnReturn = testOnReturn;
}
public synchronized long getTimeBetweenEvictionRunsMillis() {
return _timeBetweenEvictionRunsMillis;
}
public synchronized void setTimeBetweenEvictionRunsMillis(long timeBetweenEvictionRunsMillis) {
_timeBetweenEvictionRunsMillis = timeBetweenEvictionRunsMillis;
startEvictor(_timeBetweenEvictionRunsMillis);
}
public synchronized int getNumTestsPerEvictionRun() {
return _numTestsPerEvictionRun;
}
public synchronized void setNumTestsPerEvictionRun(int numTestsPerEvictionRun) {
_numTestsPerEvictionRun = numTestsPerEvictionRun;
}
public synchronized long getMinEvictableIdleTimeMillis() {
return _minEvictableIdleTimeMillis;
}
public synchronized void setMinEvictableIdleTimeMillis(long minEvictableIdleTimeMillis) {
_minEvictableIdleTimeMillis = minEvictableIdleTimeMillis;
}
public synchronized boolean getTestWhileIdle() {
return _testWhileIdle;
}
public synchronized void setTestWhileIdle(boolean testWhileIdle) {
_testWhileIdle = testWhileIdle;
}
public synchronized void setConfig(GenericKeyedObjectPool.Config conf) {
setMaxIdle(conf.maxIdle);
setMaxActive(conf.maxActive);
setMaxTotal(conf.maxTotal);
setMinIdle(conf.minIdle);
setMaxWait(conf.maxWait);
setWhenExhaustedAction(conf.whenExhaustedAction);
setTestOnBorrow(conf.testOnBorrow);
setTestOnReturn(conf.testOnReturn);
setTestWhileIdle(conf.testWhileIdle);
setNumTestsPerEvictionRun(conf.numTestsPerEvictionRun);
setMinEvictableIdleTimeMillis(conf.minEvictableIdleTimeMillis);
setTimeBetweenEvictionRunsMillis(conf.timeBetweenEvictionRunsMillis);
}
public synchronized boolean getLifo() {
return _lifo;
}
public synchronized void setLifo(boolean lifo) {
this._lifo = lifo;
}
public Object borrowObject(Object key) throws Exception {
long starttime = System.currentTimeMillis();
Latch latch = new Latch(key);
byte whenExhaustedAction;
long maxWait;
synchronized (this) {
whenExhaustedAction = _whenExhaustedAction;
maxWait = _maxWait;
_allocationQueue.add(latch);
allocate();
}
for(;;) {
synchronized (this) {
assertOpen();
}
if (null == latch.getPair()) {
if (latch.mayCreate()) {
} else {
switch(whenExhaustedAction) {
case WHEN_EXHAUSTED_GROW:
synchronized (this) {
_allocationQueue.remove(latch);
latch.getPool().incrementInternalProcessingCount();
}
break;
case WHEN_EXHAUSTED_FAIL:
synchronized (this) {
_allocationQueue.remove(latch);
}
throw new NoSuchElementException(""Pool exhausted"");
case WHEN_EXHAUSTED_BLOCK:
try {
synchronized (latch) {
if (maxWait <= 0) {
latch.wait();
} else {
final long elapsed = (System.currentTimeMillis() - starttime);
final long waitTime = maxWait - elapsed;
if (waitTime > 0)
{
latch.wait(waitTime);
}
}
}
} catch(InterruptedException e) {
Thread.currentThread().interrupt();
throw e;
}
if (maxWait > 0 && ((System.currentTimeMillis() - starttime) >= maxWait)) {
throw new NoSuchElementException(""Timeout waiting for idle object"");
} else {
continue; 
}
default:
throw new IllegalArgumentException(""whenExhaustedAction "" + whenExhaustedAction +
"" not recognized."");
}
}
}
boolean newlyCreated = false;
if (null == latch.getPair()) {
try {
Object obj = _factory.makeObject(key);
latch.setPair(new ObjectTimestampPair(obj));
newlyCreated = true;
} finally {
if (!newlyCreated) {
synchronized (this) {
latch.getPool().decrementInternalProcessingCount();
allocate();
}
}
}
}
try {
_factory.activateObject(key, latch.getPair().value);
if (_testOnBorrow && !_factory.validateObject(key, latch.getPair().value)) {
throw new Exception(""ValidateObject failed"");
}
synchronized (this) {
latch.getPool().decrementInternalProcessingCount();
latch.getPool().incrementActiveCount();
}
return latch.getPair().value;
} catch (Throwable e) {
try {
_factory.destroyObject(key, latch.getPair().value);
} catch (Throwable e2) {
}
synchronized (this) {
latch.getPool().decrementInternalProcessingCount();
latch.reset();
_allocationQueue.add(0, latch);
allocate();
}
if (newlyCreated) {
throw new NoSuchElementException(
""Could not create a validated object, cause: "" +
e.getMessage());
}
else {
continue; 
}
}
}
}
private void allocate() {
boolean clearOldest = false;
synchronized (this) {
if (isClosed()) return;
for (;;) {
if (!_allocationQueue.isEmpty()) {
Latch latch = (Latch) _allocationQueue.getFirst();
ObjectQueue pool = (ObjectQueue)(_poolMap.get(latch.getkey()));
if (null == pool) {
pool = new ObjectQueue();
_poolMap.put(latch.getkey(), pool);
_poolList.add(latch.getkey());
}
latch.setPool(pool);
if (!pool.queue.isEmpty()) {
_allocationQueue.removeFirst();
latch.setPair(
(ObjectTimestampPair) pool.queue.removeFirst());
pool.incrementInternalProcessingCount();
_totalIdle--;
synchronized (latch) {
latch.notify();
}
continue;
}
if ((_maxTotal > 0) &&
(_totalActive + _totalIdle + _totalInternalProcessing >= _maxTotal)) {
clearOldest = true;
break;
}
if ((_maxActive < 0 || pool.activeCount + pool.internalProcessingCount < _maxActive) &&
(_maxTotal < 0 || _totalActive + _totalIdle + _totalInternalProcessing < _maxTotal)) {
_allocationQueue.removeFirst();
latch.setMayCreate(true);
pool.incrementInternalProcessingCount();
synchronized (latch) {
latch.notify();
}
continue;
}
}
break;
}
}
if (clearOldest) {
clearOldest();
}
}
public void clear() {
Map toDestroy = new HashMap();
synchronized (this) {
for (Iterator it = _poolMap.keySet().iterator(); it.hasNext();) {
Object key = it.next();
ObjectQueue pool = (ObjectQueue)_poolMap.get(key);
toDestroy.put(key, pool.queue);
it.remove();
_poolList.remove(key);
_totalIdle = _totalIdle - pool.queue.size();
_totalInternalProcessing =
_totalInternalProcessing + pool.queue.size();
}
}
destroy(toDestroy);
}
public void clearOldest() {
final Map toDestroy = new HashMap();
final Map map = new TreeMap();
synchronized (this) {
for (Iterator keyiter = _poolMap.keySet().iterator(); keyiter.hasNext();) {
final Object key = keyiter.next();
final CursorableLinkedList list = ((ObjectQueue)_poolMap.get(key)).queue;
for (Iterator it = list.iterator(); it.hasNext();) {
map.put(it.next(), key);
}
}
Set setPairKeys = map.entrySet();
int itemsToRemove = ((int) (map.size() * 0.15)) + 1;
Iterator iter = setPairKeys.iterator();
while (iter.hasNext() && itemsToRemove > 0) {
Map.Entry entry = (Map.Entry) iter.next();
Object key = entry.getValue();
ObjectTimestampPair pairTimeStamp = (ObjectTimestampPair) entry.getKey();
final CursorableLinkedList list =
((ObjectQueue)(_poolMap.get(key))).queue;
list.remove(pairTimeStamp);
if (toDestroy.containsKey(key)) {
((List)toDestroy.get(key)).add(pairTimeStamp);
} else {
List listForKey = new ArrayList();
listForKey.add(pairTimeStamp);
toDestroy.put(key, listForKey);
}
if (list.isEmpty()) {
_poolMap.remove(key);
_poolList.remove(key);
}
_totalIdle--;
_totalInternalProcessing++;
itemsToRemove--;
}
}
destroy(toDestroy);
}
public void clear(Object key) {
Map toDestroy = new HashMap();
final ObjectQueue pool;
synchronized (this) {
pool = (ObjectQueue)(_poolMap.remove(key));
if (pool == null) {
return;
} else {
_poolList.remove(key);
}
_totalIdle = _totalIdle - pool.queue.size();
_totalInternalProcessing =
_totalInternalProcessing + pool.queue.size();
toDestroy.put(key, pool.queue);
}
destroy(toDestroy);
}
private void destroy(Map m) {
for (Iterator keys = m.keySet().iterator(); keys.hasNext();) {
Object key = keys.next();
Collection c = (Collection) m.get(key);
for (Iterator it = c.iterator(); it.hasNext();) {
try {
_factory.destroyObject(
key,((ObjectTimestampPair)(it.next())).value);
} catch(Exception e) {
} finally {
synchronized(this) {
_totalInternalProcessing--;
allocate();
}
}
}
}
}
public synchronized int getNumActive() {
return _totalActive;
}
public synchronized int getNumIdle() {
return _totalIdle;
}
public synchronized int getNumActive(Object key) {
final ObjectQueue pool = (ObjectQueue)(_poolMap.get(key));
return pool != null ? pool.activeCount : 0;
}
public synchronized int getNumIdle(Object key) {
final ObjectQueue pool = (ObjectQueue)(_poolMap.get(key));
return pool != null ? pool.queue.size() : 0;
}
public void returnObject(Object key, Object obj) throws Exception {
try {
addObjectToPool(key, obj, true);
} catch (Exception e) {
if (_factory != null) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e2) {
}
// TODO: Correctness here depends on control in addObjectToPool.
ObjectQueue pool = (ObjectQueue) (_poolMap.get(key));
if (pool != null) {
synchronized(this) {
pool.decrementActiveCount();
allocate();
}
}
}
}
}
private void addObjectToPool(Object key, Object obj,
boolean decrementNumActive) throws Exception {
boolean success = true; 
if (_testOnReturn && !_factory.validateObject(key, obj)) {
success = false;
} else {
_factory.passivateObject(key, obj);
}
boolean shouldDestroy = !success;
ObjectQueue pool;
synchronized (this) {
pool = (ObjectQueue) (_poolMap.get(key));
if (null == pool) {
pool = new ObjectQueue();
_poolMap.put(key, pool);
_poolList.add(key);
}
if (isClosed()) {
shouldDestroy = true;
} else {
if (_maxIdle >= 0 && (pool.queue.size() >= _maxIdle)) {
shouldDestroy = true;
} else if (success) {
if (_lifo) {
pool.queue.addFirst(new ObjectTimestampPair(obj));
} else {
pool.queue.addLast(new ObjectTimestampPair(obj));
}
_totalIdle++;
if (decrementNumActive) {
pool.decrementActiveCount();
}
allocate();
}
}
}
if (shouldDestroy) {
try {
_factory.destroyObject(key, obj);
} catch(Exception e) {
}
if (decrementNumActive) {
synchronized(this) {
pool.decrementActiveCount();
allocate();
}
}
}
}
public void invalidateObject(Object key, Object obj) throws Exception {
try {
_factory.destroyObject(key, obj);
} finally {
synchronized (this) {
ObjectQueue pool = (ObjectQueue) (_poolMap.get(key));
if (null == pool) {
pool = new ObjectQueue();
_poolMap.put(key, pool);
_poolList.add(key);
}
pool.decrementActiveCount();
allocate(); 
}
}
}
public void addObject(Object key) throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
Object obj = _factory.makeObject(key);
try {
assertOpen();
addObjectToPool(key, obj, false);
} catch (IllegalStateException ex) { 
try {
_factory.destroyObject(key, obj);
} catch (Exception ex2) {
}
throw ex;
}
}
public synchronized void preparePool(Object key, boolean populateImmediately) {
ObjectQueue pool = (ObjectQueue)(_poolMap.get(key));
if (null == pool) {
pool = new ObjectQueue();
_poolMap.put(key,pool);
_poolList.add(key);
}
if (populateImmediately) {
try {
ensureMinIdle(key);
}
catch (Exception e) {
}
}
}
public void close() throws Exception {
super.close();
synchronized (this) {
clear();
if (null != _evictionCursor) {
_evictionCursor.close();
_evictionCursor = null;
}
if (null != _evictionKeyCursor) {
_evictionKeyCursor.close();
_evictionKeyCursor = null;
}
startEvictor(-1L);
}
}
public void setFactory(KeyedPoolableObjectFactory factory) throws IllegalStateException {
Map toDestroy = new HashMap();
synchronized (this) {
assertOpen();
if (0 < getNumActive()) {
throw new IllegalStateException(""Objects are already active"");
} else {
for (Iterator it = _poolMap.keySet().iterator(); it.hasNext();) {
Object key = it.next();
ObjectQueue pool = (ObjectQueue)_poolMap.get(key);
if (pool != null) {
toDestroy.put(key, pool.queue);
it.remove();
_poolList.remove(key);
_totalIdle = _totalIdle - pool.queue.size();
_totalInternalProcessing =
_totalInternalProcessing + pool.queue.size();
}
}
destroy(toDestroy);
_factory = factory;
}
}
destroy(toDestroy);
}
public void evict() throws Exception {
Object key = null;
boolean testWhileIdle;
long minEvictableIdleTimeMillis;
synchronized (this) {
testWhileIdle = _testWhileIdle;
minEvictableIdleTimeMillis = _minEvictableIdleTimeMillis;
if (_evictionKeyCursor != null &&
_evictionKeyCursor._lastReturned != null) {
key = _evictionKeyCursor._lastReturned.value();
}
}
for (int i=0, m=getNumTests(); i<m; i++) {
final ObjectTimestampPair pair;
synchronized (this) {
if (_poolMap == null || _poolMap.size() == 0) {
continue;
}
if (null == _evictionKeyCursor) {
resetEvictionKeyCursor();
key = null;
}
if (null == _evictionCursor) {
if (_evictionKeyCursor.hasNext()) {
key = _evictionKeyCursor.next();
resetEvictionObjectCursor(key);
} else {
resetEvictionKeyCursor();
if (_evictionKeyCursor != null) {
if (_evictionKeyCursor.hasNext()) {
key = _evictionKeyCursor.next();
resetEvictionObjectCursor(key);
}
}
}
}
if (_evictionCursor == null) {
continue; 
}
if ((_lifo && !_evictionCursor.hasPrevious()) ||
(!_lifo && !_evictionCursor.hasNext())) {
if (_evictionKeyCursor != null) {
if (_evictionKeyCursor.hasNext()) {
key = _evictionKeyCursor.next();
resetEvictionObjectCursor(key);
} else { 
resetEvictionKeyCursor();
if (_evictionKeyCursor != null) {
if (_evictionKeyCursor.hasNext()) {
key = _evictionKeyCursor.next();
resetEvictionObjectCursor(key);
}
}
}
}
}
if ((_lifo && !_evictionCursor.hasPrevious()) ||
(!_lifo && !_evictionCursor.hasNext())) {
continue; 
}
pair = _lifo ?
(ObjectTimestampPair) _evictionCursor.previous() :
(ObjectTimestampPair) _evictionCursor.next();
_evictionCursor.remove();
_totalIdle--;
_totalInternalProcessing++;
}
boolean removeObject=false;
if ((minEvictableIdleTimeMillis > 0) &&
(System.currentTimeMillis() - pair.tstamp >
minEvictableIdleTimeMillis)) {
removeObject=true;
}
if (testWhileIdle && removeObject == false) {
boolean active = false;
try {
_factory.activateObject(key,pair.value);
active = true;
} catch(Exception e) {
removeObject=true;
}
if (active) {
if (!_factory.validateObject(key,pair.value)) {
removeObject=true;
} else {
try {
_factory.passivateObject(key,pair.value);
} catch(Exception e) {
removeObject=true;
}
}
}
}
if (removeObject) {
try {
_factory.destroyObject(key, pair.value);
} catch(Exception e) {
} finally {
if (_minIdle == 0) {
synchronized (this) {
ObjectQueue objectQueue =
(ObjectQueue)_poolMap.get(key);
if (objectQueue != null &&
objectQueue.queue.isEmpty()) {
_poolMap.remove(key);
_poolList.remove(key);
}
}
}
}
}
synchronized (this) {
if (!removeObject) {
_evictionCursor.add(pair);
_totalIdle++;
if (_lifo) {
_evictionCursor.previous();
}
}
_totalInternalProcessing--;
}
}
}
private void resetEvictionKeyCursor() {
if (_evictionKeyCursor != null) {
_evictionKeyCursor.close();
}
_evictionKeyCursor = _poolList.cursor();
if (null != _evictionCursor) {
_evictionCursor.close();
_evictionCursor = null;
}
}
private void resetEvictionObjectCursor(Object key) {
if (_evictionCursor != null) {
_evictionCursor.close();
}
if (_poolMap == null) {
return;
}
ObjectQueue pool = (ObjectQueue) (_poolMap.get(key));
if (pool != null) {
CursorableLinkedList queue = pool.queue;
_evictionCursor = queue.cursor(_lifo ? queue.size() : 0);
}
}
private void ensureMinIdle() throws Exception {
if (_minIdle > 0) {
Object[] keysCopy;
synchronized(this) {
keysCopy = _poolMap.keySet().toArray();
}
for (int i=0; i < keysCopy.length; i++) {
ensureMinIdle(keysCopy[i]);
}
}
}
private void ensureMinIdle(Object key) throws Exception {
ObjectQueue pool;
synchronized(this) {
pool = (ObjectQueue)(_poolMap.get(key));
}
if (pool == null) {
return;
}
int objectDeficit = calculateDefecit(pool, false);
for (int i = 0; i < objectDeficit && calculateDefecit(pool, true) > 0; i++) {
try {
addObject(key);
} finally {
synchronized (this) {
pool.decrementInternalProcessingCount();
allocate();
}
}
}
}
protected synchronized void startEvictor(long delay) {
if (null != _evictor) {
EvictionTimer.cancel(_evictor);
_evictor = null;
}
if (delay > 0) {
_evictor = new Evictor();
EvictionTimer.schedule(_evictor, delay, delay);
}
}
synchronized String debugInfo() {
StringBuffer buf = new StringBuffer();
buf.append(""Active: "").append(getNumActive()).append(""\n"");
buf.append(""Idle: "").append(getNumIdle()).append(""\n"");
Iterator it = _poolMap.keySet().iterator();
while (it.hasNext()) {
buf.append(""\t"").append(_poolMap.get(it.next())).append(""\n"");
}
return buf.toString();
}
private synchronized int getNumTests() {
if (_numTestsPerEvictionRun >= 0) {
return _numTestsPerEvictionRun;
} else {
return(int)(Math.ceil(_totalIdle/Math.abs((double)_numTestsPerEvictionRun)));
}
}
private synchronized int calculateDefecit(ObjectQueue pool,
boolean incrementInternal) {
int objectDefecit = 0;
objectDefecit = getMinIdle() - pool.queue.size();
if (getMaxActive() > 0) {
int growLimit = Math.max(0, getMaxActive() - pool.activeCount - pool.queue.size() - pool.internalProcessingCount);
objectDefecit = Math.min(objectDefecit, growLimit);
}
if (getMaxTotal() > 0) {
int growLimit = Math.max(0, getMaxTotal() - getNumActive() - getNumIdle() - _totalInternalProcessing);
objectDefecit = Math.min(objectDefecit, growLimit);
}
if (incrementInternal && objectDefecit > 0) {
pool.incrementInternalProcessingCount();
}
return objectDefecit;
}
private class ObjectQueue {
private int activeCount = 0;
private final CursorableLinkedList queue = new CursorableLinkedList();
private int internalProcessingCount = 0;
void incrementActiveCount() {
synchronized (GenericKeyedObjectPool.this) {
_totalActive++;
}
activeCount++;
}
void decrementActiveCount() {
synchronized (GenericKeyedObjectPool.this) {
_totalActive--;
}
if (activeCount > 0) {
activeCount--;
}
}
void incrementInternalProcessingCount() {
synchronized (GenericKeyedObjectPool.this) {
_totalInternalProcessing++;
}
internalProcessingCount++;
}
void decrementInternalProcessingCount() {
synchronized (GenericKeyedObjectPool.this) {
_totalInternalProcessing--;
}
internalProcessingCount--;
}
}
static class ObjectTimestampPair implements Comparable {
Object value;
long tstamp;
ObjectTimestampPair(Object val) {
this(val, System.currentTimeMillis());
}
ObjectTimestampPair(Object val, long time) {
value = val;
tstamp = time;
}
public String toString() {
return value + "";"" + tstamp;
}
public int compareTo(Object obj) {
return compareTo((ObjectTimestampPair) obj);
}
public int compareTo(ObjectTimestampPair other) {
final long tstampdiff = this.tstamp - other.tstamp;
if (tstampdiff == 0) {
return System.identityHashCode(this) - System.identityHashCode(other);
} else {
return (int)Math.min(Math.max(tstampdiff, Integer.MIN_VALUE), Integer.MAX_VALUE);
}
}
}
private class Evictor extends TimerTask {
public void run() {
try {
evict();
} catch(Exception e) {
} catch(OutOfMemoryError oome) {
oome.printStackTrace(System.err);
}
try {
ensureMinIdle();
} catch (Exception e) {
}
}
}
public static class Config {
public int maxIdle = GenericKeyedObjectPool.DEFAULT_MAX_IDLE;
public int maxActive = GenericKeyedObjectPool.DEFAULT_MAX_ACTIVE;
public int maxTotal = GenericKeyedObjectPool.DEFAULT_MAX_TOTAL;
public int minIdle = GenericKeyedObjectPool.DEFAULT_MIN_IDLE;
public long maxWait = GenericKeyedObjectPool.DEFAULT_MAX_WAIT;
public byte whenExhaustedAction = GenericKeyedObjectPool.DEFAULT_WHEN_EXHAUSTED_ACTION;
public boolean testOnBorrow = GenericKeyedObjectPool.DEFAULT_TEST_ON_BORROW;
public boolean testOnReturn = GenericKeyedObjectPool.DEFAULT_TEST_ON_RETURN;
public boolean testWhileIdle = GenericKeyedObjectPool.DEFAULT_TEST_WHILE_IDLE;
public long timeBetweenEvictionRunsMillis = GenericKeyedObjectPool.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS;
public int numTestsPerEvictionRun =  GenericKeyedObjectPool.DEFAULT_NUM_TESTS_PER_EVICTION_RUN;
public long minEvictableIdleTimeMillis = GenericKeyedObjectPool.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS;
public boolean lifo = GenericKeyedObjectPool.DEFAULT_LIFO;
}
private static final class Latch {
private Object _key;
private ObjectQueue _pool;
private ObjectTimestampPair _pair;
private boolean _mayCreate = false;
private Latch(Object key) {
_key = key;
}
private synchronized Object getkey() {
return _key;
}
private synchronized ObjectQueue getPool() {
return _pool;
}
private synchronized void setPool(ObjectQueue pool) {
_pool = pool;
}
private synchronized ObjectTimestampPair getPair() {
return _pair;
}
private synchronized void setPair(ObjectTimestampPair pair) {
_pair = pair;
}
private synchronized boolean mayCreate() {
return _mayCreate;
}
private synchronized void setMayCreate(boolean mayCreate) {
_mayCreate = mayCreate;
}
private synchronized void reset() {
_pair = null;
_mayCreate = false;
}
}
private int _maxIdle = DEFAULT_MAX_IDLE;
private int _minIdle = DEFAULT_MIN_IDLE;
private int _maxActive = DEFAULT_MAX_ACTIVE;
private int _maxTotal = DEFAULT_MAX_TOTAL;
private long _maxWait = DEFAULT_MAX_WAIT;
private byte _whenExhaustedAction = DEFAULT_WHEN_EXHAUSTED_ACTION;
private volatile boolean _testOnBorrow = DEFAULT_TEST_ON_BORROW;
private volatile boolean _testOnReturn = DEFAULT_TEST_ON_RETURN;
private boolean _testWhileIdle = DEFAULT_TEST_WHILE_IDLE;
private long _timeBetweenEvictionRunsMillis = DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS;
private int _numTestsPerEvictionRun =  DEFAULT_NUM_TESTS_PER_EVICTION_RUN;
private long _minEvictableIdleTimeMillis = DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS;
private Map _poolMap = null;
private int _totalActive = 0;
private int _totalIdle = 0;
private int _totalInternalProcessing = 0;
private KeyedPoolableObjectFactory _factory = null;
private Evictor _evictor = null;
private CursorableLinkedList _poolList = null;
private CursorableLinkedList.Cursor _evictionCursor = null;
private CursorableLinkedList.Cursor _evictionKeyCursor = null;
private boolean _lifo = DEFAULT_LIFO;
private LinkedList _allocationQueue = new LinkedList();
","public synchronized void preparePool(Object key, boolean populateImmediately) {
ObjectQueue pool = (ObjectQueue) (_poolMap.get(key));
if (null == pool) {
pool = new ObjectQueue();
_poolMap.put(key, pool);
_poolList.add(key);
}
if (populateImmediately) {
try {
ensureMinIdle(key);
} catch (Exception e) {
// Do nothing
}
}
}","public synchronized void preparePool(Object key, boolean populateImmediately) {
ObjectQueue objectqueueVar1 = objectqueueLiteral2;
if (null == objectqueueVar1) {
objectqueueVar1 = new ObjectQueue();
_poolMap.put(key, objectqueueVar1);
_poolList.add(key);
}
if (populateImmediately) {
try {
ensureMinIdle(key);
} catch (Exception e) {
// Do nothing
}
}
}"
18196,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2061,"} catch(Exception e) {
","private void addObjectToPool(Object obj, boolean decrementNumActive) throws Exception {
boolean success = true;
if (_testOnReturn && !(_factory.validateObject(obj))) {
success = false;
} else {
_factory.passivateObject(obj);
}
boolean shouldDestroy = !success;
synchronized (this) {
if (isClosed()) {
shouldDestroy = true;
} else {
if ((_maxIdle >= 0) && (_pool.size() >= _maxIdle)) {
shouldDestroy = true;
} else if (success) {
if (_lifo) {
_pool.addFirst(new ObjectTimestampPair(obj));
} else {
_pool.addLast(new ObjectTimestampPair(obj));
}
if (decrementNumActive) {
_numActive--;
}
allocate();
}
}
}
if (shouldDestroy) {
try {
_factory.destroyObject(obj);
} catch (Exception e) {
}
if (decrementNumActive) {
synchronized (this) {
_numActive--;
allocate();
}
}
}
}","private void addObjectToPool(Object obj, boolean decrementNumActive) throws Exception {
boolean booleanVar1 = booleanLiteral2;
if (_testOnReturn && !(_factory.validateObject(obj))) {
booleanVar1 = false;
} else {
_factory.passivateObject(obj);
}
boolean booleanVar3 = booleanLiteral4;
synchronized (this) {
if (isClosed()) {
booleanVar3 = true;
} else {
if ((_maxIdle >= 0) && (_pool.size() >= _maxIdle)) {
booleanVar3 = true;
} else if (booleanVar1) {
if (_lifo) {
_pool.addFirst(new ObjectTimestampPair(obj));
} else {
_pool.addLast(new ObjectTimestampPair(obj));
}
if (decrementNumActive) {
_numActive--;
}
allocate();
}
}
}
if (booleanVar3) {
try {
_factory.destroyObject(obj);
} catch (Exception e) {
}
if (decrementNumActive) {
synchronized (this) {
_numActive--;
allocate();
}
}
}
}"
18197,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2062,"} catch (Exception e2) {
","public void returnObject(Object obj) throws Exception {
try {
addObjectToPool(obj, true);
} catch (Exception e) {
if (_factory != null) {
try {
_factory.destroyObject(obj);
} catch (Exception e2) {
}
// TODO: Correctness here depends on control in addObjectToPool.
synchronized (this) {
_numActive--;
allocate();
}
}
}
}","public void returnObject(Object obj) throws Exception {
try {
addObjectToPool(obj, true);
} catch (Exception e) {
if (_factory != null) {
try {
_factory.destroyObject(obj);
} catch (Exception e2) {
}
// TODO: Correctness here depends on control in addObjectToPool.
synchronized (this) {
_numActive--;
allocate();
}
}
}
}"
18202,DODGY_CODE,RI_REDUNDANT_INTERFACES,FP,pool,2067,"public SoftReferenceObjectPool() {
_pool = new ArrayList();
_factory = null;
}
public SoftReferenceObjectPool(PoolableObjectFactory factory) {
_pool = new ArrayList();
_factory = factory;
}
public SoftReferenceObjectPool(PoolableObjectFactory factory, int initSize) throws Exception, IllegalArgumentException {
if (factory == null) {
throw new IllegalArgumentException(""factory required to prefill the pool."");
}
_pool = new ArrayList(initSize);
_factory = factory;
PoolUtils.prefill(this, initSize);
}
public synchronized Object borrowObject() throws Exception {
assertOpen();
Object obj = null;
boolean newlyCreated = false;
while(null == obj) {
if(_pool.isEmpty()) {
if(null == _factory) {
throw new NoSuchElementException();
} else {
newlyCreated = true;
obj = _factory.makeObject();
}
} else {
SoftReference ref = (SoftReference)(_pool.remove(_pool.size() - 1));
obj = ref.get();
ref.clear(); 
}
if (null != _factory && null != obj) {
try {
_factory.activateObject(obj);
if (!_factory.validateObject(obj)) {
throw new Exception(""ValidateObject failed"");
}
} catch (Throwable t) {
try {
_factory.destroyObject(obj);
} catch (Throwable t2) {
} finally {
obj = null;
}
if (newlyCreated) {
throw new NoSuchElementException(
""Could not create a validated object, cause: "" +
t.getMessage());
}
}
}
}
_numActive++;
return obj;
}
public synchronized void returnObject(Object obj) throws Exception {
boolean success = !isClosed();
if (_factory != null) {
if(!_factory.validateObject(obj)) {
success = false;
} else {
try {
_factory.passivateObject(obj);
} catch(Exception e) {
success = false;
}
}
}
boolean shouldDestroy = !success;
_numActive--;
if(success) {
_pool.add(new SoftReference(obj, refQueue));
}
notifyAll(); 
if (shouldDestroy && _factory != null) {
try {
_factory.destroyObject(obj);
} catch(Exception e) {
}
}
}
public synchronized void invalidateObject(Object obj) throws Exception {
_numActive--;
if (_factory != null) {
_factory.destroyObject(obj);
}
notifyAll(); 
}
public synchronized void addObject() throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
Object obj = _factory.makeObject();
boolean success = true;
if(!_factory.validateObject(obj)) {
success = false;
} else {
_factory.passivateObject(obj);
}
boolean shouldDestroy = !success;
if(success) {
_pool.add(new SoftReference(obj, refQueue));
notifyAll(); 
}
if(shouldDestroy) {
try {
_factory.destroyObject(obj);
} catch(Exception e) {
}
}
}
public synchronized int getNumIdle() {
pruneClearedReferences();
return _pool.size();
}
public synchronized int getNumActive() {
return _numActive;
}
public synchronized void clear() {
if(null != _factory) {
Iterator iter = _pool.iterator();
while(iter.hasNext()) {
try {
Object obj = ((SoftReference)iter.next()).get();
if(null != obj) {
_factory.destroyObject(obj);
}
} catch(Exception e) {
}
}
}
_pool.clear();
pruneClearedReferences();
}
public void close() throws Exception {
super.close();
clear();
}
public synchronized void setFactory(PoolableObjectFactory factory) throws IllegalStateException {
assertOpen();
if(0 < getNumActive()) {
throw new IllegalStateException(""Objects are already active"");
} else {
clear();
_factory = factory;
}
}
private void pruneClearedReferences() {
Reference ref;
while ((ref = refQueue.poll()) != null) {
try {
_pool.remove(ref);
} catch (UnsupportedOperationException uoe) {
}
}
}
private List _pool = null;
private PoolableObjectFactory _factory = null;
private final ReferenceQueue refQueue = new ReferenceQueue();
private int _numActive = 0;
","public synchronized void addObject() throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
Object obj = _factory.makeObject();
boolean success = true;
if (!_factory.validateObject(obj)) {
success = false;
} else {
_factory.passivateObject(obj);
}
boolean shouldDestroy = !success;
if (success) {
_pool.add(new SoftReference(obj, refQueue));
notifyAll();
}
if (shouldDestroy) {
try {
_factory.destroyObject(obj);
} catch (Exception e) {
}
}
}","public synchronized void addObject() throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
Object objectVar1 = objectLiteral2;
boolean booleanVar3 = booleanLiteral4;
if (!_factory.validateObject(objectVar1)) {
booleanVar3 = false;
} else {
_factory.passivateObject(objectVar1);
}
boolean booleanVar5 = booleanLiteral6;
if (booleanVar3) {
_pool.add(new SoftReference(objectVar1, refQueue));
notifyAll();
}
if (booleanVar5) {
try {
_factory.destroyObject(objectVar1);
} catch (Exception e) {
}
}
}"
18204,PERFORMANCE,WMI_WRONG_MAP_ITERATOR,FP,pool,2069,"Stack s = (Stack)(_pools.get(key));
","public synchronized String toString() {
StringBuffer buf = new StringBuffer();
buf.append(getClass().getName());
buf.append("" contains "").append(_pools.size()).append("" distinct pools: "");
Iterator it = _pools.keySet().iterator();
while (it.hasNext()) {
Object key = it.next();
buf.append("" |"").append(key).append(""|="");
Stack s = (Stack) (_pools.get(key));
buf.append(s.size());
}
return buf.toString();
}","public synchronized String toString() {
StringBuffer stringbufferVar1 = stringbufferLiteral2;
stringbufferVar1.append(getClass().getName());
stringbufferVar1.append("" contains "").append(_pools.size()).append("" distinct pools: "");
Iterator iteratorVar3 = iteratorLiteral4;
while (iteratorVar3.hasNext()) {
Object objectVar5 = objectLiteral6;
stringbufferVar1.append("" |"").append(objectVar5).append(""|="");
Stack stackVar7 = stackLiteral8;
stringbufferVar1.append(stackVar7.size());
}
return stringbufferVar1.toString();
}"
18206,PERFORMANCE,WMI_WRONG_MAP_ITERATOR,FP,pool,2071,"Stack stack = (Stack)(_pools.get(key));
","public synchronized void clear() {
Iterator it = _pools.keySet().iterator();
while (it.hasNext()) {
Object key = it.next();
Stack stack = (Stack) (_pools.get(key));
destroyStack(key, stack);
}
_totIdle = 0;
_pools.clear();
_activeCount.clear();
}","public synchronized void clear() {
Iterator iteratorVar1 = iteratorLiteral2;
while (iteratorVar1.hasNext()) {
Object objectVar3 = objectLiteral4;
Stack stackVar5 = stackLiteral6;
destroyStack(objectVar3, stackVar5);
}
_totIdle = 0;
_pools.clear();
_activeCount.clear();
}"
18300,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2165,"} catch (Exception e) {
","public void close() {
try {
keyedPool.close();
} catch (Exception e) {
}
}","public void close() {
try {
keyedPool.close();
} catch (Exception e) {
}
}"
18331,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2196,"} catch (Exception e) {
","public void invalidateObject(final T obj) {
synchronized (lock) {
try {
pool.invalidateObject(obj);
} catch (Exception e) {
}
}
}","public void invalidateObject(final T obj) {
synchronized (lock) {
try {
pool.invalidateObject(obj);
} catch (Exception e) {
}
}
}"
18366,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2231,"} catch(Exception e) {
","private void addObjectToPool(T obj, boolean decrementNumActive) throws Exception {
boolean success = true;
if (this.testOnReturn && !(_factory.validateObject(obj))) {
success = false;
} else {
_factory.passivateObject(obj);
}
boolean shouldDestroy = !success;
synchronized (this) {
if (isClosed()) {
shouldDestroy = true;
} else {
if ((this.maxIdle >= 0) && (_pool.size() >= this.maxIdle)) {
shouldDestroy = true;
} else if (success) {
if (this.getLifo()) {
_pool.addFirst(new ObjectTimestampPair<T>(obj));
} else {
_pool.addLast(new ObjectTimestampPair<T>(obj));
}
if (decrementNumActive) {
_numActive--;
}
allocate();
}
}
}
if (shouldDestroy) {
try {
_factory.destroyObject(obj);
} catch (Exception e) {
}
if (decrementNumActive) {
synchronized (this) {
_numActive--;
allocate();
}
}
}
}","private void addObjectToPool(T obj, boolean decrementNumActive) throws Exception {
boolean booleanVar1 = booleanLiteral2;
if (this.testOnReturn && !(_factory.validateObject(obj))) {
booleanVar1 = false;
} else {
_factory.passivateObject(obj);
}
boolean booleanVar3 = booleanLiteral4;
synchronized (this) {
if (isClosed()) {
booleanVar3 = true;
} else {
if ((this.maxIdle >= 0) && (_pool.size() >= this.maxIdle)) {
booleanVar3 = true;
} else if (booleanVar1) {
if (this.getLifo()) {
_pool.addFirst(new ObjectTimestampPair<T>(obj));
} else {
_pool.addLast(new ObjectTimestampPair<T>(obj));
}
if (decrementNumActive) {
_numActive--;
}
allocate();
}
}
}
if (booleanVar3) {
try {
_factory.destroyObject(obj);
} catch (Exception e) {
}
if (decrementNumActive) {
synchronized (this) {
_numActive--;
allocate();
}
}
}
}"
18389,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2254,"} catch(Exception e) {
","@Override
public synchronized void addObject() throws Exception {
assertOpen();
T obj = _factory.makeObject();
boolean success = true;
if (!_factory.validateObject(obj)) {
success = false;
} else {
_factory.passivateObject(obj);
}
boolean shouldDestroy = !success;
if (success) {
_pool.add(new SoftReference<T>(obj, refQueue));
notifyAll();
}
if (shouldDestroy) {
try {
_factory.destroyObject(obj);
} catch (Exception e) {
}
}
}","@Override
public synchronized void addObject() throws Exception {
assertOpen();
T tVar1 = tLiteral2;
boolean booleanVar3 = booleanLiteral4;
if (!_factory.validateObject(tVar1)) {
booleanVar3 = false;
} else {
_factory.passivateObject(tVar1);
}
boolean booleanVar5 = booleanLiteral6;
if (booleanVar3) {
_pool.add(new SoftReference<T>(tVar1, refQueue));
notifyAll();
}
if (booleanVar5) {
try {
_factory.destroyObject(tVar1);
} catch (Exception e) {
}
}
}"
18391,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2256,"} catch(Exception e) {
","@Override
public synchronized void returnObject(T obj) throws Exception {
boolean success = !isClosed();
if (!_factory.validateObject(obj)) {
success = false;
} else {
try {
_factory.passivateObject(obj);
} catch (Exception e) {
success = false;
}
}
boolean shouldDestroy = !success;
_numActive--;
if (success) {
_pool.add(new SoftReference<T>(obj, refQueue));
}
notifyAll();
if (shouldDestroy) {
try {
_factory.destroyObject(obj);
} catch (Exception e) {
}
}
}","@Override
public synchronized void returnObject(T obj) throws Exception {
boolean booleanVar1 = booleanLiteral2;
if (!_factory.validateObject(obj)) {
booleanVar1 = false;
} else {
try {
_factory.passivateObject(obj);
} catch (Exception e) {
booleanVar1 = false;
}
}
boolean booleanVar3 = booleanLiteral4;
_numActive--;
if (booleanVar1) {
_pool.add(new SoftReference<T>(obj, refQueue));
}
notifyAll();
if (booleanVar3) {
try {
_factory.destroyObject(obj);
} catch (Exception e) {
}
}
}"
18392,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2257,"} catch (Exception e) {
","@Override
public void close() {
try {
keyedPool.close();
} catch (Exception e) {
}
}","@Override
public void close() {
try {
keyedPool.close();
} catch (Exception e) {
}
}"
18400,DODGY_CODE,UCF_USELESS_CONTROL_FLOW,FP,pool,2265,"if (!idleQueue.offerFirst(this)) {
","@Override
public synchronized boolean endEvictionTest(Deque<PooledObject<T>> idleQueue) {
if (state == PooledObjectState.EVICTION) {
state = PooledObjectState.IDLE;
return true;
} else if (state == PooledObjectState.EVICTION_RETURN_TO_HEAD) {
state = PooledObjectState.IDLE;
if (!idleQueue.offerFirst(this)) {
}
}
return false;
}","@Override
public synchronized boolean endEvictionTest(Deque<PooledObject<T>> idleQueue) {
if (state == PooledObjectState.EVICTION) {
state = PooledObjectState.IDLE;
return true;
} else if (state == PooledObjectState.EVICTION_RETURN_TO_HEAD) {
state = PooledObjectState.IDLE;
if (!idleQueue.offerFirst(this)) {
}
}
return false;
}"
18403,DODGY_CODE,UCF_USELESS_CONTROL_FLOW,FP,pool,2268,"if (!underTest.endEvictionTest(idleObjects)) {
","@Override
public void evict() throws Exception {
assertOpen();
if (getNumIdle() == 0) {
return;
}
PooledObject<T> underTest = null;
EvictionPolicy<T> evictionPolicy = getEvictionPolicy();
synchronized (evictionLock) {
EvictionConfig evictionConfig = new EvictionConfig(getMinEvictableIdleTimeMillis(), getSoftMinEvictableIdleTimeMillis(), getMinIdlePerKey());
boolean testWhileIdle = getTestWhileIdle();
LinkedBlockingDeque<PooledObject<T>> idleObjects = null;
for (int i = 0, m = getNumTests(); i < m; i++) {
if (evictionIterator == null || !evictionIterator.hasNext()) {
if (evictionKeyIterator == null || !evictionKeyIterator.hasNext()) {
List<K> keyCopy = new ArrayList<K>();
Lock readLock = keyLock.readLock();
readLock.lock();
try {
keyCopy.addAll(poolKeyList);
} finally {
readLock.unlock();
}
evictionKeyIterator = keyCopy.iterator();
}
while (evictionKeyIterator.hasNext()) {
evictionKey = evictionKeyIterator.next();
ObjectDeque<T> objectDeque = poolMap.get(evictionKey);
if (objectDeque == null) {
continue;
}
idleObjects = objectDeque.getIdleObjects();
if (getLifo()) {
evictionIterator = idleObjects.descendingIterator();
} else {
evictionIterator = idleObjects.iterator();
}
if (evictionIterator.hasNext()) {
break;
}
evictionIterator = null;
}
}
if (evictionIterator == null) {
return;
}
try {
underTest = evictionIterator.next();
} catch (NoSuchElementException nsee) {
i--;
evictionIterator = null;
continue;
}
if (!underTest.startEvictionTest()) {
i--;
continue;
}
if (evictionPolicy.evict(evictionConfig, underTest, poolMap.get(evictionKey).getIdleObjects().size())) {
destroy(evictionKey, underTest, true);
destroyedByEvictorCount.incrementAndGet();
} else {
if (testWhileIdle) {
boolean active = false;
try {
factory.activateObject(evictionKey, underTest);
active = true;
} catch (Exception e) {
destroy(evictionKey, underTest, true);
destroyedByEvictorCount.incrementAndGet();
}
if (active) {
if (!factory.validateObject(evictionKey, underTest)) {
destroy(evictionKey, underTest, true);
destroyedByEvictorCount.incrementAndGet();
} else {
try {
factory.passivateObject(evictionKey, underTest);
} catch (Exception e) {
destroy(evictionKey, underTest, true);
destroyedByEvictorCount.incrementAndGet();
}
}
}
}
if (!underTest.endEvictionTest(idleObjects)) {
}
}
}
}
}","@Override
public void evict() throws Exception {
assertOpen();
if (getNumIdle() == 0) {
return;
}
PooledObject<T> pooledobject<t>Var1 = pooledobject<t>Literal2;
EvictionPolicy<T> evictionpolicy<t>Var3 = evictionpolicy<t>Literal4;
synchronized (evictionLock) {
EvictionConfig evictionconfigVar5 = evictionconfigLiteral6;
boolean booleanVar7 = booleanLiteral8;
LinkedBlockingDeque<PooledObject<T>> linkedblockingdeque<pooledobject<t>>Var9 = pooledobject<t>Literal2;
for (int intVar22 = intLiteral23, intVar24 = intLiteral25; intVar10 < intLiteral1; intVar10++) {
if (evictionIterator == null || !evictionIterator.hasNext()) {
if (evictionKeyIterator == null || !evictionKeyIterator.hasNext()) {
List<K> list<k>Var14 = list<k>Literal15;
Lock lockVar16 = lockLiteral17;
lockVar16.lock();
try {
list<k>Var14.addAll(poolKeyList);
} finally {
lockVar16.unlock();
}
evictionKeyIterator = list<k>Var14.iterator();
}
while (evictionKeyIterator.hasNext()) {
evictionKey = evictionKeyIterator.next();
ObjectDeque<T> objectdeque<t>Var18 = objectdeque<t>Literal19;
if (objectdeque<t>Var18 == null) {
continue;
}
linkedblockingdeque<pooledobject<t>>Var9 = objectdeque<t>Var18.getIdleObjects();
if (getLifo()) {
evictionIterator = linkedblockingdeque<pooledobject<t>>Var9.descendingIterator();
} else {
evictionIterator = linkedblockingdeque<pooledobject<t>>Var9.iterator();
}
if (evictionIterator.hasNext()) {
break;
}
evictionIterator = null;
}
}
if (evictionIterator == null) {
return;
}
try {
pooledobject<t>Var1 = evictionIterator.next();
} catch (NoSuchElementException nsee) {
intVar10--;
evictionIterator = null;
continue;
}
if (!pooledobject<t>Var1.startEvictionTest()) {
intVar10--;
continue;
}
if (evictionpolicy<t>Var3.evict(evictionconfigVar5, pooledobject<t>Var1, poolMap.get(evictionKey).getIdleObjects().size())) {
destroy(evictionKey, pooledobject<t>Var1, true);
destroyedByEvictorCount.incrementAndGet();
} else {
if (booleanVar7) {
boolean booleanVar20 = booleanLiteral21;
try {
factory.activateObject(evictionKey, pooledobject<t>Var1);
booleanVar20 = true;
} catch (Exception e) {
destroy(evictionKey, pooledobject<t>Var1, true);
destroyedByEvictorCount.incrementAndGet();
}
if (booleanVar20) {
if (!factory.validateObject(evictionKey, pooledobject<t>Var1)) {
destroy(evictionKey, pooledobject<t>Var1, true);
destroyedByEvictorCount.incrementAndGet();
} else {
try {
factory.passivateObject(evictionKey, pooledobject<t>Var1);
} catch (Exception e) {
destroy(evictionKey, pooledobject<t>Var1, true);
destroyedByEvictorCount.incrementAndGet();
}
}
}
}
if (!pooledobject<t>Var1.endEvictionTest(linkedblockingdeque<pooledobject<t>>Var9)) {
}
}
}
}
}"
18421,Multithreaded correctness,VO_VOLATILE_INCREMENT,FP,pool,2286,"borrowedCount++;
","@Override
public synchronized boolean allocate() {
if (state == PooledObjectState.IDLE) {
state = PooledObjectState.ALLOCATED;
lastBorrowTime = System.currentTimeMillis();
lastUseTime = lastBorrowTime;
borrowedCount++;
if (logAbandoned) {
borrowedBy = new AbandonedObjectCreatedException();
}
return true;
} else if (state == PooledObjectState.EVICTION) {
state = PooledObjectState.EVICTION_RETURN_TO_HEAD;
return false;
}
return false;
}","@Override
public synchronized boolean allocate() {
if (state == PooledObjectState.IDLE) {
state = PooledObjectState.ALLOCATED;
lastBorrowTime = System.currentTimeMillis();
lastUseTime = lastBorrowTime;
borrowedCount++;
if (logAbandoned) {
borrowedBy = new AbandonedObjectCreatedException();
}
return true;
} else if (state == PooledObjectState.EVICTION) {
state = PooledObjectState.EVICTION_RETURN_TO_HEAD;
return false;
}
return false;
}"
18439,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2304,"} catch (Exception e) {
","public void invalidateObject(final Object obj) {
try {
keyedPool.invalidateObject(key, obj);
} catch (Exception e) {
}
}","public void invalidateObject(final Object obj) {
try {
keyedPool.invalidateObject(key, obj);
} catch (Exception e) {
}
}"
18442,DODGY_CODE,REC_CATCH_EXCEPTION,FP,pool,2307,"} catch (Exception e) {
","public void run() {
boolean success = false;
try {
if (keyedPool.getNumIdle(key) < minIdle) {
keyedPool.addObject(key);
}
success = true;
} catch (Exception e) {
cancel();
} finally {
if (!success) {
cancel();
}
}
}","public void run() {
boolean booleanVar1 = booleanLiteral2;
try {
if (keyedPool.getNumIdle(key) < minIdle) {
keyedPool.addObject(key);
}
booleanVar1 = true;
} catch (Exception e) {
cancel();
} finally {
if (!booleanVar1) {
cancel();
}
}
}"
18443,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2308,"} catch (Exception e) {
","public void close() {
try {
keyedPool.close();
} catch (Exception e) {
}
}","public void close() {
try {
keyedPool.close();
} catch (Exception e) {
}
}"
18445,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2310,"} catch (Exception e) {
","public void returnObject(final Object key, final Object obj) {
if (type.isInstance(obj)) {
try {
keyedPool.returnObject(key, obj);
} catch (Exception e) {
}
} else {
throw new ClassCastException(""Returned object for key: "" + key + "" is not of type: "" + type.getName() + "" was: "" + obj);
}
}","public void returnObject(final Object key, final Object obj) {
if (type.isInstance(obj)) {
try {
keyedPool.returnObject(key, obj);
} catch (Exception e) {
}
} else {
throw new ClassCastException(""Returned object for key: "" + key + "" is not of type: "" + type.getName() + "" was: "" + obj);
}
}"
18446,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2311,"} catch (Exception e) {
","public void close() {
try {
keyedPool.close();
} catch (Exception e) {
}
}","public void close() {
try {
keyedPool.close();
} catch (Exception e) {
}
}"
18448,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2313,"} catch (Exception e) {
","public void close() {
try {
pool.close();
} catch (Exception e) {
}
}","public void close() {
try {
pool.close();
} catch (Exception e) {
}
}"
18453,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2318,"} catch (Exception e) {
","public void returnObject(final Object obj) {
synchronized (lock) {
try {
pool.returnObject(obj);
} catch (Exception e) {
}
}
}","public void returnObject(final Object obj) {
synchronized (lock) {
try {
pool.returnObject(obj);
} catch (Exception e) {
}
}
}"
18462,BAD_PRACTICE,CN_IDIOM,FP,pool,2327,"private final Map objectPools = new HashMap();
// XXX: Add better handling of when this instance is not Serializable
private final ObjectPoolFactory poolFactory;
private final transient ThreadLocal keys;
private volatile boolean open = true;
CompositeKeyedObjectPool(final ObjectPoolFactory poolFactory) throws IllegalArgumentException {
if (poolFactory == null) {
throw new IllegalArgumentException(""object pool factory must not be null."");
}
this.poolFactory = poolFactory;
if (poolFactory instanceof CompositeObjectPoolFactory) {
final PoolableObjectFactory pof = ((CompositeObjectPoolFactory)poolFactory).getFactory();
if (pof instanceof KeyedPoolableObjectFactoryAdapter) {
keys = new ThreadLocal();
((KeyedPoolableObjectFactoryAdapter)pof).setCompositeKeyedObjectPool(this);
} else {
keys = null;
}
} else {
keys = null;
}
}
private ObjectPool getObjectPool(final Object key) {
ObjectPool pool;
synchronized (objectPools) {
pool = (ObjectPool)objectPools.get(key);
if (pool == null) {
pool = poolFactory.createPool();
objectPools.put(key, pool);
if (pool instanceof CompositeObjectPool) {
((CompositeObjectPool)pool).setOwningCompositeKeyedObjectPool(this);
}
}
}
return pool;
}
public Object borrowObject(final Object key) throws Exception {
assertOpen();
final ObjectPool pool = getObjectPool(key);
try {
if (keys != null) {
keys.set(key);
}
return pool.borrowObject();
} finally {
if (keys != null) {
keys.set(null); 
}
}
}
public void returnObject(final Object key, final Object obj) {
final ObjectPool pool = getObjectPool(key);
try {
if (keys != null) {
keys.set(key);
}
pool.returnObject(obj);
} catch (Exception e) {
// XXX: In pool 3 this catch block will not be necessary and shouled be removed
} finally {
if (keys != null) {
keys.set(null); 
}
}
}
public void invalidateObject(final Object key, final Object obj) {
final ObjectPool pool = getObjectPool(key);
try {
if (keys != null) {
keys.set(key);
}
pool.invalidateObject(obj);
} catch (Exception e) {
// XXX: In pool 3 this catch block will not be necessary and shouled be removed
} finally {
if (keys != null) {
keys.set(null); 
}
}
}
public void addObject(final Object key) throws Exception {
assertOpen();
final ObjectPool pool = getObjectPool(key);
try {
if (keys != null) {
keys.set(key);
}
pool.addObject();
} finally {
if (keys != null) {
keys.set(null); 
}
}
}
public int getNumIdle(final Object key) {
final ObjectPool pool = getObjectPool(key);
try {
if (keys != null) {
keys.set(key);
}
return pool.getNumIdle();
} finally {
if (keys != null) {
keys.set(null); 
}
}
}
public int getNumActive(final Object key) {
final ObjectPool pool = getObjectPool(key);
try {
if (keys != null) {
keys.set(key);
}
return pool.getNumActive();
} finally {
if (keys != null) {
keys.set(null); 
}
}
}
public int getNumIdle() {
int numIdle = 0;
synchronized (objectPools) {
final Iterator iter = objectPools.values().iterator();
while (iter.hasNext()) {
final ObjectPool pool = (ObjectPool)iter.next();
numIdle += pool.getNumIdle();
}
}
return numIdle;
}
public int getNumActive() {
int numActive = 0;
synchronized (objectPools) {
final Iterator iter = objectPools.values().iterator();
while (iter.hasNext()) {
final ObjectPool pool = (ObjectPool)iter.next();
numActive += pool.getNumActive();
}
}
return numActive;
}
public void clear() throws Exception {
synchronized (objectPools) {
final Iterator iter = objectPools.keySet().iterator();
while (iter.hasNext()) {
final Object key = iter.next();
clear(key);
}
}
}
public void clear(final Object key) throws Exception {
final ObjectPool pool = getObjectPool(key);
try {
if (keys != null) {
keys.set(key);
}
pool.clear();
synchronized (objectPools) {
if (pool.getNumActive() == 0) {
objectPools.remove(key);
pool.close();
}
}
} finally {
if (keys != null) {
keys.set(null); 
}
}
}
public void close() {
open = false;
Thread.yield(); 
synchronized (objectPools) {
final Iterator iter = objectPools.keySet().iterator();
while (iter.hasNext()) {
final Object key = iter.next();
close(key);
}
}
}
private void close(final Object key) {
final ObjectPool pool = getObjectPool(key);
try {
if (keys != null) {
keys.set(key);
}
pool.close();
synchronized (objectPools) {
if (pool.getNumActive() == 0) {
objectPools.remove(key);
pool.close();
}
}
} catch (Exception e) {
// XXX: In pool 3 this catch block will not be necessary and shouled be removed
} finally {
if (keys != null) {
keys.set(null); 
}
}
}
public void setFactory(final KeyedPoolableObjectFactory factory) throws IllegalStateException, UnsupportedOperationException {
throw new UnsupportedOperationException(""Replacing the factory not supported. Create a new pool instance instead."");
}
private void assertOpen() throws IllegalStateException {
if (!open) {
throw new IllegalStateException(""keyed pool has been closed."");
}
}
ThreadLocal getKeys() {
return keys;
}
public String toString() {
final StringBuffer sb = new StringBuffer(128);
sb.append(""CompositeKeyedObjectPool{"");
sb.append(""poolFactory="").append(poolFactory);
sb.append("", open="").append(open);
try {
final int numActive = getNumActive();
sb.append("", activeObjects="").append(numActive);
} catch (Exception e) {
}
try {
final int numIdle = getNumIdle();
sb.append("", idleObjects="").append(numIdle);
} catch (Exception e) {
}
sb.append('}');
return sb.toString();
}
private Object readResolve() throws ObjectStreamException {
final CompositeKeyedObjectPool pool = new CompositeKeyedObjectPool(poolFactory);
if (!open) {
try {
pool.close();
} catch (Exception e) {
final InvalidObjectException ioe = new InvalidObjectException(""pool close failed on serialized closed pool."");
ioe.initCause(e);
throw ioe;
}
}
return pool;
","public String toString() {
final StringBuffer sb = new StringBuffer(128);
sb.append(""CompositeKeyedObjectPool{"");
sb.append(""poolFactory="").append(poolFactory);
sb.append("", open="").append(open);
try {
final int numActive = getNumActive();
sb.append("", activeObjects="").append(numActive);
} catch (Exception e) {
}
try {
final int numIdle = getNumIdle();
sb.append("", idleObjects="").append(numIdle);
} catch (Exception e) {
}
sb.append('}');
return sb.toString();
}","public String toString() {
final StringBuffer stringbufferVar1 = stringbufferLiteral2;
stringbufferVar1.append(""CompositeKeyedObjectPool{"");
stringbufferVar1.append(""poolFactory="").append(poolFactory);
stringbufferVar1.append("", open="").append(open);
try {
final int intVar3 = intLiteral4;
stringbufferVar1.append("", activeObjects="").append(intVar3);
} catch (Exception e) {
}
try {
final int intVar5 = intLiteral6;
stringbufferVar1.append("", idleObjects="").append(intVar5);
} catch (Exception e) {
}
stringbufferVar1.append('}');
return stringbufferVar1.toString();
}"
18504,PERFORMANCE,WMI_WRONG_MAP_ITERATOR,FP,pool,2369,"final CursorableLinkedList list = ((ObjectQueue)_poolMap.get(key)).queue;
","public synchronized void clearOldest() {
final Map map = new TreeMap();
for (Iterator keyiter = _poolMap.keySet().iterator(); keyiter.hasNext(); ) {
final Object key = keyiter.next();
final CursorableLinkedList list = ((ObjectQueue) _poolMap.get(key)).queue;
for (Iterator it = list.iterator(); it.hasNext(); ) {
map.put(it.next(), key);
}
}
Set setPairKeys = map.entrySet();
int itemsToRemove = ((int) (map.size() * 0.15)) + 1;
Iterator iter = setPairKeys.iterator();
while (iter.hasNext() && itemsToRemove > 0) {
Map.Entry entry = (Map.Entry) iter.next();
Object key = entry.getValue();
ObjectTimestampPair pairTimeStamp = (ObjectTimestampPair) entry.getKey();
final CursorableLinkedList list = ((ObjectQueue) (_poolMap.get(key))).queue;
list.remove(pairTimeStamp);
try {
_factory.destroyObject(key, pairTimeStamp.value);
} catch (Exception e) {
}
if (list.isEmpty()) {
_poolMap.remove(key);
_poolList.remove(key);
}
_totalIdle--;
itemsToRemove--;
}
notifyAll();
}","public synchronized void clearOldest() {
final Map mapVar1 = mapLiteral2;
for (Iterator iteratorVar23 = iteratorLiteral24; iteratorVar3.hasNext(); ) {
final Object objectVar5 = objectLiteral6;
final CursorableLinkedList cursorablelinkedlistVar7 = cursorablelinkedlistLiteral8;
for (Iterator iteratorVar25 = iteratorLiteral26; iteratorVar9.hasNext(); ) {
mapVar1.put(iteratorVar9.next(), objectVar5);
}
}
Set setVar11 = setLiteral12;
int intVar13 = intLiteral14;
Iterator iteratorVar15 = iteratorLiteral16;
while (iteratorVar15.hasNext() && intVar13 > 0) {
Map.Entry map.entryVar17 = map.entryLiteral18;
Object objectVar5 = objectLiteral19;
ObjectTimestampPair objecttimestamppairVar20 = objecttimestamppairLiteral21;
final CursorableLinkedList cursorablelinkedlistVar7 = cursorablelinkedlistLiteral22;
cursorablelinkedlistVar7.remove(objecttimestamppairVar20);
try {
_factory.destroyObject(objectVar5, objecttimestamppairVar20.value);
} catch (Exception e) {
}
if (cursorablelinkedlistVar7.isEmpty()) {
_poolMap.remove(objectVar5);
_poolList.remove(objectVar5);
}
_totalIdle--;
intVar13--;
}
notifyAll();
}"
18508,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2373,"} catch(Exception e) {
","public synchronized void clear(Object key) {
final ObjectQueue pool = (ObjectQueue) (_poolMap.remove(key));
if (null == pool) {
return;
} else {
_poolList.remove(key);
for (Iterator it = pool.queue.iterator(); it.hasNext(); ) {
try {
_factory.destroyObject(key, ((ObjectTimestampPair) (it.next())).value);
} catch (Exception e) {
}
it.remove();
_totalIdle--;
}
}
notifyAll();
}","public synchronized void clear(Object key) {
final ObjectQueue objectqueueVar1 = objectqueueLiteral2;
if (null == objectqueueVar1) {
return;
} else {
_poolList.remove(key);
for (Iterator iteratorVar5 = iteratorLiteral6; iteratorVar3.hasNext(); ) {
try {
_factory.destroyObject(key, ((ObjectTimestampPair) (iteratorVar3.next())).value);
} catch (Exception e) {
}
iteratorVar3.remove();
_totalIdle--;
}
}
notifyAll();
}"
18518,DODGY_CODE,RI_REDUNDANT_INTERFACES,FP,pool,2383,"public class GenericObjectPool extends BaseObjectPool implements ObjectPool {
public static final byte WHEN_EXHAUSTED_FAIL   = 0;
public static final byte WHEN_EXHAUSTED_BLOCK  = 1;
public static final byte WHEN_EXHAUSTED_GROW   = 2;
public static final int DEFAULT_MAX_IDLE  = 8;
public static final int DEFAULT_MIN_IDLE = 0;
public static final int DEFAULT_MAX_ACTIVE  = 8;
public static final byte DEFAULT_WHEN_EXHAUSTED_ACTION = WHEN_EXHAUSTED_BLOCK;
public static final boolean DEFAULT_LIFO = true;
public static final long DEFAULT_MAX_WAIT = -1L;
public static final boolean DEFAULT_TEST_ON_BORROW = true;
public static final boolean DEFAULT_TEST_ON_RETURN = false;
public static final boolean DEFAULT_TEST_WHILE_IDLE = false;
public static final long DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS = -1L;
public static final int DEFAULT_NUM_TESTS_PER_EVICTION_RUN = 3;
public static final long DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS = 1000L * 60L * 30L;
public static final long DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS = -1;
public GenericObjectPool() {
this(null,DEFAULT_MAX_ACTIVE,DEFAULT_WHEN_EXHAUSTED_ACTION,DEFAULT_MAX_WAIT,DEFAULT_MAX_IDLE,DEFAULT_MIN_IDLE,DEFAULT_TEST_ON_BORROW,DEFAULT_TEST_ON_RETURN,DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS,DEFAULT_NUM_TESTS_PER_EVICTION_RUN,DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS,DEFAULT_TEST_WHILE_IDLE);
}
public GenericObjectPool(PoolableObjectFactory factory) {
this(factory,DEFAULT_MAX_ACTIVE,DEFAULT_WHEN_EXHAUSTED_ACTION,DEFAULT_MAX_WAIT,DEFAULT_MAX_IDLE,DEFAULT_MIN_IDLE,DEFAULT_TEST_ON_BORROW,DEFAULT_TEST_ON_RETURN,DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS,DEFAULT_NUM_TESTS_PER_EVICTION_RUN,DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS,DEFAULT_TEST_WHILE_IDLE);
}
public GenericObjectPool(PoolableObjectFactory factory, GenericObjectPool.Config config) {
this(factory,config.maxActive,config.whenExhaustedAction,config.maxWait,config.maxIdle,config.minIdle,config.testOnBorrow,config.testOnReturn,config.timeBetweenEvictionRunsMillis,config.numTestsPerEvictionRun,config.minEvictableIdleTimeMillis,config.testWhileIdle,config.softMinEvictableIdleTimeMillis, config.lifo);
}
public GenericObjectPool(PoolableObjectFactory factory, int maxActive) {
this(factory,maxActive,DEFAULT_WHEN_EXHAUSTED_ACTION,DEFAULT_MAX_WAIT,DEFAULT_MAX_IDLE,DEFAULT_MIN_IDLE,DEFAULT_TEST_ON_BORROW,DEFAULT_TEST_ON_RETURN,DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS,DEFAULT_NUM_TESTS_PER_EVICTION_RUN,DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS,DEFAULT_TEST_WHILE_IDLE);
}
public GenericObjectPool(PoolableObjectFactory factory, int maxActive, byte whenExhaustedAction, long maxWait) {
this(factory,maxActive,whenExhaustedAction,maxWait,DEFAULT_MAX_IDLE,DEFAULT_MIN_IDLE,DEFAULT_TEST_ON_BORROW,DEFAULT_TEST_ON_RETURN,DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS,DEFAULT_NUM_TESTS_PER_EVICTION_RUN,DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS,DEFAULT_TEST_WHILE_IDLE);
}
public GenericObjectPool(PoolableObjectFactory factory, int maxActive, byte whenExhaustedAction, long maxWait, boolean testOnBorrow, boolean testOnReturn) {
this(factory,maxActive,whenExhaustedAction,maxWait,DEFAULT_MAX_IDLE,DEFAULT_MIN_IDLE,testOnBorrow,testOnReturn,DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS,DEFAULT_NUM_TESTS_PER_EVICTION_RUN,DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS,DEFAULT_TEST_WHILE_IDLE);
}
public GenericObjectPool(PoolableObjectFactory factory, int maxActive, byte whenExhaustedAction, long maxWait, int maxIdle) {
this(factory,maxActive,whenExhaustedAction,maxWait,maxIdle,DEFAULT_MIN_IDLE,DEFAULT_TEST_ON_BORROW,DEFAULT_TEST_ON_RETURN,DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS,DEFAULT_NUM_TESTS_PER_EVICTION_RUN,DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS,DEFAULT_TEST_WHILE_IDLE);
}
public GenericObjectPool(PoolableObjectFactory factory, int maxActive, byte whenExhaustedAction, long maxWait, int maxIdle, boolean testOnBorrow, boolean testOnReturn) {
this(factory,maxActive,whenExhaustedAction,maxWait,maxIdle,DEFAULT_MIN_IDLE,testOnBorrow,testOnReturn,DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS,DEFAULT_NUM_TESTS_PER_EVICTION_RUN,DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS,DEFAULT_TEST_WHILE_IDLE);
}
public GenericObjectPool(PoolableObjectFactory factory, int maxActive, byte whenExhaustedAction, long maxWait, int maxIdle, boolean testOnBorrow, boolean testOnReturn, long timeBetweenEvictionRunsMillis, int numTestsPerEvictionRun, long minEvictableIdleTimeMillis, boolean testWhileIdle) {
this(factory, maxActive, whenExhaustedAction, maxWait, maxIdle, DEFAULT_MIN_IDLE, testOnBorrow, testOnReturn, timeBetweenEvictionRunsMillis, numTestsPerEvictionRun, minEvictableIdleTimeMillis, testWhileIdle);
}
public GenericObjectPool(PoolableObjectFactory factory, int maxActive, byte whenExhaustedAction, long maxWait, int maxIdle, int minIdle, boolean testOnBorrow, boolean testOnReturn, long timeBetweenEvictionRunsMillis, int numTestsPerEvictionRun, long minEvictableIdleTimeMillis, boolean testWhileIdle) {
this(factory, maxActive, whenExhaustedAction, maxWait, maxIdle, minIdle, testOnBorrow, testOnReturn, timeBetweenEvictionRunsMillis, numTestsPerEvictionRun, minEvictableIdleTimeMillis, testWhileIdle, DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
}
public GenericObjectPool(PoolableObjectFactory factory, int maxActive, byte whenExhaustedAction, long maxWait, int maxIdle, int minIdle, boolean testOnBorrow, boolean testOnReturn, long timeBetweenEvictionRunsMillis, int numTestsPerEvictionRun, long minEvictableIdleTimeMillis, boolean testWhileIdle, long softMinEvictableIdleTimeMillis) {
this(factory, maxActive, whenExhaustedAction, maxWait, maxIdle, minIdle, testOnBorrow, testOnReturn, timeBetweenEvictionRunsMillis, numTestsPerEvictionRun, minEvictableIdleTimeMillis, testWhileIdle, softMinEvictableIdleTimeMillis, DEFAULT_LIFO);
}
public GenericObjectPool(PoolableObjectFactory factory, int maxActive, byte whenExhaustedAction, long maxWait, int maxIdle, int minIdle, boolean testOnBorrow, boolean testOnReturn, long timeBetweenEvictionRunsMillis, int numTestsPerEvictionRun, long minEvictableIdleTimeMillis, boolean testWhileIdle, long softMinEvictableIdleTimeMillis, boolean lifo) {
_factory = factory;
_maxActive = maxActive;
_lifo = lifo;
switch(whenExhaustedAction) {
case WHEN_EXHAUSTED_BLOCK:
case WHEN_EXHAUSTED_FAIL:
case WHEN_EXHAUSTED_GROW:
_whenExhaustedAction = whenExhaustedAction;
break;
default:
throw new IllegalArgumentException(""whenExhaustedAction "" + whenExhaustedAction + "" not recognized."");
}
_maxWait = maxWait;
_maxIdle = maxIdle;
_minIdle = minIdle;
_testOnBorrow = testOnBorrow;
_testOnReturn = testOnReturn;
_timeBetweenEvictionRunsMillis = timeBetweenEvictionRunsMillis;
_numTestsPerEvictionRun = numTestsPerEvictionRun;
_minEvictableIdleTimeMillis = minEvictableIdleTimeMillis;
_softMinEvictableIdleTimeMillis = softMinEvictableIdleTimeMillis;
_testWhileIdle = testWhileIdle;
_pool = new CursorableLinkedList();
startEvictor(_timeBetweenEvictionRunsMillis);
}
public synchronized int getMaxActive() {
return _maxActive;
}
public synchronized void setMaxActive(int maxActive) {
_maxActive = maxActive;
notifyAll();
}
public synchronized byte getWhenExhaustedAction() {
return _whenExhaustedAction;
}
public synchronized void setWhenExhaustedAction(byte whenExhaustedAction) {
switch(whenExhaustedAction) {
case WHEN_EXHAUSTED_BLOCK:
case WHEN_EXHAUSTED_FAIL:
case WHEN_EXHAUSTED_GROW:
_whenExhaustedAction = whenExhaustedAction;
notifyAll();
break;
default:
throw new IllegalArgumentException(""whenExhaustedAction "" + whenExhaustedAction + "" not recognized."");
}
}
public synchronized long getMaxWait() {
return _maxWait;
}
public synchronized void setMaxWait(long maxWait) {
_maxWait = maxWait;
notifyAll();
}
public synchronized int getMaxIdle() {
return _maxIdle;
}
public synchronized void setMaxIdle(int maxIdle) {
_maxIdle = maxIdle;
notifyAll();
}
public synchronized void setMinIdle(int minIdle) {
_minIdle = minIdle;
notifyAll();
}
public synchronized int getMinIdle() {
return _minIdle;
}
public boolean getTestOnBorrow() {
return _testOnBorrow;
}
public void setTestOnBorrow(boolean testOnBorrow) {
_testOnBorrow = testOnBorrow;
}
public boolean getTestOnReturn() {
return _testOnReturn;
}
public void setTestOnReturn(boolean testOnReturn) {
_testOnReturn = testOnReturn;
}
public synchronized long getTimeBetweenEvictionRunsMillis() {
return _timeBetweenEvictionRunsMillis;
}
public synchronized void setTimeBetweenEvictionRunsMillis(long timeBetweenEvictionRunsMillis) {
_timeBetweenEvictionRunsMillis = timeBetweenEvictionRunsMillis;
startEvictor(_timeBetweenEvictionRunsMillis);
}
public synchronized int getNumTestsPerEvictionRun() {
return _numTestsPerEvictionRun;
}
public synchronized void setNumTestsPerEvictionRun(int numTestsPerEvictionRun) {
_numTestsPerEvictionRun = numTestsPerEvictionRun;
}
public synchronized long getMinEvictableIdleTimeMillis() {
return _minEvictableIdleTimeMillis;
}
public synchronized void setMinEvictableIdleTimeMillis(long minEvictableIdleTimeMillis) {
_minEvictableIdleTimeMillis = minEvictableIdleTimeMillis;
}
public synchronized long getSoftMinEvictableIdleTimeMillis() {
return _softMinEvictableIdleTimeMillis;
}
public synchronized void setSoftMinEvictableIdleTimeMillis(long softMinEvictableIdleTimeMillis) {
_softMinEvictableIdleTimeMillis = softMinEvictableIdleTimeMillis;
}
public synchronized boolean getTestWhileIdle() {
return _testWhileIdle;
}
public synchronized void setTestWhileIdle(boolean testWhileIdle) {
_testWhileIdle = testWhileIdle;
}
public synchronized boolean getLifo() {
return _lifo;
}
public synchronized void setLifo(boolean lifo) {
this._lifo = lifo;
}
public synchronized void setConfig(GenericObjectPool.Config conf) {
setMaxIdle(conf.maxIdle);
setMinIdle(conf.minIdle);
setMaxActive(conf.maxActive);
setMaxWait(conf.maxWait);
setWhenExhaustedAction(conf.whenExhaustedAction);
setTestOnBorrow(conf.testOnBorrow);
setTestOnReturn(conf.testOnReturn);
setTestWhileIdle(conf.testWhileIdle);
setNumTestsPerEvictionRun(conf.numTestsPerEvictionRun);
setMinEvictableIdleTimeMillis(conf.minEvictableIdleTimeMillis);
setTimeBetweenEvictionRunsMillis(conf.timeBetweenEvictionRunsMillis);
setSoftMinEvictableIdleTimeMillis(conf.softMinEvictableIdleTimeMillis);
setLifo(conf.lifo);
notifyAll();
}
public Object borrowObject() throws Exception {
long starttime = System.currentTimeMillis();
for(;;) {
ObjectTimestampPair pair = null;
synchronized (this) {
assertOpen();
try {
pair = (ObjectTimestampPair)(_pool.removeFirst());
} catch(NoSuchElementException e) {
; 
}
if(null == pair) {
if(_maxActive < 0 || _numActive < _maxActive) {
} else {
switch(_whenExhaustedAction) {
case WHEN_EXHAUSTED_GROW:
break;
case WHEN_EXHAUSTED_FAIL:
throw new NoSuchElementException(""Pool exhausted"");
case WHEN_EXHAUSTED_BLOCK:
try {
if(_maxWait <= 0) {
wait();
} else {
final long elapsed = (System.currentTimeMillis() - starttime);
final long waitTime = _maxWait - elapsed;
if (waitTime > 0)
{
wait(waitTime);
}
}
} catch(InterruptedException e) {
Thread.currentThread().interrupt();
throw e;
}
if(_maxWait > 0 && ((System.currentTimeMillis() - starttime) >= _maxWait)) {
throw new NoSuchElementException(""Timeout waiting for idle object"");
} else {
continue; 
}
default:
throw new IllegalArgumentException(""WhenExhaustedAction property "" + _whenExhaustedAction + "" not recognized."");
}
}
}
_numActive++;
}
boolean newlyCreated = false;
if(null == pair) {
try {
Object obj = _factory.makeObject();
pair = new ObjectTimestampPair(obj);
newlyCreated = true;
return pair.value;
} finally {
if (!newlyCreated) {
synchronized (this) {
_numActive--;
notifyAll();
}
}
}
}
try {
_factory.activateObject(pair.value);
if(_testOnBorrow && !_factory.validateObject(pair.value)) {
throw new Exception(""ValidateObject failed"");
}
return pair.value;
}
catch (Throwable e) {
synchronized (this) {
_numActive--;
notifyAll();
}
try {
_factory.destroyObject(pair.value);
}
catch (Throwable e2) {
}
if(newlyCreated) {
throw new NoSuchElementException(""Could not create a validated object, cause: "" + e.getMessage());
}
else {
continue; 
}
}
}
}
public void invalidateObject(Object obj) throws Exception {
try {
if (_factory != null) {
_factory.destroyObject(obj);
}
} catch (Exception e) {
} finally {
synchronized (this) {
_numActive--;
notifyAll(); 
}
}
}
public synchronized void clear() {
for(Iterator it = _pool.iterator(); it.hasNext(); ) {
try {
_factory.destroyObject(((ObjectTimestampPair)(it.next())).value);
} catch(Exception e) {
}
it.remove();
}
_pool.clear();
notifyAll(); 
}
public synchronized int getNumActive() {
return _numActive;
}
public synchronized int getNumIdle() {
return _pool.size();
}
public void returnObject(Object obj) throws Exception {
try {
addObjectToPool(obj, true);
} catch (Exception e) {
if (_factory != null) {
try {
_factory.destroyObject(obj);
} catch (Exception e2) {
}
}
}
}
private void addObjectToPool(Object obj, boolean decrementNumActive) throws Exception {
boolean success = true;
if(_testOnReturn && !(_factory.validateObject(obj))) {
success = false;
} else {
_factory.passivateObject(obj);
}
boolean shouldDestroy = false;
synchronized (this) {
if (decrementNumActive) {
_numActive--;
}
if (isClosed()) {
shouldDestroy = true;
} else {
if((_maxIdle >= 0) && (_pool.size() >= _maxIdle)) {
shouldDestroy = true;
} else if(success) {
if (_lifo) {
_pool.addFirst(new ObjectTimestampPair(obj));
} else {
_pool.addLast(new ObjectTimestampPair(obj));
}
}
}
notifyAll(); 
}
if(shouldDestroy) {
try {
_factory.destroyObject(obj);
} catch(Exception e) {
}
}
}
public void close() throws Exception {
super.close();
synchronized (this) {
clear();
startEvictor(-1L);
}
}
public synchronized void setFactory(PoolableObjectFactory factory) throws IllegalStateException {
assertOpen();
if(0 < getNumActive()) {
throw new IllegalStateException(""Objects are already active"");
} else {
clear();
_factory = factory;
}
}
public synchronized void evict() throws Exception {
assertOpen();
if(!_pool.isEmpty()) {
if (null == _evictionCursor) {
_evictionCursor = (_pool.cursor(_lifo ? _pool.size() : 0));
}
for (int i=0,m=getNumTests();i<m;i++) {
if ((_lifo && !_evictionCursor.hasPrevious()) ||
!_lifo && !_evictionCursor.hasNext()) {
_evictionCursor.close();
_evictionCursor = _pool.cursor(_lifo ? _pool.size() : 0);
}
boolean removeObject = false;
final ObjectTimestampPair pair = _lifo ?
(ObjectTimestampPair) _evictionCursor.previous() :
(ObjectTimestampPair) _evictionCursor.next();
final long idleTimeMilis = System.currentTimeMillis() - pair.tstamp;
if ((_minEvictableIdleTimeMillis > 0)
&& (idleTimeMilis > _minEvictableIdleTimeMillis)) {
removeObject = true;
} else if ((_softMinEvictableIdleTimeMillis > 0)
&& (idleTimeMilis > _softMinEvictableIdleTimeMillis)
&& (getNumIdle() > getMinIdle())) {
removeObject = true;
}
if(_testWhileIdle && !removeObject) {
boolean active = false;
try {
_factory.activateObject(pair.value);
active = true;
} catch(Exception e) {
removeObject=true;
}
if(active) {
if(!_factory.validateObject(pair.value)) {
removeObject=true;
} else {
try {
_factory.passivateObject(pair.value);
} catch(Exception e) {
removeObject=true;
}
}
}
}
if(removeObject) {
try {
_evictionCursor.remove();
_factory.destroyObject(pair.value);
} catch(Exception e) {
}
}
}
} 
}
private void ensureMinIdle() throws Exception {
int objectDeficit = calculateDeficit();
for ( int j = 0 ; j < objectDeficit && calculateDeficit() > 0 ; j++ ) {
addObject();
}
}
private synchronized int calculateDeficit() {
int objectDeficit = getMinIdle() - getNumIdle();
if (_maxActive > 0) {
int growLimit = Math.max(0, getMaxActive() - getNumActive() - getNumIdle());
objectDeficit = Math.min(objectDeficit, growLimit);
}
return objectDeficit;
}
public void addObject() throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
Object obj = _factory.makeObject();
synchronized (this) {
try {
assertOpen();
addObjectToPool(obj, false);
} catch (IllegalStateException ex) { 
try {
_factory.destroyObject(obj);
} catch (Exception ex2) {
}
throw ex;
}
}
}
protected synchronized void startEvictor(long delay) {
if(null != _evictor) {
EvictionTimer.cancel(_evictor);
_evictor = null;
}
if(delay > 0) {
_evictor = new Evictor();
EvictionTimer.schedule(_evictor, delay, delay);
}
}
synchronized String debugInfo() {
StringBuffer buf = new StringBuffer();
buf.append(""Active: "").append(getNumActive()).append(""\n"");
buf.append(""Idle: "").append(getNumIdle()).append(""\n"");
buf.append(""Idle Objects:\n"");
Iterator it = _pool.iterator();
long time = System.currentTimeMillis();
while(it.hasNext()) {
ObjectTimestampPair pair = (ObjectTimestampPair)(it.next());
buf.append(""\t"").append(pair.value).append(""\t"").append(time - pair.tstamp).append(""\n"");
}
return buf.toString();
}
private int getNumTests() {
if(_numTestsPerEvictionRun >= 0) {
return Math.min(_numTestsPerEvictionRun, _pool.size());
} else {
return(int)(Math.ceil((double)_pool.size()/Math.abs((double)_numTestsPerEvictionRun)));
}
}
private class Evictor extends TimerTask {
public void run() {
try {
evict();
} catch(Exception e) {
}
try {
ensureMinIdle();
} catch(Exception e) {
}
}
}
public static class Config {
public int maxIdle = GenericObjectPool.DEFAULT_MAX_IDLE;
public int minIdle = GenericObjectPool.DEFAULT_MIN_IDLE;
public int maxActive = GenericObjectPool.DEFAULT_MAX_ACTIVE;
public long maxWait = GenericObjectPool.DEFAULT_MAX_WAIT;
public byte whenExhaustedAction = GenericObjectPool.DEFAULT_WHEN_EXHAUSTED_ACTION;
public boolean testOnBorrow = GenericObjectPool.DEFAULT_TEST_ON_BORROW;
public boolean testOnReturn = GenericObjectPool.DEFAULT_TEST_ON_RETURN;
public boolean testWhileIdle = GenericObjectPool.DEFAULT_TEST_WHILE_IDLE;
public long timeBetweenEvictionRunsMillis = GenericObjectPool.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS;
public int numTestsPerEvictionRun =  GenericObjectPool.DEFAULT_NUM_TESTS_PER_EVICTION_RUN;
public long minEvictableIdleTimeMillis = GenericObjectPool.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS;
public long softMinEvictableIdleTimeMillis = GenericObjectPool.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS;
public boolean lifo = GenericObjectPool.DEFAULT_LIFO;
}
private int _maxIdle = DEFAULT_MAX_IDLE;
private int _minIdle = DEFAULT_MIN_IDLE;
private int _maxActive = DEFAULT_MAX_ACTIVE;
private long _maxWait = DEFAULT_MAX_WAIT;
private byte _whenExhaustedAction = DEFAULT_WHEN_EXHAUSTED_ACTION;
private volatile boolean _testOnBorrow = DEFAULT_TEST_ON_BORROW;
private volatile boolean _testOnReturn = DEFAULT_TEST_ON_RETURN;
private boolean _testWhileIdle = DEFAULT_TEST_WHILE_IDLE;
private long _timeBetweenEvictionRunsMillis = DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS;
private int _numTestsPerEvictionRun =  DEFAULT_NUM_TESTS_PER_EVICTION_RUN;
private long _minEvictableIdleTimeMillis = DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS;
private long _softMinEvictableIdleTimeMillis = DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS;
private boolean _lifo = DEFAULT_LIFO;
private CursorableLinkedList _pool = null;
private CursorableLinkedList.Cursor _evictionCursor = null;
private PoolableObjectFactory _factory = null;
private int _numActive = 0;
private Evictor _evictor = null;
","public void returnObject(Object obj) throws Exception {
try {
addObjectToPool(obj, true);
} catch (Exception e) {
if (_factory != null) {
try {
_factory.destroyObject(obj);
} catch (Exception e2) {
}
}
}
}","public void returnObject(Object obj) throws Exception {
try {
addObjectToPool(obj, true);
} catch (Exception e) {
if (_factory != null) {
try {
_factory.destroyObject(obj);
} catch (Exception e2) {
}
}
}
}"
18520,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2385,"} catch(Exception e) {
","public void run() {
try {
evict();
} catch (Exception e) {
}
try {
ensureMinIdle();
} catch (Exception e) {
}
}","public void run() {
try {
evict();
} catch (Exception e) {
}
try {
ensureMinIdle();
} catch (Exception e) {
}
}"
18527,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2392,"} catch(Exception e) {
","public synchronized void returnObject(Object obj) throws Exception {
boolean success = !isClosed();
if (_factory != null) {
try {
_factory.passivateObject(obj);
} catch (Exception e) {
success = false;
}
}
boolean shouldDestroy = !success;
_numActive--;
if (success) {
_pool.add(new SoftReference(obj, refQueue));
}
notifyAll();
if (shouldDestroy && _factory != null) {
try {
_factory.destroyObject(obj);
} catch (Exception e) {
}
}
}","public synchronized void returnObject(Object obj) throws Exception {
boolean booleanVar1 = booleanLiteral2;
if (_factory != null) {
try {
_factory.passivateObject(obj);
} catch (Exception e) {
booleanVar1 = false;
}
}
boolean booleanVar3 = booleanLiteral4;
_numActive--;
if (booleanVar1) {
_pool.add(new SoftReference(obj, refQueue));
}
notifyAll();
if (booleanVar3 && _factory != null) {
try {
_factory.destroyObject(obj);
} catch (Exception e) {
}
}
}"
18535,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2400,"} catch (Exception e) {
","public synchronized void invalidateObject(Object key, Object obj) throws Exception {
decrementActiveCount(key);
if (null != _factory) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e) {
}
}
notifyAll();
}","public synchronized void invalidateObject(Object key, Object obj) throws Exception {
decrementActiveCount(key);
if (null != _factory) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e) {
}
}
notifyAll();
}"
18536,DODGY_CODE,RI_REDUNDANT_INTERFACES,FP,pool,2401,"this((KeyedPoolableObjectFactory)null,DEFAULT_MAX_SLEEPING,DEFAULT_INIT_SLEEPING_CAPACITY);
}
public StackKeyedObjectPool(int max) {
this((KeyedPoolableObjectFactory)null,max,DEFAULT_INIT_SLEEPING_CAPACITY);
}
public StackKeyedObjectPool(int max, int init) {
this((KeyedPoolableObjectFactory)null,max,init);
}
public StackKeyedObjectPool(KeyedPoolableObjectFactory factory) {
this(factory,DEFAULT_MAX_SLEEPING);
}
public StackKeyedObjectPool(KeyedPoolableObjectFactory factory, int max) {
this(factory,max,DEFAULT_INIT_SLEEPING_CAPACITY);
}
public StackKeyedObjectPool(KeyedPoolableObjectFactory factory, int max, int init) {
_factory = factory;
_maxSleeping = (max < 0 ? DEFAULT_MAX_SLEEPING : max);
_initSleepingCapacity = (init < 1 ? DEFAULT_INIT_SLEEPING_CAPACITY : init);
_pools = new HashMap();
_activeCount = new HashMap();
}
public synchronized Object borrowObject(Object key) throws Exception {
assertOpen();
Stack stack = (Stack)(_pools.get(key));
if(null == stack) {
stack = new Stack();
stack.ensureCapacity( _initSleepingCapacity > _maxSleeping ? _maxSleeping : _initSleepingCapacity);
_pools.put(key,stack);
}
Object obj = null;
do {
boolean newlyMade = false;
// TODO: Don't use exception, test size.
if (!stack.empty()) {
obj = stack.pop();
_totIdle--;
} else {
if(null == _factory) {
throw new NoSuchElementException(""pools without a factory cannot create new objects as needed."");
} else {
obj = _factory.makeObject(key);
newlyMade = true;
}
}
if(!newlyMade && null != obj && null != _factory) {
try {
_factory.activateObject(key, obj);
if (!_factory.validateObject(key, obj)) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e2) {
}
obj = null;
}
} catch (Exception e) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e2) {
}
obj = null;
}
}
} while (obj == null);
incrementActiveCount(key);
return obj;
}
public synchronized void returnObject(Object key, Object obj) throws Exception {
decrementActiveCount(key);
if (null != _factory) {
try {
_factory.passivateObject(key, obj);
} catch (Exception e) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e2) {
}
return;
}
}
if (isClosed()) {
if (null != _factory) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e) {
}
}
return;
}
Stack stack = (Stack)_pools.get(key);
if(null == stack) {
stack = new Stack();
stack.ensureCapacity( _initSleepingCapacity > _maxSleeping ? _maxSleeping : _initSleepingCapacity);
_pools.put(key,stack);
}
final int stackSize = stack.size();
if (stackSize >= _maxSleeping) {
final Object staleObj;
if (stackSize > 0) {
staleObj = stack.remove(0);
_totIdle--;
} else {
staleObj = obj;
}
if(null != _factory) {
try {
_factory.destroyObject(key, staleObj);
} catch (Exception e) {
}
}
}
stack.push(obj);
_totIdle++;
}
public synchronized void invalidateObject(Object key, Object obj) throws Exception {
decrementActiveCount(key);
if(null != _factory) {
try {
_factory.destroyObject(key,obj);
} catch (Exception e) {
}
}
notifyAll(); 
}
public synchronized void addObject(Object key) throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
Object obj = _factory.makeObject(key);
_factory.passivateObject(key, obj);
Stack stack = (Stack)_pools.get(key);
if(null == stack) {
stack = new Stack();
stack.ensureCapacity( _initSleepingCapacity > _maxSleeping ? _maxSleeping : _initSleepingCapacity);
_pools.put(key,stack);
}
final int stackSize = stack.size();
if (stackSize >= _maxSleeping) {
final Object staleObj;
if (stackSize > 0) {
staleObj = stack.remove(0);
_totIdle--;
} else {
staleObj = obj;
}
try {
_factory.destroyObject(key, staleObj);
} catch (Exception e) {
if (obj == staleObj) {
throw e;
}
}
} else {
stack.push(obj);
_totIdle++;
}
}
public synchronized int getNumIdle() {
return _totIdle;
}
public int getNumActive() {
return _totActive;
}
public synchronized int getNumActive(Object key) {
return getActiveCount(key);
}
public synchronized int getNumIdle(Object key) {
try {
return((Stack)(_pools.get(key))).size();
} catch(Exception e) {
return 0;
}
}
public synchronized void clear() {
Iterator it = _pools.keySet().iterator();
while(it.hasNext()) {
Object key = it.next();
Stack stack = (Stack)(_pools.get(key));
destroyStack(key,stack);
}
_totIdle = 0;
_pools.clear();
_activeCount.clear();
}
public synchronized void clear(Object key) {
Stack stack = (Stack)(_pools.remove(key));
destroyStack(key,stack);
}
private synchronized void destroyStack(Object key, Stack stack) {
if(null == stack) {
return;
} else {
if(null != _factory) {
Iterator it = stack.iterator();
while(it.hasNext()) {
try {
_factory.destroyObject(key,it.next());
} catch(Exception e) {
}
}
}
_totIdle -= stack.size();
_activeCount.remove(key);
stack.clear();
}
}
public synchronized String toString() {
StringBuffer buf = new StringBuffer();
buf.append(getClass().getName());
buf.append("" contains "").append(_pools.size()).append("" distinct pools: "");
Iterator it = _pools.keySet().iterator();
while(it.hasNext()) {
Object key = it.next();
buf.append("" |"").append(key).append(""|="");
Stack s = (Stack)(_pools.get(key));
buf.append(s.size());
}
return buf.toString();
}
public void close() throws Exception {
super.close();
clear();
}
public synchronized void setFactory(KeyedPoolableObjectFactory factory) throws IllegalStateException {
if(0 < getNumActive()) {
throw new IllegalStateException(""Objects are already active"");
} else {
clear();
_factory = factory;
}
}
private int getActiveCount(Object key) {
try {
return ((Integer)_activeCount.get(key)).intValue();
} catch(NoSuchElementException e) {
return 0;
} catch(NullPointerException e) {
return 0;
}
}
private void incrementActiveCount(Object key) {
_totActive++;
Integer old = (Integer)(_activeCount.get(key));
if(null == old) {
_activeCount.put(key,new Integer(1));
} else {
_activeCount.put(key,new Integer(old.intValue() + 1));
}
}
private void decrementActiveCount(Object key) {
_totActive--;
Integer active = (Integer)(_activeCount.get(key));
if(null == active) {
} else if(active.intValue() <= 1) {
_activeCount.remove(key);
} else {
_activeCount.put(key, new Integer(active.intValue() - 1));
}
}
protected static final int DEFAULT_MAX_SLEEPING  = 8;
protected static final int DEFAULT_INIT_SLEEPING_CAPACITY = 4;
protected HashMap _pools = null;
protected KeyedPoolableObjectFactory _factory = null;
protected int _maxSleeping = DEFAULT_MAX_SLEEPING;
protected int _initSleepingCapacity = DEFAULT_INIT_SLEEPING_CAPACITY;
protected int _totActive = 0;
protected int _totIdle = 0;
protected HashMap _activeCount = null;
","public synchronized void invalidateObject(Object key, Object obj) throws Exception {
decrementActiveCount(key);
if (null != _factory) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e) {
}
}
notifyAll();
}","public synchronized void invalidateObject(Object key, Object obj) throws Exception {
decrementActiveCount(key);
if (null != _factory) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e) {
}
}
notifyAll();
}"
18539,DODGY_CODE,RI_REDUNDANT_INTERFACES,FP,pool,2404,"this((PoolableObjectFactory)null,DEFAULT_MAX_SLEEPING,DEFAULT_INIT_SLEEPING_CAPACITY);
}
public StackObjectPool(int maxIdle) {
this((PoolableObjectFactory)null,maxIdle,DEFAULT_INIT_SLEEPING_CAPACITY);
}
public StackObjectPool(int maxIdle, int initIdleCapacity) {
this((PoolableObjectFactory)null,maxIdle,initIdleCapacity);
}
public StackObjectPool(PoolableObjectFactory factory) {
this(factory,DEFAULT_MAX_SLEEPING,DEFAULT_INIT_SLEEPING_CAPACITY);
}
public StackObjectPool(PoolableObjectFactory factory, int maxIdle) {
this(factory,maxIdle,DEFAULT_INIT_SLEEPING_CAPACITY);
}
public StackObjectPool(PoolableObjectFactory factory, int maxIdle, int initIdleCapacity) {
_factory = factory;
_maxSleeping = (maxIdle < 0 ? DEFAULT_MAX_SLEEPING : maxIdle);
int initcapacity = (initIdleCapacity < 1 ? DEFAULT_INIT_SLEEPING_CAPACITY : initIdleCapacity);
_pool = new Stack();
_pool.ensureCapacity( initcapacity > _maxSleeping ? _maxSleeping : initcapacity);
}
public synchronized Object borrowObject() throws Exception {
assertOpen();
Object obj = null;
boolean newlyCreated = false;
while (null == obj) {
if (!_pool.empty()) {
obj = _pool.pop();
} else {
if(null == _factory) {
throw new NoSuchElementException();
} else {
newlyCreated = true;
obj = _factory.makeObject();
if (obj == null) {
throw new NoSuchElementException(""PoolableObjectFactory.makeObject() returned null."");
}
}
}
if (!newlyCreated && null != _factory && null != obj) {
try {
_factory.activateObject(obj);
} catch (Exception e) {
try {
_factory.destroyObject(obj);
} catch (Exception e2) {
} finally {
obj = null;
}
}
}
if (!newlyCreated && null != _factory && null != obj) {
boolean validated = false;
try {
validated = _factory.validateObject(obj);
} catch (Exception e) {
}
if (!validated) {
try {
_factory.destroyObject(obj);
} catch(Exception e) {
} finally {
obj = null;
}
}
}
}
_numActive++;
return obj;
}
public synchronized void returnObject(Object obj) throws Exception {
boolean success = !isClosed();
if(null != _factory) {
try {
_factory.passivateObject(obj);
} catch(Exception e) {
success = false;
}
}
boolean shouldDestroy = !success;
_numActive--;
if (success) {
Object toBeDestroyed = null;
if(_pool.size() >= _maxSleeping) {
shouldDestroy = true;
toBeDestroyed = _pool.remove(0); 
}
_pool.push(obj);
obj = toBeDestroyed; 
}
notifyAll(); 
if(shouldDestroy) { 
try {
_factory.destroyObject(obj);
} catch(Exception e) {
}
}
}
public synchronized void invalidateObject(Object obj) throws Exception {
_numActive--;
if (null != _factory) {
try {
_factory.destroyObject(obj);
} catch (Exception e) {
}
}
notifyAll(); 
}
public synchronized int getNumIdle() {
return _pool.size();
}
public synchronized int getNumActive() {
return _numActive;
}
public synchronized void clear() {
if(null != _factory) {
Iterator it = _pool.iterator();
while(it.hasNext()) {
try {
_factory.destroyObject(it.next());
} catch(Exception e) {
}
}
}
_pool.clear();
}
public void close() throws Exception {
super.close();
clear();
}
public synchronized void addObject() throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
Object obj = _factory.makeObject();
boolean success = true;
_factory.passivateObject(obj);
boolean shouldDestroy = !success;
if (success) {
Object toBeDestroyed = null;
if(_pool.size() >= _maxSleeping) {
shouldDestroy = true;
toBeDestroyed = _pool.remove(0); 
}
_pool.push(obj);
obj = toBeDestroyed; 
}
notifyAll(); 
if(shouldDestroy) { 
try {
_factory.destroyObject(obj);
} catch(Exception e) {
}
}
}
public synchronized void setFactory(PoolableObjectFactory factory) throws IllegalStateException {
assertOpen();
if(0 < getNumActive()) {
throw new IllegalStateException(""Objects are already active"");
} else {
clear();
_factory = factory;
}
}
protected static final int DEFAULT_MAX_SLEEPING  = 8;
protected static final int DEFAULT_INIT_SLEEPING_CAPACITY = 4;
protected Stack _pool = null;
protected PoolableObjectFactory _factory = null;
protected int _maxSleeping = DEFAULT_MAX_SLEEPING;
protected int _numActive = 0;
","public synchronized void returnObject(Object obj) throws Exception {
boolean success = !isClosed();
if (null != _factory) {
try {
_factory.passivateObject(obj);
} catch (Exception e) {
success = false;
}
}
boolean shouldDestroy = !success;
_numActive--;
if (success) {
Object toBeDestroyed = null;
if (_pool.size() >= _maxSleeping) {
shouldDestroy = true;
toBeDestroyed = _pool.remove(0);
}
_pool.push(obj);
obj = toBeDestroyed;
}
notifyAll();
if (shouldDestroy) {
try {
_factory.destroyObject(obj);
} catch (Exception e) {
}
}
}","public synchronized void returnObject(Object obj) throws Exception {
boolean booleanVar1 = booleanLiteral2;
if (null != _factory) {
try {
_factory.passivateObject(obj);
} catch (Exception e) {
booleanVar1 = false;
}
}
boolean booleanVar3 = booleanLiteral4;
_numActive--;
if (booleanVar1) {
Object objectVar5 = objectLiteral6;
if (_pool.size() >= _maxSleeping) {
booleanVar3 = true;
objectVar5 = _pool.remove(0);
}
_pool.push(obj);
obj = objectVar5;
}
notifyAll();
if (booleanVar3) {
try {
_factory.destroyObject(obj);
} catch (Exception e) {
}
}
}"
18540,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2405,"} catch(Exception e) {
","public synchronized void returnObject(Object obj) throws Exception {
boolean success = !isClosed();
if (null != _factory) {
try {
_factory.passivateObject(obj);
} catch (Exception e) {
success = false;
}
}
boolean shouldDestroy = !success;
_numActive--;
if (success) {
Object toBeDestroyed = null;
if (_pool.size() >= _maxSleeping) {
shouldDestroy = true;
toBeDestroyed = _pool.remove(0);
}
_pool.push(obj);
obj = toBeDestroyed;
}
notifyAll();
if (shouldDestroy) {
try {
_factory.destroyObject(obj);
} catch (Exception e) {
}
}
}","public synchronized void returnObject(Object obj) throws Exception {
boolean booleanVar1 = booleanLiteral2;
if (null != _factory) {
try {
_factory.passivateObject(obj);
} catch (Exception e) {
booleanVar1 = false;
}
}
boolean booleanVar3 = booleanLiteral4;
_numActive--;
if (booleanVar1) {
Object objectVar5 = objectLiteral6;
if (_pool.size() >= _maxSleeping) {
booleanVar3 = true;
objectVar5 = _pool.remove(0);
}
_pool.push(obj);
obj = objectVar5;
}
notifyAll();
if (booleanVar3) {
try {
_factory.destroyObject(obj);
} catch (Exception e) {
}
}
}"
18542,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2407,"} catch (Exception e) {
","public synchronized void invalidateObject(Object obj) throws Exception {
_numActive--;
if (null != _factory) {
try {
_factory.destroyObject(obj);
} catch (Exception e) {
}
}
notifyAll();
}","public synchronized void invalidateObject(Object obj) throws Exception {
_numActive--;
if (null != _factory) {
try {
_factory.destroyObject(obj);
} catch (Exception e) {
}
}
notifyAll();
}"
18544,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2409,"} catch (Exception e) {
","public void invalidateObject(final K key, final V obj) {
synchronized (lock) {
try {
keyedPool.invalidateObject(key, obj);
} catch (Exception e) {
}
}
}","public void invalidateObject(final K key, final V obj) {
synchronized (lock) {
try {
keyedPool.invalidateObject(key, obj);
} catch (Exception e) {
}
}
}"
18545,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2410,"} catch (Exception e) {
","public void invalidateObject(final T obj) {
if (type.isInstance(obj)) {
try {
pool.invalidateObject(obj);
} catch (Exception e) {
}
} else {
throw new ClassCastException(""Invalidated object is not of type: "" + type.getName() + "" was: "" + obj);
}
}","public void invalidateObject(final T obj) {
if (type.isInstance(obj)) {
try {
pool.invalidateObject(obj);
} catch (Exception e) {
}
} else {
throw new ClassCastException(""Invalidated object is not of type: "" + type.getName() + "" was: "" + obj);
}
}"
18547,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2412,"} catch (Exception e) {
","public void invalidateObject(final K key, final V obj) {
try {
keyedPool.invalidateObject(key, obj);
} catch (Exception e) {
}
}","public void invalidateObject(final K key, final V obj) {
try {
keyedPool.invalidateObject(key, obj);
} catch (Exception e) {
}
}"
18558,DODGY_CODE,REC_CATCH_EXCEPTION,FP,pool,2423,"} catch (Exception e) {
","@Override
public void run() {
boolean success = false;
try {
if (keyedPool.getNumIdle(key) < minIdle) {
keyedPool.addObject(key);
}
success = true;
} catch (Exception e) {
cancel();
} finally {
if (!success) {
cancel();
}
}
}","@Override
public void run() {
boolean booleanVar1 = booleanLiteral2;
try {
if (keyedPool.getNumIdle(key) < minIdle) {
keyedPool.addObject(key);
}
booleanVar1 = true;
} catch (Exception e) {
cancel();
} finally {
if (!booleanVar1) {
cancel();
}
}
}"
18565,BAD_PRACTICE,SE_NO_SERIALVERSIONID,FP,pool,2430,"private Listable<E> _prev = null;
private Listable<E> _next = null;
private E _val = null;
Listable(Listable<E> prev, Listable<E> next, E val) {
_prev = prev;
_next = next;
_val = val;
}
Listable<E> next() {
return _next;
}
Listable<E> prev() {
return _prev;
}
E value() {
return _val;
}
void setNext(Listable<E> next) {
_next = next;
}
void setPrev(Listable<E> prev) {
_prev = prev;
}
E setValue(E val) {
E temp = _val;
_val = val;
return temp;
","@Override
public E removeLast() {
checkForComod();
return super.removeLast();
}","@Override
public E removeLast() {
checkForComod();
return super.removeLast();
}"
18570,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2435,"} catch(Exception e) {
","@Override
public void run() {
try {
evict();
} catch (Exception e) {
} catch (OutOfMemoryError oome) {
oome.printStackTrace(System.err);
}
try {
ensureMinIdle();
} catch (Exception e) {
}
}","@Override
public void run() {
try {
evict();
} catch (Exception e) {
} catch (OutOfMemoryError oome) {
oome.printStackTrace(System.err);
}
try {
ensureMinIdle();
} catch (Exception e) {
}
}"
18587,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2452,"} catch (Exception e2) {
","@Override
public void returnObject(T obj) throws Exception {
try {
addObjectToPool(obj, true);
} catch (Exception e) {
if (_factory != null) {
try {
_factory.destroyObject(obj);
} catch (Exception e2) {
}
// TODO: Correctness here depends on control in addObjectToPool.
synchronized (this) {
_numActive--;
}
allocate();
}
}
}","@Override
public void returnObject(T obj) throws Exception {
try {
addObjectToPool(obj, true);
} catch (Exception e) {
if (_factory != null) {
try {
_factory.destroyObject(obj);
} catch (Exception e2) {
}
// TODO: Correctness here depends on control in addObjectToPool.
synchronized (this) {
_numActive--;
}
allocate();
}
}
}"
18589,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2454,"} catch(Exception e) {
","@Override
public void run() {
try {
evict();
} catch (Exception e) {
} catch (OutOfMemoryError oome) {
oome.printStackTrace(System.err);
}
try {
ensureMinIdle();
} catch (Exception e) {
}
}","@Override
public void run() {
try {
evict();
} catch (Exception e) {
} catch (OutOfMemoryError oome) {
oome.printStackTrace(System.err);
}
try {
ensureMinIdle();
} catch (Exception e) {
}
}"
18597,Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,pool,2462,"@Deprecated
protected int _totActive = 0;","@Deprecated
protected int _totActive = 0;","@Deprecated
protected int intVar1 = intLiteral2;"
18600,PERFORMANCE,WMI_WRONG_MAP_ITERATOR,FP,pool,2465,"Stack<V> s = _pools.get(key);
","@Override
public synchronized String toString() {
StringBuffer buf = new StringBuffer();
buf.append(getClass().getName());
buf.append("" contains "").append(_pools.size()).append("" distinct pools: "");
Iterator<K> it = _pools.keySet().iterator();
while (it.hasNext()) {
K key = it.next();
buf.append("" |"").append(key).append(""|="");
Stack<V> s = _pools.get(key);
buf.append(s.size());
}
return buf.toString();
}","@Override
public synchronized String toString() {
StringBuffer stringbufferVar1 = stringbufferLiteral2;
stringbufferVar1.append(getClass().getName());
stringbufferVar1.append("" contains "").append(_pools.size()).append("" distinct pools: "");
Iterator<K> iterator<k>Var3 = iterator<k>Literal4;
while (iterator<k>Var3.hasNext()) {
K kVar5 = kLiteral6;
stringbufferVar1.append("" |"").append(kVar5).append(""|="");
Stack<V> stack<v>Var7 = stack<v>Literal8;
stringbufferVar1.append(stack<v>Var7.size());
}
return stringbufferVar1.toString();
}"
18603,Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,pool,2468,"@Deprecated
protected int _totIdle = 0;","@Deprecated
protected int _totIdle = 0;","@Deprecated
protected int intVar1 = intLiteral2;"
18604,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2469,"} catch(Exception e) {
","private synchronized void destroyStack(K key, Stack<V> stack) {
if (null == stack) {
return;
} else {
if (null != _factory) {
Iterator<V> it = stack.iterator();
while (it.hasNext()) {
try {
_factory.destroyObject(key, it.next());
} catch (Exception e) {
}
}
}
_totIdle -= stack.size();
_activeCount.remove(key);
stack.clear();
}
}","private synchronized void destroyStack(K key, Stack<V> stack) {
if (null == stack) {
return;
} else {
if (null != _factory) {
Iterator<V> iterator<v>Var1 = iterator<v>Literal2;
while (iterator<v>Var1.hasNext()) {
try {
_factory.destroyObject(key, iterator<v>Var1.next());
} catch (Exception e) {
}
}
}
_totIdle -= stack.size();
_activeCount.remove(key);
stack.clear();
}
}"
18607,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2472,"} catch(Exception e) {
","@Override
public synchronized void returnObject(T obj) throws Exception {
boolean success = !isClosed();
if (null != _factory) {
if (!_factory.validateObject(obj)) {
success = false;
} else {
try {
_factory.passivateObject(obj);
} catch (Exception e) {
success = false;
}
}
}
boolean shouldDestroy = !success;
_numActive--;
if (success) {
T toBeDestroyed = null;
if (_pool.size() >= _maxSleeping) {
shouldDestroy = true;
toBeDestroyed = _pool.remove(0);
}
_pool.push(obj);
obj = toBeDestroyed;
}
notifyAll();
if (shouldDestroy) {
try {
_factory.destroyObject(obj);
} catch (Exception e) {
}
}
}","@Override
public synchronized void returnObject(T obj) throws Exception {
boolean booleanVar1 = booleanLiteral2;
if (null != _factory) {
if (!_factory.validateObject(obj)) {
booleanVar1 = false;
} else {
try {
_factory.passivateObject(obj);
} catch (Exception e) {
booleanVar1 = false;
}
}
}
boolean booleanVar3 = booleanLiteral4;
_numActive--;
if (booleanVar1) {
T tVar5 = tLiteral6;
if (_pool.size() >= _maxSleeping) {
booleanVar3 = true;
tVar5 = _pool.remove(0);
}
_pool.push(obj);
obj = tVar5;
}
notifyAll();
if (booleanVar3) {
try {
_factory.destroyObject(obj);
} catch (Exception e) {
}
}
}"
18610,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2475,"} catch (Exception e) {
","public void returnObject(final Object key, final Object obj) {
try {
pool.returnObject(obj);
} catch (Exception e) {
}
}","public void returnObject(final Object key, final Object obj) {
try {
pool.returnObject(obj);
} catch (Exception e) {
}
}"
18612,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2477,"} catch (Exception e) {
","public void returnObject(final Object obj) {
synchronized (lock) {
try {
pool.returnObject(obj);
} catch (Exception e) {
}
}
}","public void returnObject(final Object obj) {
synchronized (lock) {
try {
pool.returnObject(obj);
} catch (Exception e) {
}
}
}"
18616,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2481,"} catch (Exception e) {
","public void invalidateObject(final Object key, final Object obj) {
try {
pool.invalidateObject(obj);
} catch (Exception e) {
}
}","public void invalidateObject(final Object key, final Object obj) {
try {
pool.invalidateObject(obj);
} catch (Exception e) {
}
}"
18621,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2486,"} catch (Exception e) {
","public void close() {
try {
pool.close();
} catch (Exception e) {
}
}","public void close() {
try {
pool.close();
} catch (Exception e) {
}
}"
18622,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2487,"} catch (Exception e) {
","public void returnObject(final Object obj) {
try {
keyedPool.returnObject(key, obj);
} catch (Exception e) {
}
}","public void returnObject(final Object obj) {
try {
keyedPool.returnObject(key, obj);
} catch (Exception e) {
}
}"
18626,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2491,"} catch (Exception e) {
","public void returnObject(final Object key, final Object obj) {
if (type.isInstance(obj)) {
try {
keyedPool.returnObject(key, obj);
} catch (Exception e) {
}
} else {
throw new ClassCastException(""Returned object for key: "" + key + "" is not of type: "" + type.getName() + "" was: "" + obj);
}
}","public void returnObject(final Object key, final Object obj) {
if (type.isInstance(obj)) {
try {
keyedPool.returnObject(key, obj);
} catch (Exception e) {
}
} else {
throw new ClassCastException(""Returned object for key: "" + key + "" is not of type: "" + type.getName() + "" was: "" + obj);
}
}"
18627,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2492,"} catch (Exception e) {
","public void close() {
try {
keyedPool.close();
} catch (Exception e) {
}
}","public void close() {
try {
keyedPool.close();
} catch (Exception e) {
}
}"
18628,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2493,"} catch (Exception e) {
","public void close() {
try {
pool.close();
} catch (Exception e) {
}
}","public void close() {
try {
pool.close();
} catch (Exception e) {
}
}"
18638,PERFORMANCE,WMI_WRONG_MAP_ITERATOR,FP,pool,2503,"buf.append(""\t"").append(key).append("" "").append(_poolMap.get(key)).append(""\n"");
","synchronized String debugInfo() {
StringBuffer buf = new StringBuffer();
buf.append(""Active: "").append(getNumActive()).append(""\n"");
buf.append(""Idle: "").append(getNumIdle()).append(""\n"");
Iterator it = _poolMap.keySet().iterator();
while (it.hasNext()) {
Object key = it.next();
buf.append(""\t"").append(key).append("" "").append(_poolMap.get(key)).append(""\n"");
}
return buf.toString();
}","synchronized String debugInfo() {
StringBuffer stringbufferVar1 = stringbufferLiteral2;
stringbufferVar1.append(""Active: "").append(getNumActive()).append(""\n"");
stringbufferVar1.append(""Idle: "").append(getNumIdle()).append(""\n"");
Iterator iteratorVar3 = iteratorLiteral4;
while (iteratorVar3.hasNext()) {
Object objectVar5 = objectLiteral6;
stringbufferVar1.append(""\t"").append(objectVar5).append("" "").append(_poolMap.get(objectVar5)).append(""\n"");
}
return stringbufferVar1.toString();
}"
18640,PERFORMANCE,WMI_WRONG_MAP_ITERATOR,FP,pool,2505,"ObjectQueue pool = (ObjectQueue)_poolMap.get(key);
","public void setFactory(KeyedPoolableObjectFactory factory) throws IllegalStateException {
Map toDestroy = new HashMap();
final KeyedPoolableObjectFactory oldFactory = _factory;
synchronized (this) {
assertOpen();
if (0 < getNumActive()) {
throw new IllegalStateException(""Objects are already active"");
} else {
for (Iterator it = _poolMap.keySet().iterator(); it.hasNext(); ) {
Object key = it.next();
ObjectQueue pool = (ObjectQueue) _poolMap.get(key);
if (pool != null) {
List objects = new ArrayList();
objects.addAll(pool.queue);
toDestroy.put(key, objects);
it.remove();
_poolList.remove(key);
_totalIdle = _totalIdle - pool.queue.size();
_totalInternalProcessing = _totalInternalProcessing + pool.queue.size();
pool.queue.clear();
}
}
_factory = factory;
}
}
destroy(toDestroy, oldFactory);
}","public void setFactory(KeyedPoolableObjectFactory factory) throws IllegalStateException {
Map mapVar1 = mapLiteral2;
final KeyedPoolableObjectFactory keyedpoolableobjectfactoryVar3 = keyedpoolableobjectfactoryLiteral4;
synchronized (this) {
assertOpen();
if (0 < getNumActive()) {
throw new IllegalStateException(""Objects are already active"");
} else {
for (Iterator iteratorVar13 = iteratorLiteral14; iteratorVar5.hasNext(); ) {
Object objectVar7 = objectLiteral8;
ObjectQueue objectqueueVar9 = objectqueueLiteral10;
if (objectqueueVar9 != null) {
List listVar11 = listLiteral12;
listVar11.addAll(objectqueueVar9.queue);
mapVar1.put(objectVar7, listVar11);
iteratorVar5.remove();
_poolList.remove(objectVar7);
_totalIdle = _totalIdle - objectqueueVar9.queue.size();
_totalInternalProcessing = _totalInternalProcessing + objectqueueVar9.queue.size();
objectqueueVar9.queue.clear();
}
}
_factory = factory;
}
}
destroy(mapVar1, keyedpoolableobjectfactoryVar3);
}"
18652,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2517,"} catch(Exception e) {
","private void addObjectToPool(Object obj, boolean decrementNumActive) throws Exception {
boolean success = true;
if (_testOnReturn && !(_factory.validateObject(obj))) {
success = false;
} else {
_factory.passivateObject(obj);
}
boolean shouldDestroy = !success;
synchronized (this) {
if (isClosed()) {
shouldDestroy = true;
} else {
if ((_maxIdle >= 0) && (_pool.size() >= _maxIdle)) {
shouldDestroy = true;
} else if (success) {
if (_lifo) {
_pool.addFirst(new ObjectTimestampPair(obj));
} else {
_pool.addLast(new ObjectTimestampPair(obj));
}
if (decrementNumActive) {
_numActive--;
}
allocate();
}
}
}
if (shouldDestroy) {
try {
_factory.destroyObject(obj);
} catch (Exception e) {
}
if (decrementNumActive) {
synchronized (this) {
_numActive--;
allocate();
}
}
}
}","private void addObjectToPool(Object obj, boolean decrementNumActive) throws Exception {
boolean booleanVar1 = booleanLiteral2;
if (_testOnReturn && !(_factory.validateObject(obj))) {
booleanVar1 = false;
} else {
_factory.passivateObject(obj);
}
boolean booleanVar3 = booleanLiteral4;
synchronized (this) {
if (isClosed()) {
booleanVar3 = true;
} else {
if ((_maxIdle >= 0) && (_pool.size() >= _maxIdle)) {
booleanVar3 = true;
} else if (booleanVar1) {
if (_lifo) {
_pool.addFirst(new ObjectTimestampPair(obj));
} else {
_pool.addLast(new ObjectTimestampPair(obj));
}
if (decrementNumActive) {
_numActive--;
}
allocate();
}
}
}
if (booleanVar3) {
try {
_factory.destroyObject(obj);
} catch (Exception e) {
}
if (decrementNumActive) {
synchronized (this) {
_numActive--;
allocate();
}
}
}
}"
18654,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2519,"} catch(Exception e) {
","public synchronized void addObject() throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
Object obj = _factory.makeObject();
boolean success = true;
if (!_factory.validateObject(obj)) {
success = false;
} else {
_factory.passivateObject(obj);
}
boolean shouldDestroy = !success;
if (success) {
_pool.add(new SoftReference(obj, refQueue));
notifyAll();
}
if (shouldDestroy) {
try {
_factory.destroyObject(obj);
} catch (Exception e) {
}
}
}","public synchronized void addObject() throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
Object objectVar1 = objectLiteral2;
boolean booleanVar3 = booleanLiteral4;
if (!_factory.validateObject(objectVar1)) {
booleanVar3 = false;
} else {
_factory.passivateObject(objectVar1);
}
boolean booleanVar5 = booleanLiteral6;
if (booleanVar3) {
_pool.add(new SoftReference(objectVar1, refQueue));
notifyAll();
}
if (booleanVar5) {
try {
_factory.destroyObject(objectVar1);
} catch (Exception e) {
}
}
}"
18656,DODGY_CODE,RI_REDUNDANT_INTERFACES,FP,pool,2521,"public SoftReferenceObjectPool() {
_pool = new ArrayList();
_factory = null;
}
public SoftReferenceObjectPool(PoolableObjectFactory factory) {
_pool = new ArrayList();
_factory = factory;
}
public SoftReferenceObjectPool(PoolableObjectFactory factory, int initSize) throws Exception, IllegalArgumentException {
if (factory == null) {
throw new IllegalArgumentException(""factory required to prefill the pool."");
}
_pool = new ArrayList(initSize);
_factory = factory;
PoolUtils.prefill(this, initSize);
}
public synchronized Object borrowObject() throws Exception {
assertOpen();
Object obj = null;
boolean newlyCreated = false;
while(null == obj) {
if(_pool.isEmpty()) {
if(null == _factory) {
throw new NoSuchElementException();
} else {
newlyCreated = true;
obj = _factory.makeObject();
}
} else {
SoftReference ref = (SoftReference)(_pool.remove(_pool.size() - 1));
obj = ref.get();
ref.clear(); 
}
if (null != _factory && null != obj) {
try {
_factory.activateObject(obj);
if (!_factory.validateObject(obj)) {
throw new Exception(""ValidateObject failed"");
}
} catch (Throwable t) {
PoolUtils.checkRethrow(t);
try {
_factory.destroyObject(obj);
} catch (Throwable t2) {
PoolUtils.checkRethrow(t2);
} finally {
obj = null;
}
if (newlyCreated) {
throw new NoSuchElementException(
""Could not create a validated object, cause: "" +
t.getMessage());
}
}
}
}
_numActive++;
return obj;
}
public synchronized void returnObject(Object obj) throws Exception {
boolean success = !isClosed();
if (_factory != null) {
if(!_factory.validateObject(obj)) {
success = false;
} else {
try {
_factory.passivateObject(obj);
} catch(Exception e) {
success = false;
}
}
}
boolean shouldDestroy = !success;
_numActive--;
if(success) {
_pool.add(new SoftReference(obj, refQueue));
}
notifyAll(); 
if (shouldDestroy && _factory != null) {
try {
_factory.destroyObject(obj);
} catch(Exception e) {
}
}
}
public synchronized void invalidateObject(Object obj) throws Exception {
_numActive--;
if (_factory != null) {
_factory.destroyObject(obj);
}
notifyAll(); 
}
public synchronized void addObject() throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
Object obj = _factory.makeObject();
boolean success = true;
if(!_factory.validateObject(obj)) {
success = false;
} else {
_factory.passivateObject(obj);
}
boolean shouldDestroy = !success;
if(success) {
_pool.add(new SoftReference(obj, refQueue));
notifyAll(); 
}
if(shouldDestroy) {
try {
_factory.destroyObject(obj);
} catch(Exception e) {
}
}
}
public synchronized int getNumIdle() {
pruneClearedReferences();
return _pool.size();
}
public synchronized int getNumActive() {
return _numActive;
}
public synchronized void clear() {
if(null != _factory) {
Iterator iter = _pool.iterator();
while(iter.hasNext()) {
try {
Object obj = ((SoftReference)iter.next()).get();
if(null != obj) {
_factory.destroyObject(obj);
}
} catch(Exception e) {
}
}
}
_pool.clear();
pruneClearedReferences();
}
public void close() throws Exception {
super.close();
clear();
}
public synchronized void setFactory(PoolableObjectFactory factory) throws IllegalStateException {
assertOpen();
if(0 < getNumActive()) {
throw new IllegalStateException(""Objects are already active"");
} else {
clear();
_factory = factory;
}
}
private void pruneClearedReferences() {
Reference ref;
while ((ref = refQueue.poll()) != null) {
try {
_pool.remove(ref);
} catch (UnsupportedOperationException uoe) {
}
}
}
public synchronized PoolableObjectFactory getFactory() {
return _factory;
}
private List _pool = null;
private PoolableObjectFactory _factory = null;
private final ReferenceQueue refQueue = new ReferenceQueue();
private int _numActive = 0;
","public synchronized void invalidateObject(Object obj) throws Exception {
_numActive--;
if (_factory != null) {
_factory.destroyObject(obj);
}
notifyAll();
}","public synchronized void invalidateObject(Object obj) throws Exception {
_numActive--;
if (_factory != null) {
_factory.destroyObject(obj);
}
notifyAll();
}"
18671,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2536,"} catch (final Exception e) {
","@Override
public void invalidateObject(final K key, final V obj) {
try {
keyedPool.invalidateObject(key, obj);
} catch (final Exception e) {
}
}","@Override
public void invalidateObject(final K key, final V obj) {
try {
keyedPool.invalidateObject(key, obj);
} catch (final Exception e) {
}
}"
18672,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2537,"} catch (final Exception e) {
","@Override
public void close() {
try {
pool.close();
} catch (final Exception e) {
}
}","@Override
public void close() {
try {
pool.close();
} catch (final Exception e) {
}
}"
18682,DODGY_CODE,UCF_USELESS_CONTROL_FLOW,FP,pool,2547,"if (!underTest.endEvictionTest(idleObjects)) {
","@Override
public void evict() throws Exception {
assertOpen();
if (getNumIdle() == 0) {
return;
}
PooledObject<T> underTest = null;
final EvictionPolicy<T> evictionPolicy = getEvictionPolicy();
synchronized (evictionLock) {
final EvictionConfig evictionConfig = new EvictionConfig(getMinEvictableIdleTimeMillis(), getSoftMinEvictableIdleTimeMillis(), getMinIdlePerKey());
final boolean testWhileIdle = getTestWhileIdle();
for (int i = 0, m = getNumTests(); i < m; i++) {
if (evictionIterator == null || !evictionIterator.hasNext()) {
if (evictionKeyIterator == null || !evictionKeyIterator.hasNext()) {
final List<K> keyCopy = new ArrayList<>();
final Lock readLock = keyLock.readLock();
readLock.lock();
try {
keyCopy.addAll(poolKeyList);
} finally {
readLock.unlock();
}
evictionKeyIterator = keyCopy.iterator();
}
while (evictionKeyIterator.hasNext()) {
evictionKey = evictionKeyIterator.next();
final ObjectDeque<T> objectDeque = poolMap.get(evictionKey);
if (objectDeque == null) {
continue;
}
final Deque<PooledObject<T>> idleObjects = objectDeque.getIdleObjects();
evictionIterator = new EvictionIterator(idleObjects);
if (evictionIterator.hasNext()) {
break;
}
evictionIterator = null;
}
}
if (evictionIterator == null) {
return;
}
final Deque<PooledObject<T>> idleObjects;
try {
underTest = evictionIterator.next();
idleObjects = evictionIterator.getIdleObjects();
} catch (final NoSuchElementException nsee) {
i--;
evictionIterator = null;
continue;
}
if (!underTest.startEvictionTest()) {
i--;
continue;
}
boolean evict;
try {
evict = evictionPolicy.evict(evictionConfig, underTest, poolMap.get(evictionKey).getIdleObjects().size());
} catch (final Throwable t) {
PoolUtils.checkRethrow(t);
swallowException(new Exception(t));
evict = false;
}
if (evict) {
destroy(evictionKey, underTest, true);
destroyedByEvictorCount.incrementAndGet();
} else {
if (testWhileIdle) {
boolean active = false;
try {
factory.activateObject(evictionKey, underTest);
active = true;
} catch (final Exception e) {
destroy(evictionKey, underTest, true);
destroyedByEvictorCount.incrementAndGet();
}
if (active) {
if (!factory.validateObject(evictionKey, underTest)) {
destroy(evictionKey, underTest, true);
destroyedByEvictorCount.incrementAndGet();
} else {
try {
factory.passivateObject(evictionKey, underTest);
} catch (final Exception e) {
destroy(evictionKey, underTest, true);
destroyedByEvictorCount.incrementAndGet();
}
}
}
}
if (!underTest.endEvictionTest(idleObjects)) {
}
}
}
}
}","@Override
public void evict() throws Exception {
assertOpen();
if (getNumIdle() == 0) {
return;
}
PooledObject<T> pooledobject<t>Var1 = pooledobject<t>Literal2;
final EvictionPolicy<T> evictionpolicy<t>Var3 = evictionpolicy<t>Literal4;
synchronized (evictionLock) {
final EvictionConfig evictionconfigVar5 = evictionconfigLiteral6;
final boolean booleanVar7 = booleanLiteral8;
for (int intVar24 = intLiteral25, intVar26 = intLiteral27; intVar9 < intLiteral1; intVar9++) {
if (evictionIterator == null || !evictionIterator.hasNext()) {
if (evictionKeyIterator == null || !evictionKeyIterator.hasNext()) {
final List<K> list<k>Var13 = list<k>Literal14;
final Lock lockVar15 = lockLiteral16;
lockVar15.lock();
try {
list<k>Var13.addAll(poolKeyList);
} finally {
lockVar15.unlock();
}
evictionKeyIterator = list<k>Var13.iterator();
}
while (evictionKeyIterator.hasNext()) {
evictionKey = evictionKeyIterator.next();
final ObjectDeque<T> objectdeque<t>Var17 = objectdeque<t>Literal18;
if (objectdeque<t>Var17 == null) {
continue;
}
final Deque<PooledObject<T>> deque<pooledobject<t>>Var19 = deque<pooledobject<t>>Literal20;
evictionIterator = new EvictionIterator(deque<pooledobject<t>>Var19);
if (evictionIterator.hasNext()) {
break;
}
evictionIterator = null;
}
}
if (evictionIterator == null) {
return;
}
final Deque<PooledObject<T>> deque<pooledobject<t>>Var19;
try {
pooledobject<t>Var1 = evictionIterator.next();
deque<pooledobject<t>>Var19 = evictionIterator.getIdleObjects();
} catch (final NoSuchElementException nsee) {
intVar9--;
evictionIterator = null;
continue;
}
if (!pooledobject<t>Var1.startEvictionTest()) {
intVar9--;
continue;
}
boolean booleanVar21;
try {
booleanVar21 = evictionpolicy<t>Var3.evict(evictionconfigVar5, pooledobject<t>Var1, poolMap.get(evictionKey).getIdleObjects().size());
} catch (final Throwable t) {
PoolUtils.checkRethrow(t);
swallowException(new Exception(t));
booleanVar21 = false;
}
if (booleanVar21) {
destroy(evictionKey, pooledobject<t>Var1, true);
destroyedByEvictorCount.incrementAndGet();
} else {
if (booleanVar7) {
boolean booleanVar22 = booleanLiteral23;
try {
factory.activateObject(evictionKey, pooledobject<t>Var1);
booleanVar22 = true;
} catch (final Exception e) {
destroy(evictionKey, pooledobject<t>Var1, true);
destroyedByEvictorCount.incrementAndGet();
}
if (booleanVar22) {
if (!factory.validateObject(evictionKey, pooledobject<t>Var1)) {
destroy(evictionKey, pooledobject<t>Var1, true);
destroyedByEvictorCount.incrementAndGet();
} else {
try {
factory.passivateObject(evictionKey, pooledobject<t>Var1);
} catch (final Exception e) {
destroy(evictionKey, pooledobject<t>Var1, true);
destroyedByEvictorCount.incrementAndGet();
}
}
}
}
if (!pooledobject<t>Var1.endEvictionTest(deque<pooledobject<t>>Var19)) {
}
}
}
}
}"
18684,DODGY_CODE,UCF_USELESS_CONTROL_FLOW,FP,pool,2549,"if (!underTest.endEvictionTest(idleObjects)) {
","@Override
public void evict() throws Exception {
assertOpen();
if (idleObjects.size() > 0) {
PooledObject<T> underTest = null;
final EvictionPolicy<T> evictionPolicy = getEvictionPolicy();
synchronized (evictionLock) {
final EvictionConfig evictionConfig = new EvictionConfig(getMinEvictableIdleTimeMillis(), getSoftMinEvictableIdleTimeMillis(), getMinIdle());
final boolean testWhileIdle = getTestWhileIdle();
for (int i = 0, m = getNumTests(); i < m; i++) {
if (evictionIterator == null || !evictionIterator.hasNext()) {
evictionIterator = new EvictionIterator(idleObjects);
}
if (!evictionIterator.hasNext()) {
return;
}
try {
underTest = evictionIterator.next();
} catch (final NoSuchElementException nsee) {
i--;
evictionIterator = null;
continue;
}
if (!underTest.startEvictionTest()) {
i--;
continue;
}
boolean evict;
try {
evict = evictionPolicy.evict(evictionConfig, underTest, idleObjects.size());
} catch (final Throwable t) {
PoolUtils.checkRethrow(t);
swallowException(new Exception(t));
evict = false;
}
if (evict) {
destroy(underTest);
destroyedByEvictorCount.incrementAndGet();
} else {
if (testWhileIdle) {
boolean active = false;
try {
factory.activateObject(underTest);
active = true;
} catch (final Exception e) {
destroy(underTest);
destroyedByEvictorCount.incrementAndGet();
}
if (active) {
if (!factory.validateObject(underTest)) {
destroy(underTest);
destroyedByEvictorCount.incrementAndGet();
} else {
try {
factory.passivateObject(underTest);
} catch (final Exception e) {
destroy(underTest);
destroyedByEvictorCount.incrementAndGet();
}
}
}
}
if (!underTest.endEvictionTest(idleObjects)) {
}
}
}
}
}
final AbandonedConfig ac = this.abandonedConfig;
if (ac != null && ac.getRemoveAbandonedOnMaintenance()) {
removeAbandoned(ac);
}
}","@Override
public void evict() throws Exception {
assertOpen();
if (idleObjects.size() > 0) {
PooledObject<T> pooledobject<t>Var1 = pooledobject<t>Literal2;
final EvictionPolicy<T> evictionpolicy<t>Var3 = evictionpolicy<t>Literal4;
synchronized (evictionLock) {
final EvictionConfig evictionconfigVar5 = evictionconfigLiteral6;
final boolean booleanVar7 = booleanLiteral8;
for (int intVar18 = intLiteral19, intVar20 = intLiteral21; intVar9 < intLiteral1; intVar9++) {
if (evictionIterator == null || !evictionIterator.hasNext()) {
evictionIterator = new EvictionIterator(idleObjects);
}
if (!evictionIterator.hasNext()) {
return;
}
try {
pooledobject<t>Var1 = evictionIterator.next();
} catch (final NoSuchElementException nsee) {
intVar9--;
evictionIterator = null;
continue;
}
if (!pooledobject<t>Var1.startEvictionTest()) {
intVar9--;
continue;
}
boolean booleanVar13;
try {
booleanVar13 = evictionpolicy<t>Var3.evict(evictionconfigVar5, pooledobject<t>Var1, idleObjects.size());
} catch (final Throwable t) {
PoolUtils.checkRethrow(t);
swallowException(new Exception(t));
booleanVar13 = false;
}
if (booleanVar13) {
destroy(pooledobject<t>Var1);
destroyedByEvictorCount.incrementAndGet();
} else {
if (booleanVar7) {
boolean booleanVar14 = booleanLiteral15;
try {
factory.activateObject(pooledobject<t>Var1);
booleanVar14 = true;
} catch (final Exception e) {
destroy(pooledobject<t>Var1);
destroyedByEvictorCount.incrementAndGet();
}
if (booleanVar14) {
if (!factory.validateObject(pooledobject<t>Var1)) {
destroy(pooledobject<t>Var1);
destroyedByEvictorCount.incrementAndGet();
} else {
try {
factory.passivateObject(pooledobject<t>Var1);
} catch (final Exception e) {
destroy(pooledobject<t>Var1);
destroyedByEvictorCount.incrementAndGet();
}
}
}
}
if (!pooledobject<t>Var1.endEvictionTest(idleObjects)) {
}
}
}
}
}
final AbandonedConfig abandonedconfigVar16 = abandonedconfigLiteral17;
if (abandonedconfigVar16 != null && abandonedconfigVar16.getRemoveAbandonedOnMaintenance()) {
removeAbandoned(abandonedconfigVar16);
}
}"
18695,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2560,"} catch (Exception e) {
","public void invalidateObject(final Object key, final Object obj) {
try {
keyedPool.invalidateObject(key, obj);
} catch (Exception e) {
}
}","public void invalidateObject(final Object key, final Object obj) {
try {
keyedPool.invalidateObject(key, obj);
} catch (Exception e) {
}
}"
18699,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2564,"} catch (Exception e) {
","public void invalidateObject(final Object obj) {
if (type.isInstance(obj)) {
try {
pool.invalidateObject(obj);
} catch (Exception e) {
}
} else {
throw new ClassCastException(""Invalidated object is not of type: "" + type.getName() + "" was: "" + obj);
}
}","public void invalidateObject(final Object obj) {
if (type.isInstance(obj)) {
try {
pool.invalidateObject(obj);
} catch (Exception e) {
}
} else {
throw new ClassCastException(""Invalidated object is not of type: "" + type.getName() + "" was: "" + obj);
}
}"
18713,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2578,"} catch(Exception e) {
","private void addObjectToPool(Object key, Object obj, boolean decrementNumActive) throws Exception {
boolean success = true;
if (_testOnReturn && !_factory.validateObject(key, obj)) {
success = false;
} else {
_factory.passivateObject(key, obj);
}
boolean shouldDestroy = !success;
ObjectQueue pool;
boolean doAllocate = false;
synchronized (this) {
pool = (ObjectQueue) (_poolMap.get(key));
if (null == pool) {
pool = new ObjectQueue();
_poolMap.put(key, pool);
_poolList.add(key);
}
if (isClosed()) {
shouldDestroy = true;
} else {
if (_maxIdle >= 0 && (pool.queue.size() >= _maxIdle)) {
shouldDestroy = true;
} else if (success) {
if (_lifo) {
pool.queue.addFirst(new ObjectTimestampPair(obj));
} else {
pool.queue.addLast(new ObjectTimestampPair(obj));
}
_totalIdle++;
if (decrementNumActive) {
pool.decrementActiveCount();
}
doAllocate = true;
}
}
}
if (doAllocate) {
allocate();
}
if (shouldDestroy) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e) {
}
if (decrementNumActive) {
synchronized (this) {
pool.decrementActiveCount();
if (pool.queue.isEmpty() && pool.activeCount == 0 && pool.internalProcessingCount == 0) {
_poolMap.remove(key);
_poolList.remove(key);
}
}
allocate();
}
}
}","private void addObjectToPool(Object key, Object obj, boolean decrementNumActive) throws Exception {
boolean booleanVar1 = booleanLiteral2;
if (_testOnReturn && !_factory.validateObject(key, obj)) {
booleanVar1 = false;
} else {
_factory.passivateObject(key, obj);
}
boolean booleanVar3 = booleanLiteral4;
ObjectQueue objectqueueVar5;
boolean booleanVar6 = booleanLiteral7;
synchronized (this) {
objectqueueVar5 = (ObjectQueue) (_poolMap.get(key));
if (null == objectqueueVar5) {
objectqueueVar5 = new ObjectQueue();
_poolMap.put(key, objectqueueVar5);
_poolList.add(key);
}
if (isClosed()) {
booleanVar3 = true;
} else {
if (_maxIdle >= 0 && (objectqueueVar5.queue.size() >= _maxIdle)) {
booleanVar3 = true;
} else if (booleanVar1) {
if (_lifo) {
objectqueueVar5.queue.addFirst(new ObjectTimestampPair(obj));
} else {
objectqueueVar5.queue.addLast(new ObjectTimestampPair(obj));
}
_totalIdle++;
if (decrementNumActive) {
objectqueueVar5.decrementActiveCount();
}
booleanVar6 = true;
}
}
}
if (booleanVar6) {
allocate();
}
if (booleanVar3) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e) {
}
if (decrementNumActive) {
synchronized (this) {
objectqueueVar5.decrementActiveCount();
if (objectqueueVar5.queue.isEmpty() && objectqueueVar5.activeCount == 0 && objectqueueVar5.internalProcessingCount == 0) {
_poolMap.remove(key);
_poolList.remove(key);
}
}
allocate();
}
}
}"
18722,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2587,"} catch (Exception e2) {
","public void returnObject(Object key, Object obj) throws Exception {
try {
addObjectToPool(key, obj, true);
} catch (Exception e) {
if (_factory != null) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e2) {
}
// TODO: Correctness here depends on control in addObjectToPool.
ObjectQueue pool = (ObjectQueue) (_poolMap.get(key));
if (pool != null) {
synchronized (this) {
pool.decrementActiveCount();
if (pool.queue.isEmpty() && pool.activeCount == 0 && pool.internalProcessingCount == 0) {
_poolMap.remove(key);
_poolList.remove(key);
}
}
allocate();
}
}
}
}","public void returnObject(Object key, Object obj) throws Exception {
try {
addObjectToPool(key, obj, true);
} catch (Exception e) {
if (_factory != null) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e2) {
}
// TODO: Correctness here depends on control in addObjectToPool.
ObjectQueue objectqueueVar1 = objectqueueLiteral2;
if (objectqueueVar1 != null) {
synchronized (this) {
objectqueueVar1.decrementActiveCount();
if (objectqueueVar1.queue.isEmpty() && objectqueueVar1.activeCount == 0 && objectqueueVar1.internalProcessingCount == 0) {
_poolMap.remove(key);
_poolList.remove(key);
}
}
allocate();
}
}
}
}"
18723,BAD_PRACTICE,EQ_COMPARETO_USE_OBJECT_EQUALS,FP,pool,2588,"final long tstampdiff = this.tstamp - other.tstamp;
if (tstampdiff == 0) {
return System.identityHashCode(this) - System.identityHashCode(other);
} else {
return (int)Math.min(Math.max(tstampdiff, Integer.MIN_VALUE), Integer.MAX_VALUE);
","public int compareTo(ObjectTimestampPair other) {
final long tstampdiff = this.tstamp - other.tstamp;
if (tstampdiff == 0) {
return System.identityHashCode(this) - System.identityHashCode(other);
} else {
return (int) Math.min(Math.max(tstampdiff, Integer.MIN_VALUE), Integer.MAX_VALUE);
}
}","public int compareTo(ObjectTimestampPair other) {
final long longVar1 = longLiteral2;
if (longVar1 == 0) {
return System.identityHashCode(this) - System.identityHashCode(other);
} else {
return (int) Math.min(Math.max(longVar1, Integer.MIN_VALUE), Integer.MAX_VALUE);
}
}"
18727,Multithreaded correctness,NN_NAKED_NOTIFY,FP,pool,2592,"latch.notify();
","private synchronized void allocate() {
if (isClosed())
return;
for (; ; ) {
if (!_pool.isEmpty() && !_allocationQueue.isEmpty()) {
Latch latch = (Latch) _allocationQueue.removeFirst();
latch.setPair((ObjectTimestampPair) _pool.removeFirst());
_numInternalProcessing++;
synchronized (latch) {
latch.notify();
}
} else {
break;
}
}
for (; ; ) {
if ((!_allocationQueue.isEmpty()) && (_maxActive < 0 || (_numActive + _numInternalProcessing) < _maxActive)) {
Latch latch = (Latch) _allocationQueue.removeFirst();
latch.setMayCreate(true);
_numInternalProcessing++;
synchronized (latch) {
latch.notify();
}
} else {
break;
}
}
}","private synchronized void allocate() {
if (isClosed())
return;
for (; ; ) {
if (!_pool.isEmpty() && !_allocationQueue.isEmpty()) {
Latch latchVar1 = latchLiteral2;
latchVar1.setPair((ObjectTimestampPair) _pool.removeFirst());
_numInternalProcessing++;
synchronized (latchVar1) {
latchVar1.notify();
}
} else {
break;
}
}
for (; ; ) {
if ((!_allocationQueue.isEmpty()) && (_maxActive < 0 || (_numActive + _numInternalProcessing) < _maxActive)) {
Latch latchVar1 = latchLiteral2;
latchVar1.setMayCreate(true);
_numInternalProcessing++;
synchronized (latchVar1) {
latchVar1.notify();
}
} else {
break;
}
}
}"
18731,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2596,"} catch (Exception e2) {
","public void returnObject(Object obj) throws Exception {
try {
addObjectToPool(obj, true);
} catch (Exception e) {
if (_factory != null) {
try {
_factory.destroyObject(obj);
} catch (Exception e2) {
}
// TODO: Correctness here depends on control in addObjectToPool.
synchronized (this) {
_numActive--;
}
allocate();
}
}
}","public void returnObject(Object obj) throws Exception {
try {
addObjectToPool(obj, true);
} catch (Exception e) {
if (_factory != null) {
try {
_factory.destroyObject(obj);
} catch (Exception e2) {
}
// TODO: Correctness here depends on control in addObjectToPool.
synchronized (this) {
_numActive--;
}
allocate();
}
}
}"
18736,DODGY_CODE,RI_REDUNDANT_INTERFACES,FP,pool,2601,"public SoftReferenceObjectPool() {
_pool = new ArrayList();
_factory = null;
}
public SoftReferenceObjectPool(PoolableObjectFactory factory) {
_pool = new ArrayList();
_factory = factory;
}
public SoftReferenceObjectPool(PoolableObjectFactory factory, int initSize) throws Exception, IllegalArgumentException {
if (factory == null) {
throw new IllegalArgumentException(""factory required to prefill the pool."");
}
_pool = new ArrayList(initSize);
_factory = factory;
PoolUtils.prefill(this, initSize);
}
public synchronized Object borrowObject() throws Exception {
assertOpen();
Object obj = null;
boolean newlyCreated = false;
while(null == obj) {
if(_pool.isEmpty()) {
if(null == _factory) {
throw new NoSuchElementException();
} else {
newlyCreated = true;
obj = _factory.makeObject();
}
} else {
SoftReference ref = (SoftReference)(_pool.remove(_pool.size() - 1));
obj = ref.get();
ref.clear(); 
}
if (null != _factory && null != obj) {
try {
_factory.activateObject(obj);
if (!_factory.validateObject(obj)) {
throw new Exception(""ValidateObject failed"");
}
} catch (Throwable t) {
PoolUtils.checkRethrow(t);
try {
_factory.destroyObject(obj);
} catch (Throwable t2) {
PoolUtils.checkRethrow(t2);
} finally {
obj = null;
}
if (newlyCreated) {
throw new NoSuchElementException(
""Could not create a validated object, cause: "" +
t.getMessage());
}
}
}
}
_numActive++;
return obj;
}
public synchronized void returnObject(Object obj) throws Exception {
boolean success = !isClosed();
if (_factory != null) {
if(!_factory.validateObject(obj)) {
success = false;
} else {
try {
_factory.passivateObject(obj);
} catch(Exception e) {
success = false;
}
}
}
boolean shouldDestroy = !success;
_numActive--;
if(success) {
_pool.add(new SoftReference(obj, refQueue));
}
notifyAll(); 
if (shouldDestroy && _factory != null) {
try {
_factory.destroyObject(obj);
} catch(Exception e) {
}
}
}
public synchronized void invalidateObject(Object obj) throws Exception {
_numActive--;
if (_factory != null) {
_factory.destroyObject(obj);
}
notifyAll(); 
}
public synchronized void addObject() throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
Object obj = _factory.makeObject();
boolean success = true;
if(!_factory.validateObject(obj)) {
success = false;
} else {
_factory.passivateObject(obj);
}
boolean shouldDestroy = !success;
if(success) {
_pool.add(new SoftReference(obj, refQueue));
notifyAll(); 
}
if(shouldDestroy) {
try {
_factory.destroyObject(obj);
} catch(Exception e) {
}
}
}
public synchronized int getNumIdle() {
pruneClearedReferences();
return _pool.size();
}
public synchronized int getNumActive() {
return _numActive;
}
public synchronized void clear() {
if(null != _factory) {
Iterator iter = _pool.iterator();
while(iter.hasNext()) {
try {
Object obj = ((SoftReference)iter.next()).get();
if(null != obj) {
_factory.destroyObject(obj);
}
} catch(Exception e) {
}
}
}
_pool.clear();
pruneClearedReferences();
}
public void close() throws Exception {
super.close();
clear();
}
public synchronized void setFactory(PoolableObjectFactory factory) throws IllegalStateException {
assertOpen();
if(0 < getNumActive()) {
throw new IllegalStateException(""Objects are already active"");
} else {
clear();
_factory = factory;
}
}
private void pruneClearedReferences() {
Reference ref;
while ((ref = refQueue.poll()) != null) {
try {
_pool.remove(ref);
} catch (UnsupportedOperationException uoe) {
}
}
}
public synchronized PoolableObjectFactory getFactory() {
return _factory;
}
private List _pool = null;
private PoolableObjectFactory _factory = null;
private final ReferenceQueue refQueue = new ReferenceQueue();
private int _numActive = 0;
","public synchronized void returnObject(Object obj) throws Exception {
boolean success = !isClosed();
if (_factory != null) {
if (!_factory.validateObject(obj)) {
success = false;
} else {
try {
_factory.passivateObject(obj);
} catch (Exception e) {
success = false;
}
}
}
boolean shouldDestroy = !success;
_numActive--;
if (success) {
_pool.add(new SoftReference(obj, refQueue));
}
notifyAll();
if (shouldDestroy && _factory != null) {
try {
_factory.destroyObject(obj);
} catch (Exception e) {
}
}
}","public synchronized void returnObject(Object obj) throws Exception {
boolean booleanVar1 = booleanLiteral2;
if (_factory != null) {
if (!_factory.validateObject(obj)) {
booleanVar1 = false;
} else {
try {
_factory.passivateObject(obj);
} catch (Exception e) {
booleanVar1 = false;
}
}
}
boolean booleanVar3 = booleanLiteral4;
_numActive--;
if (booleanVar1) {
_pool.add(new SoftReference(obj, refQueue));
}
notifyAll();
if (booleanVar3 && _factory != null) {
try {
_factory.destroyObject(obj);
} catch (Exception e) {
}
}
}"
18741,Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,pool,2606,protected int _totActive = 0;,protected int _totActive = 0;,protected int intVar1 = intLiteral2;
18751,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2616,"} catch (Exception e) {
","@Override
public void close() {
try {
pool.close();
} catch (Exception e) {
}
}","@Override
public void close() {
try {
pool.close();
} catch (Exception e) {
}
}"
18753,DODGY_CODE,REC_CATCH_EXCEPTION,FP,pool,2618,"} catch (Exception e) {
","@Override
public void run() {
boolean success = false;
try {
if (keyedPool.getNumIdle(key) < minIdle) {
keyedPool.addObject(key);
}
success = true;
} catch (Exception e) {
cancel();
} finally {
if (!success) {
cancel();
}
}
}","@Override
public void run() {
boolean booleanVar1 = booleanLiteral2;
try {
if (keyedPool.getNumIdle(key) < minIdle) {
keyedPool.addObject(key);
}
booleanVar1 = true;
} catch (Exception e) {
cancel();
} finally {
if (!booleanVar1) {
cancel();
}
}
}"
18760,PERFORMANCE,WMI_WRONG_MAP_ITERATOR,FP,pool,2625,"final ObjectDeque<T> deque = poolMap.get(k);
","private void reuseCapacity() {
final int maxTotalPerKeySave = getMaxTotalPerKey();
int maxQueueLength = 0;
LinkedBlockingDeque<PooledObject<T>> mostLoaded = null;
K loadedKey = null;
for (K k : poolMap.keySet()) {
final ObjectDeque<T> deque = poolMap.get(k);
if (deque != null) {
final LinkedBlockingDeque<PooledObject<T>> pool = deque.getIdleObjects();
final int queueLength = pool.getTakeQueueLength();
if (getNumActive(k) < maxTotalPerKeySave && queueLength > maxQueueLength) {
maxQueueLength = queueLength;
mostLoaded = pool;
loadedKey = k;
}
}
}
if (mostLoaded != null) {
register(loadedKey);
try {
PooledObject<T> p = create(loadedKey);
if (p != null) {
addIdleObject(loadedKey, p);
}
} catch (Exception e) {
swallowException(e);
} finally {
deregister(loadedKey);
}
}
}","private void reuseCapacity() {
final int intVar1 = intLiteral2;
int intVar3 = intLiteral4;
LinkedBlockingDeque<PooledObject<T>> linkedblockingdeque<pooledobject<t>>Var5 = linkedblockingdeque<pooledobject<t>>Literal6;
K kVar7 = linkedblockingdeque<pooledobject<t>>Literal6;
for (K kVar8 : poolMap.keySet()) {
final ObjectDeque<T> objectdeque<t>Var9 = objectdeque<t>Literal10;
if (objectdeque<t>Var9 != null) {
final LinkedBlockingDeque<PooledObject<T>> linkedblockingdeque<pooledobject<t>>Var11 = linkedblockingdeque<pooledobject<t>>Literal12;
final int intVar13 = intLiteral14;
if (getNumActive(kVar8) < intVar1 && intVar13 > intVar3) {
intVar3 = intVar13;
linkedblockingdeque<pooledobject<t>>Var5 = linkedblockingdeque<pooledobject<t>>Var11;
kVar7 = kVar8;
}
}
}
if (linkedblockingdeque<pooledobject<t>>Var5 != null) {
register(kVar7);
try {
PooledObject<T> pooledobject<t>Var15 = pooledobject<t>Literal16;
if (pooledobject<t>Var15 != null) {
addIdleObject(kVar7, pooledobject<t>Var15);
}
} catch (Exception e) {
swallowException(e);
} finally {
deregister(kVar7);
}
}
}"
18836,DODGY_CODE,REC_CATCH_EXCEPTION,FP,pool,2701,"} catch (final Exception e) {
","@Override
public void run() {
boolean success = false;
try {
if (keyedPool.getNumIdle(key) < minIdle) {
keyedPool.addObject(key);
}
success = true;
} catch (final Exception e) {
cancel();
} finally {
if (!success) {
cancel();
}
}
}","@Override
public void run() {
boolean booleanVar1 = booleanLiteral2;
try {
if (keyedPool.getNumIdle(key) < minIdle) {
keyedPool.addObject(key);
}
booleanVar1 = true;
} catch (final Exception e) {
cancel();
} finally {
if (!booleanVar1) {
cancel();
}
}
}"
18838,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2703,"} catch (final Exception e) {
","@Override
public void close() {
try {
pool.close();
} catch (final Exception e) {
}
}","@Override
public void close() {
try {
pool.close();
} catch (final Exception e) {
}
}"
18841,DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,pool,2706,"scheduledFuture.cancel(false);
","void cancel() {
scheduledFuture.cancel(false);
}","void cancel() {
scheduledFuture.cancel(false);
}"
18844,Multithreaded correctness,VO_VOLATILE_INCREMENT,FP,pool,2709,"borrowedCount++;
","@Override
public synchronized boolean allocate() {
if (state == PooledObjectState.IDLE) {
state = PooledObjectState.ALLOCATED;
lastBorrowTime = System.currentTimeMillis();
lastUseTime = lastBorrowTime;
borrowedCount++;
if (logAbandoned) {
borrowedBy.fillInStackTrace();
}
return true;
} else if (state == PooledObjectState.EVICTION) {
state = PooledObjectState.EVICTION_RETURN_TO_HEAD;
return false;
}
return false;
}","@Override
public synchronized boolean allocate() {
if (state == PooledObjectState.IDLE) {
state = PooledObjectState.ALLOCATED;
lastBorrowTime = System.currentTimeMillis();
lastUseTime = lastBorrowTime;
borrowedCount++;
if (logAbandoned) {
borrowedBy.fillInStackTrace();
}
return true;
} else if (state == PooledObjectState.EVICTION) {
state = PooledObjectState.EVICTION_RETURN_TO_HEAD;
return false;
}
return false;
}"
18854,Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,pool,2719,private long createCount = 0;,private long createCount = 0;,private long longVar1 = longLiteral2;
18865,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2730,"} catch (final Exception ignored) {
","public T borrowObject(final K key, final long borrowMaxWaitMillis) throws E {
assertOpen();
final AbandonedConfig ac = this.abandonedConfig;
if (ac != null && ac.getRemoveAbandonedOnBorrow() && getNumIdle() < 2 && getNumActive() > getMaxTotal() - 3) {
removeAbandoned(ac);
}
PooledObject<T> p = null;
final boolean blockWhenExhausted = getBlockWhenExhausted();
boolean create;
final long waitTimeMillis = System.currentTimeMillis();
final ObjectDeque<T> objectDeque = register(key);
try {
while (p == null) {
create = false;
p = objectDeque.getIdleObjects().pollFirst();
if (p == null) {
p = create(key);
if (p != null) {
create = true;
}
}
if (blockWhenExhausted) {
if (p == null) {
try {
p = borrowMaxWaitMillis < 0 ? objectDeque.getIdleObjects().takeFirst() : objectDeque.getIdleObjects().pollFirst(borrowMaxWaitMillis, TimeUnit.MILLISECONDS);
} catch (InterruptedException e) {
throw cast(e);
}
}
if (p == null) {
throw new NoSuchElementException(appendStats(""Timeout waiting for idle object, borrowMaxWaitMillis="" + borrowMaxWaitMillis));
}
} else if (p == null) {
throw new NoSuchElementException(appendStats(""Pool exhausted""));
}
if (!p.allocate()) {
p = null;
}
if (p != null) {
try {
factory.activateObject(key, p);
} catch (final Exception e) {
try {
destroy(key, p, true, DestroyMode.NORMAL);
} catch (final Exception ignored) {
}
p = null;
if (create) {
final NoSuchElementException nsee = new NoSuchElementException(appendStats(""Unable to activate object""));
nsee.initCause(e);
throw nsee;
}
}
if (p != null && getTestOnBorrow()) {
boolean validate = false;
Throwable validationThrowable = null;
try {
validate = factory.validateObject(key, p);
} catch (final Throwable t) {
PoolUtils.checkRethrow(t);
validationThrowable = t;
}
if (!validate) {
try {
destroy(key, p, true, DestroyMode.NORMAL);
destroyedByBorrowValidationCount.incrementAndGet();
} catch (final Exception ignored) {
}
p = null;
if (create) {
final NoSuchElementException nsee = new NoSuchElementException(appendStats(""Unable to validate object""));
nsee.initCause(validationThrowable);
throw nsee;
}
}
}
}
}
} finally {
deregister(key);
}
updateStatsBorrow(p, Duration.ofMillis(System.currentTimeMillis() - waitTimeMillis));
return p.getObject();
}","public T borrowObject(final K key, final long borrowMaxWaitMillis) throws E {
assertOpen();
final AbandonedConfig abandonedconfigVar1 = abandonedconfigLiteral2;
if (abandonedconfigVar1 != null && abandonedconfigVar1.getRemoveAbandonedOnBorrow() && getNumIdle() < 2 && getNumActive() > getMaxTotal() - 3) {
removeAbandoned(abandonedconfigVar1);
}
PooledObject<T> pooledobject<t>Var3 = pooledobject<t>Literal4;
final boolean booleanVar5 = booleanLiteral6;
boolean booleanVar7;
final long longVar8 = longLiteral9;
final ObjectDeque<T> objectdeque<t>Var10 = objectdeque<t>Literal11;
try {
while (pooledobject<t>Var3 == null) {
booleanVar7 = false;
pooledobject<t>Var3 = objectdeque<t>Var10.getIdleObjects().pollFirst();
if (pooledobject<t>Var3 == null) {
pooledobject<t>Var3 = create(key);
if (pooledobject<t>Var3 != null) {
booleanVar7 = true;
}
}
if (booleanVar5) {
if (pooledobject<t>Var3 == null) {
try {
pooledobject<t>Var3 = borrowMaxWaitMillis < 0 ? objectdeque<t>Var10.getIdleObjects().takeFirst() : objectdeque<t>Var10.getIdleObjects().pollFirst(borrowMaxWaitMillis, TimeUnit.MILLISECONDS);
} catch (InterruptedException e) {
throw cast(e);
}
}
if (pooledobject<t>Var3 == null) {
throw new NoSuchElementException(appendStats(""Timeout waiting for idle object, borrowMaxWaitMillis="" + borrowMaxWaitMillis));
}
} else if (pooledobject<t>Var3 == null) {
throw new NoSuchElementException(appendStats(""Pool exhausted""));
}
if (!pooledobject<t>Var3.allocate()) {
pooledobject<t>Var3 = null;
}
if (pooledobject<t>Var3 != null) {
try {
factory.activateObject(key, pooledobject<t>Var3);
} catch (final Exception e) {
try {
destroy(key, pooledobject<t>Var3, true, DestroyMode.NORMAL);
} catch (final Exception ignored) {
}
pooledobject<t>Var3 = null;
if (booleanVar7) {
final NoSuchElementException nosuchelementexceptionVar12 = nosuchelementexceptionLiteral13;
nosuchelementexceptionVar12.initCause(e);
throw nosuchelementexceptionVar12;
}
}
if (pooledobject<t>Var3 != null && getTestOnBorrow()) {
boolean booleanVar14 = booleanLiteral15;
Throwable throwableVar16 = pooledobject<t>Literal4;
try {
booleanVar14 = factory.validateObject(key, pooledobject<t>Var3);
} catch (final Throwable t) {
PoolUtils.checkRethrow(t);
throwableVar16 = t;
}
if (!booleanVar14) {
try {
destroy(key, pooledobject<t>Var3, true, DestroyMode.NORMAL);
destroyedByBorrowValidationCount.incrementAndGet();
} catch (final Exception ignored) {
}
pooledobject<t>Var3 = null;
if (booleanVar7) {
final NoSuchElementException nosuchelementexceptionVar12 = nosuchelementexceptionLiteral17;
nosuchelementexceptionVar12.initCause(throwableVar16);
throw nosuchelementexceptionVar12;
}
}
}
}
}
} finally {
deregister(key);
}
updateStatsBorrow(pooledobject<t>Var3, Duration.ofMillis(System.currentTimeMillis() - longVar8));
return pooledobject<t>Var3.getObject();
}"
18867,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,pool,2732,"throw (Error) validationThrowable;
","@Override
public void evict() throws E {
assertOpen();
if (!idleObjects.isEmpty()) {
PooledObject<T> underTest = null;
final EvictionPolicy<T> evictionPolicy = getEvictionPolicy();
synchronized (evictionLock) {
final EvictionConfig evictionConfig = new EvictionConfig(getMinEvictableIdleDuration(), getSoftMinEvictableIdleDuration(), getMinIdle());
final boolean testWhileIdle = getTestWhileIdle();
for (int i = 0, m = getNumTests(); i < m; i++) {
if (evictionIterator == null || !evictionIterator.hasNext()) {
evictionIterator = new EvictionIterator(idleObjects);
}
if (!evictionIterator.hasNext()) {
return;
}
try {
underTest = evictionIterator.next();
} catch (final NoSuchElementException nsee) {
i--;
evictionIterator = null;
continue;
}
if (!underTest.startEvictionTest()) {
i--;
continue;
}
boolean evict;
try {
evict = evictionPolicy.evict(evictionConfig, underTest, idleObjects.size());
} catch (final Throwable t) {
PoolUtils.checkRethrow(t);
swallowException(new Exception(t));
evict = false;
}
if (evict) {
destroy(underTest, DestroyMode.NORMAL);
destroyedByEvictorCount.incrementAndGet();
} else {
if (testWhileIdle) {
boolean active = false;
try {
factory.activateObject(underTest);
active = true;
} catch (final Exception e) {
destroy(underTest, DestroyMode.NORMAL);
destroyedByEvictorCount.incrementAndGet();
}
if (active) {
boolean validate = false;
Throwable validationThrowable = null;
try {
validate = factory.validateObject(underTest);
} catch (final Throwable t) {
PoolUtils.checkRethrow(t);
validationThrowable = t;
}
if (!validate) {
destroy(underTest, DestroyMode.NORMAL);
destroyedByEvictorCount.incrementAndGet();
if (validationThrowable != null) {
if (validationThrowable instanceof RuntimeException) {
throw (RuntimeException) validationThrowable;
}
throw (Error) validationThrowable;
}
} else {
try {
factory.passivateObject(underTest);
} catch (final Exception e) {
destroy(underTest, DestroyMode.NORMAL);
destroyedByEvictorCount.incrementAndGet();
}
}
}
}
underTest.endEvictionTest(idleObjects);
}
}
}
}
final AbandonedConfig ac = this.abandonedConfig;
if (ac != null && ac.getRemoveAbandonedOnMaintenance()) {
removeAbandoned(ac);
}
}","@Override
public void evict() throws E {
assertOpen();
if (!idleObjects.isEmpty()) {
PooledObject<T> pooledobject<t>Var1 = pooledobject<t>Literal2;
final EvictionPolicy<T> evictionpolicy<t>Var3 = evictionpolicy<t>Literal4;
synchronized (evictionLock) {
final EvictionConfig evictionconfigVar5 = evictionconfigLiteral6;
final boolean booleanVar7 = booleanLiteral8;
for (int intVar20 = intLiteral21, intVar22 = intLiteral23; intVar9 < intLiteral1; intVar9++) {
if (evictionIterator == null || !evictionIterator.hasNext()) {
evictionIterator = new EvictionIterator(idleObjects);
}
if (!evictionIterator.hasNext()) {
return;
}
try {
pooledobject<t>Var1 = evictionIterator.next();
} catch (final NoSuchElementException nsee) {
intVar9--;
evictionIterator = null;
continue;
}
if (!pooledobject<t>Var1.startEvictionTest()) {
intVar9--;
continue;
}
boolean booleanVar13;
try {
booleanVar13 = evictionpolicy<t>Var3.evict(evictionconfigVar5, pooledobject<t>Var1, idleObjects.size());
} catch (final Throwable t) {
PoolUtils.checkRethrow(t);
swallowException(new Exception(t));
booleanVar13 = false;
}
if (booleanVar13) {
destroy(pooledobject<t>Var1, DestroyMode.NORMAL);
destroyedByEvictorCount.incrementAndGet();
} else {
if (booleanVar7) {
boolean booleanVar14 = booleanLiteral15;
try {
factory.activateObject(pooledobject<t>Var1);
booleanVar14 = true;
} catch (final Exception e) {
destroy(pooledobject<t>Var1, DestroyMode.NORMAL);
destroyedByEvictorCount.incrementAndGet();
}
if (booleanVar14) {
boolean booleanVar16 = booleanLiteral15;
Throwable throwableVar17 = pooledobject<t>Literal2;
try {
booleanVar16 = factory.validateObject(pooledobject<t>Var1);
} catch (final Throwable t) {
PoolUtils.checkRethrow(t);
throwableVar17 = t;
}
if (!booleanVar16) {
destroy(pooledobject<t>Var1, DestroyMode.NORMAL);
destroyedByEvictorCount.incrementAndGet();
if (throwableVar17 != null) {
if (throwableVar17 instanceof RuntimeException) {
throw (RuntimeException) throwableVar17;
}
throw (Error) throwableVar17;
}
} else {
try {
factory.passivateObject(pooledobject<t>Var1);
} catch (final Exception e) {
destroy(pooledobject<t>Var1, DestroyMode.NORMAL);
destroyedByEvictorCount.incrementAndGet();
}
}
}
}
pooledobject<t>Var1.endEvictionTest(idleObjects);
}
}
}
}
final AbandonedConfig abandonedconfigVar18 = abandonedconfigLiteral19;
if (abandonedconfigVar18 != null && abandonedconfigVar18.getRemoveAbandonedOnMaintenance()) {
removeAbandoned(abandonedconfigVar18);
}
}"
18868,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2733,"} catch (final Exception ignored) {
","public T borrowObject(final Duration borrowMaxWaitDuration) throws E {
assertOpen();
final AbandonedConfig ac = this.abandonedConfig;
if (ac != null && ac.getRemoveAbandonedOnBorrow() && getNumIdle() < 2 && getNumActive() > getMaxTotal() - 3) {
removeAbandoned(ac);
}
PooledObject<T> p = null;
final boolean blockWhenExhausted = getBlockWhenExhausted();
boolean create;
final long waitTimeMillis = System.currentTimeMillis();
while (p == null) {
create = false;
p = idleObjects.pollFirst();
if (p == null) {
p = create();
if (p != null) {
create = true;
}
}
if (blockWhenExhausted) {
if (p == null) {
try {
p = borrowMaxWaitDuration.isNegative() ? idleObjects.takeFirst() : idleObjects.pollFirst(borrowMaxWaitDuration);
} catch (final InterruptedException e) {
throw cast(e);
}
}
if (p == null) {
throw new NoSuchElementException(appendStats(""Timeout waiting for idle object, borrowMaxWaitDuration="" + borrowMaxWaitDuration));
}
} else if (p == null) {
throw new NoSuchElementException(appendStats(""Pool exhausted""));
}
if (!p.allocate()) {
p = null;
}
if (p != null) {
try {
factory.activateObject(p);
} catch (final Exception e) {
try {
destroy(p, DestroyMode.NORMAL);
} catch (final Exception ignored) {
}
p = null;
if (create) {
final NoSuchElementException nsee = new NoSuchElementException(appendStats(""Unable to activate object""));
nsee.initCause(e);
throw nsee;
}
}
if (p != null && getTestOnBorrow()) {
boolean validate = false;
Throwable validationThrowable = null;
try {
validate = factory.validateObject(p);
} catch (final Throwable t) {
PoolUtils.checkRethrow(t);
validationThrowable = t;
}
if (!validate) {
try {
destroy(p, DestroyMode.NORMAL);
destroyedByBorrowValidationCount.incrementAndGet();
} catch (final Exception ignored) {
}
p = null;
if (create) {
final NoSuchElementException nsee = new NoSuchElementException(appendStats(""Unable to validate object""));
nsee.initCause(validationThrowable);
throw nsee;
}
}
}
}
}
updateStatsBorrow(p, Duration.ofMillis(System.currentTimeMillis() - waitTimeMillis));
return p.getObject();
}","public T borrowObject(final Duration borrowMaxWaitDuration) throws E {
assertOpen();
final AbandonedConfig abandonedconfigVar1 = abandonedconfigLiteral2;
if (abandonedconfigVar1 != null && abandonedconfigVar1.getRemoveAbandonedOnBorrow() && getNumIdle() < 2 && getNumActive() > getMaxTotal() - 3) {
removeAbandoned(abandonedconfigVar1);
}
PooledObject<T> pooledobject<t>Var3 = pooledobject<t>Literal4;
final boolean booleanVar5 = booleanLiteral6;
boolean booleanVar7;
final long longVar8 = longLiteral9;
while (pooledobject<t>Var3 == null) {
booleanVar7 = false;
pooledobject<t>Var3 = idleObjects.pollFirst();
if (pooledobject<t>Var3 == null) {
pooledobject<t>Var3 = create();
if (pooledobject<t>Var3 != null) {
booleanVar7 = true;
}
}
if (booleanVar5) {
if (pooledobject<t>Var3 == null) {
try {
pooledobject<t>Var3 = borrowMaxWaitDuration.isNegative() ? idleObjects.takeFirst() : idleObjects.pollFirst(borrowMaxWaitDuration);
} catch (final InterruptedException e) {
throw cast(e);
}
}
if (pooledobject<t>Var3 == null) {
throw new NoSuchElementException(appendStats(""Timeout waiting for idle object, borrowMaxWaitDuration="" + borrowMaxWaitDuration));
}
} else if (pooledobject<t>Var3 == null) {
throw new NoSuchElementException(appendStats(""Pool exhausted""));
}
if (!pooledobject<t>Var3.allocate()) {
pooledobject<t>Var3 = null;
}
if (pooledobject<t>Var3 != null) {
try {
factory.activateObject(pooledobject<t>Var3);
} catch (final Exception e) {
try {
destroy(pooledobject<t>Var3, DestroyMode.NORMAL);
} catch (final Exception ignored) {
}
pooledobject<t>Var3 = null;
if (booleanVar7) {
final NoSuchElementException nosuchelementexceptionVar10 = nosuchelementexceptionLiteral11;
nosuchelementexceptionVar10.initCause(e);
throw nosuchelementexceptionVar10;
}
}
if (pooledobject<t>Var3 != null && getTestOnBorrow()) {
boolean booleanVar12 = booleanLiteral13;
Throwable throwableVar14 = pooledobject<t>Literal4;
try {
booleanVar12 = factory.validateObject(pooledobject<t>Var3);
} catch (final Throwable t) {
PoolUtils.checkRethrow(t);
throwableVar14 = t;
}
if (!booleanVar12) {
try {
destroy(pooledobject<t>Var3, DestroyMode.NORMAL);
destroyedByBorrowValidationCount.incrementAndGet();
} catch (final Exception ignored) {
}
pooledobject<t>Var3 = null;
if (booleanVar7) {
final NoSuchElementException nosuchelementexceptionVar10 = nosuchelementexceptionLiteral15;
nosuchelementexceptionVar10.initCause(throwableVar14);
throw nosuchelementexceptionVar10;
}
}
}
}
}
updateStatsBorrow(pooledobject<t>Var3, Duration.ofMillis(System.currentTimeMillis() - longVar8));
return pooledobject<t>Var3.getObject();
}"
18869,Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,pool,2734,private int numActive;,private int numActive;,private int intVar1;
18903,DODGY_CODE,UCF_USELESS_CONTROL_FLOW,FP,pool,2768,"if (!idleQueue.offerFirst(this)) {
","@Override
public synchronized boolean endEvictionTest(final Deque<PooledObject<T>> idleQueue) {
if (state == PooledObjectState.EVICTION) {
state = PooledObjectState.IDLE;
return true;
}
if (state == PooledObjectState.EVICTION_RETURN_TO_HEAD) {
state = PooledObjectState.IDLE;
if (!idleQueue.offerFirst(this)) {
}
}
return false;
}","@Override
public synchronized boolean endEvictionTest(final Deque<PooledObject<T>> idleQueue) {
if (state == PooledObjectState.EVICTION) {
state = PooledObjectState.IDLE;
return true;
}
if (state == PooledObjectState.EVICTION_RETURN_TO_HEAD) {
state = PooledObjectState.IDLE;
if (!idleQueue.offerFirst(this)) {
}
}
return false;
}"
18908,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,pool,2773,"throw (Error) validationThrowable;
","@Override
public void evict() throws E {
assertOpen();
if (!idleObjects.isEmpty()) {
PooledObject<T> underTest = null;
final EvictionPolicy<T> evictionPolicy = getEvictionPolicy();
synchronized (evictionLock) {
final EvictionConfig evictionConfig = new EvictionConfig(getMinEvictableIdleDuration(), getSoftMinEvictableIdleDuration(), getMinIdle());
final boolean testWhileIdle = getTestWhileIdle();
for (int i = 0, m = getNumTests(); i < m; i++) {
if (evictionIterator == null || !evictionIterator.hasNext()) {
evictionIterator = new EvictionIterator(idleObjects);
}
if (!evictionIterator.hasNext()) {
return;
}
try {
underTest = evictionIterator.next();
} catch (final NoSuchElementException nsee) {
i--;
evictionIterator = null;
continue;
}
if (!underTest.startEvictionTest()) {
i--;
continue;
}
boolean evict;
try {
evict = evictionPolicy.evict(evictionConfig, underTest, idleObjects.size());
} catch (final Throwable t) {
PoolUtils.checkRethrow(t);
swallowException(new Exception(t));
evict = false;
}
if (evict) {
destroy(underTest, DestroyMode.NORMAL);
destroyedByEvictorCount.incrementAndGet();
} else {
if (testWhileIdle) {
boolean active = false;
try {
factory.activateObject(underTest);
active = true;
} catch (final Exception e) {
destroy(underTest, DestroyMode.NORMAL);
destroyedByEvictorCount.incrementAndGet();
}
if (active) {
boolean validate = false;
Throwable validationThrowable = null;
try {
validate = factory.validateObject(underTest);
} catch (final Throwable t) {
PoolUtils.checkRethrow(t);
validationThrowable = t;
}
if (!validate) {
destroy(underTest, DestroyMode.NORMAL);
destroyedByEvictorCount.incrementAndGet();
if (validationThrowable != null) {
if (validationThrowable instanceof RuntimeException) {
throw (RuntimeException) validationThrowable;
}
throw (Error) validationThrowable;
}
} else {
try {
factory.passivateObject(underTest);
} catch (final Exception e) {
destroy(underTest, DestroyMode.NORMAL);
destroyedByEvictorCount.incrementAndGet();
}
}
}
}
if (!underTest.endEvictionTest(idleObjects)) {
}
}
}
}
}
final AbandonedConfig ac = this.abandonedConfig;
if (ac != null && ac.getRemoveAbandonedOnMaintenance()) {
removeAbandoned(ac);
}
}","@Override
public void evict() throws E {
assertOpen();
if (!idleObjects.isEmpty()) {
PooledObject<T> pooledobject<t>Var1 = pooledobject<t>Literal2;
final EvictionPolicy<T> evictionpolicy<t>Var3 = evictionpolicy<t>Literal4;
synchronized (evictionLock) {
final EvictionConfig evictionconfigVar5 = evictionconfigLiteral6;
final boolean booleanVar7 = booleanLiteral8;
for (int intVar20 = intLiteral21, intVar22 = intLiteral23; intVar9 < intLiteral1; intVar9++) {
if (evictionIterator == null || !evictionIterator.hasNext()) {
evictionIterator = new EvictionIterator(idleObjects);
}
if (!evictionIterator.hasNext()) {
return;
}
try {
pooledobject<t>Var1 = evictionIterator.next();
} catch (final NoSuchElementException nsee) {
intVar9--;
evictionIterator = null;
continue;
}
if (!pooledobject<t>Var1.startEvictionTest()) {
intVar9--;
continue;
}
boolean booleanVar13;
try {
booleanVar13 = evictionpolicy<t>Var3.evict(evictionconfigVar5, pooledobject<t>Var1, idleObjects.size());
} catch (final Throwable t) {
PoolUtils.checkRethrow(t);
swallowException(new Exception(t));
booleanVar13 = false;
}
if (booleanVar13) {
destroy(pooledobject<t>Var1, DestroyMode.NORMAL);
destroyedByEvictorCount.incrementAndGet();
} else {
if (booleanVar7) {
boolean booleanVar14 = booleanLiteral15;
try {
factory.activateObject(pooledobject<t>Var1);
booleanVar14 = true;
} catch (final Exception e) {
destroy(pooledobject<t>Var1, DestroyMode.NORMAL);
destroyedByEvictorCount.incrementAndGet();
}
if (booleanVar14) {
boolean booleanVar16 = booleanLiteral15;
Throwable throwableVar17 = pooledobject<t>Literal2;
try {
booleanVar16 = factory.validateObject(pooledobject<t>Var1);
} catch (final Throwable t) {
PoolUtils.checkRethrow(t);
throwableVar17 = t;
}
if (!booleanVar16) {
destroy(pooledobject<t>Var1, DestroyMode.NORMAL);
destroyedByEvictorCount.incrementAndGet();
if (throwableVar17 != null) {
if (throwableVar17 instanceof RuntimeException) {
throw (RuntimeException) throwableVar17;
}
throw (Error) throwableVar17;
}
} else {
try {
factory.passivateObject(pooledobject<t>Var1);
} catch (final Exception e) {
destroy(pooledobject<t>Var1, DestroyMode.NORMAL);
destroyedByEvictorCount.incrementAndGet();
}
}
}
}
if (!pooledobject<t>Var1.endEvictionTest(idleObjects)) {
}
}
}
}
}
final AbandonedConfig abandonedconfigVar18 = abandonedconfigLiteral19;
if (abandonedconfigVar18 != null && abandonedconfigVar18.getRemoveAbandonedOnMaintenance()) {
removeAbandoned(abandonedconfigVar18);
}
}"
18914,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2779,"} catch (Exception e) {
","public void invalidateObject(final Object key, final Object obj) {
try {
pool.invalidateObject(obj);
} catch (Exception e) {
}
}","public void invalidateObject(final Object key, final Object obj) {
try {
pool.invalidateObject(obj);
} catch (Exception e) {
}
}"
18918,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2783,"} catch (Exception e) {
","public void invalidateObject(final Object obj) {
try {
pool.invalidateObject(obj);
} catch (Exception e) {
}
}","public void invalidateObject(final Object obj) {
try {
pool.invalidateObject(obj);
} catch (Exception e) {
}
}"
18926,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2791,"} catch (Exception e) {
","public void returnObject(final Object key, final Object obj) {
synchronized (lock) {
try {
keyedPool.returnObject(key, obj);
} catch (Exception e) {
}
}
}","public void returnObject(final Object key, final Object obj) {
synchronized (lock) {
try {
keyedPool.returnObject(key, obj);
} catch (Exception e) {
}
}
}"
18943,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2808,"} catch(Exception e) {
","public void run() {
try {
evict();
} catch (Exception e) {
} catch (OutOfMemoryError oome) {
oome.printStackTrace(System.err);
}
try {
ensureMinIdle();
} catch (Exception e) {
}
}","public void run() {
try {
evict();
} catch (Exception e) {
} catch (OutOfMemoryError oome) {
oome.printStackTrace(System.err);
}
try {
ensureMinIdle();
} catch (Exception e) {
}
}"
18958,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2823,"} catch(Exception e) {
","public void run() {
try {
evict();
} catch (Exception e) {
} catch (OutOfMemoryError oome) {
oome.printStackTrace(System.err);
}
try {
ensureMinIdle();
} catch (Exception e) {
}
}","public void run() {
try {
evict();
} catch (Exception e) {
} catch (OutOfMemoryError oome) {
oome.printStackTrace(System.err);
}
try {
ensureMinIdle();
} catch (Exception e) {
}
}"
18965,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2830,"} catch (Exception e) {
","public synchronized void returnObject(Object key, Object obj) throws Exception {
decrementActiveCount(key);
if (null != _factory) {
if (_factory.validateObject(key, obj)) {
try {
_factory.passivateObject(key, obj);
} catch (Exception ex) {
_factory.destroyObject(key, obj);
return;
}
} else {
return;
}
}
if (isClosed()) {
if (null != _factory) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e) {
}
}
return;
}
Stack stack = (Stack) _pools.get(key);
if (null == stack) {
stack = new Stack();
stack.ensureCapacity(_initSleepingCapacity > _maxSleeping ? _maxSleeping : _initSleepingCapacity);
_pools.put(key, stack);
}
final int stackSize = stack.size();
if (stackSize >= _maxSleeping) {
final Object staleObj;
if (stackSize > 0) {
staleObj = stack.remove(0);
_totIdle--;
} else {
staleObj = obj;
}
if (null != _factory) {
try {
_factory.destroyObject(key, staleObj);
} catch (Exception e) {
}
}
}
stack.push(obj);
_totIdle++;
}","public synchronized void returnObject(Object key, Object obj) throws Exception {
decrementActiveCount(key);
if (null != _factory) {
if (_factory.validateObject(key, obj)) {
try {
_factory.passivateObject(key, obj);
} catch (Exception ex) {
_factory.destroyObject(key, obj);
return;
}
} else {
return;
}
}
if (isClosed()) {
if (null != _factory) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e) {
}
}
return;
}
Stack stackVar1 = stackLiteral2;
if (null == stackVar1) {
stackVar1 = new Stack();
stackVar1.ensureCapacity(_initSleepingCapacity > _maxSleeping ? _maxSleeping : _initSleepingCapacity);
_pools.put(key, stackVar1);
}
final int intVar3 = intLiteral4;
if (intVar3 >= _maxSleeping) {
final Object objectVar5;
if (intVar3 > 0) {
objectVar5 = stackVar1.remove(0);
_totIdle--;
} else {
objectVar5 = obj;
}
if (null != _factory) {
try {
_factory.destroyObject(key, objectVar5);
} catch (Exception e) {
}
}
}
stackVar1.push(obj);
_totIdle++;
}"
18975,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2840,"} catch (Exception e) {
","public void returnObject(final Object key, final Object obj) {
if (type.isInstance(obj)) {
try {
keyedPool.returnObject(key, obj);
} catch (Exception e) {
}
} else {
throw new ClassCastException(""Returned object for key: "" + key + "" is not of type: "" + type.getName() + "" was: "" + obj);
}
}","public void returnObject(final Object key, final Object obj) {
if (type.isInstance(obj)) {
try {
keyedPool.returnObject(key, obj);
} catch (Exception e) {
}
} else {
throw new ClassCastException(""Returned object for key: "" + key + "" is not of type: "" + type.getName() + "" was: "" + obj);
}
}"
18979,DODGY_CODE,REC_CATCH_EXCEPTION,FP,pool,2844,"} catch (Exception e) {
","public void run() {
boolean success = false;
try {
if (keyedPool.getNumIdle(key) < minIdle) {
keyedPool.addObject(key);
}
success = true;
} catch (Exception e) {
cancel();
} finally {
if (!success) {
cancel();
}
}
}","public void run() {
boolean booleanVar1 = booleanLiteral2;
try {
if (keyedPool.getNumIdle(key) < minIdle) {
keyedPool.addObject(key);
}
booleanVar1 = true;
} catch (Exception e) {
cancel();
} finally {
if (!booleanVar1) {
cancel();
}
}
}"
18980,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2845,"} catch (Exception e) {
","public void returnObject(final Object obj) {
try {
keyedPool.returnObject(key, obj);
} catch (Exception e) {
}
}","public void returnObject(final Object obj) {
try {
keyedPool.returnObject(key, obj);
} catch (Exception e) {
}
}"
18985,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2850,"} catch (Exception e) {
","public void returnObject(final Object key, final Object obj) {
try {
pool.returnObject(obj);
} catch (Exception e) {
}
}","public void returnObject(final Object key, final Object obj) {
try {
pool.returnObject(obj);
} catch (Exception e) {
}
}"
18990,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2855,"} catch (Exception e) {
","public void invalidateObject(final Object obj) {
try {
keyedPool.invalidateObject(key, obj);
} catch (Exception e) {
}
}","public void invalidateObject(final Object obj) {
try {
keyedPool.invalidateObject(key, obj);
} catch (Exception e) {
}
}"
18998,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2863,"} catch (Exception e2) {
","public void returnObject(Object key, Object obj) throws Exception {
try {
addObjectToPool(key, obj, true);
} catch (Exception e) {
if (_factory != null) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e2) {
}
// TODO: Correctness here depends on control in addObjectToPool.
ObjectQueue pool = (ObjectQueue) (_poolMap.get(key));
if (pool != null) {
synchronized (this) {
pool.decrementActiveCount();
allocate();
}
}
}
}
}","public void returnObject(Object key, Object obj) throws Exception {
try {
addObjectToPool(key, obj, true);
} catch (Exception e) {
if (_factory != null) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e2) {
}
// TODO: Correctness here depends on control in addObjectToPool.
ObjectQueue objectqueueVar1 = objectqueueLiteral2;
if (objectqueueVar1 != null) {
synchronized (this) {
objectqueueVar1.decrementActiveCount();
allocate();
}
}
}
}
}"
19085,DODGY_CODE,REC_CATCH_EXCEPTION,FP,pool,2950,"} catch (Exception e) {
","@Override
public void run() {
boolean success = false;
try {
if (keyedPool.getNumIdle(key) < minIdle) {
keyedPool.addObject(key);
}
success = true;
} catch (Exception e) {
cancel();
} finally {
if (!success) {
cancel();
}
}
}","@Override
public void run() {
boolean booleanVar1 = booleanLiteral2;
try {
if (keyedPool.getNumIdle(key) < minIdle) {
keyedPool.addObject(key);
}
booleanVar1 = true;
} catch (Exception e) {
cancel();
} finally {
if (!booleanVar1) {
cancel();
}
}
}"
19086,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2951,"} catch (Exception e) {
","@Override
public void invalidateObject(final T obj) {
try {
pool.invalidateObject(obj);
} catch (Exception e) {
}
}","@Override
public void invalidateObject(final T obj) {
try {
pool.invalidateObject(obj);
} catch (Exception e) {
}
}"
19087,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2952,"} catch (Exception e) {
","@Override
public void invalidateObject(final K key, final V obj) {
try {
keyedPool.invalidateObject(key, obj);
} catch (Exception e) {
}
}","@Override
public void invalidateObject(final K key, final V obj) {
try {
keyedPool.invalidateObject(key, obj);
} catch (Exception e) {
}
}"
19092,DODGY_CODE,UCF_USELESS_CONTROL_FLOW,FP,pool,2957,"if (!idleQueue.offerFirst(this)) {
","@Override
public synchronized boolean endEvictionTest(Deque<PooledObject<T>> idleQueue) {
if (state == PooledObjectState.EVICTION) {
state = PooledObjectState.IDLE;
return true;
} else if (state == PooledObjectState.EVICTION_RETURN_TO_HEAD) {
state = PooledObjectState.IDLE;
if (!idleQueue.offerFirst(this)) {
}
}
return false;
}","@Override
public synchronized boolean endEvictionTest(Deque<PooledObject<T>> idleQueue) {
if (state == PooledObjectState.EVICTION) {
state = PooledObjectState.IDLE;
return true;
} else if (state == PooledObjectState.EVICTION_RETURN_TO_HEAD) {
state = PooledObjectState.IDLE;
if (!idleQueue.offerFirst(this)) {
}
}
return false;
}"
19100,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2965,"} catch (Exception e1) {
","public T borrowObject(K key, long borrowMaxWaitMillis) throws Exception {
assertOpen();
PooledObject<T> p = null;
boolean blockWhenExhausted = getBlockWhenExhausted();
boolean create;
long waitTime = 0;
ObjectDeque<T> objectDeque = register(key);
try {
while (p == null) {
create = false;
if (blockWhenExhausted) {
p = objectDeque.getIdleObjects().pollFirst();
if (p == null) {
create = true;
p = create(key);
}
if (p == null) {
if (borrowMaxWaitMillis < 0) {
p = objectDeque.getIdleObjects().takeFirst();
} else {
waitTime = System.currentTimeMillis();
p = objectDeque.getIdleObjects().pollFirst(borrowMaxWaitMillis, TimeUnit.MILLISECONDS);
waitTime = System.currentTimeMillis() - waitTime;
}
}
if (p == null) {
throw new NoSuchElementException(""Timeout waiting for idle object"");
}
if (!p.allocate()) {
p = null;
}
} else {
p = objectDeque.getIdleObjects().pollFirst();
if (p == null) {
create = true;
p = create(key);
}
if (p == null) {
throw new NoSuchElementException(""Pool exhausted"");
}
if (!p.allocate()) {
p = null;
}
}
if (p != null) {
try {
factory.activateObject(key, p);
} catch (Exception e) {
try {
destroy(key, p, true);
} catch (Exception e1) {
}
p = null;
if (create) {
NoSuchElementException nsee = new NoSuchElementException(""Unable to activate object"");
nsee.initCause(e);
throw nsee;
}
}
if (p != null && getTestOnBorrow()) {
boolean validate = false;
Throwable validationThrowable = null;
try {
validate = factory.validateObject(key, p);
} catch (Throwable t) {
PoolUtils.checkRethrow(t);
validationThrowable = t;
}
if (!validate) {
try {
destroy(key, p, true);
destroyedByBorrowValidationCount.incrementAndGet();
} catch (Exception e) {
}
p = null;
if (create) {
NoSuchElementException nsee = new NoSuchElementException(""Unable to validate object"");
nsee.initCause(validationThrowable);
throw nsee;
}
}
}
}
}
} finally {
deregister(key);
}
updateStatsBorrow(p, waitTime);
return p.getObject();
}","public T borrowObject(K key, long borrowMaxWaitMillis) throws Exception {
assertOpen();
PooledObject<T> pooledobject<t>Var1 = pooledobject<t>Literal2;
boolean booleanVar3 = booleanLiteral4;
boolean booleanVar5;
long longVar6 = longLiteral7;
ObjectDeque<T> objectdeque<t>Var8 = objectdeque<t>Literal9;
try {
while (pooledobject<t>Var1 == null) {
booleanVar5 = false;
if (booleanVar3) {
pooledobject<t>Var1 = objectdeque<t>Var8.getIdleObjects().pollFirst();
if (pooledobject<t>Var1 == null) {
booleanVar5 = true;
pooledobject<t>Var1 = create(key);
}
if (pooledobject<t>Var1 == null) {
if (borrowMaxWaitMillis < 0) {
pooledobject<t>Var1 = objectdeque<t>Var8.getIdleObjects().takeFirst();
} else {
longVar6 = System.currentTimeMillis();
pooledobject<t>Var1 = objectdeque<t>Var8.getIdleObjects().pollFirst(borrowMaxWaitMillis, TimeUnit.MILLISECONDS);
longVar6 = System.currentTimeMillis() - longVar6;
}
}
if (pooledobject<t>Var1 == null) {
throw new NoSuchElementException(""Timeout waiting for idle object"");
}
if (!pooledobject<t>Var1.allocate()) {
pooledobject<t>Var1 = null;
}
} else {
pooledobject<t>Var1 = objectdeque<t>Var8.getIdleObjects().pollFirst();
if (pooledobject<t>Var1 == null) {
booleanVar5 = true;
pooledobject<t>Var1 = create(key);
}
if (pooledobject<t>Var1 == null) {
throw new NoSuchElementException(""Pool exhausted"");
}
if (!pooledobject<t>Var1.allocate()) {
pooledobject<t>Var1 = null;
}
}
if (pooledobject<t>Var1 != null) {
try {
factory.activateObject(key, pooledobject<t>Var1);
} catch (Exception e) {
try {
destroy(key, pooledobject<t>Var1, true);
} catch (Exception e1) {
}
pooledobject<t>Var1 = null;
if (booleanVar5) {
NoSuchElementException nosuchelementexceptionVar10 = nosuchelementexceptionLiteral11;
nosuchelementexceptionVar10.initCause(e);
throw nosuchelementexceptionVar10;
}
}
if (pooledobject<t>Var1 != null && getTestOnBorrow()) {
boolean booleanVar12 = booleanLiteral13;
Throwable throwableVar14 = pooledobject<t>Literal2;
try {
booleanVar12 = factory.validateObject(key, pooledobject<t>Var1);
} catch (Throwable t) {
PoolUtils.checkRethrow(t);
throwableVar14 = t;
}
if (!booleanVar12) {
try {
destroy(key, pooledobject<t>Var1, true);
destroyedByBorrowValidationCount.incrementAndGet();
} catch (Exception e) {
}
pooledobject<t>Var1 = null;
if (booleanVar5) {
NoSuchElementException nosuchelementexceptionVar10 = nosuchelementexceptionLiteral15;
nosuchelementexceptionVar10.initCause(throwableVar14);
throw nosuchelementexceptionVar10;
}
}
}
}
}
} finally {
deregister(key);
}
updateStatsBorrow(pooledobject<t>Var1, longVar6);
return pooledobject<t>Var1.getObject();
}"
19172,BAD_PRACTICE,EQ_COMPARETO_USE_OBJECT_EQUALS,FP,pool,3037,"public class DefaultPooledObject<T> implements PooledObject<T> {
","@Override
public int compareTo(PooledObject<T> other) {
final long lastActiveDiff = this.getLastReturnTime() - other.getLastReturnTime();
if (lastActiveDiff == 0) {
return System.identityHashCode(this) - System.identityHashCode(other);
}
return (int) Math.min(Math.max(lastActiveDiff, Integer.MIN_VALUE), Integer.MAX_VALUE);
}","@Override
public int compareTo(PooledObject<T> other) {
final long longVar1 = longLiteral2;
if (longVar1 == 0) {
return System.identityHashCode(this) - System.identityHashCode(other);
}
return (int) Math.min(Math.max(longVar1, Integer.MIN_VALUE), Integer.MAX_VALUE);
}"
19176,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,3041,"} catch (Exception e1) {
","public T borrowObject(K key, long borrowMaxWaitMillis) throws Exception {
assertOpen();
PooledObject<T> p = null;
boolean blockWhenExhausted = getBlockWhenExhausted();
boolean create;
long waitTime = 0;
ObjectDeque<T> objectDeque = register(key);
try {
while (p == null) {
create = false;
if (blockWhenExhausted) {
p = objectDeque.getIdleObjects().pollFirst();
if (p == null) {
create = true;
p = create(key);
}
if (p == null) {
if (borrowMaxWaitMillis < 0) {
p = objectDeque.getIdleObjects().takeFirst();
} else {
waitTime = System.currentTimeMillis();
p = objectDeque.getIdleObjects().pollFirst(borrowMaxWaitMillis, TimeUnit.MILLISECONDS);
waitTime = System.currentTimeMillis() - waitTime;
}
}
if (p == null) {
throw new NoSuchElementException(""Timeout waiting for idle object"");
}
if (!p.allocate()) {
p = null;
}
} else {
p = objectDeque.getIdleObjects().pollFirst();
if (p == null) {
create = true;
p = create(key);
}
if (p == null) {
throw new NoSuchElementException(""Pool exhausted"");
}
if (!p.allocate()) {
p = null;
}
}
if (p != null) {
try {
factory.activateObject(key, p);
} catch (Exception e) {
try {
destroy(key, p, true);
} catch (Exception e1) {
}
p = null;
if (create) {
NoSuchElementException nsee = new NoSuchElementException(""Unable to activate object"");
nsee.initCause(e);
throw nsee;
}
}
if (p != null && getTestOnBorrow()) {
boolean validate = false;
Throwable validationThrowable = null;
try {
validate = factory.validateObject(key, p);
} catch (Throwable t) {
PoolUtils.checkRethrow(t);
validationThrowable = t;
}
if (!validate) {
try {
destroy(key, p, true);
destroyedByBorrowValidationCount.incrementAndGet();
} catch (Exception e) {
}
p = null;
if (create) {
NoSuchElementException nsee = new NoSuchElementException(""Unable to validate object"");
nsee.initCause(validationThrowable);
throw nsee;
}
}
}
}
}
} finally {
deregister(key);
}
updateStatsBorrow(p, waitTime);
return p.getObject();
}","public T borrowObject(K key, long borrowMaxWaitMillis) throws Exception {
assertOpen();
PooledObject<T> pooledobject<t>Var1 = pooledobject<t>Literal2;
boolean booleanVar3 = booleanLiteral4;
boolean booleanVar5;
long longVar6 = longLiteral7;
ObjectDeque<T> objectdeque<t>Var8 = objectdeque<t>Literal9;
try {
while (pooledobject<t>Var1 == null) {
booleanVar5 = false;
if (booleanVar3) {
pooledobject<t>Var1 = objectdeque<t>Var8.getIdleObjects().pollFirst();
if (pooledobject<t>Var1 == null) {
booleanVar5 = true;
pooledobject<t>Var1 = create(key);
}
if (pooledobject<t>Var1 == null) {
if (borrowMaxWaitMillis < 0) {
pooledobject<t>Var1 = objectdeque<t>Var8.getIdleObjects().takeFirst();
} else {
longVar6 = System.currentTimeMillis();
pooledobject<t>Var1 = objectdeque<t>Var8.getIdleObjects().pollFirst(borrowMaxWaitMillis, TimeUnit.MILLISECONDS);
longVar6 = System.currentTimeMillis() - longVar6;
}
}
if (pooledobject<t>Var1 == null) {
throw new NoSuchElementException(""Timeout waiting for idle object"");
}
if (!pooledobject<t>Var1.allocate()) {
pooledobject<t>Var1 = null;
}
} else {
pooledobject<t>Var1 = objectdeque<t>Var8.getIdleObjects().pollFirst();
if (pooledobject<t>Var1 == null) {
booleanVar5 = true;
pooledobject<t>Var1 = create(key);
}
if (pooledobject<t>Var1 == null) {
throw new NoSuchElementException(""Pool exhausted"");
}
if (!pooledobject<t>Var1.allocate()) {
pooledobject<t>Var1 = null;
}
}
if (pooledobject<t>Var1 != null) {
try {
factory.activateObject(key, pooledobject<t>Var1);
} catch (Exception e) {
try {
destroy(key, pooledobject<t>Var1, true);
} catch (Exception e1) {
}
pooledobject<t>Var1 = null;
if (booleanVar5) {
NoSuchElementException nosuchelementexceptionVar10 = nosuchelementexceptionLiteral11;
nosuchelementexceptionVar10.initCause(e);
throw nosuchelementexceptionVar10;
}
}
if (pooledobject<t>Var1 != null && getTestOnBorrow()) {
boolean booleanVar12 = booleanLiteral13;
Throwable throwableVar14 = pooledobject<t>Literal2;
try {
booleanVar12 = factory.validateObject(key, pooledobject<t>Var1);
} catch (Throwable t) {
PoolUtils.checkRethrow(t);
throwableVar14 = t;
}
if (!booleanVar12) {
try {
destroy(key, pooledobject<t>Var1, true);
destroyedByBorrowValidationCount.incrementAndGet();
} catch (Exception e) {
}
pooledobject<t>Var1 = null;
if (booleanVar5) {
NoSuchElementException nosuchelementexceptionVar10 = nosuchelementexceptionLiteral15;
nosuchelementexceptionVar10.initCause(throwableVar14);
throw nosuchelementexceptionVar10;
}
}
}
}
}
} finally {
deregister(key);
}
updateStatsBorrow(pooledobject<t>Var1, longVar6);
return pooledobject<t>Var1.getObject();
}"
19179,PERFORMANCE,WMI_WRONG_MAP_ITERATOR,FP,pool,3044,"ObjectDeque<T> queue = poolMap.get(k);
","public void clearOldest() {
final Map<PooledObject<T>, K> map = new TreeMap<PooledObject<T>, K>();
for (K k : poolMap.keySet()) {
ObjectDeque<T> queue = poolMap.get(k);
if (queue != null) {
final LinkedBlockingDeque<PooledObject<T>> idleObjects = queue.getIdleObjects();
for (PooledObject<T> p : idleObjects) {
map.put(p, k);
}
}
}
int itemsToRemove = ((int) (map.size() * 0.15)) + 1;
Iterator<Map.Entry<PooledObject<T>, K>> iter = map.entrySet().iterator();
while (iter.hasNext() && itemsToRemove > 0) {
Map.Entry<PooledObject<T>, K> entry = iter.next();
K key = entry.getValue();
PooledObject<T> p = entry.getKey();
boolean destroyed = true;
try {
destroyed = destroy(key, p, false);
} catch (Exception e) {
swallowException(e);
}
if (destroyed) {
itemsToRemove--;
}
}
}","public void clearOldest() {
final Map<PooledObject<T>, K> map<pooledobject<t>,k>Var1 = map<pooledobject<t>,k>Literal2;
for (K kVar3 : poolMap.keySet()) {
ObjectDeque<T> objectdeque<t>Var4 = objectdeque<t>Literal5;
if (objectdeque<t>Var4 != null) {
final LinkedBlockingDeque<PooledObject<T>> linkedblockingdeque<pooledobject<t>>Var6 = linkedblockingdeque<pooledobject<t>>Literal7;
for (PooledObject<T> pooledobject<t>Var8 : linkedblockingdeque<pooledobject<t>>Var6) {
map<pooledobject<t>,k>Var1.put(pooledobject<t>Var8, kVar3);
}
}
}
int intVar9 = intLiteral10;
Iterator<Map.Entry<PooledObject<T>, K>> iterator<map.entry<pooledobject<t>,k>>Var11 = iterator<map.entry<pooledobject<t>,k>>Literal12;
while (iterator<map.entry<pooledobject<t>,k>>Var11.hasNext() && intVar9 > 0) {
Map.Entry<PooledObject<T>, K> map.entry<pooledobject<t>,k>Var13 = map.entry<pooledobject<t>,k>Literal14;
K kVar15 = kLiteral16;
PooledObject<T> pooledobject<t>Var8 = pooledobject<t>Literal17;
boolean booleanVar18 = booleanLiteral19;
try {
booleanVar18 = destroy(kVar15, pooledobject<t>Var8, false);
} catch (Exception e) {
swallowException(e);
}
if (booleanVar18) {
intVar9--;
}
}
}"
19184,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,3049,"} catch (Exception e) {
","@Override
public void close() {
try {
keyedPool.close();
} catch (Exception e) {
}
}","@Override
public void close() {
try {
keyedPool.close();
} catch (Exception e) {
}
}"
19192,Multithreaded correctness,VO_VOLATILE_INCREMENT,FP,pool,3057,"borrowedCount++;
","@Override
public synchronized boolean allocate() {
if (state == PooledObjectState.IDLE) {
state = PooledObjectState.ALLOCATED;
lastBorrowTime = System.currentTimeMillis();
lastUseTime = lastBorrowTime;
borrowedCount++;
if (logAbandoned) {
borrowedBy = new AbandonedObjectCreatedException();
}
return true;
} else if (state == PooledObjectState.EVICTION) {
state = PooledObjectState.EVICTION_RETURN_TO_HEAD;
return false;
}
return false;
}","@Override
public synchronized boolean allocate() {
if (state == PooledObjectState.IDLE) {
state = PooledObjectState.ALLOCATED;
lastBorrowTime = System.currentTimeMillis();
lastUseTime = lastBorrowTime;
borrowedCount++;
if (logAbandoned) {
borrowedBy = new AbandonedObjectCreatedException();
}
return true;
} else if (state == PooledObjectState.EVICTION) {
state = PooledObjectState.EVICTION_RETURN_TO_HEAD;
return false;
}
return false;
}"
19193,DODGY_CODE,UCF_USELESS_CONTROL_FLOW,FP,pool,3058,"if (!idleQueue.offerFirst(this)) {
","@Override
public synchronized boolean endEvictionTest(Deque<PooledObject<T>> idleQueue) {
if (state == PooledObjectState.EVICTION) {
state = PooledObjectState.IDLE;
return true;
} else if (state == PooledObjectState.EVICTION_RETURN_TO_HEAD) {
state = PooledObjectState.IDLE;
if (!idleQueue.offerFirst(this)) {
}
}
return false;
}","@Override
public synchronized boolean endEvictionTest(Deque<PooledObject<T>> idleQueue) {
if (state == PooledObjectState.EVICTION) {
state = PooledObjectState.IDLE;
return true;
} else if (state == PooledObjectState.EVICTION_RETURN_TO_HEAD) {
state = PooledObjectState.IDLE;
if (!idleQueue.offerFirst(this)) {
}
}
return false;
}"
19194,PERFORMANCE,WMI_WRONG_MAP_ITERATOR,FP,pool,3059,"ObjectDeque<T> queue = poolMap.get(key);
","@Override
public Map<String, Integer> getNumWaitersByKey() {
Map<String, Integer> result = new HashMap<String, Integer>();
for (K key : poolMap.keySet()) {
ObjectDeque<T> queue = poolMap.get(key);
if (queue != null) {
if (getBlockWhenExhausted()) {
result.put(key.toString(), Integer.valueOf(queue.getIdleObjects().getTakeQueueLength()));
} else {
result.put(key.toString(), Integer.valueOf(0));
}
}
}
return result;
}","@Override
public Map<String, Integer> getNumWaitersByKey() {
Map<String, Integer> map<string,integer>Var1 = map<string,integer>Literal2;
for (K kVar3 : poolMap.keySet()) {
ObjectDeque<T> objectdeque<t>Var4 = objectdeque<t>Literal5;
if (objectdeque<t>Var4 != null) {
if (getBlockWhenExhausted()) {
map<string,integer>Var1.put(kVar3.toString(), Integer.valueOf(objectdeque<t>Var4.getIdleObjects().getTakeQueueLength()));
} else {
map<string,integer>Var1.put(kVar3.toString(), Integer.valueOf(0));
}
}
}
return map<string,integer>Var1;
}"
19198,PERFORMANCE,WMI_WRONG_MAP_ITERATOR,FP,pool,3063,"ObjectDeque<T> queue = poolMap.get(key);
","@Override
public Map<String, List<DefaultPooledObjectInfo>> listAllObjects() {
Map<String, List<DefaultPooledObjectInfo>> result = new HashMap<String, List<DefaultPooledObjectInfo>>();
for (K key : poolMap.keySet()) {
ObjectDeque<T> queue = poolMap.get(key);
if (queue != null) {
List<DefaultPooledObjectInfo> list = new ArrayList<DefaultPooledObjectInfo>();
result.put(key.toString(), list);
for (PooledObject<T> p : queue.getAllObjects().values()) {
list.add(new DefaultPooledObjectInfo(p));
}
}
}
return result;
}","@Override
public Map<String, List<DefaultPooledObjectInfo>> listAllObjects() {
Map<String, List<DefaultPooledObjectInfo>> map<string,list<defaultpooledobjectinfo>>Var1 = map<string,list<defaultpooledobjectinfo>>Literal2;
for (K kVar3 : poolMap.keySet()) {
ObjectDeque<T> objectdeque<t>Var4 = objectdeque<t>Literal5;
if (objectdeque<t>Var4 != null) {
List<DefaultPooledObjectInfo> list<defaultpooledobjectinfo>Var6 = list<defaultpooledobjectinfo>Literal7;
map<string,list<defaultpooledobjectinfo>>Var1.put(kVar3.toString(), list<defaultpooledobjectinfo>Var6);
for (PooledObject<T> pooledobject<t>Var8 : objectdeque<t>Var4.getAllObjects().values()) {
list<defaultpooledobjectinfo>Var6.add(new DefaultPooledObjectInfo(pooledobject<t>Var8));
}
}
}
return map<string,list<defaultpooledobjectinfo>>Var1;
}"
19204,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,3069,"} catch (Exception e) {
","@Override
public synchronized void returnObject(T obj) throws Exception {
boolean success = !isClosed();
final PooledSoftReference<T> ref = findReference(obj);
if (ref == null) {
throw new IllegalStateException(""Returned object not currently part of this pool"");
}
if (factory != null) {
if (!factory.validateObject(ref)) {
success = false;
} else {
try {
factory.passivateObject(ref);
} catch (Exception e) {
success = false;
}
}
}
boolean shouldDestroy = !success;
numActive--;
if (success) {
ref.deallocate();
idleReferences.add(ref);
}
notifyAll();
if (shouldDestroy && factory != null) {
try {
destroy(ref);
} catch (Exception e) {
}
}
}","@Override
public synchronized void returnObject(T obj) throws Exception {
boolean booleanVar1 = booleanLiteral2;
final PooledSoftReference<T> pooledsoftreference<t>Var3 = pooledsoftreference<t>Literal4;
if (pooledsoftreference<t>Var3 == null) {
throw new IllegalStateException(""Returned object not currently part of this pool"");
}
if (factory != null) {
if (!factory.validateObject(pooledsoftreference<t>Var3)) {
booleanVar1 = false;
} else {
try {
factory.passivateObject(pooledsoftreference<t>Var3);
} catch (Exception e) {
booleanVar1 = false;
}
}
}
boolean booleanVar5 = booleanLiteral6;
numActive--;
if (booleanVar1) {
pooledsoftreference<t>Var3.deallocate();
idleReferences.add(pooledsoftreference<t>Var3);
}
notifyAll();
if (booleanVar5 && factory != null) {
try {
destroy(pooledsoftreference<t>Var3);
} catch (Exception e) {
}
}
}"
19205,DODGY_CODE,REC_CATCH_EXCEPTION,FP,pool,3070,"} catch (final Exception e) {
","@Override
public void run() {
boolean success = false;
try {
if (keyedPool.getNumIdle(key) < minIdle) {
keyedPool.addObject(key);
}
success = true;
} catch (final Exception e) {
cancel();
} finally {
if (!success) {
cancel();
}
}
}","@Override
public void run() {
boolean booleanVar1 = booleanLiteral2;
try {
if (keyedPool.getNumIdle(key) < minIdle) {
keyedPool.addObject(key);
}
booleanVar1 = true;
} catch (final Exception e) {
cancel();
} finally {
if (!booleanVar1) {
cancel();
}
}
}"
19207,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,3072,"} catch (final Exception e) {
","@Override
public void close() {
try {
pool.close();
} catch (final Exception e) {
}
}","@Override
public void close() {
try {
pool.close();
} catch (final Exception e) {
}
}"
19208,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,3073,"} catch (final Exception e) {
","@Override
public void invalidateObject(final T obj) {
try {
pool.invalidateObject(obj);
} catch (final Exception e) {
}
}","@Override
public void invalidateObject(final T obj) {
try {
pool.invalidateObject(obj);
} catch (final Exception e) {
}
}"
19219,DODGY_CODE,UCF_USELESS_CONTROL_FLOW,FP,pool,3084,"if (!underTest.endEvictionTest(idleObjects)) {
","@Override
public void evict() throws E {
assertOpen();
if (!idleObjects.isEmpty()) {
PooledObject<T> underTest = null;
final EvictionPolicy<T> evictionPolicy = getEvictionPolicy();
synchronized (evictionLock) {
final EvictionConfig evictionConfig = new EvictionConfig(getMinEvictableIdleDuration(), getSoftMinEvictableIdleDuration(), getMinIdle());
final boolean testWhileIdle = getTestWhileIdle();
for (int i = 0, m = getNumTests(); i < m; i++) {
if (evictionIterator == null || !evictionIterator.hasNext()) {
evictionIterator = new EvictionIterator(idleObjects);
}
if (!evictionIterator.hasNext()) {
return;
}
try {
underTest = evictionIterator.next();
} catch (final NoSuchElementException nsee) {
i--;
evictionIterator = null;
continue;
}
if (!underTest.startEvictionTest()) {
i--;
continue;
}
boolean evict;
try {
evict = evictionPolicy.evict(evictionConfig, underTest, idleObjects.size());
} catch (final Throwable t) {
PoolUtils.checkRethrow(t);
swallowException(new Exception(t));
evict = false;
}
if (evict) {
destroy(underTest, DestroyMode.NORMAL);
destroyedByEvictorCount.incrementAndGet();
} else {
if (testWhileIdle) {
boolean active = false;
try {
factory.activateObject(underTest);
active = true;
} catch (final Exception e) {
destroy(underTest, DestroyMode.NORMAL);
destroyedByEvictorCount.incrementAndGet();
}
if (active) {
boolean validate = false;
Throwable validationThrowable = null;
try {
validate = factory.validateObject(underTest);
} catch (final Throwable t) {
PoolUtils.checkRethrow(t);
validationThrowable = t;
}
if (!validate) {
destroy(underTest, DestroyMode.NORMAL);
destroyedByEvictorCount.incrementAndGet();
if (validationThrowable != null) {
if (validationThrowable instanceof RuntimeException) {
throw (RuntimeException) validationThrowable;
}
throw (Error) validationThrowable;
}
} else {
try {
factory.passivateObject(underTest);
} catch (final Exception e) {
destroy(underTest, DestroyMode.NORMAL);
destroyedByEvictorCount.incrementAndGet();
}
}
}
}
if (!underTest.endEvictionTest(idleObjects)) {
}
}
}
}
}
final AbandonedConfig ac = this.abandonedConfig;
if (ac != null && ac.getRemoveAbandonedOnMaintenance()) {
removeAbandoned(ac);
}
}","@Override
public void evict() throws E {
assertOpen();
if (!idleObjects.isEmpty()) {
PooledObject<T> pooledobject<t>Var1 = pooledobject<t>Literal2;
final EvictionPolicy<T> evictionpolicy<t>Var3 = evictionpolicy<t>Literal4;
synchronized (evictionLock) {
final EvictionConfig evictionconfigVar5 = evictionconfigLiteral6;
final boolean booleanVar7 = booleanLiteral8;
for (int intVar20 = intLiteral21, intVar22 = intLiteral23; intVar9 < intLiteral1; intVar9++) {
if (evictionIterator == null || !evictionIterator.hasNext()) {
evictionIterator = new EvictionIterator(idleObjects);
}
if (!evictionIterator.hasNext()) {
return;
}
try {
pooledobject<t>Var1 = evictionIterator.next();
} catch (final NoSuchElementException nsee) {
intVar9--;
evictionIterator = null;
continue;
}
if (!pooledobject<t>Var1.startEvictionTest()) {
intVar9--;
continue;
}
boolean booleanVar13;
try {
booleanVar13 = evictionpolicy<t>Var3.evict(evictionconfigVar5, pooledobject<t>Var1, idleObjects.size());
} catch (final Throwable t) {
PoolUtils.checkRethrow(t);
swallowException(new Exception(t));
booleanVar13 = false;
}
if (booleanVar13) {
destroy(pooledobject<t>Var1, DestroyMode.NORMAL);
destroyedByEvictorCount.incrementAndGet();
} else {
if (booleanVar7) {
boolean booleanVar14 = booleanLiteral15;
try {
factory.activateObject(pooledobject<t>Var1);
booleanVar14 = true;
} catch (final Exception e) {
destroy(pooledobject<t>Var1, DestroyMode.NORMAL);
destroyedByEvictorCount.incrementAndGet();
}
if (booleanVar14) {
boolean booleanVar16 = booleanLiteral15;
Throwable throwableVar17 = pooledobject<t>Literal2;
try {
booleanVar16 = factory.validateObject(pooledobject<t>Var1);
} catch (final Throwable t) {
PoolUtils.checkRethrow(t);
throwableVar17 = t;
}
if (!booleanVar16) {
destroy(pooledobject<t>Var1, DestroyMode.NORMAL);
destroyedByEvictorCount.incrementAndGet();
if (throwableVar17 != null) {
if (throwableVar17 instanceof RuntimeException) {
throw (RuntimeException) throwableVar17;
}
throw (Error) throwableVar17;
}
} else {
try {
factory.passivateObject(pooledobject<t>Var1);
} catch (final Exception e) {
destroy(pooledobject<t>Var1, DestroyMode.NORMAL);
destroyedByEvictorCount.incrementAndGet();
}
}
}
}
if (!pooledobject<t>Var1.endEvictionTest(idleObjects)) {
}
}
}
}
}
final AbandonedConfig abandonedconfigVar18 = abandonedconfigLiteral19;
if (abandonedconfigVar18 != null && abandonedconfigVar18.getRemoveAbandonedOnMaintenance()) {
removeAbandoned(abandonedconfigVar18);
}
}"
19222,Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,pool,3087,private int numActive;,private int numActive;,private int intVar1;
19228,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,3093,"} catch (Exception e) {
","public void returnObject(final Object obj) {
try {
keyedPool.returnObject(key, obj);
} catch (Exception e) {
}
}","public void returnObject(final Object obj) {
try {
keyedPool.returnObject(key, obj);
} catch (Exception e) {
}
}"
19233,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,3098,"} catch (Exception e) {
","public void invalidateObject(final Object obj) {
synchronized (lock) {
try {
pool.invalidateObject(obj);
} catch (Exception e) {
}
}
}","public void invalidateObject(final Object obj) {
synchronized (lock) {
try {
pool.invalidateObject(obj);
} catch (Exception e) {
}
}
}"
19234,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,3099,"} catch (Exception e) {
","public void close() {
try {
keyedPool.close();
} catch (Exception e) {
}
}","public void close() {
try {
keyedPool.close();
} catch (Exception e) {
}
}"
19238,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,3103,"} catch (Exception e) {
","public void invalidateObject(final Object obj) {
try {
pool.invalidateObject(obj);
} catch (Exception e) {
}
}","public void invalidateObject(final Object obj) {
try {
pool.invalidateObject(obj);
} catch (Exception e) {
}
}"
19239,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,3104,"} catch (Exception e) {
","public void invalidateObject(final Object key, final Object obj) {
if (type.isInstance(obj)) {
try {
keyedPool.invalidateObject(key, obj);
} catch (Exception e) {
}
} else {
throw new ClassCastException(""Invalidated object for key: "" + key + "" is not of type: "" + type.getName() + "" was: "" + obj);
}
}","public void invalidateObject(final Object key, final Object obj) {
if (type.isInstance(obj)) {
try {
keyedPool.invalidateObject(key, obj);
} catch (Exception e) {
}
} else {
throw new ClassCastException(""Invalidated object for key: "" + key + "" is not of type: "" + type.getName() + "" was: "" + obj);
}
}"
19245,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,3110,"} catch (Exception e) {
","public void close() {
try {
pool.close();
} catch (Exception e) {
}
}","public void close() {
try {
pool.close();
} catch (Exception e) {
}
}"
19258,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,3123,"} catch(Exception e) {
","public void run() {
try {
evict();
} catch (Exception e) {
}
try {
ensureMinIdle();
} catch (Exception e) {
}
}","public void run() {
try {
evict();
} catch (Exception e) {
}
try {
ensureMinIdle();
} catch (Exception e) {
}
}"
19262,DODGY_CODE,REC_CATCH_EXCEPTION,FP,pool,3127,"} catch(Exception e) {
","public synchronized void evict() throws Exception {
Object key = null;
if (_evictionKeyCursor != null && _evictionKeyCursor._lastReturned != null) {
key = _evictionKeyCursor._lastReturned.value();
}
for (int i = 0, m = getNumTests(); i < m; i++) {
if (_poolMap == null || _poolMap.size() == 0) {
continue;
}
if (null == _evictionKeyCursor) {
resetEvictionKeyCursor();
key = null;
}
if (null == _evictionCursor) {
if (_evictionKeyCursor.hasNext()) {
key = _evictionKeyCursor.next();
resetEvictionObjectCursor(key);
} else {
resetEvictionKeyCursor();
if (_evictionKeyCursor != null) {
if (_evictionKeyCursor.hasNext()) {
key = _evictionKeyCursor.next();
resetEvictionObjectCursor(key);
}
}
}
}
if (_evictionCursor == null) {
continue;
}
if ((_lifo && !_evictionCursor.hasPrevious()) || (!_lifo && !_evictionCursor.hasNext())) {
if (_evictionKeyCursor != null) {
if (_evictionKeyCursor.hasNext()) {
key = _evictionKeyCursor.next();
resetEvictionObjectCursor(key);
} else {
resetEvictionKeyCursor();
if (_evictionKeyCursor != null) {
if (_evictionKeyCursor.hasNext()) {
key = _evictionKeyCursor.next();
resetEvictionObjectCursor(key);
}
}
}
}
}
if ((_lifo && !_evictionCursor.hasPrevious()) || (!_lifo && !_evictionCursor.hasNext())) {
continue;
}
ObjectTimestampPair pair = _lifo ? (ObjectTimestampPair) _evictionCursor.previous() : (ObjectTimestampPair) _evictionCursor.next();
boolean removeObject = false;
if ((_minEvictableIdleTimeMillis > 0) && (System.currentTimeMillis() - pair.tstamp > _minEvictableIdleTimeMillis)) {
removeObject = true;
}
if (_testWhileIdle && removeObject == false) {
boolean active = false;
try {
_factory.activateObject(key, pair.value);
active = true;
} catch (Exception e) {
removeObject = true;
}
if (active) {
if (!_factory.validateObject(key, pair.value)) {
removeObject = true;
} else {
try {
_factory.passivateObject(key, pair.value);
} catch (Exception e) {
removeObject = true;
}
}
}
}
if (removeObject) {
try {
_evictionCursor.remove();
_totalIdle--;
_factory.destroyObject(key, pair.value);
if (_minIdle == 0) {
ObjectQueue objectQueue = (ObjectQueue) _poolMap.get(key);
if (objectQueue != null && objectQueue.queue.isEmpty()) {
_poolMap.remove(key);
_poolList.remove(key);
}
}
} catch (Exception e) {
;
}
}
}
}","public synchronized void evict() throws Exception {
Object objectVar1 = objectLiteral2;
if (_evictionKeyCursor != null && _evictionKeyCursor._lastReturned != null) {
objectVar1 = _evictionKeyCursor._lastReturned.value();
}
for (int intVar14 = intLiteral15, intVar16 = intLiteral17; intVar3 < intLiteral1; intVar3++) {
if (_poolMap == null || _poolMap.size() == 0) {
continue;
}
if (null == _evictionKeyCursor) {
resetEvictionKeyCursor();
objectVar1 = null;
}
if (null == _evictionCursor) {
if (_evictionKeyCursor.hasNext()) {
objectVar1 = _evictionKeyCursor.next();
resetEvictionObjectCursor(objectVar1);
} else {
resetEvictionKeyCursor();
if (_evictionKeyCursor != null) {
if (_evictionKeyCursor.hasNext()) {
objectVar1 = _evictionKeyCursor.next();
resetEvictionObjectCursor(objectVar1);
}
}
}
}
if (_evictionCursor == null) {
continue;
}
if ((_lifo && !_evictionCursor.hasPrevious()) || (!_lifo && !_evictionCursor.hasNext())) {
if (_evictionKeyCursor != null) {
if (_evictionKeyCursor.hasNext()) {
objectVar1 = _evictionKeyCursor.next();
resetEvictionObjectCursor(objectVar1);
} else {
resetEvictionKeyCursor();
if (_evictionKeyCursor != null) {
if (_evictionKeyCursor.hasNext()) {
objectVar1 = _evictionKeyCursor.next();
resetEvictionObjectCursor(objectVar1);
}
}
}
}
}
if ((_lifo && !_evictionCursor.hasPrevious()) || (!_lifo && !_evictionCursor.hasNext())) {
continue;
}
ObjectTimestampPair objecttimestamppairVar7 = objecttimestamppairLiteral8;
boolean booleanVar9 = booleanLiteral10;
if ((_minEvictableIdleTimeMillis > 0) && (System.currentTimeMillis() - objecttimestamppairVar7.tstamp > _minEvictableIdleTimeMillis)) {
booleanVar9 = true;
}
if (_testWhileIdle && booleanVar9 == false) {
boolean booleanVar11 = booleanLiteral10;
try {
_factory.activateObject(objectVar1, objecttimestamppairVar7.value);
booleanVar11 = true;
} catch (Exception e) {
booleanVar9 = true;
}
if (booleanVar11) {
if (!_factory.validateObject(objectVar1, objecttimestamppairVar7.value)) {
booleanVar9 = true;
} else {
try {
_factory.passivateObject(objectVar1, objecttimestamppairVar7.value);
} catch (Exception e) {
booleanVar9 = true;
}
}
}
}
if (booleanVar9) {
try {
_evictionCursor.remove();
_totalIdle--;
_factory.destroyObject(objectVar1, objecttimestamppairVar7.value);
if (_minIdle == 0) {
ObjectQueue objectqueueVar12 = objectqueueLiteral13;
if (objectqueueVar12 != null && objectqueueVar12.queue.isEmpty()) {
_poolMap.remove(objectVar1);
_poolList.remove(objectVar1);
}
}
} catch (Exception e) {
;
}
}
}
}"
19269,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,3134,"} catch(Exception e) {
","private void addObjectToPool(Object obj, boolean decrementNumActive) throws Exception {
boolean success = true;
if (_testOnReturn && !(_factory.validateObject(obj))) {
success = false;
} else {
_factory.passivateObject(obj);
}
boolean shouldDestroy = !success;
synchronized (this) {
if (isClosed()) {
shouldDestroy = true;
} else {
if ((_maxIdle >= 0) && (_pool.size() >= _maxIdle)) {
shouldDestroy = true;
} else if (success) {
if (_lifo) {
_pool.addFirst(new ObjectTimestampPair(obj));
} else {
_pool.addLast(new ObjectTimestampPair(obj));
}
}
}
}
if (shouldDestroy) {
try {
_factory.destroyObject(obj);
} catch (Exception e) {
}
}
if (decrementNumActive) {
synchronized (this) {
_numActive--;
notifyAll();
}
}
}","private void addObjectToPool(Object obj, boolean decrementNumActive) throws Exception {
boolean booleanVar1 = booleanLiteral2;
if (_testOnReturn && !(_factory.validateObject(obj))) {
booleanVar1 = false;
} else {
_factory.passivateObject(obj);
}
boolean booleanVar3 = booleanLiteral4;
synchronized (this) {
if (isClosed()) {
booleanVar3 = true;
} else {
if ((_maxIdle >= 0) && (_pool.size() >= _maxIdle)) {
booleanVar3 = true;
} else if (booleanVar1) {
if (_lifo) {
_pool.addFirst(new ObjectTimestampPair(obj));
} else {
_pool.addLast(new ObjectTimestampPair(obj));
}
}
}
}
if (booleanVar3) {
try {
_factory.destroyObject(obj);
} catch (Exception e) {
}
}
if (decrementNumActive) {
synchronized (this) {
_numActive--;
notifyAll();
}
}
}"
19278,DODGY_CODE,RI_REDUNDANT_INTERFACES,FP,pool,3143,"this((KeyedPoolableObjectFactory)null,DEFAULT_MAX_SLEEPING,DEFAULT_INIT_SLEEPING_CAPACITY);
}
public StackKeyedObjectPool(int max) {
this((KeyedPoolableObjectFactory)null,max,DEFAULT_INIT_SLEEPING_CAPACITY);
}
public StackKeyedObjectPool(int max, int init) {
this((KeyedPoolableObjectFactory)null,max,init);
}
public StackKeyedObjectPool(KeyedPoolableObjectFactory factory) {
this(factory,DEFAULT_MAX_SLEEPING);
}
public StackKeyedObjectPool(KeyedPoolableObjectFactory factory, int max) {
this(factory,max,DEFAULT_INIT_SLEEPING_CAPACITY);
}
public StackKeyedObjectPool(KeyedPoolableObjectFactory factory, int max, int init) {
_factory = factory;
_maxSleeping = (max < 0 ? DEFAULT_MAX_SLEEPING : max);
_initSleepingCapacity = (init < 1 ? DEFAULT_INIT_SLEEPING_CAPACITY : init);
_pools = new HashMap();
_activeCount = new HashMap();
}
public synchronized Object borrowObject(Object key) throws Exception {
assertOpen();
Stack stack = (Stack)(_pools.get(key));
if(null == stack) {
stack = new Stack();
stack.ensureCapacity( _initSleepingCapacity > _maxSleeping ? _maxSleeping : _initSleepingCapacity);
_pools.put(key,stack);
}
Object obj = null;
do {
boolean newlyMade = false;
if (!stack.empty()) {
obj = stack.pop();
_totIdle--;
} else {
if(null == _factory) {
throw new NoSuchElementException(""pools without a factory cannot create new objects as needed."");
} else {
obj = _factory.makeObject(key);
newlyMade = true;
}
}
if (null != _factory && null != obj) {
try {
_factory.activateObject(key, obj);
if (!_factory.validateObject(key, obj)) {
throw new Exception(""ValidateObject failed"");
}
} catch (Throwable t) {
try {
_factory.destroyObject(key,obj);
} catch (Throwable t2) {
} finally {
obj = null;
}
if (newlyMade) {
throw new NoSuchElementException(
""Could not create a validated object, cause: "" +
t.getMessage());
}
}
}
} while (obj == null);
incrementActiveCount(key);
return obj;
}
public synchronized void returnObject(Object key, Object obj) throws Exception {
decrementActiveCount(key);
if (null != _factory) {
if (_factory.validateObject(key, obj)) {
try {
_factory.passivateObject(key, obj);
} catch (Exception ex) {
_factory.destroyObject(key, obj);
return;
}
} else {
return;
}
}
if (isClosed()) {
if (null != _factory) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e) {
}
}
return;
}
Stack stack = (Stack)_pools.get(key);
if(null == stack) {
stack = new Stack();
stack.ensureCapacity( _initSleepingCapacity > _maxSleeping ? _maxSleeping : _initSleepingCapacity);
_pools.put(key,stack);
}
final int stackSize = stack.size();
if (stackSize >= _maxSleeping) {
final Object staleObj;
if (stackSize > 0) {
staleObj = stack.remove(0);
_totIdle--;
} else {
staleObj = obj;
}
if(null != _factory) {
try {
_factory.destroyObject(key, staleObj);
} catch (Exception e) {
}
}
}
stack.push(obj);
_totIdle++;
}
public synchronized void invalidateObject(Object key, Object obj) throws Exception {
decrementActiveCount(key);
if(null != _factory) {
_factory.destroyObject(key,obj);
}
notifyAll(); 
}
public synchronized void addObject(Object key) throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
Object obj = _factory.makeObject(key);
try {
if (!_factory.validateObject(key, obj)) {
return;
}
} catch (Exception e) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e2) {
}
return;
}
_factory.passivateObject(key, obj);
Stack stack = (Stack)_pools.get(key);
if(null == stack) {
stack = new Stack();
stack.ensureCapacity( _initSleepingCapacity > _maxSleeping ? _maxSleeping : _initSleepingCapacity);
_pools.put(key,stack);
}
final int stackSize = stack.size();
if (stackSize >= _maxSleeping) {
final Object staleObj;
if (stackSize > 0) {
staleObj = stack.remove(0);
_totIdle--;
} else {
staleObj = obj;
}
try {
_factory.destroyObject(key, staleObj);
} catch (Exception e) {
if (obj == staleObj) {
throw e;
}
}
} else {
stack.push(obj);
_totIdle++;
}
}
public synchronized int getNumIdle() {
return _totIdle;
}
public int getNumActive() {
return _totActive;
}
public synchronized int getNumActive(Object key) {
return getActiveCount(key);
}
public synchronized int getNumIdle(Object key) {
try {
return((Stack)(_pools.get(key))).size();
} catch(Exception e) {
return 0;
}
}
public synchronized void clear() {
Iterator it = _pools.keySet().iterator();
while(it.hasNext()) {
Object key = it.next();
Stack stack = (Stack)(_pools.get(key));
destroyStack(key,stack);
}
_totIdle = 0;
_pools.clear();
_activeCount.clear();
}
public synchronized void clear(Object key) {
Stack stack = (Stack)(_pools.remove(key));
destroyStack(key,stack);
}
private synchronized void destroyStack(Object key, Stack stack) {
if(null == stack) {
return;
} else {
if(null != _factory) {
Iterator it = stack.iterator();
while(it.hasNext()) {
try {
_factory.destroyObject(key,it.next());
} catch(Exception e) {
}
}
}
_totIdle -= stack.size();
_activeCount.remove(key);
stack.clear();
}
}
public synchronized String toString() {
StringBuffer buf = new StringBuffer();
buf.append(getClass().getName());
buf.append("" contains "").append(_pools.size()).append("" distinct pools: "");
Iterator it = _pools.keySet().iterator();
while(it.hasNext()) {
Object key = it.next();
buf.append("" |"").append(key).append(""|="");
Stack s = (Stack)(_pools.get(key));
buf.append(s.size());
}
return buf.toString();
}
public void close() throws Exception {
super.close();
clear();
}
public synchronized void setFactory(KeyedPoolableObjectFactory factory) throws IllegalStateException {
if(0 < getNumActive()) {
throw new IllegalStateException(""Objects are already active"");
} else {
clear();
_factory = factory;
}
}
private int getActiveCount(Object key) {
try {
return ((Integer)_activeCount.get(key)).intValue();
} catch(NoSuchElementException e) {
return 0;
} catch(NullPointerException e) {
return 0;
}
}
private void incrementActiveCount(Object key) {
_totActive++;
Integer old = (Integer)(_activeCount.get(key));
if(null == old) {
_activeCount.put(key,new Integer(1));
} else {
_activeCount.put(key,new Integer(old.intValue() + 1));
}
}
private void decrementActiveCount(Object key) {
_totActive--;
Integer active = (Integer)(_activeCount.get(key));
if(null == active) {
} else if(active.intValue() <= 1) {
_activeCount.remove(key);
} else {
_activeCount.put(key, new Integer(active.intValue() - 1));
}
}
protected static final int DEFAULT_MAX_SLEEPING  = 8;
protected static final int DEFAULT_INIT_SLEEPING_CAPACITY = 4;
protected HashMap _pools = null;
protected KeyedPoolableObjectFactory _factory = null;
protected int _maxSleeping = DEFAULT_MAX_SLEEPING;
protected int _initSleepingCapacity = DEFAULT_INIT_SLEEPING_CAPACITY;
protected int _totActive = 0;
protected int _totIdle = 0;
protected HashMap _activeCount = null;
","public synchronized void returnObject(Object key, Object obj) throws Exception {
decrementActiveCount(key);
if (null != _factory) {
if (_factory.validateObject(key, obj)) {
try {
_factory.passivateObject(key, obj);
} catch (Exception ex) {
_factory.destroyObject(key, obj);
return;
}
} else {
return;
}
}
if (isClosed()) {
if (null != _factory) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e) {
}
}
return;
}
Stack stack = (Stack) _pools.get(key);
if (null == stack) {
stack = new Stack();
stack.ensureCapacity(_initSleepingCapacity > _maxSleeping ? _maxSleeping : _initSleepingCapacity);
_pools.put(key, stack);
}
final int stackSize = stack.size();
if (stackSize >= _maxSleeping) {
final Object staleObj;
if (stackSize > 0) {
staleObj = stack.remove(0);
_totIdle--;
} else {
staleObj = obj;
}
if (null != _factory) {
try {
_factory.destroyObject(key, staleObj);
} catch (Exception e) {
}
}
}
stack.push(obj);
_totIdle++;
}","public synchronized void returnObject(Object key, Object obj) throws Exception {
decrementActiveCount(key);
if (null != _factory) {
if (_factory.validateObject(key, obj)) {
try {
_factory.passivateObject(key, obj);
} catch (Exception ex) {
_factory.destroyObject(key, obj);
return;
}
} else {
return;
}
}
if (isClosed()) {
if (null != _factory) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e) {
}
}
return;
}
Stack stackVar1 = stackLiteral2;
if (null == stackVar1) {
stackVar1 = new Stack();
stackVar1.ensureCapacity(_initSleepingCapacity > _maxSleeping ? _maxSleeping : _initSleepingCapacity);
_pools.put(key, stackVar1);
}
final int intVar3 = intLiteral4;
if (intVar3 >= _maxSleeping) {
final Object objectVar5;
if (intVar3 > 0) {
objectVar5 = stackVar1.remove(0);
_totIdle--;
} else {
objectVar5 = obj;
}
if (null != _factory) {
try {
_factory.destroyObject(key, objectVar5);
} catch (Exception e) {
}
}
}
stackVar1.push(obj);
_totIdle++;
}"
19407,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,3272,"} catch (Exception e) {
","@Override
public void invalidateObject(final K key, final V obj) {
try {
keyedPool.invalidateObject(key, obj);
} catch (Exception e) {
}
}","@Override
public void invalidateObject(final K key, final V obj) {
try {
keyedPool.invalidateObject(key, obj);
} catch (Exception e) {
}
}"
19409,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,3274,"} catch (Exception e) {
","@Override
public void close() {
try {
keyedPool.close();
} catch (Exception e) {
}
}","@Override
public void close() {
try {
keyedPool.close();
} catch (Exception e) {
}
}"
19418,PERFORMANCE,WMI_WRONG_MAP_ITERATOR,FP,pool,3283,"ObjectDeque<T> queue = poolMap.get(key);
","@Override
public Map<String, List<DefaultPooledObjectInfo>> listAllObjects() {
Map<String, List<DefaultPooledObjectInfo>> result = new HashMap<String, List<DefaultPooledObjectInfo>>();
for (K key : poolMap.keySet()) {
ObjectDeque<T> queue = poolMap.get(key);
if (queue != null) {
List<DefaultPooledObjectInfo> list = new ArrayList<DefaultPooledObjectInfo>();
result.put(key.toString(), list);
for (PooledObject<T> p : queue.getAllObjects().values()) {
list.add(new DefaultPooledObjectInfo(p));
}
}
}
return result;
}","public Map<String, List<DefaultPooledObjectInfo>> listAllObjects() {
Map<String, List<DefaultPooledObjectInfo>> MapVar1 = new HashMap<String, List<DefaultPooledObjectInfo>>();
for (K key : poolMap.keySet()) {
ObjectDeque<T> ObjectDequeVar2 = poolMap.get(key);
if (queue != null) {
List<DefaultPooledObjectInfo> ListVar3 = new ArrayList<DefaultPooledObjectInfo>();
result.put(key.toString(), list);
for (PooledObject<T> p : queue.getAllObjects().values()) {
list.add(new DefaultPooledObjectInfo(p));
}
}
}
return result;"
19419,PERFORMANCE,WMI_WRONG_MAP_ITERATOR,FP,pool,3284,"ObjectDeque<T> queue = poolMap.get(key);
","@Override
public Map<String, Integer> getNumWaitersByKey() {
Map<String, Integer> result = new HashMap<String, Integer>();
for (K key : poolMap.keySet()) {
ObjectDeque<T> queue = poolMap.get(key);
if (queue != null) {
if (getBlockWhenExhausted()) {
result.put(key.toString(), Integer.valueOf(queue.getIdleObjects().getTakeQueueLength()));
} else {
result.put(key.toString(), Integer.valueOf(0));
}
}
}
return result;
}","public Map<String, Integer> getNumWaitersByKey() {
Map<String, Integer> MapVar1 = new HashMap<String, Integer>();
for (K key : poolMap.keySet()) {
ObjectDeque<T> ObjectDequeVar2 = poolMap.get(key);
if (queue != null) {
if (getBlockWhenExhausted()) {
result.put(key.toString(), Integer.valueOf(queue.getIdleObjects().getTakeQueueLength()));
} else {
result.put(key.toString(), Integer.valueOf(0));
}
}
}
return result;"
19423,PERFORMANCE,WMI_WRONG_MAP_ITERATOR,FP,pool,3288,"ObjectDeque<T> queue = poolMap.get(k);
","public void clearOldest() {
final Map<PooledObject<T>, K> map = new TreeMap<PooledObject<T>, K>();
for (K k : poolMap.keySet()) {
ObjectDeque<T> queue = poolMap.get(k);
if (queue != null) {
final LinkedBlockingDeque<PooledObject<T>> idleObjects = queue.getIdleObjects();
for (PooledObject<T> p : idleObjects) {
map.put(p, k);
}
}
}
int itemsToRemove = ((int) (map.size() * 0.15)) + 1;
Iterator<Map.Entry<PooledObject<T>, K>> iter = map.entrySet().iterator();
while (iter.hasNext() && itemsToRemove > 0) {
Map.Entry<PooledObject<T>, K> entry = iter.next();
K key = entry.getValue();
PooledObject<T> p = entry.getKey();
boolean destroyed = true;
try {
destroyed = destroy(key, p, false);
} catch (Exception e) {
swallowException(e);
}
if (destroyed) {
itemsToRemove--;
}
}
}","final Map<PooledObject<T>, K> MapVar1 = new TreeMap<PooledObject<T>, K>();
for (K k : poolMap.keySet()) {
ObjectDeque<T> ObjectDequeVar2 = poolMap.get(k);
if (queue != null) {
final LinkedBlockingDeque<PooledObject<T>> LinkedBlockingDequeVar3 = queue.getIdleObjects();
for (PooledObject<T> p : idleObjects) {
map.put(p, k);
}
}
}
int intVar4 = ((int) (map.size() * 0.15)) + 1;
Iterator<Map.Entry<PooledObject<T>, K>> IteratorVar5 = map.entrySet().iterator();
while (iter.hasNext() && itemsToRemove > 0) {
Map.Entry<PooledObject<T>, K> Map.EntryVar6 = iter.next();
K KVar7 = entry.getValue();
PooledObject<T> PooledObjectVar8 = entry.getKey();
boolean booleanVar9 = booleanLiteral1;
try {
destroyed = destroy(key, p, false);
} catch (Exception e) {
swallowException(e);
}
if (destroyed) {
itemsToRemove--;
}
}"
