index,category,vtype,final_label,project,no,warning_line,warning_method,warning_abstract_method
11,MALICIOUS_CODE,MS_PKGPROTECT,FP,bcel,12,"@Deprecated
public static final String[] ITEM_NAMES = { ""Bogus"", ""Integer"", ""Float"", ""Double"", ""Long"", ""Null"", ""InitObject"", ""Object"", ""NewObject"" };","@Deprecated
public static final String[] ITEM_NAMES = { ""Bogus"", ""Integer"", ""Float"", ""Double"", ""Long"", ""Null"", ""InitObject"", ""Object"", ""NewObject"" };","@Deprecated
public static final String[] stringArrayVar1 = stringArrayLiteral2;"
17,MALICIOUS_CODE,MS_PKGPROTECT,TP,bcel,18,"@Deprecated
public static final String[] CONSTANT_NAMES = { """", ""CONSTANT_Utf8"", """", ""CONSTANT_Integer"", ""CONSTANT_Float"", ""CONSTANT_Long"", ""CONSTANT_Double"", ""CONSTANT_Class"", ""CONSTANT_String"", ""CONSTANT_Fieldref"", ""CONSTANT_Methodref"", ""CONSTANT_InterfaceMethodref"", ""CONSTANT_NameAndType"", """", """", ""CONSTANT_MethodHandle"", ""CONSTANT_MethodType"", """", ""CONSTANT_InvokeDynamic"" };","@Deprecated
public static final String[] CONSTANT_NAMES = { """", ""CONSTANT_Utf8"", """", ""CONSTANT_Integer"", ""CONSTANT_Float"", ""CONSTANT_Long"", ""CONSTANT_Double"", ""CONSTANT_Class"", ""CONSTANT_String"", ""CONSTANT_Fieldref"", ""CONSTANT_Methodref"", ""CONSTANT_InterfaceMethodref"", ""CONSTANT_NameAndType"", """", """", ""CONSTANT_MethodHandle"", ""CONSTANT_MethodType"", """", ""CONSTANT_InvokeDynamic"" };","@Deprecated
public static final String[] stringArrayVar1 = stringArrayLiteral2;"
21,MALICIOUS_CODE,MS_MUTABLE_ARRAY,FP,bcel,22,"@Deprecated
public static final String[] INTERFACES_IMPLEMENTED_BY_ARRAYS = { ""java.lang.Cloneable"", ""java.io.Serializable"" };","@Deprecated
public static final String[] INTERFACES_IMPLEMENTED_BY_ARRAYS = { ""java.lang.Cloneable"", ""java.io.Serializable"" };","@Deprecated
public static final String[] stringArrayVar1 = stringArrayLiteral2;"
27,MALICIOUS_CODE,MS_PKGPROTECT,TP,bcel,28,"@Deprecated
public static final String[] ITEM_NAMES = { ""Bogus"", ""Integer"", ""Float"", ""Double"", ""Long"", ""Null"", ""InitObject"", ""Object"", ""NewObject"" };","@Deprecated
public static final String[] ITEM_NAMES = { ""Bogus"", ""Integer"", ""Float"", ""Double"", ""Long"", ""Null"", ""InitObject"", ""Object"", ""NewObject"" };","@Deprecated
public static final String[] stringArrayVar1 = stringArrayLiteral2;"
32,BAD_PRACTICE,OS_OPEN_STREAM,FP,bcel,33,"zip = new ZipFile(zip_file);
","public JavaClass parse() throws IOException, ClassFormatException {
ZipFile zip = null;
try {
if (fileOwned) {
if (is_zip) {
zip = new ZipFile(zip_file);
ZipEntry entry = zip.getEntry(file_name);
if (entry == null) {
throw new IOException(""File "" + file_name + "" not found"");
}
dataInputStream = new DataInputStream(new BufferedInputStream(zip.getInputStream(entry), BUFSIZE));
} else {
dataInputStream = new DataInputStream(new BufferedInputStream(new FileInputStream(file_name), BUFSIZE));
}
}
readID();
readVersion();
readConstantPool();
readClassInfo();
readInterfaces();
readFields();
readMethods();
readAttributes();
// System.err.println(""WARNING: "" + u[i]);
// System.err.println(""WARNING: Trailing garbage at end of "" + file_name);
// System.err.println(bytes + "" extra bytes: "" + Utility.toHexString(buf));
} finally {
if (fileOwned) {
try {
if (dataInputStream != null) {
dataInputStream.close();
}
if (zip != null) {
zip.close();
}
} catch (IOException ioe) {
}
}
}
return new JavaClass(class_name_index, superclass_name_index, file_name, major, minor, access_flags, constant_pool, interfaces, fields, methods, attributes, is_zip ? JavaClass.ZIP : JavaClass.FILE);
}","public JavaClass parse() throws IOException, ClassFormatException {
ZipFile zipfileVar1 = zipfileLiteral2;
try {
if (fileOwned) {
if (is_zip) {
zipfileVar1 = new ZipFile(zip_file);
ZipEntry zipentryVar3 = zipentryLiteral4;
if (zipentryVar3 == null) {
throw new IOException(""File "" + file_name + "" not found"");
}
dataInputStream = new DataInputStream(new BufferedInputStream(zipfileVar1.getInputStream(zipentryVar3), BUFSIZE));
} else {
dataInputStream = new DataInputStream(new BufferedInputStream(new FileInputStream(file_name), BUFSIZE));
}
}
readID();
readVersion();
readConstantPool();
readClassInfo();
readInterfaces();
readFields();
readMethods();
readAttributes();
// System.err.println(""WARNING: "" + u[i]);
// System.err.println(""WARNING: Trailing garbage at end of "" + file_name);
// System.err.println(bytes + "" extra bytes: "" + Utility.toHexString(buf));
} finally {
if (fileOwned) {
try {
if (dataInputStream != null) {
dataInputStream.close();
}
if (zipfileVar1 != null) {
zipfileVar1.close();
}
} catch (IOException ioe) {
}
}
}
return new JavaClass(class_name_index, superclass_name_index, file_name, major, minor, access_flags, constant_pool, interfaces, fields, methods, attributes, is_zip ? JavaClass.ZIP : JavaClass.FILE);
}"
51,MALICIOUS_CODE,EI_EXPOSE_REP2,FP,bcel,52,"this.constant_pool = constant_pool;
","public ConstantPool(final Constant[] constant_pool) {
this.constant_pool = constant_pool;
}","public ConstantPool(final Constant[] constant_pool) {
this.constant_pool = constant_pool;
}"
65,MALICIOUS_CODE,EI_EXPOSE_REP,FP,bcel,66,"return local_variable_type_table;
","public final LocalVariable[] getLocalVariableTypeTable() {
return local_variable_type_table;
}","public final LocalVariable[] getLocalVariableTypeTable() {
return local_variable_type_table;
}"
66,MALICIOUS_CODE,EI_EXPOSE_REP2,FP,bcel,67,"this.local_variable_type_table = local_variable_table;
","public final void setLocalVariableTable(final LocalVariable[] local_variable_table) {
this.local_variable_type_table = local_variable_table;
}","public final void setLocalVariableTable(final LocalVariable[] local_variable_table) {
this.local_variable_type_table = local_variable_table;
}"
69,MALICIOUS_CODE,EI_EXPOSE_REP2,FP,bcel,70,"this.parameter_annotation_table = parameter_annotation_table;
","public final void setParameterAnnotationTable(final ParameterAnnotationEntry[] parameter_annotation_table) {
this.parameter_annotation_table = parameter_annotation_table;
}","public final void setParameterAnnotationTable(final ParameterAnnotationEntry[] parameter_annotation_table) {
this.parameter_annotation_table = parameter_annotation_table;
}"
96,MALICIOUS_CODE,MS_PKGPROTECT,FP,bcel,97,"@Deprecated
public static final String[] SHORT_TYPE_NAMES = { ILLEGAL_TYPE, ILLEGAL_TYPE, ILLEGAL_TYPE, ILLEGAL_TYPE, ""Z"", ""C"", ""F"", ""D"", ""B"", ""S"", ""I"", ""J"", ""V"", ILLEGAL_TYPE, ILLEGAL_TYPE, ILLEGAL_TYPE };","@Deprecated
public static final String[] SHORT_TYPE_NAMES = { ILLEGAL_TYPE, ILLEGAL_TYPE, ILLEGAL_TYPE, ILLEGAL_TYPE, ""Z"", ""C"", ""F"", ""D"", ""B"", ""S"", ""I"", ""J"", ""V"", ILLEGAL_TYPE, ILLEGAL_TYPE, ILLEGAL_TYPE };","@Deprecated
public static final String[] stringArrayVar1 = stringArrayLiteral2;"
308,MALICIOUS_CODE,EI_EXPOSE_REP2,FP,bcel,309,"this.bootstrap_arguments = bootstrap_arguments;
","public void setBootstrapArguments(int[] bootstrap_arguments) {
this.bootstrap_arguments = bootstrap_arguments;
}","public void setBootstrapArguments(int[] bootstrap_arguments) {
this.bootstrap_arguments = bootstrap_arguments;
}"
318,PERFORMANCE,DM_FP_NUMBER_CTOR,FP,bcel,319,"return new Float(bytes);
","@Override
public Object getConstantValue(ConstantPool cp) {
return new Float(bytes);
}","@Override
public Object getConstantValue(ConstantPool cp) {
return new Float(bytes);
}"
340,MALICIOUS_CODE,EI_EXPOSE_REP,FP,bcel,341,"return annotationEntries;
","public AnnotationEntry[] getAnnotationEntries() {
if (annotationEntries == null) {
annotationEntries = AnnotationEntry.createAnnotationEntries(getAttributes());
}
return annotationEntries;
}","public AnnotationEntry[] getAnnotationEntries() {
if (annotationEntries == null) {
annotationEntries = AnnotationEntry.createAnnotationEntries(getAttributes());
}
return annotationEntries;
}"
366,MALICIOUS_CODE,EI_EXPOSE_REP,FP,bcel,367,"return parameterAnnotationEntries;
","public ParameterAnnotationEntry[] getParameterAnnotationEntries() {
if (parameterAnnotationEntries == null) {
parameterAnnotationEntries = ParameterAnnotationEntry.createParameterAnnotationEntries(getAttributes());
}
return parameterAnnotationEntries;
}","public ParameterAnnotationEntry[] getParameterAnnotationEntries() {
if (parameterAnnotationEntries == null) {
parameterAnnotationEntries = ParameterAnnotationEntry.createParameterAnnotationEntries(getAttributes());
}
return parameterAnnotationEntries;
}"
376,DODGY_CODE,DLS_DEAD_LOCAL_STORE,FP,bcel,377,"ch = in.read();
","private static void matchIdent(MyByteArrayInputStream in, StringBuilder buf) {
int ch;
if ((ch = in.read()) == -1) {
throw new RuntimeException(""Illegal signature: "" + in.getData() + "" no ident, reaching EOF"");
}
// System.out.println(""return from ident:"" + (char)ch);
if (!identStart(ch)) {
StringBuilder buf2 = new StringBuilder();
int count = 1;
while (Character.isJavaIdentifierPart((char) ch)) {
buf2.append((char) ch);
count++;
ch = in.read();
}
if (ch == ':') {
in.skip(""Ljava/lang/Object"".length());
buf.append(buf2);
ch = in.read();
in.unread();
// System.out.println(""so far:"" + buf2 + "":next:"" +(char)ch);
} else {
for (int i = 0; i < count; i++) {
in.unread();
}
}
return;
}
StringBuilder buf2 = new StringBuilder();
ch = in.read();
do {
buf2.append((char) ch);
ch = in.read();
// System.out.println(""within ident:""+ (char)ch);
} while ((ch != -1) && (Character.isJavaIdentifierPart((char) ch) || (ch == '/')));
buf.append(buf2.toString().replace('/', '.'));
// System.out.println(""regular return ident:""+ (char)ch + "":"" + buf2);
if (ch != -1) {
in.unread();
}
}","private static void matchIdent(MyByteArrayInputStream in, StringBuilder buf) {
int intVar1;
if ((intVar1 = in.read()) == -1) {
throw new RuntimeException(""Illegal signature: "" + in.getData() + "" no ident, reaching EOF"");
}
// System.out.println(""return from ident:"" + (char)ch);
if (!identStart(intVar1)) {
StringBuilder stringbuilderVar2 = stringbuilderLiteral3;
int intVar4 = intLiteral5;
while (Character.isJavaIdentifierPart((char) intVar1)) {
stringbuilderVar2.append((char) intVar1);
intVar4++;
intVar1 = in.read();
}
if (intVar1 == ':') {
in.skip(""Ljava/lang/Object"".length());
buf.append(stringbuilderVar2);
intVar1 = in.read();
in.unread();
// System.out.println(""so far:"" + buf2 + "":next:"" +(char)ch);
} else {
for (int intVar8 = intLiteral9; intVar6 < intLiteral1; intVar6++) {
in.unread();
}
}
return;
}
StringBuilder stringbuilderVar2 = stringbuilderLiteral3;
intVar1 = in.read();
do {
stringbuilderVar2.append((char) intVar1);
intVar1 = in.read();
// System.out.println(""within ident:""+ (char)ch);
} while ((intVar1 != -1) && (Character.isJavaIdentifierPart((char) intVar1) || (intVar1 == '/')));
buf.append(stringbuilderVar2.toString().replace('/', '.'));
// System.out.println(""regular return ident:""+ (char)ch + "":"" + buf2);
if (intVar1 != -1) {
in.unread();
}
}"
421,PERFORMANCE,DM_FP_NUMBER_CTOR,FP,bcel,422,"return new Float(((org.apache.commons.bcel6.classfile.ConstantFloat) c).getBytes());
","public Object getValue(ConstantPoolGen cpg) {
org.apache.commons.bcel6.classfile.Constant c = cpg.getConstantPool().getConstant(super.getIndex());
switch(c.getTag()) {
case org.apache.commons.bcel6.Const.CONSTANT_String:
int i = ((org.apache.commons.bcel6.classfile.ConstantString) c).getStringIndex();
c = cpg.getConstantPool().getConstant(i);
return ((org.apache.commons.bcel6.classfile.ConstantUtf8) c).getBytes();
case org.apache.commons.bcel6.Const.CONSTANT_Float:
return new Float(((org.apache.commons.bcel6.classfile.ConstantFloat) c).getBytes());
case org.apache.commons.bcel6.Const.CONSTANT_Integer:
return Integer.valueOf(((org.apache.commons.bcel6.classfile.ConstantInteger) c).getBytes());
case org.apache.commons.bcel6.Const.CONSTANT_Class:
int nameIndex = ((org.apache.commons.bcel6.classfile.ConstantClass) c).getNameIndex();
c = cpg.getConstantPool().getConstant(nameIndex);
return new ObjectType(((org.apache.commons.bcel6.classfile.ConstantUtf8) c).getBytes());
default:
// Never reached
throw new RuntimeException(""Unknown or invalid constant type at "" + super.getIndex());
}
}","public Object getValue(ConstantPoolGen cpg) {
org.apache.commons.bcel6.classfile.Constant org.apache.commons.bcel6.classfile.constantVar1 = org.apache.commons.bcel6.classfile.constantLiteral2;
switch(org.apache.commons.bcel6.classfile.constantVar1.getTag()) {
case org.apache.commons.bcel6.Const.CONSTANT_String:
int intVar3 = intLiteral4;
org.apache.commons.bcel6.classfile.constantVar1 = cpg.getConstantPool().getConstant(intVar3);
return ((org.apache.commons.bcel6.classfile.ConstantUtf8) org.apache.commons.bcel6.classfile.constantVar1).getBytes();
case org.apache.commons.bcel6.Const.CONSTANT_Float:
return new Float(((org.apache.commons.bcel6.classfile.ConstantFloat) org.apache.commons.bcel6.classfile.constantVar1).getBytes());
case org.apache.commons.bcel6.Const.CONSTANT_Integer:
return Integer.valueOf(((org.apache.commons.bcel6.classfile.ConstantInteger) org.apache.commons.bcel6.classfile.constantVar1).getBytes());
case org.apache.commons.bcel6.Const.CONSTANT_Class:
int intVar5 = intLiteral6;
org.apache.commons.bcel6.classfile.constantVar1 = cpg.getConstantPool().getConstant(intVar5);
return new ObjectType(((org.apache.commons.bcel6.classfile.ConstantUtf8) org.apache.commons.bcel6.classfile.constantVar1).getBytes());
default:
// Never reached
throw new RuntimeException(""Unknown or invalid constant type at "" + super.getIndex());
}
}"
434,DODGY_CODE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,FP,bcel,435,"BranchHandle bh = (BranchHandle) branch_map.get(bi);
","private void updateBranchTargets() {
for (BranchInstruction bi : branches) {
BranchHandle bh = (BranchHandle) branch_map.get(bi);
int pos = bh.getPosition();
String name = bi.getName() + ""_"" + pos;
int t_pos = bh.getTarget().getPosition();
_out.println(""    "" + name + "".setTarget(ih_"" + t_pos + "");"");
if (bi instanceof Select) {
InstructionHandle[] ihs = ((Select) bi).getTargets();
for (int j = 0; j < ihs.length; j++) {
t_pos = ihs[j].getPosition();
_out.println(""    "" + name + "".setTarget("" + j + "", ih_"" + t_pos + "");"");
}
}
}
}","private void updateBranchTargets() {
for (BranchInstruction branchinstructionVar1 : branches) {
BranchHandle branchhandleVar2 = branchhandleLiteral3;
int intVar4 = intLiteral5;
String stringVar6 = stringLiteral7;
int intVar8 = intLiteral9;
_out.println(""    "" + stringVar6 + "".setTarget(ih_"" + intVar8 + "");"");
if (branchinstructionVar1 instanceof Select) {
InstructionHandle[] instructionhandleArrayVar10 = instructionhandleArrayLiteral11;
for (int intVar14 = intLiteral15; intVar12 < intLiteral1; intVar12++) {
intVar8 = instructionhandleArrayVar10[intVar12].getPosition();
_out.println(""    "" + stringVar6 + "".setTarget("" + intVar12 + "", ih_"" + intVar8 + "");"");
}
}
}
}"
457,DODGY_CODE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,FP,bcel,458,"contentPane = (JPanel) this.getContentPane();
","private void jbInit() throws Exception {
contentPane = (JPanel) this.getContentPane();
contentPane.setLayout(cardLayout1);
this.setJMenuBar(jMenuBar1);
this.setSize(new Dimension(708, 451));
this.setTitle(""JustIce"");
jPanel1.setMinimumSize(new Dimension(100, 100));
jPanel1.setPreferredSize(new Dimension(100, 100));
jPanel1.setLayout(gridLayout1);
jSplitPane2.setOrientation(JSplitPane.VERTICAL_SPLIT);
jPanel2.setLayout(gridLayout2);
jPanel3.setMinimumSize(new Dimension(200, 100));
jPanel3.setPreferredSize(new Dimension(400, 400));
jPanel3.setLayout(gridLayout4);
messagesPanel.setMinimumSize(new Dimension(100, 100));
messagesPanel.setLayout(gridLayout3);
jPanel2.setMinimumSize(new Dimension(200, 100));
jMenu1.setText(""File"");
jScrollPane1.getViewport().setBackground(Color.red);
messagesScrollPane.getViewport().setBackground(Color.red);
messagesScrollPane.setPreferredSize(new Dimension(10, 10));
classNamesJList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
@Override
public void valueChanged(ListSelectionEvent e) {
classNamesJList_valueChanged(e);
}
});
classNamesJList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
jScrollPane3.setBorder(BorderFactory.createLineBorder(Color.black));
jScrollPane3.setPreferredSize(new Dimension(100, 100));
gridLayout4.setRows(4);
gridLayout4.setColumns(1);
gridLayout4.setHgap(1);
jScrollPane4.setBorder(BorderFactory.createLineBorder(Color.black));
jScrollPane4.setPreferredSize(new Dimension(100, 100));
pass1TextPane.setBorder(BorderFactory.createRaisedBevelBorder());
pass1TextPane.setToolTipText("""");
pass1TextPane.setEditable(false);
pass2TextPane.setBorder(BorderFactory.createRaisedBevelBorder());
pass2TextPane.setEditable(false);
messagesTextPane.setBorder(BorderFactory.createRaisedBevelBorder());
messagesTextPane.setEditable(false);
newFileMenuItem.setText(""New..."");
newFileMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(78, InputEvent.CTRL_MASK, true));
newFileMenuItem.addActionListener(new java.awt.event.ActionListener() {
@Override
public void actionPerformed(ActionEvent e) {
newFileMenuItem_actionPerformed(e);
}
});
pass3aTextPane.setEditable(false);
pass3bTextPane.setEditable(false);
pass3aJList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
@Override
public void valueChanged(ListSelectionEvent e) {
pass3aJList_valueChanged(e);
}
});
pass3bJList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
@Override
public void valueChanged(ListSelectionEvent e) {
pass3bJList_valueChanged(e);
}
});
jMenu2.setText(""Help"");
whatisMenuItem.setText(""What is..."");
whatisMenuItem.addActionListener(new java.awt.event.ActionListener() {
@Override
public void actionPerformed(ActionEvent e) {
whatisMenuItem_actionPerformed(e);
}
});
aboutMenuItem.setText(""About"");
aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
@Override
public void actionPerformed(ActionEvent e) {
aboutMenuItem_actionPerformed(e);
}
});
jSplitPane2.add(messagesPanel, JSplitPane.BOTTOM);
messagesPanel.add(messagesScrollPane, null);
messagesScrollPane.getViewport().add(messagesTextPane, null);
jSplitPane2.add(jPanel3, JSplitPane.TOP);
jPanel3.add(jScrollPane3, null);
jScrollPane3.getViewport().add(pass1TextPane, null);
jPanel3.add(jScrollPane4, null);
jPanel3.add(jSplitPane3, null);
jSplitPane3.add(jScrollPane2, JSplitPane.LEFT);
jScrollPane2.getViewport().add(pass3aJList, null);
jSplitPane3.add(jScrollPane5, JSplitPane.RIGHT);
jScrollPane5.getViewport().add(pass3aTextPane, null);
jPanel3.add(jSplitPane4, null);
jSplitPane4.add(jScrollPane6, JSplitPane.LEFT);
jScrollPane6.getViewport().add(pass3bJList, null);
jSplitPane4.add(jScrollPane7, JSplitPane.RIGHT);
jScrollPane7.getViewport().add(pass3bTextPane, null);
jScrollPane4.getViewport().add(pass2TextPane, null);
jSplitPane1.add(jPanel2, JSplitPane.TOP);
jPanel2.add(jScrollPane1, null);
jSplitPane1.add(jPanel1, JSplitPane.BOTTOM);
jPanel1.add(jSplitPane2, null);
jScrollPane1.getViewport().add(classNamesJList, null);
jMenuBar1.add(jMenu1);
jMenuBar1.add(jMenu2);
contentPane.add(jSplitPane1, ""jSplitPane1"");
jMenu1.add(newFileMenuItem);
jMenu2.add(whatisMenuItem);
jMenu2.add(aboutMenuItem);
jSplitPane2.setDividerLocation(300);
jSplitPane3.setDividerLocation(150);
jSplitPane4.setDividerLocation(150);
}","private void jbInit() throws Exception {
contentPane = (JPanel) this.getContentPane();
contentPane.setLayout(cardLayout1);
this.setJMenuBar(jMenuBar1);
this.setSize(new Dimension(708, 451));
this.setTitle(""JustIce"");
jPanel1.setMinimumSize(new Dimension(100, 100));
jPanel1.setPreferredSize(new Dimension(100, 100));
jPanel1.setLayout(gridLayout1);
jSplitPane2.setOrientation(JSplitPane.VERTICAL_SPLIT);
jPanel2.setLayout(gridLayout2);
jPanel3.setMinimumSize(new Dimension(200, 100));
jPanel3.setPreferredSize(new Dimension(400, 400));
jPanel3.setLayout(gridLayout4);
messagesPanel.setMinimumSize(new Dimension(100, 100));
messagesPanel.setLayout(gridLayout3);
jPanel2.setMinimumSize(new Dimension(200, 100));
jMenu1.setText(""File"");
jScrollPane1.getViewport().setBackground(Color.red);
messagesScrollPane.getViewport().setBackground(Color.red);
messagesScrollPane.setPreferredSize(new Dimension(10, 10));
classNamesJList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
@Override
public void valueChanged(ListSelectionEvent e) {
classNamesJList_valueChanged(e);
}
});
classNamesJList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
jScrollPane3.setBorder(BorderFactory.createLineBorder(Color.black));
jScrollPane3.setPreferredSize(new Dimension(100, 100));
gridLayout4.setRows(4);
gridLayout4.setColumns(1);
gridLayout4.setHgap(1);
jScrollPane4.setBorder(BorderFactory.createLineBorder(Color.black));
jScrollPane4.setPreferredSize(new Dimension(100, 100));
pass1TextPane.setBorder(BorderFactory.createRaisedBevelBorder());
pass1TextPane.setToolTipText("""");
pass1TextPane.setEditable(false);
pass2TextPane.setBorder(BorderFactory.createRaisedBevelBorder());
pass2TextPane.setEditable(false);
messagesTextPane.setBorder(BorderFactory.createRaisedBevelBorder());
messagesTextPane.setEditable(false);
newFileMenuItem.setText(""New..."");
newFileMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(78, InputEvent.CTRL_MASK, true));
newFileMenuItem.addActionListener(new java.awt.event.ActionListener() {
@Override
public void actionPerformed(ActionEvent e) {
newFileMenuItem_actionPerformed(e);
}
});
pass3aTextPane.setEditable(false);
pass3bTextPane.setEditable(false);
pass3aJList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
@Override
public void valueChanged(ListSelectionEvent e) {
pass3aJList_valueChanged(e);
}
});
pass3bJList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
@Override
public void valueChanged(ListSelectionEvent e) {
pass3bJList_valueChanged(e);
}
});
jMenu2.setText(""Help"");
whatisMenuItem.setText(""What is..."");
whatisMenuItem.addActionListener(new java.awt.event.ActionListener() {
@Override
public void actionPerformed(ActionEvent e) {
whatisMenuItem_actionPerformed(e);
}
});
aboutMenuItem.setText(""About"");
aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
@Override
public void actionPerformed(ActionEvent e) {
aboutMenuItem_actionPerformed(e);
}
});
jSplitPane2.add(messagesPanel, JSplitPane.BOTTOM);
messagesPanel.add(messagesScrollPane, null);
messagesScrollPane.getViewport().add(messagesTextPane, null);
jSplitPane2.add(jPanel3, JSplitPane.TOP);
jPanel3.add(jScrollPane3, null);
jScrollPane3.getViewport().add(pass1TextPane, null);
jPanel3.add(jScrollPane4, null);
jPanel3.add(jSplitPane3, null);
jSplitPane3.add(jScrollPane2, JSplitPane.LEFT);
jScrollPane2.getViewport().add(pass3aJList, null);
jSplitPane3.add(jScrollPane5, JSplitPane.RIGHT);
jScrollPane5.getViewport().add(pass3aTextPane, null);
jPanel3.add(jSplitPane4, null);
jSplitPane4.add(jScrollPane6, JSplitPane.LEFT);
jScrollPane6.getViewport().add(pass3bJList, null);
jSplitPane4.add(jScrollPane7, JSplitPane.RIGHT);
jScrollPane7.getViewport().add(pass3bTextPane, null);
jScrollPane4.getViewport().add(pass2TextPane, null);
jSplitPane1.add(jPanel2, JSplitPane.TOP);
jPanel2.add(jScrollPane1, null);
jSplitPane1.add(jPanel1, JSplitPane.BOTTOM);
jPanel1.add(jSplitPane2, null);
jScrollPane1.getViewport().add(classNamesJList, null);
jMenuBar1.add(jMenu1);
jMenuBar1.add(jMenu2);
contentPane.add(jSplitPane1, ""jSplitPane1"");
jMenu1.add(newFileMenuItem);
jMenu2.add(whatisMenuItem);
jMenu2.add(aboutMenuItem);
jSplitPane2.setDividerLocation(300);
jSplitPane3.setDividerLocation(150);
jSplitPane4.setDividerLocation(150);
}"
461,DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,bcel,462,"if (method_nr < 0 || method_nr >= localVariablesInfos.length){
","public LocalVariablesInfo getLocalVariablesInfo(int method_nr) {
if (this.verify() != VerificationResult.VR_OK) {
return null;
}
if (method_nr < 0 || method_nr >= localVariablesInfos.length) {
throw new AssertionViolatedException(""Method number out of range."");
}
return localVariablesInfos[method_nr];
}","public LocalVariablesInfo getLocalVariablesInfo(int method_nr) {
if (this.verify() != VerificationResult.VR_OK) {
return null;
}
if (method_nr < 0 || method_nr >= localVariablesInfos.length) {
throw new AssertionViolatedException(""Method number out of range."");
}
return localVariablesInfos[method_nr];
}"
474,MALICIOUS_CODE,MS_OOI_PKGPROTECT,FP,bcel,475,"// TODO: mutable public array!!
String[] ATTRIBUTE_NAMES = { ""SourceFile"", ""ConstantValue"", ""Code"", ""Exceptions"", ""LineNumberTable"", ""LocalVariableTable"", ""InnerClasses"", ""Synthetic"", ""Deprecated"", ""PMGClass"", ""Signature"", ""StackMap"", ""RuntimeVisibleAnnotations"", ""RuntimeInvisibleAnnotations"", ""RuntimeVisibleParameterAnnotations"", ""RuntimeInvisibleParameterAnnotations"", ""AnnotationDefault"" };","// TODO: mutable public array!!
String[] ATTRIBUTE_NAMES = { ""SourceFile"", ""ConstantValue"", ""Code"", ""Exceptions"", ""LineNumberTable"", ""LocalVariableTable"", ""InnerClasses"", ""Synthetic"", ""Deprecated"", ""PMGClass"", ""Signature"", ""StackMap"", ""RuntimeVisibleAnnotations"", ""RuntimeInvisibleAnnotations"", ""RuntimeVisibleParameterAnnotations"", ""RuntimeInvisibleParameterAnnotations"", ""AnnotationDefault"" };","// TODO: mutable public array!!
String[] stringArrayVar1 = stringArrayLiteral2;"
479,MALICIOUS_CODE,MS_OOI_PKGPROTECT,FP,bcel,480,"int[] CONSUME_STACK = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 3, 4, 3, 4, 3, 3, 3, 3, 1, 2, 1, 2, 3, 2, 3, 4, 2, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 1, 2, 1, 2, 2, 3, 2, 3, 2, 3, 2, 4, 2, 4, 2, 4, 0, 1, 1, 1, 2, 2, 2, 1, 1, 1, 2, 2, 2, 1, 1, 1, 4, 2, 2, 4, 4, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 1, 1, 1, 2, 1, 2, 1, 0, 0, UNPREDICTABLE, 1, UNPREDICTABLE, UNPREDICTABLE, UNPREDICTABLE, UNPREDICTABLE, UNPREDICTABLE, UNPREDICTABLE, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, UNPREDICTABLE, 1, 1, 0, 0, 0, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNPREDICTABLE, UNPREDICTABLE };","int[] CONSUME_STACK = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 3, 4, 3, 4, 3, 3, 3, 3, 1, 2, 1, 2, 3, 2, 3, 4, 2, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 1, 2, 1, 2, 2, 3, 2, 3, 2, 3, 2, 4, 2, 4, 2, 4, 0, 1, 1, 1, 2, 2, 2, 1, 1, 1, 2, 2, 2, 1, 1, 1, 4, 2, 2, 4, 4, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 1, 1, 1, 2, 1, 2, 1, 0, 0, UNPREDICTABLE, 1, UNPREDICTABLE, UNPREDICTABLE, UNPREDICTABLE, UNPREDICTABLE, UNPREDICTABLE, UNPREDICTABLE, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, UNPREDICTABLE, 1, 1, 0, 0, 0, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNDEFINED, UNPREDICTABLE, UNPREDICTABLE };",int[] intArrayVar1 = intArrayLiteral2;
484,MALICIOUS_CODE,EI_EXPOSE_REP,FP,bcel,485,"return annotationTable;
","public AnnotationEntry[] getAnnotationEntries() {
return annotationTable;
}","public AnnotationEntry[] getAnnotationEntries() {
return annotationTable;
}"
492,MALICIOUS_CODE,EI_EXPOSE_REP,FP,bcel,493,"return bootstrapMethods;
","public final BootstrapMethod[] getBootstrapMethods() {
return bootstrapMethods;
}","public final BootstrapMethod[] getBootstrapMethods() {
return bootstrapMethods;
}"
496,MALICIOUS_CODE,EI_EXPOSE_REP,FP,bcel,497,"return code;
","public byte[] getCode() {
return code;
}","public byte[] getCode() {
return code;
}"
503,MALICIOUS_CODE,EI_EXPOSE_REP,FP,bcel,504,"return constantPool;
","public Constant[] getConstantPool() {
return constantPool;
}","public Constant[] getConstantPool() {
return constantPool;
}"
506,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,bcel,507,"str = String.valueOf(((ConstantLong) c).getBytes());
","public String constantToString(Constant c) throws ClassFormatException {
String str;
int i;
final byte tag = c.getTag();
switch(tag) {
case Const.CONSTANT_Class:
i = ((ConstantClass) c).getNameIndex();
c = getConstant(i, Const.CONSTANT_Utf8);
str = Utility.compactClassName(((ConstantUtf8) c).getBytes(), false);
break;
case Const.CONSTANT_String:
i = ((ConstantString) c).getStringIndex();
c = getConstant(i, Const.CONSTANT_Utf8);
str = ""\"""" + escape(((ConstantUtf8) c).getBytes()) + ""\"""";
break;
case Const.CONSTANT_Utf8:
str = ((ConstantUtf8) c).getBytes();
break;
case Const.CONSTANT_Double:
str = String.valueOf(((ConstantDouble) c).getBytes());
break;
case Const.CONSTANT_Float:
str = String.valueOf(((ConstantFloat) c).getBytes());
break;
case Const.CONSTANT_Long:
str = String.valueOf(((ConstantLong) c).getBytes());
break;
case Const.CONSTANT_Integer:
str = String.valueOf(((ConstantInteger) c).getBytes());
break;
case Const.CONSTANT_NameAndType:
str = constantToString(((ConstantNameAndType) c).getNameIndex(), Const.CONSTANT_Utf8) + "" "" + constantToString(((ConstantNameAndType) c).getSignatureIndex(), Const.CONSTANT_Utf8);
break;
case Const.CONSTANT_InterfaceMethodref:
case Const.CONSTANT_Methodref:
case Const.CONSTANT_Fieldref:
str = constantToString(((ConstantCP) c).getClassIndex(), Const.CONSTANT_Class) + ""."" + constantToString(((ConstantCP) c).getNameAndTypeIndex(), Const.CONSTANT_NameAndType);
break;
case Const.CONSTANT_MethodHandle:
final ConstantMethodHandle cmh = (ConstantMethodHandle) c;
str = Const.getMethodHandleName(cmh.getReferenceKind()) + "" "" + constantToString(cmh.getReferenceIndex(), getConstant(cmh.getReferenceIndex()).getTag());
break;
case Const.CONSTANT_MethodType:
final ConstantMethodType cmt = (ConstantMethodType) c;
str = constantToString(cmt.getDescriptorIndex(), Const.CONSTANT_Utf8);
break;
case Const.CONSTANT_InvokeDynamic:
final ConstantInvokeDynamic cid = (ConstantInvokeDynamic) c;
str = cid.getBootstrapMethodAttrIndex() + "":"" + constantToString(cid.getNameAndTypeIndex(), Const.CONSTANT_NameAndType);
break;
case Const.CONSTANT_Module:
i = ((ConstantModule) c).getNameIndex();
c = getConstant(i, Const.CONSTANT_Utf8);
str = Utility.compactClassName(((ConstantUtf8) c).getBytes(), false);
break;
case Const.CONSTANT_Package:
i = ((ConstantPackage) c).getNameIndex();
c = getConstant(i, Const.CONSTANT_Utf8);
str = Utility.compactClassName(((ConstantUtf8) c).getBytes(), false);
break;
default:
// Never reached
throw new IllegalArgumentException(""Unknown constant type "" + tag);
}
return str;
}","public String constantToString(Constant c) throws ClassFormatException {
String stringVar1;
int intVar2;
final byte byteVar3 = byteLiteral4;
switch(byteVar3) {
case Const.CONSTANT_Class:
intVar2 = ((ConstantClass) c).getNameIndex();
c = getConstant(intVar2, Const.CONSTANT_Utf8);
stringVar1 = Utility.compactClassName(((ConstantUtf8) c).getBytes(), false);
break;
case Const.CONSTANT_String:
intVar2 = ((ConstantString) c).getStringIndex();
c = getConstant(intVar2, Const.CONSTANT_Utf8);
stringVar1 = ""\"""" + escape(((ConstantUtf8) c).getBytes()) + ""\"""";
break;
case Const.CONSTANT_Utf8:
stringVar1 = ((ConstantUtf8) c).getBytes();
break;
case Const.CONSTANT_Double:
stringVar1 = String.valueOf(((ConstantDouble) c).getBytes());
break;
case Const.CONSTANT_Float:
stringVar1 = String.valueOf(((ConstantFloat) c).getBytes());
break;
case Const.CONSTANT_Long:
stringVar1 = String.valueOf(((ConstantLong) c).getBytes());
break;
case Const.CONSTANT_Integer:
stringVar1 = String.valueOf(((ConstantInteger) c).getBytes());
break;
case Const.CONSTANT_NameAndType:
stringVar1 = constantToString(((ConstantNameAndType) c).getNameIndex(), Const.CONSTANT_Utf8) + "" "" + constantToString(((ConstantNameAndType) c).getSignatureIndex(), Const.CONSTANT_Utf8);
break;
case Const.CONSTANT_InterfaceMethodref:
case Const.CONSTANT_Methodref:
case Const.CONSTANT_Fieldref:
stringVar1 = constantToString(((ConstantCP) c).getClassIndex(), Const.CONSTANT_Class) + ""."" + constantToString(((ConstantCP) c).getNameAndTypeIndex(), Const.CONSTANT_NameAndType);
break;
case Const.CONSTANT_MethodHandle:
final ConstantMethodHandle constantmethodhandleVar5 = constantmethodhandleLiteral6;
stringVar1 = Const.getMethodHandleName(constantmethodhandleVar5.getReferenceKind()) + "" "" + constantToString(constantmethodhandleVar5.getReferenceIndex(), getConstant(constantmethodhandleVar5.getReferenceIndex()).getTag());
break;
case Const.CONSTANT_MethodType:
final ConstantMethodType constantmethodtypeVar7 = constantmethodtypeLiteral8;
stringVar1 = constantToString(constantmethodtypeVar7.getDescriptorIndex(), Const.CONSTANT_Utf8);
break;
case Const.CONSTANT_InvokeDynamic:
final ConstantInvokeDynamic constantinvokedynamicVar9 = constantinvokedynamicLiteral10;
stringVar1 = constantinvokedynamicVar9.getBootstrapMethodAttrIndex() + "":"" + constantToString(constantinvokedynamicVar9.getNameAndTypeIndex(), Const.CONSTANT_NameAndType);
break;
case Const.CONSTANT_Module:
intVar2 = ((ConstantModule) c).getNameIndex();
c = getConstant(intVar2, Const.CONSTANT_Utf8);
stringVar1 = Utility.compactClassName(((ConstantUtf8) c).getBytes(), false);
break;
case Const.CONSTANT_Package:
intVar2 = ((ConstantPackage) c).getNameIndex();
c = getConstant(intVar2, Const.CONSTANT_Utf8);
stringVar1 = Utility.compactClassName(((ConstantUtf8) c).getBytes(), false);
break;
default:
// Never reached
throw new IllegalArgumentException(""Unknown constant type "" + byteVar3);
}
return stringVar1;
}"
507,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,bcel,508,"i = ((ConstantClass) c).getNameIndex();
","public String constantToString(Constant c) throws ClassFormatException {
String str;
int i;
final byte tag = c.getTag();
switch(tag) {
case Const.CONSTANT_Class:
i = ((ConstantClass) c).getNameIndex();
c = getConstant(i, Const.CONSTANT_Utf8);
str = Utility.compactClassName(((ConstantUtf8) c).getBytes(), false);
break;
case Const.CONSTANT_String:
i = ((ConstantString) c).getStringIndex();
c = getConstant(i, Const.CONSTANT_Utf8);
str = ""\"""" + escape(((ConstantUtf8) c).getBytes()) + ""\"""";
break;
case Const.CONSTANT_Utf8:
str = ((ConstantUtf8) c).getBytes();
break;
case Const.CONSTANT_Double:
str = String.valueOf(((ConstantDouble) c).getBytes());
break;
case Const.CONSTANT_Float:
str = String.valueOf(((ConstantFloat) c).getBytes());
break;
case Const.CONSTANT_Long:
str = String.valueOf(((ConstantLong) c).getBytes());
break;
case Const.CONSTANT_Integer:
str = String.valueOf(((ConstantInteger) c).getBytes());
break;
case Const.CONSTANT_NameAndType:
str = constantToString(((ConstantNameAndType) c).getNameIndex(), Const.CONSTANT_Utf8) + "" "" + constantToString(((ConstantNameAndType) c).getSignatureIndex(), Const.CONSTANT_Utf8);
break;
case Const.CONSTANT_InterfaceMethodref:
case Const.CONSTANT_Methodref:
case Const.CONSTANT_Fieldref:
str = constantToString(((ConstantCP) c).getClassIndex(), Const.CONSTANT_Class) + ""."" + constantToString(((ConstantCP) c).getNameAndTypeIndex(), Const.CONSTANT_NameAndType);
break;
case Const.CONSTANT_MethodHandle:
final ConstantMethodHandle cmh = (ConstantMethodHandle) c;
str = Const.getMethodHandleName(cmh.getReferenceKind()) + "" "" + constantToString(cmh.getReferenceIndex(), getConstant(cmh.getReferenceIndex()).getTag());
break;
case Const.CONSTANT_MethodType:
final ConstantMethodType cmt = (ConstantMethodType) c;
str = constantToString(cmt.getDescriptorIndex(), Const.CONSTANT_Utf8);
break;
case Const.CONSTANT_InvokeDynamic:
final ConstantInvokeDynamic cid = (ConstantInvokeDynamic) c;
str = cid.getBootstrapMethodAttrIndex() + "":"" + constantToString(cid.getNameAndTypeIndex(), Const.CONSTANT_NameAndType);
break;
case Const.CONSTANT_Module:
i = ((ConstantModule) c).getNameIndex();
c = getConstant(i, Const.CONSTANT_Utf8);
str = Utility.compactClassName(((ConstantUtf8) c).getBytes(), false);
break;
case Const.CONSTANT_Package:
i = ((ConstantPackage) c).getNameIndex();
c = getConstant(i, Const.CONSTANT_Utf8);
str = Utility.compactClassName(((ConstantUtf8) c).getBytes(), false);
break;
default:
// Never reached
throw new IllegalArgumentException(""Unknown constant type "" + tag);
}
return str;
}","public String constantToString(Constant c) throws ClassFormatException {
String stringVar1;
int intVar2;
final byte byteVar3 = byteLiteral4;
switch(byteVar3) {
case Const.CONSTANT_Class:
intVar2 = ((ConstantClass) c).getNameIndex();
c = getConstant(intVar2, Const.CONSTANT_Utf8);
stringVar1 = Utility.compactClassName(((ConstantUtf8) c).getBytes(), false);
break;
case Const.CONSTANT_String:
intVar2 = ((ConstantString) c).getStringIndex();
c = getConstant(intVar2, Const.CONSTANT_Utf8);
stringVar1 = ""\"""" + escape(((ConstantUtf8) c).getBytes()) + ""\"""";
break;
case Const.CONSTANT_Utf8:
stringVar1 = ((ConstantUtf8) c).getBytes();
break;
case Const.CONSTANT_Double:
stringVar1 = String.valueOf(((ConstantDouble) c).getBytes());
break;
case Const.CONSTANT_Float:
stringVar1 = String.valueOf(((ConstantFloat) c).getBytes());
break;
case Const.CONSTANT_Long:
stringVar1 = String.valueOf(((ConstantLong) c).getBytes());
break;
case Const.CONSTANT_Integer:
stringVar1 = String.valueOf(((ConstantInteger) c).getBytes());
break;
case Const.CONSTANT_NameAndType:
stringVar1 = constantToString(((ConstantNameAndType) c).getNameIndex(), Const.CONSTANT_Utf8) + "" "" + constantToString(((ConstantNameAndType) c).getSignatureIndex(), Const.CONSTANT_Utf8);
break;
case Const.CONSTANT_InterfaceMethodref:
case Const.CONSTANT_Methodref:
case Const.CONSTANT_Fieldref:
stringVar1 = constantToString(((ConstantCP) c).getClassIndex(), Const.CONSTANT_Class) + ""."" + constantToString(((ConstantCP) c).getNameAndTypeIndex(), Const.CONSTANT_NameAndType);
break;
case Const.CONSTANT_MethodHandle:
final ConstantMethodHandle constantmethodhandleVar5 = constantmethodhandleLiteral6;
stringVar1 = Const.getMethodHandleName(constantmethodhandleVar5.getReferenceKind()) + "" "" + constantToString(constantmethodhandleVar5.getReferenceIndex(), getConstant(constantmethodhandleVar5.getReferenceIndex()).getTag());
break;
case Const.CONSTANT_MethodType:
final ConstantMethodType constantmethodtypeVar7 = constantmethodtypeLiteral8;
stringVar1 = constantToString(constantmethodtypeVar7.getDescriptorIndex(), Const.CONSTANT_Utf8);
break;
case Const.CONSTANT_InvokeDynamic:
final ConstantInvokeDynamic constantinvokedynamicVar9 = constantinvokedynamicLiteral10;
stringVar1 = constantinvokedynamicVar9.getBootstrapMethodAttrIndex() + "":"" + constantToString(constantinvokedynamicVar9.getNameAndTypeIndex(), Const.CONSTANT_NameAndType);
break;
case Const.CONSTANT_Module:
intVar2 = ((ConstantModule) c).getNameIndex();
c = getConstant(intVar2, Const.CONSTANT_Utf8);
stringVar1 = Utility.compactClassName(((ConstantUtf8) c).getBytes(), false);
break;
case Const.CONSTANT_Package:
intVar2 = ((ConstantPackage) c).getNameIndex();
c = getConstant(intVar2, Const.CONSTANT_Utf8);
stringVar1 = Utility.compactClassName(((ConstantUtf8) c).getBytes(), false);
break;
default:
// Never reached
throw new IllegalArgumentException(""Unknown constant type "" + byteVar3);
}
return stringVar1;
}"
517,DODGY_CODE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,FP,bcel,518,"created++;
","public ConstantUtf8(final String value) {
super(Const.CONSTANT_Utf8);
if (value == null) {
throw new IllegalArgumentException(""Value must not be null."");
}
this.value = value;
created++;
}","public ConstantUtf8(final String value) {
super(Const.CONSTANT_Utf8);
if (value == null) {
throw new IllegalArgumentException(""Value must not be null."");
}
this.value = value;
created++;
}"
527,MALICIOUS_CODE,EI_EXPOSE_REP,FP,bcel,528,"return annotations;
","public AnnotationEntry[] getAnnotationEntries() {
if (annotations == null) {
annotations = AnnotationEntry.createAnnotationEntries(getAttributes());
}
return annotations;
}","public AnnotationEntry[] getAnnotationEntries() {
if (annotations == null) {
annotations = AnnotationEntry.createAnnotationEntries(getAttributes());
}
return annotations;
}"
537,MALICIOUS_CODE,EI_EXPOSE_REP,FP,bcel,538,"return interfaceNames;
","public String[] getInterfaceNames() {
return interfaceNames;
}","public String[] getInterfaceNames() {
return interfaceNames;
}"
547,MALICIOUS_CODE,EI_EXPOSE_REP2,FP,bcel,548,"this.localVariableTypeTable = local_variable_table;
","public final void setLocalVariableTable(final LocalVariable[] local_variable_table) {
this.localVariableTypeTable = local_variable_table;
}","public final void setLocalVariableTable(final LocalVariable[] local_variable_table) {
this.localVariableTypeTable = local_variable_table;
}"
567,MALICIOUS_CODE,EI_EXPOSE_REP2,FP,bcel,568,"this.map = map;
","public StackMap(final int name_index, final int length, final StackMapEntry[] map, final ConstantPool constant_pool) {
super(Const.ATTR_STACK_MAP, name_index, length, constant_pool);
this.map = map;
}","public StackMap(final int name_index, final int length, final StackMapEntry[] map, final ConstantPool constant_pool) {
super(Const.ATTR_STACK_MAP, name_index, length, constant_pool);
this.map = map;
}"
580,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,bcel,581,"final ArrayType array = (ArrayType) type;
","public ArrayType(final Type type, final int dimensions) {
super(Const.T_ARRAY, ""<dummy>"");
if ((dimensions < 1) || (dimensions > Const.MAX_BYTE)) {
throw new ClassGenException(""Invalid number of dimensions: "" + dimensions);
}
switch(type.getType()) {
case Const.T_ARRAY:
final ArrayType array = (ArrayType) type;
this.dimensions = dimensions + array.dimensions;
basicType = array.basicType;
break;
case Const.T_VOID:
throw new ClassGenException(""Invalid type: void[]"");
default:
// Basic type or reference
this.dimensions = dimensions;
basicType = type;
break;
}
final StringBuilder buf = new StringBuilder();
for (int i = 0; i < this.dimensions; i++) {
buf.append('[');
}
buf.append(basicType.getSignature());
super.setSignature(buf.toString());
}","public ArrayType(final Type type, final int dimensions) {
super(Const.T_ARRAY, ""<dummy>"");
if ((dimensions < 1) || (dimensions > Const.MAX_BYTE)) {
throw new ClassGenException(""Invalid number of dimensions: "" + dimensions);
}
switch(type.getType()) {
case Const.T_ARRAY:
final ArrayType arraytypeVar1 = arraytypeLiteral2;
this.dimensions = dimensions + arraytypeVar1.dimensions;
basicType = arraytypeVar1.basicType;
break;
case Const.T_VOID:
throw new ClassGenException(""Invalid type: void[]"");
default:
// Basic type or reference
this.dimensions = dimensions;
basicType = type;
break;
}
final StringBuilder stringbuilderVar3 = stringbuilderLiteral4;
for (int intVar7 = intLiteral8; intVar5 < intLiteral1; intVar5++) {
stringbuilderVar3.append('[');
}
stringbuilderVar3.append(basicType.getSignature());
super.setSignature(stringbuilderVar3.toString());
}"
583,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,bcel,584,"return addFloat(((ConstantFloat) c).getBytes());
","public int addConstant(final Constant c, final ConstantPoolGen cp) {
final Constant[] constants = cp.getConstantPool().getConstantPool();
switch(c.getTag()) {
case Const.CONSTANT_String:
{
final ConstantString s = (ConstantString) c;
final ConstantUtf8 u8 = (ConstantUtf8) constants[s.getStringIndex()];
return addString(u8.getBytes());
}
case Const.CONSTANT_Class:
{
final ConstantClass s = (ConstantClass) c;
final ConstantUtf8 u8 = (ConstantUtf8) constants[s.getNameIndex()];
return addClass(u8.getBytes());
}
case Const.CONSTANT_NameAndType:
{
final ConstantNameAndType n = (ConstantNameAndType) c;
final ConstantUtf8 u8 = (ConstantUtf8) constants[n.getNameIndex()];
final ConstantUtf8 u8_2 = (ConstantUtf8) constants[n.getSignatureIndex()];
return addNameAndType(u8.getBytes(), u8_2.getBytes());
}
case Const.CONSTANT_Utf8:
return addUtf8(((ConstantUtf8) c).getBytes());
case Const.CONSTANT_Double:
return addDouble(((ConstantDouble) c).getBytes());
case Const.CONSTANT_Float:
return addFloat(((ConstantFloat) c).getBytes());
case Const.CONSTANT_Long:
return addLong(((ConstantLong) c).getBytes());
case Const.CONSTANT_Integer:
return addInteger(((ConstantInteger) c).getBytes());
case Const.CONSTANT_InterfaceMethodref:
case Const.CONSTANT_Methodref:
case Const.CONSTANT_Fieldref:
{
final ConstantCP m = (ConstantCP) c;
final ConstantClass clazz = (ConstantClass) constants[m.getClassIndex()];
final ConstantNameAndType n = (ConstantNameAndType) constants[m.getNameAndTypeIndex()];
ConstantUtf8 u8 = (ConstantUtf8) constants[clazz.getNameIndex()];
final String class_name = u8.getBytes().replace('/', '.');
u8 = (ConstantUtf8) constants[n.getNameIndex()];
final String name = u8.getBytes();
u8 = (ConstantUtf8) constants[n.getSignatureIndex()];
final String signature = u8.getBytes();
switch(c.getTag()) {
case Const.CONSTANT_InterfaceMethodref:
return addInterfaceMethodref(class_name, name, signature);
case Const.CONSTANT_Methodref:
return addMethodref(class_name, name, signature);
case Const.CONSTANT_Fieldref:
return addFieldref(class_name, name, signature);
default:
// Never reached
throw new IllegalArgumentException(""Unknown constant type "" + c);
}
}
default:
// Never reached
throw new IllegalArgumentException(""Unknown constant type "" + c);
}
}","public int addConstant(final Constant c, final ConstantPoolGen cp) {
final Constant[] constantArrayVar1 = constantArrayLiteral2;
switch(c.getTag()) {
case Const.CONSTANT_String:
{
final ConstantString constantstringVar3 = constantstringLiteral4;
final ConstantUtf8 constantutf8Var5 = constantutf8Literal6;
return addString(constantutf8Var5.getBytes());
}
case Const.CONSTANT_Class:
{
final ConstantClass constantstringVar3 = constantclassLiteral7;
final ConstantUtf8 constantutf8Var5 = constantutf8Literal8;
return addClass(constantutf8Var5.getBytes());
}
case Const.CONSTANT_NameAndType:
{
final ConstantNameAndType constantnameandtypeVar9 = constantnameandtypeLiteral10;
final ConstantUtf8 constantutf8Var5 = constantutf8Literal11;
final ConstantUtf8 constantutf8Var12 = constantutf8Literal13;
return addNameAndType(constantutf8Var5.getBytes(), constantutf8Var12.getBytes());
}
case Const.CONSTANT_Utf8:
return addUtf8(((ConstantUtf8) c).getBytes());
case Const.CONSTANT_Double:
return addDouble(((ConstantDouble) c).getBytes());
case Const.CONSTANT_Float:
return addFloat(((ConstantFloat) c).getBytes());
case Const.CONSTANT_Long:
return addLong(((ConstantLong) c).getBytes());
case Const.CONSTANT_Integer:
return addInteger(((ConstantInteger) c).getBytes());
case Const.CONSTANT_InterfaceMethodref:
case Const.CONSTANT_Methodref:
case Const.CONSTANT_Fieldref:
{
final ConstantCP constantcpVar14 = constantcpLiteral15;
final ConstantClass constantclassVar16 = constantclassLiteral17;
final ConstantNameAndType constantnameandtypeVar9 = constantnameandtypeLiteral18;
ConstantUtf8 constantutf8Var5 = constantutf8Literal19;
final String stringVar20 = stringLiteral21;
constantutf8Var5 = (ConstantUtf8) constantArrayVar1[constantnameandtypeVar9.getNameIndex()];
final String stringVar22 = stringLiteral23;
constantutf8Var5 = (ConstantUtf8) constantArrayVar1[constantnameandtypeVar9.getSignatureIndex()];
final String stringVar24 = stringLiteral23;
switch(c.getTag()) {
case Const.CONSTANT_InterfaceMethodref:
return addInterfaceMethodref(stringVar20, stringVar22, stringVar24);
case Const.CONSTANT_Methodref:
return addMethodref(stringVar20, stringVar22, stringVar24);
case Const.CONSTANT_Fieldref:
return addFieldref(stringVar20, stringVar22, stringVar24);
default:
// Never reached
throw new IllegalArgumentException(""Unknown constant type "" + c);
}
}
default:
// Never reached
throw new IllegalArgumentException(""Unknown constant type "" + c);
}
}"
588,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,bcel,589,"return addLong(((ConstantLong) c).getBytes());
","public int addConstant(final Constant c, final ConstantPoolGen cp) {
final Constant[] constants = cp.getConstantPool().getConstantPool();
switch(c.getTag()) {
case Const.CONSTANT_String:
{
final ConstantString s = (ConstantString) c;
final ConstantUtf8 u8 = (ConstantUtf8) constants[s.getStringIndex()];
return addString(u8.getBytes());
}
case Const.CONSTANT_Class:
{
final ConstantClass s = (ConstantClass) c;
final ConstantUtf8 u8 = (ConstantUtf8) constants[s.getNameIndex()];
return addClass(u8.getBytes());
}
case Const.CONSTANT_NameAndType:
{
final ConstantNameAndType n = (ConstantNameAndType) c;
final ConstantUtf8 u8 = (ConstantUtf8) constants[n.getNameIndex()];
final ConstantUtf8 u8_2 = (ConstantUtf8) constants[n.getSignatureIndex()];
return addNameAndType(u8.getBytes(), u8_2.getBytes());
}
case Const.CONSTANT_Utf8:
return addUtf8(((ConstantUtf8) c).getBytes());
case Const.CONSTANT_Double:
return addDouble(((ConstantDouble) c).getBytes());
case Const.CONSTANT_Float:
return addFloat(((ConstantFloat) c).getBytes());
case Const.CONSTANT_Long:
return addLong(((ConstantLong) c).getBytes());
case Const.CONSTANT_Integer:
return addInteger(((ConstantInteger) c).getBytes());
case Const.CONSTANT_InterfaceMethodref:
case Const.CONSTANT_Methodref:
case Const.CONSTANT_Fieldref:
{
final ConstantCP m = (ConstantCP) c;
final ConstantClass clazz = (ConstantClass) constants[m.getClassIndex()];
final ConstantNameAndType n = (ConstantNameAndType) constants[m.getNameAndTypeIndex()];
ConstantUtf8 u8 = (ConstantUtf8) constants[clazz.getNameIndex()];
final String class_name = u8.getBytes().replace('/', '.');
u8 = (ConstantUtf8) constants[n.getNameIndex()];
final String name = u8.getBytes();
u8 = (ConstantUtf8) constants[n.getSignatureIndex()];
final String signature = u8.getBytes();
switch(c.getTag()) {
case Const.CONSTANT_InterfaceMethodref:
return addInterfaceMethodref(class_name, name, signature);
case Const.CONSTANT_Methodref:
return addMethodref(class_name, name, signature);
case Const.CONSTANT_Fieldref:
return addFieldref(class_name, name, signature);
default:
// Never reached
throw new IllegalArgumentException(""Unknown constant type "" + c);
}
}
default:
// Never reached
throw new IllegalArgumentException(""Unknown constant type "" + c);
}
}","public int addConstant(final Constant c, final ConstantPoolGen cp) {
final Constant[] constantArrayVar1 = constantArrayLiteral2;
switch(c.getTag()) {
case Const.CONSTANT_String:
{
final ConstantString constantstringVar3 = constantstringLiteral4;
final ConstantUtf8 constantutf8Var5 = constantutf8Literal6;
return addString(constantutf8Var5.getBytes());
}
case Const.CONSTANT_Class:
{
final ConstantClass constantstringVar3 = constantclassLiteral7;
final ConstantUtf8 constantutf8Var5 = constantutf8Literal8;
return addClass(constantutf8Var5.getBytes());
}
case Const.CONSTANT_NameAndType:
{
final ConstantNameAndType constantnameandtypeVar9 = constantnameandtypeLiteral10;
final ConstantUtf8 constantutf8Var5 = constantutf8Literal11;
final ConstantUtf8 constantutf8Var12 = constantutf8Literal13;
return addNameAndType(constantutf8Var5.getBytes(), constantutf8Var12.getBytes());
}
case Const.CONSTANT_Utf8:
return addUtf8(((ConstantUtf8) c).getBytes());
case Const.CONSTANT_Double:
return addDouble(((ConstantDouble) c).getBytes());
case Const.CONSTANT_Float:
return addFloat(((ConstantFloat) c).getBytes());
case Const.CONSTANT_Long:
return addLong(((ConstantLong) c).getBytes());
case Const.CONSTANT_Integer:
return addInteger(((ConstantInteger) c).getBytes());
case Const.CONSTANT_InterfaceMethodref:
case Const.CONSTANT_Methodref:
case Const.CONSTANT_Fieldref:
{
final ConstantCP constantcpVar14 = constantcpLiteral15;
final ConstantClass constantclassVar16 = constantclassLiteral17;
final ConstantNameAndType constantnameandtypeVar9 = constantnameandtypeLiteral18;
ConstantUtf8 constantutf8Var5 = constantutf8Literal19;
final String stringVar20 = stringLiteral21;
constantutf8Var5 = (ConstantUtf8) constantArrayVar1[constantnameandtypeVar9.getNameIndex()];
final String stringVar22 = stringLiteral23;
constantutf8Var5 = (ConstantUtf8) constantArrayVar1[constantnameandtypeVar9.getSignatureIndex()];
final String stringVar24 = stringLiteral23;
switch(c.getTag()) {
case Const.CONSTANT_InterfaceMethodref:
return addInterfaceMethodref(stringVar20, stringVar22, stringVar24);
case Const.CONSTANT_Methodref:
return addMethodref(stringVar20, stringVar22, stringVar24);
case Const.CONSTANT_Fieldref:
return addFieldref(stringVar20, stringVar22, stringVar24);
default:
// Never reached
throw new IllegalArgumentException(""Unknown constant type "" + c);
}
}
default:
// Never reached
throw new IllegalArgumentException(""Unknown constant type "" + c);
}
}"
591,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,bcel,592,"return new SimpleElementValueGen((SimpleElementValue) value, cpool,
","public static ElementValueGen copy(final ElementValue value, final ConstantPoolGen cpool, final boolean copyPoolEntries) {
switch(value.getElementValueType()) {
case 'B':
case 'C':
case 'D':
case 'F':
case 'I':
case 'J':
case 'S':
case 'Z':
case 's':
return new SimpleElementValueGen((SimpleElementValue) value, cpool, copyPoolEntries);
case 'e':
return new EnumElementValueGen((EnumElementValue) value, cpool, copyPoolEntries);
case '@':
return new AnnotationElementValueGen((AnnotationElementValue) value, cpool, copyPoolEntries);
case '[':
return new ArrayElementValueGen((ArrayElementValue) value, cpool, copyPoolEntries);
case 'c':
return new ClassElementValueGen((ClassElementValue) value, cpool, copyPoolEntries);
default:
throw new UnsupportedOperationException(""Not implemented yet! ("" + value.getElementValueType() + "")"");
}
}","public static ElementValueGen copy(final ElementValue value, final ConstantPoolGen cpool, final boolean copyPoolEntries) {
switch(value.getElementValueType()) {
case 'B':
case 'C':
case 'D':
case 'F':
case 'I':
case 'J':
case 'S':
case 'Z':
case 's':
return new SimpleElementValueGen((SimpleElementValue) value, cpool, copyPoolEntries);
case 'e':
return new EnumElementValueGen((EnumElementValue) value, cpool, copyPoolEntries);
case '@':
return new AnnotationElementValueGen((AnnotationElementValue) value, cpool, copyPoolEntries);
case '[':
return new ArrayElementValueGen((ArrayElementValue) value, cpool, copyPoolEntries);
case 'c':
return new ClassElementValueGen((ClassElementValue) value, cpool, copyPoolEntries);
default:
throw new UnsupportedOperationException(""Not implemented yet! ("" + value.getElementValueType() + "")"");
}
}"
615,I18N,DM_DEFAULT_ENCODING,FP,bcel,616,"file = new PrintWriter(new FileOutputStream(dir + class_name + ""_attributes.html""));
","AttributeHTML(final String dir, final String class_name, final ConstantPool constant_pool, final ConstantHTML constant_html) throws IOException {
this.class_name = class_name;
this.constant_pool = constant_pool;
this.constant_html = constant_html;
file = new PrintWriter(new FileOutputStream(dir + class_name + ""_attributes.html""));
file.println(""<HTML><BODY BGCOLOR=\""#C0C0C0\""><TABLE BORDER=0>"");
}","AttributeHTML(final String dir, final String class_name, final ConstantPool constant_pool, final ConstantHTML constant_html) throws IOException {
this.class_name = class_name;
this.constant_pool = constant_pool;
this.constant_html = constant_html;
file = new PrintWriter(new FileOutputStream(dir + class_name + ""_attributes.html""));
file.println(""<HTML><BODY BGCOLOR=\""#C0C0C0\""><TABLE BORDER=0>"");
}"
617,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,bcel,618,"type = ((NEWARRAY) i).getType();
","@Override
public void visitAllocationInstruction(final AllocationInstruction i) {
Type type;
if (i instanceof CPInstruction) {
type = ((CPInstruction) i).getType(_cp);
} else {
type = ((NEWARRAY) i).getType();
}
final short opcode = ((Instruction) i).getOpcode();
int dim = 1;
switch(opcode) {
case Const.NEW:
_out.println(""il.append(_factory.createNew(\"""" + ((ObjectType) type).getClassName() + ""\""));"");
break;
case Const.MULTIANEWARRAY:
dim = ((MULTIANEWARRAY) i).getDimensions();
case Const.ANEWARRAY:
case Const.NEWARRAY:
if (type instanceof ArrayType) {
type = ((ArrayType) type).getBasicType();
}
_out.println(""il.append(_factory.createNewArray("" + BCELifier.printType(type) + "", (short) "" + dim + ""));"");
break;
default:
throw new IllegalArgumentException(""Unhandled opcode: "" + opcode);
}
}","@Override
public void visitAllocationInstruction(final AllocationInstruction i) {
Type typeVar1;
if (i instanceof CPInstruction) {
typeVar1 = ((CPInstruction) i).getType(_cp);
} else {
typeVar1 = ((NEWARRAY) i).getType();
}
final short shortVar2 = shortLiteral3;
int intVar4 = intLiteral5;
switch(shortVar2) {
case Const.NEW:
_out.println(""il.append(_factory.createNew(\"""" + ((ObjectType) typeVar1).getClassName() + ""\""));"");
break;
case Const.MULTIANEWARRAY:
intVar4 = ((MULTIANEWARRAY) i).getDimensions();
case Const.ANEWARRAY:
case Const.NEWARRAY:
if (typeVar1 instanceof ArrayType) {
typeVar1 = ((ArrayType) typeVar1).getBasicType();
}
_out.println(""il.append(_factory.createNewArray("" + BCELifier.printType(typeVar1) + "", (short) "" + intVar4 + ""));"");
break;
default:
throw new IllegalArgumentException(""Unhandled opcode: "" + shortVar2);
}
}"
618,DODGY_CODE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,FP,bcel,619,"final BranchHandle bh = (BranchHandle) branch_map.get(bi);
","@Override
public void visitBranchInstruction(final BranchInstruction bi) {
final BranchHandle bh = (BranchHandle) branch_map.get(bi);
final int pos = bh.getPosition();
final String name = bi.getName() + ""_"" + pos;
if (bi instanceof Select) {
final Select s = (Select) bi;
branches.add(bi);
final StringBuilder args = new StringBuilder(""new int[] { "");
final int[] matchs = s.getMatchs();
for (int i = 0; i < matchs.length; i++) {
args.append(matchs[i]);
if (i < matchs.length - 1) {
args.append("", "");
}
}
args.append("" }"");
_out.print(""Select "" + name + "" = new "" + bi.getName().toUpperCase(Locale.ENGLISH) + ""("" + args + "", new InstructionHandle[] { "");
for (int i = 0; i < matchs.length; i++) {
_out.print(""null"");
if (i < matchs.length - 1) {
_out.print("", "");
}
}
_out.println("" }, null);"");
} else {
final int t_pos = bh.getTarget().getPosition();
String target;
if (pos > t_pos) {
target = ""ih_"" + t_pos;
} else {
branches.add(bi);
target = ""null"";
}
_out.println(""    BranchInstruction "" + name + "" = _factory.createBranchInstruction("" + CONSTANT_PREFIX + bi.getName().toUpperCase(Locale.ENGLISH) + "", "" + target + "");"");
}
if (bh.hasTargeters()) {
_out.println(""    ih_"" + pos + "" = il.append("" + name + "");"");
} else {
_out.println(""    il.append("" + name + "");"");
}
}","@Override
public void visitBranchInstruction(final BranchInstruction bi) {
final BranchHandle branchhandleVar1 = branchhandleLiteral2;
final int intVar3 = intLiteral4;
final String stringVar5 = stringLiteral6;
if (bi instanceof Select) {
final Select selectVar7 = selectLiteral8;
branches.add(bi);
final StringBuilder stringbuilderVar9 = stringbuilderLiteral10;
final int[] intArrayVar11 = intArrayLiteral12;
for (int intVar18 = intLiteral19; intVar13 < intLiteral1; intVar13++) {
stringbuilderVar9.append(intArrayVar11[intVar13]);
if (intVar13 < intArrayVar11.length - 1) {
stringbuilderVar9.append("", "");
}
}
stringbuilderVar9.append("" }"");
_out.print(""Select "" + stringVar5 + "" = new "" + bi.getName().toUpperCase(Locale.ENGLISH) + ""("" + stringbuilderVar9 + "", new InstructionHandle[] { "");
for (int intVar18 = intLiteral19; intVar13 < intArrayVar11.length; intVar13++) {
_out.print(""null"");
if (intVar13 < intArrayVar11.length - 1) {
_out.print("", "");
}
}
_out.println("" }, null);"");
} else {
final int intVar15 = intLiteral16;
String stringVar17;
if (intVar3 > intVar15) {
stringVar17 = ""ih_"" + intVar15;
} else {
branches.add(bi);
stringVar17 = ""null"";
}
_out.println(""    BranchInstruction "" + stringVar5 + "" = _factory.createBranchInstruction("" + CONSTANT_PREFIX + bi.getName().toUpperCase(Locale.ENGLISH) + "", "" + stringVar17 + "");"");
}
if (branchhandleVar1.hasTargeters()) {
_out.println(""    ih_"" + intVar3 + "" = il.append("" + stringVar5 + "");"");
} else {
_out.println(""    il.append("" + stringVar5 + "");"");
}
}"
633,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,bcel,634,"} catch (final Exception e) {
","public InputStream getInputStream(final String name, final String suffix) throws IOException {
InputStream inputStream = null;
try {
inputStream = getClass().getClassLoader().getResourceAsStream(name + suffix);
} catch (final Exception e) {
}
if (inputStream != null) {
return inputStream;
}
return getClassFile(name, suffix).getInputStream();
}","public InputStream getInputStream(final String name, final String suffix) throws IOException {
InputStream inputstreamVar1 = inputstreamLiteral2;
try {
inputstreamVar1 = getClass().getClassLoader().getResourceAsStream(name + suffix);
} catch (final Exception e) {
}
if (inputstreamVar1 != null) {
return inputstreamVar1;
}
return getClassFile(name, suffix).getInputStream();
}"
643,PERFORMANCE,SS_SHOULD_BE_STATIC,FP,bcel,644,private final boolean packFrame = false;,private final boolean packFrame = false;,private final boolean booleanVar1 = booleanLiteral2;
647,DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,bcel,648,"if (methodNr < 0 || methodNr >= localVariablesInfos.length) {
","public LocalVariablesInfo getLocalVariablesInfo(final int methodNr) {
if (this.verify() != VerificationResult.VR_OK) {
return null;
}
if (methodNr < 0 || methodNr >= localVariablesInfos.length) {
throw new AssertionViolatedException(""Method number out of range."");
}
return localVariablesInfos[methodNr];
}","public LocalVariablesInfo getLocalVariablesInfo(final int methodNr) {
if (this.verify() != VerificationResult.VR_OK) {
return null;
}
if (methodNr < 0 || methodNr >= localVariablesInfos.length) {
throw new AssertionViolatedException(""Method number out of range."");
}
return localVariablesInfos[methodNr];
}"
655,MALICIOUS_CODE,MS_OOI_PKGPROTECT,FP,bcel,656,"public static final String[] OPCODE_NAMES = { ""nop"", ""aconst_null"", ""iconst_m1"", ""iconst_0"", ""iconst_1"", ""iconst_2"", ""iconst_3"", ""iconst_4"", ""iconst_5"", ""lconst_0"", ""lconst_1"", ""fconst_0"", ""fconst_1"", ""fconst_2"", ""dconst_0"", ""dconst_1"", ""bipush"", ""sipush"", ""ldc"", ""ldc_w"", ""ldc2_w"", ""iload"", ""lload"", ""fload"", ""dload"", ""aload"", ""iload_0"", ""iload_1"", ""iload_2"", ""iload_3"", ""lload_0"", ""lload_1"", ""lload_2"", ""lload_3"", ""fload_0"", ""fload_1"", ""fload_2"", ""fload_3"", ""dload_0"", ""dload_1"", ""dload_2"", ""dload_3"", ""aload_0"", ""aload_1"", ""aload_2"", ""aload_3"", ""iaload"", ""laload"", ""faload"", ""daload"", ""aaload"", ""baload"", ""caload"", ""saload"", ""istore"", ""lstore"", ""fstore"", ""dstore"", ""astore"", ""istore_0"", ""istore_1"", ""istore_2"", ""istore_3"", ""lstore_0"", ""lstore_1"", ""lstore_2"", ""lstore_3"", ""fstore_0"", ""fstore_1"", ""fstore_2"", ""fstore_3"", ""dstore_0"", ""dstore_1"", ""dstore_2"", ""dstore_3"", ""astore_0"", ""astore_1"", ""astore_2"", ""astore_3"", ""iastore"", ""lastore"", ""fastore"", ""dastore"", ""aastore"", ""bastore"", ""castore"", ""sastore"", ""pop"", ""pop2"", ""dup"", ""dup_x1"", ""dup_x2"", ""dup2"", ""dup2_x1"", ""dup2_x2"", ""swap"", ""iadd"", ""ladd"", ""fadd"", ""dadd"", ""isub"", ""lsub"", ""fsub"", ""dsub"", ""imul"", ""lmul"", ""fmul"", ""dmul"", ""idiv"", ""ldiv"", ""fdiv"", ""ddiv"", ""irem"", ""lrem"", ""frem"", ""drem"", ""ineg"", ""lneg"", ""fneg"", ""dneg"", ""ishl"", ""lshl"", ""ishr"", ""lshr"", ""iushr"", ""lushr"", ""iand"", ""land"", ""ior"", ""lor"", ""ixor"", ""lxor"", ""iinc"", ""i2l"", ""i2f"", ""i2d"", ""l2i"", ""l2f"", ""l2d"", ""f2i"", ""f2l"", ""f2d"", ""d2i"", ""d2l"", ""d2f"", ""i2b"", ""i2c"", ""i2s"", ""lcmp"", ""fcmpl"", ""fcmpg"", ""dcmpl"", ""dcmpg"", ""ifeq"", ""ifne"", ""iflt"", ""ifge"", ""ifgt"", ""ifle"", ""if_icmpeq"", ""if_icmpne"", ""if_icmplt"", ""if_icmpge"", ""if_icmpgt"", ""if_icmple"", ""if_acmpeq"", ""if_acmpne"", ""goto"", ""jsr"", ""ret"", ""tableswitch"", ""lookupswitch"", ""ireturn"", ""lreturn"", ""freturn"", ""dreturn"", ""areturn"", ""return"", ""getstatic"", ""putstatic"", ""getfield"", ""putfield"", ""invokevirtual"", ""invokespecial"", ""invokestatic"", ""invokeinterface"", ""invokedynamic"", ""new"", ""newarray"", ""anewarray"", ""arraylength"", ""athrow"", ""checkcast"", ""instanceof"", ""monitorenter"", ""monitorexit"", ""wide"", ""multianewarray"", ""ifnull"", ""ifnonnull"", ""goto_w"", ""jsr_w"", ""breakpointimpdep1"", ""impdep2"" };","public static final String[] OPCODE_NAMES = { ""nop"", ""aconst_null"", ""iconst_m1"", ""iconst_0"", ""iconst_1"", ""iconst_2"", ""iconst_3"", ""iconst_4"", ""iconst_5"", ""lconst_0"", ""lconst_1"", ""fconst_0"", ""fconst_1"", ""fconst_2"", ""dconst_0"", ""dconst_1"", ""bipush"", ""sipush"", ""ldc"", ""ldc_w"", ""ldc2_w"", ""iload"", ""lload"", ""fload"", ""dload"", ""aload"", ""iload_0"", ""iload_1"", ""iload_2"", ""iload_3"", ""lload_0"", ""lload_1"", ""lload_2"", ""lload_3"", ""fload_0"", ""fload_1"", ""fload_2"", ""fload_3"", ""dload_0"", ""dload_1"", ""dload_2"", ""dload_3"", ""aload_0"", ""aload_1"", ""aload_2"", ""aload_3"", ""iaload"", ""laload"", ""faload"", ""daload"", ""aaload"", ""baload"", ""caload"", ""saload"", ""istore"", ""lstore"", ""fstore"", ""dstore"", ""astore"", ""istore_0"", ""istore_1"", ""istore_2"", ""istore_3"", ""lstore_0"", ""lstore_1"", ""lstore_2"", ""lstore_3"", ""fstore_0"", ""fstore_1"", ""fstore_2"", ""fstore_3"", ""dstore_0"", ""dstore_1"", ""dstore_2"", ""dstore_3"", ""astore_0"", ""astore_1"", ""astore_2"", ""astore_3"", ""iastore"", ""lastore"", ""fastore"", ""dastore"", ""aastore"", ""bastore"", ""castore"", ""sastore"", ""pop"", ""pop2"", ""dup"", ""dup_x1"", ""dup_x2"", ""dup2"", ""dup2_x1"", ""dup2_x2"", ""swap"", ""iadd"", ""ladd"", ""fadd"", ""dadd"", ""isub"", ""lsub"", ""fsub"", ""dsub"", ""imul"", ""lmul"", ""fmul"", ""dmul"", ""idiv"", ""ldiv"", ""fdiv"", ""ddiv"", ""irem"", ""lrem"", ""frem"", ""drem"", ""ineg"", ""lneg"", ""fneg"", ""dneg"", ""ishl"", ""lshl"", ""ishr"", ""lshr"", ""iushr"", ""lushr"", ""iand"", ""land"", ""ior"", ""lor"", ""ixor"", ""lxor"", ""iinc"", ""i2l"", ""i2f"", ""i2d"", ""l2i"", ""l2f"", ""l2d"", ""f2i"", ""f2l"", ""f2d"", ""d2i"", ""d2l"", ""d2f"", ""i2b"", ""i2c"", ""i2s"", ""lcmp"", ""fcmpl"", ""fcmpg"", ""dcmpl"", ""dcmpg"", ""ifeq"", ""ifne"", ""iflt"", ""ifge"", ""ifgt"", ""ifle"", ""if_icmpeq"", ""if_icmpne"", ""if_icmplt"", ""if_icmpge"", ""if_icmpgt"", ""if_icmple"", ""if_acmpeq"", ""if_acmpne"", ""goto"", ""jsr"", ""ret"", ""tableswitch"", ""lookupswitch"", ""ireturn"", ""lreturn"", ""freturn"", ""dreturn"", ""areturn"", ""return"", ""getstatic"", ""putstatic"", ""getfield"", ""putfield"", ""invokevirtual"", ""invokespecial"", ""invokestatic"", ""invokeinterface"", ""invokedynamic"", ""new"", ""newarray"", ""anewarray"", ""arraylength"", ""athrow"", ""checkcast"", ""instanceof"", ""monitorenter"", ""monitorexit"", ""wide"", ""multianewarray"", ""ifnull"", ""ifnonnull"", ""goto_w"", ""jsr_w"", ""breakpointimpdep1"", ""impdep2"" };",public static final String[] stringArrayVar1 = stringArrayLiteral2;
728,MALICIOUS_CODE,EI_EXPOSE_REP2,FP,bcel,729,"this.line_number_table = line_number_table;
","public LineNumberTable(final int name_index, final int length, final LineNumber[] line_number_table, final ConstantPool constant_pool) {
super(Const.ATTR_LINE_NUMBER_TABLE, name_index, length, constant_pool);
this.line_number_table = line_number_table;
}","public LineNumberTable(final int name_index, final int length, final LineNumber[] line_number_table, final ConstantPool constant_pool) {
super(Const.ATTR_LINE_NUMBER_TABLE, name_index, length, constant_pool);
this.line_number_table = line_number_table;
}"
739,MALICIOUS_CODE,EI_EXPOSE_REP,FP,bcel,740,"return parameters;
","public MethodParameter[] getParameters() {
return parameters;
}","public MethodParameter[] getParameters() {
return parameters;
}"
747,DODGY_CODE,DLS_DEAD_LOCAL_STORE,FP,bcel,748,"ch = in.read();
","private static void matchIdent(final MyByteArrayInputStream in, final StringBuilder buf) {
int ch;
if ((ch = in.read()) == -1) {
throw new RuntimeException(""Illegal signature: "" + in.getData() + "" no ident, reaching EOF"");
}
// System.out.println(""return from ident:"" + (char)ch);
if (!identStart(ch)) {
StringBuilder buf2 = new StringBuilder();
int count = 1;
while (Character.isJavaIdentifierPart((char) ch)) {
buf2.append((char) ch);
count++;
ch = in.read();
}
if (ch == ':') {
in.skip(""Ljava/lang/Object"".length());
buf.append(buf2);
ch = in.read();
in.unread();
// System.out.println(""so far:"" + buf2 + "":next:"" +(char)ch);
} else {
for (int i = 0; i < count; i++) {
in.unread();
}
}
return;
}
StringBuilder buf2 = new StringBuilder();
ch = in.read();
do {
buf2.append((char) ch);
ch = in.read();
// System.out.println(""within ident:""+ (char)ch);
} while ((ch != -1) && (Character.isJavaIdentifierPart((char) ch) || (ch == '/')));
buf.append(buf2.toString().replace('/', '.'));
// System.out.println(""regular return ident:""+ (char)ch + "":"" + buf2);
if (ch != -1) {
in.unread();
}
}","private static void matchIdent(final MyByteArrayInputStream in, final StringBuilder buf) {
int intVar1;
if ((intVar1 = in.read()) == -1) {
throw new RuntimeException(""Illegal signature: "" + in.getData() + "" no ident, reaching EOF"");
}
// System.out.println(""return from ident:"" + (char)ch);
if (!identStart(intVar1)) {
StringBuilder stringbuilderVar2 = stringbuilderLiteral3;
int intVar4 = intLiteral5;
while (Character.isJavaIdentifierPart((char) intVar1)) {
stringbuilderVar2.append((char) intVar1);
intVar4++;
intVar1 = in.read();
}
if (intVar1 == ':') {
in.skip(""Ljava/lang/Object"".length());
buf.append(stringbuilderVar2);
intVar1 = in.read();
in.unread();
// System.out.println(""so far:"" + buf2 + "":next:"" +(char)ch);
} else {
for (int intVar8 = intLiteral9; intVar6 < intLiteral1; intVar6++) {
in.unread();
}
}
return;
}
StringBuilder stringbuilderVar2 = stringbuilderLiteral3;
intVar1 = in.read();
do {
stringbuilderVar2.append((char) intVar1);
intVar1 = in.read();
// System.out.println(""within ident:""+ (char)ch);
} while ((intVar1 != -1) && (Character.isJavaIdentifierPart((char) intVar1) || (intVar1 == '/')));
buf.append(stringbuilderVar2.toString().replace('/', '.'));
// System.out.println(""regular return ident:""+ (char)ch + "":"" + buf2);
if (intVar1 != -1) {
in.unread();
}
}"
750,MALICIOUS_CODE,EI_EXPOSE_REP2,FP,bcel,751,"this.map = map;
","public StackMap(final int name_index, final int length, final StackMapEntry[] map, final ConstantPool constant_pool) {
super(Const.ATTR_STACK_MAP, name_index, length, constant_pool);
this.map = map;
}","public StackMap(final int name_index, final int length, final StackMapEntry[] map, final ConstantPool constant_pool) {
super(Const.ATTR_STACK_MAP, name_index, length, constant_pool);
this.map = map;
}"
763,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,bcel,764,"ArrayType array = (ArrayType) type;
","public ArrayType(final Type type, final int dimensions) {
super(Const.T_ARRAY, ""<dummy>"");
if ((dimensions < 1) || (dimensions > Const.MAX_BYTE)) {
throw new ClassGenException(""Invalid number of dimensions: "" + dimensions);
}
switch(type.getType()) {
case Const.T_ARRAY:
ArrayType array = (ArrayType) type;
this.dimensions = dimensions + array.dimensions;
basic_type = array.basic_type;
break;
case Const.T_VOID:
throw new ClassGenException(""Invalid type: void[]"");
default:
// Basic type or reference
this.dimensions = dimensions;
basic_type = type;
break;
}
StringBuilder buf = new StringBuilder();
for (int i = 0; i < this.dimensions; i++) {
buf.append('[');
}
buf.append(basic_type.getSignature());
super.setSignature(buf.toString());
}","public ArrayType(final Type type, final int dimensions) {
super(Const.T_ARRAY, ""<dummy>"");
if ((dimensions < 1) || (dimensions > Const.MAX_BYTE)) {
throw new ClassGenException(""Invalid number of dimensions: "" + dimensions);
}
switch(type.getType()) {
case Const.T_ARRAY:
ArrayType arraytypeVar1 = arraytypeLiteral2;
this.dimensions = dimensions + arraytypeVar1.dimensions;
basic_type = arraytypeVar1.basic_type;
break;
case Const.T_VOID:
throw new ClassGenException(""Invalid type: void[]"");
default:
// Basic type or reference
this.dimensions = dimensions;
basic_type = type;
break;
}
StringBuilder stringbuilderVar3 = stringbuilderLiteral4;
for (int intVar7 = intLiteral8; intVar5 < intLiteral1; intVar5++) {
stringbuilderVar3.append('[');
}
stringbuilderVar3.append(basic_type.getSignature());
super.setSignature(stringbuilderVar3.toString());
}"
771,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,bcel,772,"ConstantCP m = (ConstantCP) c;
","public int addConstant(final Constant c, final ConstantPoolGen cp) {
Constant[] constants = cp.getConstantPool().getConstantPool();
switch(c.getTag()) {
case Const.CONSTANT_String:
{
ConstantString s = (ConstantString) c;
ConstantUtf8 u8 = (ConstantUtf8) constants[s.getStringIndex()];
return addString(u8.getBytes());
}
case Const.CONSTANT_Class:
{
ConstantClass s = (ConstantClass) c;
ConstantUtf8 u8 = (ConstantUtf8) constants[s.getNameIndex()];
return addClass(u8.getBytes());
}
case Const.CONSTANT_NameAndType:
{
ConstantNameAndType n = (ConstantNameAndType) c;
ConstantUtf8 u8 = (ConstantUtf8) constants[n.getNameIndex()];
ConstantUtf8 u8_2 = (ConstantUtf8) constants[n.getSignatureIndex()];
return addNameAndType(u8.getBytes(), u8_2.getBytes());
}
case Const.CONSTANT_Utf8:
return addUtf8(((ConstantUtf8) c).getBytes());
case Const.CONSTANT_Double:
return addDouble(((ConstantDouble) c).getBytes());
case Const.CONSTANT_Float:
return addFloat(((ConstantFloat) c).getBytes());
case Const.CONSTANT_Long:
return addLong(((ConstantLong) c).getBytes());
case Const.CONSTANT_Integer:
return addInteger(((ConstantInteger) c).getBytes());
case Const.CONSTANT_InterfaceMethodref:
case Const.CONSTANT_Methodref:
case Const.CONSTANT_Fieldref:
{
ConstantCP m = (ConstantCP) c;
ConstantClass clazz = (ConstantClass) constants[m.getClassIndex()];
ConstantNameAndType n = (ConstantNameAndType) constants[m.getNameAndTypeIndex()];
ConstantUtf8 u8 = (ConstantUtf8) constants[clazz.getNameIndex()];
String class_name = u8.getBytes().replace('/', '.');
u8 = (ConstantUtf8) constants[n.getNameIndex()];
String name = u8.getBytes();
u8 = (ConstantUtf8) constants[n.getSignatureIndex()];
String signature = u8.getBytes();
switch(c.getTag()) {
case Const.CONSTANT_InterfaceMethodref:
return addInterfaceMethodref(class_name, name, signature);
case Const.CONSTANT_Methodref:
return addMethodref(class_name, name, signature);
case Const.CONSTANT_Fieldref:
return addFieldref(class_name, name, signature);
default:
// Never reached
throw new RuntimeException(""Unknown constant type "" + c);
}
}
default:
// Never reached
throw new RuntimeException(""Unknown constant type "" + c);
}
}","public int addConstant(final Constant c, final ConstantPoolGen cp) {
Constant[] constantArrayVar1 = constantArrayLiteral2;
switch(c.getTag()) {
case Const.CONSTANT_String:
{
ConstantString constantstringVar3 = constantstringLiteral4;
ConstantUtf8 constantutf8Var5 = constantutf8Literal6;
return addString(constantutf8Var5.getBytes());
}
case Const.CONSTANT_Class:
{
ConstantClass constantstringVar3 = constantclassLiteral7;
ConstantUtf8 constantutf8Var5 = constantutf8Literal8;
return addClass(constantutf8Var5.getBytes());
}
case Const.CONSTANT_NameAndType:
{
ConstantNameAndType constantnameandtypeVar9 = constantnameandtypeLiteral10;
ConstantUtf8 constantutf8Var5 = constantutf8Literal11;
ConstantUtf8 constantutf8Var12 = constantutf8Literal13;
return addNameAndType(constantutf8Var5.getBytes(), constantutf8Var12.getBytes());
}
case Const.CONSTANT_Utf8:
return addUtf8(((ConstantUtf8) c).getBytes());
case Const.CONSTANT_Double:
return addDouble(((ConstantDouble) c).getBytes());
case Const.CONSTANT_Float:
return addFloat(((ConstantFloat) c).getBytes());
case Const.CONSTANT_Long:
return addLong(((ConstantLong) c).getBytes());
case Const.CONSTANT_Integer:
return addInteger(((ConstantInteger) c).getBytes());
case Const.CONSTANT_InterfaceMethodref:
case Const.CONSTANT_Methodref:
case Const.CONSTANT_Fieldref:
{
ConstantCP constantcpVar14 = constantcpLiteral15;
ConstantClass constantclassVar16 = constantclassLiteral17;
ConstantNameAndType constantnameandtypeVar9 = constantnameandtypeLiteral18;
ConstantUtf8 constantutf8Var5 = constantutf8Literal19;
String stringVar20 = stringLiteral21;
constantutf8Var5 = (ConstantUtf8) constantArrayVar1[constantnameandtypeVar9.getNameIndex()];
String stringVar22 = stringLiteral23;
constantutf8Var5 = (ConstantUtf8) constantArrayVar1[constantnameandtypeVar9.getSignatureIndex()];
String stringVar24 = stringLiteral23;
switch(c.getTag()) {
case Const.CONSTANT_InterfaceMethodref:
return addInterfaceMethodref(stringVar20, stringVar22, stringVar24);
case Const.CONSTANT_Methodref:
return addMethodref(stringVar20, stringVar22, stringVar24);
case Const.CONSTANT_Fieldref:
return addFieldref(stringVar20, stringVar22, stringVar24);
default:
// Never reached
throw new RuntimeException(""Unknown constant type "" + c);
}
}
default:
// Never reached
throw new RuntimeException(""Unknown constant type "" + c);
}
}"
787,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,bcel,788,"return new INSTANCEOF(cp.addClass((ObjectType) t));
","public INSTANCEOF createInstanceOf(final ReferenceType t) {
if (t instanceof ArrayType) {
return new INSTANCEOF(cp.addArrayClass((ArrayType) t));
}
return new INSTANCEOF(cp.addClass((ObjectType) t));
}","public INSTANCEOF createInstanceOf(final ReferenceType t) {
if (t instanceof ArrayType) {
return new INSTANCEOF(cp.addArrayClass((ArrayType) t));
}
return new INSTANCEOF(cp.addClass((ObjectType) t));
}"
801,MALICIOUS_CODE,EI_EXPOSE_REP,FP,bcel,802,"return targets;
","public InstructionHandle[] getTargets() {
return targets;
}","public InstructionHandle[] getTargets() {
return targets;
}"
823,DODGY_CODE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,FP,bcel,824,"wide = false; 
","private String codeToHTML(final ByteSequence bytes, final int method_number) throws IOException {
short opcode = (short) bytes.readUnsignedByte();
String name;
String signature;
int default_offset = 0;
int low;
int high;
int index;
int class_index;
int vindex;
int constant;
int[] jump_table;
int no_pad_bytes = 0;
int offset;
StringBuilder buf = new StringBuilder(256);
buf.append(""<TT>"").append(Const.getOpcodeName(opcode)).append(""</TT></TD><TD>"");
if ((opcode == Const.TABLESWITCH) || (opcode == Const.LOOKUPSWITCH)) {
int remainder = bytes.getIndex() % 4;
no_pad_bytes = (remainder == 0) ? 0 : 4 - remainder;
for (int i = 0; i < no_pad_bytes; i++) {
bytes.readByte();
}
default_offset = bytes.readInt();
}
switch(opcode) {
case Const.TABLESWITCH:
low = bytes.readInt();
high = bytes.readInt();
offset = bytes.getIndex() - 12 - no_pad_bytes - 1;
default_offset += offset;
buf.append(""<TABLE BORDER=1><TR>"");
jump_table = new int[high - low + 1];
for (int i = 0; i < jump_table.length; i++) {
jump_table[i] = offset + bytes.readInt();
buf.append(""<TH>"").append(low + i).append(""</TH>"");
}
buf.append(""<TH>default</TH></TR>\n<TR>"");
for (int element : jump_table) {
buf.append(""<TD><A HREF=\""#code"").append(method_number).append(""@"").append(element).append(""\"">"").append(element).append(""</A></TD>"");
}
buf.append(""<TD><A HREF=\""#code"").append(method_number).append(""@"").append(default_offset).append(""\"">"").append(default_offset).append(""</A></TD></TR>\n</TABLE>\n"");
break;
case Const.LOOKUPSWITCH:
int npairs = bytes.readInt();
offset = bytes.getIndex() - 8 - no_pad_bytes - 1;
jump_table = new int[npairs];
default_offset += offset;
buf.append(""<TABLE BORDER=1><TR>"");
for (int i = 0; i < npairs; i++) {
int match = bytes.readInt();
jump_table[i] = offset + bytes.readInt();
buf.append(""<TH>"").append(match).append(""</TH>"");
}
buf.append(""<TH>default</TH></TR>\n<TR>"");
for (int i = 0; i < npairs; i++) {
buf.append(""<TD><A HREF=\""#code"").append(method_number).append(""@"").append(jump_table[i]).append(""\"">"").append(jump_table[i]).append(""</A></TD>"");
}
buf.append(""<TD><A HREF=\""#code"").append(method_number).append(""@"").append(default_offset).append(""\"">"").append(default_offset).append(""</A></TD></TR>\n</TABLE>\n"");
break;
case Const.GOTO:
case Const.IFEQ:
case Const.IFGE:
case Const.IFGT:
case Const.IFLE:
case Const.IFLT:
case Const.IFNE:
case Const.IFNONNULL:
case Const.IFNULL:
case Const.IF_ACMPEQ:
case Const.IF_ACMPNE:
case Const.IF_ICMPEQ:
case Const.IF_ICMPGE:
case Const.IF_ICMPGT:
case Const.IF_ICMPLE:
case Const.IF_ICMPLT:
case Const.IF_ICMPNE:
case Const.JSR:
index = bytes.getIndex() + bytes.readShort() - 1;
buf.append(""<A HREF=\""#code"").append(method_number).append(""@"").append(index).append(""\"">"").append(index).append(""</A>"");
break;
case Const.GOTO_W:
case Const.JSR_W:
int windex = bytes.getIndex() + bytes.readInt() - 1;
buf.append(""<A HREF=\""#code"").append(method_number).append(""@"").append(windex).append(""\"">"").append(windex).append(""</A>"");
break;
case Const.ALOAD:
case Const.ASTORE:
case Const.DLOAD:
case Const.DSTORE:
case Const.FLOAD:
case Const.FSTORE:
case Const.ILOAD:
case Const.ISTORE:
case Const.LLOAD:
case Const.LSTORE:
case Const.RET:
if (wide) {
vindex = bytes.readShort();
wide = false;
} else {
vindex = bytes.readUnsignedByte();
}
buf.append(""%"").append(vindex);
break;
case Const.WIDE:
wide = true;
buf.append(""(wide)"");
break;
case Const.NEWARRAY:
buf.append(""<FONT COLOR=\""#00FF00\"">"").append(Const.getTypeName(bytes.readByte())).append(""</FONT>"");
break;
case Const.GETFIELD:
case Const.GETSTATIC:
case Const.PUTFIELD:
case Const.PUTSTATIC:
index = bytes.readShort();
ConstantFieldref c1 = (ConstantFieldref) constant_pool.getConstant(index, Const.CONSTANT_Fieldref);
class_index = c1.getClassIndex();
name = constant_pool.getConstantString(class_index, Const.CONSTANT_Class);
name = Utility.compactClassName(name, false);
index = c1.getNameAndTypeIndex();
String field_name = constant_pool.constantToString(index, Const.CONSTANT_NameAndType);
if (name.equals(class_name)) {
buf.append(""<A HREF=\"""").append(class_name).append(""_methods.html#field"").append(field_name).append(""\"" TARGET=Methods>"").append(field_name).append(""</A>\n"");
} else {
buf.append(constant_html.referenceConstant(class_index)).append(""."").append(field_name);
}
break;
case Const.CHECKCAST:
case Const.INSTANCEOF:
case Const.NEW:
index = bytes.readShort();
buf.append(constant_html.referenceConstant(index));
break;
case Const.INVOKESPECIAL:
case Const.INVOKESTATIC:
case Const.INVOKEVIRTUAL:
case Const.INVOKEINTERFACE:
case Const.INVOKEDYNAMIC:
int m_index = bytes.readShort();
String str;
if (opcode == Const.INVOKEINTERFACE) {
bytes.readUnsignedByte();
bytes.readUnsignedByte();
ConstantInterfaceMethodref c = (ConstantInterfaceMethodref) constant_pool.getConstant(m_index, Const.CONSTANT_InterfaceMethodref);
class_index = c.getClassIndex();
index = c.getNameAndTypeIndex();
name = Class2HTML.referenceClass(class_index);
} else if (opcode == Const.INVOKEDYNAMIC) {
bytes.readUnsignedByte();
bytes.readUnsignedByte();
ConstantInvokeDynamic c = (ConstantInvokeDynamic) constant_pool.getConstant(m_index, Const.CONSTANT_InvokeDynamic);
index = c.getNameAndTypeIndex();
name = ""#"" + c.getBootstrapMethodAttrIndex();
} else {
// UNDONE: Java8 now allows INVOKESPECIAL and INVOKESTATIC to
ConstantMethodref c = (ConstantMethodref) constant_pool.getConstant(m_index, Const.CONSTANT_Methodref);
class_index = c.getClassIndex();
index = c.getNameAndTypeIndex();
name = Class2HTML.referenceClass(class_index);
}
str = Class2HTML.toHTML(constant_pool.constantToString(constant_pool.getConstant(index, Const.CONSTANT_NameAndType)));
ConstantNameAndType c2 = (ConstantNameAndType) constant_pool.getConstant(index, Const.CONSTANT_NameAndType);
signature = constant_pool.constantToString(c2.getSignatureIndex(), Const.CONSTANT_Utf8);
String[] args = Utility.methodSignatureArgumentTypes(signature, false);
String type = Utility.methodSignatureReturnType(signature, false);
buf.append(name).append("".<A HREF=\"""").append(class_name).append(""_cp.html#cp"").append(m_index).append(""\"" TARGET=ConstantPool>"").append(str).append(""</A>"").append(""("");
for (int i = 0; i < args.length; i++) {
buf.append(Class2HTML.referenceType(args[i]));
if (i < args.length - 1) {
buf.append("", "");
}
}
buf.append(""):"").append(Class2HTML.referenceType(type));
break;
case Const.LDC_W:
case Const.LDC2_W:
index = bytes.readShort();
buf.append(""<A HREF=\"""").append(class_name).append(""_cp.html#cp"").append(index).append(""\"" TARGET=\""ConstantPool\"">"").append(Class2HTML.toHTML(constant_pool.constantToString(index, constant_pool.getConstant(index).getTag()))).append(""</a>"");
break;
case Const.LDC:
index = bytes.readUnsignedByte();
buf.append(""<A HREF=\"""").append(class_name).append(""_cp.html#cp"").append(index).append(""\"" TARGET=\""ConstantPool\"">"").append(Class2HTML.toHTML(constant_pool.constantToString(index, constant_pool.getConstant(index).getTag()))).append(""</a>"");
break;
case Const.ANEWARRAY:
index = bytes.readShort();
buf.append(constant_html.referenceConstant(index));
break;
case Const.MULTIANEWARRAY:
index = bytes.readShort();
int dimensions = bytes.readByte();
buf.append(constant_html.referenceConstant(index)).append("":"").append(dimensions).append(""-dimensional"");
break;
case Const.IINC:
if (wide) {
vindex = bytes.readShort();
constant = bytes.readShort();
wide = false;
} else {
vindex = bytes.readUnsignedByte();
constant = bytes.readByte();
}
buf.append(""%"").append(vindex).append("" "").append(constant);
break;
default:
if (Const.getNoOfOperands(opcode) > 0) {
for (int i = 0; i < Const.getOperandTypeCount(opcode); i++) {
switch(Const.getOperandType(opcode, i)) {
case Const.T_BYTE:
buf.append(bytes.readUnsignedByte());
break;
case // Either branch or index
Const.T_SHORT:
buf.append(bytes.readShort());
break;
case Const.T_INT:
buf.append(bytes.readInt());
break;
default:
// Never reached
throw new IllegalStateException(""Unreachable default case reached! "" + Const.getOperandType(opcode, i));
}
buf.append(""&nbsp;"");
}
}
}
buf.append(""</TD>"");
return buf.toString();
}","private String codeToHTML(final ByteSequence bytes, final int method_number) throws IOException {
short shortVar1 = shortLiteral2;
String stringVar3;
String stringVar4;
int intVar5 = intLiteral6;
int intVar7;
int intVar8;
int intVar9;
int intVar10;
int intVar11;
int intVar12;
int[] intArrayVar13;
int intVar14 = intLiteral6;
int intVar15;
StringBuilder stringbuilderVar16 = stringbuilderLiteral17;
stringbuilderVar16.append(""<TT>"").append(Const.getOpcodeName(shortVar1)).append(""</TT></TD><TD>"");
if ((shortVar1 == Const.TABLESWITCH) || (shortVar1 == Const.LOOKUPSWITCH)) {
int intVar18 = intLiteral19;
intVar14 = (intVar18 == 0) ? 0 : 4 - intVar18;
for (int intVar46 = intLiteral47; intVar20 < intLiteral1; intVar20++) {
bytes.readByte();
}
intVar5 = bytes.readInt();
}
switch(shortVar1) {
case Const.TABLESWITCH:
intVar7 = bytes.readInt();
intVar8 = bytes.readInt();
intVar15 = bytes.getIndex() - 12 - intVar14 - 1;
intVar5 += intVar15;
stringbuilderVar16.append(""<TABLE BORDER=1><TR>"");
intArrayVar13 = new int[intVar8 - intVar7 + 1];
for (int intVar46 = intLiteral47; intVar20 < intLiteral2; intVar20++) {
intArrayVar13[intVar20] = intVar15 + bytes.readInt();
stringbuilderVar16.append(""<TH>"").append(intVar7 + intVar20).append(""</TH>"");
}
stringbuilderVar16.append(""<TH>default</TH></TR>\n<TR>"");
for (int intVar21 : intArrayVar13) {
stringbuilderVar16.append(""<TD><A HREF=\""#code"").append(method_number).append(""@"").append(intVar21).append(""\"">"").append(intVar21).append(""</A></TD>"");
}
stringbuilderVar16.append(""<TD><A HREF=\""#code"").append(method_number).append(""@"").append(intVar5).append(""\"">"").append(intVar5).append(""</A></TD></TR>\n</TABLE>\n"");
break;
case Const.LOOKUPSWITCH:
int intVar22 = intLiteral23;
intVar15 = bytes.getIndex() - 8 - intVar14 - 1;
intArrayVar13 = new int[intVar22];
intVar5 += intVar15;
stringbuilderVar16.append(""<TABLE BORDER=1><TR>"");
for (int intVar46 = intLiteral47; intVar20 < intLiteral3; intVar20++) {
int intVar24 = intLiteral23;
intArrayVar13[intVar20] = intVar15 + bytes.readInt();
stringbuilderVar16.append(""<TH>"").append(intVar24).append(""</TH>"");
}
stringbuilderVar16.append(""<TH>default</TH></TR>\n<TR>"");
for (int intVar46 = intLiteral47; intVar20 < intVar22; intVar20++) {
stringbuilderVar16.append(""<TD><A HREF=\""#code"").append(method_number).append(""@"").append(intArrayVar13[intVar20]).append(""\"">"").append(intArrayVar13[intVar20]).append(""</A></TD>"");
}
stringbuilderVar16.append(""<TD><A HREF=\""#code"").append(method_number).append(""@"").append(intVar5).append(""\"">"").append(intVar5).append(""</A></TD></TR>\n</TABLE>\n"");
break;
case Const.GOTO:
case Const.IFEQ:
case Const.IFGE:
case Const.IFGT:
case Const.IFLE:
case Const.IFLT:
case Const.IFNE:
case Const.IFNONNULL:
case Const.IFNULL:
case Const.IF_ACMPEQ:
case Const.IF_ACMPNE:
case Const.IF_ICMPEQ:
case Const.IF_ICMPGE:
case Const.IF_ICMPGT:
case Const.IF_ICMPLE:
case Const.IF_ICMPLT:
case Const.IF_ICMPNE:
case Const.JSR:
intVar9 = bytes.getIndex() + bytes.readShort() - 1;
stringbuilderVar16.append(""<A HREF=\""#code"").append(method_number).append(""@"").append(intVar9).append(""\"">"").append(intVar9).append(""</A>"");
break;
case Const.GOTO_W:
case Const.JSR_W:
int intVar25 = intLiteral26;
stringbuilderVar16.append(""<A HREF=\""#code"").append(method_number).append(""@"").append(intVar25).append(""\"">"").append(intVar25).append(""</A>"");
break;
case Const.ALOAD:
case Const.ASTORE:
case Const.DLOAD:
case Const.DSTORE:
case Const.FLOAD:
case Const.FSTORE:
case Const.ILOAD:
case Const.ISTORE:
case Const.LLOAD:
case Const.LSTORE:
case Const.RET:
if (wide) {
intVar11 = bytes.readShort();
wide = false;
} else {
intVar11 = bytes.readUnsignedByte();
}
stringbuilderVar16.append(""%"").append(intVar11);
break;
case Const.WIDE:
wide = true;
stringbuilderVar16.append(""(wide)"");
break;
case Const.NEWARRAY:
stringbuilderVar16.append(""<FONT COLOR=\""#00FF00\"">"").append(Const.getTypeName(bytes.readByte())).append(""</FONT>"");
break;
case Const.GETFIELD:
case Const.GETSTATIC:
case Const.PUTFIELD:
case Const.PUTSTATIC:
intVar9 = bytes.readShort();
ConstantFieldref constantfieldrefVar27 = constantfieldrefLiteral28;
intVar10 = constantfieldrefVar27.getClassIndex();
stringVar3 = constant_pool.getConstantString(intVar10, Const.CONSTANT_Class);
stringVar3 = Utility.compactClassName(stringVar3, false);
intVar9 = constantfieldrefVar27.getNameAndTypeIndex();
String stringVar29 = stringLiteral30;
if (stringVar3.equals(class_name)) {
stringbuilderVar16.append(""<A HREF=\"""").append(class_name).append(""_methods.html#field"").append(stringVar29).append(""\"" TARGET=Methods>"").append(stringVar29).append(""</A>\n"");
} else {
stringbuilderVar16.append(constant_html.referenceConstant(intVar10)).append(""."").append(stringVar29);
}
break;
case Const.CHECKCAST:
case Const.INSTANCEOF:
case Const.NEW:
intVar9 = bytes.readShort();
stringbuilderVar16.append(constant_html.referenceConstant(intVar9));
break;
case Const.INVOKESPECIAL:
case Const.INVOKESTATIC:
case Const.INVOKEVIRTUAL:
case Const.INVOKEINTERFACE:
case Const.INVOKEDYNAMIC:
int intVar31 = intLiteral32;
String stringVar33;
if (shortVar1 == Const.INVOKEINTERFACE) {
bytes.readUnsignedByte();
bytes.readUnsignedByte();
ConstantInterfaceMethodref constantinterfacemethodrefVar34 = constantinterfacemethodrefLiteral35;
intVar10 = constantinterfacemethodrefVar34.getClassIndex();
intVar9 = constantinterfacemethodrefVar34.getNameAndTypeIndex();
stringVar3 = Class2HTML.referenceClass(intVar10);
} else if (shortVar1 == Const.INVOKEDYNAMIC) {
bytes.readUnsignedByte();
bytes.readUnsignedByte();
ConstantInvokeDynamic constantinterfacemethodrefVar34 = constantinvokedynamicLiteral36;
intVar9 = constantinterfacemethodrefVar34.getNameAndTypeIndex();
stringVar3 = ""#"" + constantinterfacemethodrefVar34.getBootstrapMethodAttrIndex();
} else {
// UNDONE: Java8 now allows INVOKESPECIAL and INVOKESTATIC to
ConstantMethodref constantinterfacemethodrefVar34 = constantmethodrefLiteral37;
intVar10 = constantinterfacemethodrefVar34.getClassIndex();
intVar9 = constantinterfacemethodrefVar34.getNameAndTypeIndex();
stringVar3 = Class2HTML.referenceClass(intVar10);
}
stringVar33 = Class2HTML.toHTML(constant_pool.constantToString(constant_pool.getConstant(intVar9, Const.CONSTANT_NameAndType)));
ConstantNameAndType constantnameandtypeVar38 = constantnameandtypeLiteral39;
stringVar4 = constant_pool.constantToString(constantnameandtypeVar38.getSignatureIndex(), Const.CONSTANT_Utf8);
String[] stringArrayVar40 = stringArrayLiteral41;
String stringVar42 = stringLiteral43;
stringbuilderVar16.append(stringVar3).append("".<A HREF=\"""").append(class_name).append(""_cp.html#cp"").append(intVar31).append(""\"" TARGET=ConstantPool>"").append(stringVar33).append(""</A>"").append(""("");
for (int intVar46 = intLiteral47; intVar20 < intLiteral4; intVar20++) {
stringbuilderVar16.append(Class2HTML.referenceType(stringArrayVar40[intVar20]));
if (intVar20 < stringArrayVar40.length - 1) {
stringbuilderVar16.append("", "");
}
}
stringbuilderVar16.append(""):"").append(Class2HTML.referenceType(stringVar42));
break;
case Const.LDC_W:
case Const.LDC2_W:
intVar9 = bytes.readShort();
stringbuilderVar16.append(""<A HREF=\"""").append(class_name).append(""_cp.html#cp"").append(intVar9).append(""\"" TARGET=\""ConstantPool\"">"").append(Class2HTML.toHTML(constant_pool.constantToString(intVar9, constant_pool.getConstant(intVar9).getTag()))).append(""</a>"");
break;
case Const.LDC:
intVar9 = bytes.readUnsignedByte();
stringbuilderVar16.append(""<A HREF=\"""").append(class_name).append(""_cp.html#cp"").append(intVar9).append(""\"" TARGET=\""ConstantPool\"">"").append(Class2HTML.toHTML(constant_pool.constantToString(intVar9, constant_pool.getConstant(intVar9).getTag()))).append(""</a>"");
break;
case Const.ANEWARRAY:
intVar9 = bytes.readShort();
stringbuilderVar16.append(constant_html.referenceConstant(intVar9));
break;
case Const.MULTIANEWARRAY:
intVar9 = bytes.readShort();
int intVar44 = intLiteral45;
stringbuilderVar16.append(constant_html.referenceConstant(intVar9)).append("":"").append(intVar44).append(""-dimensional"");
break;
case Const.IINC:
if (wide) {
intVar11 = bytes.readShort();
intVar12 = bytes.readShort();
wide = false;
} else {
intVar11 = bytes.readUnsignedByte();
intVar12 = bytes.readByte();
}
stringbuilderVar16.append(""%"").append(intVar11).append("" "").append(intVar12);
break;
default:
if (Const.getNoOfOperands(shortVar1) > 0) {
for (int intVar46 = intLiteral47; intVar20 < intLiteral5; intVar20++) {
switch(Const.getOperandType(shortVar1, intVar20)) {
case Const.T_BYTE:
stringbuilderVar16.append(bytes.readUnsignedByte());
break;
case // Either branch or index
Const.T_SHORT:
stringbuilderVar16.append(bytes.readShort());
break;
case Const.T_INT:
stringbuilderVar16.append(bytes.readInt());
break;
default:
// Never reached
throw new IllegalStateException(""Unreachable default case reached! "" + Const.getOperandType(shortVar1, intVar20));
}
stringbuilderVar16.append(""&nbsp;"");
}
}
}
stringbuilderVar16.append(""</TD>"");
return stringbuilderVar16.toString();
}"
1044,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,codec,14,"return null;
","public static final byte[] decodeQuotedPrintable(byte[] bytes) throws DecoderException {
if (bytes == null) {
return null;
}
ByteArrayOutputStream buffer = new ByteArrayOutputStream();
for (int i = 0; i < bytes.length; i++) {
int b = bytes[i];
if (b == ESCAPE_CHAR) {
try {
int u = Utils.digit16(bytes[++i]);
int l = Utils.digit16(bytes[++i]);
buffer.write((char) ((u << 4) + l));
} catch (ArrayIndexOutOfBoundsException e) {
throw new DecoderException(""Invalid quoted-printable encoding"", e);
}
} else {
buffer.write(b);
}
}
return buffer.toByteArray();
}","public static final byte[] decodeQuotedPrintable(byte[] bytes) throws DecoderException {
if (bytes == null) {
return null;
}
ByteArrayOutputStream bytearrayoutputstreamVar1 = bytearrayoutputstreamLiteral2;
for (int intVar10 = intLiteral11; intVar3 < intLiteral1; intVar3++) {
int intVar5 = intLiteral6;
if (intVar5 == ESCAPE_CHAR) {
try {
int intVar7 = intLiteral8;
int intVar9 = intLiteral8;
bytearrayoutputstreamVar1.write((char) ((intVar7 << 4) + intVar9));
} catch (ArrayIndexOutOfBoundsException e) {
throw new DecoderException(""Invalid quoted-printable encoding"", e);
}
} else {
bytearrayoutputstreamVar1.write(intVar5);
}
}
return bytearrayoutputstreamVar1.toByteArray();
}"
1049,DODGY_CODE,SA_FIELD_DOUBLE_ASSIGNMENT,FP,codec,19,"modulus = (++modulus) % 4;
","void decode(byte[] in, int inPos, int inAvail) {
if (eof) {
return;
}
if (inAvail < 0) {
eof = true;
}
for (int i = 0; i < inAvail; i++) {
if (buffer == null || buffer.length - pos < decodeSize) {
resizeBuffer();
}
byte b = in[inPos++];
if (b == PAD) {
eof = true;
break;
} else {
if (b >= 0 && b < DECODE_TABLE.length) {
int result = DECODE_TABLE[b];
if (result >= 0) {
modulus = (++modulus) % 4;
x = (x << 6) + result;
if (modulus == 0) {
buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
buffer[pos++] = (byte) (x & MASK_8BITS);
}
}
}
}
}
// Two forms of EOF as far as base64 decoder is concerned: actual
if (eof && modulus != 0) {
x = x << 6;
switch(modulus) {
case 2:
x = x << 6;
buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
break;
case 3:
buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
break;
}
}
}","void decode(byte[] in, int inPos, int inAvail) {
if (eof) {
return;
}
if (inAvail < 0) {
eof = true;
}
for (int intVar7 = intLiteral8; intVar1 < intLiteral1; intVar1++) {
if (buffer == null || buffer.length - pos < decodeSize) {
resizeBuffer();
}
byte byteVar3 = byteLiteral4;
if (byteVar3 == PAD) {
eof = true;
break;
} else {
if (byteVar3 >= 0 && byteVar3 < DECODE_TABLE.length) {
int intVar5 = intLiteral6;
if (intVar5 >= 0) {
modulus = (++modulus) % 4;
x = (x << 6) + intVar5;
if (modulus == 0) {
buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
buffer[pos++] = (byte) (x & MASK_8BITS);
}
}
}
}
}
// Two forms of EOF as far as base64 decoder is concerned: actual
if (eof && modulus != 0) {
x = x << 6;
switch(modulus) {
case 2:
x = x << 6;
buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
break;
case 3:
buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
break;
}
}
}"
1054,I18N,DM_DEFAULT_ENCODING,FP,codec,24,"byte[] byteArray = object instanceof String ? ((String) object).getBytes() : (byte[]) object;
","public Object encode(Object object) throws EncoderException {
try {
byte[] byteArray = object instanceof String ? ((String) object).getBytes() : (byte[]) object;
return encodeHex(byteArray);
} catch (ClassCastException e) {
throw new EncoderException(e.getMessage());
}
}","public Object encode(Object object) throws EncoderException {
try {
byte[] byteArrayVar1 = byteArrayLiteral2;
return encodeHex(byteArrayVar1);
} catch (ClassCastException e) {
throw new EncoderException(e.getMessage());
}
}"
1067,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,codec,37,"return null;
","public static final byte[] decodeQuotedPrintable(byte[] bytes) throws DecoderException {
if (bytes == null) {
return null;
}
ByteArrayOutputStream buffer = new ByteArrayOutputStream();
for (int i = 0; i < bytes.length; i++) {
int b = bytes[i];
if (b == ESCAPE_CHAR) {
try {
int u = Character.digit((char) bytes[++i], 16);
int l = Character.digit((char) bytes[++i], 16);
if (u == -1 || l == -1) {
throw new DecoderException(""Invalid quoted-printable encoding"");
}
buffer.write((char) ((u << 4) + l));
} catch (ArrayIndexOutOfBoundsException e) {
throw new DecoderException(""Invalid quoted-printable encoding"");
}
} else {
buffer.write(b);
}
}
return buffer.toByteArray();
}","public static final byte[] decodeQuotedPrintable(byte[] bytes) throws DecoderException {
if (bytes == null) {
return null;
}
ByteArrayOutputStream bytearrayoutputstreamVar1 = bytearrayoutputstreamLiteral2;
for (int intVar10 = intLiteral11; intVar3 < intLiteral1; intVar3++) {
int intVar5 = intLiteral6;
if (intVar5 == ESCAPE_CHAR) {
try {
int intVar7 = intLiteral8;
int intVar9 = intLiteral8;
if (intVar7 == -1 || intVar9 == -1) {
throw new DecoderException(""Invalid quoted-printable encoding"");
}
bytearrayoutputstreamVar1.write((char) ((intVar7 << 4) + intVar9));
} catch (ArrayIndexOutOfBoundsException e) {
throw new DecoderException(""Invalid quoted-printable encoding"");
}
} else {
bytearrayoutputstreamVar1.write(intVar5);
}
}
return bytearrayoutputstreamVar1.toByteArray();
}"
1076,DODGY_CODE,SF_SWITCH_NO_DEFAULT,FP,codec,46,"switch (modulus) { 
case 1 : 
buffer[pos++] = encodeTable[(bitWorkArea >> 2) & MASK_6BITS]; 
buffer[pos++] = encodeTable[(bitWorkArea << 4) & MASK_6BITS]; 
if (encodeTable == STANDARD_ENCODE_TABLE) {
buffer[pos++] = PAD;
buffer[pos++] = PAD;
}
break;
case 2 : 
buffer[pos++] = encodeTable[(bitWorkArea >> 10) & MASK_6BITS];
buffer[pos++] = encodeTable[(bitWorkArea >> 4) & MASK_6BITS];
buffer[pos++] = encodeTable[(bitWorkArea << 2) & MASK_6BITS];
if (encodeTable == STANDARD_ENCODE_TABLE) {
buffer[pos++] = PAD;
","void encode(byte[] in, int inPos, int inAvail) {
if (eof) {
return;
}
if (inAvail < 0) {
eof = true;
if (0 == modulus && lineLength == 0) {
return;
}
ensureBufferSize(encodeSize);
int savedPos = pos;
switch(modulus) {
case 1:
buffer[pos++] = encodeTable[(bitWorkArea >> 2) & MASK_6BITS];
buffer[pos++] = encodeTable[(bitWorkArea << 4) & MASK_6BITS];
if (encodeTable == STANDARD_ENCODE_TABLE) {
buffer[pos++] = PAD;
buffer[pos++] = PAD;
}
break;
case 2:
buffer[pos++] = encodeTable[(bitWorkArea >> 10) & MASK_6BITS];
buffer[pos++] = encodeTable[(bitWorkArea >> 4) & MASK_6BITS];
buffer[pos++] = encodeTable[(bitWorkArea << 2) & MASK_6BITS];
if (encodeTable == STANDARD_ENCODE_TABLE) {
buffer[pos++] = PAD;
}
break;
}
currentLinePos += pos - savedPos;
if (lineLength > 0 && currentLinePos > 0) {
System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
pos += lineSeparator.length;
}
} else {
for (int i = 0; i < inAvail; i++) {
ensureBufferSize(encodeSize);
modulus = (modulus + 1) % BYTES_PER_UNENCODED_BLOCK;
int b = in[inPos++];
if (b < 0) {
b += 256;
}
bitWorkArea = (bitWorkArea << 8) + b;
if (0 == modulus) {
buffer[pos++] = encodeTable[(bitWorkArea >> 18) & MASK_6BITS];
buffer[pos++] = encodeTable[(bitWorkArea >> 12) & MASK_6BITS];
buffer[pos++] = encodeTable[(bitWorkArea >> 6) & MASK_6BITS];
buffer[pos++] = encodeTable[bitWorkArea & MASK_6BITS];
currentLinePos += BYTES_PER_ENCODED_BLOCK;
if (lineLength > 0 && lineLength <= currentLinePos) {
System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
pos += lineSeparator.length;
currentLinePos = 0;
}
}
}
}
}","void encode(byte[] in, int inPos, int inAvail) {
if (eof) {
return;
}
if (inAvail < 0) {
eof = true;
if (0 == modulus && lineLength == 0) {
return;
}
ensureBufferSize(encodeSize);
int intVar1 = intLiteral2;
switch(modulus) {
case 1:
buffer[pos++] = encodeTable[(bitWorkArea >> 2) & MASK_6BITS];
buffer[pos++] = encodeTable[(bitWorkArea << 4) & MASK_6BITS];
if (encodeTable == STANDARD_ENCODE_TABLE) {
buffer[pos++] = PAD;
buffer[pos++] = PAD;
}
break;
case 2:
buffer[pos++] = encodeTable[(bitWorkArea >> 10) & MASK_6BITS];
buffer[pos++] = encodeTable[(bitWorkArea >> 4) & MASK_6BITS];
buffer[pos++] = encodeTable[(bitWorkArea << 2) & MASK_6BITS];
if (encodeTable == STANDARD_ENCODE_TABLE) {
buffer[pos++] = PAD;
}
break;
}
currentLinePos += pos - intVar1;
if (lineLength > 0 && currentLinePos > 0) {
System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
pos += lineSeparator.length;
}
} else {
for (int intVar7 = intLiteral8; intVar3 < intLiteral1; intVar3++) {
ensureBufferSize(encodeSize);
modulus = (modulus + 1) % BYTES_PER_UNENCODED_BLOCK;
int intVar5 = intLiteral6;
if (intVar5 < 0) {
intVar5 += 256;
}
bitWorkArea = (bitWorkArea << 8) + intVar5;
if (0 == modulus) {
buffer[pos++] = encodeTable[(bitWorkArea >> 18) & MASK_6BITS];
buffer[pos++] = encodeTable[(bitWorkArea >> 12) & MASK_6BITS];
buffer[pos++] = encodeTable[(bitWorkArea >> 6) & MASK_6BITS];
buffer[pos++] = encodeTable[bitWorkArea & MASK_6BITS];
currentLinePos += BYTES_PER_ENCODED_BLOCK;
if (lineLength > 0 && lineLength <= currentLinePos) {
System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
pos += lineSeparator.length;
currentLinePos = 0;
}
}
}
}
}"
1081,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,codec,51,"return null;
","protected byte[] doEncoding(byte[] bytes) {
if (bytes == null) {
return null;
}
return Base64.encodeBase64(bytes);
}","protected byte[] doEncoding(byte[] bytes) {
if (bytes == null) {
return null;
}
return Base64.encodeBase64(bytes);
}"
1085,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,codec,55,"return null;
","public static final byte[] encodeQuotedPrintable(BitSet printable, byte[] bytes) {
if (bytes == null) {
return null;
}
if (printable == null) {
printable = PRINTABLE_CHARS;
}
ByteArrayOutputStream buffer = new ByteArrayOutputStream();
for (int i = 0; i < bytes.length; i++) {
int b = bytes[i];
if (b < 0) {
b = 256 + b;
}
if (printable.get(b)) {
buffer.write(b);
} else {
encodeQuotedPrintable(b, buffer);
}
}
return buffer.toByteArray();
}","public static final byte[] encodeQuotedPrintable(BitSet printable, byte[] bytes) {
if (bytes == null) {
return null;
}
if (printable == null) {
printable = PRINTABLE_CHARS;
}
ByteArrayOutputStream bytearrayoutputstreamVar1 = bytearrayoutputstreamLiteral2;
for (int intVar7 = intLiteral8; intVar3 < intLiteral1; intVar3++) {
int intVar5 = intLiteral6;
if (intVar5 < 0) {
intVar5 = 256 + intVar5;
}
if (printable.get(intVar5)) {
bytearrayoutputstreamVar1.write(intVar5);
} else {
encodeQuotedPrintable(intVar5, bytearrayoutputstreamVar1);
}
}
return bytearrayoutputstreamVar1.toByteArray();
}"
1093,DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,FP,codec,63,"if (m == null || !m.find()) {
","public static String md5Crypt(final byte[] keyBytes, final String salt, final String prefix) {
final int keyLen = keyBytes.length;
String saltString;
if (salt == null) {
saltString = B64.getRandomSalt(8);
} else {
final Pattern p = Pattern.compile(""^"" + prefix.replace(""$"", ""\\$"") + ""([\\.\\/a-zA-Z0-9]{1,8}).*"");
final Matcher m = p.matcher(salt);
if (m == null || !m.find()) {
throw new IllegalArgumentException(""Invalid salt value: "" + salt);
}
saltString = m.group(1);
}
final byte[] saltBytes = saltString.getBytes(Charsets.UTF_8);
final MessageDigest ctx = DigestUtils.getMd5Digest();
ctx.update(keyBytes);
ctx.update(prefix.getBytes(Charsets.UTF_8));
ctx.update(saltBytes);
MessageDigest ctx1 = DigestUtils.getMd5Digest();
ctx1.update(keyBytes);
ctx1.update(saltBytes);
ctx1.update(keyBytes);
byte[] finalb = ctx1.digest();
int ii = keyLen;
while (ii > 0) {
ctx.update(finalb, 0, ii > 16 ? 16 : ii);
ii -= 16;
}
Arrays.fill(finalb, (byte) 0);
ii = keyLen;
final int j = 0;
while (ii > 0) {
if ((ii & 1) == 1) {
ctx.update(finalb[j]);
} else {
ctx.update(keyBytes[j]);
}
ii >>= 1;
}
final StringBuilder passwd = new StringBuilder(prefix + saltString + ""$"");
finalb = ctx.digest();
for (int i = 0; i < ROUNDS; i++) {
ctx1 = DigestUtils.getMd5Digest();
if ((i & 1) != 0) {
ctx1.update(keyBytes);
} else {
ctx1.update(finalb, 0, BLOCKSIZE);
}
if (i % 3 != 0) {
ctx1.update(saltBytes);
}
if (i % 7 != 0) {
ctx1.update(keyBytes);
}
if ((i & 1) != 0) {
ctx1.update(finalb, 0, BLOCKSIZE);
} else {
ctx1.update(keyBytes);
}
finalb = ctx1.digest();
}
B64.b64from24bit(finalb[0], finalb[6], finalb[12], 4, passwd);
B64.b64from24bit(finalb[1], finalb[7], finalb[13], 4, passwd);
B64.b64from24bit(finalb[2], finalb[8], finalb[14], 4, passwd);
B64.b64from24bit(finalb[3], finalb[9], finalb[15], 4, passwd);
B64.b64from24bit(finalb[4], finalb[10], finalb[5], 4, passwd);
B64.b64from24bit((byte) 0, (byte) 0, finalb[11], 2, passwd);
ctx.reset();
ctx1.reset();
Arrays.fill(keyBytes, (byte) 0);
Arrays.fill(saltBytes, (byte) 0);
Arrays.fill(finalb, (byte) 0);
return passwd.toString();
}","public static String md5Crypt(final byte[] keyBytes, final String salt, final String prefix) {
final int intVar1 = intLiteral2;
String stringVar3;
if (salt == null) {
stringVar3 = B64.getRandomSalt(8);
} else {
final Pattern patternVar4 = patternLiteral5;
final Matcher matcherVar6 = matcherLiteral7;
if (matcherVar6 == null || !matcherVar6.find()) {
throw new IllegalArgumentException(""Invalid salt value: "" + salt);
}
stringVar3 = matcherVar6.group(1);
}
final byte[] byteArrayVar8 = byteArrayLiteral9;
final MessageDigest messagedigestVar10 = messagedigestLiteral11;
messagedigestVar10.update(keyBytes);
messagedigestVar10.update(prefix.getBytes(Charsets.UTF_8));
messagedigestVar10.update(byteArrayVar8);
MessageDigest messagedigestVar12 = messagedigestLiteral11;
messagedigestVar12.update(keyBytes);
messagedigestVar12.update(byteArrayVar8);
messagedigestVar12.update(keyBytes);
byte[] byteArrayVar13 = byteArrayLiteral14;
int intVar15 = intLiteral16;
while (intVar15 > 0) {
messagedigestVar10.update(byteArrayVar13, 0, intVar15 > 16 ? 16 : intVar15);
intVar15 -= 16;
}
Arrays.fill(byteArrayVar13, (byte) 0);
intVar15 = intVar1;
final int intVar17 = intLiteral18;
while (intVar15 > 0) {
if ((intVar15 & 1) == 1) {
messagedigestVar10.update(byteArrayVar13[intVar17]);
} else {
messagedigestVar10.update(keyBytes[intVar17]);
}
intVar15 >>= 1;
}
final StringBuilder stringbuilderVar19 = stringbuilderLiteral20;
byteArrayVar13 = messagedigestVar10.digest();
for (int intVar22 = intLiteral23; intVar21 < intLiteral1; intVar21++) {
messagedigestVar12 = DigestUtils.getMd5Digest();
if ((intVar21 & 1) != 0) {
messagedigestVar12.update(keyBytes);
} else {
messagedigestVar12.update(byteArrayVar13, 0, BLOCKSIZE);
}
if (intVar21 % 3 != 0) {
messagedigestVar12.update(byteArrayVar8);
}
if (intVar21 % 7 != 0) {
messagedigestVar12.update(keyBytes);
}
if ((intVar21 & 1) != 0) {
messagedigestVar12.update(byteArrayVar13, 0, BLOCKSIZE);
} else {
messagedigestVar12.update(keyBytes);
}
byteArrayVar13 = messagedigestVar12.digest();
}
B64.b64from24bit(byteArrayVar13[0], byteArrayVar13[6], byteArrayVar13[12], 4, stringbuilderVar19);
B64.b64from24bit(byteArrayVar13[1], byteArrayVar13[7], byteArrayVar13[13], 4, stringbuilderVar19);
B64.b64from24bit(byteArrayVar13[2], byteArrayVar13[8], byteArrayVar13[14], 4, stringbuilderVar19);
B64.b64from24bit(byteArrayVar13[3], byteArrayVar13[9], byteArrayVar13[15], 4, stringbuilderVar19);
B64.b64from24bit(byteArrayVar13[4], byteArrayVar13[10], byteArrayVar13[5], 4, stringbuilderVar19);
B64.b64from24bit((byte) 0, (byte) 0, byteArrayVar13[11], 2, stringbuilderVar19);
messagedigestVar10.reset();
messagedigestVar12.reset();
Arrays.fill(keyBytes, (byte) 0);
Arrays.fill(byteArrayVar8, (byte) 0);
Arrays.fill(byteArrayVar13, (byte) 0);
return stringbuilderVar19.toString();
}"
1097,DODGY_CODE,UC_USELESS_CONDITION,FP,codec,67,"} else if (sumLength >= EIGHT && sumLength <= ELEVEN) {
","int getMinRating(final int sumLength) {
int minRating = 0;
if (sumLength <= FOUR) {
minRating = FIVE;
} else if (sumLength >= FIVE && sumLength <= SEVEN) {
minRating = FOUR;
} else if (sumLength >= EIGHT && sumLength <= ELEVEN) {
minRating = THREE;
} else if (sumLength == TWELVE) {
minRating = TWO;
} else {
minRating = ONE;
}
return minRating;
}","int getMinRating(final int sumLength) {
int intVar1 = intLiteral2;
if (sumLength <= FOUR) {
intVar1 = FIVE;
} else if (sumLength >= FIVE && sumLength <= SEVEN) {
intVar1 = FOUR;
} else if (sumLength >= EIGHT && sumLength <= ELEVEN) {
intVar1 = THREE;
} else if (sumLength == TWELVE) {
intVar1 = TWO;
} else {
intVar1 = ONE;
}
return intVar1;
}"
1098,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,codec,68,"final SomeLanguages sl = (SomeLanguages) other;
","@Override
public LanguageSet restrictTo(final LanguageSet other) {
if (other == NO_LANGUAGES) {
return other;
} else if (other == ANY_LANGUAGE) {
return this;
} else {
final SomeLanguages sl = (SomeLanguages) other;
final Set<String> ls = new HashSet<String>(Math.min(languages.size(), sl.languages.size()));
for (String lang : languages) {
if (sl.languages.contains(lang)) {
ls.add(lang);
}
}
return from(ls);
}
}","@Override
public LanguageSet restrictTo(final LanguageSet other) {
if (other == NO_LANGUAGES) {
return other;
} else if (other == ANY_LANGUAGE) {
return this;
} else {
final SomeLanguages somelanguagesVar1 = somelanguagesLiteral2;
final Set<String> set<string>Var3 = set<string>Literal4;
for (String stringVar5 : languages) {
if (somelanguagesVar1.languages.contains(stringVar5)) {
set<string>Var3.add(stringVar5);
}
}
return from(set<string>Var3);
}
}"
1147,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,codec,117,"return null;
","@Override
protected byte[] doEncoding(final byte[] bytes) {
if (bytes == null) {
return null;
}
final byte[] data = QuotedPrintableCodec.encodeQuotedPrintable(PRINTABLE_CHARS, bytes);
if (this.encodeBlanks) {
for (int i = 0; i < data.length; i++) {
if (data[i] == BLANK) {
data[i] = UNDERSCORE;
}
}
}
return data;
}","@Override
protected byte[] doEncoding(final byte[] bytes) {
if (bytes == null) {
return null;
}
final byte[] byteArrayVar1 = byteArrayLiteral2;
if (this.encodeBlanks) {
for (int intVar5 = intLiteral6; intVar3 < intLiteral1; intVar3++) {
if (byteArrayVar1[intVar3] == BLANK) {
byteArrayVar1[intVar3] = UNDERSCORE;
}
}
}
return byteArrayVar1;
}"
1155,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,codec,125,"return null;
","private static byte[] getBytes(final String string, final Charset charset) {
if (string == null) {
return null;
}
return string.getBytes(charset);
}","private static byte[] getBytes(final String string, final Charset charset) {
if (string == null) {
return null;
}
return string.getBytes(charset);
}"
1178,PERFORMANCE,SS_SHOULD_BE_STATIC,FP,codec,148,protected final byte PAD = PAD_DEFAULT;,protected final byte PAD = PAD_DEFAULT;,protected final byte byteVar1 = byteLiteral2;
1183,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,codec,153,"return null;
","@Override
protected byte[] doEncoding(byte[] bytes) {
if (bytes == null) {
return null;
}
return Base64.encodeBase64(bytes);
}","@Override
protected byte[] doEncoding(byte[] bytes) {
if (bytes == null) {
return null;
}
return Base64.encodeBase64(bytes);
}"
1186,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,codec,156,"return null;
","public static final byte[] encodeQuotedPrintable(BitSet printable, byte[] bytes) {
if (bytes == null) {
return null;
}
if (printable == null) {
printable = PRINTABLE_CHARS;
}
ByteArrayOutputStream buffer = new ByteArrayOutputStream();
for (byte c : bytes) {
int b = c;
if (b < 0) {
b = 256 + b;
}
if (printable.get(b)) {
buffer.write(b);
} else {
encodeQuotedPrintable(b, buffer);
}
}
return buffer.toByteArray();
}","public static final byte[] encodeQuotedPrintable(BitSet printable, byte[] bytes) {
if (bytes == null) {
return null;
}
if (printable == null) {
printable = PRINTABLE_CHARS;
}
ByteArrayOutputStream bytearrayoutputstreamVar1 = bytearrayoutputstreamLiteral2;
for (byte byteVar3 : bytes) {
int intVar4 = intLiteral5;
if (intVar4 < 0) {
intVar4 = 256 + intVar4;
}
if (printable.get(intVar4)) {
bytearrayoutputstreamVar1.write(intVar4);
} else {
encodeQuotedPrintable(intVar4, bytearrayoutputstreamVar1);
}
}
return bytearrayoutputstreamVar1.toByteArray();
}"
1197,DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,FP,codec,167,"if (m == null || !m.find()) {
","private static String sha2Crypt(final byte[] keyBytes, final String salt, final String saltPrefix, final int blocksize, final String algorithm) {
final int keyLen = keyBytes.length;
int rounds = ROUNDS_DEFAULT;
boolean roundsCustom = false;
if (salt == null) {
throw new IllegalArgumentException(""Salt must not be null"");
}
final Matcher m = SALT_PATTERN.matcher(salt);
if (m == null || !m.find()) {
throw new IllegalArgumentException(""Invalid salt value: "" + salt);
}
if (m.group(3) != null) {
rounds = Integer.parseInt(m.group(3));
rounds = Math.max(ROUNDS_MIN, Math.min(ROUNDS_MAX, rounds));
roundsCustom = true;
}
final String saltString = m.group(4);
final byte[] saltBytes = saltString.getBytes(Charsets.UTF_8);
final int saltLen = saltBytes.length;
MessageDigest ctx = DigestUtils.getDigest(algorithm);
ctx.update(keyBytes);
// NB: the MD5 algorithm did add the $1$ salt_prefix. This is not deemed
ctx.update(saltBytes);
MessageDigest altCtx = DigestUtils.getDigest(algorithm);
altCtx.update(keyBytes);
altCtx.update(saltBytes);
altCtx.update(keyBytes);
byte[] altResult = altCtx.digest();
int cnt = keyBytes.length;
while (cnt > blocksize) {
ctx.update(altResult, 0, blocksize);
cnt -= blocksize;
}
ctx.update(altResult, 0, cnt);
// NB: this step differs significantly from the MD5 algorithm. It
cnt = keyBytes.length;
while (cnt > 0) {
if ((cnt & 1) != 0) {
ctx.update(altResult, 0, blocksize);
} else {
ctx.update(keyBytes);
}
cnt >>= 1;
}
altResult = ctx.digest();
altCtx = DigestUtils.getDigest(algorithm);
for (int i = 1; i <= keyLen; i++) {
altCtx.update(keyBytes);
}
byte[] tempResult = altCtx.digest();
final byte[] pBytes = new byte[keyLen];
int cp = 0;
while (cp < keyLen - blocksize) {
System.arraycopy(tempResult, 0, pBytes, cp, blocksize);
cp += blocksize;
}
System.arraycopy(tempResult, 0, pBytes, cp, keyLen - cp);
altCtx = DigestUtils.getDigest(algorithm);
for (int i = 1; i <= 16 + (altResult[0] & 0xff); i++) {
altCtx.update(saltBytes);
}
tempResult = altCtx.digest();
// Remark: The salt is limited to 16 chars, how does this make sense?
final byte[] sBytes = new byte[saltLen];
cp = 0;
while (cp < saltLen - blocksize) {
System.arraycopy(tempResult, 0, sBytes, cp, blocksize);
cp += blocksize;
}
System.arraycopy(tempResult, 0, sBytes, cp, saltLen - cp);
for (int i = 0; i <= rounds - 1; i++) {
ctx = DigestUtils.getDigest(algorithm);
if ((i & 1) != 0) {
ctx.update(pBytes, 0, keyLen);
} else {
ctx.update(altResult, 0, blocksize);
}
if (i % 3 != 0) {
ctx.update(sBytes, 0, saltLen);
}
if (i % 7 != 0) {
ctx.update(pBytes, 0, keyLen);
}
if ((i & 1) != 0) {
ctx.update(altResult, 0, blocksize);
} else {
ctx.update(pBytes, 0, keyLen);
}
altResult = ctx.digest();
}
// size specified above, consisting of multiple pieces:
final StringBuilder buffer = new StringBuilder(saltPrefix);
if (roundsCustom) {
buffer.append(ROUNDS_PREFIX);
buffer.append(rounds);
buffer.append(""$"");
}
buffer.append(saltString);
buffer.append(""$"");
// follows:
// characters as output:
// 1. character: the six low bits of the first byte
// 2. character: the two high bits of the first byte and the
// 3. character: the four high bytes from the second byte and
// 4. character: the six high bits from the third byte
// This was just a safeguard in the C implementation:
if (blocksize == 32) {
B64.b64from24bit(altResult[0], altResult[10], altResult[20], 4, buffer);
B64.b64from24bit(altResult[21], altResult[1], altResult[11], 4, buffer);
B64.b64from24bit(altResult[12], altResult[22], altResult[2], 4, buffer);
B64.b64from24bit(altResult[3], altResult[13], altResult[23], 4, buffer);
B64.b64from24bit(altResult[24], altResult[4], altResult[14], 4, buffer);
B64.b64from24bit(altResult[15], altResult[25], altResult[5], 4, buffer);
B64.b64from24bit(altResult[6], altResult[16], altResult[26], 4, buffer);
B64.b64from24bit(altResult[27], altResult[7], altResult[17], 4, buffer);
B64.b64from24bit(altResult[18], altResult[28], altResult[8], 4, buffer);
B64.b64from24bit(altResult[9], altResult[19], altResult[29], 4, buffer);
B64.b64from24bit((byte) 0, altResult[31], altResult[30], 3, buffer);
} else {
B64.b64from24bit(altResult[0], altResult[21], altResult[42], 4, buffer);
B64.b64from24bit(altResult[22], altResult[43], altResult[1], 4, buffer);
B64.b64from24bit(altResult[44], altResult[2], altResult[23], 4, buffer);
B64.b64from24bit(altResult[3], altResult[24], altResult[45], 4, buffer);
B64.b64from24bit(altResult[25], altResult[46], altResult[4], 4, buffer);
B64.b64from24bit(altResult[47], altResult[5], altResult[26], 4, buffer);
B64.b64from24bit(altResult[6], altResult[27], altResult[48], 4, buffer);
B64.b64from24bit(altResult[28], altResult[49], altResult[7], 4, buffer);
B64.b64from24bit(altResult[50], altResult[8], altResult[29], 4, buffer);
B64.b64from24bit(altResult[9], altResult[30], altResult[51], 4, buffer);
B64.b64from24bit(altResult[31], altResult[52], altResult[10], 4, buffer);
B64.b64from24bit(altResult[53], altResult[11], altResult[32], 4, buffer);
B64.b64from24bit(altResult[12], altResult[33], altResult[54], 4, buffer);
B64.b64from24bit(altResult[34], altResult[55], altResult[13], 4, buffer);
B64.b64from24bit(altResult[56], altResult[14], altResult[35], 4, buffer);
B64.b64from24bit(altResult[15], altResult[36], altResult[57], 4, buffer);
B64.b64from24bit(altResult[37], altResult[58], altResult[16], 4, buffer);
B64.b64from24bit(altResult[59], altResult[17], altResult[38], 4, buffer);
B64.b64from24bit(altResult[18], altResult[39], altResult[60], 4, buffer);
B64.b64from24bit(altResult[40], altResult[61], altResult[19], 4, buffer);
B64.b64from24bit(altResult[62], altResult[20], altResult[41], 4, buffer);
B64.b64from24bit((byte) 0, (byte) 0, altResult[63], 2, buffer);
}
Arrays.fill(tempResult, (byte) 0);
Arrays.fill(pBytes, (byte) 0);
Arrays.fill(sBytes, (byte) 0);
ctx.reset();
altCtx.reset();
Arrays.fill(keyBytes, (byte) 0);
Arrays.fill(saltBytes, (byte) 0);
return buffer.toString();
}","private static String sha2Crypt(final byte[] keyBytes, final String salt, final String saltPrefix, final int blocksize, final String algorithm) {
final int intVar1 = intLiteral2;
int intVar3 = intLiteral4;
boolean booleanVar5 = booleanLiteral6;
if (salt == null) {
throw new IllegalArgumentException(""Salt must not be null"");
}
final Matcher matcherVar7 = matcherLiteral8;
if (matcherVar7 == null || !matcherVar7.find()) {
throw new IllegalArgumentException(""Invalid salt value: "" + salt);
}
if (matcherVar7.group(3) != null) {
intVar3 = Integer.parseInt(matcherVar7.group(3));
intVar3 = Math.max(ROUNDS_MIN, Math.min(ROUNDS_MAX, intVar3));
booleanVar5 = true;
}
final String stringVar9 = stringLiteral10;
final byte[] byteArrayVar11 = byteArrayLiteral12;
final int intVar13 = intLiteral14;
MessageDigest messagedigestVar15 = messagedigestLiteral16;
messagedigestVar15.update(keyBytes);
// NB: the MD5 algorithm did add the $1$ salt_prefix. This is not deemed
messagedigestVar15.update(byteArrayVar11);
MessageDigest messagedigestVar17 = messagedigestLiteral16;
messagedigestVar17.update(keyBytes);
messagedigestVar17.update(byteArrayVar11);
messagedigestVar17.update(keyBytes);
byte[] byteArrayVar18 = byteArrayLiteral19;
int intVar20 = intLiteral2;
while (intVar20 > blocksize) {
messagedigestVar15.update(byteArrayVar18, 0, blocksize);
intVar20 -= blocksize;
}
messagedigestVar15.update(byteArrayVar18, 0, intVar20);
// NB: this step differs significantly from the MD5 algorithm. It
intVar20 = keyBytes.length;
while (intVar20 > 0) {
if ((intVar20 & 1) != 0) {
messagedigestVar15.update(byteArrayVar18, 0, blocksize);
} else {
messagedigestVar15.update(keyBytes);
}
intVar20 >>= 1;
}
byteArrayVar18 = messagedigestVar15.digest();
messagedigestVar17 = DigestUtils.getDigest(algorithm);
for (int intVar32 = intLiteral33; intVar21 <= intLiteral1; intVar21++) {
messagedigestVar17.update(keyBytes);
}
byte[] byteArrayVar23 = byteArrayLiteral19;
final byte[] byteArrayVar24 = byteArrayLiteral25;
int intVar26 = intLiteral27;
while (intVar26 < intVar1 - blocksize) {
System.arraycopy(byteArrayVar23, 0, byteArrayVar24, intVar26, blocksize);
intVar26 += blocksize;
}
System.arraycopy(byteArrayVar23, 0, byteArrayVar24, intVar26, intVar1 - intVar26);
messagedigestVar17 = DigestUtils.getDigest(algorithm);
for (int intVar32 = intLiteral33; intVar21 <= intLiteral2; intVar21++) {
messagedigestVar17.update(byteArrayVar11);
}
byteArrayVar23 = messagedigestVar17.digest();
// Remark: The salt is limited to 16 chars, how does this make sense?
final byte[] byteArrayVar28 = byteArrayLiteral29;
intVar26 = 0;
while (intVar26 < intVar13 - blocksize) {
System.arraycopy(byteArrayVar23, 0, byteArrayVar28, intVar26, blocksize);
intVar26 += blocksize;
}
System.arraycopy(byteArrayVar23, 0, byteArrayVar28, intVar26, intVar13 - intVar26);
for (int intVar32 = intLiteral34; intVar21 <= intLiteral3; intVar21++) {
messagedigestVar15 = DigestUtils.getDigest(algorithm);
if ((intVar21 & 1) != 0) {
messagedigestVar15.update(byteArrayVar24, 0, intVar1);
} else {
messagedigestVar15.update(byteArrayVar18, 0, blocksize);
}
if (intVar21 % 3 != 0) {
messagedigestVar15.update(byteArrayVar28, 0, intVar13);
}
if (intVar21 % 7 != 0) {
messagedigestVar15.update(byteArrayVar24, 0, intVar1);
}
if ((intVar21 & 1) != 0) {
messagedigestVar15.update(byteArrayVar18, 0, blocksize);
} else {
messagedigestVar15.update(byteArrayVar24, 0, intVar1);
}
byteArrayVar18 = messagedigestVar15.digest();
}
// size specified above, consisting of multiple pieces:
final StringBuilder stringbuilderVar30 = stringbuilderLiteral31;
if (booleanVar5) {
stringbuilderVar30.append(ROUNDS_PREFIX);
stringbuilderVar30.append(intVar3);
stringbuilderVar30.append(""$"");
}
stringbuilderVar30.append(stringVar9);
stringbuilderVar30.append(""$"");
// follows:
// characters as output:
// 1. character: the six low bits of the first byte
// 2. character: the two high bits of the first byte and the
// 3. character: the four high bytes from the second byte and
// 4. character: the six high bits from the third byte
// This was just a safeguard in the C implementation:
if (blocksize == 32) {
B64.b64from24bit(byteArrayVar18[0], byteArrayVar18[10], byteArrayVar18[20], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[21], byteArrayVar18[1], byteArrayVar18[11], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[12], byteArrayVar18[22], byteArrayVar18[2], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[3], byteArrayVar18[13], byteArrayVar18[23], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[24], byteArrayVar18[4], byteArrayVar18[14], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[15], byteArrayVar18[25], byteArrayVar18[5], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[6], byteArrayVar18[16], byteArrayVar18[26], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[27], byteArrayVar18[7], byteArrayVar18[17], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[18], byteArrayVar18[28], byteArrayVar18[8], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[9], byteArrayVar18[19], byteArrayVar18[29], 4, stringbuilderVar30);
B64.b64from24bit((byte) 0, byteArrayVar18[31], byteArrayVar18[30], 3, stringbuilderVar30);
} else {
B64.b64from24bit(byteArrayVar18[0], byteArrayVar18[21], byteArrayVar18[42], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[22], byteArrayVar18[43], byteArrayVar18[1], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[44], byteArrayVar18[2], byteArrayVar18[23], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[3], byteArrayVar18[24], byteArrayVar18[45], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[25], byteArrayVar18[46], byteArrayVar18[4], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[47], byteArrayVar18[5], byteArrayVar18[26], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[6], byteArrayVar18[27], byteArrayVar18[48], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[28], byteArrayVar18[49], byteArrayVar18[7], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[50], byteArrayVar18[8], byteArrayVar18[29], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[9], byteArrayVar18[30], byteArrayVar18[51], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[31], byteArrayVar18[52], byteArrayVar18[10], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[53], byteArrayVar18[11], byteArrayVar18[32], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[12], byteArrayVar18[33], byteArrayVar18[54], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[34], byteArrayVar18[55], byteArrayVar18[13], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[56], byteArrayVar18[14], byteArrayVar18[35], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[15], byteArrayVar18[36], byteArrayVar18[57], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[37], byteArrayVar18[58], byteArrayVar18[16], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[59], byteArrayVar18[17], byteArrayVar18[38], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[18], byteArrayVar18[39], byteArrayVar18[60], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[40], byteArrayVar18[61], byteArrayVar18[19], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[62], byteArrayVar18[20], byteArrayVar18[41], 4, stringbuilderVar30);
B64.b64from24bit((byte) 0, (byte) 0, byteArrayVar18[63], 2, stringbuilderVar30);
}
Arrays.fill(byteArrayVar23, (byte) 0);
Arrays.fill(byteArrayVar24, (byte) 0);
Arrays.fill(byteArrayVar28, (byte) 0);
messagedigestVar15.reset();
messagedigestVar17.reset();
Arrays.fill(keyBytes, (byte) 0);
Arrays.fill(byteArrayVar11, (byte) 0);
return stringbuilderVar30.toString();
}"
1204,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,codec,174,"return null;
","@Override
protected byte[] doEncoding(final byte[] bytes) {
if (bytes == null) {
return null;
}
return Base64.encodeBase64(bytes);
}","@Override
protected byte[] doEncoding(final byte[] bytes) {
if (bytes == null) {
return null;
}
return Base64.encodeBase64(bytes);
}"
1213,PERFORMANCE,SS_SHOULD_BE_STATIC,FP,codec,183,"@Deprecated
protected final byte PAD = PAD_DEFAULT;","@Deprecated
protected final byte PAD = PAD_DEFAULT;","@Deprecated
protected final byte byteVar1 = byteLiteral2;"
1226,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,codec,196,"return null;
","@Override
protected byte[] doEncoding(final byte[] bytes) {
if (bytes == null) {
return null;
}
final byte[] data = QuotedPrintableCodec.encodeQuotedPrintable(PRINTABLE_CHARS, bytes);
if (this.encodeBlanks) {
for (int i = 0; i < data.length; i++) {
if (data[i] == BLANK) {
data[i] = UNDERSCORE;
}
}
}
return data;
}","@Override
protected byte[] doEncoding(final byte[] bytes) {
if (bytes == null) {
return null;
}
final byte[] byteArrayVar1 = byteArrayLiteral2;
if (this.encodeBlanks) {
for (int intVar5 = intLiteral6; intVar3 < intLiteral1; intVar3++) {
if (byteArrayVar1[intVar3] == BLANK) {
byteArrayVar1[intVar3] = UNDERSCORE;
}
}
}
return byteArrayVar1;
}"
1235,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,codec,205,"return null;
","private static byte[] getBytes(final String string, final Charset charset) {
if (string == null) {
return null;
}
return string.getBytes(charset);
}","private static byte[] getBytes(final String string, final Charset charset) {
if (string == null) {
return null;
}
return string.getBytes(charset);
}"
1238,I18N,DM_CONVERT_CASE,FP,codec,208,"String replacedName = name.toUpperCase();
","String removeDoubleConsonants(final String name) {
String replacedName = name.toUpperCase();
for (final String dc : DOUBLE_CONSONANT) {
if (replacedName.contains(dc)) {
final String singleLetter = dc.substring(0, 1);
replacedName = replacedName.replace(dc, singleLetter);
}
}
return replacedName;
}","String removeDoubleConsonants(final String name) {
String stringVar1 = stringLiteral2;
for (final String stringVar3 : DOUBLE_CONSONANT) {
if (stringVar1.contains(stringVar3)) {
final String stringVar4 = stringLiteral5;
stringVar1 = stringVar1.replace(stringVar3, stringVar4);
}
}
return stringVar1;
}"
1240,DODGY_CODE,UC_USELESS_CONDITION,FP,codec,210,"} else if (sumLength >= EIGHT && sumLength <= ELEVEN) {
","int getMinRating(final int sumLength) {
int minRating = 0;
if (sumLength <= FOUR) {
minRating = FIVE;
} else if (sumLength >= FIVE && sumLength <= SEVEN) {
minRating = FOUR;
} else if (sumLength >= EIGHT && sumLength <= ELEVEN) {
minRating = THREE;
} else if (sumLength == TWELVE) {
minRating = TWO;
} else {
minRating = ONE;
}
return minRating;
}","int getMinRating(final int sumLength) {
int intVar1 = intLiteral2;
if (sumLength <= FOUR) {
intVar1 = FIVE;
} else if (sumLength >= FIVE && sumLength <= SEVEN) {
intVar1 = FOUR;
} else if (sumLength >= EIGHT && sumLength <= ELEVEN) {
intVar1 = THREE;
} else if (sumLength == TWELVE) {
intVar1 = TWO;
} else {
intVar1 = ONE;
}
return intVar1;
}"
1258,DODGY_CODE,SF_SWITCH_FALLTHROUGH,FP,codec,228,"h ^= (data[index + 2] & 0xff) << 16;
case 2:
h ^= (data[index + 1] & 0xff) << 8;
","public static int hash32(final byte[] data, final int length, final int seed) {
int h = seed ^ length;
final int nblocks = length >> 2;
for (int i = 0; i < nblocks; i++) {
final int index = (i << 2);
int k = getLittleEndianInt(data, index);
k *= M32;
k ^= k >>> R32;
k *= M32;
h *= M32;
h ^= k;
}
final int index = (nblocks << 2);
switch(length - index) {
case 3:
h ^= (data[index + 2] & 0xff) << 16;
case 2:
h ^= (data[index + 1] & 0xff) << 8;
case 1:
h ^= (data[index] & 0xff);
h *= M32;
}
h ^= h >>> 13;
h *= M32;
h ^= h >>> 15;
return h;
}","public static int hash32(final byte[] data, final int length, final int seed) {
int intVar1 = intLiteral2;
final int intVar3 = intLiteral4;
for (int intVar12 = intLiteral13; intVar5 < intLiteral1; intVar5++) {
final int intVar7 = intLiteral8;
int intVar9 = intLiteral10;
intVar9 *= M32;
intVar9 ^= intVar9 >>> R32;
intVar9 *= M32;
intVar1 *= M32;
intVar1 ^= intVar9;
}
final int intVar7 = intLiteral11;
switch(length - intVar7) {
case 3:
intVar1 ^= (data[intVar7 + 2] & 0xff) << 16;
case 2:
intVar1 ^= (data[intVar7 + 1] & 0xff) << 8;
case 1:
intVar1 ^= (data[intVar7] & 0xff);
intVar1 *= M32;
}
intVar1 ^= intVar1 >>> 13;
intVar1 *= M32;
intVar1 ^= intVar1 >>> 15;
return intVar1;
}"
1267,DODGY_CODE,SF_SWITCH_FALLTHROUGH,FP,codec,237,"k1 ^= (unprocessed[2] & 0xff) << 16;
case 2:
k1 ^= (unprocessed[1] & 0xff) << 8;
","int finalise(final int hash, final int unprocessedLength, final byte[] unprocessed, final int totalLen) {
int result = hash;
int k1 = 0;
switch(unprocessedLength) {
case 3:
k1 ^= (unprocessed[2] & 0xff) << 16;
case 2:
k1 ^= (unprocessed[1] & 0xff) << 8;
case 1:
k1 ^= (unprocessed[0] & 0xff);
k1 *= C1_32;
k1 = Integer.rotateLeft(k1, R1_32);
k1 *= C2_32;
result ^= k1;
}
result ^= totalLen;
return fmix32(result);
}","int finalise(final int hash, final int unprocessedLength, final byte[] unprocessed, final int totalLen) {
int intVar1 = intLiteral2;
int intVar3 = intLiteral4;
switch(unprocessedLength) {
case 3:
intVar3 ^= (unprocessed[2] & 0xff) << 16;
case 2:
intVar3 ^= (unprocessed[1] & 0xff) << 8;
case 1:
intVar3 ^= (unprocessed[0] & 0xff);
intVar3 *= C1_32;
intVar3 = Integer.rotateLeft(intVar3, R1_32);
intVar3 *= C2_32;
intVar1 ^= intVar3;
}
intVar1 ^= totalLen;
return fmix32(intVar1);
}"
1275,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,codec,245,"final SomeLanguages someLanguages = (SomeLanguages) other;
","@Override
public LanguageSet merge(final LanguageSet other) {
if (other == NO_LANGUAGES) {
return this;
}
if (other == ANY_LANGUAGE) {
return other;
}
final SomeLanguages someLanguages = (SomeLanguages) other;
final Set<String> set = new HashSet<>(languages);
set.addAll(someLanguages.languages);
return from(set);
}","@Override
public LanguageSet merge(final LanguageSet other) {
if (other == NO_LANGUAGES) {
return this;
}
if (other == ANY_LANGUAGE) {
return other;
}
final SomeLanguages somelanguagesVar1 = somelanguagesLiteral2;
final Set<String> set<string>Var3 = set<string>Literal4;
set<string>Var3.addAll(somelanguagesVar1.languages);
return from(set<string>Var3);
}"
1303,MALICIOUS_CODE,MS_SHOULD_BE_FINAL,FP,codec,273,protected static byte ESCAPE_CHAR = '%';,protected static byte ESCAPE_CHAR = '%';,protected static byte byteVar1 = byteLiteral2;
1326,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,codec,296,"return null;
","public static byte[] getBytesUnchecked(final String string, final String charsetName) {
if (string == null) {
return null;
}
try {
return string.getBytes(charsetName);
} catch (final UnsupportedEncodingException e) {
throw StringUtils.newIllegalStateException(charsetName, e);
}
}","public static byte[] getBytesUnchecked(final String string, final String charsetName) {
if (string == null) {
return null;
}
try {
return string.getBytes(charsetName);
} catch (final UnsupportedEncodingException e) {
throw StringUtils.newIllegalStateException(charsetName, e);
}
}"
1333,DODGY_CODE,SF_SWITCH_NO_DEFAULT,FP,codec,303,"switch (offset + length - index) {
case 3:
k1 ^= (data[index + 2] & 0xff) << 16;
case 2:
k1 ^= (data[index + 1] & 0xff) << 8;
case 1:
k1 ^= (data[index] & 0xff);
k1 *= C1_32;
k1 = Integer.rotateLeft(k1, R1_32);
k1 *= C2_32;
hash ^= k1;
","public static int hash32x86(final byte[] data, final int offset, final int length, final int seed) {
int hash = seed;
final int nblocks = length >> 2;
for (int i = 0; i < nblocks; i++) {
final int index = offset + (i << 2);
final int k = getLittleEndianInt(data, index);
hash = mix32(k, hash);
}
final int index = offset + (nblocks << 2);
int k1 = 0;
switch(offset + length - index) {
case 3:
k1 ^= (data[index + 2] & 0xff) << 16;
case 2:
k1 ^= (data[index + 1] & 0xff) << 8;
case 1:
k1 ^= (data[index] & 0xff);
k1 *= C1_32;
k1 = Integer.rotateLeft(k1, R1_32);
k1 *= C2_32;
hash ^= k1;
}
hash ^= length;
return fmix32(hash);
}","public static int hash32x86(final byte[] data, final int offset, final int length, final int seed) {
int intVar1 = intLiteral2;
final int intVar3 = intLiteral4;
for (int intVar13 = intLiteral14; intVar5 < intLiteral1; intVar5++) {
final int intVar7 = intLiteral8;
final int intVar9 = intLiteral10;
intVar1 = mix32(intVar9, intVar1);
}
final int intVar7 = intLiteral11;
int intVar12 = intLiteral6;
switch(offset + length - intVar7) {
case 3:
intVar12 ^= (data[intVar7 + 2] & 0xff) << 16;
case 2:
intVar12 ^= (data[intVar7 + 1] & 0xff) << 8;
case 1:
intVar12 ^= (data[intVar7] & 0xff);
intVar12 *= C1_32;
intVar12 = Integer.rotateLeft(intVar12, R1_32);
intVar12 *= C2_32;
intVar1 ^= intVar12;
}
intVar1 ^= length;
return fmix32(intVar1);
}"
1336,DODGY_CODE,SF_SWITCH_NO_DEFAULT,FP,codec,306,"switch (offset + length - index) {
case 3:
k1 ^= data[index + 2] << 16;
case 2:
k1 ^= data[index + 1] << 8;
case 1:
k1 ^= data[index];
k1 *= C1_32;
k1 = Integer.rotateLeft(k1, R1_32);
k1 *= C2_32;
hash ^= k1;
","@Deprecated
public static int hash32(final byte[] data, final int offset, final int length, final int seed) {
int hash = seed;
final int nblocks = length >> 2;
for (int i = 0; i < nblocks; i++) {
final int index = offset + (i << 2);
final int k = getLittleEndianInt(data, index);
hash = mix32(k, hash);
}
// Note: This fails to apply masking using 0xff to the 3 remaining bytes.
final int index = offset + (nblocks << 2);
int k1 = 0;
switch(offset + length - index) {
case 3:
k1 ^= data[index + 2] << 16;
case 2:
k1 ^= data[index + 1] << 8;
case 1:
k1 ^= data[index];
k1 *= C1_32;
k1 = Integer.rotateLeft(k1, R1_32);
k1 *= C2_32;
hash ^= k1;
}
hash ^= length;
return fmix32(hash);
}","@Deprecated
public static int hash32(final byte[] data, final int offset, final int length, final int seed) {
int intVar1 = intLiteral2;
final int intVar3 = intLiteral4;
for (int intVar13 = intLiteral14; intVar5 < intLiteral1; intVar5++) {
final int intVar7 = intLiteral8;
final int intVar9 = intLiteral10;
intVar1 = mix32(intVar9, intVar1);
}
// Note: This fails to apply masking using 0xff to the 3 remaining bytes.
final int intVar7 = intLiteral11;
int intVar12 = intLiteral6;
switch(offset + length - intVar7) {
case 3:
intVar12 ^= data[intVar7 + 2] << 16;
case 2:
intVar12 ^= data[intVar7 + 1] << 8;
case 1:
intVar12 ^= data[intVar7];
intVar12 *= C1_32;
intVar12 = Integer.rotateLeft(intVar12, R1_32);
intVar12 *= C2_32;
intVar1 ^= intVar12;
}
intVar1 ^= length;
return fmix32(intVar1);
}"
1353,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,codec,323,"return null;
","@Override
protected byte[] doDecoding(final byte[] bytes) throws DecoderException {
if (bytes == null) {
return null;
}
boolean hasUnderscores = false;
for (final byte b : bytes) {
if (b == UNDERSCORE) {
hasUnderscores = true;
break;
}
}
if (hasUnderscores) {
final byte[] tmp = new byte[bytes.length];
for (int i = 0; i < bytes.length; i++) {
final byte b = bytes[i];
if (b != UNDERSCORE) {
tmp[i] = b;
} else {
tmp[i] = SPACE;
}
}
return QuotedPrintableCodec.decodeQuotedPrintable(tmp);
}
return QuotedPrintableCodec.decodeQuotedPrintable(bytes);
}","@Override
protected byte[] doDecoding(final byte[] bytes) throws DecoderException {
if (bytes == null) {
return null;
}
boolean booleanVar1 = booleanLiteral2;
for (final byte byteVar3 : bytes) {
if (byteVar3 == UNDERSCORE) {
booleanVar1 = true;
break;
}
}
if (booleanVar1) {
final byte[] byteArrayVar4 = byteArrayLiteral5;
for (int intVar9 = intLiteral10; intVar6 < intLiteral1; intVar6++) {
final byte byteVar3 = byteLiteral8;
if (byteVar3 != UNDERSCORE) {
byteArrayVar4[intVar6] = byteVar3;
} else {
byteArrayVar4[intVar6] = SPACE;
}
}
return QuotedPrintableCodec.decodeQuotedPrintable(byteArrayVar4);
}
return QuotedPrintableCodec.decodeQuotedPrintable(bytes);
}"
1356,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,codec,326,"return null;
","public static final byte[] decodeQuotedPrintable(final byte[] bytes) throws DecoderException {
if (bytes == null) {
return null;
}
final ByteArrayOutputStream buffer = new ByteArrayOutputStream();
for (int i = 0; i < bytes.length; i++) {
final int b = bytes[i];
if (b == ESCAPE_CHAR) {
try {
if (bytes[++i] == CR) {
continue;
}
final int u = Utils.digit16(bytes[i]);
final int l = Utils.digit16(bytes[++i]);
buffer.write((char) ((u << 4) + l));
} catch (final ArrayIndexOutOfBoundsException e) {
throw new DecoderException(""Invalid quoted-printable encoding"", e);
}
} else if (b != CR && b != LF) {
buffer.write(b);
}
}
return buffer.toByteArray();
}","public static final byte[] decodeQuotedPrintable(final byte[] bytes) throws DecoderException {
if (bytes == null) {
return null;
}
final ByteArrayOutputStream bytearrayoutputstreamVar1 = bytearrayoutputstreamLiteral2;
for (int intVar11 = intLiteral12; intVar3 < intLiteral1; intVar3++) {
final int intVar5 = intLiteral6;
if (intVar5 == ESCAPE_CHAR) {
try {
if (bytes[++intVar3] == CR) {
continue;
}
final int intVar7 = intLiteral8;
final int intVar9 = intLiteral10;
bytearrayoutputstreamVar1.write((char) ((intVar7 << 4) + intVar9));
} catch (final ArrayIndexOutOfBoundsException e) {
throw new DecoderException(""Invalid quoted-printable encoding"", e);
}
} else if (intVar5 != CR && intVar5 != LF) {
bytearrayoutputstreamVar1.write(intVar5);
}
}
return bytearrayoutputstreamVar1.toByteArray();
}"
1431,I18N,DM_DEFAULT_ENCODING,FP,codec,401,"return md5(data.getBytes());
","public static byte[] md5(String data) {
return md5(data.getBytes());
}","public static byte[] md5(String data) {
return md5(data.getBytes());
}"
1443,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,codec,413,"return null;
","public static final byte[] decodeUrl(byte[] bytes) throws DecoderException {
if (bytes == null) {
return null;
}
ByteArrayOutputStream buffer = new ByteArrayOutputStream();
for (int i = 0; i < bytes.length; i++) {
int b = bytes[i];
if (b == '+') {
buffer.write(' ');
} else if (b == '%') {
try {
int u = Character.digit((char) bytes[++i], 16);
int l = Character.digit((char) bytes[++i], 16);
if (u == -1 || l == -1) {
throw new DecoderException(""Invalid URL encoding"");
}
buffer.write((char) ((u << 4) + l));
} catch (ArrayIndexOutOfBoundsException e) {
throw new DecoderException(""Invalid URL encoding"");
}
} else {
buffer.write(b);
}
}
return buffer.toByteArray();
}","public static final byte[] decodeUrl(byte[] bytes) throws DecoderException {
if (bytes == null) {
return null;
}
ByteArrayOutputStream bytearrayoutputstreamVar1 = bytearrayoutputstreamLiteral2;
for (int intVar10 = intLiteral11; intVar3 < intLiteral1; intVar3++) {
int intVar5 = intLiteral6;
if (intVar5 == '+') {
bytearrayoutputstreamVar1.write(' ');
} else if (intVar5 == '%') {
try {
int intVar7 = intLiteral8;
int intVar9 = intLiteral8;
if (intVar7 == -1 || intVar9 == -1) {
throw new DecoderException(""Invalid URL encoding"");
}
bytearrayoutputstreamVar1.write((char) ((intVar7 << 4) + intVar9));
} catch (ArrayIndexOutOfBoundsException e) {
throw new DecoderException(""Invalid URL encoding"");
}
} else {
bytearrayoutputstreamVar1.write(intVar5);
}
}
return bytearrayoutputstreamVar1.toByteArray();
}"
1445,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,codec,415,"return null;
","public static final byte[] encodeUrl(BitSet urlsafe, byte[] bytes) {
if (bytes == null) {
return null;
}
if (urlsafe == null) {
urlsafe = WWW_FORM_URL;
}
ByteArrayOutputStream buffer = new ByteArrayOutputStream();
for (int i = 0; i < bytes.length; i++) {
int b = bytes[i];
if (b < 0) {
b = 256 + b;
}
if (urlsafe.get(b)) {
if (b == ' ') {
b = '+';
}
buffer.write(b);
} else {
buffer.write('%');
char hex1 = Character.toUpperCase(Character.forDigit((b >> 4) & 0xF, 16));
char hex2 = Character.toUpperCase(Character.forDigit(b & 0xF, 16));
buffer.write(hex1);
buffer.write(hex2);
}
}
return buffer.toByteArray();
}","public static final byte[] encodeUrl(BitSet urlsafe, byte[] bytes) {
if (bytes == null) {
return null;
}
if (urlsafe == null) {
urlsafe = WWW_FORM_URL;
}
ByteArrayOutputStream bytearrayoutputstreamVar1 = bytearrayoutputstreamLiteral2;
for (int intVar11 = intLiteral12; intVar3 < intLiteral1; intVar3++) {
int intVar5 = intLiteral6;
if (intVar5 < 0) {
intVar5 = 256 + intVar5;
}
if (urlsafe.get(intVar5)) {
if (intVar5 == ' ') {
intVar5 = '+';
}
bytearrayoutputstreamVar1.write(intVar5);
} else {
bytearrayoutputstreamVar1.write('%');
char charVar7 = charLiteral8;
char charVar9 = charLiteral10;
bytearrayoutputstreamVar1.write(charVar7);
bytearrayoutputstreamVar1.write(charVar9);
}
}
return bytearrayoutputstreamVar1.toByteArray();
}"
1448,PERFORMANCE,SS_SHOULD_BE_STATIC,FP,codec,418,"@Deprecated
protected final byte PAD = PAD_DEFAULT;","@Deprecated
protected final byte PAD = PAD_DEFAULT;","@Deprecated
protected final byte byteVar1 = byteLiteral2;"
1449,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,codec,419,"return null;
","public static byte[] getBytesUnchecked(final String string, final String charsetName) {
if (string == null) {
return null;
}
try {
return string.getBytes(charsetName);
} catch (final UnsupportedEncodingException e) {
throw StringUtils.newIllegalStateException(charsetName, e);
}
}","public static byte[] getBytesUnchecked(final String string, final String charsetName) {
if (string == null) {
return null;
}
try {
return string.getBytes(charsetName);
} catch (final UnsupportedEncodingException e) {
throw StringUtils.newIllegalStateException(charsetName, e);
}
}"
1458,DODGY_CODE,SF_SWITCH_NO_DEFAULT,FP,codec,428,"switch (offset + length - index) {
case 15:
k2 ^= ((long) data[index + 14] & 0xff) << 48;
case 14:
k2 ^= ((long) data[index + 13] & 0xff) << 40;
case 13:
k2 ^= ((long) data[index + 12] & 0xff) << 32;
case 12:
k2 ^= ((long) data[index + 11] & 0xff) << 24;
case 11:
k2 ^= ((long) data[index + 10] & 0xff) << 16;
case 10:
k2 ^= ((long) data[index + 9] & 0xff) << 8;
case 9:
k2 ^= data[index + 8] & 0xff;
k2 *= C2;
k2 = Long.rotateLeft(k2, R3);
k2 *= C1;
h2 ^= k2;
case 8:
k1 ^= ((long) data[index + 7] & 0xff) << 56;
case 7:
k1 ^= ((long) data[index + 6] & 0xff) << 48;
case 6:
k1 ^= ((long) data[index + 5] & 0xff) << 40;
case 5:
k1 ^= ((long) data[index + 4] & 0xff) << 32;
case 4:
k1 ^= ((long) data[index + 3] & 0xff) << 24;
case 3:
k1 ^= ((long) data[index + 2] & 0xff) << 16;
case 2:
k1 ^= ((long) data[index + 1] & 0xff) << 8;
case 1:
k1 ^= data[index] & 0xff;
k1 *= C1;
k1 = Long.rotateLeft(k1, R1);
k1 *= C2;
h1 ^= k1;
","private static long[] hash128x64(final byte[] data, final int offset, final int length, final long seed) {
long h1 = seed;
long h2 = seed;
final int nblocks = length >> 4;
for (int i = 0; i < nblocks; i++) {
final int index = offset + (i << 4);
long k1 = getLittleEndianLong(data, index);
long k2 = getLittleEndianLong(data, index + 8);
k1 *= C1;
k1 = Long.rotateLeft(k1, R1);
k1 *= C2;
h1 ^= k1;
h1 = Long.rotateLeft(h1, R2);
h1 += h2;
h1 = h1 * M + N1;
k2 *= C2;
k2 = Long.rotateLeft(k2, R3);
k2 *= C1;
h2 ^= k2;
h2 = Long.rotateLeft(h2, R1);
h2 += h1;
h2 = h2 * M + N2;
}
long k1 = 0;
long k2 = 0;
final int index = offset + (nblocks << 4);
switch(offset + length - index) {
case 15:
k2 ^= ((long) data[index + 14] & 0xff) << 48;
case 14:
k2 ^= ((long) data[index + 13] & 0xff) << 40;
case 13:
k2 ^= ((long) data[index + 12] & 0xff) << 32;
case 12:
k2 ^= ((long) data[index + 11] & 0xff) << 24;
case 11:
k2 ^= ((long) data[index + 10] & 0xff) << 16;
case 10:
k2 ^= ((long) data[index + 9] & 0xff) << 8;
case 9:
k2 ^= data[index + 8] & 0xff;
k2 *= C2;
k2 = Long.rotateLeft(k2, R3);
k2 *= C1;
h2 ^= k2;
case 8:
k1 ^= ((long) data[index + 7] & 0xff) << 56;
case 7:
k1 ^= ((long) data[index + 6] & 0xff) << 48;
case 6:
k1 ^= ((long) data[index + 5] & 0xff) << 40;
case 5:
k1 ^= ((long) data[index + 4] & 0xff) << 32;
case 4:
k1 ^= ((long) data[index + 3] & 0xff) << 24;
case 3:
k1 ^= ((long) data[index + 2] & 0xff) << 16;
case 2:
k1 ^= ((long) data[index + 1] & 0xff) << 8;
case 1:
k1 ^= data[index] & 0xff;
k1 *= C1;
k1 = Long.rotateLeft(k1, R1);
k1 *= C2;
h1 ^= k1;
}
h1 ^= length;
h2 ^= length;
h1 += h2;
h2 += h1;
h1 = fmix64(h1);
h2 = fmix64(h2);
h1 += h2;
h2 += h1;
return new long[] { h1, h2 };
}","private static long[] hash128x64(final byte[] data, final int offset, final int length, final long seed) {
long longVar1 = longLiteral2;
long longVar3 = longLiteral2;
final int intVar4 = intLiteral5;
for (int intVar15 = intLiteral16; intVar6 < intLiteral1; intVar6++) {
final int intVar8 = intLiteral9;
long longVar10 = longLiteral11;
long longVar12 = longLiteral13;
longVar10 *= C1;
longVar10 = Long.rotateLeft(longVar10, R1);
longVar10 *= C2;
longVar1 ^= longVar10;
longVar1 = Long.rotateLeft(longVar1, R2);
longVar1 += longVar3;
longVar1 = longVar1 * M + N1;
longVar12 *= C2;
longVar12 = Long.rotateLeft(longVar12, R3);
longVar12 *= C1;
longVar3 ^= longVar12;
longVar3 = Long.rotateLeft(longVar3, R1);
longVar3 += longVar1;
longVar3 = longVar3 * M + N2;
}
long longVar10 = intLiteral7;
long longVar12 = intLiteral7;
final int intVar8 = intLiteral14;
switch(offset + length - intVar8) {
case 15:
longVar12 ^= ((long) data[intVar8 + 14] & 0xff) << 48;
case 14:
longVar12 ^= ((long) data[intVar8 + 13] & 0xff) << 40;
case 13:
longVar12 ^= ((long) data[intVar8 + 12] & 0xff) << 32;
case 12:
longVar12 ^= ((long) data[intVar8 + 11] & 0xff) << 24;
case 11:
longVar12 ^= ((long) data[intVar8 + 10] & 0xff) << 16;
case 10:
longVar12 ^= ((long) data[intVar8 + 9] & 0xff) << 8;
case 9:
longVar12 ^= data[intVar8 + 8] & 0xff;
longVar12 *= C2;
longVar12 = Long.rotateLeft(longVar12, R3);
longVar12 *= C1;
longVar3 ^= longVar12;
case 8:
longVar10 ^= ((long) data[intVar8 + 7] & 0xff) << 56;
case 7:
longVar10 ^= ((long) data[intVar8 + 6] & 0xff) << 48;
case 6:
longVar10 ^= ((long) data[intVar8 + 5] & 0xff) << 40;
case 5:
longVar10 ^= ((long) data[intVar8 + 4] & 0xff) << 32;
case 4:
longVar10 ^= ((long) data[intVar8 + 3] & 0xff) << 24;
case 3:
longVar10 ^= ((long) data[intVar8 + 2] & 0xff) << 16;
case 2:
longVar10 ^= ((long) data[intVar8 + 1] & 0xff) << 8;
case 1:
longVar10 ^= data[intVar8] & 0xff;
longVar10 *= C1;
longVar10 = Long.rotateLeft(longVar10, R1);
longVar10 *= C2;
longVar1 ^= longVar10;
}
longVar1 ^= length;
longVar3 ^= length;
longVar1 += longVar3;
longVar3 += longVar1;
longVar1 = fmix64(longVar1);
longVar3 = fmix64(longVar3);
longVar1 += longVar3;
longVar3 += longVar1;
return new long[] { longVar1, longVar3 };
}"
1468,DODGY_CODE,SF_SWITCH_NO_DEFAULT,FP,codec,438,"switch (offset + length - index) {
case 7:
k1 ^= ((long) data[index + 6] & 0xff) << 48;
case 6:
k1 ^= ((long) data[index + 5] & 0xff) << 40;
case 5:
k1 ^= ((long) data[index + 4] & 0xff) << 32;
case 4:
k1 ^= ((long) data[index + 3] & 0xff) << 24;
case 3:
k1 ^= ((long) data[index + 2] & 0xff) << 16;
case 2:
k1 ^= ((long) data[index + 1] & 0xff) << 8;
case 1:
k1 ^= ((long) data[index] & 0xff);
k1 *= C1;
k1 = Long.rotateLeft(k1, R1);
k1 *= C2;
hash ^= k1;
","public static long hash64(final byte[] data, final int offset, final int length, final int seed) {
// Note: This fails to apply masking using 0xffffffffL to the seed.
long hash = seed;
final int nblocks = length >> 3;
for (int i = 0; i < nblocks; i++) {
final int index = offset + (i << 3);
long k = getLittleEndianLong(data, index);
k *= C1;
k = Long.rotateLeft(k, R1);
k *= C2;
hash ^= k;
hash = Long.rotateLeft(hash, R2) * M + N1;
}
long k1 = 0;
final int index = offset + (nblocks << 3);
switch(offset + length - index) {
case 7:
k1 ^= ((long) data[index + 6] & 0xff) << 48;
case 6:
k1 ^= ((long) data[index + 5] & 0xff) << 40;
case 5:
k1 ^= ((long) data[index + 4] & 0xff) << 32;
case 4:
k1 ^= ((long) data[index + 3] & 0xff) << 24;
case 3:
k1 ^= ((long) data[index + 2] & 0xff) << 16;
case 2:
k1 ^= ((long) data[index + 1] & 0xff) << 8;
case 1:
k1 ^= ((long) data[index] & 0xff);
k1 *= C1;
k1 = Long.rotateLeft(k1, R1);
k1 *= C2;
hash ^= k1;
}
hash ^= length;
hash = fmix64(hash);
return hash;
}","public static long hash64(final byte[] data, final int offset, final int length, final int seed) {
// Note: This fails to apply masking using 0xffffffffL to the seed.
long longVar1 = longLiteral2;
final int intVar3 = intLiteral4;
for (int intVar13 = intLiteral14; intVar5 < intLiteral1; intVar5++) {
final int intVar7 = intLiteral8;
long longVar9 = longLiteral10;
longVar9 *= C1;
longVar9 = Long.rotateLeft(longVar9, R1);
longVar9 *= C2;
longVar1 ^= longVar9;
longVar1 = Long.rotateLeft(longVar1, R2) * M + N1;
}
long longVar11 = intLiteral6;
final int intVar7 = intLiteral12;
switch(offset + length - intVar7) {
case 7:
longVar11 ^= ((long) data[intVar7 + 6] & 0xff) << 48;
case 6:
longVar11 ^= ((long) data[intVar7 + 5] & 0xff) << 40;
case 5:
longVar11 ^= ((long) data[intVar7 + 4] & 0xff) << 32;
case 4:
longVar11 ^= ((long) data[intVar7 + 3] & 0xff) << 24;
case 3:
longVar11 ^= ((long) data[intVar7 + 2] & 0xff) << 16;
case 2:
longVar11 ^= ((long) data[intVar7 + 1] & 0xff) << 8;
case 1:
longVar11 ^= ((long) data[intVar7] & 0xff);
longVar11 *= C1;
longVar11 = Long.rotateLeft(longVar11, R1);
longVar11 *= C2;
longVar1 ^= longVar11;
}
longVar1 ^= length;
longVar1 = fmix64(longVar1);
return longVar1;
}"
1478,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,codec,448,"return null;
","@Override
protected byte[] doDecoding(final byte[] bytes) {
if (bytes == null) {
return null;
}
return Base64.decodeBase64(bytes);
}","@Override
protected byte[] doDecoding(final byte[] bytes) {
if (bytes == null) {
return null;
}
return Base64.decodeBase64(bytes);
}"
1502,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,codec,472,"return null;
","protected byte[] doEncoding(byte[] bytes) {
if (bytes == null) {
return null;
}
byte[] data = QuotedPrintableCodec.encodeQuotedPrintable(PRINTABLE_CHARS, bytes);
if (this.encodeBlanks) {
for (int i = 0; i < data.length; i++) {
if (data[i] == BLANK) {
data[i] = UNDERSCORE;
}
}
}
return data;
}","protected byte[] doEncoding(byte[] bytes) {
if (bytes == null) {
return null;
}
byte[] byteArrayVar1 = byteArrayLiteral2;
if (this.encodeBlanks) {
for (int intVar5 = intLiteral6; intVar3 < intLiteral1; intVar3++) {
if (byteArrayVar1[intVar3] == BLANK) {
byteArrayVar1[intVar3] = UNDERSCORE;
}
}
}
return byteArrayVar1;
}"
1558,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,codec,528,"return null;
","public static final byte[] decodeQuotedPrintable(byte[] bytes) throws DecoderException {
if (bytes == null) {
return null;
}
ByteArrayOutputStream buffer = new ByteArrayOutputStream();
for (int i = 0; i < bytes.length; i++) {
int b = bytes[i];
if (b == ESCAPE_CHAR) {
try {
int u = Utils.digit16(bytes[++i]);
int l = Utils.digit16(bytes[++i]);
buffer.write((char) ((u << 4) + l));
} catch (ArrayIndexOutOfBoundsException e) {
throw new DecoderException(""Invalid quoted-printable encoding"", e);
}
} else {
buffer.write(b);
}
}
return buffer.toByteArray();
}","public static final byte[] decodeQuotedPrintable(byte[] bytes) throws DecoderException {
if (bytes == null) {
return null;
}
ByteArrayOutputStream bytearrayoutputstreamVar1 = bytearrayoutputstreamLiteral2;
for (int intVar10 = intLiteral11; intVar3 < intLiteral1; intVar3++) {
int intVar5 = intLiteral6;
if (intVar5 == ESCAPE_CHAR) {
try {
int intVar7 = intLiteral8;
int intVar9 = intLiteral8;
bytearrayoutputstreamVar1.write((char) ((intVar7 << 4) + intVar9));
} catch (ArrayIndexOutOfBoundsException e) {
throw new DecoderException(""Invalid quoted-printable encoding"", e);
}
} else {
bytearrayoutputstreamVar1.write(intVar5);
}
}
return bytearrayoutputstreamVar1.toByteArray();
}"
1561,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,codec,531,"return null;
","public static final byte[] encodeUrl(BitSet urlsafe, byte[] bytes) {
if (bytes == null) {
return null;
}
if (urlsafe == null) {
urlsafe = WWW_FORM_URL;
}
ByteArrayOutputStream buffer = new ByteArrayOutputStream();
for (int i = 0; i < bytes.length; i++) {
int b = bytes[i];
if (b < 0) {
b = 256 + b;
}
if (urlsafe.get(b)) {
if (b == ' ') {
b = '+';
}
buffer.write(b);
} else {
buffer.write(ESCAPE_CHAR);
char hex1 = Character.toUpperCase(Character.forDigit((b >> 4) & 0xF, RADIX));
char hex2 = Character.toUpperCase(Character.forDigit(b & 0xF, RADIX));
buffer.write(hex1);
buffer.write(hex2);
}
}
return buffer.toByteArray();
}","public static final byte[] encodeUrl(BitSet urlsafe, byte[] bytes) {
if (bytes == null) {
return null;
}
if (urlsafe == null) {
urlsafe = WWW_FORM_URL;
}
ByteArrayOutputStream bytearrayoutputstreamVar1 = bytearrayoutputstreamLiteral2;
for (int intVar11 = intLiteral12; intVar3 < intLiteral1; intVar3++) {
int intVar5 = intLiteral6;
if (intVar5 < 0) {
intVar5 = 256 + intVar5;
}
if (urlsafe.get(intVar5)) {
if (intVar5 == ' ') {
intVar5 = '+';
}
bytearrayoutputstreamVar1.write(intVar5);
} else {
bytearrayoutputstreamVar1.write(ESCAPE_CHAR);
char charVar7 = charLiteral8;
char charVar9 = charLiteral10;
bytearrayoutputstreamVar1.write(charVar7);
bytearrayoutputstreamVar1.write(charVar9);
}
}
return bytearrayoutputstreamVar1.toByteArray();
}"
1567,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,codec,537,"return null;
","public static byte[] getBytesUnchecked(final String string, final String charsetName) {
if (string == null) {
return null;
}
try {
return string.getBytes(charsetName);
} catch (final UnsupportedEncodingException e) {
throw StringUtils.newIllegalStateException(charsetName, e);
}
}","public static byte[] getBytesUnchecked(final String string, final String charsetName) {
if (string == null) {
return null;
}
try {
return string.getBytes(charsetName);
} catch (final UnsupportedEncodingException e) {
throw StringUtils.newIllegalStateException(charsetName, e);
}
}"
1577,DODGY_CODE,SF_SWITCH_FALLTHROUGH,FP,codec,547,"k1 ^= ((long) data[index + 6] & 0xff) << 48;
case 6:
k1 ^= ((long) data[index + 5] & 0xff) << 40;
","@Deprecated
public static long hash64(final byte[] data, final int offset, final int length, final int seed) {
// Note: This fails to apply masking using 0xffffffffL to the seed.
long hash = seed;
final int nblocks = length >> 3;
for (int i = 0; i < nblocks; i++) {
final int index = offset + (i << 3);
long k = getLittleEndianLong(data, index);
k *= C1;
k = Long.rotateLeft(k, R1);
k *= C2;
hash ^= k;
hash = Long.rotateLeft(hash, R2) * M + N1;
}
long k1 = 0;
final int index = offset + (nblocks << 3);
switch(offset + length - index) {
case 7:
k1 ^= ((long) data[index + 6] & 0xff) << 48;
case 6:
k1 ^= ((long) data[index + 5] & 0xff) << 40;
case 5:
k1 ^= ((long) data[index + 4] & 0xff) << 32;
case 4:
k1 ^= ((long) data[index + 3] & 0xff) << 24;
case 3:
k1 ^= ((long) data[index + 2] & 0xff) << 16;
case 2:
k1 ^= ((long) data[index + 1] & 0xff) << 8;
case 1:
k1 ^= ((long) data[index] & 0xff);
k1 *= C1;
k1 = Long.rotateLeft(k1, R1);
k1 *= C2;
hash ^= k1;
}
hash ^= length;
hash = fmix64(hash);
return hash;
}","@Deprecated
public static long hash64(final byte[] data, final int offset, final int length, final int seed) {
// Note: This fails to apply masking using 0xffffffffL to the seed.
long longVar1 = longLiteral2;
final int intVar3 = intLiteral4;
for (int intVar13 = intLiteral14; intVar5 < intLiteral1; intVar5++) {
final int intVar7 = intLiteral8;
long longVar9 = longLiteral10;
longVar9 *= C1;
longVar9 = Long.rotateLeft(longVar9, R1);
longVar9 *= C2;
longVar1 ^= longVar9;
longVar1 = Long.rotateLeft(longVar1, R2) * M + N1;
}
long longVar11 = intLiteral6;
final int intVar7 = intLiteral12;
switch(offset + length - intVar7) {
case 7:
longVar11 ^= ((long) data[intVar7 + 6] & 0xff) << 48;
case 6:
longVar11 ^= ((long) data[intVar7 + 5] & 0xff) << 40;
case 5:
longVar11 ^= ((long) data[intVar7 + 4] & 0xff) << 32;
case 4:
longVar11 ^= ((long) data[intVar7 + 3] & 0xff) << 24;
case 3:
longVar11 ^= ((long) data[intVar7 + 2] & 0xff) << 16;
case 2:
longVar11 ^= ((long) data[intVar7 + 1] & 0xff) << 8;
case 1:
longVar11 ^= ((long) data[intVar7] & 0xff);
longVar11 *= C1;
longVar11 = Long.rotateLeft(longVar11, R1);
longVar11 *= C2;
longVar1 ^= longVar11;
}
longVar1 ^= length;
longVar1 = fmix64(longVar1);
return longVar1;
}"
1598,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,codec,568,"return null;
","public static final byte[] decodeQuotedPrintable(final byte[] bytes) throws DecoderException {
if (bytes == null) {
return null;
}
final ByteArrayOutputStream buffer = new ByteArrayOutputStream();
for (int i = 0; i < bytes.length; i++) {
final int b = bytes[i];
if (b == ESCAPE_CHAR) {
try {
if (bytes[++i] == CR) {
continue;
}
final int u = Utils.digit16(bytes[i]);
final int l = Utils.digit16(bytes[++i]);
buffer.write((char) ((u << 4) + l));
} catch (final ArrayIndexOutOfBoundsException e) {
throw new DecoderException(""Invalid quoted-printable encoding"", e);
}
} else if (b != CR && b != LF) {
buffer.write(b);
}
}
return buffer.toByteArray();
}","public static final byte[] decodeQuotedPrintable(final byte[] bytes) throws DecoderException {
if (bytes == null) {
return null;
}
final ByteArrayOutputStream bytearrayoutputstreamVar1 = bytearrayoutputstreamLiteral2;
for (int intVar11 = intLiteral12; intVar3 < intLiteral1; intVar3++) {
final int intVar5 = intLiteral6;
if (intVar5 == ESCAPE_CHAR) {
try {
if (bytes[++intVar3] == CR) {
continue;
}
final int intVar7 = intLiteral8;
final int intVar9 = intLiteral10;
bytearrayoutputstreamVar1.write((char) ((intVar7 << 4) + intVar9));
} catch (final ArrayIndexOutOfBoundsException e) {
throw new DecoderException(""Invalid quoted-printable encoding"", e);
}
} else if (intVar5 != CR && intVar5 != LF) {
bytearrayoutputstreamVar1.write(intVar5);
}
}
return bytearrayoutputstreamVar1.toByteArray();
}"
1623,DODGY_CODE,SF_SWITCH_NO_DEFAULT,FP,codec,593,"switch(len) {
case 7: localCrc = (localCrc >>> 8) ^ T[T8_0_start + ((localCrc ^ b[off++]) & 0xff)];
case 6: localCrc = (localCrc >>> 8) ^ T[T8_0_start + ((localCrc ^ b[off++]) & 0xff)];
case 5: localCrc = (localCrc >>> 8) ^ T[T8_0_start + ((localCrc ^ b[off++]) & 0xff)];
case 4: localCrc = (localCrc >>> 8) ^ T[T8_0_start + ((localCrc ^ b[off++]) & 0xff)];
case 3: localCrc = (localCrc >>> 8) ^ T[T8_0_start + ((localCrc ^ b[off++]) & 0xff)];
case 2: localCrc = (localCrc >>> 8) ^ T[T8_0_start + ((localCrc ^ b[off++]) & 0xff)];
case 1: localCrc = (localCrc >>> 8) ^ T[T8_0_start + ((localCrc ^ b[off++]) & 0xff)];
","@Override
public void update(final byte[] b, int off, int len) {
int localCrc = crc;
while (len > 7) {
final int c0 = (b[off + 0] ^ localCrc) & 0xff;
final int c1 = (b[off + 1] ^ (localCrc >>>= 8)) & 0xff;
final int c2 = (b[off + 2] ^ (localCrc >>>= 8)) & 0xff;
final int c3 = (b[off + 3] ^ (localCrc >>>= 8)) & 0xff;
localCrc = (T[T8_7_start + c0] ^ T[T8_6_start + c1]) ^ (T[T8_5_start + c2] ^ T[T8_4_start + c3]);
final int c4 = b[off + 4] & 0xff;
final int c5 = b[off + 5] & 0xff;
final int c6 = b[off + 6] & 0xff;
final int c7 = b[off + 7] & 0xff;
localCrc ^= (T[T8_3_start + c4] ^ T[T8_2_start + c5]) ^ (T[T8_1_start + c6] ^ T[T8_0_start + c7]);
off += 8;
len -= 8;
}
switch(len) {
case 7:
localCrc = (localCrc >>> 8) ^ T[T8_0_start + ((localCrc ^ b[off++]) & 0xff)];
case 6:
localCrc = (localCrc >>> 8) ^ T[T8_0_start + ((localCrc ^ b[off++]) & 0xff)];
case 5:
localCrc = (localCrc >>> 8) ^ T[T8_0_start + ((localCrc ^ b[off++]) & 0xff)];
case 4:
localCrc = (localCrc >>> 8) ^ T[T8_0_start + ((localCrc ^ b[off++]) & 0xff)];
case 3:
localCrc = (localCrc >>> 8) ^ T[T8_0_start + ((localCrc ^ b[off++]) & 0xff)];
case 2:
localCrc = (localCrc >>> 8) ^ T[T8_0_start + ((localCrc ^ b[off++]) & 0xff)];
case 1:
localCrc = (localCrc >>> 8) ^ T[T8_0_start + ((localCrc ^ b[off++]) & 0xff)];
default:
break;
}
crc = localCrc;
}","@Override
public void update(final byte[] b, int off, int len) {
int intVar1 = intLiteral2;
while (len > 7) {
final int intVar3 = intLiteral4;
final int intVar5 = intLiteral6;
final int intVar7 = intLiteral8;
final int intVar9 = intLiteral10;
intVar1 = (T[T8_7_start + intVar3] ^ T[T8_6_start + intVar5]) ^ (T[T8_5_start + intVar7] ^ T[T8_4_start + intVar9]);
final int intVar11 = intLiteral12;
final int intVar13 = intLiteral14;
final int intVar15 = intLiteral16;
final int intVar17 = intLiteral18;
intVar1 ^= (T[T8_3_start + intVar11] ^ T[T8_2_start + intVar13]) ^ (T[T8_1_start + intVar15] ^ T[T8_0_start + intVar17]);
off += 8;
len -= 8;
}
switch(len) {
case 7:
intVar1 = (intVar1 >>> 8) ^ T[T8_0_start + ((intVar1 ^ b[off++]) & 0xff)];
case 6:
intVar1 = (intVar1 >>> 8) ^ T[T8_0_start + ((intVar1 ^ b[off++]) & 0xff)];
case 5:
intVar1 = (intVar1 >>> 8) ^ T[T8_0_start + ((intVar1 ^ b[off++]) & 0xff)];
case 4:
intVar1 = (intVar1 >>> 8) ^ T[T8_0_start + ((intVar1 ^ b[off++]) & 0xff)];
case 3:
intVar1 = (intVar1 >>> 8) ^ T[T8_0_start + ((intVar1 ^ b[off++]) & 0xff)];
case 2:
intVar1 = (intVar1 >>> 8) ^ T[T8_0_start + ((intVar1 ^ b[off++]) & 0xff)];
case 1:
intVar1 = (intVar1 >>> 8) ^ T[T8_0_start + ((intVar1 ^ b[off++]) & 0xff)];
default:
break;
}
crc = intVar1;
}"
1642,DODGY_CODE,UC_USELESS_CONDITION,FP,codec,612,"} else if (sumLength >= EIGHT && sumLength <= ELEVEN) {
","int getMinRating(final int sumLength) {
int minRating = 0;
if (sumLength <= FOUR) {
minRating = FIVE;
} else if (sumLength >= FIVE && sumLength <= SEVEN) {
minRating = FOUR;
} else if (sumLength >= EIGHT && sumLength <= ELEVEN) {
minRating = THREE;
} else if (sumLength == TWELVE) {
minRating = TWO;
} else {
minRating = ONE;
}
return minRating;
}","int getMinRating(final int sumLength) {
int intVar1 = intLiteral2;
if (sumLength <= FOUR) {
intVar1 = FIVE;
} else if (sumLength >= FIVE && sumLength <= SEVEN) {
intVar1 = FOUR;
} else if (sumLength >= EIGHT && sumLength <= ELEVEN) {
intVar1 = THREE;
} else if (sumLength == TWELVE) {
intVar1 = TWO;
} else {
intVar1 = ONE;
}
return intVar1;
}"
1654,PERFORMANCE,SS_SHOULD_BE_STATIC,FP,codec,624,protected final byte PAD = PAD_DEFAULT;,protected final byte PAD = PAD_DEFAULT;,protected final byte byteVar1 = byteLiteral2;
1655,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,codec,625,"return null;
","public static byte[] getBytesUnchecked(final String string, final String charsetName) {
if (string == null) {
return null;
}
try {
return string.getBytes(charsetName);
} catch (final UnsupportedEncodingException e) {
throw StringUtils.newIllegalStateException(charsetName, e);
}
}","public static byte[] getBytesUnchecked(final String string, final String charsetName) {
if (string == null) {
return null;
}
try {
return string.getBytes(charsetName);
} catch (final UnsupportedEncodingException e) {
throw StringUtils.newIllegalStateException(charsetName, e);
}
}"
1668,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,codec,638,"return null;
","public static final byte[] decodeQuotedPrintable(final byte[] bytes) throws DecoderException {
if (bytes == null) {
return null;
}
final ByteArrayOutputStream buffer = new ByteArrayOutputStream();
for (int i = 0; i < bytes.length; i++) {
final int b = bytes[i];
if (b == ESCAPE_CHAR) {
try {
final int u = Utils.digit16(bytes[++i]);
final int l = Utils.digit16(bytes[++i]);
buffer.write((char) ((u << 4) + l));
} catch (final ArrayIndexOutOfBoundsException e) {
throw new DecoderException(""Invalid quoted-printable encoding"", e);
}
} else {
buffer.write(b);
}
}
return buffer.toByteArray();
}","public static final byte[] decodeQuotedPrintable(final byte[] bytes) throws DecoderException {
if (bytes == null) {
return null;
}
final ByteArrayOutputStream bytearrayoutputstreamVar1 = bytearrayoutputstreamLiteral2;
for (int intVar10 = intLiteral11; intVar3 < intLiteral1; intVar3++) {
final int intVar5 = intLiteral6;
if (intVar5 == ESCAPE_CHAR) {
try {
final int intVar7 = intLiteral8;
final int intVar9 = intLiteral8;
bytearrayoutputstreamVar1.write((char) ((intVar7 << 4) + intVar9));
} catch (final ArrayIndexOutOfBoundsException e) {
throw new DecoderException(""Invalid quoted-printable encoding"", e);
}
} else {
bytearrayoutputstreamVar1.write(intVar5);
}
}
return bytearrayoutputstreamVar1.toByteArray();
}"
1709,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,codec,679,"return null;
","@Override
protected byte[] doEncoding(final byte[] bytes) {
if (bytes == null) {
return null;
}
final byte[] data = QuotedPrintableCodec.encodeQuotedPrintable(PRINTABLE_CHARS, bytes);
if (this.encodeBlanks) {
for (int i = 0; i < data.length; i++) {
if (data[i] == SPACE) {
data[i] = UNDERSCORE;
}
}
}
return data;
}","@Override
protected byte[] doEncoding(final byte[] bytes) {
if (bytes == null) {
return null;
}
final byte[] byteArrayVar1 = byteArrayLiteral2;
if (this.encodeBlanks) {
for (int intVar5 = intLiteral6; intVar3 < intLiteral1; intVar3++) {
if (byteArrayVar1[intVar3] == SPACE) {
byteArrayVar1[intVar3] = UNDERSCORE;
}
}
}
return byteArrayVar1;
}"
1742,DODGY_CODE,SF_SWITCH_NO_DEFAULT,FP,codec,712,"switch (modulus) {
case 2 : 
buffer[pos++] = (byte) ((bitWorkArea >> 2) & MASK_8BITS);
break;
case 3 : 
buffer[pos++] = (byte) ((bitWorkArea >> 7) & MASK_8BITS);
break;
case 4 : 
bitWorkArea = bitWorkArea >> 4; 
buffer[pos++] = (byte) ((bitWorkArea >> 8) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea) & MASK_8BITS);
break;
case 5 : 
bitWorkArea = bitWorkArea >> 1;
buffer[pos++] = (byte) ((bitWorkArea >> 16) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea >> 8) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea) & MASK_8BITS);
break;
case 6 : 
bitWorkArea = bitWorkArea >> 6;
buffer[pos++] = (byte) ((bitWorkArea >> 16) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea >> 8) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea) & MASK_8BITS);
break;
case 7 : 
bitWorkArea = bitWorkArea >> 3;
buffer[pos++] = (byte) ((bitWorkArea >> 24) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea >> 16) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea >> 8) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea) & MASK_8BITS);
","void decode(byte[] in, int inPos, int inAvail) {
if (eof) {
return;
}
if (inAvail < 0) {
eof = true;
}
for (int i = 0; i < inAvail; i++) {
byte b = in[inPos++];
if (b == PAD) {
eof = true;
break;
} else {
ensureBufferSize(decodeSize);
if (b >= 0 && b < this.decodeTable.length) {
int result = this.decodeTable[b];
if (result >= 0) {
modulus = (modulus + 1) % BYTES_PER_ENCODED_BLOCK;
bitWorkArea = (bitWorkArea << BITS_PER_ENCODED_BYTE) + result;
if (modulus == 0) {
buffer[pos++] = (byte) ((bitWorkArea >> 32) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea >> 24) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea >> 16) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea >> 8) & MASK_8BITS);
buffer[pos++] = (byte) (bitWorkArea & MASK_8BITS);
}
}
}
}
}
// Two forms of EOF as far as Base32 decoder is concerned: actual
if (eof && modulus >= 2) {
ensureBufferSize(decodeSize);
switch(modulus) {
case 2:
buffer[pos++] = (byte) ((bitWorkArea >> 2) & MASK_8BITS);
break;
case 3:
buffer[pos++] = (byte) ((bitWorkArea >> 7) & MASK_8BITS);
break;
case 4:
bitWorkArea = bitWorkArea >> 4;
buffer[pos++] = (byte) ((bitWorkArea >> 8) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea) & MASK_8BITS);
break;
case 5:
bitWorkArea = bitWorkArea >> 1;
buffer[pos++] = (byte) ((bitWorkArea >> 16) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea >> 8) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea) & MASK_8BITS);
break;
case 6:
bitWorkArea = bitWorkArea >> 6;
buffer[pos++] = (byte) ((bitWorkArea >> 16) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea >> 8) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea) & MASK_8BITS);
break;
case 7:
bitWorkArea = bitWorkArea >> 3;
buffer[pos++] = (byte) ((bitWorkArea >> 24) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea >> 16) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea >> 8) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea) & MASK_8BITS);
break;
}
}
}","void decode(byte[] in, int inPos, int inAvail) {
if (eof) {
return;
}
if (inAvail < 0) {
eof = true;
}
for (int intVar7 = intLiteral8; intVar1 < intLiteral1; intVar1++) {
byte byteVar3 = byteLiteral4;
if (byteVar3 == PAD) {
eof = true;
break;
} else {
ensureBufferSize(decodeSize);
if (byteVar3 >= 0 && byteVar3 < this.decodeTable.length) {
int intVar5 = intLiteral6;
if (intVar5 >= 0) {
modulus = (modulus + 1) % BYTES_PER_ENCODED_BLOCK;
bitWorkArea = (bitWorkArea << BITS_PER_ENCODED_BYTE) + intVar5;
if (modulus == 0) {
buffer[pos++] = (byte) ((bitWorkArea >> 32) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea >> 24) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea >> 16) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea >> 8) & MASK_8BITS);
buffer[pos++] = (byte) (bitWorkArea & MASK_8BITS);
}
}
}
}
}
// Two forms of EOF as far as Base32 decoder is concerned: actual
if (eof && modulus >= 2) {
ensureBufferSize(decodeSize);
switch(modulus) {
case 2:
buffer[pos++] = (byte) ((bitWorkArea >> 2) & MASK_8BITS);
break;
case 3:
buffer[pos++] = (byte) ((bitWorkArea >> 7) & MASK_8BITS);
break;
case 4:
bitWorkArea = bitWorkArea >> 4;
buffer[pos++] = (byte) ((bitWorkArea >> 8) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea) & MASK_8BITS);
break;
case 5:
bitWorkArea = bitWorkArea >> 1;
buffer[pos++] = (byte) ((bitWorkArea >> 16) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea >> 8) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea) & MASK_8BITS);
break;
case 6:
bitWorkArea = bitWorkArea >> 6;
buffer[pos++] = (byte) ((bitWorkArea >> 16) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea >> 8) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea) & MASK_8BITS);
break;
case 7:
bitWorkArea = bitWorkArea >> 3;
buffer[pos++] = (byte) ((bitWorkArea >> 24) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea >> 16) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea >> 8) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea) & MASK_8BITS);
break;
}
}
}"
1753,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,codec,723,"return null;
","public static final byte[] encodeQuotedPrintable(BitSet printable, byte[] bytes) {
if (bytes == null) {
return null;
}
if (printable == null) {
printable = PRINTABLE_CHARS;
}
ByteArrayOutputStream buffer = new ByteArrayOutputStream();
for (int i = 0; i < bytes.length; i++) {
int b = bytes[i];
if (b < 0) {
b = 256 + b;
}
if (printable.get(b)) {
buffer.write(b);
} else {
encodeQuotedPrintable(b, buffer);
}
}
return buffer.toByteArray();
}","public static final byte[] encodeQuotedPrintable(BitSet printable, byte[] bytes) {
if (bytes == null) {
return null;
}
if (printable == null) {
printable = PRINTABLE_CHARS;
}
ByteArrayOutputStream bytearrayoutputstreamVar1 = bytearrayoutputstreamLiteral2;
for (int intVar7 = intLiteral8; intVar3 < intLiteral1; intVar3++) {
int intVar5 = intLiteral6;
if (intVar5 < 0) {
intVar5 = 256 + intVar5;
}
if (printable.get(intVar5)) {
bytearrayoutputstreamVar1.write(intVar5);
} else {
encodeQuotedPrintable(intVar5, bytearrayoutputstreamVar1);
}
}
return bytearrayoutputstreamVar1.toByteArray();
}"
1783,DODGY_CODE,SF_SWITCH_NO_DEFAULT,FP,codec,753,"switch (modulus) { 
case 1 : 
buffer[pos++] = encodeTable[(int)(bitWorkArea >> 3) & MASK_5BITS]; 
buffer[pos++] = encodeTable[(int)(bitWorkArea << 2) & MASK_5BITS]; 
buffer[pos++] = PAD;
buffer[pos++] = PAD;
buffer[pos++] = PAD;
buffer[pos++] = PAD;
buffer[pos++] = PAD;
buffer[pos++] = PAD;
break;
case 2 : 
buffer[pos++] = encodeTable[(int)(bitWorkArea >> 11) & MASK_5BITS]; 
buffer[pos++] = encodeTable[(int)(bitWorkArea >>  6) & MASK_5BITS]; 
buffer[pos++] = encodeTable[(int)(bitWorkArea >>  1) & MASK_5BITS]; 
buffer[pos++] = encodeTable[(int)(bitWorkArea <<  4) & MASK_5BITS]; 
buffer[pos++] = PAD;
buffer[pos++] = PAD;
buffer[pos++] = PAD;
buffer[pos++] = PAD;
break;
case 3 : 
buffer[pos++] = encodeTable[(int)(bitWorkArea >> 19) & MASK_5BITS]; 
buffer[pos++] = encodeTable[(int)(bitWorkArea >> 14) & MASK_5BITS]; 
buffer[pos++] = encodeTable[(int)(bitWorkArea >>  9) & MASK_5BITS]; 
buffer[pos++] = encodeTable[(int)(bitWorkArea >>  4) & MASK_5BITS]; 
buffer[pos++] = encodeTable[(int)(bitWorkArea <<  1) & MASK_5BITS]; 
buffer[pos++] = PAD;
buffer[pos++] = PAD;
buffer[pos++] = PAD;
break;
case 4 : 
buffer[pos++] = encodeTable[(int)(bitWorkArea >> 27) & MASK_5BITS]; 
buffer[pos++] = encodeTable[(int)(bitWorkArea >> 22) & MASK_5BITS]; 
buffer[pos++] = encodeTable[(int)(bitWorkArea >> 17) & MASK_5BITS]; 
buffer[pos++] = encodeTable[(int)(bitWorkArea >> 12) & MASK_5BITS]; 
buffer[pos++] = encodeTable[(int)(bitWorkArea >>  7) & MASK_5BITS]; 
buffer[pos++] = encodeTable[(int)(bitWorkArea >>  2) & MASK_5BITS]; 
buffer[pos++] = encodeTable[(int)(bitWorkArea <<  3) & MASK_5BITS]; 
buffer[pos++] = PAD;
","@Override
void encode(byte[] in, int inPos, int inAvail) {
if (eof) {
return;
}
if (inAvail < 0) {
eof = true;
if (0 == modulus && lineLength == 0) {
return;
}
ensureBufferSize(encodeSize);
int savedPos = pos;
switch(modulus) {
case 1:
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 3) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea << 2) & MASK_5BITS];
buffer[pos++] = PAD;
buffer[pos++] = PAD;
buffer[pos++] = PAD;
buffer[pos++] = PAD;
buffer[pos++] = PAD;
buffer[pos++] = PAD;
break;
case 2:
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 11) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 6) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 1) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea << 4) & MASK_5BITS];
buffer[pos++] = PAD;
buffer[pos++] = PAD;
buffer[pos++] = PAD;
buffer[pos++] = PAD;
break;
case 3:
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 19) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 14) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 9) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 4) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea << 1) & MASK_5BITS];
buffer[pos++] = PAD;
buffer[pos++] = PAD;
buffer[pos++] = PAD;
break;
case 4:
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 27) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 22) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 17) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 12) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 7) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 2) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea << 3) & MASK_5BITS];
buffer[pos++] = PAD;
break;
}
currentLinePos += pos - savedPos;
if (lineLength > 0 && currentLinePos > 0) {
System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
pos += lineSeparator.length;
}
} else {
for (int i = 0; i < inAvail; i++) {
ensureBufferSize(encodeSize);
modulus = (modulus + 1) % BYTES_PER_UNENCODED_BLOCK;
int b = in[inPos++];
if (b < 0) {
b += 256;
}
bitWorkArea = (bitWorkArea << 8) + b;
if (0 == modulus) {
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 35) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 30) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 25) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 20) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 15) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 10) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 5) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) bitWorkArea & MASK_5BITS];
currentLinePos += BYTES_PER_ENCODED_BLOCK;
if (lineLength > 0 && lineLength <= currentLinePos) {
System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
pos += lineSeparator.length;
currentLinePos = 0;
}
}
}
}
}","@Override
void encode(byte[] in, int inPos, int inAvail) {
if (eof) {
return;
}
if (inAvail < 0) {
eof = true;
if (0 == modulus && lineLength == 0) {
return;
}
ensureBufferSize(encodeSize);
int intVar1 = intLiteral2;
switch(modulus) {
case 1:
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 3) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea << 2) & MASK_5BITS];
buffer[pos++] = PAD;
buffer[pos++] = PAD;
buffer[pos++] = PAD;
buffer[pos++] = PAD;
buffer[pos++] = PAD;
buffer[pos++] = PAD;
break;
case 2:
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 11) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 6) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 1) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea << 4) & MASK_5BITS];
buffer[pos++] = PAD;
buffer[pos++] = PAD;
buffer[pos++] = PAD;
buffer[pos++] = PAD;
break;
case 3:
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 19) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 14) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 9) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 4) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea << 1) & MASK_5BITS];
buffer[pos++] = PAD;
buffer[pos++] = PAD;
buffer[pos++] = PAD;
break;
case 4:
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 27) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 22) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 17) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 12) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 7) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 2) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea << 3) & MASK_5BITS];
buffer[pos++] = PAD;
break;
}
currentLinePos += pos - intVar1;
if (lineLength > 0 && currentLinePos > 0) {
System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
pos += lineSeparator.length;
}
} else {
for (int intVar7 = intLiteral8; intVar3 < intLiteral1; intVar3++) {
ensureBufferSize(encodeSize);
modulus = (modulus + 1) % BYTES_PER_UNENCODED_BLOCK;
int intVar5 = intLiteral6;
if (intVar5 < 0) {
intVar5 += 256;
}
bitWorkArea = (bitWorkArea << 8) + intVar5;
if (0 == modulus) {
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 35) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 30) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 25) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 20) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 15) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 10) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 5) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) bitWorkArea & MASK_5BITS];
currentLinePos += BYTES_PER_ENCODED_BLOCK;
if (lineLength > 0 && lineLength <= currentLinePos) {
System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
pos += lineSeparator.length;
currentLinePos = 0;
}
}
}
}
}"
1839,DODGY_CODE,SF_SWITCH_NO_DEFAULT,FP,codec,809,"switch (modulus) {
case 2 : 
bitWorkArea = bitWorkArea >> 4; 
buffer[pos++] = (byte) ((bitWorkArea) & MASK_8BITS);
break;
case 3 : 
bitWorkArea = bitWorkArea >> 2; 
buffer[pos++] = (byte) ((bitWorkArea >> 8) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea) & MASK_8BITS);
","@Override
void decode(byte[] in, int inPos, int inAvail) {
if (eof) {
return;
}
if (inAvail < 0) {
eof = true;
}
for (int i = 0; i < inAvail; i++) {
ensureBufferSize(decodeSize);
byte b = in[inPos++];
if (b == PAD) {
eof = true;
break;
} else {
if (b >= 0 && b < DECODE_TABLE.length) {
int result = DECODE_TABLE[b];
if (result >= 0) {
modulus = (modulus + 1) % BYTES_PER_ENCODED_BLOCK;
bitWorkArea = (bitWorkArea << BITS_PER_ENCODED_BYTE) + result;
if (modulus == 0) {
buffer[pos++] = (byte) ((bitWorkArea >> 16) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea >> 8) & MASK_8BITS);
buffer[pos++] = (byte) (bitWorkArea & MASK_8BITS);
}
}
}
}
}
// Two forms of EOF as far as base64 decoder is concerned: actual
if (eof && modulus != 0) {
ensureBufferSize(decodeSize);
switch(modulus) {
case 2:
bitWorkArea = bitWorkArea >> 4;
buffer[pos++] = (byte) ((bitWorkArea) & MASK_8BITS);
break;
case 3:
bitWorkArea = bitWorkArea >> 2;
buffer[pos++] = (byte) ((bitWorkArea >> 8) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea) & MASK_8BITS);
break;
}
}
}","@Override
void decode(byte[] in, int inPos, int inAvail) {
if (eof) {
return;
}
if (inAvail < 0) {
eof = true;
}
for (int intVar7 = intLiteral8; intVar1 < intLiteral1; intVar1++) {
ensureBufferSize(decodeSize);
byte byteVar3 = byteLiteral4;
if (byteVar3 == PAD) {
eof = true;
break;
} else {
if (byteVar3 >= 0 && byteVar3 < DECODE_TABLE.length) {
int intVar5 = intLiteral6;
if (intVar5 >= 0) {
modulus = (modulus + 1) % BYTES_PER_ENCODED_BLOCK;
bitWorkArea = (bitWorkArea << BITS_PER_ENCODED_BYTE) + intVar5;
if (modulus == 0) {
buffer[pos++] = (byte) ((bitWorkArea >> 16) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea >> 8) & MASK_8BITS);
buffer[pos++] = (byte) (bitWorkArea & MASK_8BITS);
}
}
}
}
}
// Two forms of EOF as far as base64 decoder is concerned: actual
if (eof && modulus != 0) {
ensureBufferSize(decodeSize);
switch(modulus) {
case 2:
bitWorkArea = bitWorkArea >> 4;
buffer[pos++] = (byte) ((bitWorkArea) & MASK_8BITS);
break;
case 3:
bitWorkArea = bitWorkArea >> 2;
buffer[pos++] = (byte) ((bitWorkArea >> 8) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea) & MASK_8BITS);
break;
}
}
}"
1872,DODGY_CODE,DLS_DEAD_LOCAL_STORE,FP,codec,842,"final byte[] buffer = ensureBufferSize(encodeSize, context);
","@Override
void encode(byte[] in, int inPos, int inAvail, Context context) {
if (context.eof) {
return;
}
if (inAvail < 0) {
context.eof = true;
if (0 == context.modulus && lineLength == 0) {
return;
}
final byte[] buffer = ensureBufferSize(encodeSize, context);
int savedPos = context.pos;
switch(context.modulus) {
case 1:
// top 6 bits:
context.buffer[context.pos++] = encodeTable[(context.ibitWorkArea >> 2) & MASK_6BITS];
context.buffer[context.pos++] = encodeTable[(context.ibitWorkArea << 4) & MASK_6BITS];
if (encodeTable == STANDARD_ENCODE_TABLE) {
context.buffer[context.pos++] = PAD;
context.buffer[context.pos++] = PAD;
}
break;
case 2:
context.buffer[context.pos++] = encodeTable[(context.ibitWorkArea >> 10) & MASK_6BITS];
context.buffer[context.pos++] = encodeTable[(context.ibitWorkArea >> 4) & MASK_6BITS];
context.buffer[context.pos++] = encodeTable[(context.ibitWorkArea << 2) & MASK_6BITS];
if (encodeTable == STANDARD_ENCODE_TABLE) {
context.buffer[context.pos++] = PAD;
}
break;
}
context.currentLinePos += context.pos - savedPos;
if (lineLength > 0 && context.currentLinePos > 0) {
System.arraycopy(lineSeparator, 0, context.buffer, context.pos, lineSeparator.length);
context.pos += lineSeparator.length;
}
} else {
for (int i = 0; i < inAvail; i++) {
final byte[] buffer = ensureBufferSize(encodeSize, context);
context.modulus = (context.modulus + 1) % BYTES_PER_UNENCODED_BLOCK;
int b = in[inPos++];
if (b < 0) {
b += 256;
}
context.ibitWorkArea = (context.ibitWorkArea << 8) + b;
if (0 == context.modulus) {
context.buffer[context.pos++] = encodeTable[(context.ibitWorkArea >> 18) & MASK_6BITS];
context.buffer[context.pos++] = encodeTable[(context.ibitWorkArea >> 12) & MASK_6BITS];
context.buffer[context.pos++] = encodeTable[(context.ibitWorkArea >> 6) & MASK_6BITS];
context.buffer[context.pos++] = encodeTable[context.ibitWorkArea & MASK_6BITS];
context.currentLinePos += BYTES_PER_ENCODED_BLOCK;
if (lineLength > 0 && lineLength <= context.currentLinePos) {
System.arraycopy(lineSeparator, 0, context.buffer, context.pos, lineSeparator.length);
context.pos += lineSeparator.length;
context.currentLinePos = 0;
}
}
}
}
}","@Override
void encode(byte[] in, int inPos, int inAvail, Context context) {
if (context.eof) {
return;
}
if (inAvail < 0) {
context.eof = true;
if (0 == context.modulus && lineLength == 0) {
return;
}
final byte[] byteArrayVar1 = byteArrayLiteral2;
int intVar3 = intLiteral4;
switch(context.modulus) {
case 1:
// top 6 bits:
context.buffer[context.pos++] = encodeTable[(context.ibitWorkArea >> 2) & MASK_6BITS];
context.buffer[context.pos++] = encodeTable[(context.ibitWorkArea << 4) & MASK_6BITS];
if (encodeTable == STANDARD_ENCODE_TABLE) {
context.buffer[context.pos++] = PAD;
context.buffer[context.pos++] = PAD;
}
break;
case 2:
context.buffer[context.pos++] = encodeTable[(context.ibitWorkArea >> 10) & MASK_6BITS];
context.buffer[context.pos++] = encodeTable[(context.ibitWorkArea >> 4) & MASK_6BITS];
context.buffer[context.pos++] = encodeTable[(context.ibitWorkArea << 2) & MASK_6BITS];
if (encodeTable == STANDARD_ENCODE_TABLE) {
context.buffer[context.pos++] = PAD;
}
break;
}
context.currentLinePos += context.pos - intVar3;
if (lineLength > 0 && context.currentLinePos > 0) {
System.arraycopy(lineSeparator, 0, context.buffer, context.pos, lineSeparator.length);
context.pos += lineSeparator.length;
}
} else {
for (int intVar9 = intLiteral10; intVar5 < intLiteral1; intVar5++) {
final byte[] byteArrayVar1 = byteArrayLiteral2;
context.modulus = (context.modulus + 1) % BYTES_PER_UNENCODED_BLOCK;
int intVar7 = intLiteral8;
if (intVar7 < 0) {
intVar7 += 256;
}
context.ibitWorkArea = (context.ibitWorkArea << 8) + intVar7;
if (0 == context.modulus) {
context.buffer[context.pos++] = encodeTable[(context.ibitWorkArea >> 18) & MASK_6BITS];
context.buffer[context.pos++] = encodeTable[(context.ibitWorkArea >> 12) & MASK_6BITS];
context.buffer[context.pos++] = encodeTable[(context.ibitWorkArea >> 6) & MASK_6BITS];
context.buffer[context.pos++] = encodeTable[context.ibitWorkArea & MASK_6BITS];
context.currentLinePos += BYTES_PER_ENCODED_BLOCK;
if (lineLength > 0 && lineLength <= context.currentLinePos) {
System.arraycopy(lineSeparator, 0, context.buffer, context.pos, lineSeparator.length);
context.pos += lineSeparator.length;
context.currentLinePos = 0;
}
}
}
}
}"
1874,I18N,DM_CONVERT_CASE,TP,codec,844,"String text = input.toLowerCase(); // todo: locale?
","public Languages.LanguageSet guessLanguages(String input) {
// todo: locale?
String text = input.toLowerCase();
// System.out.println(""Testing text: '"" + text + ""'"");
Set<String> langs = new HashSet<String>(this.languages.getLanguages());
for (LangRule rule : this.rules) {
if (rule.matches(text)) {
if (rule.acceptOnMatch) {
langs.retainAll(rule.languages);
} else {
langs.removeAll(rule.languages);
}
// System.out.println(""Current languages: "" + langs);
} else {
}
}
Languages.LanguageSet ls = Languages.LanguageSet.from(langs);
return ls.equals(Languages.NO_LANGUAGES) ? Languages.ANY_LANGUAGE : ls;
}","public Languages.LanguageSet guessLanguages(String input) {
// todo: locale?
String stringVar1 = stringLiteral2;
// System.out.println(""Testing text: '"" + text + ""'"");
Set<String> set<string>Var3 = set<string>Literal4;
for (LangRule langruleVar5 : this.rules) {
if (langruleVar5.matches(stringVar1)) {
if (langruleVar5.acceptOnMatch) {
set<string>Var3.retainAll(langruleVar5.languages);
} else {
set<string>Var3.removeAll(langruleVar5.languages);
}
// System.out.println(""Current languages: "" + langs);
} else {
}
}
Languages.LanguageSet languages.languagesetVar6 = languages.languagesetLiteral7;
return languages.languagesetVar6.equals(Languages.NO_LANGUAGES) ? Languages.ANY_LANGUAGE : languages.languagesetVar6;
}"
1875,I18N,DM_DEFAULT_ENCODING,TP,codec,845,"byte[] byteArray = object instanceof String ? ((String) object).getBytes() : (byte[]) object;
","public Object encode(Object object) throws EncoderException {
try {
byte[] byteArray = object instanceof String ? ((String) object).getBytes() : (byte[]) object;
return encodeHex(byteArray);
} catch (ClassCastException e) {
throw new EncoderException(e.getMessage(), e);
}
}","public Object encode(Object object) throws EncoderException {
try {
byte[] byteArrayVar1 = byteArrayLiteral2;
return encodeHex(byteArrayVar1);
} catch (ClassCastException e) {
throw new EncoderException(e.getMessage(), e);
}
}"
1876,DODGY_CODE,SA_FIELD_DOUBLE_ASSIGNMENT,FP,codec,846,"modulus = (++modulus) % BITS_PER_ENCODED_BYTE;
","void encode(byte[] in, int inPos, int inAvail) {
if (eof) {
return;
}
if (inAvail < 0) {
eof = true;
if (0 == modulus) {
return;
}
ensureBufferSize(encodeSize);
switch(modulus) {
case 1:
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 3) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea << 2) & MASK_5BITS];
buffer[pos++] = PAD;
buffer[pos++] = PAD;
buffer[pos++] = PAD;
buffer[pos++] = PAD;
buffer[pos++] = PAD;
buffer[pos++] = PAD;
break;
case 2:
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 11) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 6) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 1) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea << 4) & MASK_5BITS];
buffer[pos++] = PAD;
buffer[pos++] = PAD;
buffer[pos++] = PAD;
buffer[pos++] = PAD;
break;
case 3:
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 19) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 14) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 9) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 4) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea << 1) & MASK_5BITS];
buffer[pos++] = PAD;
buffer[pos++] = PAD;
buffer[pos++] = PAD;
break;
case 4:
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 27) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 22) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 17) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 12) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 7) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 2) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea << 3) & MASK_5BITS];
buffer[pos++] = PAD;
break;
}
if (lineLength > 0) {
System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
pos += lineSeparator.length;
}
} else {
for (int i = 0; i < inAvail; i++) {
ensureBufferSize(encodeSize);
modulus = (++modulus) % BITS_PER_ENCODED_BYTE;
int b = in[inPos++];
if (b < 0) {
b += 256;
}
bitWorkArea = (bitWorkArea << 8) + b;
if (0 == modulus) {
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 35) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 30) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 25) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 20) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 15) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 10) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 5) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) bitWorkArea & MASK_5BITS];
currentLinePos += BYTES_PER_ENCODED_BLOCK;
if (lineLength > 0 && lineLength <= currentLinePos) {
System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
pos += lineSeparator.length;
currentLinePos = 0;
}
}
}
}
}","void encode(byte[] in, int inPos, int inAvail) {
if (eof) {
return;
}
if (inAvail < 0) {
eof = true;
if (0 == modulus) {
return;
}
ensureBufferSize(encodeSize);
switch(modulus) {
case 1:
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 3) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea << 2) & MASK_5BITS];
buffer[pos++] = PAD;
buffer[pos++] = PAD;
buffer[pos++] = PAD;
buffer[pos++] = PAD;
buffer[pos++] = PAD;
buffer[pos++] = PAD;
break;
case 2:
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 11) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 6) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 1) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea << 4) & MASK_5BITS];
buffer[pos++] = PAD;
buffer[pos++] = PAD;
buffer[pos++] = PAD;
buffer[pos++] = PAD;
break;
case 3:
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 19) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 14) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 9) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 4) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea << 1) & MASK_5BITS];
buffer[pos++] = PAD;
buffer[pos++] = PAD;
buffer[pos++] = PAD;
break;
case 4:
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 27) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 22) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 17) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 12) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 7) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 2) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea << 3) & MASK_5BITS];
buffer[pos++] = PAD;
break;
}
if (lineLength > 0) {
System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
pos += lineSeparator.length;
}
} else {
for (int intVar5 = intLiteral6; intVar1 < intLiteral1; intVar1++) {
ensureBufferSize(encodeSize);
modulus = (++modulus) % BITS_PER_ENCODED_BYTE;
int intVar3 = intLiteral4;
if (intVar3 < 0) {
intVar3 += 256;
}
bitWorkArea = (bitWorkArea << 8) + intVar3;
if (0 == modulus) {
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 35) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 30) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 25) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 20) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 15) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 10) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 5) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) bitWorkArea & MASK_5BITS];
currentLinePos += BYTES_PER_ENCODED_BLOCK;
if (lineLength > 0 && lineLength <= currentLinePos) {
System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
pos += lineSeparator.length;
currentLinePos = 0;
}
}
}
}
}"
1877,DODGY_CODE,SA_FIELD_DOUBLE_ASSIGNMENT,FP,codec,847,"modulus = (++modulus) % BITS_PER_ENCODED_CHAR;
","void encode(byte[] in, int inPos, int inAvail) {
if (eof) {
return;
}
if (inAvail < 0) {
eof = true;
if (0 == modulus) {
return;
}
ensureBufferSize(encodeSize);
switch(modulus) {
case 1:
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 3) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea << 2) & MASK_5BITS];
buffer[pos++] = PAD;
buffer[pos++] = PAD;
buffer[pos++] = PAD;
buffer[pos++] = PAD;
buffer[pos++] = PAD;
buffer[pos++] = PAD;
break;
case 2:
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 11) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 6) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 1) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea << 4) & MASK_5BITS];
buffer[pos++] = PAD;
buffer[pos++] = PAD;
buffer[pos++] = PAD;
buffer[pos++] = PAD;
break;
case 3:
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 19) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 14) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 9) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 4) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea << 1) & MASK_5BITS];
buffer[pos++] = PAD;
buffer[pos++] = PAD;
buffer[pos++] = PAD;
break;
case 4:
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 27) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 22) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 17) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 12) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 7) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 2) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea << 3) & MASK_5BITS];
buffer[pos++] = PAD;
break;
}
if (lineLength > 0) {
System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
pos += lineSeparator.length;
}
} else {
for (int i = 0; i < inAvail; i++) {
ensureBufferSize(encodeSize);
modulus = (++modulus) % BITS_PER_ENCODED_CHAR;
int b = in[inPos++];
if (b < 0) {
b += 256;
}
bitWorkArea = (bitWorkArea << 8) + b;
if (0 == modulus) {
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 35) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 30) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 25) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 20) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 15) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 10) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 5) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) bitWorkArea & MASK_5BITS];
currentLinePos += BYTES_PER_ENCODED_BLOCK;
if (lineLength > 0 && lineLength <= currentLinePos) {
System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
pos += lineSeparator.length;
currentLinePos = 0;
}
}
}
}
}","void encode(byte[] in, int inPos, int inAvail) {
if (eof) {
return;
}
if (inAvail < 0) {
eof = true;
if (0 == modulus) {
return;
}
ensureBufferSize(encodeSize);
switch(modulus) {
case 1:
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 3) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea << 2) & MASK_5BITS];
buffer[pos++] = PAD;
buffer[pos++] = PAD;
buffer[pos++] = PAD;
buffer[pos++] = PAD;
buffer[pos++] = PAD;
buffer[pos++] = PAD;
break;
case 2:
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 11) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 6) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 1) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea << 4) & MASK_5BITS];
buffer[pos++] = PAD;
buffer[pos++] = PAD;
buffer[pos++] = PAD;
buffer[pos++] = PAD;
break;
case 3:
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 19) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 14) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 9) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 4) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea << 1) & MASK_5BITS];
buffer[pos++] = PAD;
buffer[pos++] = PAD;
buffer[pos++] = PAD;
break;
case 4:
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 27) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 22) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 17) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 12) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 7) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 2) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea << 3) & MASK_5BITS];
buffer[pos++] = PAD;
break;
}
if (lineLength > 0) {
System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
pos += lineSeparator.length;
}
} else {
for (int intVar5 = intLiteral6; intVar1 < intLiteral1; intVar1++) {
ensureBufferSize(encodeSize);
modulus = (++modulus) % BITS_PER_ENCODED_CHAR;
int intVar3 = intLiteral4;
if (intVar3 < 0) {
intVar3 += 256;
}
bitWorkArea = (bitWorkArea << 8) + intVar3;
if (0 == modulus) {
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 35) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 30) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 25) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 20) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 15) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 10) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 5) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) bitWorkArea & MASK_5BITS];
currentLinePos += BYTES_PER_ENCODED_BLOCK;
if (lineLength > 0 && lineLength <= currentLinePos) {
System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
pos += lineSeparator.length;
currentLinePos = 0;
}
}
}
}
}"
1883,DODGY_CODE,SA_FIELD_DOUBLE_ASSIGNMENT,TP,codec,853,"modulus = (++modulus) % BYTES_PER_ENCODED_BLOCK;
","void decode(byte[] in, int inPos, int inAvail) {
if (eof) {
return;
}
if (inAvail < 0) {
eof = true;
}
for (int i = 0; i < inAvail; i++) {
ensureBufferSize(decodeSize);
byte b = in[inPos++];
if (b == PAD) {
eof = true;
break;
} else {
if (b >= 0 && b < DECODE_TABLE.length) {
int result = DECODE_TABLE[b];
if (result >= 0) {
modulus = (++modulus) % BYTES_PER_ENCODED_BLOCK;
bitWorkArea = (bitWorkArea << BITS_PER_ENCODED_BYTE) + result;
if (modulus == 0) {
buffer[pos++] = (byte) ((bitWorkArea >> 16) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea >> 8) & MASK_8BITS);
buffer[pos++] = (byte) (bitWorkArea & MASK_8BITS);
}
}
}
}
}
// Two forms of EOF as far as base64 decoder is concerned: actual
if (eof && modulus != 0) {
ensureBufferSize(decodeSize);
switch(modulus) {
case 2:
bitWorkArea = bitWorkArea >> 4;
buffer[pos++] = (byte) ((bitWorkArea) & MASK_8BITS);
break;
case 3:
bitWorkArea = bitWorkArea >> 2;
buffer[pos++] = (byte) ((bitWorkArea >> 8) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea) & MASK_8BITS);
break;
}
}
}","void decode(byte[] in, int inPos, int inAvail) {
if (eof) {
return;
}
if (inAvail < 0) {
eof = true;
}
for (int intVar7 = intLiteral8; intVar1 < intLiteral1; intVar1++) {
ensureBufferSize(decodeSize);
byte byteVar3 = byteLiteral4;
if (byteVar3 == PAD) {
eof = true;
break;
} else {
if (byteVar3 >= 0 && byteVar3 < DECODE_TABLE.length) {
int intVar5 = intLiteral6;
if (intVar5 >= 0) {
modulus = (++modulus) % BYTES_PER_ENCODED_BLOCK;
bitWorkArea = (bitWorkArea << BITS_PER_ENCODED_BYTE) + intVar5;
if (modulus == 0) {
buffer[pos++] = (byte) ((bitWorkArea >> 16) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea >> 8) & MASK_8BITS);
buffer[pos++] = (byte) (bitWorkArea & MASK_8BITS);
}
}
}
}
}
// Two forms of EOF as far as base64 decoder is concerned: actual
if (eof && modulus != 0) {
ensureBufferSize(decodeSize);
switch(modulus) {
case 2:
bitWorkArea = bitWorkArea >> 4;
buffer[pos++] = (byte) ((bitWorkArea) & MASK_8BITS);
break;
case 3:
bitWorkArea = bitWorkArea >> 2;
buffer[pos++] = (byte) ((bitWorkArea >> 8) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea) & MASK_8BITS);
break;
}
}
}"
1889,I18N,DM_DEFAULT_ENCODING,TP,codec,859,"return sha384(data.getBytes());
","public static byte[] sha384(String data) {
return sha384(data.getBytes());
}","public static byte[] sha384(String data) {
return sha384(data.getBytes());
}"
1892,I18N,DM_CONVERT_CASE,TP,codec,862,"return txt.toUpperCase() ;
","public String metaphone(String txt) {
boolean hard = false;
if ((txt == null) || (txt.length() == 0)) {
return """";
}
if (txt.length() == 1) {
return txt.toUpperCase();
}
char[] inwd = txt.toUpperCase().toCharArray();
StringBuffer local = new StringBuffer(40);
StringBuffer code = new StringBuffer(10);
switch(inwd[0]) {
case 'K':
case 'G':
case 'P':
if (inwd[1] == 'N') {
local.append(inwd, 1, inwd.length - 1);
} else {
local.append(inwd);
}
break;
case 'A':
if (inwd[1] == 'E') {
local.append(inwd, 1, inwd.length - 1);
} else {
local.append(inwd);
}
break;
case 'W':
if (inwd[1] == 'R') {
local.append(inwd, 1, inwd.length - 1);
break;
}
if (inwd[1] == 'H') {
local.append(inwd, 1, inwd.length - 1);
local.setCharAt(0, 'W');
} else {
local.append(inwd);
}
break;
case 'X':
inwd[0] = 'S';
local.append(inwd);
break;
default:
local.append(inwd);
}
int wdsz = local.length();
int n = 0;
while ((code.length() < this.getMaxCodeLen()) && (n < wdsz)) {
char symb = local.charAt(n);
if ((symb != 'C') && (isPreviousChar(local, n, symb))) {
n++;
} else {
switch(symb) {
case 'A':
case 'E':
case 'I':
case 'O':
case 'U':
if (n == 0) {
code.append(symb);
}
break;
case 'B':
if (isPreviousChar(local, n, 'M') && isLastChar(wdsz, n)) {
break;
}
code.append(symb);
break;
case 'C':
if (isPreviousChar(local, n, 'S') && !isLastChar(wdsz, n) && (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {
break;
}
if (regionMatch(local, n, ""CIA"")) {
code.append('X');
break;
}
if (!isLastChar(wdsz, n) && (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) {
code.append('S');
break;
}
if (isPreviousChar(local, n, 'S') && isNextChar(local, n, 'H')) {
code.append('K');
break;
}
if (isNextChar(local, n, 'H')) {
if ((n == 0) && (wdsz >= 3) && isVowel(local, 2)) {
code.append('K');
} else {
code.append('X');
}
} else {
code.append('K');
}
break;
case 'D':
if (!isLastChar(wdsz, n + 1) && isNextChar(local, n, 'G') && (FRONTV.indexOf(local.charAt(n + 2)) >= 0)) {
code.append('J');
n += 2;
} else {
code.append('T');
}
break;
case 'G':
if (isLastChar(wdsz, n + 1) && isNextChar(local, n, 'H')) {
break;
}
if (!isLastChar(wdsz, n + 1) && isNextChar(local, n, 'H') && !isVowel(local, n + 2)) {
break;
}
if ((n > 0) && (regionMatch(local, n, ""GN"") || regionMatch(local, n, ""GNED""))) {
break;
}
if (isPreviousChar(local, n, 'G')) {
hard = true;
} else {
hard = false;
}
if (!isLastChar(wdsz, n) && (FRONTV.indexOf(local.charAt(n + 1)) >= 0) && (!hard)) {
code.append('J');
} else {
code.append('K');
}
break;
case 'H':
if (isLastChar(wdsz, n)) {
break;
}
if ((n > 0) && (VARSON.indexOf(local.charAt(n - 1)) >= 0)) {
break;
}
if (isVowel(local, n + 1)) {
code.append('H');
}
break;
case 'F':
case 'J':
case 'L':
case 'M':
case 'N':
case 'R':
code.append(symb);
break;
case 'K':
if (n > 0) {
if (!isPreviousChar(local, n, 'C')) {
code.append(symb);
}
} else {
code.append(symb);
}
break;
case 'P':
if (isNextChar(local, n, 'H')) {
code.append('F');
} else {
code.append(symb);
}
break;
case 'Q':
code.append('K');
break;
case 'S':
if (regionMatch(local, n, ""SH"") || regionMatch(local, n, ""SIO"") || regionMatch(local, n, ""SIA"")) {
code.append('X');
} else {
code.append('S');
}
break;
case 'T':
if (regionMatch(local, n, ""TIA"") || regionMatch(local, n, ""TIO"")) {
code.append('X');
break;
}
if (regionMatch(local, n, ""TCH"")) {
break;
}
if (regionMatch(local, n, ""TH"")) {
code.append('0');
} else {
code.append('T');
}
break;
case 'V':
code.append('F');
break;
case 'W':
case 'Y':
if (!isLastChar(wdsz, n) && isVowel(local, n + 1)) {
code.append(symb);
}
break;
case 'X':
code.append('K');
code.append('S');
break;
case 'Z':
code.append('S');
break;
}
n++;
}
if (code.length() > this.getMaxCodeLen()) {
code.setLength(this.getMaxCodeLen());
}
}
return code.toString();
}","public String metaphone(String txt) {
boolean booleanVar1 = booleanLiteral2;
if ((txt == null) || (txt.length() == 0)) {
return """";
}
if (txt.length() == 1) {
return txt.toUpperCase();
}
char[] charArrayVar3 = charArrayLiteral4;
StringBuffer stringbufferVar5 = stringbufferLiteral6;
StringBuffer stringbufferVar7 = stringbufferLiteral8;
switch(charArrayVar3[0]) {
case 'K':
case 'G':
case 'P':
if (charArrayVar3[1] == 'N') {
stringbufferVar5.append(charArrayVar3, 1, charArrayVar3.length - 1);
} else {
stringbufferVar5.append(charArrayVar3);
}
break;
case 'A':
if (charArrayVar3[1] == 'E') {
stringbufferVar5.append(charArrayVar3, 1, charArrayVar3.length - 1);
} else {
stringbufferVar5.append(charArrayVar3);
}
break;
case 'W':
if (charArrayVar3[1] == 'R') {
stringbufferVar5.append(charArrayVar3, 1, charArrayVar3.length - 1);
break;
}
if (charArrayVar3[1] == 'H') {
stringbufferVar5.append(charArrayVar3, 1, charArrayVar3.length - 1);
stringbufferVar5.setCharAt(0, 'W');
} else {
stringbufferVar5.append(charArrayVar3);
}
break;
case 'X':
charArrayVar3[0] = 'S';
stringbufferVar5.append(charArrayVar3);
break;
default:
stringbufferVar5.append(charArrayVar3);
}
int intVar9 = intLiteral10;
int intVar11 = intLiteral12;
while ((stringbufferVar7.length() < this.getMaxCodeLen()) && (intVar11 < intVar9)) {
char charVar13 = charLiteral14;
if ((charVar13 != 'C') && (isPreviousChar(stringbufferVar5, intVar11, charVar13))) {
intVar11++;
} else {
switch(charVar13) {
case 'A':
case 'E':
case 'I':
case 'O':
case 'U':
if (intVar11 == 0) {
stringbufferVar7.append(charVar13);
}
break;
case 'B':
if (isPreviousChar(stringbufferVar5, intVar11, 'M') && isLastChar(intVar9, intVar11)) {
break;
}
stringbufferVar7.append(charVar13);
break;
case 'C':
if (isPreviousChar(stringbufferVar5, intVar11, 'S') && !isLastChar(intVar9, intVar11) && (FRONTV.indexOf(stringbufferVar5.charAt(intVar11 + 1)) >= 0)) {
break;
}
if (regionMatch(stringbufferVar5, intVar11, ""CIA"")) {
stringbufferVar7.append('X');
break;
}
if (!isLastChar(intVar9, intVar11) && (FRONTV.indexOf(stringbufferVar5.charAt(intVar11 + 1)) >= 0)) {
stringbufferVar7.append('S');
break;
}
if (isPreviousChar(stringbufferVar5, intVar11, 'S') && isNextChar(stringbufferVar5, intVar11, 'H')) {
stringbufferVar7.append('K');
break;
}
if (isNextChar(stringbufferVar5, intVar11, 'H')) {
if ((intVar11 == 0) && (intVar9 >= 3) && isVowel(stringbufferVar5, 2)) {
stringbufferVar7.append('K');
} else {
stringbufferVar7.append('X');
}
} else {
stringbufferVar7.append('K');
}
break;
case 'D':
if (!isLastChar(intVar9, intVar11 + 1) && isNextChar(stringbufferVar5, intVar11, 'G') && (FRONTV.indexOf(stringbufferVar5.charAt(intVar11 + 2)) >= 0)) {
stringbufferVar7.append('J');
intVar11 += 2;
} else {
stringbufferVar7.append('T');
}
break;
case 'G':
if (isLastChar(intVar9, intVar11 + 1) && isNextChar(stringbufferVar5, intVar11, 'H')) {
break;
}
if (!isLastChar(intVar9, intVar11 + 1) && isNextChar(stringbufferVar5, intVar11, 'H') && !isVowel(stringbufferVar5, intVar11 + 2)) {
break;
}
if ((intVar11 > 0) && (regionMatch(stringbufferVar5, intVar11, ""GN"") || regionMatch(stringbufferVar5, intVar11, ""GNED""))) {
break;
}
if (isPreviousChar(stringbufferVar5, intVar11, 'G')) {
booleanVar1 = true;
} else {
booleanVar1 = false;
}
if (!isLastChar(intVar9, intVar11) && (FRONTV.indexOf(stringbufferVar5.charAt(intVar11 + 1)) >= 0) && (!booleanVar1)) {
stringbufferVar7.append('J');
} else {
stringbufferVar7.append('K');
}
break;
case 'H':
if (isLastChar(intVar9, intVar11)) {
break;
}
if ((intVar11 > 0) && (VARSON.indexOf(stringbufferVar5.charAt(intVar11 - 1)) >= 0)) {
break;
}
if (isVowel(stringbufferVar5, intVar11 + 1)) {
stringbufferVar7.append('H');
}
break;
case 'F':
case 'J':
case 'L':
case 'M':
case 'N':
case 'R':
stringbufferVar7.append(charVar13);
break;
case 'K':
if (intVar11 > 0) {
if (!isPreviousChar(stringbufferVar5, intVar11, 'C')) {
stringbufferVar7.append(charVar13);
}
} else {
stringbufferVar7.append(charVar13);
}
break;
case 'P':
if (isNextChar(stringbufferVar5, intVar11, 'H')) {
stringbufferVar7.append('F');
} else {
stringbufferVar7.append(charVar13);
}
break;
case 'Q':
stringbufferVar7.append('K');
break;
case 'S':
if (regionMatch(stringbufferVar5, intVar11, ""SH"") || regionMatch(stringbufferVar5, intVar11, ""SIO"") || regionMatch(stringbufferVar5, intVar11, ""SIA"")) {
stringbufferVar7.append('X');
} else {
stringbufferVar7.append('S');
}
break;
case 'T':
if (regionMatch(stringbufferVar5, intVar11, ""TIA"") || regionMatch(stringbufferVar5, intVar11, ""TIO"")) {
stringbufferVar7.append('X');
break;
}
if (regionMatch(stringbufferVar5, intVar11, ""TCH"")) {
break;
}
if (regionMatch(stringbufferVar5, intVar11, ""TH"")) {
stringbufferVar7.append('0');
} else {
stringbufferVar7.append('T');
}
break;
case 'V':
stringbufferVar7.append('F');
break;
case 'W':
case 'Y':
if (!isLastChar(intVar9, intVar11) && isVowel(stringbufferVar5, intVar11 + 1)) {
stringbufferVar7.append(charVar13);
}
break;
case 'X':
stringbufferVar7.append('K');
stringbufferVar7.append('S');
break;
case 'Z':
stringbufferVar7.append('S');
break;
}
intVar11++;
}
if (stringbufferVar7.length() > this.getMaxCodeLen()) {
stringbufferVar7.setLength(this.getMaxCodeLen());
}
}
return stringbufferVar7.toString();
}"
1895,DODGY_CODE,SA_FIELD_DOUBLE_ASSIGNMENT,TP,codec,865,"modulus = (++modulus) % 4;
","void decode(byte[] in, int inPos, int inAvail) {
if (eof) {
return;
}
if (inAvail < 0) {
eof = true;
}
for (int i = 0; i < inAvail; i++) {
if (buf == null || buf.length - pos < decodeSize) {
resizeBuf();
}
byte b = in[inPos++];
if (b == PAD) {
modulus = (++modulus) % 4;
x = x << 6;
switch(modulus) {
case 3:
x = x << 6;
case 0:
buf[pos++] = (byte) ((x >> 16) & MASK_8BITS);
if (modulus == 0) {
buf[pos++] = (byte) ((x >> 8) & MASK_8BITS);
}
default:
eof = true;
return;
}
} else {
if (b >= 0 && b < base64ToInt.length) {
int result = base64ToInt[b];
if (result >= 0) {
modulus = (++modulus) % 4;
x = (x << 6) + result;
if (modulus == 0) {
buf[pos++] = (byte) ((x >> 16) & MASK_8BITS);
buf[pos++] = (byte) ((x >> 8) & MASK_8BITS);
buf[pos++] = (byte) (x & MASK_8BITS);
}
}
}
}
}
}","void decode(byte[] in, int inPos, int inAvail) {
if (eof) {
return;
}
if (inAvail < 0) {
eof = true;
}
for (int intVar7 = intLiteral8; intVar1 < intLiteral1; intVar1++) {
if (buf == null || buf.length - pos < decodeSize) {
resizeBuf();
}
byte byteVar3 = byteLiteral4;
if (byteVar3 == PAD) {
modulus = (++modulus) % 4;
x = x << 6;
switch(modulus) {
case 3:
x = x << 6;
case 0:
buf[pos++] = (byte) ((x >> 16) & MASK_8BITS);
if (modulus == 0) {
buf[pos++] = (byte) ((x >> 8) & MASK_8BITS);
}
default:
eof = true;
return;
}
} else {
if (byteVar3 >= 0 && byteVar3 < base64ToInt.length) {
int intVar5 = intLiteral6;
if (intVar5 >= 0) {
modulus = (++modulus) % 4;
x = (x << 6) + intVar5;
if (modulus == 0) {
buf[pos++] = (byte) ((x >> 16) & MASK_8BITS);
buf[pos++] = (byte) ((x >> 8) & MASK_8BITS);
buf[pos++] = (byte) (x & MASK_8BITS);
}
}
}
}
}
}"
1901,CORRECTNESS,IL_INFINITE_RECURSIVE_LOOP,FP,codec,871,"return getInitializedMac(algorithm, key);
","public static Mac getInitializedMac(final HmacAlgorithms algorithm, final byte[] key) {
return getInitializedMac(algorithm, key);
}","public static Mac getInitializedMac(final HmacAlgorithms algorithm, final byte[] key) {
return getInitializedMac(algorithm, key);
}"
1910,I18N,DM_DEFAULT_ENCODING,TP,codec,880,"return sha256(data.getBytes());
","public static byte[] sha256(String data) {
return sha256(data.getBytes());
}","public static byte[] sha256(String data) {
return sha256(data.getBytes());
}"
1918,I18N,DM_DEFAULT_ENCODING,TP,codec,888,"final byte[] bytes = data.getBytes();
","@Deprecated
public static long[] hash128(final String data) {
final byte[] bytes = data.getBytes();
return hash128(bytes, 0, bytes.length, DEFAULT_SEED);
}","@Deprecated
public static long[] hash128(final String data) {
final byte[] byteArrayVar1 = byteArrayLiteral2;
return hash128(byteArrayVar1, 0, byteArrayVar1.length, DEFAULT_SEED);
}"
1934,DODGY_CODE,SF_SWITCH_NO_DEFAULT,TP,codec,904,"switch (context.modulus) { 
case 1 : 
buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 3) & MASK_5BITS]; 
buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea << 2) & MASK_5BITS]; 
buffer[context.pos++] = PAD;
buffer[context.pos++] = PAD;
buffer[context.pos++] = PAD;
buffer[context.pos++] = PAD;
buffer[context.pos++] = PAD;
buffer[context.pos++] = PAD;
break;
case 2 : 
buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 11) & MASK_5BITS]; 
buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >>  6) & MASK_5BITS]; 
buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >>  1) & MASK_5BITS]; 
buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea <<  4) & MASK_5BITS]; 
buffer[context.pos++] = PAD;
buffer[context.pos++] = PAD;
buffer[context.pos++] = PAD;
buffer[context.pos++] = PAD;
break;
case 3 : 
buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 19) & MASK_5BITS]; 
buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 14) & MASK_5BITS]; 
buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >>  9) & MASK_5BITS]; 
buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >>  4) & MASK_5BITS]; 
buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea <<  1) & MASK_5BITS]; 
buffer[context.pos++] = PAD;
buffer[context.pos++] = PAD;
buffer[context.pos++] = PAD;
break;
case 4 : 
buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 27) & MASK_5BITS]; 
buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 22) & MASK_5BITS]; 
buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 17) & MASK_5BITS]; 
buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >> 12) & MASK_5BITS]; 
buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >>  7) & MASK_5BITS]; 
buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea >>  2) & MASK_5BITS]; 
buffer[context.pos++] = encodeTable[(int)(context.lbitWorkArea <<  3) & MASK_5BITS]; 
buffer[context.pos++] = PAD;
","@Override
void encode(byte[] in, int inPos, int inAvail, Context context) {
if (context.eof) {
return;
}
if (inAvail < 0) {
context.eof = true;
if (0 == context.modulus && lineLength == 0) {
return;
}
final byte[] buffer = ensureBufferSize(encodeSize, context);
final int savedPos = context.pos;
switch(context.modulus) {
case 1:
buffer[context.pos++] = encodeTable[(int) (context.lbitWorkArea >> 3) & MASK_5BITS];
buffer[context.pos++] = encodeTable[(int) (context.lbitWorkArea << 2) & MASK_5BITS];
buffer[context.pos++] = PAD;
buffer[context.pos++] = PAD;
buffer[context.pos++] = PAD;
buffer[context.pos++] = PAD;
buffer[context.pos++] = PAD;
buffer[context.pos++] = PAD;
break;
case 2:
buffer[context.pos++] = encodeTable[(int) (context.lbitWorkArea >> 11) & MASK_5BITS];
buffer[context.pos++] = encodeTable[(int) (context.lbitWorkArea >> 6) & MASK_5BITS];
buffer[context.pos++] = encodeTable[(int) (context.lbitWorkArea >> 1) & MASK_5BITS];
buffer[context.pos++] = encodeTable[(int) (context.lbitWorkArea << 4) & MASK_5BITS];
buffer[context.pos++] = PAD;
buffer[context.pos++] = PAD;
buffer[context.pos++] = PAD;
buffer[context.pos++] = PAD;
break;
case 3:
buffer[context.pos++] = encodeTable[(int) (context.lbitWorkArea >> 19) & MASK_5BITS];
buffer[context.pos++] = encodeTable[(int) (context.lbitWorkArea >> 14) & MASK_5BITS];
buffer[context.pos++] = encodeTable[(int) (context.lbitWorkArea >> 9) & MASK_5BITS];
buffer[context.pos++] = encodeTable[(int) (context.lbitWorkArea >> 4) & MASK_5BITS];
buffer[context.pos++] = encodeTable[(int) (context.lbitWorkArea << 1) & MASK_5BITS];
buffer[context.pos++] = PAD;
buffer[context.pos++] = PAD;
buffer[context.pos++] = PAD;
break;
case 4:
buffer[context.pos++] = encodeTable[(int) (context.lbitWorkArea >> 27) & MASK_5BITS];
buffer[context.pos++] = encodeTable[(int) (context.lbitWorkArea >> 22) & MASK_5BITS];
buffer[context.pos++] = encodeTable[(int) (context.lbitWorkArea >> 17) & MASK_5BITS];
buffer[context.pos++] = encodeTable[(int) (context.lbitWorkArea >> 12) & MASK_5BITS];
buffer[context.pos++] = encodeTable[(int) (context.lbitWorkArea >> 7) & MASK_5BITS];
buffer[context.pos++] = encodeTable[(int) (context.lbitWorkArea >> 2) & MASK_5BITS];
buffer[context.pos++] = encodeTable[(int) (context.lbitWorkArea << 3) & MASK_5BITS];
buffer[context.pos++] = PAD;
break;
}
context.currentLinePos += context.pos - savedPos;
if (lineLength > 0 && context.currentLinePos > 0) {
System.arraycopy(lineSeparator, 0, buffer, context.pos, lineSeparator.length);
context.pos += lineSeparator.length;
}
} else {
for (int i = 0; i < inAvail; i++) {
final byte[] buffer = ensureBufferSize(encodeSize, context);
context.modulus = (context.modulus + 1) % BYTES_PER_UNENCODED_BLOCK;
int b = in[inPos++];
if (b < 0) {
b += 256;
}
context.lbitWorkArea = (context.lbitWorkArea << 8) + b;
if (0 == context.modulus) {
buffer[context.pos++] = encodeTable[(int) (context.lbitWorkArea >> 35) & MASK_5BITS];
buffer[context.pos++] = encodeTable[(int) (context.lbitWorkArea >> 30) & MASK_5BITS];
buffer[context.pos++] = encodeTable[(int) (context.lbitWorkArea >> 25) & MASK_5BITS];
buffer[context.pos++] = encodeTable[(int) (context.lbitWorkArea >> 20) & MASK_5BITS];
buffer[context.pos++] = encodeTable[(int) (context.lbitWorkArea >> 15) & MASK_5BITS];
buffer[context.pos++] = encodeTable[(int) (context.lbitWorkArea >> 10) & MASK_5BITS];
buffer[context.pos++] = encodeTable[(int) (context.lbitWorkArea >> 5) & MASK_5BITS];
buffer[context.pos++] = encodeTable[(int) context.lbitWorkArea & MASK_5BITS];
context.currentLinePos += BYTES_PER_ENCODED_BLOCK;
if (lineLength > 0 && lineLength <= context.currentLinePos) {
System.arraycopy(lineSeparator, 0, buffer, context.pos, lineSeparator.length);
context.pos += lineSeparator.length;
context.currentLinePos = 0;
}
}
}
}
}","@Override
void encode(byte[] in, int inPos, int inAvail, Context context) {
if (context.eof) {
return;
}
if (inAvail < 0) {
context.eof = true;
if (0 == context.modulus && lineLength == 0) {
return;
}
final byte[] byteArrayVar1 = byteArrayLiteral2;
final int intVar3 = intLiteral4;
switch(context.modulus) {
case 1:
byteArrayVar1[context.pos++] = encodeTable[(int) (context.lbitWorkArea >> 3) & MASK_5BITS];
byteArrayVar1[context.pos++] = encodeTable[(int) (context.lbitWorkArea << 2) & MASK_5BITS];
byteArrayVar1[context.pos++] = PAD;
byteArrayVar1[context.pos++] = PAD;
byteArrayVar1[context.pos++] = PAD;
byteArrayVar1[context.pos++] = PAD;
byteArrayVar1[context.pos++] = PAD;
byteArrayVar1[context.pos++] = PAD;
break;
case 2:
byteArrayVar1[context.pos++] = encodeTable[(int) (context.lbitWorkArea >> 11) & MASK_5BITS];
byteArrayVar1[context.pos++] = encodeTable[(int) (context.lbitWorkArea >> 6) & MASK_5BITS];
byteArrayVar1[context.pos++] = encodeTable[(int) (context.lbitWorkArea >> 1) & MASK_5BITS];
byteArrayVar1[context.pos++] = encodeTable[(int) (context.lbitWorkArea << 4) & MASK_5BITS];
byteArrayVar1[context.pos++] = PAD;
byteArrayVar1[context.pos++] = PAD;
byteArrayVar1[context.pos++] = PAD;
byteArrayVar1[context.pos++] = PAD;
break;
case 3:
byteArrayVar1[context.pos++] = encodeTable[(int) (context.lbitWorkArea >> 19) & MASK_5BITS];
byteArrayVar1[context.pos++] = encodeTable[(int) (context.lbitWorkArea >> 14) & MASK_5BITS];
byteArrayVar1[context.pos++] = encodeTable[(int) (context.lbitWorkArea >> 9) & MASK_5BITS];
byteArrayVar1[context.pos++] = encodeTable[(int) (context.lbitWorkArea >> 4) & MASK_5BITS];
byteArrayVar1[context.pos++] = encodeTable[(int) (context.lbitWorkArea << 1) & MASK_5BITS];
byteArrayVar1[context.pos++] = PAD;
byteArrayVar1[context.pos++] = PAD;
byteArrayVar1[context.pos++] = PAD;
break;
case 4:
byteArrayVar1[context.pos++] = encodeTable[(int) (context.lbitWorkArea >> 27) & MASK_5BITS];
byteArrayVar1[context.pos++] = encodeTable[(int) (context.lbitWorkArea >> 22) & MASK_5BITS];
byteArrayVar1[context.pos++] = encodeTable[(int) (context.lbitWorkArea >> 17) & MASK_5BITS];
byteArrayVar1[context.pos++] = encodeTable[(int) (context.lbitWorkArea >> 12) & MASK_5BITS];
byteArrayVar1[context.pos++] = encodeTable[(int) (context.lbitWorkArea >> 7) & MASK_5BITS];
byteArrayVar1[context.pos++] = encodeTable[(int) (context.lbitWorkArea >> 2) & MASK_5BITS];
byteArrayVar1[context.pos++] = encodeTable[(int) (context.lbitWorkArea << 3) & MASK_5BITS];
byteArrayVar1[context.pos++] = PAD;
break;
}
context.currentLinePos += context.pos - intVar3;
if (lineLength > 0 && context.currentLinePos > 0) {
System.arraycopy(lineSeparator, 0, byteArrayVar1, context.pos, lineSeparator.length);
context.pos += lineSeparator.length;
}
} else {
for (int intVar9 = intLiteral10; intVar5 < intLiteral1; intVar5++) {
final byte[] byteArrayVar1 = byteArrayLiteral2;
context.modulus = (context.modulus + 1) % BYTES_PER_UNENCODED_BLOCK;
int intVar7 = intLiteral8;
if (intVar7 < 0) {
intVar7 += 256;
}
context.lbitWorkArea = (context.lbitWorkArea << 8) + intVar7;
if (0 == context.modulus) {
byteArrayVar1[context.pos++] = encodeTable[(int) (context.lbitWorkArea >> 35) & MASK_5BITS];
byteArrayVar1[context.pos++] = encodeTable[(int) (context.lbitWorkArea >> 30) & MASK_5BITS];
byteArrayVar1[context.pos++] = encodeTable[(int) (context.lbitWorkArea >> 25) & MASK_5BITS];
byteArrayVar1[context.pos++] = encodeTable[(int) (context.lbitWorkArea >> 20) & MASK_5BITS];
byteArrayVar1[context.pos++] = encodeTable[(int) (context.lbitWorkArea >> 15) & MASK_5BITS];
byteArrayVar1[context.pos++] = encodeTable[(int) (context.lbitWorkArea >> 10) & MASK_5BITS];
byteArrayVar1[context.pos++] = encodeTable[(int) (context.lbitWorkArea >> 5) & MASK_5BITS];
byteArrayVar1[context.pos++] = encodeTable[(int) context.lbitWorkArea & MASK_5BITS];
context.currentLinePos += BYTES_PER_ENCODED_BLOCK;
if (lineLength > 0 && lineLength <= context.currentLinePos) {
System.arraycopy(lineSeparator, 0, byteArrayVar1, context.pos, lineSeparator.length);
context.pos += lineSeparator.length;
context.currentLinePos = 0;
}
}
}
}
}"
1969,BAD_PRACTICE,NP_BOOLEAN_RETURN_NULL,FP,collections,33,"return null;
","public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key) {
if (map != null) {
final Object answer = map.get(key);
if (answer != null) {
if (answer instanceof Boolean) {
return (Boolean) answer;
}
if (answer instanceof String) {
return Boolean.valueOf((String) answer);
}
if (answer instanceof Number) {
final Number n = (Number) answer;
return n.intValue() != 0 ? Boolean.TRUE : Boolean.FALSE;
}
}
}
return null;
}","public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key) {
if (map != null) {
final Object objectVar1 = objectLiteral2;
if (objectVar1 != null) {
if (objectVar1 instanceof Boolean) {
return (Boolean) objectVar1;
}
if (objectVar1 instanceof String) {
return Boolean.valueOf((String) objectVar1);
}
if (objectVar1 instanceof Number) {
final Number numberVar3 = numberLiteral4;
return numberVar3.intValue() != 0 ? Boolean.TRUE : Boolean.FALSE;
}
}
}
return null;
}"
1974,BAD_PRACTICE,SE_BAD_FIELD,FP,collections,38,"private final Transformer<C, K> keyTransformer;","private final Transformer<C, K> keyTransformer;","private final Transformer<C, K> transformer<c,k>Var1;"
1975,BAD_PRACTICE,SE_BAD_FIELD,FP,collections,39,private final Predicate<? super E> predicate;,private final Predicate<? super E> predicate;,private final Predicate<? super E> predicate<? super e>Var1;
1979,BAD_PRACTICE,SE_BAD_FIELD,FP,collections,43,private final Closure<? super E>[] iClosures;,private final Closure<? super E>[] iClosures;,private final Closure<? super E>[] closure<? super e>ArrayVar1;
1980,BAD_PRACTICE,SE_BAD_FIELD,FP,collections,44,"private final Transformer<? super T, ? extends T>[] iTransformers;","private final Transformer<? super T, ? extends T>[] iTransformers;","private final Transformer<? super T, ? extends T>[] transformer<? super t,? extends t>ArrayVar1;"
1997,BAD_PRACTICE,SE_BAD_FIELD,FP,collections,61,"private final Transformer<? super E, ?> iTransformer;","private final Transformer<? super E, ?> iTransformer;","private final Transformer<? super E, ?> transformer<? super e,?>Var1;"
1998,BAD_PRACTICE,SE_BAD_FIELD,FP,collections,62,"private final Transformer<? super T, Boolean> iTransformer;","private final Transformer<? super T, Boolean> iTransformer;","private final Transformer<? super T, Boolean> transformer<? super t,boolean>Var1;"
2002,DODGY_CODE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,FP,collections,66,"return (List<E>) super.decorated();
","@Override
protected List<E> decorated() {
return (List<E>) super.decorated();
}","@Override
protected List<E> decorated() {
return (List<E>) super.decorated();
}"
2012,BAD_PRACTICE,HE_HASHCODE_USE_OBJECT_EQUALS,FP,collections,76,"return hash;
","@Override
public int hashCode() {
return hash;
}","@Override
public int hashCode() {
return hash;
}"
2018,DODGY_CODE,SF_SWITCH_FALLTHROUGH,FP,collections,82,"buf.append(',');
case 2:
buf.append(key2 == this ? ""(this Map)"" : key2);
","@Override
public String toString() {
if (delegateMap != null) {
return delegateMap.toString();
}
if (size == 0) {
return ""{}"";
}
final StringBuilder buf = new StringBuilder(128);
buf.append('{');
switch(size) {
case 3:
buf.append(key3 == this ? ""(this Map)"" : key3);
buf.append('=');
buf.append(value3 == this ? ""(this Map)"" : value3);
buf.append(',');
case 2:
buf.append(key2 == this ? ""(this Map)"" : key2);
buf.append('=');
buf.append(value2 == this ? ""(this Map)"" : value2);
buf.append(',');
case 1:
buf.append(key1 == this ? ""(this Map)"" : key1);
buf.append('=');
buf.append(value1 == this ? ""(this Map)"" : value1);
break;
default:
throw new IllegalStateException(""Invalid map index: "" + size);
}
buf.append('}');
return buf.toString();
}","@Override
public String toString() {
if (delegateMap != null) {
return delegateMap.toString();
}
if (size == 0) {
return ""{}"";
}
final StringBuilder stringbuilderVar1 = stringbuilderLiteral2;
stringbuilderVar1.append('{');
switch(size) {
case 3:
stringbuilderVar1.append(key3 == this ? ""(this Map)"" : key3);
stringbuilderVar1.append('=');
stringbuilderVar1.append(value3 == this ? ""(this Map)"" : value3);
stringbuilderVar1.append(',');
case 2:
stringbuilderVar1.append(key2 == this ? ""(this Map)"" : key2);
stringbuilderVar1.append('=');
stringbuilderVar1.append(value2 == this ? ""(this Map)"" : value2);
stringbuilderVar1.append(',');
case 1:
stringbuilderVar1.append(key1 == this ? ""(this Map)"" : key1);
stringbuilderVar1.append('=');
stringbuilderVar1.append(value1 == this ? ""(this Map)"" : value1);
break;
default:
throw new IllegalStateException(""Invalid map index: "" + size);
}
stringbuilderVar1.append('}');
return stringbuilderVar1.toString();
}"
2026,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,collections,90,"return (UnmodifiableMultiValuedMap<K, V>) map;
","@SuppressWarnings(""unchecked"")
public static <K, V> UnmodifiableMultiValuedMap<K, V> unmodifiableMultiValuedMap(MultiValuedMap<? extends K, ? extends V> map) {
if (map instanceof Unmodifiable) {
return (UnmodifiableMultiValuedMap<K, V>) map;
}
return new UnmodifiableMultiValuedMap<K, V>(map);
}","@SuppressWarnings(""unchecked"")
public static <K, V> UnmodifiableMultiValuedMap<K, V> unmodifiableMultiValuedMap(MultiValuedMap<? extends K, ? extends V> map) {
if (map instanceof Unmodifiable) {
return (UnmodifiableMultiValuedMap<K, V>) map;
}
return new UnmodifiableMultiValuedMap<K, V>(map);
}"
2031,DODGY_CODE,IA_AMBIGUOUS_INVOCATION_OF_INHERITED_OR_OUTER_METHOD,FP,collections,95,"Set<K> currentKeys = keySet();
","@Override
public void clear() {
Iterator<Map.Entry<K, V>> it = AbstractPatriciaTrie.this.entrySet().iterator();
Set<K> currentKeys = keySet();
while (it.hasNext()) {
if (currentKeys.contains(it.next().getKey())) {
it.remove();
}
}
}","@Override
public void clear() {
Iterator<Map.Entry<K, V>> iterator<map.entry<k,v>>Var1 = iterator<map.entry<k,v>>Literal2;
Set<K> set<k>Var3 = set<k>Literal4;
while (iterator<map.entry<k,v>>Var1.hasNext()) {
if (set<k>Var3.contains(iterator<map.entry<k,v>>Var1.next().getKey())) {
iterator<map.entry<k,v>>Var1.remove();
}
}
}"
2104,DODGY_CODE,DMI_NONSERIALIZABLE_OBJECT_WRITTEN,FP,collections,168,"out.writeObject(comparator());
","private void writeObject(final ObjectOutputStream out) throws IOException {
out.defaultWriteObject();
out.writeObject(comparator());
super.doWriteObject(out);
}","private void writeObject(final ObjectOutputStream out) throws IOException {
out.defaultWriteObject();
out.writeObject(comparator());
super.doWriteObject(out);
}"
2149,DODGY_CODE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,FP,collections,213,"return (List<E>) decorated();
","protected List<E> getList() {
return (List<E>) decorated();
}","protected List<E> getList() {
return (List<E>) decorated();
}"
2162,DODGY_CODE,SF_SWITCH_FALLTHROUGH,FP,collections,226,"total += hash3 ^ (value3 == null ? 0 : value3.hashCode());
case 2:
total += hash2 ^ (value2 == null ? 0 : value2.hashCode());
","@Override
public int hashCode() {
if (delegateMap != null) {
return delegateMap.hashCode();
}
int total = 0;
switch(size) {
case 3:
total += hash3 ^ (value3 == null ? 0 : value3.hashCode());
case 2:
total += hash2 ^ (value2 == null ? 0 : value2.hashCode());
case 1:
total += hash1 ^ (value1 == null ? 0 : value1.hashCode());
case 0:
break;
default:
throw new IllegalStateException(""Invalid map index: "" + size);
}
return total;
}","@Override
public int hashCode() {
if (delegateMap != null) {
return delegateMap.hashCode();
}
int intVar1 = intLiteral2;
switch(size) {
case 3:
intVar1 += hash3 ^ (value3 == null ? 0 : value3.hashCode());
case 2:
intVar1 += hash2 ^ (value2 == null ? 0 : value2.hashCode());
case 1:
intVar1 += hash1 ^ (value1 == null ? 0 : value1.hashCode());
case 0:
break;
default:
throw new IllegalStateException(""Invalid map index: "" + size);
}
return intVar1;
}"
2165,DODGY_CODE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,FP,collections,229,"final Set<V> set = (Set<V>) getMapping();
","@Override
public boolean equals(final Object other) {
final Set<V> set = (Set<V>) getMapping();
if (set == null) {
return Collections.emptySet().equals(other);
}
if (!(other instanceof Set)) {
return false;
}
final Set<?> otherSet = (Set<?>) other;
return SetUtils.isEqualSet(set, otherSet);
}","@Override
public boolean equals(final Object other) {
final Set<V> set<v>Var1 = set<v>Literal2;
if (set<v>Var1 == null) {
return Collections.emptySet().equals(other);
}
if (!(other instanceof Set)) {
return false;
}
final Set<?> set<?>Var3 = set<?>Literal4;
return SetUtils.isEqualSet(set<v>Var1, set<?>Var3);
}"
2172,DODGY_CODE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,FP,collections,236,"return (Set<E>) super.decorated();
","@Override
protected Set<E> decorated() {
return (Set<E>) super.decorated();
}","@Override
protected Set<E> decorated() {
return (Set<E>) super.decorated();
}"
2177,DODGY_CODE,RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT,FP,collections,241,"map.size();  
","@SuppressWarnings(""unchecked"")
public static <K, V> Map<K, V> putAll(final Map<K, V> map, final Object[] array) {
map.size();
if (array == null || array.length == 0) {
return map;
}
final Object obj = array[0];
if (obj instanceof Map.Entry) {
for (final Object element : array) {
final Map.Entry<K, V> entry = (Map.Entry<K, V>) element;
map.put(entry.getKey(), entry.getValue());
}
} else if (obj instanceof KeyValue) {
for (final Object element : array) {
final KeyValue<K, V> keyval = (KeyValue<K, V>) element;
map.put(keyval.getKey(), keyval.getValue());
}
} else if (obj instanceof Object[]) {
for (int i = 0; i < array.length; i++) {
final Object[] sub = (Object[]) array[i];
if (sub == null || sub.length < 2) {
throw new IllegalArgumentException(""Invalid array element: "" + i);
}
map.put((K) sub[0], (V) sub[1]);
}
} else {
for (int i = 0; i < array.length - 1; ) {
map.put((K) array[i++], (V) array[i++]);
}
}
return map;
}","@SuppressWarnings(""unchecked"")
public static <K, V> Map<K, V> putAll(final Map<K, V> map, final Object[] array) {
map.size();
if (array == null || array.length == 0) {
return map;
}
final Object objectVar1 = objectLiteral2;
if (objectVar1 instanceof Map.Entry) {
for (final Object objectVar3 : array) {
final Map.Entry<K, V> map.entry<k,v>Var4 = map.entry<k,v>Literal5;
map.put(map.entry<k,v>Var4.getKey(), map.entry<k,v>Var4.getValue());
}
} else if (objectVar1 instanceof KeyValue) {
for (final Object objectVar3 : array) {
final KeyValue<K, V> keyvalue<k,v>Var6 = keyvalue<k,v>Literal7;
map.put(keyvalue<k,v>Var6.getKey(), keyvalue<k,v>Var6.getValue());
}
} else if (objectVar1 instanceof Object[]) {
for (int intVar12 = intLiteral13; intVar8 < intLiteral1; intVar8++) {
final Object[] objectArrayVar10 = objectArrayLiteral11;
if (objectArrayVar10 == null || objectArrayVar10.length < 2) {
throw new IllegalArgumentException(""Invalid array element: "" + intVar8);
}
map.put((K) objectArrayVar10[0], (V) objectArrayVar10[1]);
}
} else {
for (int intVar12 = intLiteral13; intVar8 < intLiteral2; ) {
map.put((K) array[intVar8++], (V) array[intVar8++]);
}
}
return map;
}"
2186,BAD_PRACTICE,SE_BAD_FIELD,FP,collections,250,private final List<Comparator<E>> comparatorChain;,private final List<Comparator<E>> comparatorChain;,private final List<Comparator<E>> list<comparator<e>>Var1;
2188,BAD_PRACTICE,SE_BAD_FIELD,FP,collections,252,private final Comparator<E> comparator;,private final Comparator<E> comparator;,private final Comparator<E> comparator<e>Var1;
2194,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,collections,258,"return null;
","@SuppressWarnings(""unchecked"")
static <I, O> Transformer<I, O>[] copy(final Transformer<? super I, ? extends O>... transformers) {
if (transformers == null) {
return null;
}
return (Transformer<I, O>[]) transformers.clone();
}","@SuppressWarnings(""unchecked"")
static <I, O> Transformer<I, O>[] copy(final Transformer<? super I, ? extends O>... transformers) {
if (transformers == null) {
return null;
}
return (Transformer<I, O>[]) transformers.clone();
}"
2196,BAD_PRACTICE,SE_BAD_FIELD,FP,collections,260,"private final Transformer<? super I, ? extends O> iDefault;","private final Transformer<? super I, ? extends O> iDefault;","private final Transformer<? super I, ? extends O> transformer<? super i,? extends o>Var1;"
2201,MALICIOUS_CODE,EI_EXPOSE_REP,FP,collections,265,"return this.array;
","public E[] getArray() {
return this.array;
}","public E[] getArray() {
return this.array;
}"
2204,DODGY_CODE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,FP,collections,268,"return (List<E>) super.decorated();
","@Override
protected List<E> decorated() {
return (List<E>) super.decorated();
}","@Override
protected List<E> decorated() {
return (List<E>) super.decorated();
}"
2214,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,collections,278,"if (((ReferenceEntry<K, V>) entry).purge(ref)) {
","protected void purge(final Reference<?> ref) {
final int hash = ref.hashCode();
final int index = hashIndex(hash, data.length);
HashEntry<K, V> previous = null;
HashEntry<K, V> entry = data[index];
while (entry != null) {
if (((ReferenceEntry<K, V>) entry).purge(ref)) {
if (previous == null) {
data[index] = entry.next;
} else {
previous.next = entry.next;
}
this.size--;
return;
}
previous = entry;
entry = entry.next;
}
}","protected void purge(final Reference<?> ref) {
final int intVar1 = intLiteral2;
final int intVar3 = intLiteral4;
HashEntry<K, V> hashentry<k,v>Var5 = hashentry<k,v>Literal6;
HashEntry<K, V> hashentry<k,v>Var7 = hashentry<k,v>Literal8;
while (hashentry<k,v>Var7 != null) {
if (((ReferenceEntry<K, V>) hashentry<k,v>Var7).purge(ref)) {
if (hashentry<k,v>Var5 == null) {
data[intVar3] = hashentry<k,v>Var7.next;
} else {
hashentry<k,v>Var5.next = hashentry<k,v>Var7.next;
}
this.size--;
return;
}
hashentry<k,v>Var5 = hashentry<k,v>Var7;
hashentry<k,v>Var7 = hashentry<k,v>Var7.next;
}
}"
2217,DODGY_CODE,SF_SWITCH_FALLTHROUGH,FP,collections,281,"buf.append(',');
case 2:
buf.append(key2 == this ? ""(this Map)"" : key2);
","@Override
public String toString() {
if (delegateMap != null) {
return delegateMap.toString();
}
if (size == 0) {
return ""{}"";
}
final StringBuilder buf = new StringBuilder(128);
buf.append('{');
switch(size) {
case 3:
buf.append(key3 == this ? ""(this Map)"" : key3);
buf.append('=');
buf.append(value3 == this ? ""(this Map)"" : value3);
buf.append(',');
case 2:
buf.append(key2 == this ? ""(this Map)"" : key2);
buf.append('=');
buf.append(value2 == this ? ""(this Map)"" : value2);
buf.append(',');
case 1:
buf.append(key1 == this ? ""(this Map)"" : key1);
buf.append('=');
buf.append(value1 == this ? ""(this Map)"" : value1);
break;
default:
throw new IllegalStateException(""Invalid map index: "" + size);
}
buf.append('}');
return buf.toString();
}","@Override
public String toString() {
if (delegateMap != null) {
return delegateMap.toString();
}
if (size == 0) {
return ""{}"";
}
final StringBuilder stringbuilderVar1 = stringbuilderLiteral2;
stringbuilderVar1.append('{');
switch(size) {
case 3:
stringbuilderVar1.append(key3 == this ? ""(this Map)"" : key3);
stringbuilderVar1.append('=');
stringbuilderVar1.append(value3 == this ? ""(this Map)"" : value3);
stringbuilderVar1.append(',');
case 2:
stringbuilderVar1.append(key2 == this ? ""(this Map)"" : key2);
stringbuilderVar1.append('=');
stringbuilderVar1.append(value2 == this ? ""(this Map)"" : value2);
stringbuilderVar1.append(',');
case 1:
stringbuilderVar1.append(key1 == this ? ""(this Map)"" : key1);
stringbuilderVar1.append('=');
stringbuilderVar1.append(value1 == this ? ""(this Map)"" : value1);
break;
default:
throw new IllegalStateException(""Invalid map index: "" + size);
}
stringbuilderVar1.append('}');
return stringbuilderVar1.toString();
}"
2218,DODGY_CODE,SF_SWITCH_FALLTHROUGH,FP,collections,282,"delegateMap.put(key3, value3);
case 2:
delegateMap.put(key2, value2);
","private void convertToMap() {
delegateMap = createDelegateMap();
switch(size) {
case 3:
delegateMap.put(key3, value3);
case 2:
delegateMap.put(key2, value2);
case 1:
delegateMap.put(key1, value1);
case 0:
break;
default:
throw new IllegalStateException(""Invalid map index: "" + size);
}
size = 0;
hash1 = hash2 = hash3 = 0;
key1 = key2 = key3 = null;
value1 = value2 = value3 = null;
}","private void convertToMap() {
delegateMap = createDelegateMap();
switch(size) {
case 3:
delegateMap.put(key3, value3);
case 2:
delegateMap.put(key2, value2);
case 1:
delegateMap.put(key1, value1);
case 0:
break;
default:
throw new IllegalStateException(""Invalid map index: "" + size);
}
size = 0;
hash1 = hash2 = hash3 = 0;
key1 = key2 = key3 = null;
value1 = value2 = value3 = null;
}"
2219,DODGY_CODE,SF_SWITCH_FALLTHROUGH,FP,collections,283,"total += hash3 ^ (value3 == null ? 0 : value3.hashCode());
case 2:
total += hash2 ^ (value2 == null ? 0 : value2.hashCode());
","@Override
public int hashCode() {
if (delegateMap != null) {
return delegateMap.hashCode();
}
int total = 0;
switch(size) {
case 3:
total += hash3 ^ (value3 == null ? 0 : value3.hashCode());
case 2:
total += hash2 ^ (value2 == null ? 0 : value2.hashCode());
case 1:
total += hash1 ^ (value1 == null ? 0 : value1.hashCode());
case 0:
break;
default:
throw new IllegalStateException(""Invalid map index: "" + size);
}
return total;
}","@Override
public int hashCode() {
if (delegateMap != null) {
return delegateMap.hashCode();
}
int intVar1 = intLiteral2;
switch(size) {
case 3:
intVar1 += hash3 ^ (value3 == null ? 0 : value3.hashCode());
case 2:
intVar1 += hash2 ^ (value2 == null ? 0 : value2.hashCode());
case 1:
intVar1 += hash1 ^ (value1 == null ? 0 : value1.hashCode());
case 0:
break;
default:
throw new IllegalStateException(""Invalid map index: "" + size);
}
return intVar1;
}"
2237,BAD_PRACTICE,SE_BAD_FIELD,FP,collections,301,"private final Transformer<? super T, ? extends T>[] iTransformers;","private final Transformer<? super T, ? extends T>[] iTransformers;","private final Transformer<? super T, ? extends T>[] transformer<? super t,? extends t>ArrayVar1;"
2245,BAD_PRACTICE,SE_BAD_FIELD,FP,collections,309,private final Predicate<? super T> iPredicate;,private final Predicate<? super T> iPredicate;,private final Predicate<? super T> predicate<? super t>Var1;
2252,BAD_PRACTICE,SE_BAD_FIELD,FP,collections,316,private final Predicate<? super I>[] iPredicates;,private final Predicate<? super I>[] iPredicates;,private final Predicate<? super I>[] predicate<? super i>ArrayVar1;
2263,DODGY_CODE,UC_USELESS_CONDITION,FP,collections,327,"left.relativePosition += relativePosition + (relativePosition > 0 ? 0 : 1);
","private AVLNode<E> removeSelf() {
if (getRightSubTree() == null && getLeftSubTree() == null) {
return null;
}
if (getRightSubTree() == null) {
if (relativePosition > 0) {
left.relativePosition += relativePosition + (relativePosition > 0 ? 0 : 1);
}
left.max().setRight(null, right);
return left;
}
if (getLeftSubTree() == null) {
right.relativePosition += relativePosition - (relativePosition < 0 ? 0 : 1);
right.min().setLeft(null, left);
return right;
}
if (heightRightMinusLeft() > 0) {
final AVLNode<E> rightMin = right.min();
value = rightMin.value;
if (leftIsPrevious) {
left = rightMin.left;
}
right = right.removeMin();
if (relativePosition < 0) {
relativePosition++;
}
} else {
final AVLNode<E> leftMax = left.max();
value = leftMax.value;
if (rightIsNext) {
right = leftMax.right;
}
final AVLNode<E> leftPrevious = left.left;
left = left.removeMax();
if (left == null) {
left = leftPrevious;
leftIsPrevious = true;
}
if (relativePosition > 0) {
relativePosition--;
}
}
recalcHeight();
return this;
}","private AVLNode<E> removeSelf() {
if (getRightSubTree() == null && getLeftSubTree() == null) {
return null;
}
if (getRightSubTree() == null) {
if (relativePosition > 0) {
left.relativePosition += relativePosition + (relativePosition > 0 ? 0 : 1);
}
left.max().setRight(null, right);
return left;
}
if (getLeftSubTree() == null) {
right.relativePosition += relativePosition - (relativePosition < 0 ? 0 : 1);
right.min().setLeft(null, left);
return right;
}
if (heightRightMinusLeft() > 0) {
final AVLNode<E> avlnode<e>Var1 = avlnode<e>Literal2;
value = avlnode<e>Var1.value;
if (leftIsPrevious) {
left = avlnode<e>Var1.left;
}
right = right.removeMin();
if (relativePosition < 0) {
relativePosition++;
}
} else {
final AVLNode<E> avlnode<e>Var3 = avlnode<e>Literal4;
value = avlnode<e>Var3.value;
if (rightIsNext) {
right = avlnode<e>Var3.right;
}
final AVLNode<E> avlnode<e>Var5 = avlnode<e>Literal6;
left = left.removeMax();
if (left == null) {
left = avlnode<e>Var5;
leftIsPrevious = true;
}
if (relativePosition > 0) {
relativePosition--;
}
}
recalcHeight();
return this;
}"
2270,BAD_PRACTICE,HE_HASHCODE_USE_OBJECT_EQUALS,FP,collections,334,"return hash;
","@Override
public int hashCode() {
return hash;
}","@Override
public int hashCode() {
return hash;
}"
2271,BAD_PRACTICE,HE_HASHCODE_USE_OBJECT_EQUALS,FP,collections,335,"return hash;
","@Override
public int hashCode() {
return hash;
}","@Override
public int hashCode() {
return hash;
}"
2293,CORRECTNESS,INT_BAD_COMPARISON_WITH_NONNEGATIVE_VALUE,FP,collections,357,"if (listSize < 0) {
","@Override
public List<T> get(final int index) {
final int listSize = size();
if (listSize < 0) {
throw new IllegalArgumentException(""negative size: "" + listSize);
}
if (index < 0) {
throw new IndexOutOfBoundsException(""Index "" + index + "" must not be negative"");
}
if (index >= listSize) {
throw new IndexOutOfBoundsException(""Index "" + index + "" must be less than size "" + listSize);
}
final int start = index * size;
final int end = Math.min(start + size, list.size());
return list.subList(start, end);
}","@Override
public List<T> get(final int index) {
final int intVar1 = intLiteral2;
if (intVar1 < 0) {
throw new IllegalArgumentException(""negative size: "" + intVar1);
}
if (index < 0) {
throw new IndexOutOfBoundsException(""Index "" + index + "" must not be negative"");
}
if (index >= intVar1) {
throw new IndexOutOfBoundsException(""Index "" + index + "" must be less than size "" + intVar1);
}
final int intVar3 = intLiteral4;
final int intVar5 = intLiteral6;
return list.subList(intVar3, intVar5);
}"
2302,BAD_PRACTICE,SE_BAD_FIELD,FP,collections,366,"private final Transformer<? super T, ? extends T>[] iTransformers;","private final Transformer<? super T, ? extends T>[] iTransformers;","private final Transformer<? super T, ? extends T>[] transformer<? super t,? extends t>ArrayVar1;"
2306,BAD_PRACTICE,SE_BAD_FIELD,FP,collections,370,"private final Transformer<? super I, ? extends O> iFalseTransformer;","private final Transformer<? super I, ? extends O> iFalseTransformer;","private final Transformer<? super I, ? extends O> transformer<? super i,? extends o>Var1;"
2314,MALICIOUS_CODE,EI_EXPOSE_REP2,FP,collections,378,"this.keys = keys;
","public MultiKey(final K[] keys, final boolean makeClone) {
super();
if (keys == null) {
throw new IllegalArgumentException(""The array of keys must not be null"");
}
if (makeClone) {
this.keys = keys.clone();
} else {
this.keys = keys;
}
calculateHashCode(keys);
}","public MultiKey(final K[] keys, final boolean makeClone) {
super();
if (keys == null) {
throw new IllegalArgumentException(""The array of keys must not be null"");
}
if (makeClone) {
this.keys = keys.clone();
} else {
this.keys = keys;
}
calculateHashCode(keys);
}"
2337,DODGY_CODE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,FP,collections,401,"final List<V> list = (List<V>) getMapping();
","@Override
public boolean equals(Object other) {
final List<V> list = (List<V>) getMapping();
if (list == null) {
return Collections.emptyList().equals(other);
}
if (other == null) {
return false;
}
if (!(other instanceof List)) {
return false;
}
List<?> otherList = (List<?>) other;
if (ListUtils.isEqualList(list, otherList) == false) {
return false;
}
return true;
}","@Override
public boolean equals(Object other) {
final List<V> list<v>Var1 = list<v>Literal2;
if (list<v>Var1 == null) {
return Collections.emptyList().equals(other);
}
if (other == null) {
return false;
}
if (!(other instanceof List)) {
return false;
}
List<?> list<?>Var3 = list<?>Literal4;
if (ListUtils.isEqualList(list<v>Var1, list<?>Var3) == false) {
return false;
}
return true;
}"
2338,DODGY_CODE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,FP,collections,402,"final List<V> list = ListUtils.emptyIfNull((List<V>) getMapping());
","public List<V> subList(int fromIndex, int toIndex) {
final List<V> list = ListUtils.emptyIfNull((List<V>) getMapping());
return list.subList(fromIndex, toIndex);
}","public List<V> subList(int fromIndex, int toIndex) {
final List<V> list<v>Var1 = list<v>Literal2;
return list<v>Var1.subList(fromIndex, toIndex);
}"
2344,DODGY_CODE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,FP,collections,408,"final List<V> list = (List<V>) getMapping();
","@Override
public int hashCode() {
final List<V> list = (List<V>) getMapping();
if (list == null) {
return Collections.emptyList().hashCode();
}
return ListUtils.hashCodeForList(list);
}","@Override
public int hashCode() {
final List<V> list<v>Var1 = list<v>Literal2;
if (list<v>Var1 == null) {
return Collections.emptyList().hashCode();
}
return ListUtils.hashCodeForList(list<v>Var1);
}"
2356,DODGY_CODE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,FP,collections,420,"return (Set<E>) super.decorated();
","@Override
protected Set<E> decorated() {
return (Set<E>) super.decorated();
}","@Override
protected Set<E> decorated() {
return (Set<E>) super.decorated();
}"
2359,DODGY_CODE,DMI_NONSERIALIZABLE_OBJECT_WRITTEN,FP,collections,423,"out.writeObject(comparator());
","private void writeObject(final ObjectOutputStream out) throws IOException {
out.defaultWriteObject();
out.writeObject(comparator());
super.doWriteObject(out);
}","private void writeObject(final ObjectOutputStream out) throws IOException {
out.defaultWriteObject();
out.writeObject(comparator());
super.doWriteObject(out);
}"
2390,DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,collections,454,"entry = entry.next();
","protected ReferenceEntry<K, V> nextEntry() {
checkMod();
if (nextNull() && !hasNext()) {
throw new NoSuchElementException();
}
previous = entry;
entry = entry.next();
currentKey = nextKey;
currentValue = nextValue;
nextKey = null;
nextValue = null;
return previous;
}","protected ReferenceEntry<K, V> nextEntry() {
checkMod();
if (nextNull() && !hasNext()) {
throw new NoSuchElementException();
}
previous = entry;
entry = entry.next();
currentKey = nextKey;
currentValue = nextValue;
nextKey = null;
nextValue = null;
return previous;
}"
2484,DODGY_CODE,EQ_UNUSUAL,FP,collections,548,"return this.doEquals(obj, KEY);
","@Override
public boolean equals(final Object obj) {
return this.doEquals(obj, KEY);
}","@Override
public boolean equals(final Object obj) {
return this.doEquals(obj, KEY);
}"
2487,BAD_PRACTICE,SE_BAD_FIELD,FP,collections,551,private final Predicate<? super E> predicate;,private final Predicate<? super E> predicate;,private final Predicate<? super E> predicate<? super e>Var1;
2495,BAD_PRACTICE,SE_BAD_FIELD,FP,collections,559,"private final Transformer<? super T, ? extends T>[] iTransformers;","private final Transformer<? super T, ? extends T>[] iTransformers;","private final Transformer<? super T, ? extends T>[] transformer<? super t,? extends t>ArrayVar1;"
2501,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,collections,565,"return null;
","@SuppressWarnings(""unchecked"")
static <E> Closure<E>[] copy(final Closure<? super E>... closures) {
if (closures == null) {
return null;
}
return (Closure<E>[]) closures.clone();
}","@SuppressWarnings(""unchecked"")
static <E> Closure<E>[] copy(final Closure<? super E>... closures) {
if (closures == null) {
return null;
}
return (Closure<E>[]) closures.clone();
}"
2502,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,collections,566,"return null;
","@SuppressWarnings(""unchecked"")
static <I, O> Transformer<I, O>[] copy(final Transformer<? super I, ? extends O>... transformers) {
if (transformers == null) {
return null;
}
return (Transformer<I, O>[]) transformers.clone();
}","@SuppressWarnings(""unchecked"")
static <I, O> Transformer<I, O>[] copy(final Transformer<? super I, ? extends O>... transformers) {
if (transformers == null) {
return null;
}
return (Transformer<I, O>[]) transformers.clone();
}"
2537,DODGY_CODE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,FP,collections,601,"final Set<V> set = (Set<V>) getMapping();
","@Override
public int hashCode() {
final Set<V> set = (Set<V>) getMapping();
return SetUtils.hashCodeForSet(set);
}","@Override
public int hashCode() {
final Set<V> set<v>Var1 = set<v>Literal2;
return SetUtils.hashCodeForSet(set<v>Var1);
}"
2545,DODGY_CODE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,FP,collections,609,"return (Set<E>) super.decorated();
","@Override
protected Set<E> decorated() {
return (Set<E>) super.decorated();
}","@Override
protected Set<E> decorated() {
return (Set<E>) super.decorated();
}"
2553,Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,collections,617,"private UnmodifiableBidiMap<V, K> inverse;","private UnmodifiableBidiMap<V, K> inverse;","private UnmodifiableBidiMap<V, K> unmodifiablebidimap<v,k>Var1;"
2566,BAD_PRACTICE,SE_BAD_FIELD,FP,collections,630,"private final Transformer<? super T, Boolean> iTransformer;","private final Transformer<? super T, Boolean> iTransformer;","private final Transformer<? super T, Boolean> transformer<? super t,boolean>Var1;"
2580,PERFORMANCE,URF_UNREAD_FIELD,FP,collections,644,"V currentValue, nextValue;","V currentValue, nextValue;","V vVar1, vVar2;"
2581,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,collections,645,"if (((ReferenceEntry<K, V>) entry).purge(ref)) {
","protected void purge(final Reference<?> ref) {
final int hash = ref.hashCode();
final int index = hashIndex(hash, data.length);
HashEntry<K, V> previous = null;
HashEntry<K, V> entry = data[index];
while (entry != null) {
if (((ReferenceEntry<K, V>) entry).purge(ref)) {
if (previous == null) {
data[index] = entry.next;
} else {
previous.next = entry.next;
}
this.size--;
return;
}
previous = entry;
entry = entry.next;
}
}","protected void purge(final Reference<?> ref) {
final int intVar1 = intLiteral2;
final int intVar3 = intLiteral4;
HashEntry<K, V> hashentry<k,v>Var5 = hashentry<k,v>Literal6;
HashEntry<K, V> hashentry<k,v>Var7 = hashentry<k,v>Literal8;
while (hashentry<k,v>Var7 != null) {
if (((ReferenceEntry<K, V>) hashentry<k,v>Var7).purge(ref)) {
if (hashentry<k,v>Var5 == null) {
data[intVar3] = hashentry<k,v>Var7.next;
} else {
hashentry<k,v>Var5.next = hashentry<k,v>Var7.next;
}
this.size--;
return;
}
hashentry<k,v>Var5 = hashentry<k,v>Var7;
hashentry<k,v>Var7 = hashentry<k,v>Var7.next;
}
}"
2589,DODGY_CODE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,FP,collections,653,"final List<V> list = ListUtils.emptyIfNull((List<V>) getMapping());
","public int indexOf(Object o) {
final List<V> list = ListUtils.emptyIfNull((List<V>) getMapping());
return list.indexOf(o);
}","public int indexOf(Object o) {
final List<V> list<v>Var1 = list<v>Literal2;
return list<v>Var1.indexOf(o);
}"
2602,DODGY_CODE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,FP,collections,666,"List<V> valueList = (List<V>) entry.getValue();
","@Override
public int hashCode() {
int h = 0;
Iterator<Entry<K, Collection<V>>> it = getMap().entrySet().iterator();
while (it.hasNext()) {
Entry<K, Collection<V>> entry = it.next();
K key = entry.getKey();
List<V> valueList = (List<V>) entry.getValue();
h += (key == null ? 0 : key.hashCode()) ^ ListUtils.hashCodeForList(valueList);
}
return h;
}","@Override
public int hashCode() {
int intVar1 = intLiteral2;
Iterator<Entry<K, Collection<V>>> iterator<entry<k,collection<v>>>Var3 = iterator<entry<k,collection<v>>>Literal4;
while (iterator<entry<k,collection<v>>>Var3.hasNext()) {
Entry<K, Collection<V>> entry<k,collection<v>>Var5 = entry<k,collection<v>>Literal6;
K kVar7 = kLiteral8;
List<V> list<v>Var9 = list<v>Literal10;
intVar1 += (kVar7 == null ? 0 : kVar7.hashCode()) ^ ListUtils.hashCodeForList(list<v>Var9);
}
return intVar1;
}"
2605,DODGY_CODE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,FP,collections,669,"final Set<V> set = (Set<V>) getMapping();
","@Override
public boolean equals(Object other) {
final Set<V> set = (Set<V>) getMapping();
if (set == null) {
return Collections.emptySet().equals(other);
}
if (other == null) {
return false;
}
if (!(other instanceof Set)) {
return false;
}
Set<?> otherSet = (Set<?>) other;
if (SetUtils.isEqualSet(set, otherSet) == false) {
return false;
}
return true;
}","@Override
public boolean equals(Object other) {
final Set<V> set<v>Var1 = set<v>Literal2;
if (set<v>Var1 == null) {
return Collections.emptySet().equals(other);
}
if (other == null) {
return false;
}
if (!(other instanceof Set)) {
return false;
}
Set<?> set<?>Var3 = set<?>Literal4;
if (SetUtils.isEqualSet(set<v>Var1, set<?>Var3) == false) {
return false;
}
return true;
}"
2614,BAD_PRACTICE,SE_INNER_CLASS,FP,collections,678,"SynchronizedBagSet(final Set<E> set, final Object lock) {
super(set, lock);
}
","@Override
public boolean equals(final Object object) {
if (object == this) {
return true;
}
synchronized (lock) {
return getBag().equals(object);
}
}","@Override
public boolean equals(final Object object) {
if (object == this) {
return true;
}
synchronized (lock) {
return getBag().equals(object);
}
}"
2615,DODGY_CODE,EQ_UNUSUAL,FP,collections,679,"return TreeBidiMap.this.doEquals(obj, DataElement.VALUE);
","@Override
public boolean equals(final Object obj) {
return TreeBidiMap.this.doEquals(obj, DataElement.VALUE);
}","@Override
public boolean equals(final Object obj) {
return TreeBidiMap.this.doEquals(obj, DataElement.VALUE);
}"
2616,DODGY_CODE,EQ_UNUSUAL,FP,collections,680,"return this.doEquals(obj, KEY);
","@Override
public boolean equals(final Object obj) {
return this.doEquals(obj, KEY);
}","@Override
public boolean equals(final Object obj) {
return this.doEquals(obj, KEY);
}"
2630,BAD_PRACTICE,SE_BAD_FIELD,FP,collections,694,"private final Transformer<? super T, Boolean> iTransformer;","private final Transformer<? super T, Boolean> iTransformer;","private final Transformer<? super T, Boolean> transformer<? super t,boolean>Var1;"
2631,MALICIOUS_CODE,EI_EXPOSE_REP2,FP,collections,695,"this.array = array;
","public ObjectArrayIterator(final E[] array, final int start, final int end) {
super();
if (start < 0) {
throw new ArrayIndexOutOfBoundsException(""Start index must not be less than zero"");
}
if (end > array.length) {
throw new ArrayIndexOutOfBoundsException(""End index must not be greater than the array length"");
}
if (start > array.length) {
throw new ArrayIndexOutOfBoundsException(""Start index must not be greater than the array length"");
}
if (end < start) {
throw new IllegalArgumentException(""End index must not be less than start index"");
}
this.array = array;
this.startIndex = start;
this.endIndex = end;
this.index = start;
}","public ObjectArrayIterator(final E[] array, final int start, final int end) {
super();
if (start < 0) {
throw new ArrayIndexOutOfBoundsException(""Start index must not be less than zero"");
}
if (end > array.length) {
throw new ArrayIndexOutOfBoundsException(""End index must not be greater than the array length"");
}
if (start > array.length) {
throw new ArrayIndexOutOfBoundsException(""Start index must not be greater than the array length"");
}
if (end < start) {
throw new IllegalArgumentException(""End index must not be less than start index"");
}
this.array = array;
this.startIndex = start;
this.endIndex = end;
this.index = start;
}"
2649,DODGY_CODE,SF_SWITCH_FALLTHROUGH,FP,collections,713,"buf.append(',');
case 2:
buf.append(key2 == this ? ""(this Map)"" : key2);
","@Override
public String toString() {
if (delegateMap != null) {
return delegateMap.toString();
}
if (size == 0) {
return ""{}"";
}
final StringBuilder buf = new StringBuilder(128);
buf.append('{');
switch(size) {
case 3:
buf.append(key3 == this ? ""(this Map)"" : key3);
buf.append('=');
buf.append(value3 == this ? ""(this Map)"" : value3);
buf.append(',');
case 2:
buf.append(key2 == this ? ""(this Map)"" : key2);
buf.append('=');
buf.append(value2 == this ? ""(this Map)"" : value2);
buf.append(',');
case 1:
buf.append(key1 == this ? ""(this Map)"" : key1);
buf.append('=');
buf.append(value1 == this ? ""(this Map)"" : value1);
break;
default:
throw new IllegalStateException(""Invalid map index: "" + size);
}
buf.append('}');
return buf.toString();
}","@Override
public String toString() {
if (delegateMap != null) {
return delegateMap.toString();
}
if (size == 0) {
return ""{}"";
}
final StringBuilder stringbuilderVar1 = stringbuilderLiteral2;
stringbuilderVar1.append('{');
switch(size) {
case 3:
stringbuilderVar1.append(key3 == this ? ""(this Map)"" : key3);
stringbuilderVar1.append('=');
stringbuilderVar1.append(value3 == this ? ""(this Map)"" : value3);
stringbuilderVar1.append(',');
case 2:
stringbuilderVar1.append(key2 == this ? ""(this Map)"" : key2);
stringbuilderVar1.append('=');
stringbuilderVar1.append(value2 == this ? ""(this Map)"" : value2);
stringbuilderVar1.append(',');
case 1:
stringbuilderVar1.append(key1 == this ? ""(this Map)"" : key1);
stringbuilderVar1.append('=');
stringbuilderVar1.append(value1 == this ? ""(this Map)"" : value1);
break;
default:
throw new IllegalStateException(""Invalid map index: "" + size);
}
stringbuilderVar1.append('}');
return stringbuilderVar1.toString();
}"
2667,BAD_PRACTICE,SE_TRANSIENT_FIELD_NOT_RESTORED,FP,collections,731,private transient KeysBag keysBagView;,private transient KeysBag keysBagView;,private transient KeysBag keysbagVar1;
2668,DODGY_CODE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,FP,collections,732,"final Set<V> set = (Set<V>) getMapping();
","@Override
public int hashCode() {
final Set<V> set = (Set<V>) getMapping();
if (set == null) {
return Collections.emptySet().hashCode();
}
return SetUtils.hashCodeForSet(set);
}","@Override
public int hashCode() {
final Set<V> set<v>Var1 = set<v>Literal2;
if (set<v>Var1 == null) {
return Collections.emptySet().hashCode();
}
return SetUtils.hashCodeForSet(set<v>Var1);
}"
2672,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,collections,736,"return (UnmodifiableMultiValuedMap<K, V>) map;
","@SuppressWarnings(""unchecked"")
public static <K, V> UnmodifiableMultiValuedMap<K, V> unmodifiableMultiValuedMap(MultiValuedMap<? extends K, ? extends V> map) {
if (map instanceof Unmodifiable) {
return (UnmodifiableMultiValuedMap<K, V>) map;
}
return new UnmodifiableMultiValuedMap<K, V>(map);
}","@SuppressWarnings(""unchecked"")
public static <K, V> UnmodifiableMultiValuedMap<K, V> unmodifiableMultiValuedMap(MultiValuedMap<? extends K, ? extends V> map) {
if (map instanceof Unmodifiable) {
return (UnmodifiableMultiValuedMap<K, V>) map;
}
return new UnmodifiableMultiValuedMap<K, V>(map);
}"
2674,DODGY_CODE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,FP,collections,738,"return (Set<E>) super.decorated();
","@Override
protected Set<E> decorated() {
return (Set<E>) super.decorated();
}","@Override
protected Set<E> decorated() {
return (Set<E>) super.decorated();
}"
2679,DODGY_CODE,EQ_UNUSUAL,FP,collections,743,"return this.doEquals(obj, KEY);
","@Override
public boolean equals(final Object obj) {
return this.doEquals(obj, KEY);
}","@Override
public boolean equals(final Object obj) {
return this.doEquals(obj, KEY);
}"
2687,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,collections,751,"return null;
","@SuppressWarnings(""unchecked"")
static <T> Predicate<T>[] copy(final Predicate<? super T>... predicates) {
if (predicates == null) {
return null;
}
return (Predicate<T>[]) predicates.clone();
}","@SuppressWarnings(""unchecked"")
static <T> Predicate<T>[] copy(final Predicate<? super T>... predicates) {
if (predicates == null) {
return null;
}
return (Predicate<T>[]) predicates.clone();
}"
2688,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,collections,752,"return null;
","@SuppressWarnings(""unchecked"")
static <E> Closure<E>[] copy(final Closure<? super E>... closures) {
if (closures == null) {
return null;
}
return (Closure<E>[]) closures.clone();
}","@SuppressWarnings(""unchecked"")
static <E> Closure<E>[] copy(final Closure<? super E>... closures) {
if (closures == null) {
return null;
}
return (Closure<E>[]) closures.clone();
}"
2689,BAD_PRACTICE,SE_BAD_FIELD,FP,collections,753,"private final Transformer<? super I, ? extends O> iFalseTransformer;","private final Transformer<? super I, ? extends O> iFalseTransformer;","private final Transformer<? super I, ? extends O> transformer<? super i,? extends o>Var1;"
2709,PERFORMANCE,URF_UNREAD_FIELD,FP,collections,773,"V currentValue, nextValue;","V currentValue, nextValue;","V vVar1, vVar2;"
2714,DODGY_CODE,SF_SWITCH_FALLTHROUGH,FP,collections,778,"total += hash3 ^ (value3 == null ? 0 : value3.hashCode());
case 2:
total += hash2 ^ (value2 == null ? 0 : value2.hashCode());
","@Override
public int hashCode() {
if (delegateMap != null) {
return delegateMap.hashCode();
}
int total = 0;
switch(size) {
case 3:
total += hash3 ^ (value3 == null ? 0 : value3.hashCode());
case 2:
total += hash2 ^ (value2 == null ? 0 : value2.hashCode());
case 1:
total += hash1 ^ (value1 == null ? 0 : value1.hashCode());
case 0:
break;
default:
throw new IllegalStateException(""Invalid map index: "" + size);
}
return total;
}","@Override
public int hashCode() {
if (delegateMap != null) {
return delegateMap.hashCode();
}
int intVar1 = intLiteral2;
switch(size) {
case 3:
intVar1 += hash3 ^ (value3 == null ? 0 : value3.hashCode());
case 2:
intVar1 += hash2 ^ (value2 == null ? 0 : value2.hashCode());
case 1:
intVar1 += hash1 ^ (value1 == null ? 0 : value1.hashCode());
case 0:
break;
default:
throw new IllegalStateException(""Invalid map index: "" + size);
}
return intVar1;
}"
2737,DODGY_CODE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,FP,collections,801,"return (Set<E>) super.decorated();
","@Override
protected Set<E> decorated() {
return (Set<E>) super.decorated();
}","@Override
protected Set<E> decorated() {
return (Set<E>) super.decorated();
}"
2740,CORRECTNESS,INT_BAD_COMPARISON_WITH_NONNEGATIVE_VALUE,FP,collections,804,"if (listSize < 0) {
","@Override
public List<T> get(final int index) {
final int listSize = size();
if (listSize < 0) {
throw new IllegalArgumentException(""negative size: "" + listSize);
}
if (index < 0) {
throw new IndexOutOfBoundsException(""Index "" + index + "" must not be negative"");
}
if (index >= listSize) {
throw new IndexOutOfBoundsException(""Index "" + index + "" must be less than size "" + listSize);
}
final int start = index * size;
final int end = Math.min(start + size, list.size());
return list.subList(start, end);
}","@Override
public List<T> get(final int index) {
final int intVar1 = intLiteral2;
if (intVar1 < 0) {
throw new IllegalArgumentException(""negative size: "" + intVar1);
}
if (index < 0) {
throw new IndexOutOfBoundsException(""Index "" + index + "" must not be negative"");
}
if (index >= intVar1) {
throw new IndexOutOfBoundsException(""Index "" + index + "" must be less than size "" + intVar1);
}
final int intVar3 = intLiteral4;
final int intVar5 = intLiteral6;
return list.subList(intVar3, intVar5);
}"
2745,DODGY_CODE,EQ_UNUSUAL,FP,collections,809,"return this.doEquals(obj, KEY);
","@Override
public boolean equals(final Object obj) {
return this.doEquals(obj, KEY);
}","@Override
public boolean equals(final Object obj) {
return this.doEquals(obj, KEY);
}"
2752,BAD_PRACTICE,SE_BAD_FIELD,FP,collections,816,private final Comparator<E> comparator;,private final Comparator<E> comparator;,private final Comparator<E> comparator<e>Var1;
2758,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,collections,822,"return null;
","@SuppressWarnings(""unchecked"")
static <E> Closure<E>[] copy(final Closure<? super E>... closures) {
if (closures == null) {
return null;
}
return (Closure<E>[]) closures.clone();
}","@SuppressWarnings(""unchecked"")
static <E> Closure<E>[] copy(final Closure<? super E>... closures) {
if (closures == null) {
return null;
}
return (Closure<E>[]) closures.clone();
}"
2761,BAD_PRACTICE,SE_BAD_FIELD,FP,collections,825,"private final Transformer<? super I, ? extends O> iDefault;","private final Transformer<? super I, ? extends O> iDefault;","private final Transformer<? super I, ? extends O> transformer<? super i,? extends o>Var1;"
2767,MALICIOUS_CODE,EI_EXPOSE_REP2,FP,collections,831,"this.keys = keys;
","public MultiKey(final K[] keys, final boolean makeClone) {
super();
if (keys == null) {
throw new IllegalArgumentException(""The array of keys must not be null"");
}
if (makeClone) {
this.keys = keys.clone();
} else {
this.keys = keys;
}
calculateHashCode(keys);
}","public MultiKey(final K[] keys, final boolean makeClone) {
super();
if (keys == null) {
throw new IllegalArgumentException(""The array of keys must not be null"");
}
if (makeClone) {
this.keys = keys.clone();
} else {
this.keys = keys;
}
calculateHashCode(keys);
}"
2769,DODGY_CODE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,FP,collections,833,"return (List<E>) super.decorated();
","@Override
protected List<E> decorated() {
return (List<E>) super.decorated();
}","@Override
protected List<E> decorated() {
return (List<E>) super.decorated();
}"
2778,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,collections,842,"if (((ReferenceEntry<K, V>) entry).purge(ref)) {
","protected void purge(final Reference<?> ref) {
final int hash = ref.hashCode();
final int index = hashIndex(hash, data.length);
HashEntry<K, V> previous = null;
HashEntry<K, V> entry = data[index];
while (entry != null) {
if (((ReferenceEntry<K, V>) entry).purge(ref)) {
if (previous == null) {
data[index] = entry.next;
} else {
previous.next = entry.next;
}
this.size--;
return;
}
previous = entry;
entry = entry.next;
}
}","protected void purge(final Reference<?> ref) {
final int intVar1 = intLiteral2;
final int intVar3 = intLiteral4;
HashEntry<K, V> hashentry<k,v>Var5 = hashentry<k,v>Literal6;
HashEntry<K, V> hashentry<k,v>Var7 = hashentry<k,v>Literal8;
while (hashentry<k,v>Var7 != null) {
if (((ReferenceEntry<K, V>) hashentry<k,v>Var7).purge(ref)) {
if (hashentry<k,v>Var5 == null) {
data[intVar3] = hashentry<k,v>Var7.next;
} else {
hashentry<k,v>Var5.next = hashentry<k,v>Var7.next;
}
this.size--;
return;
}
hashentry<k,v>Var5 = hashentry<k,v>Var7;
hashentry<k,v>Var7 = hashentry<k,v>Var7.next;
}
}"
2783,DODGY_CODE,SF_SWITCH_FALLTHROUGH,FP,collections,847,"delegateMap.put(key3, value3);
case 2:
delegateMap.put(key2, value2);
","private void convertToMap() {
delegateMap = createDelegateMap();
switch(size) {
case 3:
delegateMap.put(key3, value3);
case 2:
delegateMap.put(key2, value2);
case 1:
delegateMap.put(key1, value1);
case 0:
break;
default:
throw new IllegalStateException(""Invalid map index: "" + size);
}
size = 0;
hash1 = hash2 = hash3 = 0;
key1 = key2 = key3 = null;
value1 = value2 = value3 = null;
}","private void convertToMap() {
delegateMap = createDelegateMap();
switch(size) {
case 3:
delegateMap.put(key3, value3);
case 2:
delegateMap.put(key2, value2);
case 1:
delegateMap.put(key1, value1);
case 0:
break;
default:
throw new IllegalStateException(""Invalid map index: "" + size);
}
size = 0;
hash1 = hash2 = hash3 = 0;
key1 = key2 = key3 = null;
value1 = value2 = value3 = null;
}"
2838,PERFORMANCE,UPM_UNCALLED_PRIVATE_METHOD,FP,configuration,49,"return sourceURL != null ? sourceURL.toExternalForm()
","private String sourceURLAsString() {
return sourceURL != null ? sourceURL.toExternalForm() : StringUtils.EMPTY;
}","private String sourceURLAsString() {
return sourceURL != null ? sourceURL.toExternalForm() : StringUtils.EMPTY;
}"
2862,DODGY_CODE,REC_CATCH_EXCEPTION,FP,configuration,73,"catch (final Exception ex)
","private FileSystemOptions getOptions(final String scheme) {
if (scheme == null) {
return null;
}
final FileSystemOptions opts = new FileSystemOptions();
FileSystemConfigBuilder builder;
try {
builder = getManager().getFileSystemConfigBuilder(scheme);
} catch (final Exception ex) {
return null;
}
final FileOptionsProvider provider = getFileOptionsProvider();
if (provider != null) {
final Map<String, Object> map = provider.getOptions();
if (map == null) {
return null;
}
int count = 0;
for (final Map.Entry<String, Object> entry : map.entrySet()) {
try {
String key = entry.getKey();
if (FileOptionsProvider.CURRENT_USER.equals(key)) {
key = ""creatorName"";
}
setProperty(builder, opts, key, entry.getValue());
++count;
} catch (final Exception ex) {
continue;
}
}
if (count > 0) {
return opts;
}
}
return null;
}","private FileSystemOptions getOptions(final String scheme) {
if (scheme == null) {
return null;
}
final FileSystemOptions filesystemoptionsVar1 = filesystemoptionsLiteral2;
FileSystemConfigBuilder filesystemconfigbuilderVar3;
try {
filesystemconfigbuilderVar3 = getManager().getFileSystemConfigBuilder(scheme);
} catch (final Exception ex) {
return null;
}
final FileOptionsProvider fileoptionsproviderVar4 = fileoptionsproviderLiteral5;
if (fileoptionsproviderVar4 != null) {
final Map<String, Object> map<string,object>Var6 = map<string,object>Literal7;
if (map<string,object>Var6 == null) {
return null;
}
int intVar8 = intLiteral9;
for (final Map.Entry<String, Object> map.entry<string,object>Var10 : map<string,object>Var6.entrySet()) {
try {
String stringVar11 = stringLiteral12;
if (FileOptionsProvider.CURRENT_USER.equals(stringVar11)) {
stringVar11 = ""creatorName"";
}
setProperty(filesystemconfigbuilderVar3, filesystemoptionsVar1, stringVar11, map.entry<string,object>Var10.getValue());
++intVar8;
} catch (final Exception ex) {
continue;
}
}
if (intVar8 > 0) {
return filesystemoptionsVar1;
}
}
return null;
}"
2904,CORRECTNESS,NP_GUARANTEED_DEREF,FP,configuration,115,"if (fileName.startsWith(""."" + File.separator))
","static File constructFile(String basePath, String fileName) {
File file = null;
File absolute = null;
if (fileName != null) {
absolute = new File(fileName);
}
if (StringUtils.isEmpty(basePath) || (absolute != null && absolute.isAbsolute())) {
file = new File(fileName);
} else {
StringBuffer fName = new StringBuffer();
fName.append(basePath);
if (!basePath.endsWith(File.separator)) {
fName.append(File.separator);
}
if (fileName.startsWith(""."" + File.separator)) {
fName.append(fileName.substring(2));
} else {
fName.append(fileName);
}
file = new File(fName.toString());
}
return file;
}","static File constructFile(String basePath, String fileName) {
File fileVar1 = fileLiteral2;
File fileVar3 = fileLiteral2;
if (fileName != null) {
fileVar3 = new File(fileName);
}
if (StringUtils.isEmpty(basePath) || (fileVar3 != null && fileVar3.isAbsolute())) {
fileVar1 = new File(fileName);
} else {
StringBuffer stringbufferVar4 = stringbufferLiteral5;
stringbufferVar4.append(basePath);
if (!basePath.endsWith(File.separator)) {
stringbufferVar4.append(File.separator);
}
if (fileName.startsWith(""."" + File.separator)) {
stringbufferVar4.append(fileName.substring(2));
} else {
stringbufferVar4.append(fileName);
}
fileVar1 = new File(stringbufferVar4.toString());
}
return fileVar1;
}"
2927,MALICIOUS_CODE,EI_EXPOSE_REP2,TP,configuration,138,"this.configurations = configurations;
","public void setConfigurations(Configuration[] configurations) {
this.configurations = configurations;
}","public void setConfigurations(Configuration[] configurations) {
this.configurations = configurations;
}"
2934,DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,configuration,145,"if (locator.getEncoding() != null)
","@Override
public void write(Writer out) throws ConfigurationException {
PrintWriter writer = new PrintWriter(out);
if (locator.getEncoding() != null) {
writer.println(""<?xml version=\""1.0\"" encoding=\"""" + locator.getEncoding() + ""\""?>"");
} else {
writer.println(""<?xml version=\""1.0\""?>"");
}
writer.println(""<!DOCTYPE plist SYSTEM \""file://localhost/System/Library/DTDs/PropertyList.dtd\"">"");
writer.println(""<plist version=\""1.0\"">"");
printNode(writer, 1, getNodeModel().getNodeHandler().getRootNode());
writer.println(""</plist>"");
writer.flush();
}","@Override
public void write(Writer out) throws ConfigurationException {
PrintWriter printwriterVar1 = printwriterLiteral2;
if (locator.getEncoding() != null) {
printwriterVar1.println(""<?xml version=\""1.0\"" encoding=\"""" + locator.getEncoding() + ""\""?>"");
} else {
printwriterVar1.println(""<?xml version=\""1.0\""?>"");
}
printwriterVar1.println(""<!DOCTYPE plist SYSTEM \""file://localhost/System/Library/DTDs/PropertyList.dtd\"">"");
printwriterVar1.println(""<plist version=\""1.0\"">"");
printNode(printwriterVar1, 1, getNodeModel().getNodeHandler().getRootNode());
printwriterVar1.println(""</plist>"");
printwriterVar1.flush();
}"
2959,BAD_PRACTICE,SE_BAD_FIELD,FP,configuration,170,private final Configuration configuration;,private final Configuration configuration;,private final Configuration configurationVar1;
2963,CORRECTNESS,NP_GUARANTEED_DEREF,FP,configuration,174,"file = new File(fileName);
","static File constructFile(String basePath, String fileName) {
File file;
File absolute = null;
if (fileName != null) {
absolute = new File(fileName);
}
if (StringUtils.isEmpty(basePath) || (absolute != null && absolute.isAbsolute())) {
file = new File(fileName);
} else {
StringBuilder fName = new StringBuilder();
fName.append(basePath);
if (!basePath.endsWith(File.separator)) {
fName.append(File.separator);
}
if (fileName.startsWith(""."" + File.separator)) {
fName.append(fileName.substring(2));
} else {
fName.append(fileName);
}
file = new File(fName.toString());
}
return file;
}","static File constructFile(String basePath, String fileName) {
File fileVar1;
File fileVar2 = fileLiteral3;
if (fileName != null) {
fileVar2 = new File(fileName);
}
if (StringUtils.isEmpty(basePath) || (fileVar2 != null && fileVar2.isAbsolute())) {
fileVar1 = new File(fileName);
} else {
StringBuilder stringbuilderVar4 = stringbuilderLiteral5;
stringbuilderVar4.append(basePath);
if (!basePath.endsWith(File.separator)) {
stringbuilderVar4.append(File.separator);
}
if (fileName.startsWith(""."" + File.separator)) {
stringbuilderVar4.append(fileName.substring(2));
} else {
stringbuilderVar4.append(fileName);
}
fileVar1 = new File(stringbuilderVar4.toString());
}
return fileVar1;
}"
2975,PERFORMANCE,DM_NUMBER_CTOR,TP,configuration,186,"return new Byte(n.byteValue());
","public static Byte toByte(Object value) throws ConversionException {
Number n = toNumber(value, Byte.class);
if (n instanceof Byte) {
return (Byte) n;
} else {
return new Byte(n.byteValue());
}
}","public static Byte toByte(Object value) throws ConversionException {
Number numberVar1 = numberLiteral2;
if (numberVar1 instanceof Byte) {
return (Byte) numberVar1;
} else {
return new Byte(numberVar1.byteValue());
}
}"
2993,CORRECTNESS,NP_GUARANTEED_DEREF,FP,configuration,204,"if (fileName.startsWith(""."" + File.separator))
","static File constructFile(String basePath, String fileName) {
File file;
File absolute = null;
if (fileName != null) {
absolute = new File(fileName);
}
if (StringUtils.isEmpty(basePath) || (absolute != null && absolute.isAbsolute())) {
file = new File(fileName);
} else {
StringBuilder fName = new StringBuilder();
fName.append(basePath);
if (!basePath.endsWith(File.separator)) {
fName.append(File.separator);
}
if (fileName.startsWith(""."" + File.separator)) {
fName.append(fileName.substring(2));
} else {
fName.append(fileName);
}
file = new File(fName.toString());
}
return file;
}","static File constructFile(String basePath, String fileName) {
File fileVar1;
File fileVar2 = fileLiteral3;
if (fileName != null) {
fileVar2 = new File(fileName);
}
if (StringUtils.isEmpty(basePath) || (fileVar2 != null && fileVar2.isAbsolute())) {
fileVar1 = new File(fileName);
} else {
StringBuilder stringbuilderVar4 = stringbuilderLiteral5;
stringbuilderVar4.append(basePath);
if (!basePath.endsWith(File.separator)) {
stringbuilderVar4.append(File.separator);
}
if (fileName.startsWith(""."" + File.separator)) {
stringbuilderVar4.append(fileName.substring(2));
} else {
stringbuilderVar4.append(fileName);
}
fileVar1 = new File(stringbuilderVar4.toString());
}
return fileVar1;
}"
3011,BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,TP,configuration,222,"parent.mkdirs();
","private void createPath(File file) {
if (file != null) {
if (!file.exists()) {
File parent = file.getParentFile();
if (parent != null && !parent.exists()) {
parent.mkdirs();
}
}
}
}","private void createPath(File file) {
if (file != null) {
if (!file.exists()) {
File fileVar1 = fileLiteral2;
if (fileVar1 != null && !fileVar1.exists()) {
fileVar1.mkdirs();
}
}
}
}"
3021,PERFORMANCE,DM_FP_NUMBER_CTOR,TP,configuration,232,"getConfiguration().addProperty(name, new Double(array[i]));
","public void set(String name, Object value) {
if (log.isTraceEnabled()) {
log.trace(""set("" + name + "","" + value + "")"");
}
if (value == null) {
throw new NullPointerException(""Error trying to set property to null."");
}
if (value instanceof List) {
List list = (List) value;
Iterator iterator = list.iterator();
while (iterator.hasNext()) {
getConfiguration().addProperty(name, iterator.next());
}
} else if (value instanceof int[]) {
int[] array = (int[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Integer(array[i]));
}
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, BooleanUtils.toBooleanObject(array[i]));
}
} else if (value instanceof char[]) {
char[] array = (char[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Character(array[i]));
}
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Byte(array[i]));
}
} else if (value instanceof short[]) {
short[] array = (short[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Short(array[i]));
}
} else if (value instanceof long[]) {
long[] array = (long[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Long(array[i]));
}
} else if (value instanceof float[]) {
float[] array = (float[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Float(array[i]));
}
} else if (value instanceof double[]) {
double[] array = (double[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Double(array[i]));
}
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, array[i]);
}
} else {
getConfiguration().setProperty(name, value);
}
}","public void set(String name, Object value) {
if (log.isTraceEnabled()) {
log.trace(""set("" + name + "","" + value + "")"");
}
if (value == null) {
throw new NullPointerException(""Error trying to set property to null."");
}
if (value instanceof List) {
List listVar1 = listLiteral2;
Iterator iteratorVar3 = iteratorLiteral4;
while (iteratorVar3.hasNext()) {
getConfiguration().addProperty(name, iteratorVar3.next());
}
} else if (value instanceof int[]) {
int[] intArrayVar5 = intArrayLiteral6;
for (int intVar17 = intLiteral18; intVar7 < intLiteral1; intVar7++) {
getConfiguration().addProperty(name, new Integer(intArrayVar5[intVar7]));
}
} else if (value instanceof boolean[]) {
boolean[] intArrayVar5 = booleanArrayLiteral9;
for (int intVar17 = intLiteral18; intVar7 < intArrayVar5.length; intVar7++) {
getConfiguration().addProperty(name, BooleanUtils.toBooleanObject(intArrayVar5[intVar7]));
}
} else if (value instanceof char[]) {
char[] intArrayVar5 = charArrayLiteral10;
for (int intVar17 = intLiteral18; intVar7 < intArrayVar5.length; intVar7++) {
getConfiguration().addProperty(name, new Character(intArrayVar5[intVar7]));
}
} else if (value instanceof byte[]) {
byte[] intArrayVar5 = byteArrayLiteral11;
for (int intVar17 = intLiteral18; intVar7 < intArrayVar5.length; intVar7++) {
getConfiguration().addProperty(name, new Byte(intArrayVar5[intVar7]));
}
} else if (value instanceof short[]) {
short[] intArrayVar5 = shortArrayLiteral12;
for (int intVar17 = intLiteral18; intVar7 < intArrayVar5.length; intVar7++) {
getConfiguration().addProperty(name, new Short(intArrayVar5[intVar7]));
}
} else if (value instanceof long[]) {
long[] intArrayVar5 = longArrayLiteral13;
for (int intVar17 = intLiteral18; intVar7 < intArrayVar5.length; intVar7++) {
getConfiguration().addProperty(name, new Long(intArrayVar5[intVar7]));
}
} else if (value instanceof float[]) {
float[] intArrayVar5 = floatArrayLiteral14;
for (int intVar17 = intLiteral18; intVar7 < intArrayVar5.length; intVar7++) {
getConfiguration().addProperty(name, new Float(intArrayVar5[intVar7]));
}
} else if (value instanceof double[]) {
double[] intArrayVar5 = doubleArrayLiteral15;
for (int intVar17 = intLiteral18; intVar7 < intArrayVar5.length; intVar7++) {
getConfiguration().addProperty(name, new Double(intArrayVar5[intVar7]));
}
} else if (value instanceof Object[]) {
Object[] intArrayVar5 = objectArrayLiteral16;
for (int intVar17 = intLiteral18; intVar7 < intArrayVar5.length; intVar7++) {
getConfiguration().addProperty(name, intArrayVar5[intVar7]);
}
} else {
getConfiguration().setProperty(name, value);
}
}"
3414,I18N,DM_DEFAULT_ENCODING,FP,configuration,625,"PrintStream stream = new PrintStream(os);
","private ImmutableNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
} else {
Iterator<ConfigData> it = configurations.iterator();
ImmutableNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = nodeCombiner.combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}","private ImmutableNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
} else {
Iterator<ConfigData> iterator<configdata>Var1 = iterator<configdata>Literal2;
ImmutableNode immutablenodeVar3 = immutablenodeLiteral4;
while (iterator<configdata>Var1.hasNext()) {
immutablenodeVar3 = nodeCombiner.combine(immutablenodeVar3, iterator<configdata>Var1.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream bytearrayoutputstreamVar5 = bytearrayoutputstreamLiteral6;
PrintStream printstreamVar7 = printstreamLiteral8;
TreeUtils.printTree(printstreamVar7, immutablenodeVar3);
getLogger().debug(bytearrayoutputstreamVar5.toString());
}
return immutablenodeVar3;
}
}"
3439,DODGY_CODE,REC_CATCH_EXCEPTION,FP,configuration,650,"catch (Exception ex)
","private FileSystemOptions getOptions(String scheme) {
FileSystemOptions opts = new FileSystemOptions();
FileSystemConfigBuilder builder;
try {
builder = VFS.getManager().getFileSystemConfigBuilder(scheme);
} catch (Exception ex) {
return null;
}
FileOptionsProvider provider = getFileOptionsProvider();
if (provider != null) {
Map<String, Object> map = provider.getOptions();
if (map == null) {
return null;
}
int count = 0;
for (Map.Entry<String, Object> entry : map.entrySet()) {
try {
String key = entry.getKey();
if (FileOptionsProvider.CURRENT_USER.equals(key)) {
key = ""creatorName"";
}
setProperty(builder, opts, key, entry.getValue());
++count;
} catch (Exception ex) {
continue;
}
}
if (count > 0) {
return opts;
}
}
return null;
}","private FileSystemOptions getOptions(String scheme) {
FileSystemOptions filesystemoptionsVar1 = filesystemoptionsLiteral2;
FileSystemConfigBuilder filesystemconfigbuilderVar3;
try {
filesystemconfigbuilderVar3 = VFS.getManager().getFileSystemConfigBuilder(scheme);
} catch (Exception ex) {
return null;
}
FileOptionsProvider fileoptionsproviderVar4 = fileoptionsproviderLiteral5;
if (fileoptionsproviderVar4 != null) {
Map<String, Object> map<string,object>Var6 = map<string,object>Literal7;
if (map<string,object>Var6 == null) {
return null;
}
int intVar8 = intLiteral9;
for (Map.Entry<String, Object> map.entry<string,object>Var10 : map<string,object>Var6.entrySet()) {
try {
String stringVar11 = stringLiteral12;
if (FileOptionsProvider.CURRENT_USER.equals(stringVar11)) {
stringVar11 = ""creatorName"";
}
setProperty(filesystemconfigbuilderVar3, filesystemoptionsVar1, stringVar11, map.entry<string,object>Var10.getValue());
++intVar8;
} catch (Exception ex) {
continue;
}
}
if (intVar8 > 0) {
return filesystemoptionsVar1;
}
}
return null;
}"
3440,PERFORMANCE,URF_UNREAD_FIELD,FP,configuration,651,private final String protocol;,private final String protocol;,private final String stringVar1;
3452,BAD_PRACTICE,SE_BAD_FIELD,FP,configuration,663,private final NodeHandler<T> handler;,private final NodeHandler<T> handler;,private final NodeHandler<T> nodehandler<t>Var1;
3453,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,configuration,664,"return new ConfigurationNodePointer((ConfigurationNodePointer) parent,
","@Override
@SuppressWarnings(""unchecked"")
public NodePointer createNodePointer(NodePointer parent, QName name, Object bean) {
if (bean instanceof NodeWrapper) {
NodeWrapper<?> wrapper = (NodeWrapper<?>) bean;
return new ConfigurationNodePointer((ConfigurationNodePointer) parent, wrapper.getNode(), wrapper.getNodeHandler());
}
return null;
}","@Override
@SuppressWarnings(""unchecked"")
public NodePointer createNodePointer(NodePointer parent, QName name, Object bean) {
if (bean instanceof NodeWrapper) {
NodeWrapper<?> nodewrapper<?>Var1 = nodewrapper<?>Literal2;
return new ConfigurationNodePointer((ConfigurationNodePointer) parent, nodewrapper<?>Var1.getNode(), nodewrapper<?>Var1.getNodeHandler());
}
return null;
}"
3468,I18N,DM_DEFAULT_ENCODING,FP,configuration,679,"reader = new InputStreamReader(in);
","public void load(InputStream in, String encoding) throws ConfigurationException {
Reader reader = null;
if (encoding != null) {
try {
reader = new InputStreamReader(in, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (reader == null) {
reader = new InputStreamReader(in);
}
load(reader);
}","public void load(InputStream in, String encoding) throws ConfigurationException {
Reader readerVar1 = readerLiteral2;
if (encoding != null) {
try {
readerVar1 = new InputStreamReader(in, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (readerVar1 == null) {
readerVar1 = new InputStreamReader(in);
}
load(readerVar1);
}"
3470,I18N,DM_DEFAULT_ENCODING,FP,configuration,681,"PrintStream stream = new PrintStream(os);
","private ConfigurationNode constructCombinedNode() {
if (getNumberOfConfigurations() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return new ViewNode();
} else {
Iterator<ConfigData> it = configurations.iterator();
ConfigurationNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = getNodeCombiner().combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}","private ConfigurationNode constructCombinedNode() {
if (getNumberOfConfigurations() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return new ViewNode();
} else {
Iterator<ConfigData> iterator<configdata>Var1 = iterator<configdata>Literal2;
ConfigurationNode configurationnodeVar3 = configurationnodeLiteral4;
while (iterator<configdata>Var1.hasNext()) {
configurationnodeVar3 = getNodeCombiner().combine(configurationnodeVar3, iterator<configdata>Var1.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream bytearrayoutputstreamVar5 = bytearrayoutputstreamLiteral6;
PrintStream printstreamVar7 = printstreamLiteral8;
TreeUtils.printTree(printstreamVar7, configurationnodeVar3);
getLogger().debug(bytearrayoutputstreamVar5.toString());
}
return configurationnodeVar3;
}
}"
3475,I18N,DM_CONVERT_CASE,FP,configuration,686,"if (filename != null && filename.toLowerCase().trim().endsWith("".xml""))
","@Override
protected FileConfiguration createConfiguration(Attributes attributes) throws Exception {
String filename = attributes.getValue(ATTR_FILENAME);
if (filename != null && filename.toLowerCase().trim().endsWith("".xml"")) {
return new XMLPropertyListConfiguration();
} else {
return new PropertyListConfiguration();
}
}","@Override
protected FileConfiguration createConfiguration(Attributes attributes) throws Exception {
String stringVar1 = stringLiteral2;
if (stringVar1 != null && stringVar1.toLowerCase().trim().endsWith("".xml"")) {
return new XMLPropertyListConfiguration();
} else {
return new PropertyListConfiguration();
}
}"
3487,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,configuration,698,"ConfigurationDeclaration decl = (ConfigurationDeclaration) data;
","public Object createBean(Class<?> beanClass, BeanDeclaration data, Object param) throws Exception {
ConfigurationDeclaration decl = (ConfigurationDeclaration) data;
String tagName = decl.getNode().getName();
ConfigurationProvider provider = decl.getConfigurationBuilder().providerForTag(tagName);
if (provider == null) {
throw new ConfigurationRuntimeException(""No ConfigurationProvider registered for tag "" + tagName);
}
try {
AbstractConfiguration config = provider.getConfiguration(decl);
installInterpolator(decl, config);
return config;
} catch (Exception ex) {
if (!decl.isOptional()) {
throw ex;
} else {
if (logger.isDebugEnabled()) {
logger.debug(""Load failed for optional configuration "" + tagName + "": "" + ex.getMessage());
}
decl.getConfigurationBuilder().fireError(EVENT_ERR_LOAD_OPTIONAL, decl.getConfiguration().getString(ATTR_NAME), null, ex);
if (decl.isForceCreate()) {
try {
return provider.getEmptyConfiguration(decl);
} catch (Exception ex2) {
logger.warn(""Could not create instance of optional configuration "" + tagName, ex2);
}
}
return null;
}
}
}","public Object createBean(Class<?> beanClass, BeanDeclaration data, Object param) throws Exception {
ConfigurationDeclaration configurationdeclarationVar1 = configurationdeclarationLiteral2;
String stringVar3 = stringLiteral4;
ConfigurationProvider configurationproviderVar5 = configurationproviderLiteral6;
if (configurationproviderVar5 == null) {
throw new ConfigurationRuntimeException(""No ConfigurationProvider registered for tag "" + stringVar3);
}
try {
AbstractConfiguration abstractconfigurationVar7 = abstractconfigurationLiteral8;
installInterpolator(configurationdeclarationVar1, abstractconfigurationVar7);
return abstractconfigurationVar7;
} catch (Exception ex) {
if (!configurationdeclarationVar1.isOptional()) {
throw ex;
} else {
if (logger.isDebugEnabled()) {
logger.debug(""Load failed for optional configuration "" + stringVar3 + "": "" + ex.getMessage());
}
configurationdeclarationVar1.getConfigurationBuilder().fireError(EVENT_ERR_LOAD_OPTIONAL, configurationdeclarationVar1.getConfiguration().getString(ATTR_NAME), null, ex);
if (configurationdeclarationVar1.isForceCreate()) {
try {
return configurationproviderVar5.getEmptyConfiguration(configurationdeclarationVar1);
} catch (Exception ex2) {
logger.warn(""Could not create instance of optional configuration "" + stringVar3, ex2);
}
}
return null;
}
}
}"
3521,PERFORMANCE,DM_NUMBER_CTOR,FP,configuration,732,"return new Long(n.longValue());
","public static Long toLong(Object value) throws ConversionException {
Number n = toNumber(value, Long.class);
if (n instanceof Long) {
return (Long) n;
} else {
return new Long(n.longValue());
}
}","public static Long toLong(Object value) throws ConversionException {
Number numberVar1 = numberLiteral2;
if (numberVar1 instanceof Long) {
return (Long) numberVar1;
} else {
return new Long(numberVar1.longValue());
}
}"
3542,I18N,DM_DEFAULT_ENCODING,FP,configuration,753,"addValue(Base64.decodeBase64(value.getBytes()));
","public void addDataValue(String value) {
addValue(Base64.decodeBase64(value.getBytes()));
}","public void addDataValue(String value) {
addValue(Base64.decodeBase64(value.getBytes()));
}"
3546,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,configuration,757,"fs = ((CatalogManager) catalogManager).getFileSystem();
","@Override
public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
String base = ((CatalogManager) catalogManager).getBaseDir();
@SuppressWarnings(""unchecked"")
Vector<String> catalogs = catalogManager.getCatalogFiles();
if (catalogs != null) {
for (int count = 0; count < catalogs.size(); count++) {
String fileName = catalogs.elementAt(count);
URL url = null;
InputStream is = null;
try {
url = ConfigurationUtils.locate(fs, base, fileName);
if (url != null) {
is = fs.getInputStream(url);
}
} catch (ConfigurationException ce) {
String name = (url == null) ? fileName : url.toString();
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + name + "". "" + ce.getMessage());
}
if (is != null) {
String mimeType = fileNameMap.getContentTypeFor(fileName);
try {
if (mimeType != null) {
parseCatalog(mimeType, is);
continue;
}
} catch (Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + fileName + "". "" + ex.getMessage());
} finally {
is.close();
}
}
parseCatalog(base, fileName);
}
}
}","@Override
public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
String stringVar1 = stringLiteral2;
@SuppressWarnings(""unchecked"")
Vector<String> vector<string>Var3 = vector<string>Literal4;
if (vector<string>Var3 != null) {
for (int intVar16 = intLiteral17; intVar5 < intLiteral1; intVar5++) {
String stringVar7 = stringLiteral8;
URL urlVar9 = urlLiteral10;
InputStream inputstreamVar11 = urlLiteral10;
try {
urlVar9 = ConfigurationUtils.locate(fs, stringVar1, stringVar7);
if (urlVar9 != null) {
inputstreamVar11 = fs.getInputStream(urlVar9);
}
} catch (ConfigurationException ce) {
String stringVar12 = stringLiteral13;
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + stringVar12 + "". "" + ce.getMessage());
}
if (inputstreamVar11 != null) {
String stringVar14 = stringLiteral15;
try {
if (stringVar14 != null) {
parseCatalog(stringVar14, inputstreamVar11);
continue;
}
} catch (Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + stringVar7 + "". "" + ex.getMessage());
} finally {
inputstreamVar11.close();
}
}
parseCatalog(stringVar1, stringVar7);
}
}
}"
3705,Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,configuration,916,private AutoSaveListener autoSaveListener;,private AutoSaveListener autoSaveListener;,private AutoSaveListener autosavelistenerVar1;
3714,PERFORMANCE,UPM_UNCALLED_PRIVATE_METHOD,FP,configuration,925,"return sourceURL != null ? sourceURL.toExternalForm() : StringUtils.EMPTY;
","private String sourceURLAsString() {
return sourceURL != null ? sourceURL.toExternalForm() : StringUtils.EMPTY;
}","private String sourceURLAsString() {
return sourceURL != null ? sourceURL.toExternalForm() : StringUtils.EMPTY;
}"
3717,PERFORMANCE,URF_UNREAD_FIELD,FP,configuration,928,private final String protocol;,private final String protocol;,private final String stringVar1;
3718,I18N,DM_CONVERT_CASE,FP,configuration,929,"final String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
","private void setProperty(final FileSystemConfigBuilder builder, final FileSystemOptions options, final String key, final Object value) {
final String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
final Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
final Method method = builder.getClass().getMethod(methodName, paramTypes);
final Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (final Exception ex) {
log.warn(""Cannot access property '"" + key + ""'! Ignoring."", ex);
}
}","private void setProperty(final FileSystemConfigBuilder builder, final FileSystemOptions options, final String key, final Object value) {
final String stringVar1 = stringLiteral2;
final Class<?>[] class<?>ArrayVar3 = class<?>ArrayLiteral4;
class<?>ArrayVar3[0] = FileSystemOptions.class;
class<?>ArrayVar3[1] = value.getClass();
try {
final Method methodVar5 = methodLiteral6;
final Object[] objectArrayVar7 = objectArrayLiteral8;
objectArrayVar7[0] = options;
objectArrayVar7[1] = value;
methodVar5.invoke(builder, objectArrayVar7);
} catch (final Exception ex) {
log.warn(""Cannot access property '"" + key + ""'! Ignoring."", ex);
}
}"
3719,DODGY_CODE,REC_CATCH_EXCEPTION,FP,configuration,930,"} catch (final Exception e) {
","@Override
public void read(final Reader in) throws ConfigurationException {
final EntityResolver resolver = (publicId, systemId) -> new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
final XMLPropertyListHandler handler = new XMLPropertyListHandler();
try {
final SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
final SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
getNodeModel().mergeRoot(handler.getResultBuilder().createNode(), null, null, null, this);
} catch (final Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}","@Override
public void read(final Reader in) throws ConfigurationException {
final EntityResolver entityresolverVar1 = entityresolverLiteral2;
final XMLPropertyListHandler xmlpropertylisthandlerVar3 = xmlpropertylisthandlerLiteral4;
try {
final SAXParserFactory saxparserfactoryVar5 = saxparserfactoryLiteral6;
saxparserfactoryVar5.setValidating(true);
final SAXParser saxparserVar7 = saxparserLiteral8;
saxparserVar7.getXMLReader().setEntityResolver(entityresolverVar1);
saxparserVar7.getXMLReader().setContentHandler(xmlpropertylisthandlerVar3);
saxparserVar7.getXMLReader().parse(new InputSource(in));
getNodeModel().mergeRoot(xmlpropertylisthandlerVar3.getResultBuilder().createNode(), null, null, null, this);
} catch (final Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}"
3834,PERFORMANCE,DM_FP_NUMBER_CTOR,FP,configuration,1045,"return getDouble(key, new Double(defaultValue)).doubleValue();
","public double getDouble(String key, double defaultValue) {
return getDouble(key, new Double(defaultValue)).doubleValue();
}","public double getDouble(String key, double defaultValue) {
return getDouble(key, new Double(defaultValue)).doubleValue();
}"
3860,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,configuration,1071,"ConfigurationDeclaration decl = (ConfigurationDeclaration) data;
","public Object createBean(Class<?> beanClass, BeanDeclaration data, Object param) throws Exception {
ConfigurationDeclaration decl = (ConfigurationDeclaration) data;
String tagName = decl.getNode().getName();
ConfigurationProvider provider = decl.getConfigurationBuilder().providerForTag(tagName);
if (provider == null) {
throw new ConfigurationRuntimeException(""No ConfigurationProvider registered for tag "" + tagName);
}
try {
return provider.getConfiguration(decl);
} catch (Exception ex) {
if (!decl.isOptional()) {
throw ex;
} else {
if (logger.isDebugEnabled()) {
logger.debug(""Load failed for optional configuration "" + tagName + "": "" + ex.getMessage());
}
decl.getConfigurationBuilder().fireError(EVENT_ERR_LOAD_OPTIONAL, decl.getConfiguration().getString(ATTR_NAME), null, ex);
if (decl.isForceCreate()) {
try {
return provider.getEmptyConfiguration(decl);
} catch (Exception ex2) {
;
}
}
return null;
}
}
}","public Object createBean(Class<?> beanClass, BeanDeclaration data, Object param) throws Exception {
ConfigurationDeclaration configurationdeclarationVar1 = configurationdeclarationLiteral2;
String stringVar3 = stringLiteral4;
ConfigurationProvider configurationproviderVar5 = configurationproviderLiteral6;
if (configurationproviderVar5 == null) {
throw new ConfigurationRuntimeException(""No ConfigurationProvider registered for tag "" + stringVar3);
}
try {
return configurationproviderVar5.getConfiguration(configurationdeclarationVar1);
} catch (Exception ex) {
if (!configurationdeclarationVar1.isOptional()) {
throw ex;
} else {
if (logger.isDebugEnabled()) {
logger.debug(""Load failed for optional configuration "" + stringVar3 + "": "" + ex.getMessage());
}
configurationdeclarationVar1.getConfigurationBuilder().fireError(EVENT_ERR_LOAD_OPTIONAL, configurationdeclarationVar1.getConfiguration().getString(ATTR_NAME), null, ex);
if (configurationdeclarationVar1.isForceCreate()) {
try {
return configurationproviderVar5.getEmptyConfiguration(configurationdeclarationVar1);
} catch (Exception ex2) {
;
}
}
return null;
}
}
}"
3877,CORRECTNESS,UR_UNINIT_READ_CALLED_FROM_SUPER_CONSTRUCTOR,FP,configuration,1088,"if (init)
","@Override
public void setRootNode(ConfigurationNode rootNode) {
if (init) {
this.getConfiguration().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}","@Override
public void setRootNode(ConfigurationNode rootNode) {
if (init) {
this.getConfiguration().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}"
3880,DODGY_CODE,RI_REDUNDANT_INTERFACES,FP,configuration,1091,"private static ThreadLocal<Boolean> recursive = new ThreadLocal<Boolean>()
{
@Override
protected synchronized Boolean initialValue()
{
return Boolean.FALSE;
}
};
private final ConcurrentMap<String, XMLConfiguration> configurationsMap =
new ConcurrentHashMap<String, XMLConfiguration>();
private String pattern;
private boolean init;
private boolean ignoreException = true;
private boolean schemaValidation;
private boolean validating;
private boolean attributeSplittingDisabled;
private String loggerName = MultiFileHierarchicalConfiguration.class.getName();
private ReloadingStrategy fileStrategy;
private EntityResolver entityResolver;
private StrSubstitutor localSubst = new StrSubstitutor(new ConfigurationInterpolator());
public MultiFileHierarchicalConfiguration()
{
super();
this.init = true;
setLogger(LogFactory.getLog(loggerName));
}
public MultiFileHierarchicalConfiguration(String pathPattern)
{
super();
this.pattern = pathPattern;
this.init = true;
setLogger(LogFactory.getLog(loggerName));
}
public void setLoggerName(String name)
{
this.loggerName = name;
}
public void setFilePattern(String pathPattern)
{
this.pattern = pathPattern;
}
public boolean isSchemaValidation()
{
return schemaValidation;
}
public void setSchemaValidation(boolean schemaValidation)
{
this.schemaValidation = schemaValidation;
}
public boolean isValidating()
{
return validating;
}
public void setValidating(boolean validating)
{
this.validating = validating;
}
public boolean isAttributeSplittingDisabled()
{
return attributeSplittingDisabled;
}
public void setAttributeSplittingDisabled(boolean attributeSplittingDisabled)
{
this.attributeSplittingDisabled = attributeSplittingDisabled;
}
@Override
public ReloadingStrategy getReloadingStrategy()
{
return fileStrategy;
}
@Override
public void setReloadingStrategy(ReloadingStrategy strategy)
{
this.fileStrategy = strategy;
}
public void setEntityResolver(EntityResolver entityResolver)
{
this.entityResolver = entityResolver;
}
public EntityResolver getEntityResolver()
{
return this.entityResolver;
}
public void setIgnoreException(boolean ignoreException)
{
this.ignoreException = ignoreException;
}
@Override
public void addProperty(String key, Object value)
{
this.getConfiguration().addProperty(key, value);
}
@Override
public void clear()
{
this.getConfiguration().clear();
}
@Override
public void clearProperty(String key)
{
this.getConfiguration().clearProperty(key);
}
@Override
public boolean containsKey(String key)
{
return this.getConfiguration().containsKey(key);
}
@Override
public BigDecimal getBigDecimal(String key, BigDecimal defaultValue)
{
return this.getConfiguration().getBigDecimal(key, defaultValue);
}
@Override
public BigDecimal getBigDecimal(String key)
{
return this.getConfiguration().getBigDecimal(key);
}
@Override
public BigInteger getBigInteger(String key, BigInteger defaultValue)
{
return this.getConfiguration().getBigInteger(key, defaultValue);
}
@Override
public BigInteger getBigInteger(String key)
{
return this.getConfiguration().getBigInteger(key);
}
@Override
public boolean getBoolean(String key, boolean defaultValue)
{
return this.getConfiguration().getBoolean(key, defaultValue);
}
@Override
public Boolean getBoolean(String key, Boolean defaultValue)
{
return this.getConfiguration().getBoolean(key, defaultValue);
}
@Override
public boolean getBoolean(String key)
{
return this.getConfiguration().getBoolean(key);
}
@Override
public byte getByte(String key, byte defaultValue)
{
return this.getConfiguration().getByte(key, defaultValue);
}
@Override
public Byte getByte(String key, Byte defaultValue)
{
return this.getConfiguration().getByte(key, defaultValue);
}
@Override
public byte getByte(String key)
{
return this.getConfiguration().getByte(key);
}
@Override
public double getDouble(String key, double defaultValue)
{
return this.getConfiguration().getDouble(key, defaultValue);
}
@Override
public Double getDouble(String key, Double defaultValue)
{
return this.getConfiguration().getDouble(key, defaultValue);
}
@Override
public double getDouble(String key)
{
return this.getConfiguration().getDouble(key);
}
@Override
public float getFloat(String key, float defaultValue)
{
return this.getConfiguration().getFloat(key, defaultValue);
}
@Override
public Float getFloat(String key, Float defaultValue)
{
return this.getConfiguration().getFloat(key, defaultValue);
}
@Override
public float getFloat(String key)
{
return this.getConfiguration().getFloat(key);
}
@Override
public int getInt(String key, int defaultValue)
{
return this.getConfiguration().getInt(key, defaultValue);
}
@Override
public int getInt(String key)
{
return this.getConfiguration().getInt(key);
}
@Override
public Integer getInteger(String key, Integer defaultValue)
{
return this.getConfiguration().getInteger(key, defaultValue);
}
@Override
public Iterator<String> getKeys()
{
return this.getConfiguration().getKeys();
}
@Override
public Iterator<String> getKeys(String prefix)
{
return this.getConfiguration().getKeys(prefix);
}
@Override
public List<Object> getList(String key, List<Object> defaultValue)
{
return this.getConfiguration().getList(key, defaultValue);
}
@Override
public List<Object> getList(String key)
{
return this.getConfiguration().getList(key);
}
@Override
public long getLong(String key, long defaultValue)
{
return this.getConfiguration().getLong(key, defaultValue);
}
@Override
public Long getLong(String key, Long defaultValue)
{
return this.getConfiguration().getLong(key, defaultValue);
}
@Override
public long getLong(String key)
{
return this.getConfiguration().getLong(key);
}
@Override
public Properties getProperties(String key)
{
return this.getConfiguration().getProperties(key);
}
@Override
public Object getProperty(String key)
{
return this.getConfiguration().getProperty(key);
}
@Override
public short getShort(String key, short defaultValue)
{
return this.getConfiguration().getShort(key, defaultValue);
}
@Override
public Short getShort(String key, Short defaultValue)
{
return this.getConfiguration().getShort(key, defaultValue);
}
@Override
public short getShort(String key)
{
return this.getConfiguration().getShort(key);
}
@Override
public String getString(String key, String defaultValue)
{
return this.getConfiguration().getString(key, defaultValue);
}
@Override
public String getString(String key)
{
return this.getConfiguration().getString(key);
}
@Override
public String[] getStringArray(String key)
{
return this.getConfiguration().getStringArray(key);
}
@Override
public boolean isEmpty()
{
return this.getConfiguration().isEmpty();
}
@Override
public void setProperty(String key, Object value)
{
if (init)
{
this.getConfiguration().setProperty(key, value);
}
}
@Override
public Configuration subset(String prefix)
{
return this.getConfiguration().subset(prefix);
}
@Override
public Object getReloadLock()
{
return this.getConfiguration().getReloadLock();
}
@Override
public Node getRoot()
{
return this.getConfiguration().getRoot();
}
@Override
public void setRoot(Node node)
{
if (init)
{
this.getConfiguration().setRoot(node);
}
else
{
super.setRoot(node);
}
}
@Override
public ConfigurationNode getRootNode()
{
return this.getConfiguration().getRootNode();
}
@Override
public void setRootNode(ConfigurationNode rootNode)
{
if (init)
{
this.getConfiguration().setRootNode(rootNode);
}
else
{
super.setRootNode(rootNode);
}
}
@Override
public ExpressionEngine getExpressionEngine()
{
return super.getExpressionEngine();
}
@Override
public void setExpressionEngine(ExpressionEngine expressionEngine)
{
super.setExpressionEngine(expressionEngine);
}
@Override
public void addNodes(String key, Collection<? extends ConfigurationNode> nodes)
{
this.getConfiguration().addNodes(key, nodes);
}
@Override
public SubnodeConfiguration configurationAt(String key, boolean supportUpdates)
{
return this.getConfiguration().configurationAt(key, supportUpdates);
}
@Override
public SubnodeConfiguration configurationAt(String key)
{
return this.getConfiguration().configurationAt(key);
}
@Override
public List<HierarchicalConfiguration> configurationsAt(String key)
{
return this.getConfiguration().configurationsAt(key);
}
@Override
public void clearTree(String key)
{
this.getConfiguration().clearTree(key);
}
@Override
public int getMaxIndex(String key)
{
return this.getConfiguration().getMaxIndex(key);
}
@Override
public Configuration interpolatedConfiguration()
{
return this.getConfiguration().interpolatedConfiguration();
}
@Override
public void addConfigurationListener(ConfigurationListener l)
{
super.addConfigurationListener(l);
}
@Override
public boolean removeConfigurationListener(ConfigurationListener l)
{
return super.removeConfigurationListener(l);
}
@Override
public Collection<ConfigurationListener> getConfigurationListeners()
{
return super.getConfigurationListeners();
}
@Override
public void clearConfigurationListeners()
{
super.clearConfigurationListeners();
}
@Override
public void addErrorListener(ConfigurationErrorListener l)
{
super.addErrorListener(l);
}
@Override
public boolean removeErrorListener(ConfigurationErrorListener l)
{
return super.removeErrorListener(l);
}
@Override
public void clearErrorListeners()
{
super.clearErrorListeners();
}
@Override
public Collection<ConfigurationErrorListener> getErrorListeners()
{
return super.getErrorListeners();
}
public void save(Writer writer) throws ConfigurationException
{
if (init)
{
this.getConfiguration().save(writer);
}
}
public void load(Reader reader) throws ConfigurationException
{
if (init)
{
this.getConfiguration().load(reader);
}
}
@Override
public void load() throws ConfigurationException
{
this.getConfiguration();
}
@Override
public void load(String fileName) throws ConfigurationException
{
this.getConfiguration().load(fileName);
}
@Override
public void load(File file) throws ConfigurationException
{
this.getConfiguration().load(file);
}
@Override
public void load(URL url) throws ConfigurationException
{
this.getConfiguration().load(url);
}
@Override
public void load(InputStream in) throws ConfigurationException
{
this.getConfiguration().load(in);
}
@Override
public void load(InputStream in, String encoding) throws ConfigurationException
{
this.getConfiguration().load(in, encoding);
}
@Override
public void save() throws ConfigurationException
{
this.getConfiguration().save();
}
@Override
public void save(String fileName) throws ConfigurationException
{
this.getConfiguration().save(fileName);
}
@Override
public void save(File file) throws ConfigurationException
{
this.getConfiguration().save(file);
}
@Override
public void save(URL url) throws ConfigurationException
{
this.getConfiguration().save(url);
}
@Override
public void save(OutputStream out) throws ConfigurationException
{
this.getConfiguration().save(out);
}
@Override
public void save(OutputStream out, String encoding) throws ConfigurationException
{
this.getConfiguration().save(out, encoding);
}
@Override
public void configurationChanged(ConfigurationEvent event)
{
if (event.getSource() instanceof XMLConfiguration)
{
for (ConfigurationListener listener : getConfigurationListeners())
{
listener.configurationChanged(event);
}
}
}
@Override
public void configurationError(ConfigurationErrorEvent event)
{
if (event.getSource() instanceof XMLConfiguration)
{
for (ConfigurationErrorListener listener : getErrorListeners())
{
listener.configurationError(event);
}
}
if (event.getType() == AbstractFileConfiguration.EVENT_RELOAD)
{
if (isThrowable(event.getCause()))
{
throw new ConfigurationRuntimeException(event.getCause());
}
}
}
@Override
protected Object resolveContainerStore(String key)
{
if (recursive.get().booleanValue())
{
return null;
}
recursive.set(Boolean.TRUE);
try
{
return super.resolveContainerStore(key);
}
finally
{
recursive.set(Boolean.FALSE);
}
}
public void removeConfiguration()
{
String path = getSubstitutor().replace(pattern);
configurationsMap.remove(path);
}
private AbstractHierarchicalFileConfiguration getConfiguration()
{
if (pattern == null)
{
throw new ConfigurationRuntimeException(""File pattern must be defined"");
}
String path = localSubst.replace(pattern);
if (configurationsMap.containsKey(path))
{
return configurationsMap.get(path);
}
if (path.equals(pattern))
{
XMLConfiguration configuration = new XMLConfiguration()
{
@Override
public void load() throws ConfigurationException
{
}
@Override
public void save() throws ConfigurationException
{
}
};
configurationsMap.putIfAbsent(pattern, configuration);
return configuration;
}
XMLConfiguration configuration = new XMLConfiguration();
if (loggerName != null)
{
Log log = LogFactory.getLog(loggerName);
if (log != null)
{
configuration.setLogger(log);
}
}
configuration.setBasePath(getBasePath());
configuration.setFileName(path);
configuration.setFileSystem(getFileSystem());
configuration.setExpressionEngine(getExpressionEngine());
ReloadingStrategy strategy = createReloadingStrategy();
if (strategy != null)
{
configuration.setReloadingStrategy(strategy);
}
configuration.setDelimiterParsingDisabled(isDelimiterParsingDisabled());
configuration.setAttributeSplittingDisabled(isAttributeSplittingDisabled());
configuration.setValidating(validating);
configuration.setSchemaValidation(schemaValidation);
configuration.setEntityResolver(entityResolver);
configuration.setListDelimiter(getListDelimiter());
configuration.addConfigurationListener(this);
configuration.addErrorListener(this);
try
{
configuration.load();
}
catch (ConfigurationException ce)
{
if (isThrowable(ce))
{
throw new ConfigurationRuntimeException(ce);
}
}
configurationsMap.putIfAbsent(path, configuration);
return configurationsMap.get(path);
}
private boolean isThrowable(Throwable throwable)
{
if (!ignoreException)
{
return true;
}
Throwable cause = throwable.getCause();
while (cause != null && !(cause instanceof SAXParseException))
{
cause = cause.getCause();
}
return cause != null;
}
private ReloadingStrategy createReloadingStrategy()
{
if (fileStrategy == null)
{
return null;
}
try
{
ReloadingStrategy strategy = (ReloadingStrategy) BeanUtils.cloneBean(fileStrategy);
strategy.setConfiguration(null);
return strategy;
}
catch (Exception ex)
{
return null;
","private AbstractHierarchicalFileConfiguration getConfiguration() {
if (pattern == null) {
throw new ConfigurationRuntimeException(""File pattern must be defined"");
}
String path = localSubst.replace(pattern);
if (configurationsMap.containsKey(path)) {
return configurationsMap.get(path);
}
if (path.equals(pattern)) {
XMLConfiguration configuration = new XMLConfiguration() {
@Override
public void load() throws ConfigurationException {
}
@Override
public void save() throws ConfigurationException {
}
};
configurationsMap.putIfAbsent(pattern, configuration);
return configuration;
}
XMLConfiguration configuration = new XMLConfiguration();
if (loggerName != null) {
Log log = LogFactory.getLog(loggerName);
if (log != null) {
configuration.setLogger(log);
}
}
configuration.setBasePath(getBasePath());
configuration.setFileName(path);
configuration.setFileSystem(getFileSystem());
configuration.setExpressionEngine(getExpressionEngine());
ReloadingStrategy strategy = createReloadingStrategy();
if (strategy != null) {
configuration.setReloadingStrategy(strategy);
}
configuration.setDelimiterParsingDisabled(isDelimiterParsingDisabled());
configuration.setAttributeSplittingDisabled(isAttributeSplittingDisabled());
configuration.setValidating(validating);
configuration.setSchemaValidation(schemaValidation);
configuration.setEntityResolver(entityResolver);
configuration.setListDelimiter(getListDelimiter());
configuration.addConfigurationListener(this);
configuration.addErrorListener(this);
try {
configuration.load();
} catch (ConfigurationException ce) {
if (isThrowable(ce)) {
throw new ConfigurationRuntimeException(ce);
}
}
configurationsMap.putIfAbsent(path, configuration);
return configurationsMap.get(path);
}","private AbstractHierarchicalFileConfiguration getConfiguration() {
if (pattern == null) {
throw new ConfigurationRuntimeException(""File pattern must be defined"");
}
String stringVar1 = stringLiteral2;
if (configurationsMap.containsKey(stringVar1)) {
return configurationsMap.get(stringVar1);
}
if (stringVar1.equals(pattern)) {
XMLConfiguration xmlconfigurationVar3 = xmlconfigurationLiteral4;
configurationsMap.putIfAbsent(pattern, xmlconfigurationVar3);
return xmlconfigurationVar3;
}
XMLConfiguration xmlconfigurationVar3 = xmlconfigurationLiteral5;
if (loggerName != null) {
Log logVar6 = logLiteral7;
if (logVar6 != null) {
xmlconfigurationVar3.setLogger(logVar6);
}
}
xmlconfigurationVar3.setBasePath(getBasePath());
xmlconfigurationVar3.setFileName(stringVar1);
xmlconfigurationVar3.setFileSystem(getFileSystem());
xmlconfigurationVar3.setExpressionEngine(getExpressionEngine());
ReloadingStrategy reloadingstrategyVar8 = reloadingstrategyLiteral9;
if (reloadingstrategyVar8 != null) {
xmlconfigurationVar3.setReloadingStrategy(reloadingstrategyVar8);
}
xmlconfigurationVar3.setDelimiterParsingDisabled(isDelimiterParsingDisabled());
xmlconfigurationVar3.setAttributeSplittingDisabled(isAttributeSplittingDisabled());
xmlconfigurationVar3.setValidating(validating);
xmlconfigurationVar3.setSchemaValidation(schemaValidation);
xmlconfigurationVar3.setEntityResolver(entityResolver);
xmlconfigurationVar3.setListDelimiter(getListDelimiter());
xmlconfigurationVar3.addConfigurationListener(this);
xmlconfigurationVar3.addErrorListener(this);
try {
xmlconfigurationVar3.load();
} catch (ConfigurationException ce) {
if (isThrowable(ce)) {
throw new ConfigurationRuntimeException(ce);
}
}
configurationsMap.putIfAbsent(stringVar1, xmlconfigurationVar3);
return configurationsMap.get(stringVar1);
}"
3913,I18N,DM_DEFAULT_ENCODING,FP,configuration,1124,"addValue(Base64.decodeBase64(value.getBytes()));
","public void addDataValue(String value) {
addValue(Base64.decodeBase64(value.getBytes()));
}","public void addDataValue(String value) {
addValue(Base64.decodeBase64(value.getBytes()));
}"
3915,CORRECTNESS,RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE,FP,configuration,1126,"if (configuration.getURL() == null && configuration.getFileName() == null)
","public void init() {
if (configuration.getURL() == null && configuration.getFileName() == null) {
return;
}
if (this.configuration == null) {
throw new IllegalStateException(""No configuration has been set for this strategy"");
}
updateLastModified();
}","public void init() {
if (configuration.getURL() == null && configuration.getFileName() == null) {
return;
}
if (this.configuration == null) {
throw new IllegalStateException(""No configuration has been set for this strategy"");
}
updateLastModified();
}"
3919,DODGY_CODE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,FP,configuration,1130,"staticCatalog = catalog;
","@Override
public org.apache.xml.resolver.Catalog getPrivateCatalog() {
org.apache.xml.resolver.Catalog catalog = staticCatalog;
if (catalog == null || !getUseStaticCatalog()) {
try {
catalog = new Catalog();
catalog.setCatalogManager(this);
catalog.setupReaders();
catalog.loadSystemCatalogs();
} catch (Exception ex) {
ex.printStackTrace();
}
if (getUseStaticCatalog()) {
staticCatalog = catalog;
}
}
return catalog;
}","@Override
public org.apache.xml.resolver.Catalog getPrivateCatalog() {
org.apache.xml.resolver.Catalog org.apache.xml.resolver.catalogVar1 = org.apache.xml.resolver.catalogLiteral2;
if (org.apache.xml.resolver.catalogVar1 == null || !getUseStaticCatalog()) {
try {
org.apache.xml.resolver.catalogVar1 = new Catalog();
org.apache.xml.resolver.catalogVar1.setCatalogManager(this);
org.apache.xml.resolver.catalogVar1.setupReaders();
org.apache.xml.resolver.catalogVar1.loadSystemCatalogs();
} catch (Exception ex) {
ex.printStackTrace();
}
if (getUseStaticCatalog()) {
staticCatalog = org.apache.xml.resolver.catalogVar1;
}
}
return org.apache.xml.resolver.catalogVar1;
}"
4016,I18N,DM_DEFAULT_ENCODING,FP,configuration,1227,"getLogger().debug(os.toString());
","private ConfigurationNode constructCombinedNode() {
if (getNumberOfConfigurations() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return new ViewNode();
} else {
Iterator<ConfigData> it = configurations.iterator();
ConfigurationNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = getNodeCombiner().combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}","private ConfigurationNode constructCombinedNode() {
if (getNumberOfConfigurations() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return new ViewNode();
} else {
Iterator<ConfigData> iterator<configdata>Var1 = iterator<configdata>Literal2;
ConfigurationNode configurationnodeVar3 = configurationnodeLiteral4;
while (iterator<configdata>Var1.hasNext()) {
configurationnodeVar3 = getNodeCombiner().combine(configurationnodeVar3, iterator<configdata>Var1.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream bytearrayoutputstreamVar5 = bytearrayoutputstreamLiteral6;
PrintStream printstreamVar7 = printstreamLiteral8;
TreeUtils.printTree(printstreamVar7, configurationnodeVar3);
getLogger().debug(bytearrayoutputstreamVar5.toString());
}
return configurationnodeVar3;
}
}"
4020,I18N,DM_DEFAULT_ENCODING,FP,configuration,1231,"dump(configuration, new PrintWriter(out));
","public static void dump(Configuration configuration, PrintStream out) {
dump(configuration, new PrintWriter(out));
}","public static void dump(Configuration configuration, PrintStream out) {
dump(configuration, new PrintWriter(out));
}"
4023,BAD_PRACTICE,SE_BAD_FIELD,FP,configuration,1234,protected Configuration configuration;,protected Configuration configuration;,protected Configuration configurationVar1;
4037,CORRECTNESS,UR_UNINIT_READ_CALLED_FROM_SUPER_CONSTRUCTOR,FP,configuration,1248,"if (configs != null)
","@Override
public void setRootNode(ConfigurationNode rootNode) {
if (configs != null) {
this.getCurrentConfig().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}","@Override
public void setRootNode(ConfigurationNode rootNode) {
if (configs != null) {
this.getCurrentConfig().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}"
4083,PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,configuration,1294,"{
public InputSource resolveEntity(String publicId, String systemId)
{
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
","private void printValue(PrintWriter out, int indentLevel, Object value) {
String padding = StringUtils.repeat("" "", indentLevel * INDENT_SIZE);
if (value instanceof Date) {
synchronized (PListNode.FORMAT) {
out.println(padding + ""<date>"" + PListNode.FORMAT.format((Date) value) + ""</date>"");
}
} else if (value instanceof Calendar) {
printValue(out, indentLevel, ((Calendar) value).getTime());
} else if (value instanceof Number) {
if (value instanceof Double || value instanceof Float || value instanceof BigDecimal) {
out.println(padding + ""<real>"" + value.toString() + ""</real>"");
} else {
out.println(padding + ""<integer>"" + value.toString() + ""</integer>"");
}
} else if (value instanceof Boolean) {
if (((Boolean) value).booleanValue()) {
out.println(padding + ""<true/>"");
} else {
out.println(padding + ""<false/>"");
}
} else if (value instanceof List) {
out.println(padding + ""<array>"");
Iterator<?> it = ((List<?>) value).iterator();
while (it.hasNext()) {
printValue(out, indentLevel + 1, it.next());
}
out.println(padding + ""</array>"");
} else if (value instanceof HierarchicalConfiguration) {
printNode(out, indentLevel, ((HierarchicalConfiguration) value).getRoot());
} else if (value instanceof Configuration) {
out.println(padding + ""<dict>"");
Configuration config = (Configuration) value;
Iterator<String> it = config.getKeys();
while (it.hasNext()) {
String key = it.next();
Node node = new Node(key);
node.setValue(config.getProperty(key));
printNode(out, indentLevel + 1, node);
if (it.hasNext()) {
out.println();
}
}
out.println(padding + ""</dict>"");
} else if (value instanceof Map) {
Map<String, Object> map = transformMap((Map<?, ?>) value);
printValue(out, indentLevel, new MapConfiguration(map));
} else if (value instanceof byte[]) {
String base64 = new String(Base64.encodeBase64((byte[]) value));
out.println(padding + ""<data>"" + StringEscapeUtils.escapeXml(base64) + ""</data>"");
} else if (value != null) {
out.println(padding + ""<string>"" + StringEscapeUtils.escapeXml(String.valueOf(value)) + ""</string>"");
} else {
out.println(padding + ""<string/>"");
}
}","private void printValue(PrintWriter out, int indentLevel, Object value) {
String stringVar1 = stringLiteral2;
if (value instanceof Date) {
synchronized (PListNode.FORMAT) {
out.println(stringVar1 + ""<date>"" + PListNode.FORMAT.format((Date) value) + ""</date>"");
}
} else if (value instanceof Calendar) {
printValue(out, indentLevel, ((Calendar) value).getTime());
} else if (value instanceof Number) {
if (value instanceof Double || value instanceof Float || value instanceof BigDecimal) {
out.println(stringVar1 + ""<real>"" + value.toString() + ""</real>"");
} else {
out.println(stringVar1 + ""<integer>"" + value.toString() + ""</integer>"");
}
} else if (value instanceof Boolean) {
if (((Boolean) value).booleanValue()) {
out.println(stringVar1 + ""<true/>"");
} else {
out.println(stringVar1 + ""<false/>"");
}
} else if (value instanceof List) {
out.println(stringVar1 + ""<array>"");
Iterator<?> iterator<?>Var3 = iterator<?>Literal4;
while (iterator<?>Var3.hasNext()) {
printValue(out, indentLevel + 1, iterator<?>Var3.next());
}
out.println(stringVar1 + ""</array>"");
} else if (value instanceof HierarchicalConfiguration) {
printNode(out, indentLevel, ((HierarchicalConfiguration) value).getRoot());
} else if (value instanceof Configuration) {
out.println(stringVar1 + ""<dict>"");
Configuration configurationVar5 = configurationLiteral6;
Iterator<String> iterator<?>Var3 = iterator<string>Literal7;
while (iterator<?>Var3.hasNext()) {
String stringVar8 = stringLiteral9;
Node nodeVar10 = nodeLiteral11;
nodeVar10.setValue(configurationVar5.getProperty(stringVar8));
printNode(out, indentLevel + 1, nodeVar10);
if (iterator<?>Var3.hasNext()) {
out.println();
}
}
out.println(stringVar1 + ""</dict>"");
} else if (value instanceof Map) {
Map<String, Object> map<string,object>Var12 = map<string,object>Literal13;
printValue(out, indentLevel, new MapConfiguration(map<string,object>Var12));
} else if (value instanceof byte[]) {
String stringVar14 = stringLiteral15;
out.println(stringVar1 + ""<data>"" + StringEscapeUtils.escapeXml(stringVar14) + ""</data>"");
} else if (value != null) {
out.println(stringVar1 + ""<string>"" + StringEscapeUtils.escapeXml(String.valueOf(value)) + ""</string>"");
} else {
out.println(stringVar1 + ""<string/>"");
}
}"
4097,DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,configuration,1308,"return createNodePointer(subNodes.get(positionToIndex(getPosition())));
","public NodePointer getNodePointer() {
if (getPosition() < 1 && !setPosition(1)) {
return null;
}
return createNodePointer(subNodes.get(positionToIndex(getPosition())));
}","public NodePointer getNodePointer() {
if (getPosition() < 1 && !setPosition(1)) {
return null;
}
return createNodePointer(subNodes.get(positionToIndex(getPosition())));
}"
4124,PERFORMANCE,DM_FP_NUMBER_CTOR,FP,configuration,1335,"return new Double(n.doubleValue());
","public static Double toDouble(Object value) throws ConversionException {
Number n = toNumber(value, Double.class);
if (n instanceof Double) {
return (Double) n;
} else {
return new Double(n.doubleValue());
}
}","public static Double toDouble(Object value) throws ConversionException {
Number numberVar1 = numberLiteral2;
if (numberVar1 instanceof Double) {
return (Double) numberVar1;
} else {
return new Double(numberVar1.doubleValue());
}
}"
4130,PERFORMANCE,URF_UNREAD_FIELD,FP,configuration,1341,private final String protocol;,private final String protocol;,private final String stringVar1;
4132,DODGY_CODE,REC_CATCH_EXCEPTION,FP,configuration,1343,"catch (Exception ex)
","private FileSystemOptions getOptions(String scheme) {
FileSystemOptions opts = new FileSystemOptions();
FileSystemConfigBuilder builder;
try {
builder = VFS.getManager().getFileSystemConfigBuilder(scheme);
} catch (Exception ex) {
return null;
}
FileOptionsProvider provider = getFileOptionsProvider();
if (provider != null) {
Map<String, Object> map = provider.getOptions();
if (map == null) {
return null;
}
int count = 0;
for (Map.Entry<String, Object> entry : map.entrySet()) {
try {
String key = entry.getKey();
if (FileOptionsProvider.CURRENT_USER.equals(key)) {
key = ""creatorName"";
}
setProperty(builder, opts, key, entry.getValue());
++count;
} catch (Exception ex) {
continue;
}
}
if (count > 0) {
return opts;
}
}
return null;
}","private FileSystemOptions getOptions(String scheme) {
FileSystemOptions filesystemoptionsVar1 = filesystemoptionsLiteral2;
FileSystemConfigBuilder filesystemconfigbuilderVar3;
try {
filesystemconfigbuilderVar3 = VFS.getManager().getFileSystemConfigBuilder(scheme);
} catch (Exception ex) {
return null;
}
FileOptionsProvider fileoptionsproviderVar4 = fileoptionsproviderLiteral5;
if (fileoptionsproviderVar4 != null) {
Map<String, Object> map<string,object>Var6 = map<string,object>Literal7;
if (map<string,object>Var6 == null) {
return null;
}
int intVar8 = intLiteral9;
for (Map.Entry<String, Object> map.entry<string,object>Var10 : map<string,object>Var6.entrySet()) {
try {
String stringVar11 = stringLiteral12;
if (FileOptionsProvider.CURRENT_USER.equals(stringVar11)) {
stringVar11 = ""creatorName"";
}
setProperty(filesystemconfigbuilderVar3, filesystemoptionsVar1, stringVar11, map.entry<string,object>Var10.getValue());
++intVar8;
} catch (Exception ex) {
continue;
}
}
if (intVar8 > 0) {
return filesystemoptionsVar1;
}
}
return null;
}"
4138,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,configuration,1349,"fs = ((CatalogManager) catalogManager).getFileSystem();
","@Override
public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
String base = ((CatalogManager) catalogManager).getBaseDir();
@SuppressWarnings(""unchecked"")
Vector<String> catalogs = catalogManager.getCatalogFiles();
if (catalogs != null) {
for (int count = 0; count < catalogs.size(); count++) {
String fileName = catalogs.elementAt(count);
URL url = null;
InputStream is = null;
try {
url = locate(fs, base, fileName);
if (url != null) {
is = fs.getInputStream(url);
}
} catch (ConfigurationException ce) {
String name = url.toString();
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + name + "". "" + ce.getMessage());
}
if (is != null) {
String mimeType = fileNameMap.getContentTypeFor(fileName);
try {
if (mimeType != null) {
parseCatalog(mimeType, is);
continue;
}
} catch (Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + fileName + "". "" + ex.getMessage());
} finally {
is.close();
}
}
parseCatalog(base, fileName);
}
}
}","@Override
public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
String stringVar1 = stringLiteral2;
@SuppressWarnings(""unchecked"")
Vector<String> vector<string>Var3 = vector<string>Literal4;
if (vector<string>Var3 != null) {
for (int intVar16 = intLiteral17; intVar5 < intLiteral1; intVar5++) {
String stringVar7 = stringLiteral8;
URL urlVar9 = urlLiteral10;
InputStream inputstreamVar11 = urlLiteral10;
try {
urlVar9 = locate(fs, stringVar1, stringVar7);
if (urlVar9 != null) {
inputstreamVar11 = fs.getInputStream(urlVar9);
}
} catch (ConfigurationException ce) {
String stringVar12 = stringLiteral13;
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + stringVar12 + "". "" + ce.getMessage());
}
if (inputstreamVar11 != null) {
String stringVar14 = stringLiteral15;
try {
if (stringVar14 != null) {
parseCatalog(stringVar14, inputstreamVar11);
continue;
}
} catch (Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + stringVar7 + "". "" + ex.getMessage());
} finally {
inputstreamVar11.close();
}
}
parseCatalog(stringVar1, stringVar7);
}
}
}"
4199,I18N,DM_CONVERT_CASE,FP,configuration,1410,"if (filename != null && filename.toLowerCase().trim().endsWith("".xml""))
","protected FileConfiguration createConfiguration(Attributes attributes) throws Exception {
String filename = attributes.getValue(ATTR_FILENAME);
if (filename != null && filename.toLowerCase().trim().endsWith("".xml"")) {
return new XMLPropertyListConfiguration();
} else {
return new PropertyListConfiguration();
}
}","protected FileConfiguration createConfiguration(Attributes attributes) throws Exception {
String stringVar1 = stringLiteral2;
if (stringVar1 != null && stringVar1.toLowerCase().trim().endsWith("".xml"")) {
return new XMLPropertyListConfiguration();
} else {
return new PropertyListConfiguration();
}
}"
4205,EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,FP,configuration,1416,"ResultSet rs = pstmt.executeQuery();
","public boolean isEmpty() {
boolean empty = true;
StringBuffer query = new StringBuffer(""SELECT count(*) FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
ResultSet rs = pstmt.executeQuery();
if (rs.next()) {
empty = rs.getInt(1) == 0;
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(conn, pstmt);
}
return empty;
}","public boolean isEmpty() {
boolean booleanVar1 = booleanLiteral2;
StringBuffer stringbufferVar3 = stringbufferLiteral4;
if (nameColumn != null) {
stringbufferVar3.append("" WHERE "" + nameColumn + ""=?"");
}
Connection connectionVar5 = connectionLiteral6;
PreparedStatement preparedstatementVar7 = connectionLiteral6;
try {
connectionVar5 = getConnection();
preparedstatementVar7 = connectionVar5.prepareStatement(stringbufferVar3.toString());
if (nameColumn != null) {
preparedstatementVar7.setString(1, name);
}
ResultSet resultsetVar8 = resultsetLiteral9;
if (resultsetVar8.next()) {
booleanVar1 = resultsetVar8.getInt(1) == 0;
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(connectionVar5, preparedstatementVar7);
}
return booleanVar1;
}"
4211,SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,configuration,1422,"pstmt = conn.prepareStatement(query.toString());
","protected void addPropertyDirect(String key, Object obj) {
StringBuffer query = new StringBuffer(""INSERT INTO "" + table);
if (nameColumn != null) {
query.append("" ("" + nameColumn + "", "" + keyColumn + "", "" + valueColumn + "") VALUES (?, ?, ?)"");
} else {
query.append("" ("" + keyColumn + "", "" + valueColumn + "") VALUES (?, ?)"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
int index = 1;
if (nameColumn != null) {
pstmt.setString(index++, name);
}
pstmt.setString(index++, key);
pstmt.setString(index++, String.valueOf(obj));
pstmt.executeUpdate();
commitIfRequired(conn);
} catch (SQLException e) {
fireError(EVENT_ADD_PROPERTY, key, obj, e);
} finally {
close(conn, pstmt);
}
}","protected void addPropertyDirect(String key, Object obj) {
StringBuffer stringbufferVar1 = stringbufferLiteral2;
if (nameColumn != null) {
stringbufferVar1.append("" ("" + nameColumn + "", "" + keyColumn + "", "" + valueColumn + "") VALUES (?, ?, ?)"");
} else {
stringbufferVar1.append("" ("" + keyColumn + "", "" + valueColumn + "") VALUES (?, ?)"");
}
Connection connectionVar3 = connectionLiteral4;
PreparedStatement preparedstatementVar5 = connectionLiteral4;
try {
connectionVar3 = getConnection();
preparedstatementVar5 = connectionVar3.prepareStatement(stringbufferVar1.toString());
int intVar6 = intLiteral7;
if (nameColumn != null) {
preparedstatementVar5.setString(intVar6++, name);
}
preparedstatementVar5.setString(intVar6++, key);
preparedstatementVar5.setString(intVar6++, String.valueOf(obj));
preparedstatementVar5.executeUpdate();
commitIfRequired(connectionVar3);
} catch (SQLException e) {
fireError(EVENT_ADD_PROPERTY, key, obj, e);
} finally {
close(connectionVar3, preparedstatementVar5);
}
}"
4228,BAD_PRACTICE,SE_BAD_FIELD_STORE,FP,configuration,1439,private final Object reloadLock;,private final Object reloadLock;,private final Object objectVar1;
4231,BAD_PRACTICE,SE_NO_SERIALVERSIONID,FP,configuration,1442,"private static ThreadLocal recursive = new ThreadLocal()
{
protected synchronized Object initialValue()
{
return Boolean.FALSE;
}
};
private final Map configurationsMap = new HashMap();
private String pattern;
private boolean init;
private boolean ignoreException = true;
private boolean schemaValidation;
private boolean validating;
private boolean attributeSplittingDisabled;
private String loggerName = MultiFileHierarchicalConfiguration.class.getName();
private ReloadingStrategy fileStrategy;
private EntityResolver entityResolver;
private StrSubstitutor localSubst = new StrSubstitutor(new ConfigurationInterpolator());
public MultiFileHierarchicalConfiguration()
{
super();
this.init = true;
setLogger(LogFactory.getLog(loggerName));
}
public MultiFileHierarchicalConfiguration(String pathPattern)
{
super();
this.pattern = pathPattern;
this.init = true;
setLogger(LogFactory.getLog(loggerName));
}
public void setLoggerName(String name)
{
this.loggerName = name;
}
public void setFilePattern(String pathPattern)
{
this.pattern = pathPattern;
}
public boolean isSchemaValidation()
{
return schemaValidation;
}
public void setSchemaValidation(boolean schemaValidation)
{
this.schemaValidation = schemaValidation;
}
public boolean isValidating()
{
return validating;
}
public void setValidating(boolean validating)
{
this.validating = validating;
}
public boolean isAttributeSplittingDisabled()
{
return attributeSplittingDisabled;
}
public void setAttributeSplittingDisabled(boolean attributeSplittingDisabled)
{
this.attributeSplittingDisabled = attributeSplittingDisabled;
}
public ReloadingStrategy getReloadingStrategy()
{
return fileStrategy;
}
public void setReloadingStrategy(ReloadingStrategy strategy)
{
this.fileStrategy = strategy;
}
public void setEntityResolver(EntityResolver entityResolver)
{
this.entityResolver = entityResolver;
}
public EntityResolver getEntityResolver()
{
return this.entityResolver;
}
public void setIgnoreException(boolean ignoreException)
{
this.ignoreException = ignoreException;
}
public void addProperty(String key, Object value)
{
this.getConfiguration().addProperty(key, value);
}
public void clear()
{
this.getConfiguration().clear();
}
public void clearProperty(String key)
{
this.getConfiguration().clearProperty(key);
}
public boolean containsKey(String key)
{
return this.getConfiguration().containsKey(key);
}
public BigDecimal getBigDecimal(String key, BigDecimal defaultValue)
{
return this.getConfiguration().getBigDecimal(key, defaultValue);
}
public BigDecimal getBigDecimal(String key)
{
return this.getConfiguration().getBigDecimal(key);
}
public BigInteger getBigInteger(String key, BigInteger defaultValue)
{
return this.getConfiguration().getBigInteger(key, defaultValue);
}
public BigInteger getBigInteger(String key)
{
return this.getConfiguration().getBigInteger(key);
}
public boolean getBoolean(String key, boolean defaultValue)
{
return this.getConfiguration().getBoolean(key, defaultValue);
}
public Boolean getBoolean(String key, Boolean defaultValue)
{
return this.getConfiguration().getBoolean(key, defaultValue);
}
public boolean getBoolean(String key)
{
return this.getConfiguration().getBoolean(key);
}
public byte getByte(String key, byte defaultValue)
{
return this.getConfiguration().getByte(key, defaultValue);
}
public Byte getByte(String key, Byte defaultValue)
{
return this.getConfiguration().getByte(key, defaultValue);
}
public byte getByte(String key)
{
return this.getConfiguration().getByte(key);
}
public double getDouble(String key, double defaultValue)
{
return this.getConfiguration().getDouble(key, defaultValue);
}
public Double getDouble(String key, Double defaultValue)
{
return this.getConfiguration().getDouble(key, defaultValue);
}
public double getDouble(String key)
{
return this.getConfiguration().getDouble(key);
}
public float getFloat(String key, float defaultValue)
{
return this.getConfiguration().getFloat(key, defaultValue);
}
public Float getFloat(String key, Float defaultValue)
{
return this.getConfiguration().getFloat(key, defaultValue);
}
public float getFloat(String key)
{
return this.getConfiguration().getFloat(key);
}
public int getInt(String key, int defaultValue)
{
return this.getConfiguration().getInt(key, defaultValue);
}
public int getInt(String key)
{
return this.getConfiguration().getInt(key);
}
public Integer getInteger(String key, Integer defaultValue)
{
return this.getConfiguration().getInteger(key, defaultValue);
}
public Iterator getKeys()
{
return this.getConfiguration().getKeys();
}
public Iterator getKeys(String prefix)
{
return this.getConfiguration().getKeys(prefix);
}
public List getList(String key, List defaultValue)
{
return this.getConfiguration().getList(key, defaultValue);
}
public List getList(String key)
{
return this.getConfiguration().getList(key);
}
public long getLong(String key, long defaultValue)
{
return this.getConfiguration().getLong(key, defaultValue);
}
public Long getLong(String key, Long defaultValue)
{
return this.getConfiguration().getLong(key, defaultValue);
}
public long getLong(String key)
{
return this.getConfiguration().getLong(key);
}
public Properties getProperties(String key)
{
return this.getConfiguration().getProperties(key);
}
public Object getProperty(String key)
{
return this.getConfiguration().getProperty(key);
}
public short getShort(String key, short defaultValue)
{
return this.getConfiguration().getShort(key, defaultValue);
}
public Short getShort(String key, Short defaultValue)
{
return this.getConfiguration().getShort(key, defaultValue);
}
public short getShort(String key)
{
return this.getConfiguration().getShort(key);
}
public String getString(String key, String defaultValue)
{
return this.getConfiguration().getString(key, defaultValue);
}
public String getString(String key)
{
return this.getConfiguration().getString(key);
}
public String[] getStringArray(String key)
{
return this.getConfiguration().getStringArray(key);
}
public boolean isEmpty()
{
return this.getConfiguration().isEmpty();
}
public void setProperty(String key, Object value)
{
if (init)
{
this.getConfiguration().setProperty(key, value);
}
}
public Configuration subset(String prefix)
{
return this.getConfiguration().subset(prefix);
}
public Object getReloadLock()
{
return this.getConfiguration().getReloadLock();
}
public Node getRoot()
{
return this.getConfiguration().getRoot();
}
public void setRoot(Node node)
{
if (init)
{
this.getConfiguration().setRoot(node);
}
else
{
super.setRoot(node);
}
}
public ConfigurationNode getRootNode()
{
return this.getConfiguration().getRootNode();
}
public void setRootNode(ConfigurationNode rootNode)
{
if (init)
{
this.getConfiguration().setRootNode(rootNode);
}
else
{
super.setRootNode(rootNode);
}
}
public ExpressionEngine getExpressionEngine()
{
return super.getExpressionEngine();
}
public void setExpressionEngine(ExpressionEngine expressionEngine)
{
super.setExpressionEngine(expressionEngine);
}
public void addNodes(String key, Collection nodes)
{
this.getConfiguration().addNodes(key, nodes);
}
public SubnodeConfiguration configurationAt(String key, boolean supportUpdates)
{
return this.getConfiguration().configurationAt(key, supportUpdates);
}
public SubnodeConfiguration configurationAt(String key)
{
return this.getConfiguration().configurationAt(key);
}
public List configurationsAt(String key)
{
return this.getConfiguration().configurationsAt(key);
}
public void clearTree(String key)
{
this.getConfiguration().clearTree(key);
}
public int getMaxIndex(String key)
{
return this.getConfiguration().getMaxIndex(key);
}
public Configuration interpolatedConfiguration()
{
return this.getConfiguration().interpolatedConfiguration();
}
public void addConfigurationListener(ConfigurationListener l)
{
super.addConfigurationListener(l);
}
public boolean removeConfigurationListener(ConfigurationListener l)
{
return super.removeConfigurationListener(l);
}
public Collection getConfigurationListeners()
{
return super.getConfigurationListeners();
}
public void clearConfigurationListeners()
{
super.clearConfigurationListeners();
}
public void addErrorListener(ConfigurationErrorListener l)
{
super.addErrorListener(l);
}
public boolean removeErrorListener(ConfigurationErrorListener l)
{
return super.removeErrorListener(l);
}
public void clearErrorListeners()
{
super.clearErrorListeners();
}
public Collection getErrorListeners()
{
return super.getErrorListeners();
}
public void save(Writer writer) throws ConfigurationException
{
if (init)
{
this.getConfiguration().save(writer);
}
}
public void load(Reader reader) throws ConfigurationException
{
if (init)
{
this.getConfiguration().load(reader);
}
}
public void load() throws ConfigurationException
{
this.getConfiguration();
}
public void load(String fileName) throws ConfigurationException
{
this.getConfiguration().load(fileName);
}
public void load(File file) throws ConfigurationException
{
this.getConfiguration().load(file);
}
public void load(URL url) throws ConfigurationException
{
this.getConfiguration().load(url);
}
public void load(InputStream in) throws ConfigurationException
{
this.getConfiguration().load(in);
}
public void load(InputStream in, String encoding) throws ConfigurationException
{
this.getConfiguration().load(in, encoding);
}
public void save() throws ConfigurationException
{
this.getConfiguration().save();
}
public void save(String fileName) throws ConfigurationException
{
this.getConfiguration().save(fileName);
}
public void save(File file) throws ConfigurationException
{
this.getConfiguration().save(file);
}
public void save(URL url) throws ConfigurationException
{
this.getConfiguration().save(url);
}
public void save(OutputStream out) throws ConfigurationException
{
this.getConfiguration().save(out);
}
public void save(OutputStream out, String encoding) throws ConfigurationException
{
this.getConfiguration().save(out, encoding);
}
public void configurationChanged(ConfigurationEvent event)
{
if (event.getSource() instanceof XMLConfiguration)
{
Iterator iter = getConfigurationListeners().iterator();
while (iter.hasNext())
{
ConfigurationListener listener = (ConfigurationListener) iter.next();
listener.configurationChanged(event);
}
}
}
public void configurationError(ConfigurationErrorEvent event)
{
if (event.getSource() instanceof XMLConfiguration)
{
Iterator iter = getErrorListeners().iterator();
while (iter.hasNext())
{
ConfigurationErrorListener listener = (ConfigurationErrorListener) iter.next();
listener.configurationError(event);
}
}
if (event.getType() == AbstractFileConfiguration.EVENT_RELOAD)
{
if (isThrowable(event.getCause()))
{
throw new ConfigurationRuntimeException(event.getCause());
}
}
}
protected Object resolveContainerStore(String key)
{
if (((Boolean) recursive.get()).booleanValue())
{
return null;
}
recursive.set(Boolean.TRUE);
try
{
return super.resolveContainerStore(key);
}
finally
{
recursive.set(Boolean.FALSE);
}
}
public void removeConfiguration()
{
String path = getSubstitutor().replace(pattern);
synchronized (configurationsMap)
{
configurationsMap.remove(path);
}
}
private AbstractHierarchicalFileConfiguration getConfiguration()
{
if (pattern == null)
{
throw new ConfigurationRuntimeException(""File pattern must be defined"");
}
String path = localSubst.replace(pattern);
synchronized (configurationsMap)
{
if (configurationsMap.containsKey(path))
{
return (AbstractHierarchicalFileConfiguration) configurationsMap.get(path);
}
}
if (path.equals(pattern))
{
XMLConfiguration configuration = new XMLConfiguration()
{
public void load() throws ConfigurationException
{
}
public void save() throws ConfigurationException
{
}
};
synchronized (configurationsMap)
{
configurationsMap.put(pattern, configuration);
}
return configuration;
}
XMLConfiguration configuration = new XMLConfiguration();
if (loggerName != null)
{
Log log = LogFactory.getLog(loggerName);
if (log != null)
{
configuration.setLogger(log);
}
}
configuration.setBasePath(getBasePath());
configuration.setFileName(path);
configuration.setFileSystem(getFileSystem());
configuration.setExpressionEngine(getExpressionEngine());
ReloadingStrategy strategy = createReloadingStrategy();
if (strategy != null)
{
configuration.setReloadingStrategy(strategy);
}
configuration.setDelimiterParsingDisabled(isDelimiterParsingDisabled());
configuration.setValidating(validating);
configuration.setSchemaValidation(schemaValidation);
configuration.setEntityResolver(entityResolver);
configuration.setAttributeSplittingDisabled(attributeSplittingDisabled);
configuration.setListDelimiter(getListDelimiter());
configuration.addConfigurationListener(this);
configuration.addErrorListener(this);
try
{
configuration.load();
}
catch (ConfigurationException ce)
{
if (isThrowable(ce))
{
throw new ConfigurationRuntimeException(ce);
}
}
synchronized (configurationsMap)
{
if (!configurationsMap.containsKey(path))
{
configurationsMap.put(path, configuration);
}
}
return configuration;
}
private boolean isThrowable(Throwable throwable)
{
if (!ignoreException)
{
return true;
}
Throwable cause = throwable.getCause();
while (cause != null && !(cause instanceof SAXParseException))
{
cause = cause.getCause();
}
return cause != null;
}
private ReloadingStrategy createReloadingStrategy()
{
if (fileStrategy == null)
{
return null;
}
try
{
ReloadingStrategy strategy = (ReloadingStrategy) BeanUtils.cloneBean(fileStrategy);
strategy.setConfiguration(null);
return strategy;
}
catch (Exception ex)
{
return null;
","public void setRootNode(ConfigurationNode rootNode) {
if (init) {
this.getConfiguration().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}","public void setRootNode(ConfigurationNode rootNode) {
if (init) {
this.getConfiguration().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}"
4265,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,configuration,1476,"jj_input_stream.ReInit(stream, 1, 1);
token_source.ReInit(jj_input_stream);
token = new Token();
jj_ntk = -1;
jj_gen = 0;
for (int i = 0; i < 6; i++) jj_la1[i] = -1;
for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
}
","public void ReInit(java.io.InputStream stream) {
jj_input_stream.ReInit(stream, 1, 1);
token_source.ReInit(jj_input_stream);
token = new Token();
jj_ntk = -1;
jj_gen = 0;
for (int i = 0; i < 6; i++) jj_la1[i] = -1;
for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
}","public void ReInit(java.io.InputStream stream) {
jj_input_stream.ReInit(stream, 1, 1);
token_source.ReInit(jj_input_stream);
token = new Token();
jj_ntk = -1;
jj_gen = 0;
for (int intVar3 = intLiteral4; intVar1 < intLiteral1; intVar1++) jj_la1[intVar1] = -1;
for (int intVar3 = intLiteral4; intVar1 < intLiteral2; intVar1++) jj_2_rtns[intVar1] = new JJCalls();
}"
4266,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,configuration,1477,"PropertyListConfiguration configuration = new PropertyListConfiguration();
List children = new ArrayList();
Node child = null;
jj_consume_token(DICT_BEGIN);
label_1:
while (true) {
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
case STRING:
case QUOTED_STRING:
;
break;
default:
jj_la1[0] = jj_gen;
break label_1;
}
child = Property();
if (child.getValue() instanceof HierarchicalConfiguration)
{
HierarchicalConfiguration conf = (HierarchicalConfiguration) child.getValue();
Node root = conf.getRoot();
root.setName(child.getName());
children.add(root);
}
else
{
children.add(child);
}
}
jj_consume_token(DICT_END);
for (int i = 0; i < children.size(); i++)
{
child = (Node) children.get(i);
configuration.getRoot().addChild(child);
}
{if (true) return configuration;}
","final public PropertyListConfiguration Dictionary() throws ParseException {
PropertyListConfiguration configuration = new PropertyListConfiguration();
List children = new ArrayList();
Node child = null;
jj_consume_token(DICT_BEGIN);
label_1: while (true) {
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case STRING:
case QUOTED_STRING:
;
break;
default:
jj_la1[0] = jj_gen;
break label_1;
}
child = Property();
if (child.getValue() instanceof HierarchicalConfiguration) {
HierarchicalConfiguration conf = (HierarchicalConfiguration) child.getValue();
Node root = conf.getRoot();
root.setName(child.getName());
children.add(root);
} else {
children.add(child);
}
}
jj_consume_token(DICT_END);
for (int i = 0; i < children.size(); i++) {
child = (Node) children.get(i);
configuration.getRoot().addChild(child);
}
{
if (true)
return configuration;
}
throw new Error(""Missing return statement in function"");
}","final public PropertyListConfiguration Dictionary() throws ParseException {
PropertyListConfiguration propertylistconfigurationVar1 = propertylistconfigurationLiteral2;
List listVar3 = listLiteral4;
Node nodeVar5 = nodeLiteral6;
jj_consume_token(DICT_BEGIN);
label_1: while (true) {
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case STRING:
case QUOTED_STRING:
;
break;
default:
jj_la1[0] = jj_gen;
break label_1;
}
nodeVar5 = Property();
if (nodeVar5.getValue() instanceof HierarchicalConfiguration) {
HierarchicalConfiguration hierarchicalconfigurationVar7 = hierarchicalconfigurationLiteral8;
Node nodeVar9 = nodeLiteral10;
nodeVar9.setName(nodeVar5.getName());
listVar3.add(nodeVar9);
} else {
listVar3.add(nodeVar5);
}
}
jj_consume_token(DICT_END);
for (int intVar13 = intLiteral14; intVar11 < intLiteral1; intVar11++) {
nodeVar5 = (Node) listVar3.get(intVar11);
propertylistconfigurationVar1.getRoot().addChild(nodeVar5);
}
{
if (true)
return propertylistconfigurationVar1;
}
throw new Error(""Missing return statement in function"");
}"
4270,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,configuration,1481,"token = jj_consume_token(DATE);
{if (true) return parseDate(token.image);}
","final public Date Date() throws ParseException {
Token token;
token = jj_consume_token(DATE);
{
if (true)
return parseDate(token.image);
}
throw new Error(""Missing return statement in function"");
}","final public Date Date() throws ParseException {
Token tokenVar1;
tokenVar1 = jj_consume_token(DATE);
{
if (true)
return parseDate(tokenVar1.image);
}
throw new Error(""Missing return statement in function"");
}"
4277,PERFORMANCE,UPM_UNCALLED_PRIVATE_METHOD,FP,configuration,1488,"jjstateSet[jjnewStateCnt++] = jjnextStates[start];
}
while (start++ != end);
}
","private final void jjAddStates(int start, int end) {
do {
jjstateSet[jjnewStateCnt++] = jjnextStates[start];
} while (start++ != end);
}","private final void jjAddStates(int start, int end) {
do {
jjstateSet[jjnewStateCnt++] = jjnextStates[start];
} while (start++ != end);
}"
4281,DODGY_CODE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,FP,configuration,1492,public java.io.PrintStream debugStream = System.out;,public java.io.PrintStream debugStream = System.out;,public java.io.PrintStream java.io.printstreamVar1 = java.io.printstreamLiteral2;
4287,I18N,DM_DEFAULT_ENCODING,FP,configuration,1498,"ReInit(new java.io.InputStreamReader(dstream), startline, startcolumn, 4096);
","public void ReInit(java.io.InputStream dstream, int startline, int startcolumn, int buffersize) {
ReInit(new java.io.InputStreamReader(dstream), startline, startcolumn, 4096);
}","public void ReInit(java.io.InputStream dstream, int startline, int startcolumn, int buffersize) {
ReInit(new java.io.InputStreamReader(dstream), startline, startcolumn, 4096);
}"
4288,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,configuration,1499,"ReInit(dstream, startline, startcolumn, 4096);
}
","public void ReInit(java.io.Reader dstream, int startline, int startcolumn) {
ReInit(dstream, startline, startcolumn, 4096);
}","public void ReInit(java.io.Reader dstream, int startline, int startcolumn) {
ReInit(dstream, startline, startcolumn, 4096);
}"
4485,PERFORMANCE,DM_NUMBER_CTOR,FP,configuration,1696,"return getByte(key, new Byte(defaultValue)).byteValue();
","public byte getByte(String key, byte defaultValue) {
return getByte(key, new Byte(defaultValue)).byteValue();
}","public byte getByte(String key, byte defaultValue) {
return getByte(key, new Byte(defaultValue)).byteValue();
}"
4499,DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,FP,configuration,1710,"if (file != null && file.exists())
","public static URL locate(String base, String name) {
if (log.isDebugEnabled()) {
StringBuffer buf = new StringBuffer();
buf.append(""ConfigurationUtils.locate(): base is "").append(base);
buf.append("", name is "").append(name);
log.debug(buf.toString());
}
if (name == null) {
return null;
}
URL url = null;
try {
if (base == null) {
url = new URL(name);
} else {
URL baseURL = new URL(base);
url = new URL(baseURL, name);
InputStream in = null;
try {
in = url.openStream();
} finally {
if (in != null) {
in.close();
}
}
}
log.debug(""Loading configuration from the URL "" + url);
} catch (IOException e) {
url = null;
}
if (url == null) {
File file = new File(name);
if (file.isAbsolute() && file.exists()) {
try {
url = file.toURL();
log.debug(""Loading configuration from the absolute path "" + name);
} catch (MalformedURLException e) {
log.warn(""Could not obtain URL from file"", e);
}
}
}
if (url == null) {
try {
File file = constructFile(base, name);
if (file != null && file.exists()) {
url = file.toURL();
}
if (url != null) {
log.debug(""Loading configuration from the path "" + file);
}
} catch (MalformedURLException e) {
log.warn(""Could not obtain URL from file"", e);
}
}
if (url == null) {
try {
File file = constructFile(System.getProperty(""user.home""), name);
if (file != null && file.exists()) {
url = file.toURL();
}
if (url != null) {
log.debug(""Loading configuration from the home path "" + file);
}
} catch (MalformedURLException e) {
log.warn(""Could not obtain URL from file"", e);
}
}
if (url == null) {
url = locateFromClasspath(name);
}
return url;
}","public static URL locate(String base, String name) {
if (log.isDebugEnabled()) {
StringBuffer stringbufferVar1 = stringbufferLiteral2;
stringbufferVar1.append(""ConfigurationUtils.locate(): base is "").append(base);
stringbufferVar1.append("", name is "").append(name);
log.debug(stringbufferVar1.toString());
}
if (name == null) {
return null;
}
URL urlVar3 = urlLiteral4;
try {
if (base == null) {
urlVar3 = new URL(name);
} else {
URL urlVar5 = urlLiteral6;
urlVar3 = new URL(urlVar5, name);
InputStream inputstreamVar7 = urlLiteral4;
try {
inputstreamVar7 = urlVar3.openStream();
} finally {
if (inputstreamVar7 != null) {
inputstreamVar7.close();
}
}
}
log.debug(""Loading configuration from the URL "" + urlVar3);
} catch (IOException e) {
urlVar3 = null;
}
if (urlVar3 == null) {
File fileVar8 = fileLiteral9;
if (fileVar8.isAbsolute() && fileVar8.exists()) {
try {
urlVar3 = fileVar8.toURL();
log.debug(""Loading configuration from the absolute path "" + name);
} catch (MalformedURLException e) {
log.warn(""Could not obtain URL from file"", e);
}
}
}
if (urlVar3 == null) {
try {
File fileVar8 = fileLiteral10;
if (fileVar8 != null && fileVar8.exists()) {
urlVar3 = fileVar8.toURL();
}
if (urlVar3 != null) {
log.debug(""Loading configuration from the path "" + fileVar8);
}
} catch (MalformedURLException e) {
log.warn(""Could not obtain URL from file"", e);
}
}
if (urlVar3 == null) {
try {
File fileVar8 = fileLiteral11;
if (fileVar8 != null && fileVar8.exists()) {
urlVar3 = fileVar8.toURL();
}
if (urlVar3 != null) {
log.debug(""Loading configuration from the home path "" + fileVar8);
}
} catch (MalformedURLException e) {
log.warn(""Could not obtain URL from file"", e);
}
}
if (urlVar3 == null) {
urlVar3 = locateFromClasspath(name);
}
return urlVar3;
}"
4515,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,configuration,1726,"ConfigurationDeclaration decl = (ConfigurationDeclaration) data;
","public Object createBean(Class beanClass, BeanDeclaration data, Object param) throws Exception {
ConfigurationDeclaration decl = (ConfigurationDeclaration) data;
String tagName = decl.getNode().getName();
ConfigurationProvider provider = decl.getConfigurationBuilder().providerForTag(tagName);
if (provider == null) {
throw new ConfigurationRuntimeException(""No ConfigurationProvider registered for tag "" + tagName);
}
try {
return provider.getConfiguration(decl);
} catch (Exception ex) {
if (!decl.isOptional()) {
throw ex;
} else {
decl.getConfigurationBuilder().fireError(EVENT_ERR_LOAD_OPTIONAL, decl.getConfiguration().getString(ATTR_NAME), null, ex);
if (decl.isForceCreate()) {
try {
return provider.getEmptyConfiguration(decl);
} catch (Exception ex2) {
;
}
}
return null;
}
}
}","public Object createBean(Class beanClass, BeanDeclaration data, Object param) throws Exception {
ConfigurationDeclaration configurationdeclarationVar1 = configurationdeclarationLiteral2;
String stringVar3 = stringLiteral4;
ConfigurationProvider configurationproviderVar5 = configurationproviderLiteral6;
if (configurationproviderVar5 == null) {
throw new ConfigurationRuntimeException(""No ConfigurationProvider registered for tag "" + stringVar3);
}
try {
return configurationproviderVar5.getConfiguration(configurationdeclarationVar1);
} catch (Exception ex) {
if (!configurationdeclarationVar1.isOptional()) {
throw ex;
} else {
configurationdeclarationVar1.getConfigurationBuilder().fireError(EVENT_ERR_LOAD_OPTIONAL, configurationdeclarationVar1.getConfiguration().getString(ATTR_NAME), null, ex);
if (configurationdeclarationVar1.isForceCreate()) {
try {
return configurationproviderVar5.getEmptyConfiguration(configurationdeclarationVar1);
} catch (Exception ex2) {
;
}
}
return null;
}
}
}"
4517,BAD_PRACTICE,SE_BAD_FIELD,FP,configuration,1728,private ExpressionEngine expressionEngine;,private ExpressionEngine expressionEngine;,private ExpressionEngine expressionengineVar1;
4523,PERFORMANCE,DM_NUMBER_CTOR,FP,configuration,1734,"return new Short(n.shortValue());
","public static Short toShort(Object value) throws ConversionException {
Number n = toNumber(value, Short.class);
if (n instanceof Short) {
return (Short) n;
} else {
return new Short(n.shortValue());
}
}","public static Short toShort(Object value) throws ConversionException {
Number numberVar1 = numberLiteral2;
if (numberVar1 instanceof Short) {
return (Short) numberVar1;
} else {
return new Short(numberVar1.shortValue());
}
}"
4527,PERFORMANCE,DM_NUMBER_CTOR,FP,configuration,1738,"return new Long(n.longValue());
","public static Long toLong(Object value) throws ConversionException {
Number n = toNumber(value, Long.class);
if (n instanceof Long) {
return (Long) n;
} else {
return new Long(n.longValue());
}
}","public static Long toLong(Object value) throws ConversionException {
Number numberVar1 = numberLiteral2;
if (numberVar1 instanceof Long) {
return (Long) numberVar1;
} else {
return new Long(numberVar1.longValue());
}
}"
4546,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,configuration,1757,"List list = new ArrayList();
Object element = null;
jj_consume_token(ARRAY_BEGIN);
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
case ARRAY_BEGIN:
case DICT_BEGIN:
case DATA:
case DATE:
case STRING:
case QUOTED_STRING:
element = Element();
list.add(element);
label_2:
while (true) {
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
case ARRAY_SEPARATOR:
;
break;
default:
jj_la1[3] = jj_gen;
break label_2;
}
jj_consume_token(ARRAY_SEPARATOR);
element = Element();
list.add(element);
}
break;
default:
jj_la1[4] = jj_gen;
;
}
jj_consume_token(ARRAY_END);
{if (true) return list;}
","final public List Array() throws ParseException {
List list = new ArrayList();
Object element = null;
jj_consume_token(ARRAY_BEGIN);
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case ARRAY_BEGIN:
case DICT_BEGIN:
case DATA:
case DATE:
case STRING:
case QUOTED_STRING:
element = Element();
list.add(element);
label_2: while (true) {
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case ARRAY_SEPARATOR:
;
break;
default:
jj_la1[3] = jj_gen;
break label_2;
}
jj_consume_token(ARRAY_SEPARATOR);
element = Element();
list.add(element);
}
break;
default:
jj_la1[4] = jj_gen;
;
}
jj_consume_token(ARRAY_END);
{
if (true)
return list;
}
throw new Error(""Missing return statement in function"");
}","final public List Array() throws ParseException {
List listVar1 = listLiteral2;
Object objectVar3 = objectLiteral4;
jj_consume_token(ARRAY_BEGIN);
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case ARRAY_BEGIN:
case DICT_BEGIN:
case DATA:
case DATE:
case STRING:
case QUOTED_STRING:
objectVar3 = Element();
listVar1.add(objectVar3);
label_2: while (true) {
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case ARRAY_SEPARATOR:
;
break;
default:
jj_la1[3] = jj_gen;
break label_2;
}
jj_consume_token(ARRAY_SEPARATOR);
objectVar3 = Element();
listVar1.add(objectVar3);
}
break;
default:
jj_la1[4] = jj_gen;
;
}
jj_consume_token(ARRAY_END);
{
if (true)
return listVar1;
}
throw new Error(""Missing return statement in function"");
}"
4563,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,configuration,1774,"jjmatchedPos = jjnewStateCnt = 0;
curLexState = defaultLexState;
input_stream = stream;
ReInitRounds();
}
","public void ReInit(SimpleCharStream stream) {
jjmatchedPos = jjnewStateCnt = 0;
curLexState = defaultLexState;
input_stream = stream;
ReInitRounds();
}","public void ReInit(SimpleCharStream stream) {
jjmatchedPos = jjnewStateCnt = 0;
curLexState = defaultLexState;
input_stream = stream;
ReInitRounds();
}"
4576,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,configuration,1787,"if (maxNextCharInd == available)
{
if (available == bufsize)
{
if (tokenBegin > 2048)
{
bufpos = maxNextCharInd = 0;
available = tokenBegin;
}
else if (tokenBegin < 0)
bufpos = maxNextCharInd = 0;
else
ExpandBuff(false);
}
else if (available > tokenBegin)
available = bufsize;
else if ((tokenBegin - available) < 2048)
ExpandBuff(true);
else
available = tokenBegin;
}
int i;
try {
if ((i = inputStream.read(buffer, maxNextCharInd,
available - maxNextCharInd)) == -1)
{
inputStream.close();
throw new java.io.IOException();
}
else
maxNextCharInd += i;
return;
}
catch(java.io.IOException e) {
--bufpos;
backup(0);
if (tokenBegin == -1)
tokenBegin = bufpos;
throw e;
","protected void FillBuff() throws java.io.IOException {
if (maxNextCharInd == available) {
if (available == bufsize) {
if (tokenBegin > 2048) {
bufpos = maxNextCharInd = 0;
available = tokenBegin;
} else if (tokenBegin < 0)
bufpos = maxNextCharInd = 0;
else
ExpandBuff(false);
} else if (available > tokenBegin)
available = bufsize;
else if ((tokenBegin - available) < 2048)
ExpandBuff(true);
else
available = tokenBegin;
}
int i;
try {
if ((i = inputStream.read(buffer, maxNextCharInd, available - maxNextCharInd)) == -1) {
inputStream.close();
throw new java.io.IOException();
} else
maxNextCharInd += i;
return;
} catch (java.io.IOException e) {
--bufpos;
backup(0);
if (tokenBegin == -1)
tokenBegin = bufpos;
throw e;
}
}","protected void FillBuff() throws java.io.IOException {
if (maxNextCharInd == available) {
if (available == bufsize) {
if (tokenBegin > 2048) {
bufpos = maxNextCharInd = 0;
available = tokenBegin;
} else if (tokenBegin < 0)
bufpos = maxNextCharInd = 0;
else
ExpandBuff(false);
} else if (available > tokenBegin)
available = bufsize;
else if ((tokenBegin - available) < 2048)
ExpandBuff(true);
else
available = tokenBegin;
}
int intVar1;
try {
if ((intVar1 = inputStream.read(buffer, maxNextCharInd, available - maxNextCharInd)) == -1) {
inputStream.close();
throw new java.io.IOException();
} else
maxNextCharInd += intVar1;
return;
} catch (java.io.IOException e) {
--bufpos;
backup(0);
if (tokenBegin == -1)
tokenBegin = bufpos;
throw e;
}
}"
4578,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,configuration,1789,"char[] newbuffer = new char[bufsize + 2048];
int newbufline[] = new int[bufsize + 2048];
int newbufcolumn[] = new int[bufsize + 2048];
try
{
if (wrapAround)
{
System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
System.arraycopy(buffer, 0, newbuffer,
bufsize - tokenBegin, bufpos);
buffer = newbuffer;
System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
System.arraycopy(bufline, 0, newbufline, bufsize - tokenBegin, bufpos);
bufline = newbufline;
System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
System.arraycopy(bufcolumn, 0, newbufcolumn, bufsize - tokenBegin, bufpos);
bufcolumn = newbufcolumn;
maxNextCharInd = (bufpos += (bufsize - tokenBegin));
}
else
{
System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
buffer = newbuffer;
System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
bufline = newbufline;
System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
bufcolumn = newbufcolumn;
maxNextCharInd = (bufpos -= tokenBegin);
}
}
catch (Throwable t)
{
throw new Error(t.getMessage());
}
bufsize += 2048;
available = bufsize;
tokenBegin = 0;
}
","protected void ExpandBuff(boolean wrapAround) {
char[] newbuffer = new char[bufsize + 2048];
int[] newbufline = new int[bufsize + 2048];
int[] newbufcolumn = new int[bufsize + 2048];
try {
if (wrapAround) {
System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
System.arraycopy(buffer, 0, newbuffer, bufsize - tokenBegin, bufpos);
buffer = newbuffer;
System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
System.arraycopy(bufline, 0, newbufline, bufsize - tokenBegin, bufpos);
bufline = newbufline;
System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
System.arraycopy(bufcolumn, 0, newbufcolumn, bufsize - tokenBegin, bufpos);
bufcolumn = newbufcolumn;
maxNextCharInd = (bufpos += (bufsize - tokenBegin));
} else {
System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
buffer = newbuffer;
System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
bufline = newbufline;
System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
bufcolumn = newbufcolumn;
maxNextCharInd = (bufpos -= tokenBegin);
}
} catch (Throwable t) {
throw new Error(t.getMessage());
}
bufsize += 2048;
available = bufsize;
tokenBegin = 0;
}","protected void ExpandBuff(boolean wrapAround) {
char[] charArrayVar1 = charArrayLiteral2;
int[] intArrayVar3 = intArrayLiteral4;
int[] intArrayVar5 = intArrayLiteral4;
try {
if (wrapAround) {
System.arraycopy(buffer, tokenBegin, charArrayVar1, 0, bufsize - tokenBegin);
System.arraycopy(buffer, 0, charArrayVar1, bufsize - tokenBegin, bufpos);
buffer = charArrayVar1;
System.arraycopy(bufline, tokenBegin, intArrayVar3, 0, bufsize - tokenBegin);
System.arraycopy(bufline, 0, intArrayVar3, bufsize - tokenBegin, bufpos);
bufline = intArrayVar3;
System.arraycopy(bufcolumn, tokenBegin, intArrayVar5, 0, bufsize - tokenBegin);
System.arraycopy(bufcolumn, 0, intArrayVar5, bufsize - tokenBegin, bufpos);
bufcolumn = intArrayVar5;
maxNextCharInd = (bufpos += (bufsize - tokenBegin));
} else {
System.arraycopy(buffer, tokenBegin, charArrayVar1, 0, bufsize - tokenBegin);
buffer = charArrayVar1;
System.arraycopy(bufline, tokenBegin, intArrayVar3, 0, bufsize - tokenBegin);
bufline = intArrayVar3;
System.arraycopy(bufcolumn, tokenBegin, intArrayVar5, 0, bufsize - tokenBegin);
bufcolumn = intArrayVar5;
maxNextCharInd = (bufpos -= tokenBegin);
}
} catch (Throwable t) {
throw new Error(t.getMessage());
}
bufsize += 2048;
available = bufsize;
tokenBegin = 0;
}"
4593,DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,configuration,1804,"return (configuration.getURL() != null) ? fileFromURL(configuration
","protected File getFile() {
return (configuration.getURL() != null) ? fileFromURL(configuration.getURL()) : configuration.getFile();
}","protected File getFile() {
return (configuration.getURL() != null) ? fileFromURL(configuration.getURL()) : configuration.getFile();
}"
4616,DODGY_CODE,RI_REDUNDANT_INTERFACES,FP,configuration,1827,"public class CombinedConfiguration extends HierarchicalReloadableConfiguration implements
ConfigurationListener, Cloneable
{
public static final int EVENT_COMBINED_INVALIDATE = 40;
private static final long serialVersionUID = 8338574525528692307L;
private static final DefaultExpressionEngine AT_ENGINE = new DefaultExpressionEngine();
private static final NodeCombiner DEFAULT_COMBINER = new UnionCombiner();
private static final String PROP_RELOAD_CHECK = ""CombinedConfigurationReloadCheck"";
private NodeCombiner nodeCombiner;
private volatile ConfigurationNode combinedRoot;
private List<ConfigData> configurations;
private Map<String, AbstractConfiguration> namedConfigurations;
private boolean ignoreReloadExceptions = true;
private boolean reloadRequired;
private ExpressionEngine conversionExpressionEngine;
private boolean forceReloadCheck;
public CombinedConfiguration(NodeCombiner comb)
{
setNodeCombiner((comb != null) ? comb : DEFAULT_COMBINER);
clear();
}
public CombinedConfiguration(NodeCombiner comb, Lock lock)
{
super(lock);
setNodeCombiner((comb != null) ? comb : DEFAULT_COMBINER);
clear();
}
public CombinedConfiguration(Lock lock)
{
this(null, lock);
}
public CombinedConfiguration()
{
this(null, null);
}
public NodeCombiner getNodeCombiner()
{
return nodeCombiner;
}
public void setNodeCombiner(NodeCombiner nodeCombiner)
{
if (nodeCombiner == null)
{
throw new IllegalArgumentException(
""Node combiner must not be null!"");
}
this.nodeCombiner = nodeCombiner;
invalidate();
}
public boolean isForceReloadCheck()
{
return forceReloadCheck;
}
public void setForceReloadCheck(boolean forceReloadCheck)
{
this.forceReloadCheck = forceReloadCheck;
}
public ExpressionEngine getConversionExpressionEngine()
{
return conversionExpressionEngine;
}
public void setConversionExpressionEngine(
ExpressionEngine conversionExpressionEngine)
{
this.conversionExpressionEngine = conversionExpressionEngine;
}
public boolean isIgnoreReloadExceptions()
{
return ignoreReloadExceptions;
}
public void setIgnoreReloadExceptions(boolean ignoreReloadExceptions)
{
this.ignoreReloadExceptions = ignoreReloadExceptions;
}
public void addConfiguration(AbstractConfiguration config, String name,
String at)
{
if (config == null)
{
throw new IllegalArgumentException(
""Added configuration must not be null!"");
}
if (name != null && namedConfigurations.containsKey(name))
{
throw new ConfigurationRuntimeException(
""A configuration with the name '""
+ name
+ ""' already exists in this combined configuration!"");
}
ConfigData cd = new ConfigData(config, name, at);
if (getLogger().isDebugEnabled())
{
getLogger().debug(""Adding configuration "" + config + "" with name "" + name);
}
configurations.add(cd);
if (name != null)
{
namedConfigurations.put(name, config);
}
config.addConfigurationListener(this);
invalidate();
}
public void addConfiguration(AbstractConfiguration config, String name)
{
addConfiguration(config, name, null);
}
public void addConfiguration(AbstractConfiguration config)
{
addConfiguration(config, null, null);
}
public int getNumberOfConfigurations()
{
return configurations.size();
}
public Configuration getConfiguration(int index)
{
ConfigData cd = configurations.get(index);
return cd.getConfiguration();
}
public Configuration getConfiguration(String name)
{
return namedConfigurations.get(name);
}
public List<AbstractConfiguration> getConfigurations()
{
List<AbstractConfiguration> list = new ArrayList<AbstractConfiguration>(configurations.size());
for (ConfigData cd : configurations)
{
list.add(cd.getConfiguration());
}
return list;
}
public List<String> getConfigurationNameList()
{
List<String> list = new ArrayList<String>(configurations.size());
for (ConfigData cd : configurations)
{
list.add(cd.getName());
}
return list;
}
public boolean removeConfiguration(Configuration config)
{
for (int index = 0; index < getNumberOfConfigurations(); index++)
{
if (configurations.get(index).getConfiguration() == config)
{
removeConfigurationAt(index);
return true;
}
}
return false;
}
public Configuration removeConfigurationAt(int index)
{
ConfigData cd = configurations.remove(index);
if (cd.getName() != null)
{
namedConfigurations.remove(cd.getName());
}
cd.getConfiguration().removeConfigurationListener(this);
invalidate();
return cd.getConfiguration();
}
public Configuration removeConfiguration(String name)
{
Configuration conf = getConfiguration(name);
if (conf != null)
{
removeConfiguration(conf);
}
return conf;
}
public Set<String> getConfigurationNames()
{
return namedConfigurations.keySet();
}
public void invalidate()
{
reloadRequired = true;
fireEvent(EVENT_COMBINED_INVALIDATE, null, null, false);
}
public void configurationChanged(ConfigurationEvent event)
{
if (event.getType() == AbstractFileConfiguration.EVENT_CONFIG_CHANGED)
{
fireEvent(event.getType(), event.getPropertyName(), event.getPropertyValue(), event.isBeforeUpdate());
}
else if (!event.isBeforeUpdate())
{
invalidate();
}
}
@Override
public ConfigurationNode getRootNode()
{
synchronized (getReloadLock())
{
if (reloadRequired || combinedRoot == null)
{
combinedRoot = constructCombinedNode();
reloadRequired = false;
}
return combinedRoot;
}
}
@Override
public void clear()
{
fireEvent(EVENT_CLEAR, null, null, true);
configurations = new ArrayList<ConfigData>();
namedConfigurations = new HashMap<String, AbstractConfiguration>();
fireEvent(EVENT_CLEAR, null, null, false);
invalidate();
}
@Override
public Object clone()
{
CombinedConfiguration copy = (CombinedConfiguration) super.clone();
copy.clear();
for (ConfigData cd : configurations)
{
copy.addConfiguration((AbstractConfiguration) ConfigurationUtils
.cloneConfiguration(cd.getConfiguration()), cd.getName(),
cd.getAt());
}
copy.setRootNode(new DefaultConfigurationNode());
return copy;
}
public Configuration getSource(String key)
{
if (key == null)
{
throw new IllegalArgumentException(""Key must not be null!"");
}
List<ConfigurationNode> nodes = fetchNodeList(key);
if (nodes.isEmpty())
{
return null;
}
Iterator<ConfigurationNode> it = nodes.iterator();
Configuration source = findSourceConfiguration(it.next());
while (it.hasNext())
{
Configuration src = findSourceConfiguration(it.next());
if (src != source)
{
throw new IllegalArgumentException(""The key "" + key
+ "" is defined by multiple sources!"");
}
}
return source;
}
@Override
protected List<ConfigurationNode> fetchNodeList(String key)
{
if (isForceReloadCheck())
{
performReloadCheck();
}
return super.fetchNodeList(key);
}
protected void performReloadCheck()
{
for (ConfigData cd : configurations)
{
try
{
cd.getConfiguration().getProperty(PROP_RELOAD_CHECK);
}
catch (Exception ex)
{
if (!ignoreReloadExceptions)
{
throw new ConfigurationRuntimeException(ex);
}
}
}
}
private ConfigurationNode constructCombinedNode()
{
if (getNumberOfConfigurations() < 1)
{
if (getLogger().isDebugEnabled())
{
getLogger().debug(""No configurations defined for "" + this);
}
return new ViewNode();
}
else
{
Iterator<ConfigData> it = configurations.iterator();
ConfigurationNode node = it.next().getTransformedRoot();
while (it.hasNext())
{
node = getNodeCombiner().combine(node,
it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled())
{
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}
private Configuration findSourceConfiguration(ConfigurationNode node)
{
synchronized (getReloadLock())
{
ConfigurationNode root = null;
ConfigurationNode current = node;
while (current != null)
{
root = current;
current = current.getParentNode();
}
for (ConfigData cd : configurations)
{
if (root == cd.getRootNode())
{
return cd.getConfiguration();
}
}
}
return this;
","@Override
protected List<ConfigurationNode> fetchNodeList(String key) {
if (isForceReloadCheck()) {
performReloadCheck();
}
return super.fetchNodeList(key);
}","@Override
protected List<ConfigurationNode> fetchNodeList(String key) {
if (isForceReloadCheck()) {
performReloadCheck();
}
return super.fetchNodeList(key);
}"
4637,Multithreaded correctness,JLM_JSR166_UTILCONCURRENT_MONITORENTER,FP,configuration,1848,"synchronized (configs)
","private CombinedConfiguration getCurrentConfig() {
String key = localSubst.replace(keyPattern);
CombinedConfiguration config = configs.get(key);
if (config == null) {
synchronized (configs) {
config = configs.get(key);
if (config == null) {
config = new CombinedConfiguration(getNodeCombiner());
if (loggerName != null) {
Log log = LogFactory.getLog(loggerName);
if (log != null) {
config.setLogger(log);
}
}
config.setIgnoreReloadExceptions(isIgnoreReloadExceptions());
config.setExpressionEngine(this.getExpressionEngine());
config.setDelimiterParsingDisabled(isDelimiterParsingDisabled());
config.setConversionExpressionEngine(getConversionExpressionEngine());
config.setListDelimiter(getListDelimiter());
for (ConfigurationErrorListener listener : getErrorListeners()) {
config.addErrorListener(listener);
}
for (ConfigurationListener listener : getConfigurationListeners()) {
config.addConfigurationListener(listener);
}
config.setForceReloadCheck(isForceReloadCheck());
for (ConfigData data : configurations) {
config.addConfiguration(data.getConfiguration(), data.getName(), data.getAt());
}
configs.put(key, config);
}
}
}
if (getLogger().isDebugEnabled()) {
getLogger().debug(""Returning config for "" + key + "": "" + config);
}
return config;
}","private CombinedConfiguration getCurrentConfig() {
String stringVar1 = stringLiteral2;
CombinedConfiguration combinedconfigurationVar3 = combinedconfigurationLiteral4;
if (combinedconfigurationVar3 == null) {
synchronized (configs) {
combinedconfigurationVar3 = configs.get(stringVar1);
if (combinedconfigurationVar3 == null) {
combinedconfigurationVar3 = new CombinedConfiguration(getNodeCombiner());
if (loggerName != null) {
Log logVar5 = logLiteral6;
if (logVar5 != null) {
combinedconfigurationVar3.setLogger(logVar5);
}
}
combinedconfigurationVar3.setIgnoreReloadExceptions(isIgnoreReloadExceptions());
combinedconfigurationVar3.setExpressionEngine(this.getExpressionEngine());
combinedconfigurationVar3.setDelimiterParsingDisabled(isDelimiterParsingDisabled());
combinedconfigurationVar3.setConversionExpressionEngine(getConversionExpressionEngine());
combinedconfigurationVar3.setListDelimiter(getListDelimiter());
for (ConfigurationErrorListener configurationerrorlistenerVar7 : getErrorListeners()) {
combinedconfigurationVar3.addErrorListener(configurationerrorlistenerVar7);
}
for (ConfigurationListener configurationerrorlistenerVar7 : getConfigurationListeners()) {
combinedconfigurationVar3.addConfigurationListener(configurationerrorlistenerVar7);
}
combinedconfigurationVar3.setForceReloadCheck(isForceReloadCheck());
for (ConfigData configdataVar8 : configurations) {
combinedconfigurationVar3.addConfiguration(configdataVar8.getConfiguration(), configdataVar8.getName(), configdataVar8.getAt());
}
configs.put(stringVar1, combinedconfigurationVar3);
}
}
}
if (getLogger().isDebugEnabled()) {
getLogger().debug(""Returning config for "" + stringVar1 + "": "" + combinedconfigurationVar3);
}
return combinedconfigurationVar3;
}"
4673,DODGY_CODE,REC_CATCH_EXCEPTION,FP,configuration,1884,"catch (Exception ex)
","private static Class<?> getDefaultClass(Object bean, String propName) {
try {
PropertyDescriptor desc = PropertyUtils.getPropertyDescriptor(bean, propName);
if (desc == null) {
return null;
}
return desc.getPropertyType();
} catch (Exception ex) {
return null;
}
}","private static Class<?> getDefaultClass(Object bean, String propName) {
try {
PropertyDescriptor propertydescriptorVar1 = propertydescriptorLiteral2;
if (propertydescriptorVar1 == null) {
return null;
}
return propertydescriptorVar1.getPropertyType();
} catch (Exception ex) {
return null;
}
}"
4683,PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,configuration,1894,"{
public InputSource resolveEntity(String publicId, String systemId)
{
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
","public void load(Reader in) throws ConfigurationException {
if (!(getRootNode() instanceof PListNode)) {
initRoot();
}
EntityResolver resolver = new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
};
XMLPropertyListHandler handler = new XMLPropertyListHandler(getRootNode());
try {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}","public void load(Reader in) throws ConfigurationException {
if (!(getRootNode() instanceof PListNode)) {
initRoot();
}
EntityResolver entityresolverVar1 = entityresolverLiteral2;
XMLPropertyListHandler xmlpropertylisthandlerVar3 = xmlpropertylisthandlerLiteral4;
try {
SAXParserFactory saxparserfactoryVar5 = saxparserfactoryLiteral6;
saxparserfactoryVar5.setValidating(true);
SAXParser saxparserVar7 = saxparserLiteral8;
saxparserVar7.getXMLReader().setEntityResolver(entityresolverVar1);
saxparserVar7.getXMLReader().setContentHandler(xmlpropertylisthandlerVar3);
saxparserVar7.getXMLReader().parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}"
4695,BAD_PRACTICE,SE_BAD_FIELD,FP,configuration,1906,private ConfigurationNode node;,private ConfigurationNode node;,private ConfigurationNode configurationnodeVar1;
4732,BAD_PRACTICE,SE_BAD_FIELD,FP,configuration,1943,private ConfigurationNode rootNode;,private ConfigurationNode rootNode;,private ConfigurationNode configurationnodeVar1;
4744,SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,configuration,1955,"pstmt = getConnection().prepareStatement(statement);
","protected PreparedStatement createStatement(String sql, boolean nameCol) throws SQLException {
String statement;
if (nameCol && configurationNameColumn != null) {
StringBuilder buf = new StringBuilder(sql);
buf.append("" AND "").append(configurationNameColumn).append(""=?"");
statement = buf.toString();
} else {
statement = sql;
}
pstmt = getConnection().prepareStatement(statement);
return pstmt;
}","protected PreparedStatement createStatement(String sql, boolean nameCol) throws SQLException {
String stringVar1;
if (nameCol && configurationNameColumn != null) {
StringBuilder stringbuilderVar2 = stringbuilderLiteral3;
stringbuilderVar2.append("" AND "").append(configurationNameColumn).append(""=?"");
stringVar1 = stringbuilderVar2.toString();
} else {
stringVar1 = sql;
}
pstmt = getConnection().prepareStatement(stringVar1);
return pstmt;
}"
4759,Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,configuration,1970,private ConfigurationSourceData sourceData;,private ConfigurationSourceData sourceData;,private ConfigurationSourceData configurationsourcedataVar1;
4768,PERFORMANCE,DM_NUMBER_CTOR,FP,configuration,1979,"return new Short(n.shortValue());
","public static Short toShort(Object value) throws ConversionException {
Number n = toNumber(value, Short.class);
if (n instanceof Short) {
return (Short) n;
} else {
return new Short(n.shortValue());
}
}","public static Short toShort(Object value) throws ConversionException {
Number numberVar1 = numberLiteral2;
if (numberVar1 instanceof Short) {
return (Short) numberVar1;
} else {
return new Short(numberVar1.shortValue());
}
}"
4775,PERFORMANCE,URF_UNREAD_FIELD,FP,configuration,1986,private final String protocol;,private final String protocol;,private final String stringVar1;
4781,DODGY_CODE,REC_CATCH_EXCEPTION,FP,configuration,1992,"catch (Exception e)
","public void read(Reader in) throws ConfigurationException {
if (!(getRootNode() instanceof PListNode)) {
initRoot();
}
EntityResolver resolver = new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
};
XMLPropertyListHandler handler = new XMLPropertyListHandler(getRootNode());
try {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}","public void read(Reader in) throws ConfigurationException {
if (!(getRootNode() instanceof PListNode)) {
initRoot();
}
EntityResolver entityresolverVar1 = entityresolverLiteral2;
XMLPropertyListHandler xmlpropertylisthandlerVar3 = xmlpropertylisthandlerLiteral4;
try {
SAXParserFactory saxparserfactoryVar5 = saxparserfactoryLiteral6;
saxparserfactoryVar5.setValidating(true);
SAXParser saxparserVar7 = saxparserLiteral8;
saxparserVar7.getXMLReader().setEntityResolver(entityresolverVar1);
saxparserVar7.getXMLReader().setContentHandler(xmlpropertylisthandlerVar3);
saxparserVar7.getXMLReader().parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}"
4788,DODGY_CODE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,FP,configuration,1999,"staticCatalog = catalog;
","@Override
public org.apache.xml.resolver.Catalog getPrivateCatalog() {
org.apache.xml.resolver.Catalog catalog = staticCatalog;
if (catalog == null || !getUseStaticCatalog()) {
try {
catalog = new Catalog();
catalog.setCatalogManager(this);
catalog.setupReaders();
catalog.loadSystemCatalogs();
} catch (Exception ex) {
ex.printStackTrace();
}
if (getUseStaticCatalog()) {
staticCatalog = catalog;
}
}
return catalog;
}","@Override
public org.apache.xml.resolver.Catalog getPrivateCatalog() {
org.apache.xml.resolver.Catalog org.apache.xml.resolver.catalogVar1 = org.apache.xml.resolver.catalogLiteral2;
if (org.apache.xml.resolver.catalogVar1 == null || !getUseStaticCatalog()) {
try {
org.apache.xml.resolver.catalogVar1 = new Catalog();
org.apache.xml.resolver.catalogVar1.setCatalogManager(this);
org.apache.xml.resolver.catalogVar1.setupReaders();
org.apache.xml.resolver.catalogVar1.loadSystemCatalogs();
} catch (Exception ex) {
ex.printStackTrace();
}
if (getUseStaticCatalog()) {
staticCatalog = org.apache.xml.resolver.catalogVar1;
}
}
return org.apache.xml.resolver.catalogVar1;
}"
4807,I18N,DM_DEFAULT_ENCODING,FP,configuration,2018,"dump(configuration, new PrintWriter(out));
","public static void dump(Configuration configuration, PrintStream out) {
dump(configuration, new PrintWriter(out));
}","public static void dump(Configuration configuration, PrintStream out) {
dump(configuration, new PrintWriter(out));
}"
4812,DODGY_CODE,REC_CATCH_EXCEPTION,FP,configuration,2023,"catch (Exception ex)
","private static Class<?> getDefaultClass(Object bean, String propName) {
try {
PropertyDescriptor desc = BEAN_UTILS_BEAN.getPropertyUtils().getPropertyDescriptor(bean, propName);
if (desc == null) {
return null;
}
return desc.getPropertyType();
} catch (Exception ex) {
return null;
}
}","private static Class<?> getDefaultClass(Object bean, String propName) {
try {
PropertyDescriptor propertydescriptorVar1 = propertydescriptorLiteral2;
if (propertydescriptorVar1 == null) {
return null;
}
return propertydescriptorVar1.getPropertyType();
} catch (Exception ex) {
return null;
}
}"
4834,DODGY_CODE,REC_CATCH_EXCEPTION,FP,configuration,2045,"catch (Exception e)
","@Override
public void read(Reader in) throws ConfigurationException {
EntityResolver resolver = new EntityResolver() {
@Override
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
};
XMLPropertyListHandler handler = new XMLPropertyListHandler();
try {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
getNodeModel().mergeRoot(handler.getResultBuilder().createNode(), null, null, null, this);
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}","@Override
public void read(Reader in) throws ConfigurationException {
EntityResolver entityresolverVar1 = entityresolverLiteral2;
XMLPropertyListHandler xmlpropertylisthandlerVar3 = xmlpropertylisthandlerLiteral4;
try {
SAXParserFactory saxparserfactoryVar5 = saxparserfactoryLiteral6;
saxparserfactoryVar5.setValidating(true);
SAXParser saxparserVar7 = saxparserLiteral8;
saxparserVar7.getXMLReader().setEntityResolver(entityresolverVar1);
saxparserVar7.getXMLReader().setContentHandler(xmlpropertylisthandlerVar3);
saxparserVar7.getXMLReader().parse(new InputSource(in));
getNodeModel().mergeRoot(xmlpropertylisthandlerVar3.getResultBuilder().createNode(), null, null, null, this);
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}"
5148,I18N,DM_DEFAULT_ENCODING,FP,configuration,2359,"writer = new OutputStreamWriter(out);
","public void save(OutputStream out, String encoding) throws ConfigurationException {
Writer writer = null;
if (encoding != null) {
try {
writer = new OutputStreamWriter(out, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (writer == null) {
writer = new OutputStreamWriter(out);
}
save(writer);
}","public void save(OutputStream out, String encoding) throws ConfigurationException {
Writer writerVar1 = writerLiteral2;
if (encoding != null) {
try {
writerVar1 = new OutputStreamWriter(out, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (writerVar1 == null) {
writerVar1 = new OutputStreamWriter(out);
}
save(writerVar1);
}"
5157,I18N,DM_DEFAULT_ENCODING,FP,configuration,2368,"dump(configuration, new PrintWriter(out));
","public static void dump(Configuration configuration, PrintStream out) {
dump(configuration, new PrintWriter(out));
}","public static void dump(Configuration configuration, PrintStream out) {
dump(configuration, new PrintWriter(out));
}"
5159,BAD_PRACTICE,SE_BAD_FIELD,FP,configuration,2370,protected Configuration configuration;,protected Configuration configuration;,protected Configuration configurationVar1;
5164,EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,FP,configuration,2375,"ResultSet rs = pstmt.executeQuery();
","public boolean isEmpty() {
boolean empty = true;
StringBuffer query = new StringBuffer(""SELECT count(*) FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
ResultSet rs = pstmt.executeQuery();
if (rs.next()) {
empty = rs.getInt(1) == 0;
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(conn, pstmt);
}
return empty;
}","public boolean isEmpty() {
boolean booleanVar1 = booleanLiteral2;
StringBuffer stringbufferVar3 = stringbufferLiteral4;
if (nameColumn != null) {
stringbufferVar3.append("" WHERE "" + nameColumn + ""=?"");
}
Connection connectionVar5 = connectionLiteral6;
PreparedStatement preparedstatementVar7 = connectionLiteral6;
try {
connectionVar5 = getConnection();
preparedstatementVar7 = connectionVar5.prepareStatement(stringbufferVar3.toString());
if (nameColumn != null) {
preparedstatementVar7.setString(1, name);
}
ResultSet resultsetVar8 = resultsetLiteral9;
if (resultsetVar8.next()) {
booleanVar1 = resultsetVar8.getInt(1) == 0;
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(connectionVar5, preparedstatementVar7);
}
return booleanVar1;
}"
5167,SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,configuration,2378,"pstmt = conn.prepareStatement(query.toString());
","public Iterator getKeys() {
Collection keys = new ArrayList();
StringBuffer query = new StringBuffer(""SELECT DISTINCT "" + keyColumn + "" FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
ResultSet rs = pstmt.executeQuery();
while (rs.next()) {
keys.add(rs.getString(1));
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(conn, pstmt);
}
return keys.iterator();
}","public Iterator getKeys() {
Collection collectionVar1 = collectionLiteral2;
StringBuffer stringbufferVar3 = stringbufferLiteral4;
if (nameColumn != null) {
stringbufferVar3.append("" WHERE "" + nameColumn + ""=?"");
}
Connection connectionVar5 = connectionLiteral6;
PreparedStatement preparedstatementVar7 = connectionLiteral6;
try {
connectionVar5 = getConnection();
preparedstatementVar7 = connectionVar5.prepareStatement(stringbufferVar3.toString());
if (nameColumn != null) {
preparedstatementVar7.setString(1, name);
}
ResultSet resultsetVar8 = resultsetLiteral9;
while (resultsetVar8.next()) {
collectionVar1.add(resultsetVar8.getString(1));
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(connectionVar5, preparedstatementVar7);
}
return collectionVar1.iterator();
}"
5168,SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,configuration,2379,"pstmt = conn.prepareStatement(query.toString());
","protected void clearPropertyDirect(String key) {
StringBuffer query = new StringBuffer(""DELETE FROM "" + table + "" WHERE "" + keyColumn + ""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
pstmt.executeUpdate();
commitIfRequired(conn);
} catch (SQLException e) {
fireError(EVENT_CLEAR_PROPERTY, key, null, e);
} finally {
close(conn, pstmt);
}
}","protected void clearPropertyDirect(String key) {
StringBuffer stringbufferVar1 = stringbufferLiteral2;
if (nameColumn != null) {
stringbufferVar1.append("" AND "" + nameColumn + ""=?"");
}
Connection connectionVar3 = connectionLiteral4;
PreparedStatement preparedstatementVar5 = connectionLiteral4;
try {
connectionVar3 = getConnection();
preparedstatementVar5 = connectionVar3.prepareStatement(stringbufferVar1.toString());
preparedstatementVar5.setString(1, key);
if (nameColumn != null) {
preparedstatementVar5.setString(2, name);
}
preparedstatementVar5.executeUpdate();
commitIfRequired(connectionVar3);
} catch (SQLException e) {
fireError(EVENT_CLEAR_PROPERTY, key, null, e);
} finally {
close(connectionVar3, preparedstatementVar5);
}
}"
5183,BAD_PRACTICE,SE_NO_SERIALVERSIONID,FP,configuration,2394,"super();
reloadLock = new Lock(LOCK_NAME);
}
public HierarchicalReloadableConfiguration(Object lock)
{
super();
reloadLock = lock == null ? new Lock(LOCK_NAME) : lock;
}
public HierarchicalReloadableConfiguration(HierarchicalConfiguration c)
{
super(c);
reloadLock = new Lock(LOCK_NAME);
}
public Object getReloadLock()
{
return reloadLock;
",private final Object reloadLock;,private final Object objectVar1;
5194,BAD_PRACTICE,SE_NO_SERIALVERSIONID,FP,configuration,2405,"private static ThreadLocal recursive = new ThreadLocal()
{
protected synchronized Object initialValue()
{
return Boolean.FALSE;
}
};
private final AbstractHierarchicalFileConfiguration config;
private final String path;
private final boolean trailing;
private boolean init;
public PatternSubtreeConfigurationWrapper(AbstractHierarchicalFileConfiguration config, String path)
{
this.config = config;
this.path = path;
this.trailing = path.endsWith(""/"");
this.init = true;
}
public Object getReloadLock()
{
return config.getReloadLock();
}
public void addProperty(String key, Object value)
{
config.addProperty(makePath(key), value);
}
public void clear()
{
getConfig().clear();
}
public void clearProperty(String key)
{
config.clearProperty(makePath(key));
}
public boolean containsKey(String key)
{
return config.containsKey(makePath(key));
}
public BigDecimal getBigDecimal(String key, BigDecimal defaultValue)
{
return config.getBigDecimal(makePath(key), defaultValue);
}
public BigDecimal getBigDecimal(String key)
{
return config.getBigDecimal(makePath(key));
}
public BigInteger getBigInteger(String key, BigInteger defaultValue)
{
return config.getBigInteger(makePath(key), defaultValue);
}
public BigInteger getBigInteger(String key)
{
return config.getBigInteger(makePath(key));
}
public boolean getBoolean(String key, boolean defaultValue)
{
return config.getBoolean(makePath(key), defaultValue);
}
public Boolean getBoolean(String key, Boolean defaultValue)
{
return config.getBoolean(makePath(key), defaultValue);
}
public boolean getBoolean(String key)
{
return config.getBoolean(makePath(key));
}
public byte getByte(String key, byte defaultValue)
{
return config.getByte(makePath(key), defaultValue);
}
public Byte getByte(String key, Byte defaultValue)
{
return config.getByte(makePath(key), defaultValue);
}
public byte getByte(String key)
{
return config.getByte(makePath(key));
}
public double getDouble(String key, double defaultValue)
{
return config.getDouble(makePath(key), defaultValue);
}
public Double getDouble(String key, Double defaultValue)
{
return config.getDouble(makePath(key), defaultValue);
}
public double getDouble(String key)
{
return config.getDouble(makePath(key));
}
public float getFloat(String key, float defaultValue)
{
return config.getFloat(makePath(key), defaultValue);
}
public Float getFloat(String key, Float defaultValue)
{
return config.getFloat(makePath(key), defaultValue);
}
public float getFloat(String key)
{
return config.getFloat(makePath(key));
}
public int getInt(String key, int defaultValue)
{
return config.getInt(makePath(key), defaultValue);
}
public int getInt(String key)
{
return config.getInt(makePath(key));
}
public Integer getInteger(String key, Integer defaultValue)
{
return config.getInteger(makePath(key), defaultValue);
}
public Iterator getKeys()
{
return config.getKeys(makePath());
}
public Iterator getKeys(String prefix)
{
return config.getKeys(makePath(prefix));
}
public List getList(String key, List defaultValue)
{
return config.getList(makePath(key), defaultValue);
}
public List getList(String key)
{
return config.getList(makePath(key));
}
public long getLong(String key, long defaultValue)
{
return config.getLong(makePath(key), defaultValue);
}
public Long getLong(String key, Long defaultValue)
{
return config.getLong(makePath(key), defaultValue);
}
public long getLong(String key)
{
return config.getLong(makePath(key));
}
public Properties getProperties(String key)
{
return config.getProperties(makePath(key));
}
public Object getProperty(String key)
{
return config.getProperty(makePath(key));
}
public short getShort(String key, short defaultValue)
{
return config.getShort(makePath(key), defaultValue);
}
public Short getShort(String key, Short defaultValue)
{
return config.getShort(makePath(key), defaultValue);
}
public short getShort(String key)
{
return config.getShort(makePath(key));
}
public String getString(String key, String defaultValue)
{
return config.getString(makePath(key), defaultValue);
}
public String getString(String key)
{
return config.getString(makePath(key));
}
public String[] getStringArray(String key)
{
return config.getStringArray(makePath(key));
}
public boolean isEmpty()
{
return getConfig().isEmpty();
}
public void setProperty(String key, Object value)
{
getConfig().setProperty(key, value);
}
public Configuration subset(String prefix)
{
return getConfig().subset(prefix);
}
public Node getRoot()
{
return getConfig().getRoot();
}
public void setRoot(Node node)
{
if (init)
{
getConfig().setRoot(node);
}
else
{
super.setRoot(node);
}
}
public ConfigurationNode getRootNode()
{
return getConfig().getRootNode();
}
public void setRootNode(ConfigurationNode rootNode)
{
if (init)
{
getConfig().setRootNode(rootNode);
}
else
{
super.setRootNode(rootNode);
}
}
public ExpressionEngine getExpressionEngine()
{
return config.getExpressionEngine();
}
public void setExpressionEngine(ExpressionEngine expressionEngine)
{
if (init)
{
config.setExpressionEngine(expressionEngine);
}
else
{
super.setExpressionEngine(expressionEngine);
}
}
public void addNodes(String key, Collection nodes)
{
getConfig().addNodes(key, nodes);
}
public SubnodeConfiguration configurationAt(String key, boolean supportUpdates)
{
return config.configurationAt(makePath(key), supportUpdates);
}
public SubnodeConfiguration configurationAt(String key)
{
return config.configurationAt(makePath(key));
}
public List configurationsAt(String key)
{
return config.configurationsAt(makePath(key));
}
public void clearTree(String key)
{
config.clearTree(makePath(key));
}
public int getMaxIndex(String key)
{
return config.getMaxIndex(makePath(key));
}
public Configuration interpolatedConfiguration()
{
return getConfig().interpolatedConfiguration();
}
public void addConfigurationListener(ConfigurationListener l)
{
getConfig().addConfigurationListener(l);
}
public boolean removeConfigurationListener(ConfigurationListener l)
{
return getConfig().removeConfigurationListener(l);
}
public Collection getConfigurationListeners()
{
return getConfig().getConfigurationListeners();
}
public void clearConfigurationListeners()
{
getConfig().clearConfigurationListeners();
}
public void addErrorListener(ConfigurationErrorListener l)
{
getConfig().addErrorListener(l);
}
public boolean removeErrorListener(ConfigurationErrorListener l)
{
return getConfig().removeErrorListener(l);
}
public void clearErrorListeners()
{
getConfig().clearErrorListeners();
}
public void save(Writer writer) throws ConfigurationException
{
config.save(writer);
}
public void load(Reader reader) throws ConfigurationException
{
config.load(reader);
}
public Collection getErrorListeners()
{
return getConfig().getErrorListeners();
}
protected Object resolveContainerStore(String key)
{
if (((Boolean) recursive.get()).booleanValue())
{
return null;
}
recursive.set(Boolean.TRUE);
try
{
return super.resolveContainerStore(key);
}
finally
{
recursive.set(Boolean.FALSE);
}
}
private HierarchicalConfiguration getConfig()
{
return config.configurationAt(makePath());
}
private String makePath()
{
String pathPattern = trailing ? path.substring(0, path.length() - 1) : path;
return getSubstitutor().replace(pathPattern);
}
private String makePath(String item)
{
String pathPattern;
if ((item.length() == 0 || item.startsWith(""/"")) && trailing)
{
pathPattern = path.substring(0, path.length() - 1);
}
else  if (!item.startsWith(""/"") || !trailing)
{
pathPattern = path + ""/"";
}
else
{
pathPattern = path;
}
return getSubstitutor().replace(pathPattern) + item;
","public void setRootNode(ConfigurationNode rootNode) {
if (init) {
getConfig().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}","public void setRootNode(ConfigurationNode rootNode) {
if (init) {
getConfig().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}"
5211,BAD_PRACTICE,SE_BAD_FIELD,FP,configuration,2422,private EntityResolver entityResolver = new DefaultEntityResolver();,private EntityResolver entityResolver = new DefaultEntityResolver();,private EntityResolver entityresolverVar1 = entityresolverLiteral2;
5213,BAD_PRACTICE,SE_INNER_CLASS,FP,configuration,2424,"{
super(name);
setReference(elem);
}
public void setValue(Object value)
{
super.setValue(value);
if (getReference() != null && document != null)
{
if (isAttribute())
{
updateAttribute();
}
else
{
updateElement(value);
}
}
}
protected void removeReference()
{
if (getReference() != null)
{
Element element = (Element) getReference();
if (isAttribute())
{
updateAttribute();
}
else
{
org.w3c.dom.Node parentElem = element.getParentNode();
if (parentElem != null)
{
parentElem.removeChild(element);
}
}
}
}
private void updateElement(Object value)
{
Text txtNode = findTextNodeForUpdate();
if (value == null)
{
if (txtNode != null)
{
((Element) getReference()).removeChild(txtNode);
}
}
else
{
if (txtNode == null)
{
String newValue = isDelimiterParsingDisabled() ? value.toString()
: PropertyConverter.escapeDelimiters(value.toString(), getListDelimiter());
txtNode = document.createTextNode(newValue);
if (((Element) getReference()).getFirstChild() != null)
{
((Element) getReference()).insertBefore(txtNode,
((Element) getReference()).getFirstChild());
}
else
{
((Element) getReference()).appendChild(txtNode);
}
}
else
{
String newValue = isDelimiterParsingDisabled() ? value.toString()
: PropertyConverter.escapeDelimiters(value.toString(), getListDelimiter());
txtNode.setNodeValue(newValue);
}
}
}
private void updateAttribute()
{
XMLBuilderVisitor.updateAttribute(getParent(), getName(), getListDelimiter(),
isAttributeSplittingDisabled());
}
private Text findTextNodeForUpdate()
{
Text result = null;
Element elem = (Element) getReference();
NodeList children = elem.getChildNodes();
Collection textNodes = new ArrayList();
for (int i = 0; i < children.getLength(); i++)
{
org.w3c.dom.Node nd = children.item(i);
if (nd instanceof Text)
{
if (result == null)
{
result = (Text) nd;
}
else
{
textNodes.add(nd);
}
}
}
if (result instanceof CDATASection)
{
textNodes.add(result);
result = null;
}
for (Iterator it = textNodes.iterator(); it.hasNext();)
{
elem.removeChild((org.w3c.dom.Node) it.next());
}
return result;
","private XMLNode convertToXMLNode(ConfigurationNode node) {
if (node instanceof XMLNode) {
return (XMLNode) node;
}
XMLNode nd = (XMLNode) createNode(node.getName());
nd.setValue(node.getValue());
nd.setAttribute(node.isAttribute());
for (Iterator it = node.getChildren().iterator(); it.hasNext(); ) {
nd.addChild(convertToXMLNode((ConfigurationNode) it.next()));
}
for (Iterator it = node.getAttributes().iterator(); it.hasNext(); ) {
nd.addAttribute(convertToXMLNode((ConfigurationNode) it.next()));
}
return nd;
}","private XMLNode convertToXMLNode(ConfigurationNode node) {
if (node instanceof XMLNode) {
return (XMLNode) node;
}
XMLNode xmlnodeVar1 = xmlnodeLiteral2;
xmlnodeVar1.setValue(node.getValue());
xmlnodeVar1.setAttribute(node.isAttribute());
for (Iterator iteratorVar6 = iteratorLiteral7; iteratorVar3.hasNext(); ) {
xmlnodeVar1.addChild(convertToXMLNode((ConfigurationNode) iteratorVar3.next()));
}
for (Iterator iteratorVar6 = iteratorLiteral8; iteratorVar3.hasNext(); ) {
xmlnodeVar1.addAttribute(convertToXMLNode((ConfigurationNode) iteratorVar3.next()));
}
return xmlnodeVar1;
}"
5217,PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,configuration,2428,"{
public InputSource resolveEntity(String publicId, String systemId)
{
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
","public void startElement(String uri, String localName, String qName, Attributes attrs) {
if (""comment"".equals(qName)) {
inCommentElement = true;
}
if (""entry"".equals(qName)) {
key = attrs.getValue(""key"");
inEntryElement = true;
}
}","public void startElement(String uri, String localName, String qName, Attributes attrs) {
if (""comment"".equals(qName)) {
inCommentElement = true;
}
if (""entry"".equals(qName)) {
key = attrs.getValue(""key"");
inEntryElement = true;
}
}"
5219,BAD_PRACTICE,SE_NO_SERIALVERSIONID,FP,configuration,2430,"public static class Variables extends ArrayList
{
public Variable getVariable()
{
if (size() > 0)
{
return (Variable) get(size() - 1);
}
else
{
return null;
","public void setValue(Object value) throws ConfigurationRuntimeException {
try {
if (!(value instanceof String)) {
this.value = value;
return;
}
String val = (String) value;
String name = StringUtils.removeStartIgnoreCase(val, CLASS);
Class clazz = ClassUtils.getClass(name);
if (name.length() == val.length()) {
this.value = clazz.newInstance();
} else {
this.value = clazz;
}
} catch (Exception e) {
throw new ConfigurationRuntimeException(""Unable to create "" + value, e);
}
}","public void setValue(Object value) throws ConfigurationRuntimeException {
try {
if (!(value instanceof String)) {
this.value = value;
return;
}
String stringVar1 = stringLiteral2;
String stringVar3 = stringLiteral4;
Class classVar5 = classLiteral6;
if (stringVar3.length() == stringVar1.length()) {
this.value = classVar5.newInstance();
} else {
this.value = classVar5;
}
} catch (Exception e) {
throw new ConfigurationRuntimeException(""Unable to create "" + value, e);
}
}"
5220,DODGY_CODE,REC_CATCH_EXCEPTION,FP,configuration,2431,"catch (Exception e)
","public void setValue(Object value) throws ConfigurationRuntimeException {
try {
if (!(value instanceof String)) {
this.value = value;
return;
}
String val = (String) value;
String name = StringUtils.removeStartIgnoreCase(val, CLASS);
Class clazz = ClassUtils.getClass(name);
if (name.length() == val.length()) {
this.value = clazz.newInstance();
} else {
this.value = clazz;
}
} catch (Exception e) {
throw new ConfigurationRuntimeException(""Unable to create "" + value, e);
}
}","public void setValue(Object value) throws ConfigurationRuntimeException {
try {
if (!(value instanceof String)) {
this.value = value;
return;
}
String stringVar1 = stringLiteral2;
String stringVar3 = stringLiteral4;
Class classVar5 = classLiteral6;
if (stringVar3.length() == stringVar1.length()) {
this.value = classVar5.newInstance();
} else {
this.value = classVar5;
}
} catch (Exception e) {
throw new ConfigurationRuntimeException(""Unable to create "" + value, e);
}
}"
5233,DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,configuration,2444,"result = (List) namedNodes.get(name);
","public List getSubNodes(String name) {
if (name == null) {
return getSubNodes();
}
List result;
if (nodes == null) {
result = null;
} else {
result = (List) namedNodes.get(name);
}
return (result == null) ? Collections.EMPTY_LIST : Collections.unmodifiableList(result);
}","public List getSubNodes(String name) {
if (name == null) {
return getSubNodes();
}
List listVar1;
if (nodes == null) {
listVar1 = null;
} else {
listVar1 = (List) namedNodes.get(name);
}
return (listVar1 == null) ? Collections.EMPTY_LIST : Collections.unmodifiableList(listVar1);
}"
5249,PERFORMANCE,DM_NUMBER_CTOR,FP,configuration,2460,"return getShort(key, new Short(defaultValue)).shortValue();
","public short getShort(String key, short defaultValue) {
return getShort(key, new Short(defaultValue)).shortValue();
}","public short getShort(String key, short defaultValue) {
return getShort(key, new Short(defaultValue)).shortValue();
}"
5253,PERFORMANCE,DM_FP_NUMBER_CTOR,FP,configuration,2464,"return getDouble(key, new Double(defaultValue)).doubleValue();
","public double getDouble(String key, double defaultValue) {
return getDouble(key, new Double(defaultValue)).doubleValue();
}","public double getDouble(String key, double defaultValue) {
return getDouble(key, new Double(defaultValue)).doubleValue();
}"
5265,BAD_PRACTICE,SE_BAD_FIELD,FP,configuration,2476,protected Configuration configuration;,protected Configuration configuration;,protected Configuration configurationVar1;
5304,PERFORMANCE,DM_FP_NUMBER_CTOR,FP,configuration,2515,"return new Float(n.floatValue());
","public static Float toFloat(Object value) throws ConversionException {
Number n = toNumber(value, Float.class);
if (n instanceof Float) {
return (Float) n;
} else {
return new Float(n.floatValue());
}
}","public static Float toFloat(Object value) throws ConversionException {
Number numberVar1 = numberLiteral2;
if (numberVar1 instanceof Float) {
return (Float) numberVar1;
} else {
return new Float(numberVar1.floatValue());
}
}"
5311,DODGY_CODE,REC_CATCH_EXCEPTION,FP,configuration,2522,"catch (Exception ex)
","@Override
public ConfigurationNode getRootNode() {
if (getSubnodeKey() != null) {
try {
List<ConfigurationNode> nodes = getParent().fetchNodeList(getSubnodeKey());
if (nodes.size() != 1) {
setSubnodeKey(null);
} else {
ConfigurationNode currentRoot = nodes.get(0);
if (currentRoot != super.getRootNode()) {
fireEvent(EVENT_SUBNODE_CHANGED, null, null, true);
setRootNode(currentRoot);
fireEvent(EVENT_SUBNODE_CHANGED, null, null, false);
}
return currentRoot;
}
} catch (Exception ex) {
setSubnodeKey(null);
}
}
return super.getRootNode();
}","@Override
public ConfigurationNode getRootNode() {
if (getSubnodeKey() != null) {
try {
List<ConfigurationNode> list<configurationnode>Var1 = list<configurationnode>Literal2;
if (list<configurationnode>Var1.size() != 1) {
setSubnodeKey(null);
} else {
ConfigurationNode configurationnodeVar3 = configurationnodeLiteral4;
if (configurationnodeVar3 != super.getRootNode()) {
fireEvent(EVENT_SUBNODE_CHANGED, null, null, true);
setRootNode(configurationnodeVar3);
fireEvent(EVENT_SUBNODE_CHANGED, null, null, false);
}
return configurationnodeVar3;
}
} catch (Exception ex) {
setSubnodeKey(null);
}
}
return super.getRootNode();
}"
5323,PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,configuration,2534,"{
public InputSource resolveEntity(String publicId, String systemId)
{
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
","@Override
public void load(Reader in) throws ConfigurationException {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setNamespaceAware(false);
factory.setValidating(true);
try {
SAXParser parser = factory.newSAXParser();
XMLReader xmlReader = parser.getXMLReader();
xmlReader.setEntityResolver(new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlReader.setContentHandler(new XMLPropertiesHandler());
xmlReader.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}","@Override
public void load(Reader in) throws ConfigurationException {
SAXParserFactory saxparserfactoryVar1 = saxparserfactoryLiteral2;
saxparserfactoryVar1.setNamespaceAware(false);
saxparserfactoryVar1.setValidating(true);
try {
SAXParser saxparserVar3 = saxparserLiteral4;
XMLReader xmlreaderVar5 = xmlreaderLiteral6;
xmlreaderVar5.setEntityResolver(new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlreaderVar5.setContentHandler(new XMLPropertiesHandler());
xmlreaderVar5.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}"
5380,DODGY_CODE,REC_CATCH_EXCEPTION,FP,configuration,2591,"catch (final Exception e)
","static Object toInternetAddress(final Object value) throws ConversionException {
if (value.getClass().getName().equals(INTERNET_ADDRESS_CLASSNAME)) {
return value;
} else if (value instanceof String) {
try {
final Constructor<?> ctor = Class.forName(INTERNET_ADDRESS_CLASSNAME).getConstructor(String.class);
return ctor.newInstance(value);
} catch (final Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"", e);
}
} else {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"");
}
}","static Object toInternetAddress(final Object value) throws ConversionException {
if (value.getClass().getName().equals(INTERNET_ADDRESS_CLASSNAME)) {
return value;
} else if (value instanceof String) {
try {
final Constructor<?> constructor<?>Var1 = constructor<?>Literal2;
return constructor<?>Var1.newInstance(value);
} catch (final Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"", e);
}
} else {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"");
}
}"
5422,I18N,DM_DEFAULT_ENCODING,FP,configuration,2633,"dump(configuration, new PrintWriter(out));
","public static void dump(Configuration configuration, PrintStream out) {
dump(configuration, new PrintWriter(out));
}","public static void dump(Configuration configuration, PrintStream out) {
dump(configuration, new PrintWriter(out));
}"
5456,DODGY_CODE,REC_CATCH_EXCEPTION,FP,configuration,2667,"catch (Exception e)
","public void load(Reader in) throws ConfigurationException {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setNamespaceAware(false);
factory.setValidating(true);
try {
SAXParser parser = factory.newSAXParser();
XMLReader xmlReader = parser.getXMLReader();
xmlReader.setEntityResolver(new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlReader.setContentHandler(new XMLPropertiesHandler());
xmlReader.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
// todo: support included properties ?
}","public void load(Reader in) throws ConfigurationException {
SAXParserFactory saxparserfactoryVar1 = saxparserfactoryLiteral2;
saxparserfactoryVar1.setNamespaceAware(false);
saxparserfactoryVar1.setValidating(true);
try {
SAXParser saxparserVar3 = saxparserLiteral4;
XMLReader xmlreaderVar5 = xmlreaderLiteral6;
xmlreaderVar5.setEntityResolver(new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlreaderVar5.setContentHandler(new XMLPropertiesHandler());
xmlreaderVar5.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
// todo: support included properties ?
}"
5547,I18N,DM_DEFAULT_ENCODING,FP,configuration,2758,"this(encoding == null ? new java.io.InputStreamReader(dstream) : new java.io.InputStreamReader(dstream, encoding), startline, startcolumn, buffersize);
","public SimpleCharStream(java.io.InputStream dstream, String encoding, int startline, int startcolumn, int buffersize) throws java.io.UnsupportedEncodingException {
this(encoding == null ? new java.io.InputStreamReader(dstream) : new java.io.InputStreamReader(dstream, encoding), startline, startcolumn, buffersize);
}","public SimpleCharStream(java.io.InputStream dstream, String encoding, int startline, int startcolumn, int buffersize) throws java.io.UnsupportedEncodingException {
this(encoding == null ? new java.io.InputStreamReader(dstream) : new java.io.InputStreamReader(dstream, encoding), startline, startcolumn, buffersize);
}"
5559,Multithreaded correctness,DL_SYNCHRONIZATION_ON_SHARED_CONSTANT,FP,configuration,2770,"synchronized (INIT_GATE)
","public static void stopMonitor() {
synchronized (INIT_GATE) {
if (fm != null) {
fm.stop();
fm = null;
}
for (Map.Entry<FileObject, VFSFileMonitorReloadingStrategy> entry : strategies.entrySet()) {
FileObject file = entry.getKey();
file.getFileSystem().removeListener(file, entry.getValue());
}
strategies.clear();
}
}","public static void stopMonitor() {
synchronized (INIT_GATE) {
if (fm != null) {
fm.stop();
fm = null;
}
for (Map.Entry<FileObject, VFSFileMonitorReloadingStrategy> map.entry<fileobject,vfsfilemonitorreloadingstrategy>Var1 : strategies.entrySet()) {
FileObject fileobjectVar2 = fileobjectLiteral3;
fileobjectVar2.getFileSystem().removeListener(fileobjectVar2, map.entry<fileobject,vfsfilemonitorreloadingstrategy>Var1.getValue());
}
strategies.clear();
}
}"
5570,BAD_PRACTICE,SE_BAD_FIELD,FP,configuration,2781,private ConfigurationNode node;,private ConfigurationNode node;,private ConfigurationNode configurationnodeVar1;
5755,DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,FP,configuration,2966,"if (file != null && file.exists())
","public static URL locate(String base, String name) {
if (log.isDebugEnabled()) {
StringBuffer buf = new StringBuffer();
buf.append(""ConfigurationUtils.locate(): base is "").append(base);
buf.append("", name is "").append(name);
log.debug(buf.toString());
}
if (name == null) {
return null;
}
URL url = null;
try {
if (base == null) {
url = new URL(name);
} else {
URL baseURL = new URL(base);
url = new URL(baseURL, name);
InputStream in = null;
try {
in = url.openStream();
} finally {
if (in != null) {
in.close();
}
}
}
log.debug(""Loading configuration from the URL "" + url);
} catch (IOException e) {
url = null;
}
if (url == null) {
File file = new File(name);
if (file.isAbsolute() && file.exists()) {
try {
url = toURL(file);
log.debug(""Loading configuration from the absolute path "" + name);
} catch (MalformedURLException e) {
log.warn(""Could not obtain URL from file"", e);
}
}
}
if (url == null) {
try {
File file = constructFile(base, name);
if (file != null && file.exists()) {
url = toURL(file);
}
if (url != null) {
log.debug(""Loading configuration from the path "" + file);
}
} catch (MalformedURLException e) {
log.warn(""Could not obtain URL from file"", e);
}
}
if (url == null) {
try {
File file = constructFile(System.getProperty(""user.home""), name);
if (file != null && file.exists()) {
url = toURL(file);
}
if (url != null) {
log.debug(""Loading configuration from the home path "" + file);
}
} catch (MalformedURLException e) {
log.warn(""Could not obtain URL from file"", e);
}
}
if (url == null) {
url = locateFromClasspath(name);
}
return url;
}","public static URL locate(String base, String name) {
if (log.isDebugEnabled()) {
StringBuffer stringbufferVar1 = stringbufferLiteral2;
stringbufferVar1.append(""ConfigurationUtils.locate(): base is "").append(base);
stringbufferVar1.append("", name is "").append(name);
log.debug(stringbufferVar1.toString());
}
if (name == null) {
return null;
}
URL urlVar3 = urlLiteral4;
try {
if (base == null) {
urlVar3 = new URL(name);
} else {
URL urlVar5 = urlLiteral6;
urlVar3 = new URL(urlVar5, name);
InputStream inputstreamVar7 = urlLiteral4;
try {
inputstreamVar7 = urlVar3.openStream();
} finally {
if (inputstreamVar7 != null) {
inputstreamVar7.close();
}
}
}
log.debug(""Loading configuration from the URL "" + urlVar3);
} catch (IOException e) {
urlVar3 = null;
}
if (urlVar3 == null) {
File fileVar8 = fileLiteral9;
if (fileVar8.isAbsolute() && fileVar8.exists()) {
try {
urlVar3 = toURL(fileVar8);
log.debug(""Loading configuration from the absolute path "" + name);
} catch (MalformedURLException e) {
log.warn(""Could not obtain URL from file"", e);
}
}
}
if (urlVar3 == null) {
try {
File fileVar8 = fileLiteral10;
if (fileVar8 != null && fileVar8.exists()) {
urlVar3 = toURL(fileVar8);
}
if (urlVar3 != null) {
log.debug(""Loading configuration from the path "" + fileVar8);
}
} catch (MalformedURLException e) {
log.warn(""Could not obtain URL from file"", e);
}
}
if (urlVar3 == null) {
try {
File fileVar8 = fileLiteral11;
if (fileVar8 != null && fileVar8.exists()) {
urlVar3 = toURL(fileVar8);
}
if (urlVar3 != null) {
log.debug(""Loading configuration from the home path "" + fileVar8);
}
} catch (MalformedURLException e) {
log.warn(""Could not obtain URL from file"", e);
}
}
if (urlVar3 == null) {
urlVar3 = locateFromClasspath(name);
}
return urlVar3;
}"
5758,DODGY_CODE,REC_CATCH_EXCEPTION,FP,configuration,2969,"catch (Exception e)
","static URL toURL(File file) throws MalformedURLException {
if (SystemUtils.isJavaVersionAtLeast(JAVA_1_4)) {
try {
Method toURI = file.getClass().getMethod(""toURI"", (Class[]) null);
Object uri = toURI.invoke(file, (Class[]) null);
Method toURL = uri.getClass().getMethod(""toURL"", (Class[]) null);
URL url = (URL) toURL.invoke(uri, (Class[]) null);
return url;
} catch (Exception e) {
throw new MalformedURLException(e.getMessage());
}
} else {
return file.toURL();
}
}","static URL toURL(File file) throws MalformedURLException {
if (SystemUtils.isJavaVersionAtLeast(JAVA_1_4)) {
try {
Method methodVar1 = methodLiteral2;
Object objectVar3 = objectLiteral4;
Method methodVar5 = methodLiteral6;
URL urlVar7 = urlLiteral8;
return urlVar7;
} catch (Exception e) {
throw new MalformedURLException(e.getMessage());
}
} else {
return file.toURL();
}
}"
5759,BAD_PRACTICE,SE_BAD_FIELD,FP,configuration,2970,protected Configuration configuration;,protected Configuration configuration;,protected Configuration configurationVar1;
5765,EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,FP,configuration,2976,"ResultSet rs = pstmt.executeQuery();
","public boolean containsKey(String key) {
boolean found = false;
StringBuffer query = new StringBuffer(""SELECT * FROM "" + table + "" WHERE "" + keyColumn + ""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
ResultSet rs = pstmt.executeQuery();
found = rs.next();
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
close(conn, pstmt);
}
return found;
}","public boolean containsKey(String key) {
boolean booleanVar1 = booleanLiteral2;
StringBuffer stringbufferVar3 = stringbufferLiteral4;
if (nameColumn != null) {
stringbufferVar3.append("" AND "" + nameColumn + ""=?"");
}
Connection connectionVar5 = connectionLiteral6;
PreparedStatement preparedstatementVar7 = connectionLiteral6;
try {
connectionVar5 = getConnection();
preparedstatementVar7 = connectionVar5.prepareStatement(stringbufferVar3.toString());
preparedstatementVar7.setString(1, key);
if (nameColumn != null) {
preparedstatementVar7.setString(2, name);
}
ResultSet resultsetVar8 = resultsetLiteral9;
booleanVar1 = resultsetVar8.next();
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
close(connectionVar5, preparedstatementVar7);
}
return booleanVar1;
}"
5792,DODGY_CODE,REC_CATCH_EXCEPTION,FP,configuration,3003,"catch (Exception e)
","static Object toEnum(Object value, Class cls) throws ConversionException {
if (value.getClass().equals(cls)) {
return value;
} else if (value instanceof String) {
try {
Method valueOfMethod = cls.getMethod(""valueOf"", new Class[] { String.class });
return valueOfMethod.invoke(null, new Object[] { value });
} catch (Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a "" + cls.getName());
}
} else if (value instanceof Number) {
try {
Method valuesMethod = cls.getMethod(""values"", new Class[] {});
Object valuesArray = valuesMethod.invoke(null, new Object[] {});
return Array.get(valuesArray, ((Number) value).intValue());
} catch (Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a "" + cls.getName());
}
} else {
throw new ConversionException(""The value "" + value + "" can't be converted to a "" + cls.getName());
}
}","static Object toEnum(Object value, Class cls) throws ConversionException {
if (value.getClass().equals(cls)) {
return value;
} else if (value instanceof String) {
try {
Method methodVar1 = methodLiteral2;
return methodVar1.invoke(null, new Object[] { value });
} catch (Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a "" + cls.getName());
}
} else if (value instanceof Number) {
try {
Method methodVar3 = methodLiteral4;
Object objectVar5 = objectLiteral6;
return Array.get(objectVar5, ((Number) value).intValue());
} catch (Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a "" + cls.getName());
}
} else {
throw new ConversionException(""The value "" + value + "" can't be converted to a "" + cls.getName());
}
}"
5809,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,configuration,3020,"Object value = null;
if (jj_2_1(2)) {
value = Array();
{if (true) return value;}
} else {
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
case DICT_BEGIN:
value = Dictionary();
{if (true) return value;}
break;
case STRING:
case QUOTED_STRING:
value = String();
{if (true) return value;}
break;
case DATA:
value = Data();
{if (true) return value;}
break;
case DATE:
value = Date();
{if (true) return value;}
break;
default:
jj_la1[2] = jj_gen;
jj_consume_token(-1);
throw new ParseException();
","final public Object Element() throws ParseException {
Object value = null;
if (jj_2_1(2)) {
value = Array();
{
if (true)
return value;
}
} else {
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case DICT_BEGIN:
value = Dictionary();
{
if (true)
return value;
}
break;
case STRING:
case QUOTED_STRING:
value = String();
{
if (true)
return value;
}
break;
case DATA:
value = Data();
{
if (true)
return value;
}
break;
case DATE:
value = Date();
{
if (true)
return value;
}
break;
default:
jj_la1[2] = jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
}
throw new Error(""Missing return statement in function"");
}","final public Object Element() throws ParseException {
Object objectVar1 = objectLiteral2;
if (jj_2_1(2)) {
objectVar1 = Array();
{
if (true)
return objectVar1;
}
} else {
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case DICT_BEGIN:
objectVar1 = Dictionary();
{
if (true)
return objectVar1;
}
break;
case STRING:
case QUOTED_STRING:
objectVar1 = String();
{
if (true)
return objectVar1;
}
break;
case DATA:
objectVar1 = Data();
{
if (true)
return objectVar1;
}
break;
case DATE:
objectVar1 = Date();
{
if (true)
return objectVar1;
}
break;
default:
jj_la1[2] = jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
}
throw new Error(""Missing return statement in function"");
}"
5818,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,configuration,3029,"Token token = null;
String value = null;
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
case QUOTED_STRING:
token = jj_consume_token(QUOTED_STRING);
{if (true) return unescapeQuotes(removeQuotes(token.image));}
break;
case STRING:
token = jj_consume_token(STRING);
{if (true) return token.image;}
break;
default:
jj_la1[5] = jj_gen;
jj_consume_token(-1);
throw new ParseException();
","final public String String() throws ParseException {
Token token = null;
String value = null;
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case QUOTED_STRING:
token = jj_consume_token(QUOTED_STRING);
{
if (true)
return unescapeQuotes(removeQuotes(token.image));
}
break;
case STRING:
token = jj_consume_token(STRING);
{
if (true)
return token.image;
}
break;
default:
jj_la1[5] = jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
throw new Error(""Missing return statement in function"");
}","final public String String() throws ParseException {
Token tokenVar1 = tokenLiteral2;
String stringVar3 = tokenLiteral2;
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case QUOTED_STRING:
tokenVar1 = jj_consume_token(QUOTED_STRING);
{
if (true)
return unescapeQuotes(removeQuotes(tokenVar1.image));
}
break;
case STRING:
tokenVar1 = jj_consume_token(STRING);
{
if (true)
return tokenVar1.image;
}
break;
default:
jj_la1[5] = jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
throw new Error(""Missing return statement in function"");
}"
5826,PERFORMANCE,UPM_UNCALLED_PRIVATE_METHOD,FP,configuration,3037,"jjCheckNAdd(jjnextStates[start]);
jjCheckNAdd(jjnextStates[start + 1]);
}
","private final void jjCheckNAddStates(int start) {
jjCheckNAdd(jjnextStates[start]);
jjCheckNAdd(jjnextStates[start + 1]);
}","private final void jjCheckNAddStates(int start) {
jjCheckNAdd(jjnextStates[start]);
jjCheckNAdd(jjnextStates[start + 1]);
}"
5834,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,configuration,3045,"ReInit(dstream, startline, startcolumn, 4096);
}
","public void ReInit(java.io.InputStream dstream, int startline, int startcolumn) {
ReInit(dstream, startline, startcolumn, 4096);
}","public void ReInit(java.io.InputStream dstream, int startline, int startcolumn) {
ReInit(dstream, startline, startcolumn, 4096);
}"
5835,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,configuration,3046,"tokenBegin = -1;
char c = readChar();
tokenBegin = bufpos;
return c;
","public char BeginToken() throws java.io.IOException {
tokenBegin = -1;
char c = readChar();
tokenBegin = bufpos;
return c;
}","public char BeginToken() throws java.io.IOException {
tokenBegin = -1;
char charVar1 = charLiteral2;
tokenBegin = bufpos;
return charVar1;
}"
5846,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,configuration,3057,"return(""Lexical error at line "" +
","protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {
return (""Lexical error at line "" + errorLine + "", column "" + errorColumn + "".  Encountered: "" + (EOFSeen ? ""<EOF> "" : (""\"""" + addEscapes(String.valueOf(curChar)) + ""\"""") + "" ("" + (int) curChar + ""), "") + ""after : \"""" + addEscapes(errorAfter) + ""\"""");
}","protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {
return (""Lexical error at line "" + errorLine + "", column "" + errorColumn + "".  Encountered: "" + (EOFSeen ? ""<EOF> "" : (""\"""" + addEscapes(String.valueOf(curChar)) + ""\"""") + "" ("" + (int) curChar + ""), "") + ""after : \"""" + addEscapes(errorAfter) + ""\"""");
}"
5852,DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,configuration,3063,"return (configuration.getURL() != null) ? fileFromURL(configuration
","protected File getFile() {
return (configuration.getURL() != null) ? fileFromURL(configuration.getURL()) : configuration.getFile();
}","protected File getFile() {
return (configuration.getURL() != null) ? fileFromURL(configuration.getURL()) : configuration.getFile();
}"
5858,BAD_PRACTICE,SE_BAD_FIELD,FP,configuration,3069,private ConfigurationNode node;,private ConfigurationNode node;,private ConfigurationNode configurationnodeVar1;
5943,DODGY_CODE,RI_REDUNDANT_INTERFACES,FP,configuration,3154,"public class CombinedConfiguration extends BaseHierarchicalConfiguration implements
EventListener<ConfigurationEvent>, Cloneable
{
public static final EventType<ConfigurationEvent> COMBINED_INVALIDATE =
new EventType<>(ConfigurationEvent.ANY,
""COMBINED_INVALIDATE"");
private static final DefaultExpressionEngine AT_ENGINE = DefaultExpressionEngine.INSTANCE;
private static final NodeCombiner DEFAULT_COMBINER = new UnionCombiner();
private static final ImmutableNode EMPTY_ROOT = new ImmutableNode.Builder()
.create();
private NodeCombiner nodeCombiner;
private List<ConfigData> configurations;
private Map<String, Configuration> namedConfigurations;
private ExpressionEngine conversionExpressionEngine;
private boolean upToDate;
public CombinedConfiguration(NodeCombiner comb)
{
nodeCombiner = (comb != null) ? comb : DEFAULT_COMBINER;
initChildCollections();
}
public CombinedConfiguration()
{
this(null);
}
public NodeCombiner getNodeCombiner()
{
beginRead(true);
try
{
return nodeCombiner;
}
finally
{
endRead();
}
}
public void setNodeCombiner(NodeCombiner nodeCombiner)
{
if (nodeCombiner == null)
{
throw new IllegalArgumentException(
""Node combiner must not be null!"");
}
beginWrite(true);
try
{
this.nodeCombiner = nodeCombiner;
invalidateInternal();
}
finally
{
endWrite();
}
}
public ExpressionEngine getConversionExpressionEngine()
{
beginRead(true);
try
{
return conversionExpressionEngine;
}
finally
{
endRead();
}
}
public void setConversionExpressionEngine(
ExpressionEngine conversionExpressionEngine)
{
beginWrite(true);
try
{
this.conversionExpressionEngine = conversionExpressionEngine;
}
finally
{
endWrite();
}
}
public void addConfiguration(Configuration config, String name,
String at)
{
if (config == null)
{
throw new IllegalArgumentException(
""Added configuration must not be null!"");
}
beginWrite(true);
try
{
if (name != null && namedConfigurations.containsKey(name))
{
throw new ConfigurationRuntimeException(
""A configuration with the name '""
+ name
+ ""' already exists in this combined configuration!"");
}
ConfigData cd = new ConfigData(config, name, at);
if (getLogger().isDebugEnabled())
{
getLogger()
.debug(""Adding configuration "" + config + "" with name ""
+ name);
}
configurations.add(cd);
if (name != null)
{
namedConfigurations.put(name, config);
}
invalidateInternal();
}
finally
{
endWrite();
}
registerListenerAt(config);
}
public void addConfiguration(Configuration config, String name)
{
addConfiguration(config, name, null);
}
public void addConfiguration(Configuration config)
{
addConfiguration(config, null, null);
}
public int getNumberOfConfigurations()
{
beginRead(true);
try
{
return getNumberOfConfigurationsInternal();
}
finally
{
endRead();
}
}
public Configuration getConfiguration(int index)
{
beginRead(true);
try
{
ConfigData cd = configurations.get(index);
return cd.getConfiguration();
}
finally
{
endRead();
}
}
public Configuration getConfiguration(String name)
{
beginRead(true);
try
{
return namedConfigurations.get(name);
}
finally
{
endRead();
}
}
public List<Configuration> getConfigurations()
{
beginRead(true);
try
{
List<Configuration> list =
new ArrayList<>(getNumberOfConfigurationsInternal());
for (ConfigData cd : configurations)
{
list.add(cd.getConfiguration());
}
return list;
}
finally
{
endRead();
}
}
public List<String> getConfigurationNameList()
{
beginRead(true);
try
{
List<String> list = new ArrayList<>(getNumberOfConfigurationsInternal());
for (ConfigData cd : configurations)
{
list.add(cd.getName());
}
return list;
}
finally
{
endRead();
}
}
public boolean removeConfiguration(Configuration config)
{
for (int index = 0; index < getNumberOfConfigurations(); index++)
{
if (configurations.get(index).getConfiguration() == config)
{
removeConfigurationAt(index);
return true;
}
}
return false;
}
public Configuration removeConfigurationAt(int index)
{
ConfigData cd = configurations.remove(index);
if (cd.getName() != null)
{
namedConfigurations.remove(cd.getName());
}
unregisterListenerAt(cd.getConfiguration());
invalidateInternal();
return cd.getConfiguration();
}
public Configuration removeConfiguration(String name)
{
Configuration conf = getConfiguration(name);
if (conf != null)
{
removeConfiguration(conf);
}
return conf;
}
public Set<String> getConfigurationNames()
{
beginRead(true);
try
{
return namedConfigurations.keySet();
}
finally
{
endRead();
}
}
public void invalidate()
{
beginWrite(true);
try
{
invalidateInternal();
}
finally
{
endWrite();
}
}
@Override
public void onEvent(ConfigurationEvent event)
{
if (event.isBeforeUpdate())
{
invalidate();
}
}
@Override
protected void clearInternal()
{
unregisterListenerAtChildren();
initChildCollections();
invalidateInternal();
}
@Override
public Object clone()
{
beginRead(false);
try
{
CombinedConfiguration copy = (CombinedConfiguration) super.clone();
copy.initChildCollections();
for (ConfigData cd : configurations)
{
copy.addConfiguration(ConfigurationUtils.cloneConfiguration(cd
.getConfiguration()), cd.getName(), cd.getAt());
}
return copy;
}
finally
{
endRead();
}
}
public Configuration getSource(String key)
{
if (key == null)
{
throw new IllegalArgumentException(""Key must not be null!"");
}
Set<Configuration> sources = getSources(key);
if (sources.isEmpty())
{
return null;
}
Iterator<Configuration> iterator = sources.iterator();
Configuration source = iterator.next();
if (iterator.hasNext())
{
throw new IllegalArgumentException(""The key "" + key
+ "" is defined by multiple sources!"");
}
return source;
}
public Set<Configuration> getSources(String key)
{
beginRead(false);
try
{
List<QueryResult<ImmutableNode>> results = fetchNodeList(key);
Set<Configuration> sources = new HashSet<>();
for (QueryResult<ImmutableNode> result : results)
{
Set<Configuration> resultSources =
findSourceConfigurations(result.getNode());
if (resultSources.isEmpty())
{
sources.add(this);
}
else
{
sources.addAll(resultSources);
}
}
return sources;
}
finally
{
endRead();
}
}
@Override
protected void beginRead(boolean optimize)
{
if (optimize)
{
super.beginRead(true);
return;
}
boolean lockObtained = false;
do
{
super.beginRead(false);
if (isUpToDate())
{
lockObtained = true;
}
else
{
endRead();
beginWrite(false); 
endWrite();
}
} while (!lockObtained);
}
@Override
protected void beginWrite(boolean optimize)
{
super.beginWrite(true);
if (optimize)
{
return;
}
try
{
if (!isUpToDate())
{
getSubConfigurationParentModel().replaceRoot(
constructCombinedNode(), this);
upToDate = true;
}
}
catch (RuntimeException rex)
{
endWrite();
throw rex;
}
}
private boolean isUpToDate()
{
return upToDate;
}
private void invalidateInternal()
{
upToDate = false;
fireEvent(COMBINED_INVALIDATE, null, null, false);
}
private void initChildCollections()
{
configurations = new ArrayList<>();
namedConfigurations = new HashMap<>();
}
private ImmutableNode constructCombinedNode()
{
if (getNumberOfConfigurationsInternal() < 1)
{
if (getLogger().isDebugEnabled())
{
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
}
else
{
Iterator<ConfigData> it = configurations.iterator();
ImmutableNode node = it.next().getTransformedRoot();
while (it.hasNext())
{
node = nodeCombiner.combine(node,
it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled())
{
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}
private Set<Configuration> findSourceConfigurations(ImmutableNode node)
{
Set<Configuration> result = new HashSet<>();
FindNodeVisitor<ImmutableNode> visitor =
new FindNodeVisitor<>(node);
for (ConfigData cd : configurations)
{
NodeTreeWalker.INSTANCE.walkBFS(cd.getRootNode(), visitor,
getModel().getNodeHandler());
if (visitor.isFound())
{
result.add(cd.getConfiguration());
visitor.reset();
}
}
return result;
}
private void registerListenerAt(Configuration configuration)
{
if (configuration instanceof EventSource)
{
((EventSource) configuration).addEventListener(
ConfigurationEvent.ANY, this);
}
}
private void unregisterListenerAt(Configuration configuration)
{
if (configuration instanceof EventSource)
{
((EventSource) configuration).removeEventListener(
ConfigurationEvent.ANY, this);
}
}
private void unregisterListenerAtChildren()
{
if (configurations != null)
{
for (ConfigData child : configurations)
{
unregisterListenerAt(child.getConfiguration());
}
}
}
private int getNumberOfConfigurationsInternal()
{
return configurations.size();
","private ImmutableNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
} else {
Iterator<ConfigData> it = configurations.iterator();
ImmutableNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = nodeCombiner.combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}","private ImmutableNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
} else {
Iterator<ConfigData> iterator<configdata>Var1 = iterator<configdata>Literal2;
ImmutableNode immutablenodeVar3 = immutablenodeLiteral4;
while (iterator<configdata>Var1.hasNext()) {
immutablenodeVar3 = nodeCombiner.combine(immutablenodeVar3, iterator<configdata>Var1.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream bytearrayoutputstreamVar5 = bytearrayoutputstreamLiteral6;
PrintStream printstreamVar7 = printstreamLiteral8;
TreeUtils.printTree(printstreamVar7, immutablenodeVar3);
getLogger().debug(bytearrayoutputstreamVar5.toString());
}
return immutablenodeVar3;
}
}"
5945,I18N,DM_DEFAULT_ENCODING,FP,configuration,3156,"PrintStream stream = new PrintStream(os);
","private ImmutableNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
} else {
Iterator<ConfigData> it = configurations.iterator();
ImmutableNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = nodeCombiner.combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}","private ImmutableNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
} else {
Iterator<ConfigData> iterator<configdata>Var1 = iterator<configdata>Literal2;
ImmutableNode immutablenodeVar3 = immutablenodeLiteral4;
while (iterator<configdata>Var1.hasNext()) {
immutablenodeVar3 = nodeCombiner.combine(immutablenodeVar3, iterator<configdata>Var1.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream bytearrayoutputstreamVar5 = bytearrayoutputstreamLiteral6;
PrintStream printstreamVar7 = printstreamLiteral8;
TreeUtils.printTree(printstreamVar7, immutablenodeVar3);
getLogger().debug(bytearrayoutputstreamVar5.toString());
}
return immutablenodeVar3;
}
}"
5962,PERFORMANCE,DM_FP_NUMBER_CTOR,FP,configuration,3173,"return new Float(n.floatValue());
","public static Float toFloat(Object value) throws ConversionException {
Number n = toNumber(value, Float.class);
if (n instanceof Float) {
return (Float) n;
} else {
return new Float(n.floatValue());
}
}","public static Float toFloat(Object value) throws ConversionException {
Number numberVar1 = numberLiteral2;
if (numberVar1 instanceof Float) {
return (Float) numberVar1;
} else {
return new Float(numberVar1.floatValue());
}
}"
5964,PERFORMANCE,DM_FP_NUMBER_CTOR,FP,configuration,3175,"return new Double(n.doubleValue());
","public static Double toDouble(Object value) throws ConversionException {
Number n = toNumber(value, Double.class);
if (n instanceof Double) {
return (Double) n;
} else {
return new Double(n.doubleValue());
}
}","public static Double toDouble(Object value) throws ConversionException {
Number numberVar1 = numberLiteral2;
if (numberVar1 instanceof Double) {
return (Double) numberVar1;
} else {
return new Double(numberVar1.doubleValue());
}
}"
5972,I18N,DM_CONVERT_CASE,FP,configuration,3183,"String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
log.warn(""Cannot access property '"" + key + ""'! Ignoring."", ex);
}
}","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String stringVar1 = stringLiteral2;
Class<?>[] class<?>ArrayVar3 = class<?>ArrayLiteral4;
class<?>ArrayVar3[0] = FileSystemOptions.class;
class<?>ArrayVar3[1] = value.getClass();
try {
Method methodVar5 = methodLiteral6;
Object[] objectArrayVar7 = objectArrayLiteral8;
objectArrayVar7[0] = options;
objectArrayVar7[1] = value;
methodVar5.invoke(builder, objectArrayVar7);
} catch (Exception ex) {
log.warn(""Cannot access property '"" + key + ""'! Ignoring."", ex);
}
}"
6173,I18N,DM_DEFAULT_ENCODING,FP,configuration,3384,"PrintStream stream = new PrintStream(os);
","private ImmutableNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
} else {
Iterator<ConfigData> it = configurations.iterator();
ImmutableNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = nodeCombiner.combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}","private ImmutableNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
} else {
Iterator<ConfigData> iterator<configdata>Var1 = iterator<configdata>Literal2;
ImmutableNode immutablenodeVar3 = immutablenodeLiteral4;
while (iterator<configdata>Var1.hasNext()) {
immutablenodeVar3 = nodeCombiner.combine(immutablenodeVar3, iterator<configdata>Var1.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream bytearrayoutputstreamVar5 = bytearrayoutputstreamLiteral6;
PrintStream printstreamVar7 = printstreamLiteral8;
TreeUtils.printTree(printstreamVar7, immutablenodeVar3);
getLogger().debug(bytearrayoutputstreamVar5.toString());
}
return immutablenodeVar3;
}
}"
6179,PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,configuration,3390,"{
@Override
public InputSource resolveEntity(String publicId, String systemId)
{
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
","@Override
public void read(Reader in) throws ConfigurationException {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setNamespaceAware(false);
factory.setValidating(true);
try {
SAXParser parser = factory.newSAXParser();
XMLReader xmlReader = parser.getXMLReader();
xmlReader.setEntityResolver(new EntityResolver() {
@Override
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlReader.setContentHandler(new XMLPropertiesHandler());
xmlReader.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}","@Override
public void read(Reader in) throws ConfigurationException {
SAXParserFactory saxparserfactoryVar1 = saxparserfactoryLiteral2;
saxparserfactoryVar1.setNamespaceAware(false);
saxparserfactoryVar1.setValidating(true);
try {
SAXParser saxparserVar3 = saxparserLiteral4;
XMLReader xmlreaderVar5 = xmlreaderLiteral6;
xmlreaderVar5.setEntityResolver(new EntityResolver() {
@Override
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlreaderVar5.setContentHandler(new XMLPropertiesHandler());
xmlreaderVar5.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}"
6191,DODGY_CODE,REC_CATCH_EXCEPTION,FP,configuration,3402,"catch (Exception e)
","static Object toInternetAddress(Object value) throws ConversionException {
if (value.getClass().getName().equals(INTERNET_ADDRESS_CLASSNAME)) {
return value;
} else if (value instanceof String) {
try {
Constructor<?> ctor = Class.forName(INTERNET_ADDRESS_CLASSNAME).getConstructor(new Class[] { String.class });
return ctor.newInstance(new Object[] { value });
} catch (Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"", e);
}
} else {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"");
}
}","static Object toInternetAddress(Object value) throws ConversionException {
if (value.getClass().getName().equals(INTERNET_ADDRESS_CLASSNAME)) {
return value;
} else if (value instanceof String) {
try {
Constructor<?> constructor<?>Var1 = constructor<?>Literal2;
return constructor<?>Var1.newInstance(new Object[] { value });
} catch (Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"", e);
}
} else {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"");
}
}"
6202,BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,configuration,3413,"parent.mkdirs();
","private void createPath(File file) {
if (file != null) {
if (!file.exists()) {
File parent = file.getParentFile();
if (parent != null && !parent.exists()) {
parent.mkdirs();
}
}
}
}","private void createPath(File file) {
if (file != null) {
if (!file.exists()) {
File fileVar1 = fileLiteral2;
if (fileVar1 != null && !fileVar1.exists()) {
fileVar1.mkdirs();
}
}
}
}"
6218,DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,FP,configuration,3429,"String name = (url == null) ? fileName : url.toString();
","@Override
public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
String base = ((CatalogManager) catalogManager).getBaseDir();
@SuppressWarnings(""unchecked"")
Vector<String> catalogs = catalogManager.getCatalogFiles();
if (catalogs != null) {
for (int count = 0; count < catalogs.size(); count++) {
String fileName = catalogs.elementAt(count);
URL url = null;
InputStream is = null;
try {
url = locate(fs, base, fileName);
if (url != null) {
is = fs.getInputStream(url);
}
} catch (ConfigurationException ce) {
String name = (url == null) ? fileName : url.toString();
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + name + "". "" + ce.getMessage());
}
if (is != null) {
String mimeType = fileNameMap.getContentTypeFor(fileName);
try {
if (mimeType != null) {
parseCatalog(mimeType, is);
continue;
}
} catch (Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + fileName + "". "" + ex.getMessage());
} finally {
is.close();
}
}
parseCatalog(base, fileName);
}
}
}","@Override
public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
String stringVar1 = stringLiteral2;
@SuppressWarnings(""unchecked"")
Vector<String> vector<string>Var3 = vector<string>Literal4;
if (vector<string>Var3 != null) {
for (int intVar16 = intLiteral17; intVar5 < intLiteral1; intVar5++) {
String stringVar7 = stringLiteral8;
URL urlVar9 = urlLiteral10;
InputStream inputstreamVar11 = urlLiteral10;
try {
urlVar9 = locate(fs, stringVar1, stringVar7);
if (urlVar9 != null) {
inputstreamVar11 = fs.getInputStream(urlVar9);
}
} catch (ConfigurationException ce) {
String stringVar12 = stringLiteral13;
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + stringVar12 + "". "" + ce.getMessage());
}
if (inputstreamVar11 != null) {
String stringVar14 = stringLiteral15;
try {
if (stringVar14 != null) {
parseCatalog(stringVar14, inputstreamVar11);
continue;
}
} catch (Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + stringVar7 + "". "" + ex.getMessage());
} finally {
inputstreamVar11.close();
}
}
parseCatalog(stringVar1, stringVar7);
}
}
}"
6224,BAD_PRACTICE,SE_BAD_FIELD,FP,configuration,3435,private final NodeHandler<T> handler;,private final NodeHandler<T> handler;,private final NodeHandler<T> nodehandler<t>Var1;
6370,I18N,DM_DEFAULT_ENCODING,FP,configuration,3581,"writer = new OutputStreamWriter(out);
","public void save(OutputStream out, String encoding) throws ConfigurationException {
Writer writer = null;
if (encoding != null) {
try {
writer = new OutputStreamWriter(out, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (writer == null) {
writer = new OutputStreamWriter(out);
}
save(writer);
}","public void save(OutputStream out, String encoding) throws ConfigurationException {
Writer writerVar1 = writerLiteral2;
if (encoding != null) {
try {
writerVar1 = new OutputStreamWriter(out, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (writerVar1 == null) {
writerVar1 = new OutputStreamWriter(out);
}
save(writerVar1);
}"
6377,I18N,DM_CONVERT_CASE,FP,configuration,3588,"if (filename != null && filename.toLowerCase().trim().endsWith("".xml""))
","@Override
protected FileConfiguration createConfiguration(Attributes attributes) throws Exception {
String filename = attributes.getValue(ATTR_FILENAME);
if (filename != null && filename.toLowerCase().trim().endsWith("".xml"")) {
return new XMLPropertyListConfiguration();
} else {
return new PropertyListConfiguration();
}
}","@Override
protected FileConfiguration createConfiguration(Attributes attributes) throws Exception {
String stringVar1 = stringLiteral2;
if (stringVar1 != null && stringVar1.toLowerCase().trim().endsWith("".xml"")) {
return new XMLPropertyListConfiguration();
} else {
return new PropertyListConfiguration();
}
}"
6387,EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,FP,configuration,3598,"ResultSet rs = pstmt.executeQuery();
","public Iterator<String> getKeys() {
Collection<String> keys = new ArrayList<String>();
StringBuilder query = new StringBuilder(""SELECT DISTINCT "" + keyColumn + "" FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
ResultSet rs = pstmt.executeQuery();
while (rs.next()) {
keys.add(rs.getString(1));
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(conn, pstmt);
}
return keys.iterator();
}","public Iterator<String> getKeys() {
Collection<String> collection<string>Var1 = collection<string>Literal2;
StringBuilder stringbuilderVar3 = stringbuilderLiteral4;
if (nameColumn != null) {
stringbuilderVar3.append("" WHERE "" + nameColumn + ""=?"");
}
Connection connectionVar5 = connectionLiteral6;
PreparedStatement preparedstatementVar7 = connectionLiteral6;
try {
connectionVar5 = getConnection();
preparedstatementVar7 = connectionVar5.prepareStatement(stringbuilderVar3.toString());
if (nameColumn != null) {
preparedstatementVar7.setString(1, name);
}
ResultSet resultsetVar8 = resultsetLiteral9;
while (resultsetVar8.next()) {
collection<string>Var1.add(resultsetVar8.getString(1));
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(connectionVar5, preparedstatementVar7);
}
return collection<string>Var1.iterator();
}"
6389,SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,configuration,3600,"pstmt = conn.prepareStatement(query.toString());
","@Override
public void clear() {
fireEvent(EVENT_CLEAR, null, null, true);
StringBuilder query = new StringBuilder(""DELETE FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
pstmt.executeUpdate();
commitIfRequired(conn);
} catch (SQLException e) {
fireError(EVENT_CLEAR, null, null, e);
} finally {
close(conn, pstmt);
}
fireEvent(EVENT_CLEAR, null, null, false);
}","@Override
public void clear() {
fireEvent(EVENT_CLEAR, null, null, true);
StringBuilder stringbuilderVar1 = stringbuilderLiteral2;
if (nameColumn != null) {
stringbuilderVar1.append("" WHERE "" + nameColumn + ""=?"");
}
Connection connectionVar3 = connectionLiteral4;
PreparedStatement preparedstatementVar5 = connectionLiteral4;
try {
connectionVar3 = getConnection();
preparedstatementVar5 = connectionVar3.prepareStatement(stringbuilderVar1.toString());
if (nameColumn != null) {
preparedstatementVar5.setString(1, name);
}
preparedstatementVar5.executeUpdate();
commitIfRequired(connectionVar3);
} catch (SQLException e) {
fireError(EVENT_CLEAR, null, null, e);
} finally {
close(connectionVar3, preparedstatementVar5);
}
fireEvent(EVENT_CLEAR, null, null, false);
}"
6391,SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,configuration,3602,"pstmt = conn.prepareStatement(query.toString());
","public Iterator<String> getKeys() {
Collection<String> keys = new ArrayList<String>();
StringBuilder query = new StringBuilder(""SELECT DISTINCT "" + keyColumn + "" FROM "" + table);
if (nameColumn != null) {
query.append("" WHERE "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
if (nameColumn != null) {
pstmt.setString(1, name);
}
ResultSet rs = pstmt.executeQuery();
while (rs.next()) {
keys.add(rs.getString(1));
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(conn, pstmt);
}
return keys.iterator();
}","public Iterator<String> getKeys() {
Collection<String> collection<string>Var1 = collection<string>Literal2;
StringBuilder stringbuilderVar3 = stringbuilderLiteral4;
if (nameColumn != null) {
stringbuilderVar3.append("" WHERE "" + nameColumn + ""=?"");
}
Connection connectionVar5 = connectionLiteral6;
PreparedStatement preparedstatementVar7 = connectionLiteral6;
try {
connectionVar5 = getConnection();
preparedstatementVar7 = connectionVar5.prepareStatement(stringbuilderVar3.toString());
if (nameColumn != null) {
preparedstatementVar7.setString(1, name);
}
ResultSet resultsetVar8 = resultsetLiteral9;
while (resultsetVar8.next()) {
collection<string>Var1.add(resultsetVar8.getString(1));
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(connectionVar5, preparedstatementVar7);
}
return collection<string>Var1.iterator();
}"
6395,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,configuration,3606,"ConfigurationDeclaration decl = (ConfigurationDeclaration) data;
","public Object createBean(Class<?> beanClass, BeanDeclaration data, Object param) throws Exception {
ConfigurationDeclaration decl = (ConfigurationDeclaration) data;
String tagName = decl.getNode().getName();
ConfigurationProvider provider = decl.getConfigurationBuilder().providerForTag(tagName);
if (provider == null) {
throw new ConfigurationRuntimeException(""No ConfigurationProvider registered for tag "" + tagName);
}
try {
return provider.getConfiguration(decl);
} catch (Exception ex) {
if (!decl.isOptional()) {
throw ex;
} else {
if (logger.isDebugEnabled()) {
logger.debug(""Load failed for optional configuration "" + tagName + "": "" + ex.getMessage());
}
decl.getConfigurationBuilder().fireError(EVENT_ERR_LOAD_OPTIONAL, decl.getConfiguration().getString(ATTR_NAME), null, ex);
if (decl.isForceCreate()) {
try {
return provider.getEmptyConfiguration(decl);
} catch (Exception ex2) {
;
}
}
return null;
}
}
}","public Object createBean(Class<?> beanClass, BeanDeclaration data, Object param) throws Exception {
ConfigurationDeclaration configurationdeclarationVar1 = configurationdeclarationLiteral2;
String stringVar3 = stringLiteral4;
ConfigurationProvider configurationproviderVar5 = configurationproviderLiteral6;
if (configurationproviderVar5 == null) {
throw new ConfigurationRuntimeException(""No ConfigurationProvider registered for tag "" + stringVar3);
}
try {
return configurationproviderVar5.getConfiguration(configurationdeclarationVar1);
} catch (Exception ex) {
if (!configurationdeclarationVar1.isOptional()) {
throw ex;
} else {
if (logger.isDebugEnabled()) {
logger.debug(""Load failed for optional configuration "" + stringVar3 + "": "" + ex.getMessage());
}
configurationdeclarationVar1.getConfigurationBuilder().fireError(EVENT_ERR_LOAD_OPTIONAL, configurationdeclarationVar1.getConfiguration().getString(ATTR_NAME), null, ex);
if (configurationdeclarationVar1.isForceCreate()) {
try {
return configurationproviderVar5.getEmptyConfiguration(configurationdeclarationVar1);
} catch (Exception ex2) {
;
}
}
return null;
}
}
}"
6422,PERFORMANCE,DM_NUMBER_CTOR,FP,configuration,3633,"return new Byte(n.byteValue());
","public static Byte toByte(Object value) throws ConversionException {
Number n = toNumber(value, Byte.class);
if (n instanceof Byte) {
return (Byte) n;
} else {
return new Byte(n.byteValue());
}
}","public static Byte toByte(Object value) throws ConversionException {
Number numberVar1 = numberLiteral2;
if (numberVar1 instanceof Byte) {
return (Byte) numberVar1;
} else {
return new Byte(numberVar1.byteValue());
}
}"
6426,DODGY_CODE,REC_CATCH_EXCEPTION,FP,configuration,3637,"catch (Exception e)
","static Object toInternetAddress(Object value) throws ConversionException {
if (value.getClass().getName().equals(INTERNET_ADDRESS_CLASSNAME)) {
return value;
} else if (value instanceof String) {
try {
Constructor<?> ctor = Class.forName(INTERNET_ADDRESS_CLASSNAME).getConstructor(new Class[] { String.class });
return ctor.newInstance(new Object[] { value });
} catch (Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"", e);
}
} else {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"");
}
}","static Object toInternetAddress(Object value) throws ConversionException {
if (value.getClass().getName().equals(INTERNET_ADDRESS_CLASSNAME)) {
return value;
} else if (value instanceof String) {
try {
Constructor<?> constructor<?>Var1 = constructor<?>Literal2;
return constructor<?>Var1.newInstance(new Object[] { value });
} catch (Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"", e);
}
} else {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"");
}
}"
6430,I18N,DM_CONVERT_CASE,FP,configuration,3641,"String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
return;
}
}","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String stringVar1 = stringLiteral2;
Class<?>[] class<?>ArrayVar3 = class<?>ArrayLiteral4;
class<?>ArrayVar3[0] = FileSystemOptions.class;
class<?>ArrayVar3[1] = value.getClass();
try {
Method methodVar5 = methodLiteral6;
Object[] objectArrayVar7 = objectArrayLiteral8;
objectArrayVar7[0] = options;
objectArrayVar7[1] = value;
methodVar5.invoke(builder, objectArrayVar7);
} catch (Exception ex) {
return;
}
}"
6432,PERFORMANCE,URF_UNREAD_FIELD,FP,configuration,3643,private final String protocol;,private final String protocol;,private final String stringVar1;
6449,CORRECTNESS,RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE,FP,configuration,3660,"if (configuration.getURL() == null && configuration.getFileName() == null)
","public void init() {
if (configuration.getURL() == null && configuration.getFileName() == null) {
return;
}
if (this.configuration == null) {
throw new IllegalStateException(""No configuration has been set for this strategy"");
}
updateLastModified();
}","public void init() {
if (configuration.getURL() == null && configuration.getFileName() == null) {
return;
}
if (this.configuration == null) {
throw new IllegalStateException(""No configuration has been set for this strategy"");
}
updateLastModified();
}"
6456,DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,configuration,3667,"List<ConfigurationNode> lst = namedNodes.remove(name);
","public boolean removeNodes(String name) {
if (nodes != null && name != null) {
List<ConfigurationNode> lst = namedNodes.remove(name);
if (lst != null) {
detachNodes(lst);
nodes.removeAll(lst);
return true;
}
}
return false;
}","public boolean removeNodes(String name) {
if (nodes != null && name != null) {
List<ConfigurationNode> list<configurationnode>Var1 = list<configurationnode>Literal2;
if (list<configurationnode>Var1 != null) {
detachNodes(list<configurationnode>Var1);
nodes.removeAll(list<configurationnode>Var1);
return true;
}
}
return false;
}"
6459,BAD_PRACTICE,SE_BAD_FIELD,FP,configuration,3670,private ConfigurationNode node;,private ConfigurationNode node;,private ConfigurationNode configurationnodeVar1;
6486,Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,configuration,3697,private ReloadingController reloadingController;,private ReloadingController reloadingController;,private ReloadingController reloadingcontrollerVar1;
6498,I18N,DM_CONVERT_CASE,FP,configuration,3709,"String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
log.warn(""Cannot access property '"" + key + ""'! Ignoring."", ex);
}
}","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String stringVar1 = stringLiteral2;
Class<?>[] class<?>ArrayVar3 = class<?>ArrayLiteral4;
class<?>ArrayVar3[0] = FileSystemOptions.class;
class<?>ArrayVar3[1] = value.getClass();
try {
Method methodVar5 = methodLiteral6;
Object[] objectArrayVar7 = objectArrayLiteral8;
objectArrayVar7[0] = options;
objectArrayVar7[1] = value;
methodVar5.invoke(builder, objectArrayVar7);
} catch (Exception ex) {
log.warn(""Cannot access property '"" + key + ""'! Ignoring."", ex);
}
}"
6501,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,configuration,3712,"fs = ((CatalogManager) catalogManager).getFileSystem();
","@Override
public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
String base = ((CatalogManager) catalogManager).getBaseDir();
@SuppressWarnings(""unchecked"")
Vector<String> catalogs = catalogManager.getCatalogFiles();
if (catalogs != null) {
for (int count = 0; count < catalogs.size(); count++) {
String fileName = catalogs.elementAt(count);
URL url = null;
InputStream is = null;
try {
url = locate(fs, base, fileName);
if (url != null) {
is = fs.getInputStream(url);
}
} catch (ConfigurationException ce) {
String name = url.toString();
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + name + "". "" + ce.getMessage());
}
if (is != null) {
String mimeType = fileNameMap.getContentTypeFor(fileName);
try {
if (mimeType != null) {
parseCatalog(mimeType, is);
continue;
}
} catch (Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + fileName + "". "" + ex.getMessage());
} finally {
is.close();
}
}
parseCatalog(base, fileName);
}
}
}","@Override
public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
String stringVar1 = stringLiteral2;
@SuppressWarnings(""unchecked"")
Vector<String> vector<string>Var3 = vector<string>Literal4;
if (vector<string>Var3 != null) {
for (int intVar16 = intLiteral17; intVar5 < intLiteral1; intVar5++) {
String stringVar7 = stringLiteral8;
URL urlVar9 = urlLiteral10;
InputStream inputstreamVar11 = urlLiteral10;
try {
urlVar9 = locate(fs, stringVar1, stringVar7);
if (urlVar9 != null) {
inputstreamVar11 = fs.getInputStream(urlVar9);
}
} catch (ConfigurationException ce) {
String stringVar12 = stringLiteral13;
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + stringVar12 + "". "" + ce.getMessage());
}
if (inputstreamVar11 != null) {
String stringVar14 = stringLiteral15;
try {
if (stringVar14 != null) {
parseCatalog(stringVar14, inputstreamVar11);
continue;
}
} catch (Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + stringVar7 + "". "" + ex.getMessage());
} finally {
inputstreamVar11.close();
}
}
parseCatalog(stringVar1, stringVar7);
}
}
}"
6650,PERFORMANCE,DM_NUMBER_CTOR,FP,configuration,3861,"value = array.length == 0 ? null : new Integer(array[0]);
","protected Object resolveContainerStore(String key) {
Object value = getProperty(key);
if (value != null) {
if (value instanceof List) {
List list = (List) value;
value = list.isEmpty() ? null : list.get(0);
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
value = array.length == 0 ? null : array[0];
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
value = array.length == 0 ? null : array[0] ? Boolean.TRUE : Boolean.FALSE;
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
value = array.length == 0 ? null : new Byte(array[0]);
} else if (value instanceof short[]) {
short[] array = (short[]) value;
value = array.length == 0 ? null : new Short(array[0]);
} else if (value instanceof int[]) {
int[] array = (int[]) value;
value = array.length == 0 ? null : new Integer(array[0]);
} else if (value instanceof long[]) {
long[] array = (long[]) value;
value = array.length == 0 ? null : new Long(array[0]);
} else if (value instanceof float[]) {
float[] array = (float[]) value;
value = array.length == 0 ? null : new Float(array[0]);
} else if (value instanceof double[]) {
double[] array = (double[]) value;
value = array.length == 0 ? null : new Double(array[0]);
}
}
return value;
}","protected Object resolveContainerStore(String key) {
Object objectVar1 = objectLiteral2;
if (objectVar1 != null) {
if (objectVar1 instanceof List) {
List listVar3 = listLiteral4;
objectVar1 = listVar3.isEmpty() ? null : listVar3.get(0);
} else if (objectVar1 instanceof Object[]) {
Object[] objectArrayVar5 = objectArrayLiteral6;
objectVar1 = objectArrayVar5.length == 0 ? null : objectArrayVar5[0];
} else if (objectVar1 instanceof boolean[]) {
boolean[] objectArrayVar5 = booleanArrayLiteral7;
objectVar1 = objectArrayVar5.length == 0 ? null : objectArrayVar5[0] ? Boolean.TRUE : Boolean.FALSE;
} else if (objectVar1 instanceof byte[]) {
byte[] objectArrayVar5 = byteArrayLiteral8;
objectVar1 = objectArrayVar5.length == 0 ? null : new Byte(objectArrayVar5[0]);
} else if (objectVar1 instanceof short[]) {
short[] objectArrayVar5 = shortArrayLiteral9;
objectVar1 = objectArrayVar5.length == 0 ? null : new Short(objectArrayVar5[0]);
} else if (objectVar1 instanceof int[]) {
int[] objectArrayVar5 = intArrayLiteral10;
objectVar1 = objectArrayVar5.length == 0 ? null : new Integer(objectArrayVar5[0]);
} else if (objectVar1 instanceof long[]) {
long[] objectArrayVar5 = longArrayLiteral11;
objectVar1 = objectArrayVar5.length == 0 ? null : new Long(objectArrayVar5[0]);
} else if (objectVar1 instanceof float[]) {
float[] objectArrayVar5 = floatArrayLiteral12;
objectVar1 = objectArrayVar5.length == 0 ? null : new Float(objectArrayVar5[0]);
} else if (objectVar1 instanceof double[]) {
double[] objectArrayVar5 = doubleArrayLiteral13;
objectVar1 = objectArrayVar5.length == 0 ? null : new Double(objectArrayVar5[0]);
}
}
return objectVar1;
}"
6655,PERFORMANCE,DM_FP_NUMBER_CTOR,FP,configuration,3866,"value = array.length == 0 ? null : new Double(array[0]);
","protected Object resolveContainerStore(String key) {
Object value = getProperty(key);
if (value != null) {
if (value instanceof List) {
List list = (List) value;
value = list.isEmpty() ? null : list.get(0);
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
value = array.length == 0 ? null : array[0];
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
value = array.length == 0 ? null : array[0] ? Boolean.TRUE : Boolean.FALSE;
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
value = array.length == 0 ? null : new Byte(array[0]);
} else if (value instanceof short[]) {
short[] array = (short[]) value;
value = array.length == 0 ? null : new Short(array[0]);
} else if (value instanceof int[]) {
int[] array = (int[]) value;
value = array.length == 0 ? null : new Integer(array[0]);
} else if (value instanceof long[]) {
long[] array = (long[]) value;
value = array.length == 0 ? null : new Long(array[0]);
} else if (value instanceof float[]) {
float[] array = (float[]) value;
value = array.length == 0 ? null : new Float(array[0]);
} else if (value instanceof double[]) {
double[] array = (double[]) value;
value = array.length == 0 ? null : new Double(array[0]);
}
}
return value;
}","protected Object resolveContainerStore(String key) {
Object objectVar1 = objectLiteral2;
if (objectVar1 != null) {
if (objectVar1 instanceof List) {
List listVar3 = listLiteral4;
objectVar1 = listVar3.isEmpty() ? null : listVar3.get(0);
} else if (objectVar1 instanceof Object[]) {
Object[] objectArrayVar5 = objectArrayLiteral6;
objectVar1 = objectArrayVar5.length == 0 ? null : objectArrayVar5[0];
} else if (objectVar1 instanceof boolean[]) {
boolean[] objectArrayVar5 = booleanArrayLiteral7;
objectVar1 = objectArrayVar5.length == 0 ? null : objectArrayVar5[0] ? Boolean.TRUE : Boolean.FALSE;
} else if (objectVar1 instanceof byte[]) {
byte[] objectArrayVar5 = byteArrayLiteral8;
objectVar1 = objectArrayVar5.length == 0 ? null : new Byte(objectArrayVar5[0]);
} else if (objectVar1 instanceof short[]) {
short[] objectArrayVar5 = shortArrayLiteral9;
objectVar1 = objectArrayVar5.length == 0 ? null : new Short(objectArrayVar5[0]);
} else if (objectVar1 instanceof int[]) {
int[] objectArrayVar5 = intArrayLiteral10;
objectVar1 = objectArrayVar5.length == 0 ? null : new Integer(objectArrayVar5[0]);
} else if (objectVar1 instanceof long[]) {
long[] objectArrayVar5 = longArrayLiteral11;
objectVar1 = objectArrayVar5.length == 0 ? null : new Long(objectArrayVar5[0]);
} else if (objectVar1 instanceof float[]) {
float[] objectArrayVar5 = floatArrayLiteral12;
objectVar1 = objectArrayVar5.length == 0 ? null : new Float(objectArrayVar5[0]);
} else if (objectVar1 instanceof double[]) {
double[] objectArrayVar5 = doubleArrayLiteral13;
objectVar1 = objectArrayVar5.length == 0 ? null : new Double(objectArrayVar5[0]);
}
}
return objectVar1;
}"
6673,EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,FP,configuration,3884,"ResultSet rs = pstmt.executeQuery();
","public Object getProperty(String key) {
Object result = null;
StringBuffer query = new StringBuffer(""SELECT * FROM "");
query.append(table).append("" WHERE "");
query.append(keyColumn).append(""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
ResultSet rs = pstmt.executeQuery();
List results = new ArrayList();
while (rs.next()) {
Object val = rs.getObject(valueColumn);
if (isDelimiterParsingDisabled()) {
results.add(val);
} else {
CollectionUtils.addAll(results, PropertyConverter.toIterator(val, getListDelimiter()));
}
}
if (!results.isEmpty()) {
result = (results.size() > 1) ? results : results.get(0);
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
closeQuietly(conn, pstmt);
}
return result;
}","public Object getProperty(String key) {
Object objectVar1 = objectLiteral2;
StringBuffer stringbufferVar3 = stringbufferLiteral4;
stringbufferVar3.append(table).append("" WHERE "");
stringbufferVar3.append(keyColumn).append(""=?"");
if (nameColumn != null) {
stringbufferVar3.append("" AND "" + nameColumn + ""=?"");
}
Connection connectionVar5 = objectLiteral2;
PreparedStatement preparedstatementVar6 = objectLiteral2;
try {
connectionVar5 = getConnection();
preparedstatementVar6 = connectionVar5.prepareStatement(stringbufferVar3.toString());
preparedstatementVar6.setString(1, key);
if (nameColumn != null) {
preparedstatementVar6.setString(2, name);
}
ResultSet resultsetVar7 = resultsetLiteral8;
List listVar9 = listLiteral10;
while (resultsetVar7.next()) {
Object objectVar11 = objectLiteral12;
if (isDelimiterParsingDisabled()) {
listVar9.add(objectVar11);
} else {
CollectionUtils.addAll(listVar9, PropertyConverter.toIterator(objectVar11, getListDelimiter()));
}
}
if (!listVar9.isEmpty()) {
objectVar1 = (listVar9.size() > 1) ? listVar9 : listVar9.get(0);
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
closeQuietly(connectionVar5, preparedstatementVar6);
}
return objectVar1;
}"
6678,SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,configuration,3889,"pstmt = conn.prepareStatement(query.toString());
","protected void addPropertyDirect(String key, Object obj) {
StringBuffer query = new StringBuffer(""INSERT INTO "" + table);
if (nameColumn != null) {
query.append("" ("" + nameColumn + "", "" + keyColumn + "", "" + valueColumn + "") VALUES (?, ?, ?)"");
} else {
query.append("" ("" + keyColumn + "", "" + valueColumn + "") VALUES (?, ?)"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
int index = 1;
if (nameColumn != null) {
pstmt.setString(index++, name);
}
pstmt.setString(index++, key);
pstmt.setString(index++, String.valueOf(obj));
pstmt.executeUpdate();
} catch (SQLException e) {
fireError(EVENT_ADD_PROPERTY, key, obj, e);
} finally {
closeQuietly(conn, pstmt);
}
}","protected void addPropertyDirect(String key, Object obj) {
StringBuffer stringbufferVar1 = stringbufferLiteral2;
if (nameColumn != null) {
stringbufferVar1.append("" ("" + nameColumn + "", "" + keyColumn + "", "" + valueColumn + "") VALUES (?, ?, ?)"");
} else {
stringbufferVar1.append("" ("" + keyColumn + "", "" + valueColumn + "") VALUES (?, ?)"");
}
Connection connectionVar3 = connectionLiteral4;
PreparedStatement preparedstatementVar5 = connectionLiteral4;
try {
connectionVar3 = getConnection();
preparedstatementVar5 = connectionVar3.prepareStatement(stringbufferVar1.toString());
int intVar6 = intLiteral7;
if (nameColumn != null) {
preparedstatementVar5.setString(intVar6++, name);
}
preparedstatementVar5.setString(intVar6++, key);
preparedstatementVar5.setString(intVar6++, String.valueOf(obj));
preparedstatementVar5.executeUpdate();
} catch (SQLException e) {
fireError(EVENT_ADD_PROPERTY, key, obj, e);
} finally {
closeQuietly(connectionVar3, preparedstatementVar5);
}
}"
6691,PERFORMANCE,DM_NUMBER_CTOR,FP,configuration,3902,"return new Integer(n.intValue());
","public static Integer toInteger(Object value) throws ConversionException {
Number n = toNumber(value, Integer.class);
if (n instanceof Integer) {
return (Integer) n;
} else {
return new Integer(n.intValue());
}
}","public static Integer toInteger(Object value) throws ConversionException {
Number numberVar1 = numberLiteral2;
if (numberVar1 instanceof Integer) {
return (Integer) numberVar1;
} else {
return new Integer(numberVar1.intValue());
}
}"
6695,PERFORMANCE,DM_FP_NUMBER_CTOR,FP,configuration,3906,"return new Double(n.doubleValue());
","public static Double toDouble(Object value) throws ConversionException {
Number n = toNumber(value, Double.class);
if (n instanceof Double) {
return (Double) n;
} else {
return new Double(n.doubleValue());
}
}","public static Double toDouble(Object value) throws ConversionException {
Number numberVar1 = numberLiteral2;
if (numberVar1 instanceof Double) {
return (Double) numberVar1;
} else {
return new Double(numberVar1.doubleValue());
}
}"
6711,BAD_PRACTICE,SE_BAD_FIELD,FP,configuration,3922,public Token currentToken;,public Token currentToken;,public Token tokenVar1;
6748,DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,configuration,3959,"result = (List) namedNodes.get(name);
","public List getSubNodes(String name) {
if (name == null) {
return getSubNodes();
}
List result;
if (nodes == null) {
result = null;
} else {
result = (List) namedNodes.get(name);
}
return (result == null) ? Collections.EMPTY_LIST : Collections.unmodifiableList(result);
}","public List getSubNodes(String name) {
if (name == null) {
return getSubNodes();
}
List listVar1;
if (nodes == null) {
listVar1 = null;
} else {
listVar1 = (List) namedNodes.get(name);
}
return (listVar1 == null) ? Collections.EMPTY_LIST : Collections.unmodifiableList(listVar1);
}"
6769,BAD_PRACTICE,NM_CONFUSING,FP,configuration,3980,"return dataSource;
","public DataSource getDataSource() {
return dataSource;
}","public DataSource getDataSource() {
return dataSource;
}"
6830,I18N,DM_DEFAULT_ENCODING,FP,configuration,4041,"dump(configuration, new PrintWriter(out));
","public static void dump(Configuration configuration, PrintStream out) {
dump(configuration, new PrintWriter(out));
}","public static void dump(Configuration configuration, PrintStream out) {
dump(configuration, new PrintWriter(out));
}"
6837,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,configuration,4048,"ConfigurationDeclaration decl = (ConfigurationDeclaration) data;
","public Object createBean(Class<?> beanClass, BeanDeclaration data, Object param) throws Exception {
ConfigurationDeclaration decl = (ConfigurationDeclaration) data;
String tagName = decl.getNode().getName();
ConfigurationProvider provider = decl.getConfigurationBuilder().providerForTag(tagName);
if (provider == null) {
throw new ConfigurationRuntimeException(""No ConfigurationProvider registered for tag "" + tagName);
}
try {
return provider.getConfiguration(decl);
} catch (Exception ex) {
if (!decl.isOptional()) {
throw ex;
} else {
if (logger.isDebugEnabled()) {
logger.debug(""Load failed for optional configuration "" + tagName + "": "" + ex.getMessage());
}
decl.getConfigurationBuilder().fireError(EVENT_ERR_LOAD_OPTIONAL, decl.getConfiguration().getString(ATTR_NAME), null, ex);
if (decl.isForceCreate()) {
try {
return provider.getEmptyConfiguration(decl);
} catch (Exception ex2) {
;
}
}
return null;
}
}
}","public Object createBean(Class<?> beanClass, BeanDeclaration data, Object param) throws Exception {
ConfigurationDeclaration configurationdeclarationVar1 = configurationdeclarationLiteral2;
String stringVar3 = stringLiteral4;
ConfigurationProvider configurationproviderVar5 = configurationproviderLiteral6;
if (configurationproviderVar5 == null) {
throw new ConfigurationRuntimeException(""No ConfigurationProvider registered for tag "" + stringVar3);
}
try {
return configurationproviderVar5.getConfiguration(configurationdeclarationVar1);
} catch (Exception ex) {
if (!configurationdeclarationVar1.isOptional()) {
throw ex;
} else {
if (logger.isDebugEnabled()) {
logger.debug(""Load failed for optional configuration "" + stringVar3 + "": "" + ex.getMessage());
}
configurationdeclarationVar1.getConfigurationBuilder().fireError(EVENT_ERR_LOAD_OPTIONAL, configurationdeclarationVar1.getConfiguration().getString(ATTR_NAME), null, ex);
if (configurationdeclarationVar1.isForceCreate()) {
try {
return configurationproviderVar5.getEmptyConfiguration(configurationdeclarationVar1);
} catch (Exception ex2) {
;
}
}
return null;
}
}
}"
6861,I18N,DM_DEFAULT_ENCODING,FP,configuration,4072,"PrintStream stream = new PrintStream(os);
","private CombinedNode constructCombinedNode() {
initSubHandlers();
if (getNumberOfConfigurations() < 1) {
return new CombinedNode();
} else {
Iterator<ConfigData> it = configurations.iterator();
CombinedNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = getNodeCombiner().combine(node, getNodeHandler(), it.next().getTransformedRoot(), getNodeHandler());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node, getNodeHandler());
getLogger().debug(os.toString());
}
return node;
}
}","private CombinedNode constructCombinedNode() {
initSubHandlers();
if (getNumberOfConfigurations() < 1) {
return new CombinedNode();
} else {
Iterator<ConfigData> iterator<configdata>Var1 = iterator<configdata>Literal2;
CombinedNode combinednodeVar3 = combinednodeLiteral4;
while (iterator<configdata>Var1.hasNext()) {
combinednodeVar3 = getNodeCombiner().combine(combinednodeVar3, getNodeHandler(), iterator<configdata>Var1.next().getTransformedRoot(), getNodeHandler());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream bytearrayoutputstreamVar5 = bytearrayoutputstreamLiteral6;
PrintStream printstreamVar7 = printstreamLiteral8;
TreeUtils.printTree(printstreamVar7, combinednodeVar3, getNodeHandler());
getLogger().debug(bytearrayoutputstreamVar5.toString());
}
return combinednodeVar3;
}
}"
6862,DODGY_CODE,RI_REDUNDANT_INTERFACES,FP,configuration,4073,"public class CombinedConfiguration extends
AbstractHierarchicalConfiguration<Object> implements
ConfigurationListener, Cloneable
{
public static final int EVENT_COMBINED_INVALIDATE = 40;
private static final DefaultExpressionEngine AT_ENGINE = new DefaultExpressionEngine();
private static final CombinedNodeHandler COMBINED_NODE_HANDLER = new CombinedNodeHandler();
private static final NodeCombiner DEFAULT_COMBINER = new UnionCombiner();
private static final String PROP_RELOAD_CHECK = ""CombinedConfigurationReloadCheck"";
private NodeCombiner nodeCombiner;
private CombinedNode combinedRoot;
private List<ConfigData> configurations;
private Map<String, Configuration> namedConfigurations;
private ExpressionEngine conversionExpressionEngine;
private boolean forceReloadCheck;
private boolean ignoreReloadExceptions = true;
public CombinedConfiguration(NodeCombiner comb)
{
super(new CombinedConfigurationNodeHandler());
setNodeCombiner((comb != null) ? comb : DEFAULT_COMBINER);
clear();
}
public CombinedConfiguration()
{
this(null);
}
public NodeCombiner getNodeCombiner()
{
return nodeCombiner;
}
public void setNodeCombiner(NodeCombiner nodeCombiner)
{
if (nodeCombiner == null)
{
throw new IllegalArgumentException(
""Node combiner must not be null!"");
}
this.nodeCombiner = nodeCombiner;
invalidate();
}
public boolean isForceReloadCheck()
{
return forceReloadCheck;
}
public void setForceReloadCheck(boolean forceReloadCheck)
{
this.forceReloadCheck = forceReloadCheck;
}
public boolean isIgnoreReloadExceptions()
{
return ignoreReloadExceptions;
}
public void setIgnoreReloadExceptions(boolean ignoreReloadExceptions)
{
this.ignoreReloadExceptions = ignoreReloadExceptions;
}
public ExpressionEngine getConversionExpressionEngine()
{
return conversionExpressionEngine;
}
public void setConversionExpressionEngine(
ExpressionEngine conversionExpressionEngine)
{
this.conversionExpressionEngine = conversionExpressionEngine;
}
public void addConfiguration(AbstractHierarchicalConfiguration<?> config,
String name, String at)
{
if (config == null)
{
throw new IllegalArgumentException(
""Added configuration must not be null!"");
}
if (name != null && namedConfigurations.containsKey(name))
{
throw new ConfigurationRuntimeException(
""A configuration with the name '""
+ name
+ ""' already exists in this combined configuration!"");
}
ConfigData cd = new ConfigData(config, name, at);
configurations.add(cd);
if (name != null)
{
namedConfigurations.put(name, config);
}
config.getNodeHandler().initNodeHandlerRegistry(getCombinedNodeHandler());
config.addConfigurationListener(this);
invalidate();
}
public void addConfiguration(AbstractHierarchicalConfiguration<?> config,
String name)
{
addConfiguration(config, name, null);
}
public void addConfiguration(AbstractHierarchicalConfiguration<?> config)
{
addConfiguration(config, null, null);
}
public int getNumberOfConfigurations()
{
return configurations.size();
}
public Configuration getConfiguration(int index)
{
ConfigData cd = configurations.get(index);
return cd.getConfiguration();
}
public Configuration getConfiguration(String name)
{
return namedConfigurations.get(name);
}
public List<AbstractHierarchicalConfiguration<?>> getConfigurations()
{
List<AbstractHierarchicalConfiguration<?>> list = new ArrayList<AbstractHierarchicalConfiguration<?>>();
for (ConfigData configuration : configurations)
{
list.add(configuration.getConfiguration());
}
return list;
}
public List<String> getConfigurationNameList()
{
List<String> list = new ArrayList<String>();
for (ConfigData configuration : configurations)
{
list.add((configuration).getName());
}
return list;
}
public boolean removeConfiguration(Configuration config)
{
for (int index = 0; index < getNumberOfConfigurations(); index++)
{
if (configurations.get(index).getConfiguration() == config)
{
removeConfigurationAt(index);
return true;
}
}
return false;
}
public Configuration removeConfigurationAt(int index)
{
ConfigData cd = configurations.remove(index);
if (cd.getName() != null)
{
namedConfigurations.remove(cd.getName());
}
cd.getConfiguration().removeConfigurationListener(this);
invalidate();
return cd.getConfiguration();
}
public Configuration removeConfiguration(String name)
{
Configuration conf = getConfiguration(name);
if (conf != null)
{
removeConfiguration(conf);
}
return conf;
}
public Set<String> getConfigurationNames()
{
return namedConfigurations.keySet();
}
public void invalidate()
{
synchronized (getNodeCombiner()) 
{
combinedRoot = null;
}
fireEvent(EVENT_COMBINED_INVALIDATE, null, null, false);
}
public void configurationChanged(ConfigurationEvent event)
{
if (!event.isBeforeUpdate())
{
invalidate();
}
}
@Override
public Object getRootNode()
{
synchronized (getNodeCombiner())
{
if (combinedRoot == null)
{
getCombinedNodeHandler().setHandlers(createSubHandlers());
combinedRoot = constructCombinedNode();
}
return combinedRoot;
}
}
@Override
public void clear()
{
fireEvent(EVENT_CLEAR, null, null, true);
configurations = new ArrayList<ConfigData>();
namedConfigurations = new HashMap<String, Configuration>();
fireEvent(EVENT_CLEAR, null, null, false);
invalidate();
}
@Override
public Object clone()
{
try
{
CombinedConfiguration copy = (CombinedConfiguration) super.clone();
copy.clear();
for (ConfigData cd : configurations)
{
copy
.addConfiguration(
(AbstractHierarchicalConfiguration<?>) ConfigurationUtils
.cloneConfiguration(cd
.getConfiguration()), cd
.getName(), cd.getAt());
}
return copy;
}
catch (CloneNotSupportedException cnsex)
{
throw new ConfigurationRuntimeException(cnsex);
}
}
@Override
public Object getProperty(String key)
{
if (isForceReloadCheck())
{
for (ConfigData cd : configurations)
{
try
{
cd.getConfiguration().getProperty(PROP_RELOAD_CHECK);
}
catch (Exception ex)
{
if (!ignoreReloadExceptions)
{
throw new ConfigurationRuntimeException(ex);
}
}
}
}
return super.getProperty(key);
}
public Configuration getSource(String key)
{
if (key == null)
{
throw new IllegalArgumentException(""Key must not be null!"");
}
NodeList<Object> nodes = fetchNodeList(key);
if (nodes.size() == 0)
{
return null;
}
Configuration source = findSourceConfiguration(nodes, 0);
for (int idx = 1; idx < nodes.size(); idx++)
{
Configuration src = findSourceConfiguration(nodes, idx);
if (src != source)
{
throw new IllegalArgumentException(""The key "" + key
+ "" is defined by multiple sources!"");
}
}
return source;
}
protected Map<Class<?>, NodeHandler<?>> createSubHandlers()
{
Map<Class<?>, NodeHandler<?>> result = new HashMap<Class<?>, NodeHandler<?>>();
for (ConfigData cd : configurations)
{
result.put(cd.getConfiguration().getRootNode().getClass(), cd
.getConfiguration().getNodeHandler());
}
return result;
}
@Override
protected NodeList<Object> fetchNodeList(String key)
{
if (isForceReloadCheck())
{
performReloadCheck();
}
return super.fetchNodeList(key);
}
protected void performReloadCheck()
{
for (ConfigData cd : configurations)
{
try
{
cd.getConfiguration().getProperty(PROP_RELOAD_CHECK);
}
catch (Exception ex)
{
;
}
}
}
private CombinedNode constructCombinedNode()
{
initSubHandlers();
if (getNumberOfConfigurations() < 1)
{
return new CombinedNode();
}
else
{
Iterator<ConfigData> it = configurations.iterator();
CombinedNode node = it.next().getTransformedRoot();
while (it.hasNext())
{
node = getNodeCombiner().combine(node, getNodeHandler(),
it.next().getTransformedRoot(), getNodeHandler());
}
if (getLogger().isDebugEnabled())
{
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node, getNodeHandler());
getLogger().debug(os.toString());
}
return node;
}
}
private void initSubHandlers()
{
Map<Class<?>, NodeHandler<?>> handlers = new HashMap<Class<?>, NodeHandler<?>>(
createSubHandlers());
handlers.put(CombinedNode.class, COMBINED_NODE_HANDLER);
getCombinedNodeHandler().setHandlers(handlers);
}
private Configuration findSourceConfiguration(Object node)
{
Object root = null;
Object current = node;
while (current != null)
{
root = current;
current = getNodeHandler().getParent(current);
}
for (ConfigData cd : configurations)
{
if (root == cd.getRootNode())
{
return cd.getConfiguration();
}
}
return this;
}
private Configuration findSourceConfiguration(NodeList<Object> nl, int idx)
{
return nl.isNode(idx) ? findSourceConfiguration(nl.getNode(idx))
: findSourceConfiguration(nl.getAttributeParent(idx));
}
private CombinedConfigurationNodeHandler getCombinedNodeHandler()
{
return (CombinedConfigurationNodeHandler) getNodeHandler();
","protected void performReloadCheck() {
for (ConfigData cd : configurations) {
try {
cd.getConfiguration().getProperty(PROP_RELOAD_CHECK);
} catch (Exception ex) {
;
}
}
}","protected void performReloadCheck() {
for (ConfigData configdataVar1 : configurations) {
try {
configdataVar1.getConfiguration().getProperty(PROP_RELOAD_CHECK);
} catch (Exception ex) {
;
}
}
}"
6875,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,configuration,4086,"return new ConfigurationNodeIteratorChildren<T>(this, test, reverse,
","@SuppressWarnings(""unchecked"")
@Override
public NodeIterator childIterator(NodeTest test, boolean reverse, NodePointer startWith) {
return new ConfigurationNodeIteratorChildren<T>(this, test, reverse, (ConfigurationNodePointer<T>) startWith);
}","@SuppressWarnings(""unchecked"")
@Override
public NodeIterator childIterator(NodeTest test, boolean reverse, NodePointer startWith) {
return new ConfigurationNodeIteratorChildren<T>(this, test, reverse, (ConfigurationNodePointer<T>) startWith);
}"
6883,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,configuration,4094,"catch (Exception ex)
","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class[] paramTypes = new Class[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
return;
}
}","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String stringVar1 = stringLiteral2;
Class[] classArrayVar3 = classArrayLiteral4;
classArrayVar3[0] = FileSystemOptions.class;
classArrayVar3[1] = value.getClass();
try {
Method methodVar5 = methodLiteral6;
Object[] objectArrayVar7 = objectArrayLiteral8;
objectArrayVar7[0] = options;
objectArrayVar7[1] = value;
methodVar5.invoke(builder, objectArrayVar7);
} catch (Exception ex) {
return;
}
}"
6885,PERFORMANCE,URF_UNREAD_FIELD,FP,configuration,4096,private final String protocol;,private final String protocol;,private final String stringVar1;
6889,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,configuration,4100,"Object value = null;
Token token;
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
case ARRAY_BEGIN:
value = Array();
{if (true) return value;}
break;
case OBJECT_BEGIN:
value = Object();
{if (true) return value;}
break;
case STRING:
value = String();
{if (true) return value;}
break;
case INTEGER:
token = jj_consume_token(INTEGER);
{if (true) return new BigInteger(token.image);}
break;
case REAL:
token = jj_consume_token(REAL);
{if (true) return new BigDecimal(token.image);}
break;
case TRUE:
token = jj_consume_token(TRUE);
{if (true) return Boolean.TRUE;}
break;
case FALSE:
token = jj_consume_token(FALSE);
{if (true) return Boolean.FALSE;}
break;
case NULL:
token = jj_consume_token(NULL);
{if (true) return null;}
break;
default:
jj_la1[2] = jj_gen;
jj_consume_token(-1);
throw new ParseException();
","final public Object Value() throws ParseException {
Object value = null;
Token token;
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case ARRAY_BEGIN:
value = Array();
{
if (true)
return value;
}
break;
case OBJECT_BEGIN:
value = Object();
{
if (true)
return value;
}
break;
case STRING:
value = String();
{
if (true)
return value;
}
break;
case INTEGER:
token = jj_consume_token(INTEGER);
{
if (true)
return new BigInteger(token.image);
}
break;
case REAL:
token = jj_consume_token(REAL);
{
if (true)
return new BigDecimal(token.image);
}
break;
case TRUE:
token = jj_consume_token(TRUE);
{
if (true)
return Boolean.TRUE;
}
break;
case FALSE:
token = jj_consume_token(FALSE);
{
if (true)
return Boolean.FALSE;
}
break;
case NULL:
token = jj_consume_token(NULL);
{
if (true)
return null;
}
break;
default:
jj_la1[2] = jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
throw new Error(""Missing return statement in function"");
}","final public Object Value() throws ParseException {
Object objectVar1 = objectLiteral2;
Token tokenVar3;
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case ARRAY_BEGIN:
objectVar1 = Array();
{
if (true)
return objectVar1;
}
break;
case OBJECT_BEGIN:
objectVar1 = Object();
{
if (true)
return objectVar1;
}
break;
case STRING:
objectVar1 = String();
{
if (true)
return objectVar1;
}
break;
case INTEGER:
tokenVar3 = jj_consume_token(INTEGER);
{
if (true)
return new BigInteger(tokenVar3.image);
}
break;
case REAL:
tokenVar3 = jj_consume_token(REAL);
{
if (true)
return new BigDecimal(tokenVar3.image);
}
break;
case TRUE:
tokenVar3 = jj_consume_token(TRUE);
{
if (true)
return Boolean.TRUE;
}
break;
case FALSE:
tokenVar3 = jj_consume_token(FALSE);
{
if (true)
return Boolean.FALSE;
}
break;
case NULL:
tokenVar3 = jj_consume_token(NULL);
{
if (true)
return null;
}
break;
default:
jj_la1[2] = jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
throw new Error(""Missing return statement in function"");
}"
6893,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,configuration,4104,"token_source = tm;
token = new Token();
jj_ntk = -1;
jj_gen = 0;
for (int i = 0; i < 5; i++) jj_la1[i] = -1;
}
","public void ReInit(JSONParserTokenManager tm) {
token_source = tm;
token = new Token();
jj_ntk = -1;
jj_gen = 0;
for (int i = 0; i < 5; i++) jj_la1[i] = -1;
}","public void ReInit(JSONParserTokenManager tm) {
token_source = tm;
token = new Token();
jj_ntk = -1;
jj_gen = 0;
for (int intVar3 = intLiteral4; intVar1 < intLiteral1; intVar1++) jj_la1[intVar1] = -1;
}"
6902,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,configuration,4113,"jjround = 0x80000001;
for (i = 31; i-- > 0;)
jjrounds[i] = 0x80000000;
}
","private void ReInitRounds() {
int i;
jjround = 0x80000001;
for (i = 31; i-- > 0; ) jjrounds[i] = 0x80000000;
}","private void ReInitRounds() {
int intVar1;
jjround = 0x80000001;
for (intVar1 = 31; intVar1-- > intLiteral1; ) jjrounds[intVar1] = 0x80000000;
}"
6913,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,configuration,4124,"inputStream = dstream;
line = startline;
column = startcolumn - 1;
if (buffer == null || buffersize != buffer.length)
{
available = bufsize = buffersize;
buffer = new char[buffersize];
bufline = new int[buffersize];
bufcolumn = new int[buffersize];
}
prevCharIsLF = prevCharIsCR = false;
tokenBegin = inBuf = maxNextCharInd = 0;
bufpos = -1;
}
","public void ReInit(java.io.Reader dstream, int startline, int startcolumn, int buffersize) {
inputStream = dstream;
line = startline;
column = startcolumn - 1;
if (buffer == null || buffersize != buffer.length) {
available = bufsize = buffersize;
buffer = new char[buffersize];
bufline = new int[buffersize];
bufcolumn = new int[buffersize];
}
prevCharIsLF = prevCharIsCR = false;
tokenBegin = inBuf = maxNextCharInd = 0;
bufpos = -1;
}","public void ReInit(java.io.Reader dstream, int startline, int startcolumn, int buffersize) {
inputStream = dstream;
line = startline;
column = startcolumn - 1;
if (buffer == null || buffersize != buffer.length) {
available = bufsize = buffersize;
buffer = new char[buffersize];
bufline = new int[buffersize];
bufcolumn = new int[buffersize];
}
prevCharIsLF = prevCharIsCR = false;
tokenBegin = inBuf = maxNextCharInd = 0;
bufpos = -1;
}"
6920,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,configuration,4131,"char[] newbuffer = new char[bufsize + 2048];
int newbufline[] = new int[bufsize + 2048];
int newbufcolumn[] = new int[bufsize + 2048];
try
{
if (wrapAround)
{
System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
System.arraycopy(buffer, 0, newbuffer,
bufsize - tokenBegin, bufpos);
buffer = newbuffer;
System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
System.arraycopy(bufline, 0, newbufline, bufsize - tokenBegin, bufpos);
bufline = newbufline;
System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
System.arraycopy(bufcolumn, 0, newbufcolumn, bufsize - tokenBegin, bufpos);
bufcolumn = newbufcolumn;
maxNextCharInd = (bufpos += (bufsize - tokenBegin));
}
else
{
System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
buffer = newbuffer;
System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
bufline = newbufline;
System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
bufcolumn = newbufcolumn;
maxNextCharInd = (bufpos -= tokenBegin);
}
}
catch (Throwable t)
{
throw new Error(t.getMessage());
}
bufsize += 2048;
available = bufsize;
tokenBegin = 0;
}
","protected void ExpandBuff(boolean wrapAround) {
char[] newbuffer = new char[bufsize + 2048];
int[] newbufline = new int[bufsize + 2048];
int[] newbufcolumn = new int[bufsize + 2048];
try {
if (wrapAround) {
System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
System.arraycopy(buffer, 0, newbuffer, bufsize - tokenBegin, bufpos);
buffer = newbuffer;
System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
System.arraycopy(bufline, 0, newbufline, bufsize - tokenBegin, bufpos);
bufline = newbufline;
System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
System.arraycopy(bufcolumn, 0, newbufcolumn, bufsize - tokenBegin, bufpos);
bufcolumn = newbufcolumn;
maxNextCharInd = (bufpos += (bufsize - tokenBegin));
} else {
System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
buffer = newbuffer;
System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
bufline = newbufline;
System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
bufcolumn = newbufcolumn;
maxNextCharInd = (bufpos -= tokenBegin);
}
} catch (Throwable t) {
throw new Error(t.getMessage());
}
bufsize += 2048;
available = bufsize;
tokenBegin = 0;
}","protected void ExpandBuff(boolean wrapAround) {
char[] charArrayVar1 = charArrayLiteral2;
int[] intArrayVar3 = intArrayLiteral4;
int[] intArrayVar5 = intArrayLiteral4;
try {
if (wrapAround) {
System.arraycopy(buffer, tokenBegin, charArrayVar1, 0, bufsize - tokenBegin);
System.arraycopy(buffer, 0, charArrayVar1, bufsize - tokenBegin, bufpos);
buffer = charArrayVar1;
System.arraycopy(bufline, tokenBegin, intArrayVar3, 0, bufsize - tokenBegin);
System.arraycopy(bufline, 0, intArrayVar3, bufsize - tokenBegin, bufpos);
bufline = intArrayVar3;
System.arraycopy(bufcolumn, tokenBegin, intArrayVar5, 0, bufsize - tokenBegin);
System.arraycopy(bufcolumn, 0, intArrayVar5, bufsize - tokenBegin, bufpos);
bufcolumn = intArrayVar5;
maxNextCharInd = (bufpos += (bufsize - tokenBegin));
} else {
System.arraycopy(buffer, tokenBegin, charArrayVar1, 0, bufsize - tokenBegin);
buffer = charArrayVar1;
System.arraycopy(bufline, tokenBegin, intArrayVar3, 0, bufsize - tokenBegin);
bufline = intArrayVar3;
System.arraycopy(bufcolumn, tokenBegin, intArrayVar5, 0, bufsize - tokenBegin);
bufcolumn = intArrayVar5;
maxNextCharInd = (bufpos -= tokenBegin);
}
} catch (Throwable t) {
throw new Error(t.getMessage());
}
bufsize += 2048;
available = bufsize;
tokenBegin = 0;
}"
6921,I18N,DM_DEFAULT_ENCODING,FP,configuration,4132,"this(new java.io.InputStreamReader(dstream), startline, startcolumn, buffersize);
","public SimpleCharStream(java.io.InputStream dstream, int startline, int startcolumn, int buffersize) {
this(new java.io.InputStreamReader(dstream), startline, startcolumn, buffersize);
}","public SimpleCharStream(java.io.InputStream dstream, int startline, int startcolumn, int buffersize) {
this(new java.io.InputStreamReader(dstream), startline, startcolumn, buffersize);
}"
6931,PERFORMANCE,SBSC_USE_STRINGBUFFER_CONCATENATION,FP,configuration,4142,"retval += "" \"""";
","public String getMessage() {
if (!specialConstructor) {
return super.getMessage();
}
StringBuffer expected = new StringBuffer();
int maxSize = 0;
for (int i = 0; i < expectedTokenSequences.length; i++) {
if (maxSize < expectedTokenSequences[i].length) {
maxSize = expectedTokenSequences[i].length;
}
for (int j = 0; j < expectedTokenSequences[i].length; j++) {
expected.append(tokenImage[expectedTokenSequences[i][j]]).append(' ');
}
if (expectedTokenSequences[i][expectedTokenSequences[i].length - 1] != 0) {
expected.append(""..."");
}
expected.append(eol).append(""    "");
}
String retval = ""Encountered \"""";
Token tok = currentToken.next;
for (int i = 0; i < maxSize; i++) {
if (i != 0)
retval += "" "";
if (tok.kind == 0) {
retval += tokenImage[0];
break;
}
retval += "" "" + tokenImage[tok.kind];
retval += "" \"""";
retval += add_escapes(tok.image);
retval += "" \"""";
tok = tok.next;
}
retval += ""\"" at line "" + currentToken.next.beginLine + "", column "" + currentToken.next.beginColumn;
retval += ""."" + eol;
if (expectedTokenSequences.length == 1) {
retval += ""Was expecting:"" + eol + ""    "";
} else {
retval += ""Was expecting one of:"" + eol + ""    "";
}
retval += expected.toString();
return retval;
}","public String getMessage() {
if (!specialConstructor) {
return super.getMessage();
}
StringBuffer stringbufferVar1 = stringbufferLiteral2;
int intVar3 = intLiteral4;
for (int intVar11 = intLiteral12; intVar5 < intLiteral1; intVar5++) {
if (intVar3 < expectedTokenSequences[intVar5].length) {
intVar3 = expectedTokenSequences[intVar5].length;
}
for (int intVar13 = intLiteral12; intVar6 < intLiteral2; intVar6++) {
stringbufferVar1.append(tokenImage[expectedTokenSequences[intVar5][intVar6]]).append(' ');
}
if (expectedTokenSequences[intVar5][expectedTokenSequences[intVar5].length - 1] != 0) {
stringbufferVar1.append(""..."");
}
stringbufferVar1.append(eol).append(""    "");
}
String stringVar7 = stringLiteral8;
Token tokenVar9 = tokenLiteral10;
for (int intVar11 = intLiteral12; intVar5 < intLiteral3; intVar5++) {
if (intVar5 != 0)
stringVar7 += "" "";
if (tokenVar9.kind == 0) {
stringVar7 += tokenImage[0];
break;
}
stringVar7 += "" "" + tokenImage[tokenVar9.kind];
stringVar7 += "" \"""";
stringVar7 += add_escapes(tokenVar9.image);
stringVar7 += "" \"""";
tokenVar9 = tokenVar9.next;
}
stringVar7 += ""\"" at line "" + currentToken.next.beginLine + "", column "" + currentToken.next.beginColumn;
stringVar7 += ""."" + eol;
if (expectedTokenSequences.length == 1) {
stringVar7 += ""Was expecting:"" + eol + ""    "";
} else {
stringVar7 += ""Was expecting one of:"" + eol + ""    "";
}
stringVar7 += stringbufferVar1.toString();
return stringVar7;
}"
6938,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,configuration,4149,"String key = null;
Object value = null;
ConfigurationNode node = new DefaultConfigurationNode();
key = String();
node.setName(key);
jj_consume_token(EQUAL);
value = Element();
node.setValue(value);
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
case DICT_SEPARATOR:
jj_consume_token(DICT_SEPARATOR);
break;
default:
jj_la1[1] = jj_gen;
;
}
{if (true) return node;}
","final public ConfigurationNode Property() throws ParseException {
String key = null;
Object value = null;
ConfigurationNode node = new DefaultConfigurationNode();
key = String();
node.setName(key);
jj_consume_token(EQUAL);
value = Element();
node.setValue(value);
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case DICT_SEPARATOR:
jj_consume_token(DICT_SEPARATOR);
break;
default:
jj_la1[1] = jj_gen;
;
}
{
if (true)
return node;
}
throw new Error(""Missing return statement in function"");
}","final public ConfigurationNode Property() throws ParseException {
String stringVar1 = stringLiteral2;
Object objectVar3 = stringLiteral2;
ConfigurationNode configurationnodeVar4 = configurationnodeLiteral5;
stringVar1 = String();
configurationnodeVar4.setName(stringVar1);
jj_consume_token(EQUAL);
objectVar3 = Element();
configurationnodeVar4.setValue(objectVar3);
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case DICT_SEPARATOR:
jj_consume_token(DICT_SEPARATOR);
break;
default:
jj_la1[1] = jj_gen;
;
}
{
if (true)
return configurationnodeVar4;
}
throw new Error(""Missing return statement in function"");
}"
6941,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,configuration,4152,"token = jj_consume_token(DATE);
{if (true) return parseDate(token.image);}
","final public Date Date() throws ParseException {
Token token;
token = jj_consume_token(DATE);
{
if (true)
return parseDate(token.image);
}
throw new Error(""Missing return statement in function"");
}","final public Date Date() throws ParseException {
Token tokenVar1;
tokenVar1 = jj_consume_token(DATE);
{
if (true)
return parseDate(tokenVar1.image);
}
throw new Error(""Missing return statement in function"");
}"
6942,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,configuration,4153,"if (lexState >= 1 || lexState < 0)
{
throw new TokenMgrError(""Error: Ignoring invalid lexical state : "" + lexState + "". State unchanged."", TokenMgrError.INVALID_LEXICAL_STATE);
}
else
{
curLexState = lexState;
}
}
","public void SwitchTo(int lexState) {
if (lexState >= 1 || lexState < 0) {
throw new TokenMgrError(""Error: Ignoring invalid lexical state : "" + lexState + "". State unchanged."", TokenMgrError.INVALID_LEXICAL_STATE);
} else {
curLexState = lexState;
}
}","public void SwitchTo(int lexState) {
if (lexState >= 1 || lexState < 0) {
throw new TokenMgrError(""Error: Ignoring invalid lexical state : "" + lexState + "". State unchanged."", TokenMgrError.INVALID_LEXICAL_STATE);
} else {
curLexState = lexState;
}
}"
6945,DODGY_CODE,DB_DUPLICATE_SWITCH_CLAUSES,FP,configuration,4156,"if ((jjbitVec0[i2] & l2) == 0L)
{
break;
}
if (kind > 21)
{
kind = 21;
}
jjCheckNAdd(8);
break;
","private int jjMoveNfa_0(int startState, int curPos) {
int startsAt = 0;
jjnewStateCnt = 14;
int i = 1;
jjstateSet[0] = startState;
int kind = 0x7fffffff;
for (; ; ) {
if (++jjround == 0x7fffffff) {
ReInitRounds();
}
if (curChar < 64) {
long l = 1L << curChar;
do {
switch(jjstateSet[--i]) {
case 15:
if ((0xd7ffecfaffffd9ffL & l) != 0L) {
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
}
if ((0x7ff280100000000L & l) != 0L) {
jjCheckNAddTwoStates(4, 5);
} else if (curChar == 62) {
if (kind > 20) {
kind = 20;
}
}
break;
case 6:
if ((0xd7ffecfaffffd9ffL & l) != 0L) {
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
}
if ((0x3ff000100002600L & l) != 0L) {
jjCheckNAddTwoStates(1, 2);
} else if (curChar == 42) {
jjstateSet[jjnewStateCnt++] = 3;
} else if (curChar == 62) {
if (kind > 19) {
kind = 19;
}
}
break;
case 14:
if ((0xfffffffbffffffffL & l) != 0L) {
jjCheckNAddStates(0, 2);
} else if (curChar == 34) {
if (kind > 22) {
kind = 22;
}
}
break;
case 3:
case 8:
if ((0xd7ffecfaffffd9ffL & l) == 0L) {
break;
}
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
break;
case 0:
if ((0xd7ffecfaffffd9ffL & l) != 0L) {
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
} else if (curChar == 34) {
jjCheckNAddStates(0, 2);
}
if (curChar == 60) {
jjstateSet[jjnewStateCnt++] = 6;
}
if (curChar == 60) {
jjCheckNAddTwoStates(1, 2);
}
break;
case 1:
if ((0x3ff000100002600L & l) != 0L) {
jjCheckNAddTwoStates(1, 2);
}
break;
case 2:
if (curChar == 62 && kind > 19) {
kind = 19;
}
break;
case 4:
if ((0x7ff280100000000L & l) != 0L) {
jjCheckNAddTwoStates(4, 5);
}
break;
case 5:
if (curChar == 62 && kind > 20) {
kind = 20;
}
break;
case 7:
if (curChar == 60) {
jjstateSet[jjnewStateCnt++] = 6;
}
break;
case 9:
case 11:
if (curChar == 34) {
jjCheckNAddStates(0, 2);
}
break;
case 10:
if ((0xfffffffbffffffffL & l) != 0L) {
jjCheckNAddStates(0, 2);
}
break;
case 13:
if (curChar == 34 && kind > 22) {
kind = 22;
}
break;
default:
break;
}
} while (i != startsAt);
} else if (curChar < 128) {
long l = 1L << (curChar & 077);
do {
switch(jjstateSet[--i]) {
case 15:
if ((0xd7ffffffffffffffL & l) != 0L) {
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
}
if (curChar == 90) {
jjCheckNAddTwoStates(4, 5);
}
break;
case 6:
if ((0xd7ffffffffffffffL & l) != 0L) {
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
}
if ((0x7e0000007eL & l) != 0L) {
jjCheckNAddTwoStates(1, 2);
}
break;
case 14:
jjCheckNAddStates(0, 2);
if (curChar == 92) {
jjstateSet[jjnewStateCnt++] = 11;
}
break;
case 3:
if ((0xd7ffffffffffffffL & l) != 0L) {
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
}
if (curChar == 68) {
jjCheckNAddTwoStates(4, 5);
}
break;
case 0:
case 8:
if ((0xd7ffffffffffffffL & l) == 0L) {
break;
}
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
break;
case 1:
if ((0x7e0000007eL & l) != 0L) {
jjCheckNAddTwoStates(1, 2);
}
break;
case 4:
if (curChar == 90) {
jjCheckNAddTwoStates(4, 5);
}
break;
case 10:
jjCheckNAddStates(0, 2);
break;
case 12:
if (curChar == 92) {
jjstateSet[jjnewStateCnt++] = 11;
}
break;
default:
break;
}
} while (i != startsAt);
} else {
int i2 = (curChar & 0xff) >> 6;
long l2 = 1L << (curChar & 077);
do {
switch(jjstateSet[--i]) {
case 15:
case 8:
if ((jjbitVec0[i2] & l2) == 0L) {
break;
}
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
break;
case 6:
if ((jjbitVec0[i2] & l2) == 0L) {
break;
}
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
break;
case 14:
case 10:
if ((jjbitVec0[i2] & l2) != 0L) {
jjCheckNAddStates(0, 2);
}
break;
case 3:
if ((jjbitVec0[i2] & l2) == 0L) {
break;
}
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
break;
case 0:
if ((jjbitVec0[i2] & l2) == 0L) {
break;
}
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
break;
default:
break;
}
} while (i != startsAt);
}
if (kind != 0x7fffffff) {
jjmatchedKind = kind;
jjmatchedPos = curPos;
kind = 0x7fffffff;
}
++curPos;
if ((i = jjnewStateCnt) == (startsAt = 14 - (jjnewStateCnt = startsAt))) {
return curPos;
}
try {
curChar = input_stream.readChar();
} catch (java.io.IOException e) {
return curPos;
}
}
}","private int jjMoveNfa_0(int startState, int curPos) {
int intVar1 = intLiteral2;
jjnewStateCnt = 14;
int intVar3 = intLiteral4;
jjstateSet[0] = startState;
int intVar5 = intLiteral6;
for (; ; ) {
if (++jjround == 0x7fffffff) {
ReInitRounds();
}
if (curChar < 64) {
long longVar7 = longLiteral8;
do {
switch(jjstateSet[--intVar3]) {
case 15:
if ((0xd7ffecfaffffd9ffL & longVar7) != 0L) {
if (intVar5 > 21) {
intVar5 = 21;
}
jjCheckNAdd(8);
}
if ((0x7ff280100000000L & longVar7) != 0L) {
jjCheckNAddTwoStates(4, 5);
} else if (curChar == 62) {
if (intVar5 > 20) {
intVar5 = 20;
}
}
break;
case 6:
if ((0xd7ffecfaffffd9ffL & longVar7) != 0L) {
if (intVar5 > 21) {
intVar5 = 21;
}
jjCheckNAdd(8);
}
if ((0x3ff000100002600L & longVar7) != 0L) {
jjCheckNAddTwoStates(1, 2);
} else if (curChar == 42) {
jjstateSet[jjnewStateCnt++] = 3;
} else if (curChar == 62) {
if (intVar5 > 19) {
intVar5 = 19;
}
}
break;
case 14:
if ((0xfffffffbffffffffL & longVar7) != 0L) {
jjCheckNAddStates(0, 2);
} else if (curChar == 34) {
if (intVar5 > 22) {
intVar5 = 22;
}
}
break;
case 3:
case 8:
if ((0xd7ffecfaffffd9ffL & longVar7) == 0L) {
break;
}
if (intVar5 > 21) {
intVar5 = 21;
}
jjCheckNAdd(8);
break;
case 0:
if ((0xd7ffecfaffffd9ffL & longVar7) != 0L) {
if (intVar5 > 21) {
intVar5 = 21;
}
jjCheckNAdd(8);
} else if (curChar == 34) {
jjCheckNAddStates(0, 2);
}
if (curChar == 60) {
jjstateSet[jjnewStateCnt++] = 6;
}
if (curChar == 60) {
jjCheckNAddTwoStates(1, 2);
}
break;
case 1:
if ((0x3ff000100002600L & longVar7) != 0L) {
jjCheckNAddTwoStates(1, 2);
}
break;
case 2:
if (curChar == 62 && intVar5 > 19) {
intVar5 = 19;
}
break;
case 4:
if ((0x7ff280100000000L & longVar7) != 0L) {
jjCheckNAddTwoStates(4, 5);
}
break;
case 5:
if (curChar == 62 && intVar5 > 20) {
intVar5 = 20;
}
break;
case 7:
if (curChar == 60) {
jjstateSet[jjnewStateCnt++] = 6;
}
break;
case 9:
case 11:
if (curChar == 34) {
jjCheckNAddStates(0, 2);
}
break;
case 10:
if ((0xfffffffbffffffffL & longVar7) != 0L) {
jjCheckNAddStates(0, 2);
}
break;
case 13:
if (curChar == 34 && intVar5 > 22) {
intVar5 = 22;
}
break;
default:
break;
}
} while (intVar3 != intVar1);
} else if (curChar < 128) {
long longVar7 = longLiteral9;
do {
switch(jjstateSet[--intVar3]) {
case 15:
if ((0xd7ffffffffffffffL & longVar7) != 0L) {
if (intVar5 > 21) {
intVar5 = 21;
}
jjCheckNAdd(8);
}
if (curChar == 90) {
jjCheckNAddTwoStates(4, 5);
}
break;
case 6:
if ((0xd7ffffffffffffffL & longVar7) != 0L) {
if (intVar5 > 21) {
intVar5 = 21;
}
jjCheckNAdd(8);
}
if ((0x7e0000007eL & longVar7) != 0L) {
jjCheckNAddTwoStates(1, 2);
}
break;
case 14:
jjCheckNAddStates(0, 2);
if (curChar == 92) {
jjstateSet[jjnewStateCnt++] = 11;
}
break;
case 3:
if ((0xd7ffffffffffffffL & longVar7) != 0L) {
if (intVar5 > 21) {
intVar5 = 21;
}
jjCheckNAdd(8);
}
if (curChar == 68) {
jjCheckNAddTwoStates(4, 5);
}
break;
case 0:
case 8:
if ((0xd7ffffffffffffffL & longVar7) == 0L) {
break;
}
if (intVar5 > 21) {
intVar5 = 21;
}
jjCheckNAdd(8);
break;
case 1:
if ((0x7e0000007eL & longVar7) != 0L) {
jjCheckNAddTwoStates(1, 2);
}
break;
case 4:
if (curChar == 90) {
jjCheckNAddTwoStates(4, 5);
}
break;
case 10:
jjCheckNAddStates(0, 2);
break;
case 12:
if (curChar == 92) {
jjstateSet[jjnewStateCnt++] = 11;
}
break;
default:
break;
}
} while (intVar3 != intVar1);
} else {
int intVar10 = intLiteral11;
long longVar12 = longLiteral9;
do {
switch(jjstateSet[--intVar3]) {
case 15:
case 8:
if ((jjbitVec0[intVar10] & longVar12) == 0L) {
break;
}
if (intVar5 > 21) {
intVar5 = 21;
}
jjCheckNAdd(8);
break;
case 6:
if ((jjbitVec0[intVar10] & longVar12) == 0L) {
break;
}
if (intVar5 > 21) {
intVar5 = 21;
}
jjCheckNAdd(8);
break;
case 14:
case 10:
if ((jjbitVec0[intVar10] & longVar12) != 0L) {
jjCheckNAddStates(0, 2);
}
break;
case 3:
if ((jjbitVec0[intVar10] & longVar12) == 0L) {
break;
}
if (intVar5 > 21) {
intVar5 = 21;
}
jjCheckNAdd(8);
break;
case 0:
if ((jjbitVec0[intVar10] & longVar12) == 0L) {
break;
}
if (intVar5 > 21) {
intVar5 = 21;
}
jjCheckNAdd(8);
break;
default:
break;
}
} while (intVar3 != intVar1);
}
if (intVar5 != 0x7fffffff) {
jjmatchedKind = intVar5;
jjmatchedPos = curPos;
intVar5 = 0x7fffffff;
}
++curPos;
if ((intVar3 = jjnewStateCnt) == (intVar1 = 14 - (jjnewStateCnt = intVar1))) {
return curPos;
}
try {
curChar = input_stream.readChar();
} catch (java.io.IOException e) {
return curPos;
}
}
}"
6949,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,configuration,4160,"if (maxNextCharInd == available)
{
if (available == bufsize)
{
if (tokenBegin > 2048)
{
bufpos = maxNextCharInd = 0;
available = tokenBegin;
}
else if (tokenBegin < 0)
bufpos = maxNextCharInd = 0;
else
ExpandBuff(false);
}
else if (available > tokenBegin)
available = bufsize;
else if ((tokenBegin - available) < 2048)
ExpandBuff(true);
else
available = tokenBegin;
}
int i;
try {
if ((i = inputStream.read(buffer, maxNextCharInd,
available - maxNextCharInd)) == -1)
{
inputStream.close();
throw new java.io.IOException();
}
else
maxNextCharInd += i;
return;
}
catch(java.io.IOException e) {
--bufpos;
backup(0);
if (tokenBegin == -1)
tokenBegin = bufpos;
throw e;
","protected void FillBuff() throws java.io.IOException {
if (maxNextCharInd == available) {
if (available == bufsize) {
if (tokenBegin > 2048) {
bufpos = maxNextCharInd = 0;
available = tokenBegin;
} else if (tokenBegin < 0)
bufpos = maxNextCharInd = 0;
else
ExpandBuff(false);
} else if (available > tokenBegin)
available = bufsize;
else if ((tokenBegin - available) < 2048)
ExpandBuff(true);
else
available = tokenBegin;
}
int i;
try {
if ((i = inputStream.read(buffer, maxNextCharInd, available - maxNextCharInd)) == -1) {
inputStream.close();
throw new java.io.IOException();
} else
maxNextCharInd += i;
return;
} catch (java.io.IOException e) {
--bufpos;
backup(0);
if (tokenBegin == -1)
tokenBegin = bufpos;
throw e;
}
}","protected void FillBuff() throws java.io.IOException {
if (maxNextCharInd == available) {
if (available == bufsize) {
if (tokenBegin > 2048) {
bufpos = maxNextCharInd = 0;
available = tokenBegin;
} else if (tokenBegin < 0)
bufpos = maxNextCharInd = 0;
else
ExpandBuff(false);
} else if (available > tokenBegin)
available = bufsize;
else if ((tokenBegin - available) < 2048)
ExpandBuff(true);
else
available = tokenBegin;
}
int intVar1;
try {
if ((intVar1 = inputStream.read(buffer, maxNextCharInd, available - maxNextCharInd)) == -1) {
inputStream.close();
throw new java.io.IOException();
} else
maxNextCharInd += intVar1;
return;
} catch (java.io.IOException e) {
--bufpos;
backup(0);
if (tokenBegin == -1)
tokenBegin = bufpos;
throw e;
}
}"
6951,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,configuration,4162,"ReInit(encoding == null ? new java.io.InputStreamReader(dstream) : new java.io.InputStreamReader(dstream, encoding), startline, startcolumn, buffersize);
}
","public void ReInit(java.io.InputStream dstream, String encoding, int startline, int startcolumn, int buffersize) throws java.io.UnsupportedEncodingException {
ReInit(encoding == null ? new java.io.InputStreamReader(dstream) : new java.io.InputStreamReader(dstream, encoding), startline, startcolumn, buffersize);
}","public void ReInit(java.io.InputStream dstream, String encoding, int startline, int startcolumn, int buffersize) throws java.io.UnsupportedEncodingException {
ReInit(encoding == null ? new java.io.InputStreamReader(dstream) : new java.io.InputStreamReader(dstream, encoding), startline, startcolumn, buffersize);
}"
6956,I18N,DM_DEFAULT_ENCODING,FP,configuration,4167,"ReInit(new java.io.InputStreamReader(dstream), startline, startcolumn, buffersize);
","public void ReInit(java.io.InputStream dstream, int startline, int startcolumn, int buffersize) {
ReInit(new java.io.InputStreamReader(dstream), startline, startcolumn, buffersize);
}","public void ReInit(java.io.InputStream dstream, int startline, int startcolumn, int buffersize) {
ReInit(new java.io.InputStreamReader(dstream), startline, startcolumn, buffersize);
}"
6967,DODGY_CODE,REC_CATCH_EXCEPTION,FP,configuration,4178,"catch (Exception e)
","public void load(Reader in) throws ConfigurationException {
if (!(getRootNode() instanceof PListNode)) {
initRoot();
}
EntityResolver resolver = new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
};
XMLPropertyListHandler handler = new XMLPropertyListHandler(getRootNode());
try {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}","public void load(Reader in) throws ConfigurationException {
if (!(getRootNode() instanceof PListNode)) {
initRoot();
}
EntityResolver entityresolverVar1 = entityresolverLiteral2;
XMLPropertyListHandler xmlpropertylisthandlerVar3 = xmlpropertylisthandlerLiteral4;
try {
SAXParserFactory saxparserfactoryVar5 = saxparserfactoryLiteral6;
saxparserfactoryVar5.setValidating(true);
SAXParser saxparserVar7 = saxparserLiteral8;
saxparserVar7.getXMLReader().setEntityResolver(entityresolverVar1);
saxparserVar7.getXMLReader().setContentHandler(xmlpropertylisthandlerVar3);
saxparserVar7.getXMLReader().parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}"
7006,PERFORMANCE,DM_NUMBER_CTOR,FP,configuration,4217,"return getByte(key, new Byte(defaultValue)).byteValue();
","public byte getByte(String key, byte defaultValue) {
return getByte(key, new Byte(defaultValue)).byteValue();
}","public byte getByte(String key, byte defaultValue) {
return getByte(key, new Byte(defaultValue)).byteValue();
}"
7014,DODGY_CODE,RI_REDUNDANT_INTERFACES,FP,configuration,4225,"public class CombinedConfiguration extends HierarchicalReloadableConfiguration implements
ConfigurationListener, Cloneable
{
public static final int EVENT_COMBINED_INVALIDATE = 40;
private static final long serialVersionUID = 8338574525528692307L;
private static final DefaultExpressionEngine AT_ENGINE = new DefaultExpressionEngine();
private static final NodeCombiner DEFAULT_COMBINER = new UnionCombiner();
private static final String PROP_RELOAD_CHECK = ""CombinedConfigurationReloadCheck"";
private NodeCombiner nodeCombiner;
private volatile ConfigurationNode combinedRoot;
private List<ConfigData> configurations;
private Map<String, AbstractConfiguration> namedConfigurations;
private boolean ignoreReloadExceptions = true;
private boolean reloadRequired;
private ExpressionEngine conversionExpressionEngine;
private boolean forceReloadCheck;
public CombinedConfiguration(NodeCombiner comb)
{
setNodeCombiner((comb != null) ? comb : DEFAULT_COMBINER);
clear();
}
public CombinedConfiguration(NodeCombiner comb, Lock lock)
{
super(lock);
setNodeCombiner((comb != null) ? comb : DEFAULT_COMBINER);
clear();
}
public CombinedConfiguration(Lock lock)
{
this(null, lock);
}
public CombinedConfiguration()
{
this(null, null);
}
public NodeCombiner getNodeCombiner()
{
return nodeCombiner;
}
public void setNodeCombiner(NodeCombiner nodeCombiner)
{
if (nodeCombiner == null)
{
throw new IllegalArgumentException(
""Node combiner must not be null!"");
}
this.nodeCombiner = nodeCombiner;
invalidate();
}
public boolean isForceReloadCheck()
{
return forceReloadCheck;
}
public void setForceReloadCheck(boolean forceReloadCheck)
{
this.forceReloadCheck = forceReloadCheck;
}
public ExpressionEngine getConversionExpressionEngine()
{
return conversionExpressionEngine;
}
public void setConversionExpressionEngine(
ExpressionEngine conversionExpressionEngine)
{
this.conversionExpressionEngine = conversionExpressionEngine;
}
public boolean isIgnoreReloadExceptions()
{
return ignoreReloadExceptions;
}
public void setIgnoreReloadExceptions(boolean ignoreReloadExceptions)
{
this.ignoreReloadExceptions = ignoreReloadExceptions;
}
public void addConfiguration(AbstractConfiguration config, String name,
String at)
{
if (config == null)
{
throw new IllegalArgumentException(
""Added configuration must not be null!"");
}
if (name != null && namedConfigurations.containsKey(name))
{
throw new ConfigurationRuntimeException(
""A configuration with the name '""
+ name
+ ""' already exists in this combined configuration!"");
}
ConfigData cd = new ConfigData(config, name, at);
if (getLogger().isDebugEnabled())
{
getLogger().debug(""Adding configuration "" + config + "" with name "" + name);
}
configurations.add(cd);
if (name != null)
{
namedConfigurations.put(name, config);
}
config.addConfigurationListener(this);
invalidate();
}
public void addConfiguration(AbstractConfiguration config, String name)
{
addConfiguration(config, name, null);
}
public void addConfiguration(AbstractConfiguration config)
{
addConfiguration(config, null, null);
}
public int getNumberOfConfigurations()
{
return configurations.size();
}
public Configuration getConfiguration(int index)
{
ConfigData cd = configurations.get(index);
return cd.getConfiguration();
}
public Configuration getConfiguration(String name)
{
return namedConfigurations.get(name);
}
public List<AbstractConfiguration> getConfigurations()
{
List<AbstractConfiguration> list = new ArrayList<AbstractConfiguration>(configurations.size());
for (ConfigData cd : configurations)
{
list.add(cd.getConfiguration());
}
return list;
}
public List<String> getConfigurationNameList()
{
List<String> list = new ArrayList<String>(configurations.size());
for (ConfigData cd : configurations)
{
list.add(cd.getName());
}
return list;
}
public boolean removeConfiguration(Configuration config)
{
for (int index = 0; index < getNumberOfConfigurations(); index++)
{
if (configurations.get(index).getConfiguration() == config)
{
removeConfigurationAt(index);
return true;
}
}
return false;
}
public Configuration removeConfigurationAt(int index)
{
ConfigData cd = configurations.remove(index);
if (cd.getName() != null)
{
namedConfigurations.remove(cd.getName());
}
cd.getConfiguration().removeConfigurationListener(this);
invalidate();
return cd.getConfiguration();
}
public Configuration removeConfiguration(String name)
{
Configuration conf = getConfiguration(name);
if (conf != null)
{
removeConfiguration(conf);
}
return conf;
}
public Set<String> getConfigurationNames()
{
return namedConfigurations.keySet();
}
public void invalidate()
{
reloadRequired = true;
fireEvent(EVENT_COMBINED_INVALIDATE, null, null, false);
}
public void configurationChanged(ConfigurationEvent event)
{
if (event.getType() == AbstractFileConfiguration.EVENT_CONFIG_CHANGED)
{
fireEvent(event.getType(), event.getPropertyName(), event.getPropertyValue(), event.isBeforeUpdate());
}
else if (!event.isBeforeUpdate())
{
invalidate();
}
}
@Override
public ConfigurationNode getRootNode()
{
synchronized (getReloadLock())
{
if (reloadRequired || combinedRoot == null)
{
combinedRoot = constructCombinedNode();
reloadRequired = false;
}
return combinedRoot;
}
}
@Override
public void clear()
{
fireEvent(EVENT_CLEAR, null, null, true);
configurations = new ArrayList<ConfigData>();
namedConfigurations = new HashMap<String, AbstractConfiguration>();
fireEvent(EVENT_CLEAR, null, null, false);
invalidate();
}
@Override
public Object clone()
{
CombinedConfiguration copy = (CombinedConfiguration) super.clone();
copy.clear();
for (ConfigData cd : configurations)
{
copy.addConfiguration((AbstractConfiguration) ConfigurationUtils
.cloneConfiguration(cd.getConfiguration()), cd.getName(),
cd.getAt());
}
copy.setRootNode(new DefaultConfigurationNode());
return copy;
}
public Configuration getSource(String key)
{
if (key == null)
{
throw new IllegalArgumentException(""Key must not be null!"");
}
List<ConfigurationNode> nodes = fetchNodeList(key);
if (nodes.isEmpty())
{
return null;
}
Iterator<ConfigurationNode> it = nodes.iterator();
Configuration source = findSourceConfiguration(it.next());
while (it.hasNext())
{
Configuration src = findSourceConfiguration(it.next());
if (src != source)
{
throw new IllegalArgumentException(""The key "" + key
+ "" is defined by multiple sources!"");
}
}
return source;
}
@Override
protected List<ConfigurationNode> fetchNodeList(String key)
{
if (isForceReloadCheck())
{
performReloadCheck();
}
return super.fetchNodeList(key);
}
protected void performReloadCheck()
{
for (ConfigData cd : configurations)
{
try
{
cd.getConfiguration().getProperty(PROP_RELOAD_CHECK);
}
catch (Exception ex)
{
if (!ignoreReloadExceptions)
{
throw new ConfigurationRuntimeException(ex);
}
}
}
}
private ConfigurationNode constructCombinedNode()
{
if (getNumberOfConfigurations() < 1)
{
if (getLogger().isDebugEnabled())
{
getLogger().debug(""No configurations defined for "" + this);
}
return new ViewNode();
}
else
{
Iterator<ConfigData> it = configurations.iterator();
ConfigurationNode node = it.next().getTransformedRoot();
while (it.hasNext())
{
node = getNodeCombiner().combine(node,
it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled())
{
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}
private Configuration findSourceConfiguration(ConfigurationNode node)
{
synchronized (getReloadLock())
{
ConfigurationNode root = null;
ConfigurationNode current = node;
while (current != null)
{
root = current;
current = current.getParentNode();
}
for (ConfigData cd : configurations)
{
if (root == cd.getRootNode())
{
return cd.getConfiguration();
}
}
}
return this;
",private List<ConfigData> configurations;,private List<ConfigData> list<configdata>Var1;
7024,EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,FP,configuration,4235,"ResultSet rs = pstmt.executeQuery();
","public Object getProperty(String key) {
Object result = null;
StringBuilder query = new StringBuilder(""SELECT * FROM "");
query.append(table).append("" WHERE "");
query.append(keyColumn).append(""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
ResultSet rs = pstmt.executeQuery();
List<Object> results = new ArrayList<Object>();
while (rs.next()) {
Object value = rs.getObject(valueColumn);
if (isDelimiterParsingDisabled()) {
results.add(value);
} else {
Iterator<?> it = PropertyConverter.toIterator(value, getListDelimiter());
while (it.hasNext()) {
results.add(it.next());
}
}
}
if (!results.isEmpty()) {
result = (results.size() > 1) ? results : results.get(0);
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
close(conn, pstmt);
}
return result;
}","public Object getProperty(String key) {
Object objectVar1 = objectLiteral2;
StringBuilder stringbuilderVar3 = stringbuilderLiteral4;
stringbuilderVar3.append(table).append("" WHERE "");
stringbuilderVar3.append(keyColumn).append(""=?"");
if (nameColumn != null) {
stringbuilderVar3.append("" AND "" + nameColumn + ""=?"");
}
Connection connectionVar5 = objectLiteral2;
PreparedStatement preparedstatementVar6 = objectLiteral2;
try {
connectionVar5 = getConnection();
preparedstatementVar6 = connectionVar5.prepareStatement(stringbuilderVar3.toString());
preparedstatementVar6.setString(1, key);
if (nameColumn != null) {
preparedstatementVar6.setString(2, name);
}
ResultSet resultsetVar7 = resultsetLiteral8;
List<Object> list<object>Var9 = list<object>Literal10;
while (resultsetVar7.next()) {
Object objectVar11 = objectLiteral12;
if (isDelimiterParsingDisabled()) {
list<object>Var9.add(objectVar11);
} else {
Iterator<?> iterator<?>Var13 = iterator<?>Literal14;
while (iterator<?>Var13.hasNext()) {
list<object>Var9.add(iterator<?>Var13.next());
}
}
}
if (!list<object>Var9.isEmpty()) {
objectVar1 = (list<object>Var9.size() > 1) ? list<object>Var9 : list<object>Var9.get(0);
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
close(connectionVar5, preparedstatementVar6);
}
return objectVar1;
}"
7027,SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,configuration,4238,"pstmt = conn.prepareStatement(query.toString());
","public boolean containsKey(String key) {
boolean found = false;
StringBuilder query = new StringBuilder(""SELECT * FROM "" + table + "" WHERE "" + keyColumn + ""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
ResultSet rs = pstmt.executeQuery();
found = rs.next();
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
close(conn, pstmt);
}
return found;
}","public boolean containsKey(String key) {
boolean booleanVar1 = booleanLiteral2;
StringBuilder stringbuilderVar3 = stringbuilderLiteral4;
if (nameColumn != null) {
stringbuilderVar3.append("" AND "" + nameColumn + ""=?"");
}
Connection connectionVar5 = connectionLiteral6;
PreparedStatement preparedstatementVar7 = connectionLiteral6;
try {
connectionVar5 = getConnection();
preparedstatementVar7 = connectionVar5.prepareStatement(stringbuilderVar3.toString());
preparedstatementVar7.setString(1, key);
if (nameColumn != null) {
preparedstatementVar7.setString(2, name);
}
ResultSet resultsetVar8 = resultsetLiteral9;
booleanVar1 = resultsetVar8.next();
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
close(connectionVar5, preparedstatementVar7);
}
return booleanVar1;
}"
7034,BAD_PRACTICE,SE_BAD_FIELD,FP,configuration,4245,"private Map<String, ConfigurationProvider> providers;","private Map<String, ConfigurationProvider> providers;","private Map<String, ConfigurationProvider> map<string,configurationprovider>Var1;"
7039,BAD_PRACTICE,SE_BAD_FIELD,FP,configuration,4250,private StrSubstitutor localSubst = new StrSubstitutor(new ConfigurationInterpolator());,private StrSubstitutor localSubst = new StrSubstitutor(new ConfigurationInterpolator());,private StrSubstitutor strsubstitutorVar1 = strsubstitutorLiteral2;
7050,Multithreaded correctness,DL_SYNCHRONIZATION_ON_SHARED_CONSTANT,FP,configuration,4261,"synchronized (counterLock)
","public Lock(String name) {
this.name = name;
synchronized (counterLock) {
instanceId = ++counter;
}
}","public Lock(String name) {
this.name = name;
synchronized (counterLock) {
instanceId = ++counter;
}
}"
7059,CORRECTNESS,UR_UNINIT_READ_CALLED_FROM_SUPER_CONSTRUCTOR,FP,configuration,4270,"if (init)
","@Override
public void setRootNode(ConfigurationNode rootNode) {
if (init) {
getConfig().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}","@Override
public void setRootNode(ConfigurationNode rootNode) {
if (init) {
getConfig().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}"
7070,PERFORMANCE,URF_UNREAD_FIELD,FP,configuration,4281,private final String protocol;,private final String protocol;,private final String stringVar1;
7072,DODGY_CODE,REC_CATCH_EXCEPTION,FP,configuration,4283,"catch (Exception ex)
","private FileSystemOptions getOptions(String scheme) {
FileSystemOptions opts = new FileSystemOptions();
FileSystemConfigBuilder builder;
try {
builder = VFS.getManager().getFileSystemConfigBuilder(scheme);
} catch (Exception ex) {
return null;
}
FileOptionsProvider provider = getFileOptionsProvider();
if (provider != null) {
Map<String, Object> map = provider.getOptions();
if (map == null) {
return null;
}
int count = 0;
for (Map.Entry<String, Object> entry : map.entrySet()) {
try {
String key = entry.getKey();
if (FileOptionsProvider.CURRENT_USER.equals(key)) {
key = ""creatorName"";
}
setProperty(builder, opts, key, entry.getValue());
++count;
} catch (Exception ex) {
continue;
}
}
if (count > 0) {
return opts;
}
}
return null;
}","private FileSystemOptions getOptions(String scheme) {
FileSystemOptions filesystemoptionsVar1 = filesystemoptionsLiteral2;
FileSystemConfigBuilder filesystemconfigbuilderVar3;
try {
filesystemconfigbuilderVar3 = VFS.getManager().getFileSystemConfigBuilder(scheme);
} catch (Exception ex) {
return null;
}
FileOptionsProvider fileoptionsproviderVar4 = fileoptionsproviderLiteral5;
if (fileoptionsproviderVar4 != null) {
Map<String, Object> map<string,object>Var6 = map<string,object>Literal7;
if (map<string,object>Var6 == null) {
return null;
}
int intVar8 = intLiteral9;
for (Map.Entry<String, Object> map.entry<string,object>Var10 : map<string,object>Var6.entrySet()) {
try {
String stringVar11 = stringLiteral12;
if (FileOptionsProvider.CURRENT_USER.equals(stringVar11)) {
stringVar11 = ""creatorName"";
}
setProperty(filesystemconfigbuilderVar3, filesystemoptionsVar1, stringVar11, map.entry<string,object>Var10.getValue());
++intVar8;
} catch (Exception ex) {
continue;
}
}
if (intVar8 > 0) {
return filesystemoptionsVar1;
}
}
return null;
}"
7079,PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,configuration,4290,"{
public InputSource resolveEntity(String publicId, String systemId)
{
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
","@Override
public void save(Writer out) throws ConfigurationException {
PrintWriter writer = new PrintWriter(out);
String encoding = getEncoding() != null ? getEncoding() : DEFAULT_ENCODING;
writer.println(""<?xml version=\""1.0\"" encoding=\"""" + encoding + ""\""?>"");
writer.println(""<!DOCTYPE properties SYSTEM \""http://java.sun.com/dtd/properties.dtd\"">"");
writer.println(""<properties>"");
if (getHeader() != null) {
writer.println(""  <comment>"" + StringEscapeUtils.escapeXml(getHeader()) + ""</comment>"");
}
Iterator<String> keys = getKeys();
while (keys.hasNext()) {
String key = keys.next();
Object value = getProperty(key);
if (value instanceof List) {
writeProperty(writer, key, (List<?>) value);
} else {
writeProperty(writer, key, value);
}
}
writer.println(""</properties>"");
writer.flush();
}","@Override
public void save(Writer out) throws ConfigurationException {
PrintWriter printwriterVar1 = printwriterLiteral2;
String stringVar3 = stringLiteral4;
printwriterVar1.println(""<?xml version=\""1.0\"" encoding=\"""" + stringVar3 + ""\""?>"");
printwriterVar1.println(""<!DOCTYPE properties SYSTEM \""http://java.sun.com/dtd/properties.dtd\"">"");
printwriterVar1.println(""<properties>"");
if (getHeader() != null) {
printwriterVar1.println(""  <comment>"" + StringEscapeUtils.escapeXml(getHeader()) + ""</comment>"");
}
Iterator<String> iterator<string>Var5 = iterator<string>Literal6;
while (iterator<string>Var5.hasNext()) {
String stringVar7 = stringLiteral8;
Object objectVar9 = objectLiteral10;
if (objectVar9 instanceof List) {
writeProperty(printwriterVar1, stringVar7, (List<?>) objectVar9);
} else {
writeProperty(printwriterVar1, stringVar7, objectVar9);
}
}
printwriterVar1.println(""</properties>"");
printwriterVar1.flush();
}"
7096,DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,configuration,4307,"List<ConfigurationNode> lst = namedNodes.get(node.getName());
","public boolean removeNode(ConfigurationNode node) {
if (nodes != null && node != null && nodes.contains(node)) {
detachNode(node);
nodes.remove(node);
List<ConfigurationNode> lst = namedNodes.get(node.getName());
if (lst != null) {
lst.remove(node);
if (lst.isEmpty()) {
namedNodes.remove(node.getName());
}
}
return true;
} else {
return false;
}
}","public boolean removeNode(ConfigurationNode node) {
if (nodes != null && node != null && nodes.contains(node)) {
detachNode(node);
nodes.remove(node);
List<ConfigurationNode> list<configurationnode>Var1 = list<configurationnode>Literal2;
if (list<configurationnode>Var1 != null) {
list<configurationnode>Var1.remove(node);
if (list<configurationnode>Var1.isEmpty()) {
namedNodes.remove(node.getName());
}
}
return true;
} else {
return false;
}
}"
7120,DODGY_CODE,REC_CATCH_EXCEPTION,FP,configuration,4331,"catch (Exception e)
","public void reload() {
synchronized (reloadLock) {
if (noReload == 0) {
try {
enterNoReload();
if (strategy.reloadingRequired()) {
if (getLogger().isInfoEnabled()) {
getLogger().info(""Reloading configuration. URL is "" + getURL());
}
fireEvent(EVENT_RELOAD, null, getURL(), true);
setDetailEvents(false);
boolean autoSaveBak = this.isAutoSave();
this.setAutoSave(false);
try {
clear();
load();
} finally {
this.setAutoSave(autoSaveBak);
setDetailEvents(true);
}
fireEvent(EVENT_RELOAD, null, getURL(), false);
strategy.reloadingPerformed();
}
} catch (Exception e) {
fireError(EVENT_RELOAD, null, null, e);
} finally {
exitNoReload();
}
}
}
}","public void reload() {
synchronized (reloadLock) {
if (noReload == 0) {
try {
enterNoReload();
if (strategy.reloadingRequired()) {
if (getLogger().isInfoEnabled()) {
getLogger().info(""Reloading configuration. URL is "" + getURL());
}
fireEvent(EVENT_RELOAD, null, getURL(), true);
setDetailEvents(false);
boolean booleanVar1 = booleanLiteral2;
this.setAutoSave(false);
try {
clear();
load();
} finally {
this.setAutoSave(booleanVar1);
setDetailEvents(true);
}
fireEvent(EVENT_RELOAD, null, getURL(), false);
strategy.reloadingPerformed();
}
} catch (Exception e) {
fireError(EVENT_RELOAD, null, null, e);
} finally {
exitNoReload();
}
}
}
}"
7129,I18N,DM_DEFAULT_ENCODING,FP,configuration,4340,"dump(configuration, new PrintWriter(out));
","public static void dump(Configuration configuration, PrintStream out) {
dump(configuration, new PrintWriter(out));
}","public static void dump(Configuration configuration, PrintStream out) {
dump(configuration, new PrintWriter(out));
}"
7146,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,configuration,4357,"ConfigurationDeclaration decl = (ConfigurationDeclaration) data;
","public Object createBean(Class beanClass, BeanDeclaration data, Object param) throws Exception {
ConfigurationDeclaration decl = (ConfigurationDeclaration) data;
String tagName = decl.getNode().getName();
ConfigurationProvider provider = decl.getConfigurationBuilder().providerForTag(tagName);
if (provider == null) {
throw new ConfigurationRuntimeException(""No ConfigurationProvider registered for tag "" + tagName);
}
try {
return provider.getConfiguration(decl);
} catch (Exception ex) {
if (!decl.isOptional()) {
throw ex;
} else {
decl.getConfigurationBuilder().fireError(EVENT_ERR_LOAD_OPTIONAL, decl.getConfiguration().getString(ATTR_NAME), null, ex);
if (decl.isForceCreate()) {
try {
return provider.getEmptyConfiguration(decl);
} catch (Exception ex2) {
;
}
}
return null;
}
}
}","public Object createBean(Class beanClass, BeanDeclaration data, Object param) throws Exception {
ConfigurationDeclaration configurationdeclarationVar1 = configurationdeclarationLiteral2;
String stringVar3 = stringLiteral4;
ConfigurationProvider configurationproviderVar5 = configurationproviderLiteral6;
if (configurationproviderVar5 == null) {
throw new ConfigurationRuntimeException(""No ConfigurationProvider registered for tag "" + stringVar3);
}
try {
return configurationproviderVar5.getConfiguration(configurationdeclarationVar1);
} catch (Exception ex) {
if (!configurationdeclarationVar1.isOptional()) {
throw ex;
} else {
configurationdeclarationVar1.getConfigurationBuilder().fireError(EVENT_ERR_LOAD_OPTIONAL, configurationdeclarationVar1.getConfiguration().getString(ATTR_NAME), null, ex);
if (configurationdeclarationVar1.isForceCreate()) {
try {
return configurationproviderVar5.getEmptyConfiguration(configurationdeclarationVar1);
} catch (Exception ex2) {
;
}
}
return null;
}
}
}"
7188,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,configuration,4399,"jj_input_stream.ReInit(stream, 1, 1);
token_source.ReInit(jj_input_stream);
token = new Token();
jj_ntk = -1;
jj_gen = 0;
for (int i = 0; i < 6; i++) jj_la1[i] = -1;
for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
}
","public void ReInit(java.io.Reader stream) {
jj_input_stream.ReInit(stream, 1, 1);
token_source.ReInit(jj_input_stream);
token = new Token();
jj_ntk = -1;
jj_gen = 0;
for (int i = 0; i < 6; i++) jj_la1[i] = -1;
for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
}","public void ReInit(java.io.Reader stream) {
jj_input_stream.ReInit(stream, 1, 1);
token_source.ReInit(jj_input_stream);
token = new Token();
jj_ntk = -1;
jj_gen = 0;
for (int intVar3 = intLiteral4; intVar1 < intLiteral1; intVar1++) jj_la1[intVar1] = -1;
for (int intVar3 = intLiteral4; intVar1 < intLiteral2; intVar1++) jj_2_rtns[intVar1] = new JJCalls();
}"
7191,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,configuration,4402,"ReInit(stream);
SwitchTo(lexState);
}
","public void ReInit(SimpleCharStream stream, int lexState) {
ReInit(stream);
SwitchTo(lexState);
}","public void ReInit(SimpleCharStream stream, int lexState) {
ReInit(stream);
SwitchTo(lexState);
}"
7211,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,configuration,4422,"ReInit(new java.io.InputStreamReader(dstream), startline, startcolumn, 4096);
}
","public void ReInit(java.io.InputStream dstream, int startline, int startcolumn, int buffersize) {
ReInit(new java.io.InputStreamReader(dstream), startline, startcolumn, 4096);
}","public void ReInit(java.io.InputStream dstream, int startline, int startcolumn, int buffersize) {
ReInit(new java.io.InputStreamReader(dstream), startline, startcolumn, 4096);
}"
7217,PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,configuration,4428,"{
public InputSource resolveEntity(String publicId, String systemId)
{
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
","private void printValue(PrintWriter out, int indentLevel, Object value) {
String padding = StringUtils.repeat("" "", indentLevel * INDENT_SIZE);
if (value instanceof Date) {
synchronized (PListNode.format) {
out.println(padding + ""<date>"" + PListNode.format.format((Date) value) + ""</date>"");
}
} else if (value instanceof Calendar) {
printValue(out, indentLevel, ((Calendar) value).getTime());
} else if (value instanceof Number) {
if (value instanceof Double || value instanceof Float || value instanceof BigDecimal) {
out.println(padding + ""<real>"" + value.toString() + ""</real>"");
} else {
out.println(padding + ""<integer>"" + value.toString() + ""</integer>"");
}
} else if (value instanceof Boolean) {
if (((Boolean) value).booleanValue()) {
out.println(padding + ""<true/>"");
} else {
out.println(padding + ""<false/>"");
}
} else if (value instanceof List) {
out.println(padding + ""<array>"");
Iterator it = ((List) value).iterator();
while (it.hasNext()) {
printValue(out, indentLevel + 1, it.next());
}
out.println(padding + ""</array>"");
} else if (value instanceof HierarchicalConfiguration) {
printNode(out, indentLevel, ((HierarchicalConfiguration) value).getRoot());
} else if (value instanceof Configuration) {
out.println(padding + ""<dict>"");
Configuration config = (Configuration) value;
Iterator it = config.getKeys();
while (it.hasNext()) {
String key = (String) it.next();
Node node = new Node(key);
node.setValue(config.getProperty(key));
printNode(out, indentLevel + 1, node);
if (it.hasNext()) {
out.println();
}
}
out.println(padding + ""</dict>"");
} else if (value instanceof Map) {
Map map = (Map) value;
printValue(out, indentLevel, new MapConfiguration(map));
} else if (value instanceof byte[]) {
String base64 = new String(Base64.encodeBase64((byte[]) value));
out.println(padding + ""<data>"" + StringEscapeUtils.escapeXml(base64) + ""</data>"");
} else {
out.println(padding + ""<string>"" + StringEscapeUtils.escapeXml(String.valueOf(value)) + ""</string>"");
}
}","private void printValue(PrintWriter out, int indentLevel, Object value) {
String stringVar1 = stringLiteral2;
if (value instanceof Date) {
synchronized (PListNode.format) {
out.println(stringVar1 + ""<date>"" + PListNode.format.format((Date) value) + ""</date>"");
}
} else if (value instanceof Calendar) {
printValue(out, indentLevel, ((Calendar) value).getTime());
} else if (value instanceof Number) {
if (value instanceof Double || value instanceof Float || value instanceof BigDecimal) {
out.println(stringVar1 + ""<real>"" + value.toString() + ""</real>"");
} else {
out.println(stringVar1 + ""<integer>"" + value.toString() + ""</integer>"");
}
} else if (value instanceof Boolean) {
if (((Boolean) value).booleanValue()) {
out.println(stringVar1 + ""<true/>"");
} else {
out.println(stringVar1 + ""<false/>"");
}
} else if (value instanceof List) {
out.println(stringVar1 + ""<array>"");
Iterator iteratorVar3 = iteratorLiteral4;
while (iteratorVar3.hasNext()) {
printValue(out, indentLevel + 1, iteratorVar3.next());
}
out.println(stringVar1 + ""</array>"");
} else if (value instanceof HierarchicalConfiguration) {
printNode(out, indentLevel, ((HierarchicalConfiguration) value).getRoot());
} else if (value instanceof Configuration) {
out.println(stringVar1 + ""<dict>"");
Configuration configurationVar5 = configurationLiteral6;
Iterator iteratorVar3 = iteratorLiteral7;
while (iteratorVar3.hasNext()) {
String stringVar8 = stringLiteral9;
Node nodeVar10 = nodeLiteral11;
nodeVar10.setValue(configurationVar5.getProperty(stringVar8));
printNode(out, indentLevel + 1, nodeVar10);
if (iteratorVar3.hasNext()) {
out.println();
}
}
out.println(stringVar1 + ""</dict>"");
} else if (value instanceof Map) {
Map mapVar12 = mapLiteral13;
printValue(out, indentLevel, new MapConfiguration(mapVar12));
} else if (value instanceof byte[]) {
String stringVar14 = stringLiteral15;
out.println(stringVar1 + ""<data>"" + StringEscapeUtils.escapeXml(stringVar14) + ""</data>"");
} else {
out.println(stringVar1 + ""<string>"" + StringEscapeUtils.escapeXml(String.valueOf(value)) + ""</string>"");
}
}"
7219,I18N,DM_DEFAULT_ENCODING,FP,configuration,4430,"addValue(Base64.decodeBase64(value.getBytes()));
","public void addDataValue(String value) {
addValue(Base64.decodeBase64(value.getBytes()));
}","public void addDataValue(String value) {
addValue(Base64.decodeBase64(value.getBytes()));
}"
7226,DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,configuration,4437,"return reverse ? getStartOffset() + 1 : subNodes.size()
","protected int getMaxPosition() {
return reverse ? getStartOffset() + 1 : subNodes.size() - getStartOffset();
}","protected int getMaxPosition() {
return reverse ? getStartOffset() + 1 : subNodes.size() - getStartOffset();
}"
7325,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,configuration,4536,"final ConfigurationInterpolator ci = ((CatalogManager) catalogManager).getInterpolator();
","@Override
protected String normalizeURI(final String uriref) {
final ConfigurationInterpolator ci = ((CatalogManager) catalogManager).getInterpolator();
final String resolved = ci != null ? String.valueOf(ci.interpolate(uriref)) : uriref;
return super.normalizeURI(resolved);
}","@Override
protected String normalizeURI(final String uriref) {
final ConfigurationInterpolator configurationinterpolatorVar1 = configurationinterpolatorLiteral2;
final String stringVar3 = stringLiteral4;
return super.normalizeURI(stringVar3);
}"
7382,I18N,DM_DEFAULT_ENCODING,FP,configuration,4593,"dump(configuration, new PrintWriter(out));
","public static void dump(Configuration configuration, PrintStream out) {
dump(configuration, new PrintWriter(out));
}","public static void dump(Configuration configuration, PrintStream out) {
dump(configuration, new PrintWriter(out));
}"
7390,SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,configuration,4601,"pstmt = conn.prepareStatement(query.toString());
","public Object getProperty(String key) {
Object result = null;
StringBuffer query = new StringBuffer(""SELECT * FROM "");
query.append(table).append("" WHERE "");
query.append(keyColumn).append(""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
ResultSet rs = pstmt.executeQuery();
List results = new ArrayList();
while (rs.next()) {
Object val = rs.getObject(valueColumn);
if (isDelimiterParsingDisabled()) {
results.add(val);
} else {
CollectionUtils.addAll(results, PropertyConverter.toIterator(val, getListDelimiter()));
}
}
if (!results.isEmpty()) {
result = (results.size() > 1) ? results : results.get(0);
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
closeQuietly(conn, pstmt);
}
return result;
}","public Object getProperty(String key) {
Object objectVar1 = objectLiteral2;
StringBuffer stringbufferVar3 = stringbufferLiteral4;
stringbufferVar3.append(table).append("" WHERE "");
stringbufferVar3.append(keyColumn).append(""=?"");
if (nameColumn != null) {
stringbufferVar3.append("" AND "" + nameColumn + ""=?"");
}
Connection connectionVar5 = objectLiteral2;
PreparedStatement preparedstatementVar6 = objectLiteral2;
try {
connectionVar5 = getConnection();
preparedstatementVar6 = connectionVar5.prepareStatement(stringbufferVar3.toString());
preparedstatementVar6.setString(1, key);
if (nameColumn != null) {
preparedstatementVar6.setString(2, name);
}
ResultSet resultsetVar7 = resultsetLiteral8;
List listVar9 = listLiteral10;
while (resultsetVar7.next()) {
Object objectVar11 = objectLiteral12;
if (isDelimiterParsingDisabled()) {
listVar9.add(objectVar11);
} else {
CollectionUtils.addAll(listVar9, PropertyConverter.toIterator(objectVar11, getListDelimiter()));
}
}
if (!listVar9.isEmpty()) {
objectVar1 = (listVar9.size() > 1) ? listVar9 : listVar9.get(0);
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
closeQuietly(connectionVar5, preparedstatementVar6);
}
return objectVar1;
}"
7397,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,configuration,4608,"ConfigurationDeclaration decl = (ConfigurationDeclaration) data;
","public Object createBean(Class beanClass, BeanDeclaration data, Object param) throws Exception {
ConfigurationDeclaration decl = (ConfigurationDeclaration) data;
String tagName = decl.getNode().getName();
ConfigurationProvider provider = decl.getConfigurationBuilder().providerForTag(tagName);
if (provider == null) {
throw new ConfigurationRuntimeException(""No ConfigurationProvider registered for tag "" + tagName);
}
try {
return provider.getConfiguration(decl);
} catch (Exception ex) {
if (!decl.isOptional()) {
throw ex;
} else {
if (decl.isForceCreate()) {
try {
return provider.getEmptyConfiguration(decl);
} catch (Exception ex2) {
;
}
}
return null;
}
}
}","public Object createBean(Class beanClass, BeanDeclaration data, Object param) throws Exception {
ConfigurationDeclaration configurationdeclarationVar1 = configurationdeclarationLiteral2;
String stringVar3 = stringLiteral4;
ConfigurationProvider configurationproviderVar5 = configurationproviderLiteral6;
if (configurationproviderVar5 == null) {
throw new ConfigurationRuntimeException(""No ConfigurationProvider registered for tag "" + stringVar3);
}
try {
return configurationproviderVar5.getConfiguration(configurationdeclarationVar1);
} catch (Exception ex) {
if (!configurationdeclarationVar1.isOptional()) {
throw ex;
} else {
if (configurationdeclarationVar1.isForceCreate()) {
try {
return configurationproviderVar5.getEmptyConfiguration(configurationdeclarationVar1);
} catch (Exception ex2) {
;
}
}
return null;
}
}
}"
7412,DODGY_CODE,REC_CATCH_EXCEPTION,FP,configuration,4623,"catch (Exception e)
","private void load(InputSource source) throws ConfigurationException {
try {
URL sourceURL = getDelegate().getURL();
if (sourceURL != null) {
source.setSystemId(sourceURL.toString());
}
DocumentBuilder builder = createDocumentBuilder();
Document newDocument = builder.parse(source);
Document oldDocument = document;
document = null;
initProperties(newDocument, oldDocument == null);
document = (oldDocument == null) ? newDocument : oldDocument;
} catch (Exception e) {
throw new ConfigurationException(e.getMessage(), e);
}
}","private void load(InputSource source) throws ConfigurationException {
try {
URL urlVar1 = urlLiteral2;
if (urlVar1 != null) {
source.setSystemId(urlVar1.toString());
}
DocumentBuilder documentbuilderVar3 = documentbuilderLiteral4;
Document documentVar5 = documentLiteral6;
Document documentVar7 = documentLiteral8;
document = null;
initProperties(documentVar5, documentVar7 == null);
document = (documentVar7 == null) ? documentVar5 : documentVar7;
} catch (Exception e) {
throw new ConfigurationException(e.getMessage(), e);
}
}"
7420,PERFORMANCE,DM_NUMBER_CTOR,FP,configuration,4631,"getConfiguration().addProperty(name, new Short(array[i]));
","public void set(String name, Object value) {
if (log.isTraceEnabled()) {
log.trace(""set("" + name + "","" + value + "")"");
}
if (value == null) {
throw new NullPointerException(""Error trying to set property to null."");
}
if (value instanceof List) {
List list = (List) value;
Iterator iterator = list.iterator();
while (iterator.hasNext()) {
getConfiguration().addProperty(name, iterator.next());
}
} else if (value instanceof int[]) {
int[] array = (int[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Integer(array[i]));
}
} else if (value instanceof boolean[]) {
boolean[] array = (boolean[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, BooleanUtils.toBooleanObject(array[i]));
}
} else if (value instanceof char[]) {
char[] array = (char[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Character(array[i]));
}
} else if (value instanceof byte[]) {
byte[] array = (byte[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Byte(array[i]));
}
} else if (value instanceof short[]) {
short[] array = (short[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Short(array[i]));
}
} else if (value instanceof long[]) {
long[] array = (long[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Long(array[i]));
}
} else if (value instanceof float[]) {
float[] array = (float[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Float(array[i]));
}
} else if (value instanceof double[]) {
double[] array = (double[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, new Double(array[i]));
}
} else if (value instanceof Object[]) {
Object[] array = (Object[]) value;
for (int i = 0; i < array.length; i++) {
getConfiguration().addProperty(name, array[i]);
}
} else {
getConfiguration().setProperty(name, value);
}
}","public void set(String name, Object value) {
if (log.isTraceEnabled()) {
log.trace(""set("" + name + "","" + value + "")"");
}
if (value == null) {
throw new NullPointerException(""Error trying to set property to null."");
}
if (value instanceof List) {
List listVar1 = listLiteral2;
Iterator iteratorVar3 = iteratorLiteral4;
while (iteratorVar3.hasNext()) {
getConfiguration().addProperty(name, iteratorVar3.next());
}
} else if (value instanceof int[]) {
int[] intArrayVar5 = intArrayLiteral6;
for (int intVar17 = intLiteral18; intVar7 < intLiteral1; intVar7++) {
getConfiguration().addProperty(name, new Integer(intArrayVar5[intVar7]));
}
} else if (value instanceof boolean[]) {
boolean[] intArrayVar5 = booleanArrayLiteral9;
for (int intVar17 = intLiteral18; intVar7 < intArrayVar5.length; intVar7++) {
getConfiguration().addProperty(name, BooleanUtils.toBooleanObject(intArrayVar5[intVar7]));
}
} else if (value instanceof char[]) {
char[] intArrayVar5 = charArrayLiteral10;
for (int intVar17 = intLiteral18; intVar7 < intArrayVar5.length; intVar7++) {
getConfiguration().addProperty(name, new Character(intArrayVar5[intVar7]));
}
} else if (value instanceof byte[]) {
byte[] intArrayVar5 = byteArrayLiteral11;
for (int intVar17 = intLiteral18; intVar7 < intArrayVar5.length; intVar7++) {
getConfiguration().addProperty(name, new Byte(intArrayVar5[intVar7]));
}
} else if (value instanceof short[]) {
short[] intArrayVar5 = shortArrayLiteral12;
for (int intVar17 = intLiteral18; intVar7 < intArrayVar5.length; intVar7++) {
getConfiguration().addProperty(name, new Short(intArrayVar5[intVar7]));
}
} else if (value instanceof long[]) {
long[] intArrayVar5 = longArrayLiteral13;
for (int intVar17 = intLiteral18; intVar7 < intArrayVar5.length; intVar7++) {
getConfiguration().addProperty(name, new Long(intArrayVar5[intVar7]));
}
} else if (value instanceof float[]) {
float[] intArrayVar5 = floatArrayLiteral14;
for (int intVar17 = intLiteral18; intVar7 < intArrayVar5.length; intVar7++) {
getConfiguration().addProperty(name, new Float(intArrayVar5[intVar7]));
}
} else if (value instanceof double[]) {
double[] intArrayVar5 = doubleArrayLiteral15;
for (int intVar17 = intLiteral18; intVar7 < intArrayVar5.length; intVar7++) {
getConfiguration().addProperty(name, new Double(intArrayVar5[intVar7]));
}
} else if (value instanceof Object[]) {
Object[] intArrayVar5 = objectArrayLiteral16;
for (int intVar17 = intLiteral18; intVar7 < intArrayVar5.length; intVar7++) {
getConfiguration().addProperty(name, intArrayVar5[intVar7]);
}
} else {
getConfiguration().setProperty(name, value);
}
}"
7423,DODGY_CODE,NP_LOAD_OF_KNOWN_NULL_VALUE,FP,configuration,4634,"throw new IllegalArgumentException(""No such property name=["" + name + ""]"");
","public DynaProperty getDynaProperty(String name) {
if (log.isTraceEnabled()) {
log.trace(""getDynaProperty("" + name + "")"");
}
if (name == null) {
throw new IllegalArgumentException(""No such property name=["" + name + ""]"");
}
Object value = configuration.getProperty(name);
if (value == null) {
return null;
} else {
Class type = value.getClass();
if (type == Byte.class) {
type = Byte.TYPE;
}
if (type == Character.class) {
type = Character.TYPE;
} else if (type == Boolean.class) {
type = Boolean.TYPE;
} else if (type == Double.class) {
type = Double.TYPE;
} else if (type == Float.class) {
type = Float.TYPE;
} else if (type == Integer.class) {
type = Integer.TYPE;
} else if (type == Long.class) {
type = Long.TYPE;
} else if (type == Short.class) {
type = Short.TYPE;
}
return new DynaProperty(name, type);
}
}","public DynaProperty getDynaProperty(String name) {
if (log.isTraceEnabled()) {
log.trace(""getDynaProperty("" + name + "")"");
}
if (name == null) {
throw new IllegalArgumentException(""No such property name=["" + name + ""]"");
}
Object objectVar1 = objectLiteral2;
if (objectVar1 == null) {
return null;
} else {
Class classVar3 = classLiteral4;
if (classVar3 == Byte.class) {
classVar3 = Byte.TYPE;
}
if (classVar3 == Character.class) {
classVar3 = Character.TYPE;
} else if (classVar3 == Boolean.class) {
classVar3 = Boolean.TYPE;
} else if (classVar3 == Double.class) {
classVar3 = Double.TYPE;
} else if (classVar3 == Float.class) {
classVar3 = Float.TYPE;
} else if (classVar3 == Integer.class) {
classVar3 = Integer.TYPE;
} else if (classVar3 == Long.class) {
classVar3 = Long.TYPE;
} else if (classVar3 == Short.class) {
classVar3 = Short.TYPE;
}
return new DynaProperty(name, classVar3);
}
}"
7446,DODGY_CODE,UUF_UNUSED_PUBLIC_OR_PROTECTED_FIELD,FP,configuration,4657,public Token specialToken;,public Token specialToken;,public Token tokenVar1;
7450,PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,configuration,4661,"{
public InputSource resolveEntity(String publicId, String systemId)
{
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
","private void printValue(PrintWriter out, int indentLevel, Object value) {
String padding = StringUtils.repeat("" "", indentLevel * INDENT_SIZE);
if (value instanceof Date) {
out.println(padding + ""<date>"" + PListNode.format.format((Date) value) + ""</date>"");
} else if (value instanceof Calendar) {
printValue(out, indentLevel, ((Calendar) value).getTime());
} else if (value instanceof Number) {
if (value instanceof Double || value instanceof Float || value instanceof BigDecimal) {
out.println(padding + ""<real>"" + value.toString() + ""</real>"");
} else {
out.println(padding + ""<integer>"" + value.toString() + ""</integer>"");
}
} else if (value instanceof Boolean) {
if (((Boolean) value).booleanValue()) {
out.println(padding + ""<true/>"");
} else {
out.println(padding + ""<false/>"");
}
} else if (value instanceof List) {
out.println(padding + ""<array>"");
Iterator it = ((List) value).iterator();
while (it.hasNext()) {
printValue(out, indentLevel + 1, it.next());
}
out.println(padding + ""</array>"");
} else if (value instanceof HierarchicalConfiguration) {
printNode(out, indentLevel, ((HierarchicalConfiguration) value).getRoot());
} else if (value instanceof Configuration) {
out.println(padding + ""<dict>"");
Configuration config = (Configuration) value;
Iterator it = config.getKeys();
while (it.hasNext()) {
String key = (String) it.next();
Node node = new Node(key);
node.setValue(config.getProperty(key));
printNode(out, indentLevel + 1, node);
if (it.hasNext()) {
out.println();
}
}
out.println(padding + ""</dict>"");
} else if (value instanceof Map) {
Map map = (Map) value;
printValue(out, indentLevel, new MapConfiguration(map));
} else if (value instanceof byte[]) {
String base64 = new String(Base64.encodeBase64((byte[]) value));
out.println(padding + ""<data>"" + StringEscapeUtils.escapeXml(base64) + ""</data>"");
} else {
out.println(padding + ""<string>"" + StringEscapeUtils.escapeXml(String.valueOf(value)) + ""</string>"");
}
}","private void printValue(PrintWriter out, int indentLevel, Object value) {
String stringVar1 = stringLiteral2;
if (value instanceof Date) {
out.println(stringVar1 + ""<date>"" + PListNode.format.format((Date) value) + ""</date>"");
} else if (value instanceof Calendar) {
printValue(out, indentLevel, ((Calendar) value).getTime());
} else if (value instanceof Number) {
if (value instanceof Double || value instanceof Float || value instanceof BigDecimal) {
out.println(stringVar1 + ""<real>"" + value.toString() + ""</real>"");
} else {
out.println(stringVar1 + ""<integer>"" + value.toString() + ""</integer>"");
}
} else if (value instanceof Boolean) {
if (((Boolean) value).booleanValue()) {
out.println(stringVar1 + ""<true/>"");
} else {
out.println(stringVar1 + ""<false/>"");
}
} else if (value instanceof List) {
out.println(stringVar1 + ""<array>"");
Iterator iteratorVar3 = iteratorLiteral4;
while (iteratorVar3.hasNext()) {
printValue(out, indentLevel + 1, iteratorVar3.next());
}
out.println(stringVar1 + ""</array>"");
} else if (value instanceof HierarchicalConfiguration) {
printNode(out, indentLevel, ((HierarchicalConfiguration) value).getRoot());
} else if (value instanceof Configuration) {
out.println(stringVar1 + ""<dict>"");
Configuration configurationVar5 = configurationLiteral6;
Iterator iteratorVar3 = iteratorLiteral7;
while (iteratorVar3.hasNext()) {
String stringVar8 = stringLiteral9;
Node nodeVar10 = nodeLiteral11;
nodeVar10.setValue(configurationVar5.getProperty(stringVar8));
printNode(out, indentLevel + 1, nodeVar10);
if (iteratorVar3.hasNext()) {
out.println();
}
}
out.println(stringVar1 + ""</dict>"");
} else if (value instanceof Map) {
Map mapVar12 = mapLiteral13;
printValue(out, indentLevel, new MapConfiguration(mapVar12));
} else if (value instanceof byte[]) {
String stringVar14 = stringLiteral15;
out.println(stringVar1 + ""<data>"" + StringEscapeUtils.escapeXml(stringVar14) + ""</data>"");
} else {
out.println(stringVar1 + ""<string>"" + StringEscapeUtils.escapeXml(String.valueOf(value)) + ""</string>"");
}
}"
7464,BAD_PRACTICE,SE_BAD_FIELD,FP,configuration,4675,private ConfigurationNode node;,private ConfigurationNode node;,private ConfigurationNode configurationnodeVar1;
7474,I18N,DM_DEFAULT_ENCODING,FP,configuration,4685,"PrintStream stream = new PrintStream(os);
","private ImmutableNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
} else {
Iterator<ConfigData> it = configurations.iterator();
ImmutableNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = nodeCombiner.combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}","private ImmutableNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
} else {
Iterator<ConfigData> iterator<configdata>Var1 = iterator<configdata>Literal2;
ImmutableNode immutablenodeVar3 = immutablenodeLiteral4;
while (iterator<configdata>Var1.hasNext()) {
immutablenodeVar3 = nodeCombiner.combine(immutablenodeVar3, iterator<configdata>Var1.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream bytearrayoutputstreamVar5 = bytearrayoutputstreamLiteral6;
PrintStream printstreamVar7 = printstreamLiteral8;
TreeUtils.printTree(printstreamVar7, immutablenodeVar3);
getLogger().debug(bytearrayoutputstreamVar5.toString());
}
return immutablenodeVar3;
}
}"
7476,I18N,DM_DEFAULT_ENCODING,FP,configuration,4687,"dump(configuration, new PrintWriter(out));
","public static void dump(Configuration configuration, PrintStream out) {
dump(configuration, new PrintWriter(out));
}","public static void dump(Configuration configuration, PrintStream out) {
dump(configuration, new PrintWriter(out));
}"
7477,SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,configuration,4688,"pstmt = getConnection().prepareStatement(statement);
","protected PreparedStatement createStatement(String sql, boolean nameCol) throws SQLException {
String statement;
if (nameCol && configurationNameColumn != null) {
StringBuilder buf = new StringBuilder(sql);
buf.append("" AND "").append(configurationNameColumn).append(""=?"");
statement = buf.toString();
} else {
statement = sql;
}
pstmt = getConnection().prepareStatement(statement);
return pstmt;
}","protected PreparedStatement createStatement(String sql, boolean nameCol) throws SQLException {
String stringVar1;
if (nameCol && configurationNameColumn != null) {
StringBuilder stringbuilderVar2 = stringbuilderLiteral3;
stringbuilderVar2.append("" AND "").append(configurationNameColumn).append(""=?"");
stringVar1 = stringbuilderVar2.toString();
} else {
stringVar1 = sql;
}
pstmt = getConnection().prepareStatement(stringVar1);
return pstmt;
}"
7480,PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,configuration,4691,"{
@Override
public InputSource resolveEntity(String publicId, String systemId)
{
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
","public void save(Document document, Node parent) {
Element properties = document.createElement(""properties"");
parent.appendChild(properties);
if (getHeader() != null) {
Element comment = document.createElement(""comment"");
properties.appendChild(comment);
comment.setTextContent(StringEscapeUtils.escapeXml(getHeader()));
}
Iterator<String> keys = getKeys();
while (keys.hasNext()) {
String key = keys.next();
Object value = getProperty(key);
if (value instanceof List) {
writeProperty(document, properties, key, (List<?>) value);
} else {
writeProperty(document, properties, key, value);
}
}
}","public void save(Document document, Node parent) {
Element elementVar1 = elementLiteral2;
parent.appendChild(elementVar1);
if (getHeader() != null) {
Element elementVar3 = elementLiteral4;
elementVar1.appendChild(elementVar3);
elementVar3.setTextContent(StringEscapeUtils.escapeXml(getHeader()));
}
Iterator<String> iterator<string>Var5 = iterator<string>Literal6;
while (iterator<string>Var5.hasNext()) {
String stringVar7 = stringLiteral8;
Object objectVar9 = objectLiteral10;
if (objectVar9 instanceof List) {
writeProperty(document, elementVar1, stringVar7, (List<?>) objectVar9);
} else {
writeProperty(document, elementVar1, stringVar7, objectVar9);
}
}
}"
7487,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,configuration,4698,"return new ConfigurationBuilderResultCreatedEvent(this,
","private ConfigurationBuilderEvent createEventWithChangedSource(ConfigurationBuilderEvent event) {
if (ConfigurationBuilderResultCreatedEvent.RESULT_CREATED.equals(event.getEventType())) {
return new ConfigurationBuilderResultCreatedEvent(this, ConfigurationBuilderResultCreatedEvent.RESULT_CREATED, ((ConfigurationBuilderResultCreatedEvent) event).getConfiguration());
}
@SuppressWarnings(""unchecked"")
EventType<? extends ConfigurationBuilderEvent> type = (EventType<? extends ConfigurationBuilderEvent>) event.getEventType();
return new ConfigurationBuilderEvent(this, type);
}","private ConfigurationBuilderEvent createEventWithChangedSource(ConfigurationBuilderEvent event) {
if (ConfigurationBuilderResultCreatedEvent.RESULT_CREATED.equals(event.getEventType())) {
return new ConfigurationBuilderResultCreatedEvent(this, ConfigurationBuilderResultCreatedEvent.RESULT_CREATED, ((ConfigurationBuilderResultCreatedEvent) event).getConfiguration());
}
@SuppressWarnings(""unchecked"")
EventType<? extends ConfigurationBuilderEvent> eventtype<? extends configurationbuilderevent>Var1 = eventtype<? extends configurationbuilderevent>Literal2;
return new ConfigurationBuilderEvent(this, eventtype<? extends configurationbuilderevent>Var1);
}"
7506,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,configuration,4717,"fs = ((CatalogManager) catalogManager).getFileSystem();
","@Override
public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
String base = ((CatalogManager) catalogManager).getBaseDir();
@SuppressWarnings(""unchecked"")
Vector<String> catalogs = catalogManager.getCatalogFiles();
if (catalogs != null) {
for (int count = 0; count < catalogs.size(); count++) {
String fileName = catalogs.elementAt(count);
URL url = null;
InputStream is = null;
try {
url = locate(fs, base, fileName);
if (url != null) {
is = fs.getInputStream(url);
}
} catch (ConfigurationException ce) {
String name = url.toString();
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + name + "". "" + ce.getMessage());
}
if (is != null) {
String mimeType = fileNameMap.getContentTypeFor(fileName);
try {
if (mimeType != null) {
parseCatalog(mimeType, is);
continue;
}
} catch (Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + fileName + "". "" + ex.getMessage());
} finally {
is.close();
}
}
parseCatalog(base, fileName);
}
}
}","@Override
public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
String stringVar1 = stringLiteral2;
@SuppressWarnings(""unchecked"")
Vector<String> vector<string>Var3 = vector<string>Literal4;
if (vector<string>Var3 != null) {
for (int intVar16 = intLiteral17; intVar5 < intLiteral1; intVar5++) {
String stringVar7 = stringLiteral8;
URL urlVar9 = urlLiteral10;
InputStream inputstreamVar11 = urlLiteral10;
try {
urlVar9 = locate(fs, stringVar1, stringVar7);
if (urlVar9 != null) {
inputstreamVar11 = fs.getInputStream(urlVar9);
}
} catch (ConfigurationException ce) {
String stringVar12 = stringLiteral13;
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + stringVar12 + "". "" + ce.getMessage());
}
if (inputstreamVar11 != null) {
String stringVar14 = stringLiteral15;
try {
if (stringVar14 != null) {
parseCatalog(stringVar14, inputstreamVar11);
continue;
}
} catch (Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + stringVar7 + "". "" + ex.getMessage());
} finally {
inputstreamVar11.close();
}
}
parseCatalog(stringVar1, stringVar7);
}
}
}"
7526,I18N,DM_DEFAULT_ENCODING,FP,configuration,4737,"getLogger().debug(os.toString());
","private ConfigurationNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return new ViewNode();
} else {
Iterator<ConfigData> it = configurations.iterator();
ConfigurationNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = nodeCombiner.combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}","private ConfigurationNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return new ViewNode();
} else {
Iterator<ConfigData> iterator<configdata>Var1 = iterator<configdata>Literal2;
ConfigurationNode configurationnodeVar3 = configurationnodeLiteral4;
while (iterator<configdata>Var1.hasNext()) {
configurationnodeVar3 = nodeCombiner.combine(configurationnodeVar3, iterator<configdata>Var1.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream bytearrayoutputstreamVar5 = bytearrayoutputstreamLiteral6;
PrintStream printstreamVar7 = printstreamLiteral8;
TreeUtils.printTree(printstreamVar7, configurationnodeVar3);
getLogger().debug(bytearrayoutputstreamVar5.toString());
}
return configurationnodeVar3;
}
}"
7563,PERFORMANCE,DM_NUMBER_CTOR,FP,configuration,4774,"return new Byte(n.byteValue());
","public static Byte toByte(Object value) throws ConversionException {
Number n = toNumber(value, Byte.class);
if (n instanceof Byte) {
return (Byte) n;
} else {
return new Byte(n.byteValue());
}
}","public static Byte toByte(Object value) throws ConversionException {
Number numberVar1 = numberLiteral2;
if (numberVar1 instanceof Byte) {
return (Byte) numberVar1;
} else {
return new Byte(numberVar1.byteValue());
}
}"
7579,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,configuration,4790,"ConfigurationInterpolator ci = ((CatalogManager) catalogManager).getInterpolator();
","@Override
protected String normalizeURI(String uriref) {
ConfigurationInterpolator ci = ((CatalogManager) catalogManager).getInterpolator();
String resolved = (ci != null) ? String.valueOf(ci.interpolate(uriref)) : uriref;
return super.normalizeURI(resolved);
}","@Override
protected String normalizeURI(String uriref) {
ConfigurationInterpolator configurationinterpolatorVar1 = configurationinterpolatorLiteral2;
String stringVar3 = stringLiteral4;
return super.normalizeURI(stringVar3);
}"
7607,I18N,DM_DEFAULT_ENCODING,FP,configuration,4818,"PrintStream stream = new PrintStream(os);
","private ImmutableNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
} else {
Iterator<ConfigData> it = configurations.iterator();
ImmutableNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = nodeCombiner.combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}","private ImmutableNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
} else {
Iterator<ConfigData> iterator<configdata>Var1 = iterator<configdata>Literal2;
ImmutableNode immutablenodeVar3 = immutablenodeLiteral4;
while (iterator<configdata>Var1.hasNext()) {
immutablenodeVar3 = nodeCombiner.combine(immutablenodeVar3, iterator<configdata>Var1.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream bytearrayoutputstreamVar5 = bytearrayoutputstreamLiteral6;
PrintStream printstreamVar7 = printstreamLiteral8;
TreeUtils.printTree(printstreamVar7, immutablenodeVar3);
getLogger().debug(bytearrayoutputstreamVar5.toString());
}
return immutablenodeVar3;
}
}"
7612,PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,configuration,4823,"{
@Override
public InputSource resolveEntity(String publicId, String systemId)
{
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
","@Override
public void read(Reader in) throws ConfigurationException {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setNamespaceAware(false);
factory.setValidating(true);
try {
SAXParser parser = factory.newSAXParser();
XMLReader xmlReader = parser.getXMLReader();
xmlReader.setEntityResolver(new EntityResolver() {
@Override
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlReader.setContentHandler(new XMLPropertiesHandler());
xmlReader.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}","@Override
public void read(Reader in) throws ConfigurationException {
SAXParserFactory saxparserfactoryVar1 = saxparserfactoryLiteral2;
saxparserfactoryVar1.setNamespaceAware(false);
saxparserfactoryVar1.setValidating(true);
try {
SAXParser saxparserVar3 = saxparserLiteral4;
XMLReader xmlreaderVar5 = xmlreaderLiteral6;
xmlreaderVar5.setEntityResolver(new EntityResolver() {
@Override
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlreaderVar5.setContentHandler(new XMLPropertiesHandler());
xmlreaderVar5.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}"
7619,Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,configuration,4830,private ConfigurationSourceData sourceData;,private ConfigurationSourceData sourceData;,private ConfigurationSourceData configurationsourcedataVar1;
7627,DODGY_CODE,REC_CATCH_EXCEPTION,FP,configuration,4838,"catch (Exception e)
","public void setValue(Object value) throws ConfigurationRuntimeException {
try {
if (!(value instanceof String)) {
this.value = value;
return;
}
String val = (String) value;
String name = StringUtils.removeStartIgnoreCase(val, CLASS);
Class<?> clazz = ClassUtils.getClass(name);
if (name.length() == val.length()) {
this.value = clazz.newInstance();
} else {
this.value = clazz;
}
} catch (Exception e) {
throw new ConfigurationRuntimeException(""Unable to create "" + value, e);
}
}","public void setValue(Object value) throws ConfigurationRuntimeException {
try {
if (!(value instanceof String)) {
this.value = value;
return;
}
String stringVar1 = stringLiteral2;
String stringVar3 = stringLiteral4;
Class<?> class<?>Var5 = class<?>Literal6;
if (stringVar3.length() == stringVar1.length()) {
this.value = class<?>Var5.newInstance();
} else {
this.value = class<?>Var5;
}
} catch (Exception e) {
throw new ConfigurationRuntimeException(""Unable to create "" + value, e);
}
}"
7639,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,configuration,4850,"ConfigurationInterpolator ci = ((CatalogManager) catalogManager).getInterpolator();
","@Override
protected String normalizeURI(String uriref) {
ConfigurationInterpolator ci = ((CatalogManager) catalogManager).getInterpolator();
String resolved = (ci != null) ? String.valueOf(ci.interpolate(uriref)) : uriref;
return super.normalizeURI(resolved);
}","@Override
protected String normalizeURI(String uriref) {
ConfigurationInterpolator configurationinterpolatorVar1 = configurationinterpolatorLiteral2;
String stringVar3 = stringLiteral4;
return super.normalizeURI(stringVar3);
}"
7643,BAD_PRACTICE,SE_BAD_FIELD,FP,configuration,4854,private final QueryResult<T> attributeResult;,private final QueryResult<T> attributeResult;,private final QueryResult<T> queryresult<t>Var1;
7644,BAD_PRACTICE,SE_BAD_FIELD,FP,configuration,4855,private final NodeHandler<T> handler;,private final NodeHandler<T> handler;,private final NodeHandler<T> nodehandler<t>Var1;
7676,I18N,DM_DEFAULT_ENCODING,FP,configuration,4887,"dump(configuration, new PrintWriter(out));
","public static void dump(Configuration configuration, PrintStream out) {
dump(configuration, new PrintWriter(out));
}","public static void dump(Configuration configuration, PrintStream out) {
dump(configuration, new PrintWriter(out));
}"
7678,EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,FP,configuration,4889,"ResultSet rs = pstmt.executeQuery();
","@Override
protected Boolean performOperation() throws SQLException {
PreparedStatement pstmt = initStatement(String.format(SQL_GET_PROPERTY, table, keyColumn), true, key);
ResultSet rs = pstmt.executeQuery();
return rs.next();
}","@Override
protected Boolean performOperation() throws SQLException {
PreparedStatement preparedstatementVar1 = preparedstatementLiteral2;
ResultSet resultsetVar3 = resultsetLiteral4;
return resultsetVar3.next();
}"
7681,DODGY_CODE,REC_CATCH_EXCEPTION,FP,configuration,4892,"catch (Exception e)
","@Override
public void read(Reader in) throws ConfigurationException {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setNamespaceAware(false);
factory.setValidating(true);
try {
SAXParser parser = factory.newSAXParser();
XMLReader xmlReader = parser.getXMLReader();
xmlReader.setEntityResolver(new EntityResolver() {
@Override
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlReader.setContentHandler(new XMLPropertiesHandler());
xmlReader.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
// todo: support included properties ?
}","@Override
public void read(Reader in) throws ConfigurationException {
SAXParserFactory saxparserfactoryVar1 = saxparserfactoryLiteral2;
saxparserfactoryVar1.setNamespaceAware(false);
saxparserfactoryVar1.setValidating(true);
try {
SAXParser saxparserVar3 = saxparserLiteral4;
XMLReader xmlreaderVar5 = xmlreaderLiteral6;
xmlreaderVar5.setEntityResolver(new EntityResolver() {
@Override
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlreaderVar5.setContentHandler(new XMLPropertiesHandler());
xmlreaderVar5.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
// todo: support included properties ?
}"
7711,DODGY_CODE,REC_CATCH_EXCEPTION,FP,configuration,4922,"catch (Exception ex)
","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class<?>[] paramTypes = new Class<?>[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
return;
}
}","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String stringVar1 = stringLiteral2;
Class<?>[] class<?>ArrayVar3 = class<?>ArrayLiteral4;
class<?>ArrayVar3[0] = FileSystemOptions.class;
class<?>ArrayVar3[1] = value.getClass();
try {
Method methodVar5 = methodLiteral6;
Object[] objectArrayVar7 = objectArrayLiteral8;
objectArrayVar7[0] = options;
objectArrayVar7[1] = value;
methodVar5.invoke(builder, objectArrayVar7);
} catch (Exception ex) {
return;
}
}"
7714,DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,configuration,4925,"if (locator.getEncoding() != null)
","@Override
public void write(Writer out) throws ConfigurationException {
PrintWriter writer = new PrintWriter(out);
if (locator.getEncoding() != null) {
writer.println(""<?xml version=\""1.0\"" encoding=\"""" + locator.getEncoding() + ""\""?>"");
} else {
writer.println(""<?xml version=\""1.0\""?>"");
}
writer.println(""<!DOCTYPE plist SYSTEM \""file://localhost/System/Library/DTDs/PropertyList.dtd\"">"");
writer.println(""<plist version=\""1.0\"">"");
printNode(writer, 1, getNodeModel().getNodeHandler().getRootNode());
writer.println(""</plist>"");
writer.flush();
}","@Override
public void write(Writer out) throws ConfigurationException {
PrintWriter printwriterVar1 = printwriterLiteral2;
if (locator.getEncoding() != null) {
printwriterVar1.println(""<?xml version=\""1.0\"" encoding=\"""" + locator.getEncoding() + ""\""?>"");
} else {
printwriterVar1.println(""<?xml version=\""1.0\""?>"");
}
printwriterVar1.println(""<!DOCTYPE plist SYSTEM \""file://localhost/System/Library/DTDs/PropertyList.dtd\"">"");
printwriterVar1.println(""<plist version=\""1.0\"">"");
printNode(printwriterVar1, 1, getNodeModel().getNodeHandler().getRootNode());
printwriterVar1.println(""</plist>"");
printwriterVar1.flush();
}"
7790,BAD_PRACTICE,NM_CONFUSING,FP,configuration,5001,"return dataSource;
","public DataSource getDataSource() {
return dataSource;
}","public DataSource getDataSource() {
return dataSource;
}"
7793,DODGY_CODE,REC_CATCH_EXCEPTION,FP,configuration,5004,"} catch (final Exception ex) {
","private static Class<?> getDefaultClass(final Object bean, final String propName) {
try {
final PropertyDescriptor desc = BEAN_UTILS_BEAN.getPropertyUtils().getPropertyDescriptor(bean, propName);
if (desc == null) {
return null;
}
return desc.getPropertyType();
} catch (final Exception ex) {
return null;
}
}","private static Class<?> getDefaultClass(final Object bean, final String propName) {
try {
final PropertyDescriptor propertydescriptorVar1 = propertydescriptorLiteral2;
if (propertydescriptorVar1 == null) {
return null;
}
return propertydescriptorVar1.getPropertyType();
} catch (final Exception ex) {
return null;
}
}"
7807,PERFORMANCE,UPM_UNCALLED_PRIVATE_METHOD,FP,configuration,5018,"return sourceURL != null ? sourceURL.toExternalForm() : StringUtils.EMPTY;
","private String sourceURLAsString() {
return sourceURL != null ? sourceURL.toExternalForm() : StringUtils.EMPTY;
}","private String sourceURLAsString() {
return sourceURL != null ? sourceURL.toExternalForm() : StringUtils.EMPTY;
}"
7811,PERFORMANCE,URF_UNREAD_FIELD,FP,configuration,5022,private final String protocol;,private final String protocol;,private final String stringVar1;
7971,BAD_PRACTICE,SE_BAD_FIELD,FP,configuration,5182,private ConfigurationListener changeListener;,private ConfigurationListener changeListener;,private ConfigurationListener configurationlistenerVar1;
7976,I18N,DM_DEFAULT_ENCODING,FP,configuration,5187,"dump(configuration, new PrintWriter(out));
","public static void dump(Configuration configuration, PrintStream out) {
dump(configuration, new PrintWriter(out));
}","public static void dump(Configuration configuration, PrintStream out) {
dump(configuration, new PrintWriter(out));
}"
7984,BAD_PRACTICE,SE_BAD_FIELD,FP,configuration,5195,private final ConfigurationInterpolator localSubst;,private final ConfigurationInterpolator localSubst;,private final ConfigurationInterpolator configurationinterpolatorVar1;
8018,PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,configuration,5229,"{
public InputSource resolveEntity(String publicId, String systemId)
{
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
","public void read(Reader in) throws ConfigurationException {
if (!(getRootNode() instanceof PListNode)) {
initRoot();
}
EntityResolver resolver = new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
};
XMLPropertyListHandler handler = new XMLPropertyListHandler(getRootNode());
try {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}","public void read(Reader in) throws ConfigurationException {
if (!(getRootNode() instanceof PListNode)) {
initRoot();
}
EntityResolver entityresolverVar1 = entityresolverLiteral2;
XMLPropertyListHandler xmlpropertylisthandlerVar3 = xmlpropertylisthandlerLiteral4;
try {
SAXParserFactory saxparserfactoryVar5 = saxparserfactoryLiteral6;
saxparserfactoryVar5.setValidating(true);
SAXParser saxparserVar7 = saxparserLiteral8;
saxparserVar7.getXMLReader().setEntityResolver(entityresolverVar1);
saxparserVar7.getXMLReader().setContentHandler(xmlpropertylisthandlerVar3);
saxparserVar7.getXMLReader().parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}"
8030,DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,configuration,5241,"return createNodePointer(subNodes.get(positionToIndex(getPosition())));
","public NodePointer getNodePointer() {
if (getPosition() < 1 && !setPosition(1)) {
return null;
}
return createNodePointer(subNodes.get(positionToIndex(getPosition())));
}","public NodePointer getNodePointer() {
if (getPosition() < 1 && !setPosition(1)) {
return null;
}
return createNodePointer(subNodes.get(positionToIndex(getPosition())));
}"
8078,DODGY_CODE,REC_CATCH_EXCEPTION,FP,configuration,5289,"catch (Exception ex)
","void extractProperties15() {
try {
Method method = System.class.getMethod(METHOD_NAME, null);
environment = (Map) method.invoke(null, null);
} catch (Exception ex) {
throw new ConfigurationRuntimeException(""Error when accessing environment properties"", ex);
}
}","void extractProperties15() {
try {
Method methodVar1 = methodLiteral2;
environment = (Map) methodVar1.invoke(null, null);
} catch (Exception ex) {
throw new ConfigurationRuntimeException(""Error when accessing environment properties"", ex);
}
}"
8089,DODGY_CODE,REC_CATCH_EXCEPTION,FP,configuration,5300,"catch (Exception e)
","static Object toEnum(Object value, Class cls) throws ConversionException {
if (value.getClass().equals(cls)) {
return value;
} else if (value instanceof String) {
try {
Method valueOfMethod = cls.getMethod(""valueOf"", new Class[] { String.class });
return valueOfMethod.invoke(null, new Object[] { value });
} catch (Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a "" + cls.getName());
}
} else if (value instanceof Number) {
try {
Method valuesMethod = cls.getMethod(""values"", new Class[] {});
Object valuesArray = valuesMethod.invoke(null, new Object[] {});
return Array.get(valuesArray, ((Number) value).intValue());
} catch (Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a "" + cls.getName());
}
} else {
throw new ConversionException(""The value "" + value + "" can't be converted to a "" + cls.getName());
}
}","static Object toEnum(Object value, Class cls) throws ConversionException {
if (value.getClass().equals(cls)) {
return value;
} else if (value instanceof String) {
try {
Method methodVar1 = methodLiteral2;
return methodVar1.invoke(null, new Object[] { value });
} catch (Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a "" + cls.getName());
}
} else if (value instanceof Number) {
try {
Method methodVar3 = methodLiteral4;
Object objectVar5 = objectLiteral6;
return Array.get(objectVar5, ((Number) value).intValue());
} catch (Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a "" + cls.getName());
}
} else {
throw new ConversionException(""The value "" + value + "" can't be converted to a "" + cls.getName());
}
}"
8093,PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,configuration,5304,"{
public void error(SAXParseException ex) throws SAXException
{
throw ex;
","private void load(InputSource source) throws ConfigurationException {
try {
URL sourceURL = getDelegate().getURL();
if (sourceURL != null) {
source.setSystemId(sourceURL.toString());
}
DocumentBuilder builder = createDocumentBuilder();
Document newDocument = builder.parse(source);
Document oldDocument = document;
document = null;
initProperties(newDocument, oldDocument == null);
document = (oldDocument == null) ? newDocument : oldDocument;
} catch (Exception e) {
throw new ConfigurationException(""Unable to load the configuration"", e);
}
}","private void load(InputSource source) throws ConfigurationException {
try {
URL urlVar1 = urlLiteral2;
if (urlVar1 != null) {
source.setSystemId(urlVar1.toString());
}
DocumentBuilder documentbuilderVar3 = documentbuilderLiteral4;
Document documentVar5 = documentLiteral6;
Document documentVar7 = documentLiteral8;
document = null;
initProperties(documentVar5, documentVar7 == null);
document = (documentVar7 == null) ? documentVar5 : documentVar7;
} catch (Exception e) {
throw new ConfigurationException(""Unable to load the configuration"", e);
}
}"
8125,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,configuration,5336,"buffer = null;
bufline = null;
bufcolumn = null;
}
","public void Done() {
buffer = null;
bufline = null;
bufcolumn = null;
}","public void Done() {
buffer = null;
bufline = null;
bufcolumn = null;
}"
8136,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,configuration,5347,"if (bufpos >= tokenBegin)
return new String(buffer, tokenBegin, bufpos - tokenBegin + 1);
else
return new String(buffer, tokenBegin, bufsize - tokenBegin) +
","public String GetImage() {
if (bufpos >= tokenBegin)
return new String(buffer, tokenBegin, bufpos - tokenBegin + 1);
else
return new String(buffer, tokenBegin, bufsize - tokenBegin) + new String(buffer, 0, bufpos + 1);
}","public String GetImage() {
if (bufpos >= tokenBegin)
return new String(buffer, tokenBegin, bufpos - tokenBegin + 1);
else
return new String(buffer, tokenBegin, bufsize - tokenBegin) + new String(buffer, 0, bufpos + 1);
}"
8143,PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,configuration,5354,"{
public InputSource resolveEntity(String publicId, String systemId)
{
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
","public void load(Reader in) throws ConfigurationException {
EntityResolver resolver = new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
};
XMLPropertyListHandler handler = new XMLPropertyListHandler(getRoot());
try {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}","public void load(Reader in) throws ConfigurationException {
EntityResolver entityresolverVar1 = entityresolverLiteral2;
XMLPropertyListHandler xmlpropertylisthandlerVar3 = xmlpropertylisthandlerLiteral4;
try {
SAXParserFactory saxparserfactoryVar5 = saxparserfactoryLiteral6;
saxparserfactoryVar5.setValidating(true);
SAXParser saxparserVar7 = saxparserLiteral8;
saxparserVar7.getXMLReader().setEntityResolver(entityresolverVar1);
saxparserVar7.getXMLReader().setContentHandler(xmlpropertylisthandlerVar3);
saxparserVar7.getXMLReader().parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}"
8144,DODGY_CODE,REC_CATCH_EXCEPTION,FP,configuration,5355,"catch (Exception e)
","public void load(Reader in) throws ConfigurationException {
EntityResolver resolver = new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
};
XMLPropertyListHandler handler = new XMLPropertyListHandler(getRoot());
try {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}","public void load(Reader in) throws ConfigurationException {
EntityResolver entityresolverVar1 = entityresolverLiteral2;
XMLPropertyListHandler xmlpropertylisthandlerVar3 = xmlpropertylisthandlerLiteral4;
try {
SAXParserFactory saxparserfactoryVar5 = saxparserfactoryLiteral6;
saxparserfactoryVar5.setValidating(true);
SAXParser saxparserVar7 = saxparserLiteral8;
saxparserVar7.getXMLReader().setEntityResolver(entityresolverVar1);
saxparserVar7.getXMLReader().setContentHandler(xmlpropertylisthandlerVar3);
saxparserVar7.getXMLReader().parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}"
8148,DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,configuration,5359,"List lst = (List) namedNodes.remove(name);
","public boolean removeNodes(String name) {
if (nodes != null && name != null) {
List lst = (List) namedNodes.remove(name);
if (lst != null) {
detachNodes(lst);
nodes.removeAll(lst);
return true;
}
}
return false;
}","public boolean removeNodes(String name) {
if (nodes != null && name != null) {
List listVar1 = listLiteral2;
if (listVar1 != null) {
detachNodes(listVar1);
nodes.removeAll(listVar1);
return true;
}
}
return false;
}"
8153,BAD_PRACTICE,SE_BAD_FIELD,FP,configuration,5364,private ConfigurationNode node;,private ConfigurationNode node;,private ConfigurationNode configurationnodeVar1;
8180,PERFORMANCE,DM_FP_NUMBER_CTOR,FP,configuration,5391,"return getDouble(key, new Double(defaultValue)).doubleValue();
","public double getDouble(String key, double defaultValue) {
return getDouble(key, new Double(defaultValue)).doubleValue();
}","public double getDouble(String key, double defaultValue) {
return getDouble(key, new Double(defaultValue)).doubleValue();
}"
8189,I18N,DM_DEFAULT_ENCODING,FP,configuration,5400,"reader = new InputStreamReader(in);
","public void load(InputStream in, String encoding) throws ConfigurationException {
Reader reader = null;
if (encoding != null) {
try {
reader = new InputStreamReader(in, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (reader == null) {
reader = new InputStreamReader(in);
}
load(reader);
}","public void load(InputStream in, String encoding) throws ConfigurationException {
Reader readerVar1 = readerLiteral2;
if (encoding != null) {
try {
readerVar1 = new InputStreamReader(in, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (readerVar1 == null) {
readerVar1 = new InputStreamReader(in);
}
load(readerVar1);
}"
8210,SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,configuration,5421,"pstmt = conn.prepareStatement(query.toString());
","public Object getProperty(String key) {
Object result = null;
StringBuffer query = new StringBuffer(""SELECT * FROM "");
query.append(table).append("" WHERE "");
query.append(keyColumn).append(""=?"");
if (nameColumn != null) {
query.append("" AND "" + nameColumn + ""=?"");
}
Connection conn = null;
PreparedStatement pstmt = null;
try {
conn = getConnection();
pstmt = conn.prepareStatement(query.toString());
pstmt.setString(1, key);
if (nameColumn != null) {
pstmt.setString(2, name);
}
ResultSet rs = pstmt.executeQuery();
List results = new ArrayList();
while (rs.next()) {
Object val = rs.getObject(valueColumn);
if (isDelimiterParsingDisabled()) {
results.add(val);
} else {
CollectionUtils.addAll(results, PropertyConverter.toIterator(val, getListDelimiter()));
}
}
if (!results.isEmpty()) {
result = (results.size() > 1) ? results : results.get(0);
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
closeQuietly(conn, pstmt);
}
return result;
}","public Object getProperty(String key) {
Object objectVar1 = objectLiteral2;
StringBuffer stringbufferVar3 = stringbufferLiteral4;
stringbufferVar3.append(table).append("" WHERE "");
stringbufferVar3.append(keyColumn).append(""=?"");
if (nameColumn != null) {
stringbufferVar3.append("" AND "" + nameColumn + ""=?"");
}
Connection connectionVar5 = objectLiteral2;
PreparedStatement preparedstatementVar6 = objectLiteral2;
try {
connectionVar5 = getConnection();
preparedstatementVar6 = connectionVar5.prepareStatement(stringbufferVar3.toString());
preparedstatementVar6.setString(1, key);
if (nameColumn != null) {
preparedstatementVar6.setString(2, name);
}
ResultSet resultsetVar7 = resultsetLiteral8;
List listVar9 = listLiteral10;
while (resultsetVar7.next()) {
Object objectVar11 = objectLiteral12;
if (isDelimiterParsingDisabled()) {
listVar9.add(objectVar11);
} else {
CollectionUtils.addAll(listVar9, PropertyConverter.toIterator(objectVar11, getListDelimiter()));
}
}
if (!listVar9.isEmpty()) {
objectVar1 = (listVar9.size() > 1) ? listVar9 : listVar9.get(0);
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
closeQuietly(connectionVar5, preparedstatementVar6);
}
return objectVar1;
}"
8216,BAD_PRACTICE,SE_INNER_CLASS,FP,configuration,5427,"{
protected Object interpolate(Object value)
{
return parent.interpolate(value);
",private ExpressionEngine expressionEngine;,private ExpressionEngine expressionengineVar1;
8224,PERFORMANCE,DM_NUMBER_CTOR,FP,configuration,5435,"return new Byte(n.byteValue());
","public static Byte toByte(Object value) throws ConversionException {
Number n = toNumber(value, Byte.class);
if (n instanceof Byte) {
return (Byte) n;
} else {
return new Byte(n.byteValue());
}
}","public static Byte toByte(Object value) throws ConversionException {
Number numberVar1 = numberLiteral2;
if (numberVar1 instanceof Byte) {
return (Byte) numberVar1;
} else {
return new Byte(numberVar1.byteValue());
}
}"
8248,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,configuration,5459,"PropertyListConfiguration configuration = new PropertyListConfiguration();
List children = new ArrayList();
Node child = null;
jj_consume_token(DICT_BEGIN);
label_1:
while (true)
{
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
{
case STRING:
case QUOTED_STRING:
;
break;
default:
jj_la1[0] = jj_gen;
break label_1;
}
child = Property();
if (child.getValue() instanceof HierarchicalConfiguration)
{
HierarchicalConfiguration conf = (HierarchicalConfiguration) child.getValue();
Node root = conf.getRoot();
root.setName(child.getName());
children.add(root);
}
else
{
children.add(child);
}
}
jj_consume_token(DICT_END);
for (int i = 0; i < children.size(); i++)
{
child = (Node) children.get(i);
configuration.getRoot().addChild(child);
}
return configuration;
","final public PropertyListConfiguration Dictionary() throws ParseException {
PropertyListConfiguration configuration = new PropertyListConfiguration();
List children = new ArrayList();
Node child = null;
jj_consume_token(DICT_BEGIN);
label_1: while (true) {
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case STRING:
case QUOTED_STRING:
;
break;
default:
jj_la1[0] = jj_gen;
break label_1;
}
child = Property();
if (child.getValue() instanceof HierarchicalConfiguration) {
HierarchicalConfiguration conf = (HierarchicalConfiguration) child.getValue();
Node root = conf.getRoot();
root.setName(child.getName());
children.add(root);
} else {
children.add(child);
}
}
jj_consume_token(DICT_END);
for (int i = 0; i < children.size(); i++) {
child = (Node) children.get(i);
configuration.getRoot().addChild(child);
}
return configuration;
}","final public PropertyListConfiguration Dictionary() throws ParseException {
PropertyListConfiguration propertylistconfigurationVar1 = propertylistconfigurationLiteral2;
List listVar3 = listLiteral4;
Node nodeVar5 = nodeLiteral6;
jj_consume_token(DICT_BEGIN);
label_1: while (true) {
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case STRING:
case QUOTED_STRING:
;
break;
default:
jj_la1[0] = jj_gen;
break label_1;
}
nodeVar5 = Property();
if (nodeVar5.getValue() instanceof HierarchicalConfiguration) {
HierarchicalConfiguration hierarchicalconfigurationVar7 = hierarchicalconfigurationLiteral8;
Node nodeVar9 = nodeLiteral10;
nodeVar9.setName(nodeVar5.getName());
listVar3.add(nodeVar9);
} else {
listVar3.add(nodeVar5);
}
}
jj_consume_token(DICT_END);
for (int intVar13 = intLiteral14; intVar11 < intLiteral1; intVar11++) {
nodeVar5 = (Node) listVar3.get(intVar11);
propertylistconfigurationVar1.getRoot().addChild(nodeVar5);
}
return propertylistconfigurationVar1;
}"
8254,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,configuration,5465,"jjround = 0x80000001;
for (i = 9; i-- > 0;)
jjrounds[i] = 0x80000000;
}
","private final void ReInitRounds() {
int i;
jjround = 0x80000001;
for (i = 9; i-- > 0; ) jjrounds[i] = 0x80000000;
}","private final void ReInitRounds() {
int intVar1;
jjround = 0x80000001;
for (intVar1 = 9; intVar1-- > intLiteral1; ) jjrounds[intVar1] = 0x80000000;
}"
8271,PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,FP,configuration,5482,"{
super(methodName);
}
public void end(String namespace, String name) throws Exception
{
super.end(namespace, name);
digester.pop();
}
","public void addRealValue(String value) {
addValue(new Double(value));
}","public void addRealValue(String value) {
addValue(new Double(value));
}"
8282,BAD_PRACTICE,SE_BAD_FIELD,FP,configuration,5493,private ConfigurationNode node;,private ConfigurationNode node;,private ConfigurationNode configurationnodeVar1;
8303,DODGY_CODE,REC_CATCH_EXCEPTION,FP,configuration,5514,"catch (Exception ex)
","private static Class<?> getDefaultClass(Object bean, String propName) {
try {
PropertyDescriptor desc = BEAN_UTILS_BEAN.getPropertyUtils().getPropertyDescriptor(bean, propName);
if (desc == null) {
return null;
}
return desc.getPropertyType();
} catch (Exception ex) {
return null;
}
}","private static Class<?> getDefaultClass(Object bean, String propName) {
try {
PropertyDescriptor propertydescriptorVar1 = propertydescriptorLiteral2;
if (propertydescriptorVar1 == null) {
return null;
}
return propertydescriptorVar1.getPropertyType();
} catch (Exception ex) {
return null;
}
}"
8312,PERFORMANCE,DM_FP_NUMBER_CTOR,FP,configuration,5523,"return new Float(n.floatValue());
","public static Float toFloat(Object value) throws ConversionException {
Number n = toNumber(value, Float.class);
if (n instanceof Float) {
return (Float) n;
} else {
return new Float(n.floatValue());
}
}","public static Float toFloat(Object value) throws ConversionException {
Number numberVar1 = numberLiteral2;
if (numberVar1 instanceof Float) {
return (Float) numberVar1;
} else {
return new Float(numberVar1.floatValue());
}
}"
8353,I18N,DM_DEFAULT_ENCODING,FP,configuration,5564,"PrintStream stream = new PrintStream(os);
","private ConfigurationNode constructCombinedNode() {
if (getNumberOfConfigurations() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return new ViewNode();
} else {
Iterator<ConfigData> it = configurations.iterator();
ConfigurationNode node = it.next().getTransformedRoot();
while (it.hasNext()) {
node = getNodeCombiner().combine(node, it.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream os = new ByteArrayOutputStream();
PrintStream stream = new PrintStream(os);
TreeUtils.printTree(stream, node);
getLogger().debug(os.toString());
}
return node;
}
}","private ConfigurationNode constructCombinedNode() {
if (getNumberOfConfigurations() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return new ViewNode();
} else {
Iterator<ConfigData> iterator<configdata>Var1 = iterator<configdata>Literal2;
ConfigurationNode configurationnodeVar3 = configurationnodeLiteral4;
while (iterator<configdata>Var1.hasNext()) {
configurationnodeVar3 = getNodeCombiner().combine(configurationnodeVar3, iterator<configdata>Var1.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream bytearrayoutputstreamVar5 = bytearrayoutputstreamLiteral6;
PrintStream printstreamVar7 = printstreamLiteral8;
TreeUtils.printTree(printstreamVar7, configurationnodeVar3);
getLogger().debug(bytearrayoutputstreamVar5.toString());
}
return configurationnodeVar3;
}
}"
8360,BAD_PRACTICE,SE_BAD_FIELD,FP,configuration,5571,protected Configuration configuration;,protected Configuration configuration;,protected Configuration configurationVar1;
8368,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,configuration,5579,"ConfigurationDeclaration decl = (ConfigurationDeclaration) data;
","public Object createBean(Class<?> beanClass, BeanDeclaration data, Object param) throws Exception {
ConfigurationDeclaration decl = (ConfigurationDeclaration) data;
String tagName = decl.getNode().getName();
ConfigurationProvider provider = decl.getConfigurationBuilder().providerForTag(tagName);
if (provider == null) {
throw new ConfigurationRuntimeException(""No ConfigurationProvider registered for tag "" + tagName);
}
try {
AbstractConfiguration config = provider.getConfiguration(decl);
installInterpolator(decl, config);
return config;
} catch (Exception ex) {
if (!decl.isOptional()) {
throw ex;
} else {
if (logger.isDebugEnabled()) {
logger.debug(""Load failed for optional configuration "" + tagName + "": "" + ex.getMessage());
}
decl.getConfigurationBuilder().fireError(EVENT_ERR_LOAD_OPTIONAL, decl.getConfiguration().getString(ATTR_NAME), null, ex);
if (decl.isForceCreate()) {
try {
return provider.getEmptyConfiguration(decl);
} catch (Exception ex2) {
logger.warn(""Could not create instance of optional configuration "" + tagName, ex2);
}
}
return null;
}
}
}","public Object createBean(Class<?> beanClass, BeanDeclaration data, Object param) throws Exception {
ConfigurationDeclaration configurationdeclarationVar1 = configurationdeclarationLiteral2;
String stringVar3 = stringLiteral4;
ConfigurationProvider configurationproviderVar5 = configurationproviderLiteral6;
if (configurationproviderVar5 == null) {
throw new ConfigurationRuntimeException(""No ConfigurationProvider registered for tag "" + stringVar3);
}
try {
AbstractConfiguration abstractconfigurationVar7 = abstractconfigurationLiteral8;
installInterpolator(configurationdeclarationVar1, abstractconfigurationVar7);
return abstractconfigurationVar7;
} catch (Exception ex) {
if (!configurationdeclarationVar1.isOptional()) {
throw ex;
} else {
if (logger.isDebugEnabled()) {
logger.debug(""Load failed for optional configuration "" + stringVar3 + "": "" + ex.getMessage());
}
configurationdeclarationVar1.getConfigurationBuilder().fireError(EVENT_ERR_LOAD_OPTIONAL, configurationdeclarationVar1.getConfiguration().getString(ATTR_NAME), null, ex);
if (configurationdeclarationVar1.isForceCreate()) {
try {
return configurationproviderVar5.getEmptyConfiguration(configurationdeclarationVar1);
} catch (Exception ex2) {
logger.warn(""Could not create instance of optional configuration "" + stringVar3, ex2);
}
}
return null;
}
}
}"
8382,BAD_PRACTICE,SE_NO_SERIALVERSIONID,FP,configuration,5593,"super();
reloadLock = new Lock(LOCK_NAME);
}
public HierarchicalReloadableConfiguration(Object lock)
{
super();
reloadLock = lock == null ? new Lock(LOCK_NAME) : lock;
}
public HierarchicalReloadableConfiguration(HierarchicalConfiguration c)
{
super(c);
reloadLock = new Lock(LOCK_NAME);
}
@Override
public Object getReloadLock()
{
return reloadLock;
",private final Object reloadLock;,private final Object objectVar1;
8385,Multithreaded correctness,DL_SYNCHRONIZATION_ON_SHARED_CONSTANT,FP,configuration,5596,"synchronized (counterLock)
","public Lock(String name) {
this.name = name;
synchronized (counterLock) {
instanceId = ++counter;
}
}","public Lock(String name) {
this.name = name;
synchronized (counterLock) {
instanceId = ++counter;
}
}"
8404,DODGY_CODE,REC_CATCH_EXCEPTION,FP,configuration,5615,"catch (Exception ex)
","private FileSystemOptions getOptions(String scheme) {
FileSystemOptions opts = new FileSystemOptions();
FileSystemConfigBuilder builder;
try {
builder = VFS.getManager().getFileSystemConfigBuilder(scheme);
} catch (Exception ex) {
return null;
}
FileOptionsProvider provider = getFileOptionsProvider();
if (provider != null) {
Map<String, Object> map = provider.getOptions();
if (map == null) {
return null;
}
int count = 0;
for (Map.Entry<String, Object> entry : map.entrySet()) {
try {
String key = entry.getKey();
if (FileOptionsProvider.CURRENT_USER.equals(key)) {
key = ""creatorName"";
}
setProperty(builder, opts, key, entry.getValue());
++count;
} catch (Exception ex) {
continue;
}
}
if (count > 0) {
return opts;
}
}
return null;
}","private FileSystemOptions getOptions(String scheme) {
FileSystemOptions filesystemoptionsVar1 = filesystemoptionsLiteral2;
FileSystemConfigBuilder filesystemconfigbuilderVar3;
try {
filesystemconfigbuilderVar3 = VFS.getManager().getFileSystemConfigBuilder(scheme);
} catch (Exception ex) {
return null;
}
FileOptionsProvider fileoptionsproviderVar4 = fileoptionsproviderLiteral5;
if (fileoptionsproviderVar4 != null) {
Map<String, Object> map<string,object>Var6 = map<string,object>Literal7;
if (map<string,object>Var6 == null) {
return null;
}
int intVar8 = intLiteral9;
for (Map.Entry<String, Object> map.entry<string,object>Var10 : map<string,object>Var6.entrySet()) {
try {
String stringVar11 = stringLiteral12;
if (FileOptionsProvider.CURRENT_USER.equals(stringVar11)) {
stringVar11 = ""creatorName"";
}
setProperty(filesystemconfigbuilderVar3, filesystemoptionsVar1, stringVar11, map.entry<string,object>Var10.getValue());
++intVar8;
} catch (Exception ex) {
continue;
}
}
if (intVar8 > 0) {
return filesystemoptionsVar1;
}
}
return null;
}"
8413,BAD_PRACTICE,SE_BAD_FIELD_STORE,FP,configuration,5624,private EntityResolver entityResolver = new DefaultEntityResolver();,private EntityResolver entityResolver = new DefaultEntityResolver();,private EntityResolver entityresolverVar1 = entityresolverLiteral2;
8434,DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,configuration,5645,"return createNodePointer(subNodes.get(positionToIndex(getPosition())));
","public NodePointer getNodePointer() {
if (getPosition() < 1 && !setPosition(1)) {
return null;
}
return createNodePointer(subNodes.get(positionToIndex(getPosition())));
}","public NodePointer getNodePointer() {
if (getPosition() < 1 && !setPosition(1)) {
return null;
}
return createNodePointer(subNodes.get(positionToIndex(getPosition())));
}"
8491,PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,configuration,5702,"{
@Override
protected Object interpolate(final Object value)
{
return parent.interpolate(value);
}
@Override
public ConfigurationInterpolator getInterpolator()
{
return parent.getInterpolator();
","@Override
public void visitBeforeChildren(final ImmutableNode node, final NodeHandler<ImmutableNode> handler) {
final ReferenceNodeHandler refHandler = (ReferenceNodeHandler) handler;
updateNode(node, refHandler);
insertNewChildNodes(node, refHandler);
}","@Override
public void visitBeforeChildren(final ImmutableNode node, final NodeHandler<ImmutableNode> handler) {
final ReferenceNodeHandler referencenodehandlerVar1 = referencenodehandlerLiteral2;
updateNode(node, referencenodehandlerVar1);
insertNewChildNodes(node, referencenodehandlerVar1);
}"
8507,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,configuration,5718,"return new ConfigurationBuilderResultCreatedEvent(this,
","private ConfigurationBuilderEvent createEventWithChangedSource(final ConfigurationBuilderEvent event) {
if (ConfigurationBuilderResultCreatedEvent.RESULT_CREATED.equals(event.getEventType())) {
return new ConfigurationBuilderResultCreatedEvent(this, ConfigurationBuilderResultCreatedEvent.RESULT_CREATED, ((ConfigurationBuilderResultCreatedEvent) event).getConfiguration());
}
@SuppressWarnings(""unchecked"")
final EventType<? extends ConfigurationBuilderEvent> type = (EventType<? extends ConfigurationBuilderEvent>) event.getEventType();
return new ConfigurationBuilderEvent(this, type);
}","private ConfigurationBuilderEvent createEventWithChangedSource(final ConfigurationBuilderEvent event) {
if (ConfigurationBuilderResultCreatedEvent.RESULT_CREATED.equals(event.getEventType())) {
return new ConfigurationBuilderResultCreatedEvent(this, ConfigurationBuilderResultCreatedEvent.RESULT_CREATED, ((ConfigurationBuilderResultCreatedEvent) event).getConfiguration());
}
@SuppressWarnings(""unchecked"")
final EventType<? extends ConfigurationBuilderEvent> eventtype<? extends configurationbuilderevent>Var1 = eventtype<? extends configurationbuilderevent>Literal2;
return new ConfigurationBuilderEvent(this, eventtype<? extends configurationbuilderevent>Var1);
}"
8512,PERFORMANCE,DM_FP_NUMBER_CTOR,FP,configuration,5723,"return new Float(n.floatValue());
","public static Float toFloat(final Object value) throws ConversionException {
final Number n = toNumber(value, Float.class);
if (n instanceof Float) {
return (Float) n;
}
return new Float(n.floatValue());
}","public static Float toFloat(final Object value) throws ConversionException {
final Number numberVar1 = numberLiteral2;
if (numberVar1 instanceof Float) {
return (Float) numberVar1;
}
return new Float(numberVar1.floatValue());
}"
8523,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,configuration,5734,"final ConfigurationInterpolator ci = ((CatalogManager) catalogManager).getInterpolator();
","@Override
protected String normalizeURI(final String uriref) {
final ConfigurationInterpolator ci = ((CatalogManager) catalogManager).getInterpolator();
final String resolved = ci != null ? String.valueOf(ci.interpolate(uriref)) : uriref;
return super.normalizeURI(resolved);
}","@Override
protected String normalizeURI(final String uriref) {
final ConfigurationInterpolator configurationinterpolatorVar1 = configurationinterpolatorLiteral2;
final String stringVar3 = stringLiteral4;
return super.normalizeURI(stringVar3);
}"
8556,I18N,DM_DEFAULT_ENCODING,FP,configuration,5767,"writer = new OutputStreamWriter(out);
","public void save(OutputStream out, String encoding) throws ConfigurationException {
Writer writer = null;
if (encoding != null) {
try {
writer = new OutputStreamWriter(out, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (writer == null) {
writer = new OutputStreamWriter(out);
}
save(writer);
}","public void save(OutputStream out, String encoding) throws ConfigurationException {
Writer writerVar1 = writerLiteral2;
if (encoding != null) {
try {
writerVar1 = new OutputStreamWriter(out, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (writerVar1 == null) {
writerVar1 = new OutputStreamWriter(out);
}
save(writerVar1);
}"
8564,SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,configuration,5775,"pstmt = getConnection().prepareStatement(statement);
","protected PreparedStatement createStatement(String sql, boolean nameCol) throws SQLException {
String statement;
if (nameCol && nameColumn != null) {
StringBuilder buf = new StringBuilder(sql);
buf.append("" AND "").append(nameColumn).append(""=?"");
statement = buf.toString();
} else {
statement = sql;
}
pstmt = getConnection().prepareStatement(statement);
return pstmt;
}","protected PreparedStatement createStatement(String sql, boolean nameCol) throws SQLException {
String stringVar1;
if (nameCol && nameColumn != null) {
StringBuilder stringbuilderVar2 = stringbuilderLiteral3;
stringbuilderVar2.append("" AND "").append(nameColumn).append(""=?"");
stringVar1 = stringbuilderVar2.toString();
} else {
stringVar1 = sql;
}
pstmt = getConnection().prepareStatement(stringVar1);
return pstmt;
}"
8566,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,configuration,5777,"ConfigurationDeclaration decl = (ConfigurationDeclaration) data;
","public Object createBean(Class<?> beanClass, BeanDeclaration data, Object param) throws Exception {
ConfigurationDeclaration decl = (ConfigurationDeclaration) data;
String tagName = decl.getNode().getName();
ConfigurationProvider provider = decl.getConfigurationBuilder().providerForTag(tagName);
if (provider == null) {
throw new ConfigurationRuntimeException(""No ConfigurationProvider registered for tag "" + tagName);
}
try {
return provider.getConfiguration(decl);
} catch (Exception ex) {
if (!decl.isOptional()) {
throw ex;
} else {
if (logger.isDebugEnabled()) {
logger.debug(""Load failed for optional configuration "" + tagName + "": "" + ex.getMessage());
}
decl.getConfigurationBuilder().fireError(EVENT_ERR_LOAD_OPTIONAL, decl.getConfiguration().getString(ATTR_NAME), null, ex);
if (decl.isForceCreate()) {
try {
return provider.getEmptyConfiguration(decl);
} catch (Exception ex2) {
;
}
}
return null;
}
}
}","public Object createBean(Class<?> beanClass, BeanDeclaration data, Object param) throws Exception {
ConfigurationDeclaration configurationdeclarationVar1 = configurationdeclarationLiteral2;
String stringVar3 = stringLiteral4;
ConfigurationProvider configurationproviderVar5 = configurationproviderLiteral6;
if (configurationproviderVar5 == null) {
throw new ConfigurationRuntimeException(""No ConfigurationProvider registered for tag "" + stringVar3);
}
try {
return configurationproviderVar5.getConfiguration(configurationdeclarationVar1);
} catch (Exception ex) {
if (!configurationdeclarationVar1.isOptional()) {
throw ex;
} else {
if (logger.isDebugEnabled()) {
logger.debug(""Load failed for optional configuration "" + stringVar3 + "": "" + ex.getMessage());
}
configurationdeclarationVar1.getConfigurationBuilder().fireError(EVENT_ERR_LOAD_OPTIONAL, configurationdeclarationVar1.getConfiguration().getString(ATTR_NAME), null, ex);
if (configurationdeclarationVar1.isForceCreate()) {
try {
return configurationproviderVar5.getEmptyConfiguration(configurationdeclarationVar1);
} catch (Exception ex2) {
;
}
}
return null;
}
}
}"
8574,Multithreaded correctness,RV_RETURN_VALUE_OF_PUTIFABSENT_IGNORED,FP,configuration,5785,"configurationsMap.putIfAbsent(pattern, configuration);
","private AbstractHierarchicalFileConfiguration getConfiguration() {
if (pattern == null) {
throw new ConfigurationRuntimeException(""File pattern must be defined"");
}
String path = localSubst.replace(pattern);
if (configurationsMap.containsKey(path)) {
return configurationsMap.get(path);
}
if (path.equals(pattern)) {
XMLConfiguration configuration = new XMLConfiguration() {
@Override
public void load() throws ConfigurationException {
}
@Override
public void save() throws ConfigurationException {
}
};
configurationsMap.putIfAbsent(pattern, configuration);
return configuration;
}
XMLConfiguration configuration = new XMLConfiguration();
if (loggerName != null) {
Log log = LogFactory.getLog(loggerName);
if (log != null) {
configuration.setLogger(log);
}
}
configuration.setBasePath(getBasePath());
configuration.setFileName(path);
configuration.setFileSystem(getFileSystem());
configuration.setExpressionEngine(getExpressionEngine());
ReloadingStrategy strategy = createReloadingStrategy();
if (strategy != null) {
configuration.setReloadingStrategy(strategy);
}
configuration.setDelimiterParsingDisabled(isDelimiterParsingDisabled());
configuration.setAttributeSplittingDisabled(isAttributeSplittingDisabled());
configuration.setValidating(validating);
configuration.setSchemaValidation(schemaValidation);
configuration.setEntityResolver(entityResolver);
configuration.setListDelimiter(getListDelimiter());
configuration.addConfigurationListener(this);
configuration.addErrorListener(this);
try {
configuration.load();
} catch (ConfigurationException ce) {
if (isThrowable(ce)) {
throw new ConfigurationRuntimeException(ce);
}
}
configurationsMap.putIfAbsent(path, configuration);
return configurationsMap.get(path);
}","private AbstractHierarchicalFileConfiguration getConfiguration() {
if (pattern == null) {
throw new ConfigurationRuntimeException(""File pattern must be defined"");
}
String stringVar1 = stringLiteral2;
if (configurationsMap.containsKey(stringVar1)) {
return configurationsMap.get(stringVar1);
}
if (stringVar1.equals(pattern)) {
XMLConfiguration xmlconfigurationVar3 = xmlconfigurationLiteral4;
configurationsMap.putIfAbsent(pattern, xmlconfigurationVar3);
return xmlconfigurationVar3;
}
XMLConfiguration xmlconfigurationVar3 = xmlconfigurationLiteral5;
if (loggerName != null) {
Log logVar6 = logLiteral7;
if (logVar6 != null) {
xmlconfigurationVar3.setLogger(logVar6);
}
}
xmlconfigurationVar3.setBasePath(getBasePath());
xmlconfigurationVar3.setFileName(stringVar1);
xmlconfigurationVar3.setFileSystem(getFileSystem());
xmlconfigurationVar3.setExpressionEngine(getExpressionEngine());
ReloadingStrategy reloadingstrategyVar8 = reloadingstrategyLiteral9;
if (reloadingstrategyVar8 != null) {
xmlconfigurationVar3.setReloadingStrategy(reloadingstrategyVar8);
}
xmlconfigurationVar3.setDelimiterParsingDisabled(isDelimiterParsingDisabled());
xmlconfigurationVar3.setAttributeSplittingDisabled(isAttributeSplittingDisabled());
xmlconfigurationVar3.setValidating(validating);
xmlconfigurationVar3.setSchemaValidation(schemaValidation);
xmlconfigurationVar3.setEntityResolver(entityResolver);
xmlconfigurationVar3.setListDelimiter(getListDelimiter());
xmlconfigurationVar3.addConfigurationListener(this);
xmlconfigurationVar3.addErrorListener(this);
try {
xmlconfigurationVar3.load();
} catch (ConfigurationException ce) {
if (isThrowable(ce)) {
throw new ConfigurationRuntimeException(ce);
}
}
configurationsMap.putIfAbsent(stringVar1, xmlconfigurationVar3);
return configurationsMap.get(stringVar1);
}"
8582,I18N,DM_DEFAULT_ENCODING,FP,configuration,5793,"reader = new InputStreamReader(in);
","public void load(InputStream in, String encoding) throws ConfigurationException {
Reader reader = null;
if (encoding != null) {
try {
reader = new InputStreamReader(in, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (reader == null) {
reader = new InputStreamReader(in);
}
load(reader);
}","public void load(InputStream in, String encoding) throws ConfigurationException {
Reader readerVar1 = readerLiteral2;
if (encoding != null) {
try {
readerVar1 = new InputStreamReader(in, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (readerVar1 == null) {
readerVar1 = new InputStreamReader(in);
}
load(readerVar1);
}"
8596,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,configuration,5807,"T node2 = ((ConfigurationNodePointer<T>) pointer2).getConfigurationNode();
","@SuppressWarnings(""unchecked"")
@Override
public int compareChildNodePointers(NodePointer pointer1, NodePointer pointer2) {
T node1 = ((ConfigurationNodePointer<T>) pointer1).getConfigurationNode();
T node2 = ((ConfigurationNodePointer<T>) pointer2).getConfigurationNode();
for (T child : getNodeHandler().getChildren(getConfigurationNode())) {
if (child == node1) {
return -1;
} else if (child == node2) {
return 1;
}
}
return 0;
}","@Override
public int compareChildNodePointers(NodePointer pointer1, NodePointer pointer2) {
T TVar1 = ((ConfigurationNodePointer<T>) pointer1).getConfigurationNode();
T TVar2 = ((ConfigurationNodePointer<T>) pointer2).getConfigurationNode();
for (T TVar3 : getNodeHandler().getChildren(getConfigurationNode())) {
if (TVar3 == TVar1) {
return -1;
} else if (TVar3 == TVar2) {
return 1;
}
}
return 0;"
8601,CORRECTNESS,NP_GUARANTEED_DEREF,FP,configuration,5812,"if (fileName.startsWith(""."" + File.separator))
","public static File constructFile(String basePath, String fileName) {
File file;
File absolute = null;
if (fileName != null) {
absolute = new File(fileName);
}
if (StringUtils.isEmpty(basePath) || (absolute != null && absolute.isAbsolute())) {
file = new File(fileName);
} else {
StringBuilder fName = new StringBuilder();
fName.append(basePath);
if (!basePath.endsWith(File.separator)) {
fName.append(File.separator);
}
if (fileName.startsWith(""."" + File.separator)) {
fName.append(fileName.substring(2));
} else {
fName.append(fileName);
}
file = new File(fName.toString());
}
return file;
}","public static File constructFile(String basePath, String fileName) {
File fileVar1;
File fileVar2 = fileLiteral3;
if (fileName != null) {
fileVar2 = new File(fileName);
}
if (StringUtils.isEmpty(basePath) || (fileVar2 != null && fileVar2.isAbsolute())) {
fileVar1 = new File(fileName);
} else {
StringBuilder stringbuilderVar4 = stringbuilderLiteral5;
stringbuilderVar4.append(basePath);
if (!basePath.endsWith(File.separator)) {
stringbuilderVar4.append(File.separator);
}
if (fileName.startsWith(""."" + File.separator)) {
stringbuilderVar4.append(fileName.substring(2));
} else {
stringbuilderVar4.append(fileName);
}
fileVar1 = new File(stringbuilderVar4.toString());
}
return fileVar1;
}"
8603,DODGY_CODE,REC_CATCH_EXCEPTION,FP,configuration,5814,"catch (Exception ex)
","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String methodName = ""set"" + key.substring(0, 1).toUpperCase() + key.substring(1);
Class[] paramTypes = new Class[2];
paramTypes[0] = FileSystemOptions.class;
paramTypes[1] = value.getClass();
try {
Method method = builder.getClass().getMethod(methodName, paramTypes);
Object[] params = new Object[2];
params[0] = options;
params[1] = value;
method.invoke(builder, params);
} catch (Exception ex) {
return;
}
}","private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String stringVar1 = stringLiteral2;
Class[] classArrayVar3 = classArrayLiteral4;
classArrayVar3[0] = FileSystemOptions.class;
classArrayVar3[1] = value.getClass();
try {
Method methodVar5 = methodLiteral6;
Object[] objectArrayVar7 = objectArrayLiteral8;
objectArrayVar7[0] = options;
objectArrayVar7[1] = value;
methodVar5.invoke(builder, objectArrayVar7);
} catch (Exception ex) {
return;
}
}"
8616,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,configuration,5827,"List list = new ArrayList();
Object element = null;
jj_consume_token(ARRAY_BEGIN);
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
case ARRAY_BEGIN:
case OBJECT_BEGIN:
case STRING:
case INTEGER:
case REAL:
case TRUE:
case FALSE:
case NULL:
element = Value();
list.add(element);
label_2:
while (true) {
switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
case LIST_SEPARATOR:
;
break;
default:
jj_la1[3] = jj_gen;
break label_2;
}
jj_consume_token(LIST_SEPARATOR);
element = Value();
list.add(element);
}
break;
default:
jj_la1[4] = jj_gen;
;
}
jj_consume_token(ARRAY_END);
{if (true) return list;}
","final public List Array() throws ParseException {
List list = new ArrayList();
Object element = null;
jj_consume_token(ARRAY_BEGIN);
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case ARRAY_BEGIN:
case OBJECT_BEGIN:
case STRING:
case INTEGER:
case REAL:
case TRUE:
case FALSE:
case NULL:
element = Value();
list.add(element);
label_2: while (true) {
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case LIST_SEPARATOR:
;
break;
default:
jj_la1[3] = jj_gen;
break label_2;
}
jj_consume_token(LIST_SEPARATOR);
element = Value();
list.add(element);
}
break;
default:
jj_la1[4] = jj_gen;
;
}
jj_consume_token(ARRAY_END);
{
if (true)
return list;
}
throw new Error(""Missing return statement in function"");
}","final public List Array() throws ParseException {
List listVar1 = listLiteral2;
Object objectVar3 = objectLiteral4;
jj_consume_token(ARRAY_BEGIN);
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case ARRAY_BEGIN:
case OBJECT_BEGIN:
case STRING:
case INTEGER:
case REAL:
case TRUE:
case FALSE:
case NULL:
objectVar3 = Value();
listVar1.add(objectVar3);
label_2: while (true) {
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case LIST_SEPARATOR:
;
break;
default:
jj_la1[3] = jj_gen;
break label_2;
}
jj_consume_token(LIST_SEPARATOR);
objectVar3 = Value();
listVar1.add(objectVar3);
}
break;
default:
jj_la1[4] = jj_gen;
;
}
jj_consume_token(ARRAY_END);
{
if (true)
return listVar1;
}
throw new Error(""Missing return statement in function"");
}"
8618,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,configuration,5829,"try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
token_source.ReInit(jj_input_stream);
token = new Token();
jj_ntk = -1;
jj_gen = 0;
for (int i = 0; i < 5; i++) jj_la1[i] = -1;
}
","public void ReInit(java.io.InputStream stream, String encoding) {
try {
jj_input_stream.ReInit(stream, encoding, 1, 1);
} catch (java.io.UnsupportedEncodingException e) {
throw new RuntimeException(e);
}
token_source.ReInit(jj_input_stream);
token = new Token();
jj_ntk = -1;
jj_gen = 0;
for (int i = 0; i < 5; i++) jj_la1[i] = -1;
}","public void ReInit(java.io.InputStream stream, String encoding) {
try {
jj_input_stream.ReInit(stream, encoding, 1, 1);
} catch (java.io.UnsupportedEncodingException e) {
throw new RuntimeException(e);
}
token_source.ReInit(jj_input_stream);
token = new Token();
jj_ntk = -1;
jj_gen = 0;
for (int intVar3 = intLiteral4; intVar1 < intLiteral1; intVar1++) jj_la1[intVar1] = -1;
}"
8625,PERFORMANCE,SBSC_USE_STRINGBUFFER_CONCATENATION,FP,configuration,5836,"retval += "" \"""";
","public String getMessage() {
if (!specialConstructor) {
return super.getMessage();
}
StringBuffer expected = new StringBuffer();
int maxSize = 0;
for (int i = 0; i < expectedTokenSequences.length; i++) {
if (maxSize < expectedTokenSequences[i].length) {
maxSize = expectedTokenSequences[i].length;
}
for (int j = 0; j < expectedTokenSequences[i].length; j++) {
expected.append(tokenImage[expectedTokenSequences[i][j]]).append(' ');
}
if (expectedTokenSequences[i][expectedTokenSequences[i].length - 1] != 0) {
expected.append(""..."");
}
expected.append(eol).append(""    "");
}
String retval = ""Encountered \"""";
Token tok = currentToken.next;
for (int i = 0; i < maxSize; i++) {
if (i != 0)
retval += "" "";
if (tok.kind == 0) {
retval += tokenImage[0];
break;
}
retval += "" "" + tokenImage[tok.kind];
retval += "" \"""";
retval += add_escapes(tok.image);
retval += "" \"""";
tok = tok.next;
}
retval += ""\"" at line "" + currentToken.next.beginLine + "", column "" + currentToken.next.beginColumn;
retval += ""."" + eol;
if (expectedTokenSequences.length == 1) {
retval += ""Was expecting:"" + eol + ""    "";
} else {
retval += ""Was expecting one of:"" + eol + ""    "";
}
retval += expected.toString();
return retval;
}","public String getMessage() {
if (!specialConstructor) {
return super.getMessage();
}
StringBuffer stringbufferVar1 = stringbufferLiteral2;
int intVar3 = intLiteral4;
for (int intVar11 = intLiteral12; intVar5 < intLiteral1; intVar5++) {
if (intVar3 < expectedTokenSequences[intVar5].length) {
intVar3 = expectedTokenSequences[intVar5].length;
}
for (int intVar13 = intLiteral12; intVar6 < intLiteral2; intVar6++) {
stringbufferVar1.append(tokenImage[expectedTokenSequences[intVar5][intVar6]]).append(' ');
}
if (expectedTokenSequences[intVar5][expectedTokenSequences[intVar5].length - 1] != 0) {
stringbufferVar1.append(""..."");
}
stringbufferVar1.append(eol).append(""    "");
}
String stringVar7 = stringLiteral8;
Token tokenVar9 = tokenLiteral10;
for (int intVar11 = intLiteral12; intVar5 < intLiteral3; intVar5++) {
if (intVar5 != 0)
stringVar7 += "" "";
if (tokenVar9.kind == 0) {
stringVar7 += tokenImage[0];
break;
}
stringVar7 += "" "" + tokenImage[tokenVar9.kind];
stringVar7 += "" \"""";
stringVar7 += add_escapes(tokenVar9.image);
stringVar7 += "" \"""";
tokenVar9 = tokenVar9.next;
}
stringVar7 += ""\"" at line "" + currentToken.next.beginLine + "", column "" + currentToken.next.beginColumn;
stringVar7 += ""."" + eol;
if (expectedTokenSequences.length == 1) {
stringVar7 += ""Was expecting:"" + eol + ""    "";
} else {
stringVar7 += ""Was expecting one of:"" + eol + ""    "";
}
stringVar7 += stringbufferVar1.toString();
return stringVar7;
}"
8628,I18N,DM_DEFAULT_ENCODING,FP,configuration,5839,"ReInit(encoding == null ? new java.io.InputStreamReader(dstream) : new java.io.InputStreamReader(dstream, encoding), startline, startcolumn, buffersize);
","public void ReInit(java.io.InputStream dstream, String encoding, int startline, int startcolumn, int buffersize) throws java.io.UnsupportedEncodingException {
ReInit(encoding == null ? new java.io.InputStreamReader(dstream) : new java.io.InputStreamReader(dstream, encoding), startline, startcolumn, buffersize);
}","public void ReInit(java.io.InputStream dstream, String encoding, int startline, int startcolumn, int buffersize) throws java.io.UnsupportedEncodingException {
ReInit(encoding == null ? new java.io.InputStreamReader(dstream) : new java.io.InputStreamReader(dstream, encoding), startline, startcolumn, buffersize);
}"
8631,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,configuration,5842,"ReInit(dstream, encoding, 1, 1, 4096);
}
","public void ReInit(java.io.InputStream dstream, String encoding) throws java.io.UnsupportedEncodingException {
ReInit(dstream, encoding, 1, 1, 4096);
}","public void ReInit(java.io.InputStream dstream, String encoding) throws java.io.UnsupportedEncodingException {
ReInit(dstream, encoding, 1, 1, 4096);
}"
8641,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,configuration,5852,"inputStream = dstream;
line = startline;
column = startcolumn - 1;
if (buffer == null || buffersize != buffer.length)
{
available = bufsize = buffersize;
buffer = new char[buffersize];
bufline = new int[buffersize];
bufcolumn = new int[buffersize];
}
prevCharIsLF = prevCharIsCR = false;
tokenBegin = inBuf = maxNextCharInd = 0;
bufpos = -1;
}
","public void ReInit(java.io.Reader dstream, int startline, int startcolumn, int buffersize) {
inputStream = dstream;
line = startline;
column = startcolumn - 1;
if (buffer == null || buffersize != buffer.length) {
available = bufsize = buffersize;
buffer = new char[buffersize];
bufline = new int[buffersize];
bufcolumn = new int[buffersize];
}
prevCharIsLF = prevCharIsCR = false;
tokenBegin = inBuf = maxNextCharInd = 0;
bufpos = -1;
}","public void ReInit(java.io.Reader dstream, int startline, int startcolumn, int buffersize) {
inputStream = dstream;
line = startline;
column = startcolumn - 1;
if (buffer == null || buffersize != buffer.length) {
available = bufsize = buffersize;
buffer = new char[buffersize];
bufline = new int[buffersize];
bufcolumn = new int[buffersize];
}
prevCharIsLF = prevCharIsCR = false;
tokenBegin = inBuf = maxNextCharInd = 0;
bufpos = -1;
}"
8655,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,configuration,5866,"token = jj_consume_token(DATA);
{if (true) return filterData(token.image);}
","final public byte[] Data() throws ParseException {
Token token;
token = jj_consume_token(DATA);
{
if (true)
return filterData(token.image);
}
throw new Error(""Missing return statement in function"");
}","final public byte[] Data() throws ParseException {
Token tokenVar1;
tokenVar1 = jj_consume_token(DATA);
{
if (true)
return filterData(tokenVar1.image);
}
throw new Error(""Missing return statement in function"");
}"
8665,DODGY_CODE,DB_DUPLICATE_SWITCH_CLAUSES,FP,configuration,5876,"if ((jjbitVec0[i2] & l2) == 0L)
{
break;
}
if (kind > 21)
{
kind = 21;
}
jjCheckNAdd(8);
break;
","private int jjMoveNfa_0(int startState, int curPos) {
int startsAt = 0;
jjnewStateCnt = 14;
int i = 1;
jjstateSet[0] = startState;
int kind = 0x7fffffff;
for (; ; ) {
if (++jjround == 0x7fffffff) {
ReInitRounds();
}
if (curChar < 64) {
long l = 1L << curChar;
do {
switch(jjstateSet[--i]) {
case 15:
if ((0xd7ffecfaffffd9ffL & l) != 0L) {
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
}
if ((0x7ff280100000000L & l) != 0L) {
jjCheckNAddTwoStates(4, 5);
} else if (curChar == 62) {
if (kind > 20) {
kind = 20;
}
}
break;
case 6:
if ((0xd7ffecfaffffd9ffL & l) != 0L) {
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
}
if ((0x3ff000100002600L & l) != 0L) {
jjCheckNAddTwoStates(1, 2);
} else if (curChar == 42) {
jjstateSet[jjnewStateCnt++] = 3;
} else if (curChar == 62) {
if (kind > 19) {
kind = 19;
}
}
break;
case 14:
if ((0xfffffffbffffffffL & l) != 0L) {
jjCheckNAddStates(0, 2);
} else if (curChar == 34) {
if (kind > 22) {
kind = 22;
}
}
break;
case 3:
case 8:
if ((0xd7ffecfaffffd9ffL & l) == 0L) {
break;
}
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
break;
case 0:
if ((0xd7ffecfaffffd9ffL & l) != 0L) {
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
} else if (curChar == 34) {
jjCheckNAddStates(0, 2);
}
if (curChar == 60) {
jjstateSet[jjnewStateCnt++] = 6;
}
if (curChar == 60) {
jjCheckNAddTwoStates(1, 2);
}
break;
case 1:
if ((0x3ff000100002600L & l) != 0L) {
jjCheckNAddTwoStates(1, 2);
}
break;
case 2:
if (curChar == 62 && kind > 19) {
kind = 19;
}
break;
case 4:
if ((0x7ff280100000000L & l) != 0L) {
jjCheckNAddTwoStates(4, 5);
}
break;
case 5:
if (curChar == 62 && kind > 20) {
kind = 20;
}
break;
case 7:
if (curChar == 60) {
jjstateSet[jjnewStateCnt++] = 6;
}
break;
case 9:
case 11:
if (curChar == 34) {
jjCheckNAddStates(0, 2);
}
break;
case 10:
if ((0xfffffffbffffffffL & l) != 0L) {
jjCheckNAddStates(0, 2);
}
break;
case 13:
if (curChar == 34 && kind > 22) {
kind = 22;
}
break;
default:
break;
}
} while (i != startsAt);
} else if (curChar < 128) {
long l = 1L << (curChar & 077);
do {
switch(jjstateSet[--i]) {
case 15:
if ((0xd7ffffffffffffffL & l) != 0L) {
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
}
if (curChar == 90) {
jjCheckNAddTwoStates(4, 5);
}
break;
case 6:
if ((0xd7ffffffffffffffL & l) != 0L) {
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
}
if ((0x7e0000007eL & l) != 0L) {
jjCheckNAddTwoStates(1, 2);
}
break;
case 14:
jjCheckNAddStates(0, 2);
if (curChar == 92) {
jjstateSet[jjnewStateCnt++] = 11;
}
break;
case 3:
if ((0xd7ffffffffffffffL & l) != 0L) {
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
}
if (curChar == 68) {
jjCheckNAddTwoStates(4, 5);
}
break;
case 0:
case 8:
if ((0xd7ffffffffffffffL & l) == 0L) {
break;
}
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
break;
case 1:
if ((0x7e0000007eL & l) != 0L) {
jjCheckNAddTwoStates(1, 2);
}
break;
case 4:
if (curChar == 90) {
jjCheckNAddTwoStates(4, 5);
}
break;
case 10:
jjCheckNAddStates(0, 2);
break;
case 12:
if (curChar == 92) {
jjstateSet[jjnewStateCnt++] = 11;
}
break;
default:
break;
}
} while (i != startsAt);
} else {
int i2 = (curChar & 0xff) >> 6;
long l2 = 1L << (curChar & 077);
do {
switch(jjstateSet[--i]) {
case 15:
case 8:
if ((jjbitVec0[i2] & l2) == 0L) {
break;
}
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
break;
case 6:
if ((jjbitVec0[i2] & l2) == 0L) {
break;
}
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
break;
case 14:
case 10:
if ((jjbitVec0[i2] & l2) != 0L) {
jjCheckNAddStates(0, 2);
}
break;
case 3:
if ((jjbitVec0[i2] & l2) == 0L) {
break;
}
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
break;
case 0:
if ((jjbitVec0[i2] & l2) == 0L) {
break;
}
if (kind > 21) {
kind = 21;
}
jjCheckNAdd(8);
break;
default:
break;
}
} while (i != startsAt);
}
if (kind != 0x7fffffff) {
jjmatchedKind = kind;
jjmatchedPos = curPos;
kind = 0x7fffffff;
}
++curPos;
if ((i = jjnewStateCnt) == (startsAt = 14 - (jjnewStateCnt = startsAt))) {
return curPos;
}
try {
curChar = input_stream.readChar();
} catch (java.io.IOException e) {
return curPos;
}
}
}","private int jjMoveNfa_0(int startState, int curPos) {
int intVar1 = intLiteral2;
jjnewStateCnt = 14;
int intVar3 = intLiteral4;
jjstateSet[0] = startState;
int intVar5 = intLiteral6;
for (; ; ) {
if (++jjround == 0x7fffffff) {
ReInitRounds();
}
if (curChar < 64) {
long longVar7 = longLiteral8;
do {
switch(jjstateSet[--intVar3]) {
case 15:
if ((0xd7ffecfaffffd9ffL & longVar7) != 0L) {
if (intVar5 > 21) {
intVar5 = 21;
}
jjCheckNAdd(8);
}
if ((0x7ff280100000000L & longVar7) != 0L) {
jjCheckNAddTwoStates(4, 5);
} else if (curChar == 62) {
if (intVar5 > 20) {
intVar5 = 20;
}
}
break;
case 6:
if ((0xd7ffecfaffffd9ffL & longVar7) != 0L) {
if (intVar5 > 21) {
intVar5 = 21;
}
jjCheckNAdd(8);
}
if ((0x3ff000100002600L & longVar7) != 0L) {
jjCheckNAddTwoStates(1, 2);
} else if (curChar == 42) {
jjstateSet[jjnewStateCnt++] = 3;
} else if (curChar == 62) {
if (intVar5 > 19) {
intVar5 = 19;
}
}
break;
case 14:
if ((0xfffffffbffffffffL & longVar7) != 0L) {
jjCheckNAddStates(0, 2);
} else if (curChar == 34) {
if (intVar5 > 22) {
intVar5 = 22;
}
}
break;
case 3:
case 8:
if ((0xd7ffecfaffffd9ffL & longVar7) == 0L) {
break;
}
if (intVar5 > 21) {
intVar5 = 21;
}
jjCheckNAdd(8);
break;
case 0:
if ((0xd7ffecfaffffd9ffL & longVar7) != 0L) {
if (intVar5 > 21) {
intVar5 = 21;
}
jjCheckNAdd(8);
} else if (curChar == 34) {
jjCheckNAddStates(0, 2);
}
if (curChar == 60) {
jjstateSet[jjnewStateCnt++] = 6;
}
if (curChar == 60) {
jjCheckNAddTwoStates(1, 2);
}
break;
case 1:
if ((0x3ff000100002600L & longVar7) != 0L) {
jjCheckNAddTwoStates(1, 2);
}
break;
case 2:
if (curChar == 62 && intVar5 > 19) {
intVar5 = 19;
}
break;
case 4:
if ((0x7ff280100000000L & longVar7) != 0L) {
jjCheckNAddTwoStates(4, 5);
}
break;
case 5:
if (curChar == 62 && intVar5 > 20) {
intVar5 = 20;
}
break;
case 7:
if (curChar == 60) {
jjstateSet[jjnewStateCnt++] = 6;
}
break;
case 9:
case 11:
if (curChar == 34) {
jjCheckNAddStates(0, 2);
}
break;
case 10:
if ((0xfffffffbffffffffL & longVar7) != 0L) {
jjCheckNAddStates(0, 2);
}
break;
case 13:
if (curChar == 34 && intVar5 > 22) {
intVar5 = 22;
}
break;
default:
break;
}
} while (intVar3 != intVar1);
} else if (curChar < 128) {
long longVar7 = longLiteral9;
do {
switch(jjstateSet[--intVar3]) {
case 15:
if ((0xd7ffffffffffffffL & longVar7) != 0L) {
if (intVar5 > 21) {
intVar5 = 21;
}
jjCheckNAdd(8);
}
if (curChar == 90) {
jjCheckNAddTwoStates(4, 5);
}
break;
case 6:
if ((0xd7ffffffffffffffL & longVar7) != 0L) {
if (intVar5 > 21) {
intVar5 = 21;
}
jjCheckNAdd(8);
}
if ((0x7e0000007eL & longVar7) != 0L) {
jjCheckNAddTwoStates(1, 2);
}
break;
case 14:
jjCheckNAddStates(0, 2);
if (curChar == 92) {
jjstateSet[jjnewStateCnt++] = 11;
}
break;
case 3:
if ((0xd7ffffffffffffffL & longVar7) != 0L) {
if (intVar5 > 21) {
intVar5 = 21;
}
jjCheckNAdd(8);
}
if (curChar == 68) {
jjCheckNAddTwoStates(4, 5);
}
break;
case 0:
case 8:
if ((0xd7ffffffffffffffL & longVar7) == 0L) {
break;
}
if (intVar5 > 21) {
intVar5 = 21;
}
jjCheckNAdd(8);
break;
case 1:
if ((0x7e0000007eL & longVar7) != 0L) {
jjCheckNAddTwoStates(1, 2);
}
break;
case 4:
if (curChar == 90) {
jjCheckNAddTwoStates(4, 5);
}
break;
case 10:
jjCheckNAddStates(0, 2);
break;
case 12:
if (curChar == 92) {
jjstateSet[jjnewStateCnt++] = 11;
}
break;
default:
break;
}
} while (intVar3 != intVar1);
} else {
int intVar10 = intLiteral11;
long longVar12 = longLiteral9;
do {
switch(jjstateSet[--intVar3]) {
case 15:
case 8:
if ((jjbitVec0[intVar10] & longVar12) == 0L) {
break;
}
if (intVar5 > 21) {
intVar5 = 21;
}
jjCheckNAdd(8);
break;
case 6:
if ((jjbitVec0[intVar10] & longVar12) == 0L) {
break;
}
if (intVar5 > 21) {
intVar5 = 21;
}
jjCheckNAdd(8);
break;
case 14:
case 10:
if ((jjbitVec0[intVar10] & longVar12) != 0L) {
jjCheckNAddStates(0, 2);
}
break;
case 3:
if ((jjbitVec0[intVar10] & longVar12) == 0L) {
break;
}
if (intVar5 > 21) {
intVar5 = 21;
}
jjCheckNAdd(8);
break;
case 0:
if ((jjbitVec0[intVar10] & longVar12) == 0L) {
break;
}
if (intVar5 > 21) {
intVar5 = 21;
}
jjCheckNAdd(8);
break;
default:
break;
}
} while (intVar3 != intVar1);
}
if (intVar5 != 0x7fffffff) {
jjmatchedKind = intVar5;
jjmatchedPos = curPos;
intVar5 = 0x7fffffff;
}
++curPos;
if ((intVar3 = jjnewStateCnt) == (intVar1 = 14 - (jjnewStateCnt = intVar1))) {
return curPos;
}
try {
curChar = input_stream.readChar();
} catch (java.io.IOException e) {
return curPos;
}
}
}"
8666,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,configuration,5877,"if (lexState >= 1 || lexState < 0)
{
throw new TokenMgrError(""Error: Ignoring invalid lexical state : "" + lexState + "". State unchanged."", TokenMgrError.INVALID_LEXICAL_STATE);
}
else
{
curLexState = lexState;
}
}
","public void SwitchTo(int lexState) {
if (lexState >= 1 || lexState < 0) {
throw new TokenMgrError(""Error: Ignoring invalid lexical state : "" + lexState + "". State unchanged."", TokenMgrError.INVALID_LEXICAL_STATE);
} else {
curLexState = lexState;
}
}","public void SwitchTo(int lexState) {
if (lexState >= 1 || lexState < 0) {
throw new TokenMgrError(""Error: Ignoring invalid lexical state : "" + lexState + "". State unchanged."", TokenMgrError.INVALID_LEXICAL_STATE);
} else {
curLexState = lexState;
}
}"
8682,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,configuration,5893,"ReInit(dstream, encoding, startline, startcolumn, 4096);
}
","public void ReInit(java.io.InputStream dstream, String encoding, int startline, int startcolumn) throws java.io.UnsupportedEncodingException {
ReInit(dstream, encoding, startline, startcolumn, 4096);
}","public void ReInit(java.io.InputStream dstream, String encoding, int startline, int startcolumn) throws java.io.UnsupportedEncodingException {
ReInit(dstream, encoding, startline, startcolumn, 4096);
}"
8683,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,configuration,5894,"column++;
if (prevCharIsLF)
{
prevCharIsLF = false;
line += (column = 1);
}
else if (prevCharIsCR)
{
prevCharIsCR = false;
if (c == '\n')
{
prevCharIsLF = true;
}
else
line += (column = 1);
}
switch (c)
{
case '\r' :
prevCharIsCR = true;
break;
case '\n' :
prevCharIsLF = true;
break;
case '\t' :
column--;
column += (tabSize - (column % tabSize));
break;
default :
break;
}
bufline[bufpos] = line;
bufcolumn[bufpos] = column;
}
","protected void UpdateLineColumn(char c) {
column++;
if (prevCharIsLF) {
prevCharIsLF = false;
line += (column = 1);
} else if (prevCharIsCR) {
prevCharIsCR = false;
if (c == '\n') {
prevCharIsLF = true;
} else
line += (column = 1);
}
switch(c) {
case '\r':
prevCharIsCR = true;
break;
case '\n':
prevCharIsLF = true;
break;
case '\t':
column--;
column += (tabSize - (column % tabSize));
break;
default:
break;
}
bufline[bufpos] = line;
bufcolumn[bufpos] = column;
}","protected void UpdateLineColumn(char c) {
column++;
if (prevCharIsLF) {
prevCharIsLF = false;
line += (column = 1);
} else if (prevCharIsCR) {
prevCharIsCR = false;
if (c == '\n') {
prevCharIsLF = true;
} else
line += (column = 1);
}
switch(c) {
case '\r':
prevCharIsCR = true;
break;
case '\n':
prevCharIsLF = true;
break;
case '\t':
column--;
column += (tabSize - (column % tabSize));
break;
default:
break;
}
bufline[bufpos] = line;
bufcolumn[bufpos] = column;
}"
8687,BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,FP,configuration,5898,"return(""Lexical error at line "" +
","protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {
return (""Lexical error at line "" + errorLine + "", column "" + errorColumn + "".  Encountered: "" + (EOFSeen ? ""<EOF> "" : (""\"""" + addEscapes(String.valueOf(curChar)) + ""\"""") + "" ("" + (int) curChar + ""), "") + ""after : \"""" + addEscapes(errorAfter) + ""\"""");
}","protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {
return (""Lexical error at line "" + errorLine + "", column "" + errorColumn + "".  Encountered: "" + (EOFSeen ? ""<EOF> "" : (""\"""" + addEscapes(String.valueOf(curChar)) + ""\"""") + "" ("" + (int) curChar + ""), "") + ""after : \"""" + addEscapes(errorAfter) + ""\"""");
}"
8688,PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,configuration,5899,"{
public InputSource resolveEntity(String publicId, String systemId)
{
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
","public void load(Reader in) throws ConfigurationException {
if (!(getRootNode() instanceof PListNode)) {
initRoot();
}
EntityResolver resolver = new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
};
XMLPropertyListHandler handler = new XMLPropertyListHandler(getRootNode());
try {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}","public void load(Reader in) throws ConfigurationException {
if (!(getRootNode() instanceof PListNode)) {
initRoot();
}
EntityResolver entityresolverVar1 = entityresolverLiteral2;
XMLPropertyListHandler xmlpropertylisthandlerVar3 = xmlpropertylisthandlerLiteral4;
try {
SAXParserFactory saxparserfactoryVar5 = saxparserfactoryLiteral6;
saxparserfactoryVar5.setValidating(true);
SAXParser saxparserVar7 = saxparserLiteral8;
saxparserVar7.getXMLReader().setEntityResolver(entityresolverVar1);
saxparserVar7.getXMLReader().setContentHandler(xmlpropertylisthandlerVar3);
saxparserVar7.getXMLReader().parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}"
8690,DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,FP,configuration,5901,"if (name == null)
","private String getName(File file) {
String name = configuration.getURL().toString();
if (name == null) {
if (file != null) {
name = file.getAbsolutePath();
} else {
name = ""base: "" + configuration.getBasePath() + ""file: "" + configuration.getFileName();
}
}
return name;
}","private String getName(File file) {
String stringVar1 = stringLiteral2;
if (stringVar1 == null) {
if (file != null) {
stringVar1 = file.getAbsolutePath();
} else {
stringVar1 = ""base: "" + configuration.getBasePath() + ""file: "" + configuration.getFileName();
}
}
return stringVar1;
}"
8713,I18N,DM_DEFAULT_ENCODING,FP,configuration,5924,"dump(configuration, new PrintWriter(out));
","public static void dump(ImmutableConfiguration configuration, PrintStream out) {
dump(configuration, new PrintWriter(out));
}","public static void dump(ImmutableConfiguration configuration, PrintStream out) {
dump(configuration, new PrintWriter(out));
}"
8741,DODGY_CODE,REC_CATCH_EXCEPTION,FP,configuration,5952,"catch (Exception e)
","@Override
public void read(Reader in) throws ConfigurationException {
EntityResolver resolver = new EntityResolver() {
@Override
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""PropertyList-1.0.dtd""));
}
};
XMLPropertyListHandler handler = new XMLPropertyListHandler();
try {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setValidating(true);
SAXParser parser = factory.newSAXParser();
parser.getXMLReader().setEntityResolver(resolver);
parser.getXMLReader().setContentHandler(handler);
parser.getXMLReader().parse(new InputSource(in));
getNodeModel().mergeRoot(handler.getResultBuilder().createNode(), null, null, null, this);
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}","@Override
public void read(Reader in) throws ConfigurationException {
EntityResolver entityresolverVar1 = entityresolverLiteral2;
XMLPropertyListHandler xmlpropertylisthandlerVar3 = xmlpropertylisthandlerLiteral4;
try {
SAXParserFactory saxparserfactoryVar5 = saxparserfactoryLiteral6;
saxparserfactoryVar5.setValidating(true);
SAXParser saxparserVar7 = saxparserLiteral8;
saxparserVar7.getXMLReader().setEntityResolver(entityresolverVar1);
saxparserVar7.getXMLReader().setContentHandler(xmlpropertylisthandlerVar3);
saxparserVar7.getXMLReader().parse(new InputSource(in));
getNodeModel().mergeRoot(xmlpropertylisthandlerVar3.getResultBuilder().createNode(), null, null, null, this);
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}"
8746,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,configuration,5957,"return (src != null) ? src.clone() : null;
","private static <T> T[] defensiveCopy(T[] src) {
return (src != null) ? src.clone() : null;
}","private static <T> T[] defensiveCopy(T[] src) {
return (src != null) ? src.clone() : null;
}"
8750,BAD_PRACTICE,SE_BAD_FIELD,FP,configuration,5961,private final QueryResult<T> attributeResult;,private final QueryResult<T> attributeResult;,private final QueryResult<T> queryresult<t>Var1;
8920,DODGY_CODE,REC_CATCH_EXCEPTION,FP,configuration,6131,"catch (Exception e)
","@Override
public void read(Reader in) throws ConfigurationException {
SAXParserFactory factory = SAXParserFactory.newInstance();
factory.setNamespaceAware(false);
factory.setValidating(true);
try {
SAXParser parser = factory.newSAXParser();
XMLReader xmlReader = parser.getXMLReader();
xmlReader.setEntityResolver(new EntityResolver() {
@Override
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlReader.setContentHandler(new XMLPropertiesHandler());
xmlReader.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
// todo: support included properties ?
}","@Override
public void read(Reader in) throws ConfigurationException {
SAXParserFactory saxparserfactoryVar1 = saxparserfactoryLiteral2;
saxparserfactoryVar1.setNamespaceAware(false);
saxparserfactoryVar1.setValidating(true);
try {
SAXParser saxparserVar3 = saxparserLiteral4;
XMLReader xmlreaderVar5 = xmlreaderLiteral6;
xmlreaderVar5.setEntityResolver(new EntityResolver() {
@Override
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlreaderVar5.setContentHandler(new XMLPropertiesHandler());
xmlreaderVar5.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
// todo: support included properties ?
}"
8921,PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,configuration,6132,"{
@Override
public InputSource resolveEntity(String publicId, String systemId)
{
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
","public void save(Document document, Node parent) {
Element properties = document.createElement(""properties"");
parent.appendChild(properties);
if (getHeader() != null) {
Element comment = document.createElement(""comment"");
properties.appendChild(comment);
comment.setTextContent(StringEscapeUtils.escapeXml(getHeader()));
}
Iterator<String> keys = getKeys();
while (keys.hasNext()) {
String key = keys.next();
Object value = getProperty(key);
if (value instanceof List) {
writeProperty(document, properties, key, (List<?>) value);
} else {
writeProperty(document, properties, key, value);
}
}
}","public void save(Document document, Node parent) {
Element elementVar1 = elementLiteral2;
parent.appendChild(elementVar1);
if (getHeader() != null) {
Element elementVar3 = elementLiteral4;
elementVar1.appendChild(elementVar3);
elementVar3.setTextContent(StringEscapeUtils.escapeXml(getHeader()));
}
Iterator<String> iterator<string>Var5 = iterator<string>Literal6;
while (iterator<string>Var5.hasNext()) {
String stringVar7 = stringLiteral8;
Object objectVar9 = objectLiteral10;
if (objectVar9 instanceof List) {
writeProperty(document, elementVar1, stringVar7, (List<?>) objectVar9);
} else {
writeProperty(document, elementVar1, stringVar7, objectVar9);
}
}
}"
8953,BAD_PRACTICE,SE_BAD_FIELD,FP,configuration,6164,private final NodeHandler<T> handler;,private final NodeHandler<T> handler;,private final NodeHandler<T> nodehandler<t>Var1;
9195,SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,FP,dbcp,92,"return statement.executeUpdate(sql, columnNames);
","@Override
public int executeUpdate(final String sql, final String[] columnNames) throws SQLException {
checkOpen();
setLastUsedInParent();
try {
return statement.executeUpdate(sql, columnNames);
} catch (final SQLException e) {
handleException(e);
return 0;
}
}","@Override
public int executeUpdate(final String sql, final String[] columnNames) throws SQLException {
checkOpen();
setLastUsedInParent();
try {
return statement.executeUpdate(sql, columnNames);
} catch (final SQLException e) {
handleException(e);
return 0;
}
}"
9197,SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,FP,dbcp,94,"return statement.execute(sql, columnNames);
","@Override
public boolean execute(final String sql, final String[] columnNames) throws SQLException {
checkOpen();
setLastUsedInParent();
try {
return statement.execute(sql, columnNames);
} catch (final SQLException e) {
handleException(e);
return false;
}
}","@Override
public boolean execute(final String sql, final String[] columnNames) throws SQLException {
checkOpen();
setLastUsedInParent();
try {
return statement.execute(sql, columnNames);
} catch (final SQLException e) {
handleException(e);
return false;
}
}"
9286,SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,dbcp,183,"validationPreparedStatement = getInnermostDelegateInternal().prepareStatement(sql);
","public void validate(final String sql, Duration timeoutDuration) throws SQLException {
if (fastFailValidation && fatalSqlExceptionThrown) {
throw new SQLException(Utils.getMessage(""poolableConnection.validate.fastFail""));
}
if (sql == null || sql.isEmpty()) {
if (timeoutDuration.isNegative()) {
timeoutDuration = Duration.ZERO;
}
if (!isValid(timeoutDuration)) {
throw new SQLException(""isValid() returned false"");
}
return;
}
if (!sql.equals(lastValidationSql)) {
lastValidationSql = sql;
validationPreparedStatement = getInnermostDelegateInternal().prepareStatement(sql);
}
if (timeoutDuration.compareTo(Duration.ZERO) > 0) {
validationPreparedStatement.setQueryTimeout((int) timeoutDuration.getSeconds());
}
try (ResultSet rs = validationPreparedStatement.executeQuery()) {
if (!rs.next()) {
throw new SQLException(""validationQuery didn't return a row"");
}
} catch (final SQLException sqle) {
throw sqle;
}
}","public void validate(final String sql, Duration timeoutDuration) throws SQLException {
if (fastFailValidation && fatalSqlExceptionThrown) {
throw new SQLException(Utils.getMessage(""poolableConnection.validate.fastFail""));
}
if (sql == null || sql.isEmpty()) {
if (timeoutDuration.isNegative()) {
timeoutDuration = Duration.ZERO;
}
if (!isValid(timeoutDuration)) {
throw new SQLException(""isValid() returned false"");
}
return;
}
if (!sql.equals(lastValidationSql)) {
lastValidationSql = sql;
validationPreparedStatement = getInnermostDelegateInternal().prepareStatement(sql);
}
if (timeoutDuration.compareTo(Duration.ZERO) > 0) {
validationPreparedStatement.setQueryTimeout((int) timeoutDuration.getSeconds());
}
try (ResultSet resultsetVar1 = resultsetLiteral2) {
if (!resultsetVar1.next()) {
throw new SQLException(""validationQuery didn't return a row"");
}
} catch (final SQLException sqle) {
throw sqle;
}
}"
9312,SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,FP,dbcp,209,"rset = stmt.executeQuery(validationQuery);
","@Override
public boolean validateObject(final PooledObject<PooledConnectionAndInfo> p) {
try {
validateLifetime(p);
} catch (final Exception e) {
return false;
}
boolean valid = false;
final PooledConnection pconn = p.getObject().getPooledConnection();
Connection conn = null;
validatingSet.add(pconn);
if (null == validationQuery) {
Duration timeoutDuration = validationQueryTimeoutDuration;
if (timeoutDuration.isNegative()) {
timeoutDuration = Duration.ZERO;
}
try {
conn = pconn.getConnection();
valid = conn.isValid((int) timeoutDuration.getSeconds());
} catch (final SQLException e) {
valid = false;
} finally {
Utils.closeQuietly((AutoCloseable) conn);
validatingSet.remove(pconn);
}
} else {
Statement stmt = null;
ResultSet rset = null;
validatingSet.add(pconn);
try {
conn = pconn.getConnection();
stmt = conn.createStatement();
rset = stmt.executeQuery(validationQuery);
valid = rset.next();
if (rollbackAfterValidation) {
conn.rollback();
}
} catch (final Exception e) {
valid = false;
} finally {
Utils.closeQuietly((AutoCloseable) rset);
Utils.closeQuietly((AutoCloseable) stmt);
Utils.closeQuietly((AutoCloseable) conn);
validatingSet.remove(pconn);
}
}
return valid;
}","@Override
public boolean validateObject(final PooledObject<PooledConnectionAndInfo> p) {
try {
validateLifetime(p);
} catch (final Exception e) {
return false;
}
boolean booleanVar1 = booleanLiteral2;
final PooledConnection pooledconnectionVar3 = pooledconnectionLiteral4;
Connection connectionVar5 = connectionLiteral6;
validatingSet.add(pooledconnectionVar3);
if (null == validationQuery) {
Duration durationVar7 = durationLiteral8;
if (durationVar7.isNegative()) {
durationVar7 = Duration.ZERO;
}
try {
connectionVar5 = pooledconnectionVar3.getConnection();
booleanVar1 = connectionVar5.isValid((int) durationVar7.getSeconds());
} catch (final SQLException e) {
booleanVar1 = false;
} finally {
Utils.closeQuietly((AutoCloseable) connectionVar5);
validatingSet.remove(pooledconnectionVar3);
}
} else {
Statement statementVar9 = connectionLiteral6;
ResultSet resultsetVar10 = connectionLiteral6;
validatingSet.add(pooledconnectionVar3);
try {
connectionVar5 = pooledconnectionVar3.getConnection();
statementVar9 = connectionVar5.createStatement();
resultsetVar10 = statementVar9.executeQuery(validationQuery);
booleanVar1 = resultsetVar10.next();
if (rollbackAfterValidation) {
connectionVar5.rollback();
}
} catch (final Exception e) {
booleanVar1 = false;
} finally {
Utils.closeQuietly((AutoCloseable) resultsetVar10);
Utils.closeQuietly((AutoCloseable) statementVar9);
Utils.closeQuietly((AutoCloseable) connectionVar5);
validatingSet.remove(pooledconnectionVar3);
}
}
return booleanVar1;
}"
9559,SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,FP,dbcp,456,"conn.validate(validationQuery, validationQueryTimeoutSeconds);
","public void validateConnection(final PoolableConnection conn) throws SQLException {
if (conn.isClosed()) {
throw new SQLException(""validateConnection: connection closed"");
}
conn.validate(validationQuery, validationQueryTimeoutSeconds);
}","public void validateConnection(final PoolableConnection conn) throws SQLException {
if (conn.isClosed()) {
throw new SQLException(""validateConnection: connection closed"");
}
conn.validate(validationQuery, validationQueryTimeoutSeconds);
}"
9582,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,dbcp,479,"} catch (final Exception e) {
","public synchronized void setPool(final ObjectPool<PoolableConnection> pool) {
if (null != this.pool && pool != this.pool) {
try {
this.pool.close();
} catch (final Exception e) {
}
}
this.pool = pool;
}","public synchronized void setPool(final ObjectPool<PoolableConnection> pool) {
if (null != this.pool && pool != this.pool) {
try {
this.pool.close();
} catch (final Exception e) {
}
}
this.pool = pool;
}"
9595,MALICIOUS_CODE,MS_MUTABLE_COLLECTION_PKGPROTECT,FP,dbcp,492,"protected static final HashMap<String, ObjectPool<? extends Connection>> pools = new HashMap<>();","protected static final HashMap<String, ObjectPool<? extends Connection>> pools = new HashMap<>();","protected static final HashMap<String, ObjectPool<? extends Connection>> hashmap<string,objectpool<? extends connection>>Var1 = hashmap<string,objectpool<? extends connection>>Literal2;"
9615,SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,FP,dbcp,512,"return statement.executeLargeUpdate(sql);
","@Override
public long executeLargeUpdate(final String sql) throws SQLException {
checkOpen();
setLastUsedInParent();
try {
return statement.executeLargeUpdate(sql);
} catch (final SQLException e) {
handleException(e);
return 0;
}
}","@Override
public long executeLargeUpdate(final String sql) throws SQLException {
checkOpen();
setLastUsedInParent();
try {
return statement.executeLargeUpdate(sql);
} catch (final SQLException e) {
handleException(e);
return 0;
}
}"
9774,PERFORMANCE,URF_UNREAD_FIELD,FP,digester,150,private String currChildNamespaceURI = null;,private String currChildNamespaceURI = null;,private String stringVar1 = stringLiteral2;
9827,DODGY_CODE,UC_USELESS_CONDITION,FP,digester,203,"if ( paramTypes.length == 0 )
","@Override
public void end(String namespace, String name) throws Exception {
Object[] parameters = null;
if (paramCount > 0) {
parameters = getDigester().popParams();
if (getDigester().getLogger().isTraceEnabled()) {
for (int i = 0, size = parameters.length; i < size; i++) {
getDigester().getLogger().trace(""[CallMethodRule]("" + i + "")"" + parameters[i]);
}
}
if (paramCount == 1 && parameters[0] == null) {
return;
}
} else if (paramTypes != null && paramTypes.length != 0) {
if (bodyText == null) {
return;
}
parameters = new Object[1];
parameters[0] = bodyText;
if (paramTypes.length == 0) {
paramTypes = new Class[1];
paramTypes[0] = String.class;
}
} else {
}
Object[] paramValues = new Object[paramTypes.length];
for (int i = 0; i < paramTypes.length; i++) {
if (parameters[i] == null || (parameters[i] instanceof String && !String.class.isAssignableFrom(paramTypes[i]))) {
paramValues[i] = ConvertUtils.convert((String) parameters[i], paramTypes[i]);
} else {
paramValues[i] = parameters[i];
}
}
Object target;
if (targetOffset >= 0) {
target = getDigester().peek(targetOffset);
} else {
target = getDigester().peek(getDigester().getCount() + targetOffset);
}
if (target == null) {
StringBuilder sb = new StringBuilder();
sb.append(""[CallMethodRule]{"");
sb.append(getDigester().getMatch());
sb.append(""} Call target is null ("");
sb.append(""targetOffset="");
sb.append(targetOffset);
sb.append("",stackdepth="");
sb.append(getDigester().getCount());
sb.append("")"");
throw new org.xml.sax.SAXException(sb.toString());
}
if (getDigester().getLogger().isDebugEnabled()) {
StringBuilder sb = new StringBuilder(""[CallMethodRule]{"");
sb.append(getDigester().getMatch());
sb.append(""} Call "");
sb.append(target.getClass().getName());
sb.append(""."");
sb.append(methodName);
sb.append(""("");
for (int i = 0; i < paramValues.length; i++) {
if (i > 0) {
sb.append("","");
}
if (paramValues[i] == null) {
sb.append(""null"");
} else {
sb.append(paramValues[i].toString());
}
sb.append(""/"");
if (paramTypes[i] == null) {
sb.append(""null"");
} else {
sb.append(paramTypes[i].getName());
}
}
sb.append("")"");
getDigester().getLogger().debug(sb.toString());
}
Object result = null;
if (useExactMatch) {
result = MethodUtils.invokeExactMethod(target, methodName, paramValues, paramTypes);
} else {
result = MethodUtils.invokeMethod(target, methodName, paramValues, paramTypes);
}
processMethodCallResult(result);
}","@Override
public void end(String namespace, String name) throws Exception {
Object[] objectArrayVar1 = objectArrayLiteral2;
if (paramCount > 0) {
objectArrayVar1 = getDigester().popParams();
if (getDigester().getLogger().isTraceEnabled()) {
for (int intVar14 = intLiteral15, intVar16 = intLiteral17; intVar3 < intLiteral1; intVar3++) {
getDigester().getLogger().trace(""[CallMethodRule]("" + intVar3 + "")"" + objectArrayVar1[intVar3]);
}
}
if (paramCount == 1 && objectArrayVar1[0] == null) {
return;
}
} else if (paramTypes != null && paramTypes.length != 0) {
if (bodyText == null) {
return;
}
objectArrayVar1 = new Object[1];
objectArrayVar1[0] = bodyText;
if (paramTypes.length == 0) {
paramTypes = new Class[1];
paramTypes[0] = String.class;
}
} else {
}
Object[] objectArrayVar7 = objectArrayLiteral8;
for (int intVar14 = intLiteral15; intVar3 < intLiteral2; intVar3++) {
if (objectArrayVar1[intVar3] == null || (objectArrayVar1[intVar3] instanceof String && !String.class.isAssignableFrom(paramTypes[intVar3]))) {
objectArrayVar7[intVar3] = ConvertUtils.convert((String) objectArrayVar1[intVar3], paramTypes[intVar3]);
} else {
objectArrayVar7[intVar3] = objectArrayVar1[intVar3];
}
}
Object objectVar9;
if (targetOffset >= 0) {
objectVar9 = getDigester().peek(targetOffset);
} else {
objectVar9 = getDigester().peek(getDigester().getCount() + targetOffset);
}
if (objectVar9 == null) {
StringBuilder stringbuilderVar10 = stringbuilderLiteral11;
stringbuilderVar10.append(""[CallMethodRule]{"");
stringbuilderVar10.append(getDigester().getMatch());
stringbuilderVar10.append(""} Call target is null ("");
stringbuilderVar10.append(""targetOffset="");
stringbuilderVar10.append(targetOffset);
stringbuilderVar10.append("",stackdepth="");
stringbuilderVar10.append(getDigester().getCount());
stringbuilderVar10.append("")"");
throw new org.xml.sax.SAXException(stringbuilderVar10.toString());
}
if (getDigester().getLogger().isDebugEnabled()) {
StringBuilder stringbuilderVar10 = stringbuilderLiteral12;
stringbuilderVar10.append(getDigester().getMatch());
stringbuilderVar10.append(""} Call "");
stringbuilderVar10.append(objectVar9.getClass().getName());
stringbuilderVar10.append(""."");
stringbuilderVar10.append(methodName);
stringbuilderVar10.append(""("");
for (int intVar14 = intLiteral15; intVar3 < intLiteral3; intVar3++) {
if (intVar3 > 0) {
stringbuilderVar10.append("","");
}
if (objectArrayVar7[intVar3] == null) {
stringbuilderVar10.append(""null"");
} else {
stringbuilderVar10.append(objectArrayVar7[intVar3].toString());
}
stringbuilderVar10.append(""/"");
if (paramTypes[intVar3] == null) {
stringbuilderVar10.append(""null"");
} else {
stringbuilderVar10.append(paramTypes[intVar3].getName());
}
}
stringbuilderVar10.append("")"");
getDigester().getLogger().debug(stringbuilderVar10.toString());
}
Object objectVar13 = objectArrayLiteral2;
if (useExactMatch) {
objectVar13 = MethodUtils.invokeExactMethod(objectVar9, methodName, objectArrayVar7, paramTypes);
} else {
objectVar13 = MethodUtils.invokeMethod(objectVar9, methodName, objectArrayVar7, paramTypes);
}
processMethodCallResult(objectVar13);
}"
9854,MALICIOUS_CODE,MS_SHOULD_BE_FINAL,FP,digester,230,"public static String DFLT_RESOURCE_ATTR = ""resource"";","public static String DFLT_RESOURCE_ATTR = ""resource"";",public static String stringVar1 = stringLiteral2;
9882,CORRECTNESS,NP_NULL_ON_SOME_PATH,FP,digester,258,"Object paramValues[] = new Object[paramTypes.length];
","public void end() throws Exception {
Object[] parameters = null;
if (paramCount > 0) {
parameters = (Object[]) digester.popParams();
if (digester.log.isTraceEnabled()) {
for (int i = 0, size = parameters.length; i < size; i++) {
digester.log.trace(""[CallMethodRule]("" + i + "")"" + parameters[i]);
}
}
if (paramCount == 1 && parameters[0] == null) {
return;
}
} else if (paramTypes != null && paramTypes.length != 0) {
if (bodyText == null) {
return;
}
parameters = new Object[1];
parameters[0] = bodyText;
if (paramTypes.length == 0) {
paramTypes = new Class[1];
paramTypes[0] = String.class;
}
} else {
;
}
Object[] paramValues = new Object[paramTypes.length];
for (int i = 0; i < paramTypes.length; i++) {
if (parameters[i] == null || (parameters[i] instanceof String && !String.class.isAssignableFrom(paramTypes[i]))) {
paramValues[i] = ConvertUtils.convert((String) parameters[i], paramTypes[i]);
} else {
paramValues[i] = parameters[i];
}
}
Object target;
if (targetOffset >= 0) {
target = digester.peek(targetOffset);
} else {
target = digester.peek(digester.getCount() + targetOffset);
}
if (target == null) {
StringBuffer sb = new StringBuffer();
sb.append(""[CallMethodRule]{"");
sb.append(digester.match);
sb.append(""} Call target is null ("");
sb.append(""targetOffset="");
sb.append(targetOffset);
sb.append("",stackdepth="");
sb.append(digester.getCount());
sb.append("")"");
throw new org.xml.sax.SAXException(sb.toString());
}
if (digester.log.isDebugEnabled()) {
StringBuffer sb = new StringBuffer(""[CallMethodRule]{"");
sb.append(digester.match);
sb.append(""} Call "");
sb.append(target.getClass().getName());
sb.append(""."");
sb.append(methodName);
sb.append(""("");
for (int i = 0; i < paramValues.length; i++) {
if (i > 0) {
sb.append("","");
}
if (paramValues[i] == null) {
sb.append(""null"");
} else {
sb.append(paramValues[i].toString());
}
sb.append(""/"");
if (paramTypes[i] == null) {
sb.append(""null"");
} else {
sb.append(paramTypes[i].getName());
}
}
sb.append("")"");
digester.log.debug(sb.toString());
}
Object result = null;
if (useExactMatch) {
result = MethodUtils.invokeExactMethod(target, methodName, paramValues, paramTypes);
} else {
result = MethodUtils.invokeMethod(target, methodName, paramValues, paramTypes);
}
processMethodCallResult(result);
}","public void end() throws Exception {
Object[] objectArrayVar1 = objectArrayLiteral2;
if (paramCount > 0) {
objectArrayVar1 = (Object[]) digester.popParams();
if (digester.log.isTraceEnabled()) {
for (int intVar14 = intLiteral15, intVar16 = intLiteral17; intVar3 < intLiteral1; intVar3++) {
digester.log.trace(""[CallMethodRule]("" + intVar3 + "")"" + objectArrayVar1[intVar3]);
}
}
if (paramCount == 1 && objectArrayVar1[0] == null) {
return;
}
} else if (paramTypes != null && paramTypes.length != 0) {
if (bodyText == null) {
return;
}
objectArrayVar1 = new Object[1];
objectArrayVar1[0] = bodyText;
if (paramTypes.length == 0) {
paramTypes = new Class[1];
paramTypes[0] = String.class;
}
} else {
;
}
Object[] objectArrayVar7 = objectArrayLiteral8;
for (int intVar14 = intLiteral15; intVar3 < intLiteral2; intVar3++) {
if (objectArrayVar1[intVar3] == null || (objectArrayVar1[intVar3] instanceof String && !String.class.isAssignableFrom(paramTypes[intVar3]))) {
objectArrayVar7[intVar3] = ConvertUtils.convert((String) objectArrayVar1[intVar3], paramTypes[intVar3]);
} else {
objectArrayVar7[intVar3] = objectArrayVar1[intVar3];
}
}
Object objectVar9;
if (targetOffset >= 0) {
objectVar9 = digester.peek(targetOffset);
} else {
objectVar9 = digester.peek(digester.getCount() + targetOffset);
}
if (objectVar9 == null) {
StringBuffer stringbufferVar10 = stringbufferLiteral11;
stringbufferVar10.append(""[CallMethodRule]{"");
stringbufferVar10.append(digester.match);
stringbufferVar10.append(""} Call target is null ("");
stringbufferVar10.append(""targetOffset="");
stringbufferVar10.append(targetOffset);
stringbufferVar10.append("",stackdepth="");
stringbufferVar10.append(digester.getCount());
stringbufferVar10.append("")"");
throw new org.xml.sax.SAXException(stringbufferVar10.toString());
}
if (digester.log.isDebugEnabled()) {
StringBuffer stringbufferVar10 = stringbufferLiteral12;
stringbufferVar10.append(digester.match);
stringbufferVar10.append(""} Call "");
stringbufferVar10.append(objectVar9.getClass().getName());
stringbufferVar10.append(""."");
stringbufferVar10.append(methodName);
stringbufferVar10.append(""("");
for (int intVar14 = intLiteral15; intVar3 < intLiteral3; intVar3++) {
if (intVar3 > 0) {
stringbufferVar10.append("","");
}
if (objectArrayVar7[intVar3] == null) {
stringbufferVar10.append(""null"");
} else {
stringbufferVar10.append(objectArrayVar7[intVar3].toString());
}
stringbufferVar10.append(""/"");
if (paramTypes[intVar3] == null) {
stringbufferVar10.append(""null"");
} else {
stringbufferVar10.append(paramTypes[intVar3].getName());
}
}
stringbufferVar10.append("")"");
digester.log.debug(stringbufferVar10.toString());
}
Object objectVar13 = objectArrayLiteral2;
if (useExactMatch) {
objectVar13 = MethodUtils.invokeExactMethod(objectVar9, methodName, objectArrayVar7, paramTypes);
} else {
objectVar13 = MethodUtils.invokeMethod(objectVar9, methodName, objectArrayVar7, paramTypes);
}
processMethodCallResult(objectVar13);
}"
9883,DODGY_CODE,REC_CATCH_EXCEPTION,FP,digester,259,"} catch (Exception e) {
","public SAXParser getParser() {
if (parser != null) {
return (parser);
}
try {
if (validating && (schemaLocation != null)) {
Properties properties = new Properties();
properties.put(""SAXParserFactory"", getFactory());
if (schemaLocation != null) {
properties.put(""schemaLocation"", schemaLocation);
properties.put(""schemaLanguage"", schemaLanguage);
}
parser = ParserFeatureSetterFactory.newSAXParser(properties);
} else {
parser = getFactory().newSAXParser();
}
} catch (Exception e) {
log.error(""Digester.getParser: "", e);
return (null);
}
return (parser);
}","public SAXParser getParser() {
if (parser != null) {
return (parser);
}
try {
if (validating && (schemaLocation != null)) {
Properties propertiesVar1 = propertiesLiteral2;
propertiesVar1.put(""SAXParserFactory"", getFactory());
if (schemaLocation != null) {
propertiesVar1.put(""schemaLocation"", schemaLocation);
propertiesVar1.put(""schemaLanguage"", schemaLanguage);
}
parser = ParserFeatureSetterFactory.newSAXParser(propertiesVar1);
} else {
parser = getFactory().newSAXParser();
}
} catch (Exception e) {
log.error(""Digester.getParser: "", e);
return (null);
}
return (parser);
}"
9898,PERFORMANCE,SS_SHOULD_BE_STATIC,FP,digester,274,"public final String DFLT_PLUGIN_CLASS_ATTR = ""plugin-class"";","public final String DFLT_PLUGIN_CLASS_ATTR = ""plugin-class"";",public final String stringVar1 = stringLiteral2;
9901,MALICIOUS_CODE,MS_SHOULD_BE_FINAL,FP,digester,277,"public static String DFLT_METHOD_ATTR = ""method"";","public static String DFLT_METHOD_ATTR = ""method"";",public static String stringVar1 = stringLiteral2;
9908,MALICIOUS_CODE,MS_SHOULD_BE_FINAL,FP,digester,284,"public static String DFLT_METHOD_ATTR = ""method"";","public static String DFLT_METHOD_ATTR = ""method"";",public static String stringVar1 = stringLiteral2;
9911,MALICIOUS_CODE,MS_SHOULD_BE_FINAL,FP,digester,287,"public static String DFLT_FALSEVAL = ""false"";","public static String DFLT_FALSEVAL = ""false"";",public static String stringVar1 = stringLiteral2;
9936,DODGY_CODE,UC_USELESS_CONDITION,FP,digester,312,"if ( paramTypes.length == 0 )
","@Override
public void end(String namespace, String name) throws Exception {
Object[] parameters;
if (paramCount > 0) {
parameters = getDigester().popParams();
if (getDigester().getLogger().isTraceEnabled()) {
for (int i = 0, size = parameters.length; i < size; i++) {
getDigester().getLogger().trace(format(""[CallMethodRule]{%s} parameters[%s]=%s"", getDigester().getMatch(), i, parameters[i]));
}
}
if (paramCount == 1 && parameters[0] == null) {
return;
}
} else if (paramTypes != null && paramTypes.length != 0) {
if (bodyText == null) {
return;
}
parameters = new Object[] { bodyText };
if (paramTypes.length == 0) {
paramTypes = new Class[] { String.class };
}
} else {
parameters = new Object[0];
paramTypes = new Class<?>[0];
}
Object[] paramValues = new Object[paramTypes.length];
for (int i = 0; i < paramTypes.length; i++) {
if (parameters[i] == null || (parameters[i] instanceof String && !String.class.isAssignableFrom(paramTypes[i]))) {
paramValues[i] = convert((String) parameters[i], paramTypes[i]);
} else {
paramValues[i] = parameters[i];
}
}
Object target;
if (targetOffset >= 0) {
target = getDigester().peek(targetOffset);
} else {
target = getDigester().peek(getDigester().getCount() + targetOffset);
}
if (target == null) {
throw new SAXException(format(""[CallMethodRule]{%s} Call target is null (targetOffset=%s, stackdepth=%s)"", getDigester().getMatch(), targetOffset, getDigester().getCount()));
}
if (getDigester().getLogger().isDebugEnabled()) {
Formatter formatter = new Formatter().format(""[CallMethodRule]{%s} Call %s.%s("", getDigester().getMatch(), target.getClass().getName(), methodName);
for (int i = 0; i < paramValues.length; i++) {
formatter.format(""%s%s/%s"", (i > 0 ? "", "" : """"), paramValues[i], paramTypes[i].getName());
}
formatter.format("")"");
getDigester().getLogger().debug(formatter.toString());
}
Object result = null;
if (useExactMatch) {
result = invokeExactMethod(target, methodName, paramValues, paramTypes);
} else {
result = invokeMethod(target, methodName, paramValues, paramTypes);
}
processMethodCallResult(result);
}","@Override
public void end(String namespace, String name) throws Exception {
Object[] objectArrayVar1;
if (paramCount > 0) {
objectArrayVar1 = getDigester().popParams();
if (getDigester().getLogger().isTraceEnabled()) {
for (int intVar13 = intLiteral14, intVar15 = intLiteral16; intVar2 < intLiteral1; intVar2++) {
getDigester().getLogger().trace(format(""[CallMethodRule]{%s} parameters[%s]=%s"", getDigester().getMatch(), intVar2, objectArrayVar1[intVar2]));
}
}
if (paramCount == 1 && objectArrayVar1[0] == null) {
return;
}
} else if (paramTypes != null && paramTypes.length != 0) {
if (bodyText == null) {
return;
}
objectArrayVar1 = new Object[] { bodyText };
if (paramTypes.length == 0) {
paramTypes = new Class[] { String.class };
}
} else {
objectArrayVar1 = new Object[0];
paramTypes = new Class<?>[0];
}
Object[] objectArrayVar6 = objectArrayLiteral7;
for (int intVar13 = intLiteral14; intVar2 < intLiteral2; intVar2++) {
if (objectArrayVar1[intVar2] == null || (objectArrayVar1[intVar2] instanceof String && !String.class.isAssignableFrom(paramTypes[intVar2]))) {
objectArrayVar6[intVar2] = convert((String) objectArrayVar1[intVar2], paramTypes[intVar2]);
} else {
objectArrayVar6[intVar2] = objectArrayVar1[intVar2];
}
}
Object objectVar8;
if (targetOffset >= 0) {
objectVar8 = getDigester().peek(targetOffset);
} else {
objectVar8 = getDigester().peek(getDigester().getCount() + targetOffset);
}
if (objectVar8 == null) {
throw new SAXException(format(""[CallMethodRule]{%s} Call target is null (targetOffset=%s, stackdepth=%s)"", getDigester().getMatch(), targetOffset, getDigester().getCount()));
}
if (getDigester().getLogger().isDebugEnabled()) {
Formatter formatterVar9 = formatterLiteral10;
for (int intVar13 = intLiteral14; intVar2 < intLiteral3; intVar2++) {
formatterVar9.format(""%s%s/%s"", (intVar2 > 0 ? "", "" : """"), objectArrayVar6[intVar2], paramTypes[intVar2].getName());
}
formatterVar9.format("")"");
getDigester().getLogger().debug(formatterVar9.toString());
}
Object objectVar11 = objectLiteral12;
if (useExactMatch) {
objectVar11 = invokeExactMethod(objectVar8, methodName, objectArrayVar6, paramTypes);
} else {
objectVar11 = invokeMethod(objectVar8, methodName, objectArrayVar6, paramTypes);
}
processMethodCallResult(objectVar11);
}"
9963,BAD_PRACTICE,SE_BAD_FIELD,FP,digester,339,"private final Map<Class<?>, FromAnnotationsRuleSet> data = new LinkedHashMap<Class<?>, FromAnnotationsRuleSet>(capacity, loadFactor) {
private static final long serialVersionUID = 1L;
@Override
protected boolean removeEldestEntry(Map.Entry<Class<?>, FromAnnotationsRuleSet> eldest) {
return size() > cacheSize;
}
};","private final Map<Class<?>, FromAnnotationsRuleSet> data = new LinkedHashMap<Class<?>, FromAnnotationsRuleSet>(capacity, loadFactor) {
private static final long serialVersionUID = 1L;
@Override
protected boolean removeEldestEntry(Map.Entry<Class<?>, FromAnnotationsRuleSet> eldest) {
return size() > cacheSize;
}
};","private final Map<Class<?>, FromAnnotationsRuleSet> map<class<?>,fromannotationsruleset>Var1 = map<class<?>,fromannotationsruleset>Literal2;"
9964,PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,digester,340,"new LinkedHashMap<Class<?>, FromAnnotationsRuleSet>(capacity, loadFactor) {
private static final long serialVersionUID = 1L;
@Override
protected boolean removeEldestEntry(Map.Entry<Class<?>, FromAnnotationsRuleSet> eldest) {
return size() > cacheSize;
",private final float loadFactor = 0.75f;,private final float floatVar1 = floatLiteral2;
9979,CORRECTNESS,UWF_NULL_FIELD,FP,digester,355,public final String DFLT_PLUGIN_ID_ATTR_NS = null;,public final String DFLT_PLUGIN_ID_ATTR_NS = null;,public final String stringVar1 = stringLiteral2;
9985,MALICIOUS_CODE,MS_SHOULD_BE_FINAL,FP,digester,361,"public static String DFLT_METHOD_NAME = ""addRules"";","public static String DFLT_METHOD_NAME = ""addRules"";",public static String stringVar1 = stringLiteral2;
10033,MALICIOUS_CODE,MS_PKGPROTECT,FP,digester,409,protected static float version;,protected static float version;,protected static float floatVar1;
10035,PERFORMANCE,DM_FP_NUMBER_CTOR,FP,digester,411,"version = new Float( versionNumber ).floatValue();
","public static SAXParser newSAXParser(Properties properties) throws ParserConfigurationException, SAXException, SAXNotSupportedException {
SAXParserFactory factory = (SAXParserFactory) properties.get(""SAXParserFactory"");
if (versionNumber == null) {
versionNumber = getXercesVersion();
version = new Float(versionNumber).floatValue();
}
// Note: 2.2 is completely broken (with XML Schema).
if (version > 2.1) {
configureXerces(factory);
return factory.newSAXParser();
} else {
SAXParser parser = factory.newSAXParser();
configureOldXerces(parser, properties);
return parser;
}
}","public static SAXParser newSAXParser(Properties properties) throws ParserConfigurationException, SAXException, SAXNotSupportedException {
SAXParserFactory saxparserfactoryVar1 = saxparserfactoryLiteral2;
if (versionNumber == null) {
versionNumber = getXercesVersion();
version = new Float(versionNumber).floatValue();
}
// Note: 2.2 is completely broken (with XML Schema).
if (version > 2.1) {
configureXerces(saxparserfactoryVar1);
return saxparserfactoryVar1.newSAXParser();
} else {
SAXParser saxparserVar3 = saxparserLiteral4;
configureOldXerces(saxparserVar3, properties);
return saxparserVar3;
}
}"
10083,MALICIOUS_CODE,MS_SHOULD_BE_FINAL,FP,digester,459,"protected static Log log = LogFactory.getLog(""org.apache.commons.digester.Digester.sax"");","protected static Log log = LogFactory.getLog(""org.apache.commons.digester.Digester.sax"");",protected static Log logVar1 = logLiteral2;
10087,MALICIOUS_CODE,MS_SHOULD_BE_FINAL,FP,digester,463,"protected static String XERCES_DYNAMIC = ""http://apache.org/xml/features/validation/dynamic"";","protected static String XERCES_DYNAMIC = ""http://apache.org/xml/features/validation/dynamic"";",protected static String stringVar1 = stringLiteral2;
10088,PERFORMANCE,SS_SHOULD_BE_STATIC,FP,digester,464,"public final String DFLT_PLUGIN_ID_ATTR = ""plugin-id"";","public final String DFLT_PLUGIN_ID_ATTR = ""plugin-id"";",public final String stringVar1 = stringLiteral2;
10090,CORRECTNESS,UWF_NULL_FIELD,FP,digester,466,public final String DFLT_PLUGIN_ID_ATTR_NS = null;,public final String DFLT_PLUGIN_ID_ATTR_NS = null;,public final String stringVar1 = stringLiteral2;
10101,MALICIOUS_CODE,MS_SHOULD_BE_FINAL,FP,digester,477,"public static String DFLT_PROPS_ATTR = ""setprops"";","public static String DFLT_PROPS_ATTR = ""setprops"";",public static String stringVar1 = stringLiteral2;
10284,PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,FP,digester,660,"{
@Override
protected void loadRules()
{
loadXMLRules( xmlRulesResource );
}
","@Override
public void begin(String namespace, String name, Attributes attributes) throws Exception {
String fileName = attributes.getValue(""url"");
if (fileName != null && fileName.length() > 0) {
final URL xmlRulesResource;
if (fileName.startsWith(CLASSPATH_URL_PREFIX)) {
String path = fileName.substring(CLASSPATH_URL_PREFIX.length());
if ('/' == path.charAt(0)) {
path = path.substring(1);
}
xmlRulesResource = this.targetRulesBinder.getContextClassLoader().getResource(path);
if (xmlRulesResource == null) {
targetRulesBinder.addError(""Resource '%s' not found, please make sure it is in the classpath"", path);
return;
}
} else {
try {
xmlRulesResource = new URL(fileName);
} catch (MalformedURLException e) {
targetRulesBinder.addError(""An error occurred while inculing file from '%s': %s"", fileName, e.getMessage());
return;
}
}
if (memoryRulesBinder.getIncludedFiles().add(xmlRulesResource.toString())) {
install(new FromXmlRulesModule() {
@Override
protected void loadRules() {
loadXMLRules(xmlRulesResource);
}
});
} else {
targetRulesBinder.addError(""Circular file inclusion detected for XML rules: %s"", xmlRulesResource);
}
}
String className = attributes.getValue(""class"");
if (className != null && className.length() > 0) {
try {
Class<?> cls = Class.forName(className);
if (!RulesModule.class.isAssignableFrom(cls)) {
targetRulesBinder.addError(""Class '%s' if not a '%s' implementation"", className, RulesModule.class.getName());
return;
}
RulesModule rulesSource = (RulesModule) cls.newInstance();
install(rulesSource);
} catch (Exception e) {
targetRulesBinder.addError(""Impossible to include programmatic rules from class '%s': %s"", className, e.getMessage());
}
}
}","@Override
public void begin(String namespace, String name, Attributes attributes) throws Exception {
String stringVar1 = stringLiteral2;
if (stringVar1 != null && stringVar1.length() > 0) {
final URL urlVar3;
if (stringVar1.startsWith(CLASSPATH_URL_PREFIX)) {
String stringVar4 = stringLiteral5;
if ('/' == stringVar4.charAt(0)) {
stringVar4 = stringVar4.substring(1);
}
urlVar3 = this.targetRulesBinder.getContextClassLoader().getResource(stringVar4);
if (urlVar3 == null) {
targetRulesBinder.addError(""Resource '%s' not found, please make sure it is in the classpath"", stringVar4);
return;
}
} else {
try {
urlVar3 = new URL(stringVar1);
} catch (MalformedURLException e) {
targetRulesBinder.addError(""An error occurred while inculing file from '%s': %s"", stringVar1, e.getMessage());
return;
}
}
if (memoryRulesBinder.getIncludedFiles().add(urlVar3.toString())) {
install(new FromXmlRulesModule() {
@Override
protected void loadRules() {
loadXMLRules(urlVar3);
}
});
} else {
targetRulesBinder.addError(""Circular file inclusion detected for XML rules: %s"", urlVar3);
}
}
String stringVar6 = stringLiteral7;
if (stringVar6 != null && stringVar6.length() > 0) {
try {
Class<?> class<?>Var8 = class<?>Literal9;
if (!RulesModule.class.isAssignableFrom(class<?>Var8)) {
targetRulesBinder.addError(""Class '%s' if not a '%s' implementation"", stringVar6, RulesModule.class.getName());
return;
}
RulesModule rulesmoduleVar10 = rulesmoduleLiteral11;
install(rulesmoduleVar10);
} catch (Exception e) {
targetRulesBinder.addError(""Impossible to include programmatic rules from class '%s': %s"", stringVar6, e.getMessage());
}
}
}"
10285,DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,digester,661,"return memoryRulesBinder.forPattern( pattern );
","protected LinkedRuleBuilder forPattern(String pattern) {
return memoryRulesBinder.forPattern(pattern);
}","protected LinkedRuleBuilder forPattern(String pattern) {
return memoryRulesBinder.forPattern(pattern);
}"
10331,DODGY_CODE,UC_USELESS_CONDITION,FP,digester,707,"if (paramTypes.length == 0) {
","@Override
public void end() throws Exception {
Object[] parameters = null;
if (paramCount > 0) {
parameters = (Object[]) digester.popParams();
if (digester.log.isTraceEnabled()) {
for (int i = 0, size = parameters.length; i < size; i++) {
digester.log.trace(""[CallMethodRule]("" + i + "")"" + parameters[i]);
}
}
if (paramCount == 1 && parameters[0] == null) {
return;
}
} else if (paramTypes != null && paramTypes.length != 0) {
if (bodyText == null) {
return;
}
parameters = new Object[1];
parameters[0] = bodyText;
if (paramTypes.length == 0) {
paramTypes = new Class[1];
paramTypes[0] = String.class;
}
} else {
}
Object[] paramValues = new Object[paramTypes.length];
for (int i = 0; i < paramTypes.length; i++) {
if (parameters[i] == null || (parameters[i] instanceof String && !String.class.isAssignableFrom(paramTypes[i]))) {
paramValues[i] = ConvertUtils.convert((String) parameters[i], paramTypes[i]);
} else {
paramValues[i] = parameters[i];
}
}
Object target;
if (targetOffset >= 0) {
target = digester.peek(targetOffset);
} else {
target = digester.peek(digester.getCount() + targetOffset);
}
if (target == null) {
StringBuffer sb = new StringBuffer();
sb.append(""[CallMethodRule]{"");
sb.append(digester.match);
sb.append(""} Call target is null ("");
sb.append(""targetOffset="");
sb.append(targetOffset);
sb.append("",stackdepth="");
sb.append(digester.getCount());
sb.append("")"");
throw new org.xml.sax.SAXException(sb.toString());
}
if (digester.log.isDebugEnabled()) {
StringBuffer sb = new StringBuffer(""[CallMethodRule]{"");
sb.append(digester.match);
sb.append(""} Call "");
sb.append(target.getClass().getName());
sb.append(""."");
sb.append(methodName);
sb.append(""("");
for (int i = 0; i < paramValues.length; i++) {
if (i > 0) {
sb.append("","");
}
if (paramValues[i] == null) {
sb.append(""null"");
} else {
sb.append(paramValues[i].toString());
}
sb.append(""/"");
if (paramTypes[i] == null) {
sb.append(""null"");
} else {
sb.append(paramTypes[i].getName());
}
}
sb.append("")"");
digester.log.debug(sb.toString());
}
Object result = null;
if (useExactMatch) {
result = MethodUtils.invokeExactMethod(target, methodName, paramValues, paramTypes);
} else {
result = MethodUtils.invokeMethod(target, methodName, paramValues, paramTypes);
}
processMethodCallResult(result);
}","@Override
public void end() throws Exception {
Object[] objectArrayVar1 = objectArrayLiteral2;
if (paramCount > 0) {
objectArrayVar1 = (Object[]) digester.popParams();
if (digester.log.isTraceEnabled()) {
for (int intVar14 = intLiteral15, intVar16 = intLiteral17; intVar3 < intLiteral1; intVar3++) {
digester.log.trace(""[CallMethodRule]("" + intVar3 + "")"" + objectArrayVar1[intVar3]);
}
}
if (paramCount == 1 && objectArrayVar1[0] == null) {
return;
}
} else if (paramTypes != null && paramTypes.length != 0) {
if (bodyText == null) {
return;
}
objectArrayVar1 = new Object[1];
objectArrayVar1[0] = bodyText;
if (paramTypes.length == 0) {
paramTypes = new Class[1];
paramTypes[0] = String.class;
}
} else {
}
Object[] objectArrayVar7 = objectArrayLiteral8;
for (int intVar14 = intLiteral15; intVar3 < intLiteral2; intVar3++) {
if (objectArrayVar1[intVar3] == null || (objectArrayVar1[intVar3] instanceof String && !String.class.isAssignableFrom(paramTypes[intVar3]))) {
objectArrayVar7[intVar3] = ConvertUtils.convert((String) objectArrayVar1[intVar3], paramTypes[intVar3]);
} else {
objectArrayVar7[intVar3] = objectArrayVar1[intVar3];
}
}
Object objectVar9;
if (targetOffset >= 0) {
objectVar9 = digester.peek(targetOffset);
} else {
objectVar9 = digester.peek(digester.getCount() + targetOffset);
}
if (objectVar9 == null) {
StringBuffer stringbufferVar10 = stringbufferLiteral11;
stringbufferVar10.append(""[CallMethodRule]{"");
stringbufferVar10.append(digester.match);
stringbufferVar10.append(""} Call target is null ("");
stringbufferVar10.append(""targetOffset="");
stringbufferVar10.append(targetOffset);
stringbufferVar10.append("",stackdepth="");
stringbufferVar10.append(digester.getCount());
stringbufferVar10.append("")"");
throw new org.xml.sax.SAXException(stringbufferVar10.toString());
}
if (digester.log.isDebugEnabled()) {
StringBuffer stringbufferVar10 = stringbufferLiteral12;
stringbufferVar10.append(digester.match);
stringbufferVar10.append(""} Call "");
stringbufferVar10.append(objectVar9.getClass().getName());
stringbufferVar10.append(""."");
stringbufferVar10.append(methodName);
stringbufferVar10.append(""("");
for (int intVar14 = intLiteral15; intVar3 < intLiteral3; intVar3++) {
if (intVar3 > 0) {
stringbufferVar10.append("","");
}
if (objectArrayVar7[intVar3] == null) {
stringbufferVar10.append(""null"");
} else {
stringbufferVar10.append(objectArrayVar7[intVar3].toString());
}
stringbufferVar10.append(""/"");
if (paramTypes[intVar3] == null) {
stringbufferVar10.append(""null"");
} else {
stringbufferVar10.append(paramTypes[intVar3].getName());
}
}
stringbufferVar10.append("")"");
digester.log.debug(stringbufferVar10.toString());
}
Object objectVar13 = objectArrayLiteral2;
if (useExactMatch) {
objectVar13 = MethodUtils.invokeExactMethod(objectVar9, methodName, objectArrayVar7, paramTypes);
} else {
objectVar13 = MethodUtils.invokeMethod(objectVar9, methodName, objectArrayVar7, paramTypes);
}
processMethodCallResult(objectVar13);
}"
10332,CORRECTNESS,NP_NULL_ON_SOME_PATH,FP,digester,708,"Object paramValues[] = new Object[paramTypes.length];
","@Override
public void end() throws Exception {
Object[] parameters = null;
if (paramCount > 0) {
parameters = (Object[]) digester.popParams();
if (digester.log.isTraceEnabled()) {
for (int i = 0, size = parameters.length; i < size; i++) {
digester.log.trace(""[CallMethodRule]("" + i + "")"" + parameters[i]);
}
}
if (paramCount == 1 && parameters[0] == null) {
return;
}
} else if (paramTypes != null && paramTypes.length != 0) {
if (bodyText == null) {
return;
}
parameters = new Object[1];
parameters[0] = bodyText;
if (paramTypes.length == 0) {
paramTypes = new Class[1];
paramTypes[0] = String.class;
}
} else {
}
Object[] paramValues = new Object[paramTypes.length];
for (int i = 0; i < paramTypes.length; i++) {
if (parameters[i] == null || (parameters[i] instanceof String && !String.class.isAssignableFrom(paramTypes[i]))) {
paramValues[i] = ConvertUtils.convert((String) parameters[i], paramTypes[i]);
} else {
paramValues[i] = parameters[i];
}
}
Object target;
if (targetOffset >= 0) {
target = digester.peek(targetOffset);
} else {
target = digester.peek(digester.getCount() + targetOffset);
}
if (target == null) {
StringBuffer sb = new StringBuffer();
sb.append(""[CallMethodRule]{"");
sb.append(digester.match);
sb.append(""} Call target is null ("");
sb.append(""targetOffset="");
sb.append(targetOffset);
sb.append("",stackdepth="");
sb.append(digester.getCount());
sb.append("")"");
throw new org.xml.sax.SAXException(sb.toString());
}
if (digester.log.isDebugEnabled()) {
StringBuffer sb = new StringBuffer(""[CallMethodRule]{"");
sb.append(digester.match);
sb.append(""} Call "");
sb.append(target.getClass().getName());
sb.append(""."");
sb.append(methodName);
sb.append(""("");
for (int i = 0; i < paramValues.length; i++) {
if (i > 0) {
sb.append("","");
}
if (paramValues[i] == null) {
sb.append(""null"");
} else {
sb.append(paramValues[i].toString());
}
sb.append(""/"");
if (paramTypes[i] == null) {
sb.append(""null"");
} else {
sb.append(paramTypes[i].getName());
}
}
sb.append("")"");
digester.log.debug(sb.toString());
}
Object result = null;
if (useExactMatch) {
result = MethodUtils.invokeExactMethod(target, methodName, paramValues, paramTypes);
} else {
result = MethodUtils.invokeMethod(target, methodName, paramValues, paramTypes);
}
processMethodCallResult(result);
}","@Override
public void end() throws Exception {
Object[] objectArrayVar1 = objectArrayLiteral2;
if (paramCount > 0) {
objectArrayVar1 = (Object[]) digester.popParams();
if (digester.log.isTraceEnabled()) {
for (int intVar14 = intLiteral15, intVar16 = intLiteral17; intVar3 < intLiteral1; intVar3++) {
digester.log.trace(""[CallMethodRule]("" + intVar3 + "")"" + objectArrayVar1[intVar3]);
}
}
if (paramCount == 1 && objectArrayVar1[0] == null) {
return;
}
} else if (paramTypes != null && paramTypes.length != 0) {
if (bodyText == null) {
return;
}
objectArrayVar1 = new Object[1];
objectArrayVar1[0] = bodyText;
if (paramTypes.length == 0) {
paramTypes = new Class[1];
paramTypes[0] = String.class;
}
} else {
}
Object[] objectArrayVar7 = objectArrayLiteral8;
for (int intVar14 = intLiteral15; intVar3 < intLiteral2; intVar3++) {
if (objectArrayVar1[intVar3] == null || (objectArrayVar1[intVar3] instanceof String && !String.class.isAssignableFrom(paramTypes[intVar3]))) {
objectArrayVar7[intVar3] = ConvertUtils.convert((String) objectArrayVar1[intVar3], paramTypes[intVar3]);
} else {
objectArrayVar7[intVar3] = objectArrayVar1[intVar3];
}
}
Object objectVar9;
if (targetOffset >= 0) {
objectVar9 = digester.peek(targetOffset);
} else {
objectVar9 = digester.peek(digester.getCount() + targetOffset);
}
if (objectVar9 == null) {
StringBuffer stringbufferVar10 = stringbufferLiteral11;
stringbufferVar10.append(""[CallMethodRule]{"");
stringbufferVar10.append(digester.match);
stringbufferVar10.append(""} Call target is null ("");
stringbufferVar10.append(""targetOffset="");
stringbufferVar10.append(targetOffset);
stringbufferVar10.append("",stackdepth="");
stringbufferVar10.append(digester.getCount());
stringbufferVar10.append("")"");
throw new org.xml.sax.SAXException(stringbufferVar10.toString());
}
if (digester.log.isDebugEnabled()) {
StringBuffer stringbufferVar10 = stringbufferLiteral12;
stringbufferVar10.append(digester.match);
stringbufferVar10.append(""} Call "");
stringbufferVar10.append(objectVar9.getClass().getName());
stringbufferVar10.append(""."");
stringbufferVar10.append(methodName);
stringbufferVar10.append(""("");
for (int intVar14 = intLiteral15; intVar3 < intLiteral3; intVar3++) {
if (intVar3 > 0) {
stringbufferVar10.append("","");
}
if (objectArrayVar7[intVar3] == null) {
stringbufferVar10.append(""null"");
} else {
stringbufferVar10.append(objectArrayVar7[intVar3].toString());
}
stringbufferVar10.append(""/"");
if (paramTypes[intVar3] == null) {
stringbufferVar10.append(""null"");
} else {
stringbufferVar10.append(paramTypes[intVar3].getName());
}
}
stringbufferVar10.append("")"");
digester.log.debug(stringbufferVar10.toString());
}
Object objectVar13 = objectArrayLiteral2;
if (useExactMatch) {
objectVar13 = MethodUtils.invokeExactMethod(objectVar9, methodName, objectArrayVar7, paramTypes);
} else {
objectVar13 = MethodUtils.invokeMethod(objectVar9, methodName, objectArrayVar7, paramTypes);
}
processMethodCallResult(objectVar13);
}"
10360,MALICIOUS_CODE,MS_SHOULD_BE_FINAL,FP,digester,736,"public static String DFLT_RULECLASS_SUFFIX = ""RuleInfo"";","public static String DFLT_RULECLASS_SUFFIX = ""RuleInfo"";",public static String stringVar1 = stringLiteral2;
10393,BAD_PRACTICE,SE_BAD_FIELD,FP,digester,769,"private final Map<Class<?>, FromAnnotationsRuleSet> data = new LinkedHashMap<Class<?>, FromAnnotationsRuleSet>(capacity, loadFactor) {
private static final long serialVersionUID = 1L;
@Override
protected boolean removeEldestEntry(Map.Entry<Class<?>, FromAnnotationsRuleSet> eldest) {
return size() > cacheSize;
}
};","private final Map<Class<?>, FromAnnotationsRuleSet> data = new LinkedHashMap<Class<?>, FromAnnotationsRuleSet>(capacity, loadFactor) {
private static final long serialVersionUID = 1L;
@Override
protected boolean removeEldestEntry(Map.Entry<Class<?>, FromAnnotationsRuleSet> eldest) {
return size() > cacheSize;
}
};","private final Map<Class<?>, FromAnnotationsRuleSet> map<class<?>,fromannotationsruleset>Var1 = map<class<?>,fromannotationsruleset>Literal2;"
10403,PERFORMANCE,DM_FP_NUMBER_CTOR,FP,digester,779,"version = new Float( versionNumber ).floatValue();
","public static SAXParser newSAXParser(Properties properties) throws ParserConfigurationException, SAXException, SAXNotSupportedException {
SAXParserFactory factory = (SAXParserFactory) properties.get(""SAXParserFactory"");
if (versionNumber == null) {
versionNumber = getXercesVersion();
version = new Float(versionNumber).floatValue();
}
// Note: 2.2 is completely broken (with XML Schema).
if (version > 2.1) {
configureXerces(factory);
return factory.newSAXParser();
} else {
SAXParser parser = factory.newSAXParser();
configureOldXerces(parser, properties);
return parser;
}
}","public static SAXParser newSAXParser(Properties properties) throws ParserConfigurationException, SAXException, SAXNotSupportedException {
SAXParserFactory saxparserfactoryVar1 = saxparserfactoryLiteral2;
if (versionNumber == null) {
versionNumber = getXercesVersion();
version = new Float(versionNumber).floatValue();
}
// Note: 2.2 is completely broken (with XML Schema).
if (version > 2.1) {
configureXerces(saxparserfactoryVar1);
return saxparserfactoryVar1.newSAXParser();
} else {
SAXParser saxparserVar3 = saxparserLiteral4;
configureOldXerces(saxparserVar3, properties);
return saxparserVar3;
}
}"
10420,MALICIOUS_CODE,MS_SHOULD_BE_FINAL,FP,digester,796,"public static String DFLT_FILENAME_ATTR = ""file"";","public static String DFLT_FILENAME_ATTR = ""file"";",public static String stringVar1 = stringLiteral2;
10456,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,digester,832,"return null;
","public static Annotation[] getAnnotationsArrayValue(Annotation annotation) {
Object value = getAnnotationValue(annotation);
if (value != null && value.getClass().isArray() && Annotation.class.isAssignableFrom(value.getClass().getComponentType())) {
return (Annotation[]) value;
}
return null;
}","public static Annotation[] getAnnotationsArrayValue(Annotation annotation) {
Object objectVar1 = objectLiteral2;
if (objectVar1 != null && objectVar1.getClass().isArray() && Annotation.class.isAssignableFrom(objectVar1.getClass().getComponentType())) {
return (Annotation[]) objectVar1;
}
return null;
}"
10507,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,digester,883,"return null;
","public static Annotation[] getAnnotationsArrayValue(Annotation annotation) {
Object value = getAnnotationValue(annotation);
if (value != null && value.getClass().isArray() && Annotation.class.isAssignableFrom(value.getClass().getComponentType())) {
return (Annotation[]) value;
}
return null;
}","public static Annotation[] getAnnotationsArrayValue(Annotation annotation) {
Object objectVar1 = objectLiteral2;
if (objectVar1 != null && objectVar1.getClass().isArray() && Annotation.class.isAssignableFrom(objectVar1.getClass().getComponentType())) {
return (Annotation[]) objectVar1;
}
return null;
}"
10517,MALICIOUS_CODE,MS_SHOULD_BE_FINAL,FP,digester,893,"public static String DFLT_METHOD_NAME = ""addRules"";","public static String DFLT_METHOD_NAME = ""addRules"";",public static String stringVar1 = stringLiteral2;
10526,I18N,DM_DEFAULT_ENCODING,FP,digester,902,"Formatter formatter = new Formatter(""[CallMethodRule]"");
","@Override
public void end(String namespace, String name) throws Exception {
Object[] parameters = null;
if (this.paramCount > 0) {
parameters = (Object[]) this.getDigester().popParams();
if (this.getDigester().getLog().isTraceEnabled()) {
Formatter formatter = new Formatter(""[CallMethodRule]"");
for (int i = 0, size = parameters.length; i < size; i++) {
if (i > 0) {
formatter.format("", "");
}
formatter.format(""(%s) %s"", i, parameters[i]);
}
this.getDigester().getLog().trace(formatter.toString());
}
if (this.paramCount == 1 && parameters[0] == null) {
return;
}
} else if (this.paramTypes != null && this.paramTypes.length != 0) {
if (this.bodyText == null) {
return;
}
parameters = new Object[] { this.bodyText };
} else {
}
Object[] paramValues = new Object[this.paramTypes.length];
for (int i = 0; i < this.paramTypes.length; i++) {
if (parameters[i] == null || (parameters[i] instanceof String && !String.class.isAssignableFrom(this.paramTypes[i]))) {
paramValues[i] = ConvertUtils.convert((String) parameters[i], paramTypes[i]);
} else {
paramValues[i] = parameters[i];
}
}
Object target;
if (this.targetOffset >= 0) {
target = this.getDigester().peek(this.targetOffset);
} else {
target = this.getDigester().peek(this.getDigester().getCount() + this.targetOffset);
}
if (target == null) {
throw this.getDigester().createSAXException(String.format(""[CallMethodRule]{%s} Call target is null (targetOffset=%s, stackdepth=%s)"", this.getDigester().getMatch(), this.targetOffset, this.getDigester().getCount()));
}
if (this.getDigester().getLog().isDebugEnabled()) {
Formatter formatter = new Formatter().format(""[CallMethodRule]{%s} Call %s.%s("", this.getDigester().getMatch(), target.getClass().getName(), this.methodName);
for (int i = 0; i < paramValues.length; i++) {
if (i > 0) {
formatter.format("", "");
}
formatter.format(""%s/%s"", (paramValues[i] == null ? ""null"" : paramValues[i].toString()), (this.paramTypes[i] == null ? ""null"" : this.paramTypes[i].getName()));
}
formatter.format("")"");
this.getDigester().getLog().debug(formatter.toString());
}
Object result = null;
if (this.useExactMatch) {
result = MethodUtils.invokeExactMethod(target, this.methodName, paramValues, this.paramTypes);
} else {
result = MethodUtils.invokeMethod(target, this.methodName, paramValues, this.paramTypes);
}
processMethodCallResult(result);
}","@Override
public void end(String namespace, String name) throws Exception {
Object[] objectArrayVar1 = objectArrayLiteral2;
if (this.paramCount > 0) {
objectArrayVar1 = (Object[]) this.getDigester().popParams();
if (this.getDigester().getLog().isTraceEnabled()) {
Formatter formatterVar3 = formatterLiteral4;
for (int intVar14 = intLiteral15, intVar16 = intLiteral17; intVar5 < intLiteral1; intVar5++) {
if (intVar5 > 0) {
formatterVar3.format("", "");
}
formatterVar3.format(""(%s) %s"", intVar5, objectArrayVar1[intVar5]);
}
this.getDigester().getLog().trace(formatterVar3.toString());
}
if (this.paramCount == 1 && objectArrayVar1[0] == null) {
return;
}
} else if (this.paramTypes != null && this.paramTypes.length != 0) {
if (this.bodyText == null) {
return;
}
objectArrayVar1 = new Object[] { this.bodyText };
} else {
}
Object[] objectArrayVar9 = objectArrayLiteral10;
for (int intVar14 = intLiteral15; intVar5 < intLiteral2; intVar5++) {
if (objectArrayVar1[intVar5] == null || (objectArrayVar1[intVar5] instanceof String && !String.class.isAssignableFrom(this.paramTypes[intVar5]))) {
objectArrayVar9[intVar5] = ConvertUtils.convert((String) objectArrayVar1[intVar5], paramTypes[intVar5]);
} else {
objectArrayVar9[intVar5] = objectArrayVar1[intVar5];
}
}
Object objectVar11;
if (this.targetOffset >= 0) {
objectVar11 = this.getDigester().peek(this.targetOffset);
} else {
objectVar11 = this.getDigester().peek(this.getDigester().getCount() + this.targetOffset);
}
if (objectVar11 == null) {
throw this.getDigester().createSAXException(String.format(""[CallMethodRule]{%s} Call target is null (targetOffset=%s, stackdepth=%s)"", this.getDigester().getMatch(), this.targetOffset, this.getDigester().getCount()));
}
if (this.getDigester().getLog().isDebugEnabled()) {
Formatter formatterVar3 = formatterLiteral12;
for (int intVar14 = intLiteral15; intVar5 < intLiteral3; intVar5++) {
if (intVar5 > 0) {
formatterVar3.format("", "");
}
formatterVar3.format(""%s/%s"", (objectArrayVar9[intVar5] == null ? ""null"" : objectArrayVar9[intVar5].toString()), (this.paramTypes[intVar5] == null ? ""null"" : this.paramTypes[intVar5].getName()));
}
formatterVar3.format("")"");
this.getDigester().getLog().debug(formatterVar3.toString());
}
Object objectVar13 = objectArrayLiteral2;
if (this.useExactMatch) {
objectVar13 = MethodUtils.invokeExactMethod(objectVar11, this.methodName, objectArrayVar9, this.paramTypes);
} else {
objectVar13 = MethodUtils.invokeMethod(objectVar11, this.methodName, objectArrayVar9, this.paramTypes);
}
processMethodCallResult(objectVar13);
}"
10576,MALICIOUS_CODE,MS_SHOULD_BE_FINAL,FP,digester,952,"protected static Log log = LogFactory.getLog(""org.apache.commons.digester.Digester.sax"");","protected static Log log = LogFactory.getLog(""org.apache.commons.digester.Digester.sax"");",protected static Log logVar1 = logLiteral2;
10577,MALICIOUS_CODE,MS_SHOULD_BE_FINAL,FP,digester,953,"protected static String XERCES_DYNAMIC = ""http://apache.org/xml/features/validation/dynamic"";","protected static String XERCES_DYNAMIC = ""http://apache.org/xml/features/validation/dynamic"";",protected static String stringVar1 = stringLiteral2;
10581,MALICIOUS_CODE,MS_SHOULD_BE_FINAL,FP,digester,957,"protected static String JAXP_SCHEMA_LANGUAGE = ""http://java.sun.com/xml/jaxp/properties/schemaLanguage"";","protected static String JAXP_SCHEMA_LANGUAGE = ""http://java.sun.com/xml/jaxp/properties/schemaLanguage"";",protected static String stringVar1 = stringLiteral2;
10583,MALICIOUS_CODE,MS_PKGPROTECT,FP,digester,959,protected static float version;,protected static float version;,protected static float floatVar1;
10585,PERFORMANCE,SS_SHOULD_BE_STATIC,FP,digester,961,"public final String DFLT_PLUGIN_ID_ATTR = ""plugin-id"";","public final String DFLT_PLUGIN_ID_ATTR = ""plugin-id"";",public final String stringVar1 = stringLiteral2;
10600,PERFORMANCE,UUF_UNUSED_FIELD,FP,digester,976,private FromXmlRuleSet ruleSet;,private FromXmlRuleSet ruleSet;,private FromXmlRuleSet fromxmlrulesetVar1;
10623,DODGY_CODE,REC_CATCH_EXCEPTION,FP,digester,999,"} catch (Exception e) {
","public SAXParser getParser() {
if (parser != null) {
return (parser);
}
try {
if (validating && (schemaLocation != null)) {
Properties properties = new Properties();
properties.put(""SAXParserFactory"", getFactory());
if (schemaLocation != null) {
properties.put(""schemaLocation"", schemaLocation);
properties.put(""schemaLanguage"", schemaLanguage);
}
parser = ParserFeatureSetterFactory.newSAXParser(properties);
} else {
parser = getFactory().newSAXParser();
}
} catch (Exception e) {
log.error(""Digester.getParser: "", e);
return (null);
}
return (parser);
}","public SAXParser getParser() {
if (parser != null) {
return (parser);
}
try {
if (validating && (schemaLocation != null)) {
Properties propertiesVar1 = propertiesLiteral2;
propertiesVar1.put(""SAXParserFactory"", getFactory());
if (schemaLocation != null) {
propertiesVar1.put(""schemaLocation"", schemaLocation);
propertiesVar1.put(""schemaLanguage"", schemaLanguage);
}
parser = ParserFeatureSetterFactory.newSAXParser(propertiesVar1);
} else {
parser = getFactory().newSAXParser();
}
} catch (Exception e) {
log.error(""Digester.getParser: "", e);
return (null);
}
return (parser);
}"
10627,PERFORMANCE,URF_UNREAD_FIELD,FP,digester,1003,private String currChildNamespaceURI = null;,private String currChildNamespaceURI = null;,private String stringVar1 = stringLiteral2;
10644,MALICIOUS_CODE,MS_SHOULD_BE_FINAL,FP,digester,1020,"public static String DFLT_METHOD_NAME = ""addRules"";","public static String DFLT_METHOD_NAME = ""addRules"";",public static String stringVar1 = stringLiteral2;
10680,DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,digester,1056,"|| rulesBinder.isAlreadyBound( type ) )
","protected final void bindRulesFrom(final Class<?> type) {
if (type == null || type.getPackage().getName().startsWith(JAVA_PACKAGE) || rulesBinder.isAlreadyBound(type)) {
return;
}
visitElements(type);
if (!type.isInterface()) {
visitElements(new PrivilegedAction<Constructor<?>[]>() {
@Override
public Constructor<?>[] run() {
return type.getDeclaredConstructors();
}
});
visitElements(new PrivilegedAction<Field[]>() {
@Override
public Field[] run() {
return type.getDeclaredFields();
}
});
}
visitElements(new PrivilegedAction<Method[]>() {
@Override
public Method[] run() {
return type.getDeclaredMethods();
}
});
rulesBinder.markAsBound(type);
bindRulesFrom(type.getSuperclass());
}","protected final void bindRulesFrom(final Class<?> type) {
if (type == null || type.getPackage().getName().startsWith(JAVA_PACKAGE) || rulesBinder.isAlreadyBound(type)) {
return;
}
visitElements(type);
if (!type.isInterface()) {
visitElements(new PrivilegedAction<Constructor<?>[]>() {
@Override
public Constructor<?>[] run() {
return type.getDeclaredConstructors();
}
});
visitElements(new PrivilegedAction<Field[]>() {
@Override
public Field[] run() {
return type.getDeclaredFields();
}
});
}
visitElements(new PrivilegedAction<Method[]>() {
@Override
public Method[] run() {
return type.getDeclaredMethods();
}
});
rulesBinder.markAsBound(type);
bindRulesFrom(type.getSuperclass());
}"
10690,MALICIOUS_CODE,EI_EXPOSE_REP,FP,digester,1066,"return updated;
","public Date getUpdated() {
return updated;
}","public Date getUpdated() {
return updated;
}"
10691,MALICIOUS_CODE,EI_EXPOSE_REP2,FP,digester,1067,"this.updated = updated;
","public void setUpdated(final Date updated) {
this.updated = updated;
}","public void setUpdated(final Date updated) {
this.updated = updated;
}"
10712,DODGY_CODE,REC_CATCH_EXCEPTION,FP,digester,1088,"catch ( final Exception e )
","public static void main(final String[] args) {
try {
System.out.println(""RSSDigester Test Program"");
System.out.println(""Opening input stream ..."");
final InputStream is = RSSDigester.class.getResourceAsStream(""/org/apache/commons/digester3/rss/rss-example.xml"");
System.out.println(""Creating new digester ..."");
final RSSDigester digester = new RSSDigester();
if ((args.length > 0) && (args[0].equals(""-debug""))) {
digester.setLogger(LogFactory.getLog(""RSSDigester""));
}
System.out.println(""Parsing input stream ..."");
final Channel channel = (Channel) digester.parse(is);
System.out.println(""Closing input stream ..."");
is.close();
System.out.println(""Dumping channel info ..."");
channel.render(System.out);
} catch (final Exception e) {
System.out.println(""-->Exception"");
e.printStackTrace(System.out);
}
}","public static void main(final String[] args) {
try {
System.out.println(""RSSDigester Test Program"");
System.out.println(""Opening input stream ..."");
final InputStream inputstreamVar1 = inputstreamLiteral2;
System.out.println(""Creating new digester ..."");
final RSSDigester rssdigesterVar3 = rssdigesterLiteral4;
if ((args.length > 0) && (args[0].equals(""-debug""))) {
rssdigesterVar3.setLogger(LogFactory.getLog(""RSSDigester""));
}
System.out.println(""Parsing input stream ..."");
final Channel channelVar5 = channelLiteral6;
System.out.println(""Closing input stream ..."");
inputstreamVar1.close();
System.out.println(""Dumping channel info ..."");
channelVar5.render(System.out);
} catch (final Exception e) {
System.out.println(""-->Exception"");
e.printStackTrace(System.out);
}
}"
10715,DODGY_CODE,UC_USELESS_CONDITION,FP,digester,1091,"if ( paramTypes.length == 0 )
","@Override
public void end(String namespace, String name) throws Exception {
Object[] parameters;
if (paramCount > 0) {
parameters = getDigester().popParams();
if (getDigester().getLogger().isTraceEnabled()) {
for (int i = 0, size = parameters.length; i < size; i++) {
getDigester().getLogger().trace(format(""[CallMethodRule]{%s} parameters[%s]=%s"", getDigester().getMatch(), i, parameters[i]));
}
}
if (paramCount == 1 && parameters[0] == null) {
return;
}
} else if (paramTypes != null && paramTypes.length != 0) {
if (bodyText == null) {
return;
}
parameters = new Object[] { bodyText };
if (paramTypes.length == 0) {
paramTypes = new Class[] { String.class };
}
} else {
parameters = new Object[0];
paramTypes = new Class<?>[0];
}
Object[] paramValues = new Object[paramTypes.length];
for (int i = 0; i < paramTypes.length; i++) {
if (parameters[i] == null || (parameters[i] instanceof String && !String.class.isAssignableFrom(paramTypes[i]))) {
paramValues[i] = convert((String) parameters[i], paramTypes[i]);
} else {
paramValues[i] = parameters[i];
}
}
Object target;
if (targetOffset >= 0) {
target = getDigester().peek(targetOffset);
} else {
target = getDigester().peek(getDigester().getCount() + targetOffset);
}
if (target == null) {
throw new SAXException(format(""[CallMethodRule]{%s} Call target is null (targetOffset=%s, stackdepth=%s)"", getDigester().getMatch(), targetOffset, getDigester().getCount()));
}
if (getDigester().getLogger().isDebugEnabled()) {
Formatter formatter = new Formatter().format(""[CallMethodRule]{%s} Call %s.%s("", getDigester().getMatch(), target.getClass().getName(), methodName);
for (int i = 0; i < paramValues.length; i++) {
formatter.format(""%s%s/%s"", (i > 0 ? "", "" : """"), paramValues[i], paramTypes[i].getName());
}
formatter.format("")"");
getDigester().getLogger().debug(formatter.toString());
}
Object result = null;
if (useExactMatch) {
result = invokeExactMethod(target, methodName, paramValues, paramTypes);
} else {
result = invokeMethod(target, methodName, paramValues, paramTypes);
}
processMethodCallResult(result);
}","@Override
public void end(String namespace, String name) throws Exception {
Object[] objectArrayVar1;
if (paramCount > 0) {
objectArrayVar1 = getDigester().popParams();
if (getDigester().getLogger().isTraceEnabled()) {
for (int intVar13 = intLiteral14, intVar15 = intLiteral16; intVar2 < intLiteral1; intVar2++) {
getDigester().getLogger().trace(format(""[CallMethodRule]{%s} parameters[%s]=%s"", getDigester().getMatch(), intVar2, objectArrayVar1[intVar2]));
}
}
if (paramCount == 1 && objectArrayVar1[0] == null) {
return;
}
} else if (paramTypes != null && paramTypes.length != 0) {
if (bodyText == null) {
return;
}
objectArrayVar1 = new Object[] { bodyText };
if (paramTypes.length == 0) {
paramTypes = new Class[] { String.class };
}
} else {
objectArrayVar1 = new Object[0];
paramTypes = new Class<?>[0];
}
Object[] objectArrayVar6 = objectArrayLiteral7;
for (int intVar13 = intLiteral14; intVar2 < intLiteral2; intVar2++) {
if (objectArrayVar1[intVar2] == null || (objectArrayVar1[intVar2] instanceof String && !String.class.isAssignableFrom(paramTypes[intVar2]))) {
objectArrayVar6[intVar2] = convert((String) objectArrayVar1[intVar2], paramTypes[intVar2]);
} else {
objectArrayVar6[intVar2] = objectArrayVar1[intVar2];
}
}
Object objectVar8;
if (targetOffset >= 0) {
objectVar8 = getDigester().peek(targetOffset);
} else {
objectVar8 = getDigester().peek(getDigester().getCount() + targetOffset);
}
if (objectVar8 == null) {
throw new SAXException(format(""[CallMethodRule]{%s} Call target is null (targetOffset=%s, stackdepth=%s)"", getDigester().getMatch(), targetOffset, getDigester().getCount()));
}
if (getDigester().getLogger().isDebugEnabled()) {
Formatter formatterVar9 = formatterLiteral10;
for (int intVar13 = intLiteral14; intVar2 < intLiteral3; intVar2++) {
formatterVar9.format(""%s%s/%s"", (intVar2 > 0 ? "", "" : """"), objectArrayVar6[intVar2], paramTypes[intVar2].getName());
}
formatterVar9.format("")"");
getDigester().getLogger().debug(formatterVar9.toString());
}
Object objectVar11 = objectLiteral12;
if (useExactMatch) {
objectVar11 = invokeExactMethod(objectVar8, methodName, objectArrayVar6, paramTypes);
} else {
objectVar11 = invokeMethod(objectVar8, methodName, objectArrayVar6, paramTypes);
}
processMethodCallResult(objectVar11);
}"
10729,MALICIOUS_CODE,EI_EXPOSE_REP,FP,digester,1105,"return updated;
","public Date getUpdated() {
return updated;
}","public Date getUpdated() {
return updated;
}"
10738,PERFORMANCE,URF_UNREAD_FIELD,FP,digester,1114,private Connection conn;,private Connection conn;,private Connection connectionVar1;
10741,MALICIOUS_CODE,EI_EXPOSE_REP,FP,digester,1117,"return updated;
","public Date getUpdated() {
return updated;
}","public Date getUpdated() {
return updated;
}"
10749,EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,FP,digester,1125,"FileWriter out = new FileWriter( dest );
","private void execute() throws IOException {
FileReader inRaw = new FileReader(source);
FileWriter out = new FileWriter(dest);
BufferedReader in = new BufferedReader(inRaw);
while (true) {
String inStr = in.readLine();
if (inStr == null)
break;
String outStr = transformer.transform(inStr);
out.write(outStr);
out.write('\n');
}
inRaw.close();
out.close();
System.out.println(""Contents of file "" + source + "" have been transformed, and"" + "" written to file "" + dest + ""."");
}","private void execute() throws IOException {
FileReader filereaderVar1 = filereaderLiteral2;
FileWriter filewriterVar3 = filewriterLiteral4;
BufferedReader bufferedreaderVar5 = bufferedreaderLiteral6;
while (true) {
String stringVar7 = stringLiteral8;
if (stringVar7 == null)
break;
String stringVar9 = stringLiteral10;
filewriterVar3.write(stringVar9);
filewriterVar3.write('\n');
}
filereaderVar1.close();
filewriterVar3.close();
System.out.println(""Contents of file "" + source + "" have been transformed, and"" + "" written to file "" + dest + ""."");
}"
10752,DODGY_CODE,REC_CATCH_EXCEPTION,FP,digester,1128,"catch ( Exception e )
","public static void main(String[] args) {
try {
System.out.println(""RSSDigester Test Program"");
System.out.println(""Opening input stream ..."");
InputStream is = RSSDigester.class.getResourceAsStream(""/org/apache/commons/digester3/rss/rss-example.xml"");
System.out.println(""Creating new digester ..."");
RSSDigester digester = new RSSDigester();
if ((args.length > 0) && (args[0].equals(""-debug""))) {
digester.setLogger(LogFactory.getLog(""RSSDigester""));
}
System.out.println(""Parsing input stream ..."");
Channel channel = (Channel) digester.parse(is);
System.out.println(""Closing input stream ..."");
is.close();
System.out.println(""Dumping channel info ..."");
channel.render(System.out);
} catch (Exception e) {
System.out.println(""-->Exception"");
e.printStackTrace(System.out);
}
}","public static void main(String[] args) {
try {
System.out.println(""RSSDigester Test Program"");
System.out.println(""Opening input stream ..."");
InputStream inputstreamVar1 = inputstreamLiteral2;
System.out.println(""Creating new digester ..."");
RSSDigester rssdigesterVar3 = rssdigesterLiteral4;
if ((args.length > 0) && (args[0].equals(""-debug""))) {
rssdigesterVar3.setLogger(LogFactory.getLog(""RSSDigester""));
}
System.out.println(""Parsing input stream ..."");
Channel channelVar5 = channelLiteral6;
System.out.println(""Closing input stream ..."");
inputstreamVar1.close();
System.out.println(""Dumping channel info ..."");
channelVar5.render(System.out);
} catch (Exception e) {
System.out.println(""-->Exception"");
e.printStackTrace(System.out);
}
}"
10768,MALICIOUS_CODE,MS_SHOULD_BE_FINAL,FP,digester,1144,"protected static String JAXP_SCHEMA_LANGUAGE = ""http://java.sun.com/xml/jaxp/properties/schemaLanguage"";","protected static String JAXP_SCHEMA_LANGUAGE = ""http://java.sun.com/xml/jaxp/properties/schemaLanguage"";",protected static String stringVar1 = stringLiteral2;
10784,MALICIOUS_CODE,MS_SHOULD_BE_FINAL,FP,digester,1160,"public static String DFLT_METHOD_ATTR = ""method"";","public static String DFLT_METHOD_ATTR = ""method"";",public static String stringVar1 = stringLiteral2;
10891,CORRECTNESS,UWF_NULL_FIELD,FP,digester,1267,public final String DFLT_PLUGIN_ID_ATTR_NS = null;,public final String DFLT_PLUGIN_ID_ATTR_NS = null;,public final String stringVar1 = stringLiteral2;
10897,MALICIOUS_CODE,MS_SHOULD_BE_FINAL,FP,digester,1273,"public static String DFLT_METHOD_NAME = ""addRules"";","public static String DFLT_METHOD_NAME = ""addRules"";",public static String stringVar1 = stringLiteral2;
10926,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,digester,1302,"return ( null );
","public Object[] peekParams() {
try {
return (params.peek());
} catch (EmptyStackException e) {
log.warn(""Empty stack (returning null)"");
return (null);
}
}","public Object[] peekParams() {
try {
return (params.peek());
} catch (EmptyStackException e) {
log.warn(""Empty stack (returning null)"");
return (null);
}
}"
10940,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,digester,1316,"return ( null );
","public Object[] peekParams(int n) {
int index = (params.size() - 1) - n;
if (index < 0) {
log.warn(""Empty stack (returning null)"");
return (null);
}
try {
return (params.get(index));
} catch (EmptyStackException e) {
log.warn(""Empty stack (returning null)"");
return (null);
}
}","public Object[] peekParams(int n) {
int intVar1 = intLiteral2;
if (intVar1 < 0) {
log.warn(""Empty stack (returning null)"");
return (null);
}
try {
return (params.get(intVar1));
} catch (EmptyStackException e) {
log.warn(""Empty stack (returning null)"");
return (null);
}
}"
10945,DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,digester,1321,"|| rulesBinder.isAlreadyBound( type ) )
","protected final void bindRulesFrom(final Class<?> type) {
if (type == null || type.getPackage().getName().startsWith(JAVA_PACKAGE) || rulesBinder.isAlreadyBound(type)) {
return;
}
visitElements(type);
if (!type.isInterface()) {
visitElements(new PrivilegedAction<Constructor<?>[]>() {
public Constructor<?>[] run() {
return type.getDeclaredConstructors();
}
});
visitElements(new PrivilegedAction<Field[]>() {
public Field[] run() {
return type.getDeclaredFields();
}
});
}
visitElements(new PrivilegedAction<Method[]>() {
public Method[] run() {
return type.getDeclaredMethods();
}
});
rulesBinder.markAsBound(type);
bindRulesFrom(type.getSuperclass());
}","protected final void bindRulesFrom(final Class<?> type) {
if (type == null || type.getPackage().getName().startsWith(JAVA_PACKAGE) || rulesBinder.isAlreadyBound(type)) {
return;
}
visitElements(type);
if (!type.isInterface()) {
visitElements(new PrivilegedAction<Constructor<?>[]>() {
public Constructor<?>[] run() {
return type.getDeclaredConstructors();
}
});
visitElements(new PrivilegedAction<Field[]>() {
public Field[] run() {
return type.getDeclaredFields();
}
});
}
visitElements(new PrivilegedAction<Method[]>() {
public Method[] run() {
return type.getDeclaredMethods();
}
});
rulesBinder.markAsBound(type);
bindRulesFrom(type.getSuperclass());
}"
10973,DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,digester,1349,"return memoryRulesBinder.forPattern( pattern );
","protected LinkedRuleBuilder forPattern(String pattern) {
return memoryRulesBinder.forPattern(pattern);
}","protected LinkedRuleBuilder forPattern(String pattern) {
return memoryRulesBinder.forPattern(pattern);
}"
11071,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,digester,1447,"return null;
","public static Annotation[] getAnnotationsArrayValue(Annotation annotation) {
Object value = getAnnotationValue(annotation);
if (value != null && value.getClass().isArray() && Annotation.class.isAssignableFrom(value.getClass().getComponentType())) {
return (Annotation[]) value;
}
return null;
}","public static Annotation[] getAnnotationsArrayValue(Annotation annotation) {
Object objectVar1 = objectLiteral2;
if (objectVar1 != null && objectVar1.getClass().isArray() && Annotation.class.isAssignableFrom(objectVar1.getClass().getComponentType())) {
return (Annotation[]) objectVar1;
}
return null;
}"
11072,CORRECTNESS,NP_NULL_PARAM_DEREF,FP,digester,1448,"return new FactoryCreateRule( type, attributeName, ignoreCreateExceptions );
","@Override
protected FactoryCreateRule createRule() {
if (type == null && attributeName == null && creationFactory == null) {
reportError(""factoryCreate()"", ""at least one between 'className', 'attributeName' or 'creationFactory' has to be specified"");
}
if (type != null || attributeName != null) {
return new FactoryCreateRule(type, attributeName, ignoreCreateExceptions);
}
return new FactoryCreateRule(creationFactory, ignoreCreateExceptions);
}","@Override
protected FactoryCreateRule createRule() {
if (type == null && attributeName == null && creationFactory == null) {
reportError(""factoryCreate()"", ""at least one between 'className', 'attributeName' or 'creationFactory' has to be specified"");
}
if (type != null || attributeName != null) {
return new FactoryCreateRule(type, attributeName, ignoreCreateExceptions);
}
return new FactoryCreateRule(creationFactory, ignoreCreateExceptions);
}"
11099,MALICIOUS_CODE,MS_SHOULD_BE_FINAL,FP,digester,1475,"public static String DFLT_METHOD_NAME = ""addRules"";","public static String DFLT_METHOD_NAME = ""addRules"";",public static String stringVar1 = stringLiteral2;
11102,MALICIOUS_CODE,MS_SHOULD_BE_FINAL,FP,digester,1478,"public static String DFLT_RESOURCE_SUFFIX = ""RuleInfo.xml"";","public static String DFLT_RESOURCE_SUFFIX = ""RuleInfo.xml"";",public static String stringVar1 = stringLiteral2;
11135,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,digester,1511,"return ( null );
","public Object[] peekParams() {
try {
return (params.peek());
} catch (EmptyStackException e) {
log.warn(""Empty stack (returning null)"");
return (null);
}
}","public Object[] peekParams() {
try {
return (params.peek());
} catch (EmptyStackException e) {
log.warn(""Empty stack (returning null)"");
return (null);
}
}"
11137,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,digester,1513,"return ( null );
","public Object[] popParams() {
try {
if (log.isTraceEnabled()) {
log.trace(""Popping params"");
}
return (params.pop());
} catch (EmptyStackException e) {
log.warn(""Empty stack (returning null)"");
return (null);
}
}","public Object[] popParams() {
try {
if (log.isTraceEnabled()) {
log.trace(""Popping params"");
}
return (params.pop());
} catch (EmptyStackException e) {
log.warn(""Empty stack (returning null)"");
return (null);
}
}"
11244,CORRECTNESS,VA_FORMAT_STRING_EXTRA_ARGUMENTS_PASSED,TP,digester,1620,"throw new SAXException( format( ""[ObjectCreateRule]{%s} Class '%s' does not have a construcor with types"",
","@Override
public void begin(String namespace, String name, Attributes attributes) throws Exception {
Class<?> clazz = this.clazz;
if (clazz == null) {
String realClassName = className;
if (attributeName != null) {
String value = attributes.getValue(attributeName);
if (value != null) {
realClassName = value;
}
}
if (getDigester().getLogger().isDebugEnabled()) {
getDigester().getLogger().debug(format(""[ObjectCreateRule]{%s} New '%s'"", getDigester().getMatch(), realClassName));
}
clazz = getDigester().getClassLoader().loadClass(realClassName);
}
Object instance;
if (constructorArgumentTypes == null || constructorArgumentTypes.length == 0) {
if (getDigester().getLogger().isDebugEnabled()) {
getDigester().getLogger().debug(format(""[ObjectCreateRule]{%s} New '%s' using default empty constructor"", getDigester().getMatch(), clazz.getName()));
}
instance = clazz.newInstance();
} else {
if (proxyManager == null) {
synchronized (this) {
if (proxyManager == null) {
Constructor<?> constructor = getAccessibleConstructor(clazz, constructorArgumentTypes);
if (constructor == null) {
throw new SAXException(format(""[ObjectCreateRule]{%s} Class '%s' does not have a construcor with types"", getDigester().getMatch(), clazz.getName(), Arrays.toString(constructorArgumentTypes)));
}
proxyManager = new ProxyManager(clazz, constructor, defaultConstructorArguments, getDigester());
}
}
}
instance = proxyManager.createProxy();
}
getDigester().push(instance);
}","@Override
public void begin(String namespace, String name, Attributes attributes) throws Exception {
Class<?> class<?>Var1 = class<?>Literal2;
if (class<?>Var1 == null) {
String stringVar3 = stringLiteral4;
if (attributeName != null) {
String stringVar5 = stringLiteral6;
if (stringVar5 != null) {
stringVar3 = stringVar5;
}
}
if (getDigester().getLogger().isDebugEnabled()) {
getDigester().getLogger().debug(format(""[ObjectCreateRule]{%s} New '%s'"", getDigester().getMatch(), stringVar3));
}
class<?>Var1 = getDigester().getClassLoader().loadClass(stringVar3);
}
Object objectVar7;
if (constructorArgumentTypes == null || constructorArgumentTypes.length == 0) {
if (getDigester().getLogger().isDebugEnabled()) {
getDigester().getLogger().debug(format(""[ObjectCreateRule]{%s} New '%s' using default empty constructor"", getDigester().getMatch(), class<?>Var1.getName()));
}
objectVar7 = class<?>Var1.newInstance();
} else {
if (proxyManager == null) {
synchronized (this) {
if (proxyManager == null) {
Constructor<?> constructor<?>Var8 = constructor<?>Literal9;
if (constructor<?>Var8 == null) {
throw new SAXException(format(""[ObjectCreateRule]{%s} Class '%s' does not have a construcor with types"", getDigester().getMatch(), class<?>Var1.getName(), Arrays.toString(constructorArgumentTypes)));
}
proxyManager = new ProxyManager(class<?>Var1, constructor<?>Var8, defaultConstructorArguments, getDigester());
}
}
}
objectVar7 = proxyManager.createProxy();
}
getDigester().push(objectVar7);
}"
11270,CORRECTNESS,RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE,FP,digester,1646,"if (this.paramTypes.length > 0) {
","@Override
public void end(String namespace, String name) throws Exception {
Object[] parameters = null;
if (this.paramTypes.length > 0) {
parameters = (Object[]) this.getDigester().popParams();
if (this.getDigester().getLog().isTraceEnabled()) {
Formatter formatter = new Formatter(""[CallMethodRule]"");
for (int i = 0, size = parameters.length; i < size; i++) {
if (i > 0) {
formatter.format("", "");
}
formatter.format(""(%s) %s"", i, parameters[i]);
}
this.getDigester().getLog().trace(formatter.toString());
}
if (this.paramTypes.length == 1 && parameters[0] == null) {
return;
}
} else if (this.paramTypes != null && this.paramTypes.length != 0) {
if (this.bodyText == null) {
return;
}
parameters = new Object[] { this.bodyText };
} else {
}
Object[] paramValues = new Object[this.paramTypes.length];
for (int i = 0; i < this.paramTypes.length; i++) {
if (parameters[i] == null || (parameters[i] instanceof String && !String.class.isAssignableFrom(this.paramTypes[i]))) {
paramValues[i] = ConvertUtils.convert((String) parameters[i], paramTypes[i]);
} else {
paramValues[i] = parameters[i];
}
}
Object target;
if (this.targetOffset >= 0) {
target = this.getDigester().peek(this.targetOffset);
} else {
target = this.getDigester().peek(this.getDigester().getCount() + this.targetOffset);
}
if (target == null) {
throw this.getDigester().createSAXException(String.format(""[CallMethodRule]{%s} Call target is null (targetOffset=%s, stackdepth=%s)"", this.getDigester().getMatch(), this.targetOffset, this.getDigester().getCount()));
}
if (this.getDigester().getLog().isDebugEnabled()) {
Formatter formatter = new Formatter().format(""[CallMethodRule]{%s} Call %s.%s("", this.getDigester().getMatch(), target.getClass().getName(), this.methodName);
for (int i = 0; i < paramValues.length; i++) {
if (i > 0) {
formatter.format("", "");
}
formatter.format(""%s/%s"", (paramValues[i] == null ? ""null"" : paramValues[i].toString()), (this.paramTypes[i] == null ? ""null"" : this.paramTypes[i].getName()));
}
formatter.format("")"");
this.getDigester().getLog().debug(formatter.toString());
}
Object result = null;
if (this.useExactMatch) {
result = MethodUtils.invokeExactMethod(target, this.methodName, paramValues, this.paramTypes);
} else {
result = MethodUtils.invokeMethod(target, this.methodName, paramValues, this.paramTypes);
}
processMethodCallResult(result);
}","@Override
public void end(String namespace, String name) throws Exception {
Object[] objectArrayVar1 = objectArrayLiteral2;
if (this.paramTypes.length > 0) {
objectArrayVar1 = (Object[]) this.getDigester().popParams();
if (this.getDigester().getLog().isTraceEnabled()) {
Formatter formatterVar3 = formatterLiteral4;
for (int intVar14 = intLiteral15, intVar16 = intLiteral17; intVar5 < intLiteral1; intVar5++) {
if (intVar5 > 0) {
formatterVar3.format("", "");
}
formatterVar3.format(""(%s) %s"", intVar5, objectArrayVar1[intVar5]);
}
this.getDigester().getLog().trace(formatterVar3.toString());
}
if (this.paramTypes.length == 1 && objectArrayVar1[0] == null) {
return;
}
} else if (this.paramTypes != null && this.paramTypes.length != 0) {
if (this.bodyText == null) {
return;
}
objectArrayVar1 = new Object[] { this.bodyText };
} else {
}
Object[] objectArrayVar9 = objectArrayLiteral10;
for (int intVar14 = intLiteral15; intVar5 < intLiteral2; intVar5++) {
if (objectArrayVar1[intVar5] == null || (objectArrayVar1[intVar5] instanceof String && !String.class.isAssignableFrom(this.paramTypes[intVar5]))) {
objectArrayVar9[intVar5] = ConvertUtils.convert((String) objectArrayVar1[intVar5], paramTypes[intVar5]);
} else {
objectArrayVar9[intVar5] = objectArrayVar1[intVar5];
}
}
Object objectVar11;
if (this.targetOffset >= 0) {
objectVar11 = this.getDigester().peek(this.targetOffset);
} else {
objectVar11 = this.getDigester().peek(this.getDigester().getCount() + this.targetOffset);
}
if (objectVar11 == null) {
throw this.getDigester().createSAXException(String.format(""[CallMethodRule]{%s} Call target is null (targetOffset=%s, stackdepth=%s)"", this.getDigester().getMatch(), this.targetOffset, this.getDigester().getCount()));
}
if (this.getDigester().getLog().isDebugEnabled()) {
Formatter formatterVar3 = formatterLiteral12;
for (int intVar14 = intLiteral15; intVar5 < intLiteral3; intVar5++) {
if (intVar5 > 0) {
formatterVar3.format("", "");
}
formatterVar3.format(""%s/%s"", (objectArrayVar9[intVar5] == null ? ""null"" : objectArrayVar9[intVar5].toString()), (this.paramTypes[intVar5] == null ? ""null"" : this.paramTypes[intVar5].getName()));
}
formatterVar3.format("")"");
this.getDigester().getLog().debug(formatterVar3.toString());
}
Object objectVar13 = objectArrayLiteral2;
if (this.useExactMatch) {
objectVar13 = MethodUtils.invokeExactMethod(objectVar11, this.methodName, objectArrayVar9, this.paramTypes);
} else {
objectVar13 = MethodUtils.invokeMethod(objectVar11, this.methodName, objectArrayVar9, this.paramTypes);
}
processMethodCallResult(objectVar13);
}"
11287,Multithreaded correctness,IS2_INCONSISTENT_SYNC,TP,digester,1663,Object delegate;,Object delegate;,Object objectVar1;
11330,I18N,DM_DEFAULT_ENCODING,TP,fileupload,31,"return new String(new byte[0]);
","@Override
public String getString() {
try {
final byte[] rawData = get();
String charset = getCharSet();
if (charset == null) {
charset = defaultCharset;
}
return new String(rawData, charset);
} catch (final IOException e) {
return new String(new byte[0]);
}
}","@Override
public String getString() {
try {
final byte[] byteArrayVar1 = byteArrayLiteral2;
String stringVar3 = stringLiteral4;
if (stringVar3 == null) {
stringVar3 = defaultCharset;
}
return new String(byteArrayVar1, stringVar3);
} catch (final IOException e) {
return new String(new byte[0]);
}
}"
11349,I18N,DM_DEFAULT_ENCODING,TP,fileupload,50,"boundary = boundaryStr.getBytes(); 
","public byte[] getBoundary(final String contentType) {
final ParameterParser parser = new ParameterParser();
parser.setLowerCaseNames(true);
final Map<String, String> params = parser.parse(contentType, new char[] { ';', ',' });
final String boundaryStr = params.get(""boundary"");
if (boundaryStr == null) {
return null;
}
byte[] boundary;
try {
boundary = boundaryStr.getBytes(""ISO-8859-1"");
} catch (final UnsupportedEncodingException e) {
boundary = boundaryStr.getBytes();
}
return boundary;
}","public byte[] getBoundary(final String contentType) {
final ParameterParser parameterparserVar1 = parameterparserLiteral2;
parameterparserVar1.setLowerCaseNames(true);
final Map<String, String> map<string,string>Var3 = map<string,string>Literal4;
final String stringVar5 = stringLiteral6;
if (stringVar5 == null) {
return null;
}
byte[] byteArrayVar7;
try {
byteArrayVar7 = stringVar5.getBytes(""ISO-8859-1"");
} catch (final UnsupportedEncodingException e) {
byteArrayVar7 = stringVar5.getBytes();
}
return byteArrayVar7;
}"
11358,I18N,DM_CONVERT_CASE,FP,fileupload,59,"subContentType.toLowerCase().startsWith(MULTIPART_MIXED)) {
","private boolean findNextItem() throws IOException {
if (eof) {
return false;
}
if (currentItem != null) {
currentItem.close();
currentItem = null;
}
for (; ; ) {
boolean nextPart;
if (skipPreamble) {
nextPart = multi.skipPreamble();
} else {
nextPart = multi.readBoundary();
}
if (!nextPart) {
if (currentFieldName == null) {
eof = true;
return false;
}
multi.setBoundary(boundary);
currentFieldName = null;
continue;
}
Map headers = parseHeaders(multi.readHeaders());
if (currentFieldName == null) {
String fieldName = getFieldName(headers);
if (fieldName != null) {
String subContentType = getHeader(headers, CONTENT_TYPE);
if (subContentType != null && subContentType.toLowerCase().startsWith(MULTIPART_MIXED)) {
currentFieldName = fieldName;
byte[] subBoundary = getBoundary(subContentType);
multi.setBoundary(subBoundary);
skipPreamble = true;
continue;
}
String fileName = getFileName(headers);
currentItem = new FileItemStreamImpl(fileName, fieldName, getHeader(headers, CONTENT_TYPE), fileName == null);
notifier.noteItem();
itemValid = true;
return true;
}
} else {
String fileName = getFileName(headers);
if (fileName != null) {
currentItem = new FileItemStreamImpl(fileName, currentFieldName, getHeader(headers, CONTENT_TYPE), false);
notifier.noteItem();
itemValid = true;
return true;
}
}
multi.discardBodyData();
}
}","private boolean findNextItem() throws IOException {
if (eof) {
return false;
}
if (currentItem != null) {
currentItem.close();
currentItem = null;
}
for (; ; ) {
boolean booleanVar1;
if (skipPreamble) {
booleanVar1 = multi.skipPreamble();
} else {
booleanVar1 = multi.readBoundary();
}
if (!booleanVar1) {
if (currentFieldName == null) {
eof = true;
return false;
}
multi.setBoundary(boundary);
currentFieldName = null;
continue;
}
Map mapVar2 = mapLiteral3;
if (currentFieldName == null) {
String stringVar4 = stringLiteral5;
if (stringVar4 != null) {
String stringVar6 = stringLiteral7;
if (stringVar6 != null && stringVar6.toLowerCase().startsWith(MULTIPART_MIXED)) {
currentFieldName = stringVar4;
byte[] byteArrayVar8 = byteArrayLiteral9;
multi.setBoundary(byteArrayVar8);
skipPreamble = true;
continue;
}
String stringVar10 = stringLiteral11;
currentItem = new FileItemStreamImpl(stringVar10, stringVar4, getHeader(mapVar2, CONTENT_TYPE), stringVar10 == null);
notifier.noteItem();
itemValid = true;
return true;
}
} else {
String stringVar10 = stringLiteral11;
if (stringVar10 != null) {
currentItem = new FileItemStreamImpl(stringVar10, currentFieldName, getHeader(mapVar2, CONTENT_TYPE), false);
notifier.noteItem();
itemValid = true;
return true;
}
}
multi.discardBodyData();
}
}"
11364,DODGY_CODE,BC_VACUOUS_INSTANCEOF,FP,fileupload,65,"if (fileItem instanceof FileItemHeadersSupport) {
","public List parseRequest(RequestContext ctx) throws FileUploadException {
List items = new ArrayList();
boolean successful = false;
try {
FileItemIterator iter = getItemIterator(ctx);
FileItemFactory fac = getFileItemFactory();
if (fac == null) {
throw new NullPointerException(""No FileItemFactory has been set."");
}
while (iter.hasNext()) {
final FileItemStream item = iter.next();
final String fileName = ((org.apache.commons.fileupload.FileUploadBase.FileItemIteratorImpl.FileItemStreamImpl) item).name;
FileItem fileItem = fac.createItem(item.getFieldName(), item.getContentType(), item.isFormField(), fileName);
items.add(fileItem);
try {
Streams.copy(item.openStream(), fileItem.getOutputStream(), true);
} catch (FileUploadIOException e) {
throw (FileUploadException) e.getCause();
} catch (IOException e) {
throw new IOFileUploadException(""Processing of "" + MULTIPART_FORM_DATA + "" request failed. "" + e.getMessage(), e);
}
if (fileItem instanceof FileItemHeadersSupport) {
final FileItemHeaders fih = item.getHeaders();
fileItem.setHeaders(fih);
}
}
successful = true;
return items;
} catch (FileUploadIOException e) {
throw (FileUploadException) e.getCause();
} catch (IOException e) {
throw new FileUploadException(e.getMessage(), e);
} finally {
if (!successful) {
for (Iterator iterator = items.iterator(); iterator.hasNext(); ) {
FileItem fileItem = (FileItem) iterator.next();
try {
fileItem.delete();
} catch (Throwable e) {
}
}
}
}
}","public List parseRequest(RequestContext ctx) throws FileUploadException {
List listVar1 = listLiteral2;
boolean booleanVar3 = booleanLiteral4;
try {
FileItemIterator fileitemiteratorVar5 = fileitemiteratorLiteral6;
FileItemFactory fileitemfactoryVar7 = fileitemfactoryLiteral8;
if (fileitemfactoryVar7 == null) {
throw new NullPointerException(""No FileItemFactory has been set."");
}
while (fileitemiteratorVar5.hasNext()) {
final FileItemStream fileitemstreamVar9 = fileitemstreamLiteral10;
final String stringVar11 = stringLiteral12;
FileItem fileitemVar13 = fileitemLiteral14;
listVar1.add(fileitemVar13);
try {
Streams.copy(fileitemstreamVar9.openStream(), fileitemVar13.getOutputStream(), true);
} catch (FileUploadIOException e) {
throw (FileUploadException) e.getCause();
} catch (IOException e) {
throw new IOFileUploadException(""Processing of "" + MULTIPART_FORM_DATA + "" request failed. "" + e.getMessage(), e);
}
if (fileitemVar13 instanceof FileItemHeadersSupport) {
final FileItemHeaders fileitemheadersVar15 = fileitemheadersLiteral16;
fileitemVar13.setHeaders(fileitemheadersVar15);
}
}
booleanVar3 = true;
return listVar1;
} catch (FileUploadIOException e) {
throw (FileUploadException) e.getCause();
} catch (IOException e) {
throw new FileUploadException(e.getMessage(), e);
} finally {
if (!booleanVar3) {
for (Iterator iteratorVar20 = iteratorLiteral21; iteratorVar17.hasNext(); ) {
FileItem fileitemVar13 = fileitemLiteral19;
try {
fileitemVar13.delete();
} catch (Throwable e) {
}
}
}
}
}"
11384,DODGY_CODE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,FP,fileupload,85,"throw (FileUploadException) e.getCause();
","public List parseRequest(RequestContext ctx) throws FileUploadException {
try {
FileItemIterator iter = getItemIterator(ctx);
List items = new ArrayList();
FileItemFactory fac = getFileItemFactory();
final byte[] buffer = new byte[8192];
while (iter.hasNext()) {
FileItemStream item = iter.next();
FileItem fileItem = fac.createItem(item.getFieldName(), item.getContentType(), item.isFormField(), item.getName());
try {
Streams.copy(item.openStream(), fileItem.getOutputStream(), true, buffer);
} catch (FileUploadIOException e) {
throw (FileUploadException) e.getCause();
} catch (IOException e) {
throw new IOFileUploadException(""Processing of "" + MULTIPART_FORM_DATA + "" request failed. "" + e.getMessage(), e);
}
items.add(fileItem);
}
return items;
} catch (FileUploadIOException e) {
throw (FileUploadException) e.getCause();
} catch (IOException e) {
throw new FileUploadException(e.getMessage(), e);
}
}","public List parseRequest(RequestContext ctx) throws FileUploadException {
try {
FileItemIterator fileitemiteratorVar1 = fileitemiteratorLiteral2;
List listVar3 = listLiteral4;
FileItemFactory fileitemfactoryVar5 = fileitemfactoryLiteral6;
final byte[] byteArrayVar7 = byteArrayLiteral8;
while (fileitemiteratorVar1.hasNext()) {
FileItemStream fileitemstreamVar9 = fileitemstreamLiteral10;
FileItem fileitemVar11 = fileitemLiteral12;
try {
Streams.copy(fileitemstreamVar9.openStream(), fileitemVar11.getOutputStream(), true, byteArrayVar7);
} catch (FileUploadIOException e) {
throw (FileUploadException) e.getCause();
} catch (IOException e) {
throw new IOFileUploadException(""Processing of "" + MULTIPART_FORM_DATA + "" request failed. "" + e.getMessage(), e);
}
listVar3.add(fileitemVar11);
}
return listVar3;
} catch (FileUploadIOException e) {
throw (FileUploadException) e.getCause();
} catch (IOException e) {
throw new FileUploadException(e.getMessage(), e);
}
}"
11432,BAD_PRACTICE,SR_NOT_CHECKED,FP,fileupload,133,"skip(av);
","public void close(boolean pCloseUnderlying) throws IOException {
if (closed) {
return;
}
if (pCloseUnderlying) {
closed = true;
input.close();
} else {
for (; ; ) {
int av = available();
if (av == 0) {
av = makeAvailable();
if (av == 0) {
break;
}
}
skip(av);
}
}
closed = true;
}","public void close(boolean pCloseUnderlying) throws IOException {
if (closed) {
return;
}
if (pCloseUnderlying) {
closed = true;
input.close();
} else {
for (; ; ) {
int intVar1 = intLiteral2;
if (intVar1 == 0) {
intVar1 = makeAvailable();
if (intVar1 == 0) {
break;
}
}
skip(intVar1);
}
}
closed = true;
}"
11437,MALICIOUS_CODE,MS_PKGPROTECT,FP,fileupload,138,"protected static final byte[] HEADER_SEPARATOR = { CR, LF, CR, LF };","protected static final byte[] HEADER_SEPARATOR = { CR, LF, CR, LF };",protected static final byte[] byteArrayVar1 = byteArrayLiteral2;
11445,BAD_PRACTICE,RR_NOT_CHECKED,FP,fileupload,146,"fis.read(fileData);
","public byte[] get() {
if (isInMemory()) {
if (cachedContent == null) {
cachedContent = dfos.getData();
}
return cachedContent;
}
byte[] fileData = new byte[(int) getSize()];
InputStream fis = null;
try {
fis = new BufferedInputStream(new FileInputStream(dfos.getFile()));
fis.read(fileData);
} catch (IOException e) {
fileData = null;
} finally {
if (fis != null) {
try {
fis.close();
} catch (IOException e) {
}
}
}
return fileData;
}","public byte[] get() {
if (isInMemory()) {
if (cachedContent == null) {
cachedContent = dfos.getData();
}
return cachedContent;
}
byte[] byteArrayVar1 = byteArrayLiteral2;
InputStream inputstreamVar3 = inputstreamLiteral4;
try {
inputstreamVar3 = new BufferedInputStream(new FileInputStream(dfos.getFile()));
inputstreamVar3.read(byteArrayVar1);
} catch (IOException e) {
byteArrayVar1 = null;
} finally {
if (inputstreamVar3 != null) {
try {
inputstreamVar3.close();
} catch (IOException e) {
}
}
}
return byteArrayVar1;
}"
11452,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,fileupload,153,"this.fileItemFactory = (DefaultFileItemFactory) factory;
","@Override
@Deprecated
public void setFileItemFactory(FileItemFactory factory) {
this.fileItemFactory = (DefaultFileItemFactory) factory;
}","@Override
@Deprecated
public void setFileItemFactory(FileItemFactory factory) {
this.fileItemFactory = (DefaultFileItemFactory) factory;
}"
11453,CORRECTNESS,SIO_SUPERFLUOUS_INSTANCEOF,FP,fileupload,154,"if (fileItem instanceof FileItemHeadersSupport) {
","public List<FileItem> parseRequest(RequestContext ctx) throws FileUploadException {
List<FileItem> items = new ArrayList<FileItem>();
boolean successful = false;
try {
FileItemIterator iter = getItemIterator(ctx);
FileItemFactory fac = getFileItemFactory();
if (fac == null) {
throw new NullPointerException(""No FileItemFactory has been set."");
}
while (iter.hasNext()) {
final FileItemStream item = iter.next();
final String fileName = ((FileItemIteratorImpl.FileItemStreamImpl) item).name;
FileItem fileItem = fac.createItem(item.getFieldName(), item.getContentType(), item.isFormField(), fileName);
items.add(fileItem);
try {
Streams.copy(item.openStream(), fileItem.getOutputStream(), true);
} catch (FileUploadIOException e) {
throw (FileUploadException) e.getCause();
} catch (IOException e) {
throw new IOFileUploadException(format(""Processing of %s request failed. "", MULTIPART_FORM_DATA, e.getMessage()), e);
}
if (fileItem instanceof FileItemHeadersSupport) {
final FileItemHeaders fih = item.getHeaders();
fileItem.setHeaders(fih);
}
}
successful = true;
return items;
} catch (FileUploadIOException e) {
throw (FileUploadException) e.getCause();
} catch (IOException e) {
throw new FileUploadException(e.getMessage(), e);
} finally {
if (!successful) {
for (FileItem fileItem : items) {
try {
fileItem.delete();
} catch (Throwable e) {
}
}
}
}
}","public List<FileItem> parseRequest(RequestContext ctx) throws FileUploadException {
List<FileItem> list<fileitem>Var1 = list<fileitem>Literal2;
boolean booleanVar3 = booleanLiteral4;
try {
FileItemIterator fileitemiteratorVar5 = fileitemiteratorLiteral6;
FileItemFactory fileitemfactoryVar7 = fileitemfactoryLiteral8;
if (fileitemfactoryVar7 == null) {
throw new NullPointerException(""No FileItemFactory has been set."");
}
while (fileitemiteratorVar5.hasNext()) {
final FileItemStream fileitemstreamVar9 = fileitemstreamLiteral10;
final String stringVar11 = stringLiteral12;
FileItem fileitemVar13 = fileitemLiteral14;
list<fileitem>Var1.add(fileitemVar13);
try {
Streams.copy(fileitemstreamVar9.openStream(), fileitemVar13.getOutputStream(), true);
} catch (FileUploadIOException e) {
throw (FileUploadException) e.getCause();
} catch (IOException e) {
throw new IOFileUploadException(format(""Processing of %s request failed. "", MULTIPART_FORM_DATA, e.getMessage()), e);
}
if (fileitemVar13 instanceof FileItemHeadersSupport) {
final FileItemHeaders fileitemheadersVar15 = fileitemheadersLiteral16;
fileitemVar13.setHeaders(fileitemheadersVar15);
}
}
booleanVar3 = true;
return list<fileitem>Var1;
} catch (FileUploadIOException e) {
throw (FileUploadException) e.getCause();
} catch (IOException e) {
throw new FileUploadException(e.getMessage(), e);
} finally {
if (!booleanVar3) {
for (FileItem fileitemVar13 : list<fileitem>Var1) {
try {
fileitemVar13.delete();
} catch (Throwable e) {
}
}
}
}
}"
11457,I18N,DM_CONVERT_CASE,FP,fileupload,158,"&&  subContentType.toLowerCase()
","private boolean findNextItem() throws IOException {
if (eof) {
return false;
}
if (currentItem != null) {
currentItem.close();
currentItem = null;
}
for (; ; ) {
boolean nextPart;
if (skipPreamble) {
nextPart = multi.skipPreamble();
} else {
nextPart = multi.readBoundary();
}
if (!nextPart) {
if (currentFieldName == null) {
eof = true;
return false;
}
multi.setBoundary(boundary);
currentFieldName = null;
continue;
}
FileItemHeaders headers = getParsedHeaders(multi.readHeaders());
if (currentFieldName == null) {
String fieldName = getFieldName(headers);
if (fieldName != null) {
String subContentType = headers.getHeader(CONTENT_TYPE);
if (subContentType != null && subContentType.toLowerCase().startsWith(MULTIPART_MIXED)) {
currentFieldName = fieldName;
byte[] subBoundary = getBoundary(subContentType);
multi.setBoundary(subBoundary);
skipPreamble = true;
continue;
}
String fileName = getFileName(headers);
currentItem = new FileItemStreamImpl(fileName, fieldName, headers.getHeader(CONTENT_TYPE), fileName == null, getContentLength(headers));
currentItem.setHeaders(headers);
notifier.noteItem();
itemValid = true;
return true;
}
} else {
String fileName = getFileName(headers);
if (fileName != null) {
currentItem = new FileItemStreamImpl(fileName, currentFieldName, headers.getHeader(CONTENT_TYPE), false, getContentLength(headers));
currentItem.setHeaders(headers);
notifier.noteItem();
itemValid = true;
return true;
}
}
multi.discardBodyData();
}
}","private boolean findNextItem() throws IOException {
if (eof) {
return false;
}
if (currentItem != null) {
currentItem.close();
currentItem = null;
}
for (; ; ) {
boolean booleanVar1;
if (skipPreamble) {
booleanVar1 = multi.skipPreamble();
} else {
booleanVar1 = multi.readBoundary();
}
if (!booleanVar1) {
if (currentFieldName == null) {
eof = true;
return false;
}
multi.setBoundary(boundary);
currentFieldName = null;
continue;
}
FileItemHeaders fileitemheadersVar2 = fileitemheadersLiteral3;
if (currentFieldName == null) {
String stringVar4 = stringLiteral5;
if (stringVar4 != null) {
String stringVar6 = stringLiteral7;
if (stringVar6 != null && stringVar6.toLowerCase().startsWith(MULTIPART_MIXED)) {
currentFieldName = stringVar4;
byte[] byteArrayVar8 = byteArrayLiteral9;
multi.setBoundary(byteArrayVar8);
skipPreamble = true;
continue;
}
String stringVar10 = stringLiteral11;
currentItem = new FileItemStreamImpl(stringVar10, stringVar4, fileitemheadersVar2.getHeader(CONTENT_TYPE), stringVar10 == null, getContentLength(fileitemheadersVar2));
currentItem.setHeaders(fileitemheadersVar2);
notifier.noteItem();
itemValid = true;
return true;
}
} else {
String stringVar10 = stringLiteral11;
if (stringVar10 != null) {
currentItem = new FileItemStreamImpl(stringVar10, currentFieldName, fileitemheadersVar2.getHeader(CONTENT_TYPE), false, getContentLength(fileitemheadersVar2));
currentItem.setHeaders(fileitemheadersVar2);
notifier.noteItem();
itemValid = true;
return true;
}
}
multi.discardBodyData();
}
}"
11469,I18N,DM_DEFAULT_ENCODING,FP,fileupload,170,"headers = baos.toString();
","public String readHeaders() throws MalformedStreamException {
int i = 0;
byte b;
ByteArrayOutputStream baos = new ByteArrayOutputStream();
int size = 0;
while (i < HEADER_SEPARATOR.length) {
try {
b = readByte();
} catch (IOException e) {
throw new MalformedStreamException(""Stream ended unexpectedly"");
}
if (++size > HEADER_PART_SIZE_MAX) {
throw new MalformedStreamException(format(""Header section has more than %s bytes (maybe it is not properly terminated)"", HEADER_PART_SIZE_MAX));
}
if (b == HEADER_SEPARATOR[i]) {
i++;
} else {
i = 0;
}
baos.write(b);
}
String headers = null;
if (headerEncoding != null) {
try {
headers = baos.toString(headerEncoding);
} catch (UnsupportedEncodingException e) {
headers = baos.toString();
}
} else {
headers = baos.toString();
}
return headers;
}","public String readHeaders() throws MalformedStreamException {
int intVar1 = intLiteral2;
byte byteVar3;
ByteArrayOutputStream bytearrayoutputstreamVar4 = bytearrayoutputstreamLiteral5;
int intVar6 = intLiteral2;
while (intVar1 < HEADER_SEPARATOR.length) {
try {
byteVar3 = readByte();
} catch (IOException e) {
throw new MalformedStreamException(""Stream ended unexpectedly"");
}
if (++intVar6 > HEADER_PART_SIZE_MAX) {
throw new MalformedStreamException(format(""Header section has more than %s bytes (maybe it is not properly terminated)"", HEADER_PART_SIZE_MAX));
}
if (byteVar3 == HEADER_SEPARATOR[intVar1]) {
intVar1++;
} else {
intVar1 = 0;
}
bytearrayoutputstreamVar4.write(byteVar3);
}
String stringVar7 = stringLiteral8;
if (headerEncoding != null) {
try {
stringVar7 = bytearrayoutputstreamVar4.toString(headerEncoding);
} catch (UnsupportedEncodingException e) {
stringVar7 = bytearrayoutputstreamVar4.toString();
}
} else {
stringVar7 = bytearrayoutputstreamVar4.toString();
}
return stringVar7;
}"
11470,CORRECTNESS,NP_NULL_PARAM_DEREF_NONVIRTUAL,FP,fileupload,171,"this(null, null, null);
","@Deprecated
public MultipartStream() {
this(null, null, null);
}","@Deprecated
public MultipartStream() {
this(null, null, null);
}"
11483,I18N,DM_CONVERT_CASE,FP,fileupload,184,"String nameLower = name.toLowerCase();
","public String getHeader(String name) {
String nameLower = name.toLowerCase();
List<String> headerValueList = headerNameToValueListMap.get(nameLower);
if (null == headerValueList) {
return null;
}
return headerValueList.get(0);
}","public String getHeader(String name) {
String stringVar1 = stringLiteral2;
List<String> list<string>Var3 = list<string>Literal4;
if (null == list<string>Var3) {
return null;
}
return list<string>Var3.get(0);
}"
11551,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,fileupload,252,"return null;
","protected byte[] getBoundary(String contentType) {
ParameterParser parser = new ParameterParser();
parser.setLowerCaseNames(true);
Map params = parser.parse(contentType, ';');
String boundaryStr = (String) params.get(""boundary"");
if (boundaryStr == null) {
return null;
}
byte[] boundary;
try {
boundary = boundaryStr.getBytes(""ISO-8859-1"");
} catch (UnsupportedEncodingException e) {
boundary = boundaryStr.getBytes();
}
return boundary;
}","protected byte[] getBoundary(String contentType) {
ParameterParser parameterparserVar1 = parameterparserLiteral2;
parameterparserVar1.setLowerCaseNames(true);
Map mapVar3 = mapLiteral4;
String stringVar5 = stringLiteral6;
if (stringVar5 == null) {
return null;
}
byte[] byteArrayVar7;
try {
byteArrayVar7 = stringVar5.getBytes(""ISO-8859-1"");
} catch (UnsupportedEncodingException e) {
byteArrayVar7 = stringVar5.getBytes();
}
return byteArrayVar7;
}"
11569,I18N,DM_CONVERT_CASE,FP,fileupload,270,"paramName = paramName.toLowerCase();
","public Map parse(final char[] chars, int offset, int length, char separator) {
if (chars == null) {
return new HashMap();
}
HashMap params = new HashMap();
this.chars = chars;
this.pos = offset;
this.len = length;
String paramName = null;
String paramValue = null;
while (hasChar()) {
paramName = parseToken(new char[] { '=', separator });
paramValue = null;
if (hasChar() && (chars[pos] == '=')) {
pos++;
paramValue = parseQuotedToken(new char[] { separator });
}
if (hasChar() && (chars[pos] == separator)) {
pos++;
}
if ((paramName != null) && (paramName.length() > 0)) {
if (this.lowerCaseNames) {
paramName = paramName.toLowerCase();
}
params.put(paramName, paramValue);
}
}
return params;
}","public Map parse(final char[] chars, int offset, int length, char separator) {
if (chars == null) {
return new HashMap();
}
HashMap hashmapVar1 = hashmapLiteral2;
this.chars = chars;
this.pos = offset;
this.len = length;
String stringVar3 = stringLiteral4;
String stringVar5 = stringLiteral4;
while (hasChar()) {
stringVar3 = parseToken(new char[] { '=', separator });
stringVar5 = null;
if (hasChar() && (chars[pos] == '=')) {
pos++;
stringVar5 = parseQuotedToken(new char[] { separator });
}
if (hasChar() && (chars[pos] == separator)) {
pos++;
}
if ((stringVar3 != null) && (stringVar3.length() > 0)) {
if (this.lowerCaseNames) {
stringVar3 = stringVar3.toLowerCase();
}
hashmapVar1.put(stringVar3, stringVar5);
}
}
return hashmapVar1;
}"
11577,I18N,DM_CONVERT_CASE,FP,fileupload,278,"if (!""post"".equals(request.getMethod().toLowerCase())) {
","public static final boolean isMultipartContent(HttpServletRequest request) {
if (!""post"".equals(request.getMethod().toLowerCase())) {
return false;
}
String contentType = request.getContentType();
if (contentType == null) {
return false;
}
if (contentType.toLowerCase().startsWith(MULTIPART)) {
return true;
}
return false;
}","public static final boolean isMultipartContent(HttpServletRequest request) {
if (!""post"".equals(request.getMethod().toLowerCase())) {
return false;
}
String stringVar1 = stringLiteral2;
if (stringVar1 == null) {
return false;
}
if (stringVar1.toLowerCase().startsWith(MULTIPART)) {
return true;
}
return false;
}"
11586,I18N,DM_CONVERT_CASE,FP,fileupload,287,"if (contentType.toLowerCase().startsWith(MULTIPART)) {
","public static final boolean isMultipartContent(RequestContext ctx) {
String contentType = ctx.getContentType();
if (contentType == null) {
return false;
}
if (contentType.toLowerCase().startsWith(MULTIPART)) {
return true;
}
return false;
}","public static final boolean isMultipartContent(RequestContext ctx) {
String stringVar1 = stringLiteral2;
if (stringVar1 == null) {
return false;
}
if (stringVar1.toLowerCase().startsWith(MULTIPART)) {
return true;
}
return false;
}"
11589,I18N,DM_CONVERT_CASE,FP,fileupload,290,"return (String) headers.get(name.toLowerCase());
","protected final String getHeader(Map headers, String name) {
return (String) headers.get(name.toLowerCase());
}","protected final String getHeader(Map headers, String name) {
return (String) headers.get(name.toLowerCase());
}"
11595,CORRECTNESS,NP_NULL_PARAM_DEREF_NONVIRTUAL,FP,fileupload,296,"this(null, null, null);
","public MultipartStream() {
this(null, null, null);
}","public MultipartStream() {
this(null, null, null);
}"
11663,MALICIOUS_CODE,MS_PKGPROTECT,FP,fileupload,364,"protected static final byte[] BOUNDARY_PREFIX = { CR, LF, DASH, DASH };","protected static final byte[] BOUNDARY_PREFIX = { CR, LF, DASH, DASH };",protected static final byte[] byteArrayVar1 = byteArrayLiteral2;
11665,MALICIOUS_CODE,EI_EXPOSE_REP2,FP,fileupload,366,"this.chars = chars;
","public Map parse(final char[] chars, int offset, int length, char separator) {
if (chars == null) {
return new HashMap();
}
HashMap params = new HashMap();
this.chars = chars;
this.pos = offset;
this.len = length;
String paramName = null;
String paramValue = null;
while (hasChar()) {
paramName = parseToken(new char[] { '=', separator });
paramValue = null;
if (hasChar() && (chars[pos] == '=')) {
pos++;
paramValue = parseQuotedToken(new char[] { separator });
}
if (hasChar() && (chars[pos] == separator)) {
pos++;
}
if ((paramName != null) && (paramName.length() > 0)) {
if (this.lowerCaseNames) {
paramName = paramName.toLowerCase();
}
params.put(paramName, paramValue);
}
}
return params;
}","public Map parse(final char[] chars, int offset, int length, char separator) {
if (chars == null) {
return new HashMap();
}
HashMap hashmapVar1 = hashmapLiteral2;
this.chars = chars;
this.pos = offset;
this.len = length;
String stringVar3 = stringLiteral4;
String stringVar5 = stringLiteral4;
while (hasChar()) {
stringVar3 = parseToken(new char[] { '=', separator });
stringVar5 = null;
if (hasChar() && (chars[pos] == '=')) {
pos++;
stringVar5 = parseQuotedToken(new char[] { separator });
}
if (hasChar() && (chars[pos] == separator)) {
pos++;
}
if ((stringVar3 != null) && (stringVar3.length() > 0)) {
if (this.lowerCaseNames) {
stringVar3 = stringVar3.toLowerCase();
}
hashmapVar1.put(stringVar3, stringVar5);
}
}
return hashmapVar1;
}"
11670,BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,fileupload,371,"outputFile.delete();
","public void delete() {
cachedContent = null;
File outputFile = getStoreLocation();
if (outputFile != null && outputFile.exists()) {
outputFile.delete();
}
}","public void delete() {
cachedContent = null;
File fileVar1 = fileLiteral2;
if (fileVar1 != null && fileVar1.exists()) {
fileVar1.delete();
}
}"
11682,PERFORMANCE,SBSC_USE_STRINGBUFFER_CONCATENATION,FP,fileupload,383,"header += "" "" + headerPart.substring(nonWs, end);
","protected FileItemHeaders getParsedHeaders(String headerPart) {
final int len = headerPart.length();
FileItemHeadersImpl headers = newFileItemHeaders();
int start = 0;
for (; ; ) {
int end = parseEndOfLine(headerPart, start);
if (start == end) {
break;
}
String header = headerPart.substring(start, end);
start = end + 2;
while (start < len) {
int nonWs = start;
while (nonWs < len) {
char c = headerPart.charAt(nonWs);
if (c != ' ' && c != '\t') {
break;
}
++nonWs;
}
if (nonWs == start) {
break;
}
end = parseEndOfLine(headerPart, nonWs);
header += "" "" + headerPart.substring(nonWs, end);
start = end + 2;
}
parseHeaderLine(headers, header);
}
return headers;
}","protected FileItemHeaders getParsedHeaders(String headerPart) {
final int intVar1 = intLiteral2;
FileItemHeadersImpl fileitemheadersimplVar3 = fileitemheadersimplLiteral4;
int intVar5 = intLiteral6;
for (; ; ) {
int intVar7 = intLiteral8;
if (intVar5 == intVar7) {
break;
}
String stringVar9 = stringLiteral10;
intVar5 = intVar7 + 2;
while (intVar5 < intVar1) {
int intVar11 = intLiteral12;
while (intVar11 < intVar1) {
char charVar13 = charLiteral14;
if (charVar13 != ' ' && charVar13 != '\t') {
break;
}
++intVar11;
}
if (intVar11 == intVar5) {
break;
}
intVar7 = parseEndOfLine(headerPart, intVar11);
stringVar9 += "" "" + headerPart.substring(intVar11, intVar7);
intVar5 = intVar7 + 2;
}
parseHeaderLine(fileitemheadersimplVar3, stringVar9);
}
return fileitemheadersimplVar3;
}"
11690,PERFORMANCE,SBSC_USE_STRINGBUFFER_CONCATENATION,FP,fileupload,391,"headerValue += "","" + iter2.next();
","protected Map parseHeaders(String headerPart) {
FileItemHeaders headers = getParsedHeaders(headerPart);
Map result = new HashMap();
for (Iterator iter = headers.getHeaderNames(); iter.hasNext(); ) {
String headerName = (String) iter.next();
Iterator iter2 = headers.getHeaders(headerName);
String headerValue = (String) iter2.next();
while (iter2.hasNext()) {
headerValue += "","" + iter2.next();
}
result.put(headerName, headerValue);
}
return result;
}","protected Map parseHeaders(String headerPart) {
FileItemHeaders fileitemheadersVar1 = fileitemheadersLiteral2;
Map mapVar3 = mapLiteral4;
for (Iterator iteratorVar13 = iteratorLiteral14; iteratorVar5.hasNext(); ) {
String stringVar7 = stringLiteral8;
Iterator iteratorVar9 = iteratorLiteral10;
String stringVar11 = stringLiteral12;
while (iteratorVar9.hasNext()) {
stringVar11 += "","" + iteratorVar9.next();
}
mapVar3.put(stringVar7, stringVar11);
}
return mapVar3;
}"
11697,MALICIOUS_CODE,MS_PKGPROTECT,FP,fileupload,398,"protected static final byte[] FIELD_SEPARATOR = { CR, LF };","protected static final byte[] FIELD_SEPARATOR = { CR, LF };",protected static final byte[] byteArrayVar1 = byteArrayLiteral2;
11698,MALICIOUS_CODE,EI_EXPOSE_REP2,FP,fileupload,399,"this.chars = chars;
","public Map parse(final char[] chars, int offset, int length, char separator) {
if (chars == null) {
return new HashMap();
}
HashMap params = new HashMap();
this.chars = chars;
this.pos = offset;
this.len = length;
String paramName = null;
String paramValue = null;
while (hasChar()) {
paramName = parseToken(new char[] { '=', separator });
paramValue = null;
if (hasChar() && (chars[pos] == '=')) {
pos++;
paramValue = parseQuotedToken(new char[] { separator });
}
if (hasChar() && (chars[pos] == separator)) {
pos++;
}
if ((paramName != null) && (paramName.length() > 0)) {
if (this.lowerCaseNames) {
paramName = paramName.toLowerCase();
}
params.put(paramName, paramValue);
}
}
return params;
}","public Map parse(final char[] chars, int offset, int length, char separator) {
if (chars == null) {
return new HashMap();
}
HashMap hashmapVar1 = hashmapLiteral2;
this.chars = chars;
this.pos = offset;
this.len = length;
String stringVar3 = stringLiteral4;
String stringVar5 = stringLiteral4;
while (hasChar()) {
stringVar3 = parseToken(new char[] { '=', separator });
stringVar5 = null;
if (hasChar() && (chars[pos] == '=')) {
pos++;
stringVar5 = parseQuotedToken(new char[] { separator });
}
if (hasChar() && (chars[pos] == separator)) {
pos++;
}
if ((stringVar3 != null) && (stringVar3.length() > 0)) {
if (this.lowerCaseNames) {
stringVar3 = stringVar3.toLowerCase();
}
hashmapVar1.put(stringVar3, stringVar5);
}
}
return hashmapVar1;
}"
11707,I18N,DM_CONVERT_CASE,FP,fileupload,408,"String nameLower = name.toLowerCase();
","public synchronized void addHeader(String name, String value) {
String nameLower = name.toLowerCase();
List headerValueList = (List) headerNameToValueListMap.get(nameLower);
if (null == headerValueList) {
headerValueList = new ArrayList();
headerNameToValueListMap.put(nameLower, headerValueList);
headerNameList.add(nameLower);
}
headerValueList.add(value);
}","public synchronized void addHeader(String name, String value) {
String stringVar1 = stringLiteral2;
List listVar3 = listLiteral4;
if (null == listVar3) {
listVar3 = new ArrayList();
headerNameToValueListMap.put(stringVar1, listVar3);
headerNameList.add(stringVar1);
}
listVar3.add(value);
}"
11710,I18N,DM_DEFAULT_ENCODING,FP,fileupload,411,"return baos.toString();
","public static String asString(InputStream pStream) throws IOException {
ByteArrayOutputStream baos = new ByteArrayOutputStream();
copy(pStream, baos, true);
return baos.toString();
}","public static String asString(InputStream pStream) throws IOException {
ByteArrayOutputStream bytearrayoutputstreamVar1 = bytearrayoutputstreamLiteral2;
copy(pStream, bytearrayoutputstreamVar1, true);
return bytearrayoutputstreamVar1.toString();
}"
11719,I18N,DM_CONVERT_CASE,FP,fileupload,420,"String cdl = cd.toLowerCase();
","protected String getFileName(Map headers) {
String fileName = null;
String cd = getHeader(headers, CONTENT_DISPOSITION);
if (cd != null) {
String cdl = cd.toLowerCase();
if (cdl.startsWith(FORM_DATA) || cdl.startsWith(ATTACHMENT)) {
ParameterParser parser = new ParameterParser();
parser.setLowerCaseNames(true);
Map params = parser.parse(cd, ';');
if (params.containsKey(""filename"")) {
fileName = (String) params.get(""filename"");
if (fileName != null) {
fileName = fileName.trim();
} else {
fileName = """";
}
}
}
}
return fileName;
}","protected String getFileName(Map headers) {
String stringVar1 = stringLiteral2;
String stringVar3 = stringLiteral4;
if (stringVar3 != null) {
String stringVar5 = stringLiteral6;
if (stringVar5.startsWith(FORM_DATA) || stringVar5.startsWith(ATTACHMENT)) {
ParameterParser parameterparserVar7 = parameterparserLiteral8;
parameterparserVar7.setLowerCaseNames(true);
Map mapVar9 = mapLiteral10;
if (mapVar9.containsKey(""filename"")) {
stringVar1 = (String) mapVar9.get(""filename"");
if (stringVar1 != null) {
stringVar1 = stringVar1.trim();
} else {
stringVar1 = """";
}
}
}
}
return stringVar1;
}"
11723,DODGY_CODE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,FP,fileupload,424,"throw (FileUploadException) e.getCause();
","public List parseRequest(RequestContext ctx) throws FileUploadException {
try {
FileItemIterator iter = getItemIterator(ctx);
List items = new ArrayList();
FileItemFactory fac = getFileItemFactory();
if (fac == null) {
throw new NullPointerException(""No FileItemFactory has been set."");
}
while (iter.hasNext()) {
FileItemStream item = iter.next();
FileItem fileItem = fac.createItem(item.getFieldName(), item.getContentType(), item.isFormField(), item.getName());
try {
Streams.copy(item.openStream(), fileItem.getOutputStream(), true);
} catch (FileUploadIOException e) {
throw (FileUploadException) e.getCause();
} catch (IOException e) {
throw new IOFileUploadException(""Processing of "" + MULTIPART_FORM_DATA + "" request failed. "" + e.getMessage(), e);
}
items.add(fileItem);
}
return items;
} catch (FileUploadIOException e) {
throw (FileUploadException) e.getCause();
} catch (IOException e) {
throw new FileUploadException(e.getMessage(), e);
}
}","public List parseRequest(RequestContext ctx) throws FileUploadException {
try {
FileItemIterator fileitemiteratorVar1 = fileitemiteratorLiteral2;
List listVar3 = listLiteral4;
FileItemFactory fileitemfactoryVar5 = fileitemfactoryLiteral6;
if (fileitemfactoryVar5 == null) {
throw new NullPointerException(""No FileItemFactory has been set."");
}
while (fileitemiteratorVar1.hasNext()) {
FileItemStream fileitemstreamVar7 = fileitemstreamLiteral8;
FileItem fileitemVar9 = fileitemLiteral10;
try {
Streams.copy(fileitemstreamVar7.openStream(), fileitemVar9.getOutputStream(), true);
} catch (FileUploadIOException e) {
throw (FileUploadException) e.getCause();
} catch (IOException e) {
throw new IOFileUploadException(""Processing of "" + MULTIPART_FORM_DATA + "" request failed. "" + e.getMessage(), e);
}
listVar3.add(fileitemVar9);
}
return listVar3;
} catch (FileUploadIOException e) {
throw (FileUploadException) e.getCause();
} catch (IOException e) {
throw new FileUploadException(e.getMessage(), e);
}
}"
11730,MALICIOUS_CODE,MS_PKGPROTECT,FP,fileupload,431,"protected static final byte[] BOUNDARY_PREFIX = { CR, LF, DASH, DASH };","protected static final byte[] BOUNDARY_PREFIX = { CR, LF, DASH, DASH };",protected static final byte[] byteArrayVar1 = byteArrayLiteral2;
11731,MALICIOUS_CODE,MS_PKGPROTECT,FP,fileupload,432,"protected static final byte[] STREAM_TERMINATOR = { DASH, DASH };","protected static final byte[] STREAM_TERMINATOR = { DASH, DASH };",protected static final byte[] byteArrayVar1 = byteArrayLiteral2;
11737,MALICIOUS_CODE,EI_EXPOSE_REP,FP,fileupload,438,"return cachedContent;
","public byte[] get() {
if (isInMemory()) {
if (cachedContent == null) {
cachedContent = dfos.getData();
}
return cachedContent;
}
byte[] fileData = new byte[(int) getSize()];
FileInputStream fis = null;
try {
fis = new FileInputStream(dfos.getFile());
fis.read(fileData);
} catch (IOException e) {
fileData = null;
} finally {
if (fis != null) {
try {
fis.close();
} catch (IOException e) {
}
}
}
return fileData;
}","public byte[] get() {
if (isInMemory()) {
if (cachedContent == null) {
cachedContent = dfos.getData();
}
return cachedContent;
}
byte[] byteArrayVar1 = byteArrayLiteral2;
FileInputStream fileinputstreamVar3 = fileinputstreamLiteral4;
try {
fileinputstreamVar3 = new FileInputStream(dfos.getFile());
fileinputstreamVar3.read(byteArrayVar1);
} catch (IOException e) {
byteArrayVar1 = null;
} finally {
if (fileinputstreamVar3 != null) {
try {
fileinputstreamVar3.close();
} catch (IOException e) {
}
}
}
return byteArrayVar1;
}"
11752,I18N,DM_CONVERT_CASE,FP,fileupload,453,"if (contentType.toLowerCase().startsWith(MULTIPART)) {
","public static final boolean isMultipartContent(RequestContext ctx) {
String contentType = ctx.getContentType();
if (contentType == null) {
return false;
}
if (contentType.toLowerCase().startsWith(MULTIPART)) {
return true;
}
return false;
}","public static final boolean isMultipartContent(RequestContext ctx) {
String stringVar1 = stringLiteral2;
if (stringVar1 == null) {
return false;
}
if (stringVar1.toLowerCase().startsWith(MULTIPART)) {
return true;
}
return false;
}"
11753,DODGY_CODE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,FP,fileupload,454,"throw (FileUploadException) e.getCause();
","public List parseRequest(RequestContext ctx) throws FileUploadException {
try {
FileItemIterator iter = getItemIterator(ctx);
List items = new ArrayList();
FileItemFactory fac = getFileItemFactory();
if (fac == null) {
throw new NullPointerException(""No FileItemFactory has been set."");
}
while (iter.hasNext()) {
FileItemStream item = iter.next();
FileItem fileItem = fac.createItem(item.getFieldName(), item.getContentType(), item.isFormField(), item.getName());
try {
Streams.copy(item.openStream(), fileItem.getOutputStream(), true);
} catch (FileUploadIOException e) {
throw (FileUploadException) e.getCause();
} catch (IOException e) {
throw new IOFileUploadException(""Processing of "" + MULTIPART_FORM_DATA + "" request failed. "" + e.getMessage(), e);
}
if (fileItem instanceof FileItemHeadersSupport) {
final FileItemHeaders fih = item.getHeaders();
((FileItemHeadersSupport) fileItem).setHeaders(fih);
}
items.add(fileItem);
}
return items;
} catch (FileUploadIOException e) {
throw (FileUploadException) e.getCause();
} catch (IOException e) {
throw new FileUploadException(e.getMessage(), e);
}
}","public List parseRequest(RequestContext ctx) throws FileUploadException {
try {
FileItemIterator fileitemiteratorVar1 = fileitemiteratorLiteral2;
List listVar3 = listLiteral4;
FileItemFactory fileitemfactoryVar5 = fileitemfactoryLiteral6;
if (fileitemfactoryVar5 == null) {
throw new NullPointerException(""No FileItemFactory has been set."");
}
while (fileitemiteratorVar1.hasNext()) {
FileItemStream fileitemstreamVar7 = fileitemstreamLiteral8;
FileItem fileitemVar9 = fileitemLiteral10;
try {
Streams.copy(fileitemstreamVar7.openStream(), fileitemVar9.getOutputStream(), true);
} catch (FileUploadIOException e) {
throw (FileUploadException) e.getCause();
} catch (IOException e) {
throw new IOFileUploadException(""Processing of "" + MULTIPART_FORM_DATA + "" request failed. "" + e.getMessage(), e);
}
if (fileitemVar9 instanceof FileItemHeadersSupport) {
final FileItemHeaders fileitemheadersVar11 = fileitemheadersLiteral12;
((FileItemHeadersSupport) fileitemVar9).setHeaders(fileitemheadersVar11);
}
listVar3.add(fileitemVar9);
}
return listVar3;
} catch (FileUploadIOException e) {
throw (FileUploadException) e.getCause();
} catch (IOException e) {
throw new FileUploadException(e.getMessage(), e);
}
}"
11761,MALICIOUS_CODE,MS_PKGPROTECT,FP,fileupload,462,"protected static final byte[] FIELD_SEPARATOR = { CR, LF };","protected static final byte[] FIELD_SEPARATOR = { CR, LF };",protected static final byte[] byteArrayVar1 = byteArrayLiteral2;
11762,MALICIOUS_CODE,MS_PKGPROTECT,FP,fileupload,463,"protected static final byte[] BOUNDARY_PREFIX = { CR, LF, DASH, DASH };","protected static final byte[] BOUNDARY_PREFIX = { CR, LF, DASH, DASH };",protected static final byte[] byteArrayVar1 = byteArrayLiteral2;
11769,BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,fileupload,470,"outputFile.delete();
","protected void finalize() {
File outputFile = dfos.getFile();
if (outputFile != null && outputFile.exists()) {
outputFile.delete();
}
}","protected void finalize() {
File fileVar1 = fileLiteral2;
if (fileVar1 != null && fileVar1.exists()) {
fileVar1.delete();
}
}"
11776,I18N,DM_CONVERT_CASE,FP,fileupload,477,"String nameLower = name.toLowerCase();
","public Iterator getHeaders(String name) {
String nameLower = name.toLowerCase();
List headerValueList = (List) headerNameToValueListMap.get(nameLower);
if (null == headerValueList) {
return Collections.EMPTY_LIST.iterator();
}
return headerValueList.iterator();
}","public Iterator getHeaders(String name) {
String stringVar1 = stringLiteral2;
List listVar3 = listLiteral4;
if (null == listVar3) {
return Collections.EMPTY_LIST.iterator();
}
return listVar3.iterator();
}"
11800,I18N,DM_CONVERT_CASE,FP,fileupload,501,"paramName = paramName.toLowerCase();
","public Map parse(final char[] chars, int offset, int length, char separator) {
if (chars == null) {
return new HashMap();
}
HashMap params = new HashMap();
this.chars = chars;
this.pos = offset;
this.len = length;
String paramName = null;
String paramValue = null;
while (hasChar()) {
paramName = parseToken(new char[] { '=', separator });
paramValue = null;
if (hasChar() && (chars[pos] == '=')) {
pos++;
paramValue = parseQuotedToken(new char[] { separator });
}
if (hasChar() && (chars[pos] == separator)) {
pos++;
}
if ((paramName != null) && (paramName.length() > 0)) {
if (this.lowerCaseNames) {
paramName = paramName.toLowerCase();
}
params.put(paramName, paramValue);
}
}
return params;
}","public Map parse(final char[] chars, int offset, int length, char separator) {
if (chars == null) {
return new HashMap();
}
HashMap hashmapVar1 = hashmapLiteral2;
this.chars = chars;
this.pos = offset;
this.len = length;
String stringVar3 = stringLiteral4;
String stringVar5 = stringLiteral4;
while (hasChar()) {
stringVar3 = parseToken(new char[] { '=', separator });
stringVar5 = null;
if (hasChar() && (chars[pos] == '=')) {
pos++;
stringVar5 = parseQuotedToken(new char[] { separator });
}
if (hasChar() && (chars[pos] == separator)) {
pos++;
}
if ((stringVar3 != null) && (stringVar3.length() > 0)) {
if (this.lowerCaseNames) {
stringVar3 = stringVar3.toLowerCase();
}
hashmapVar1.put(stringVar3, stringVar5);
}
}
return hashmapVar1;
}"
11810,I18N,DM_CONVERT_CASE,FP,fileupload,511,"}
","public synchronized void addHeader(String name, String value) {
String nameLower = name.toLowerCase();
List headerValueList = (List) headerNameToValueListMap.get(nameLower);
if (null == headerValueList) {
headerValueList = new ArrayList();
headerNameToValueListMap.put(nameLower, headerValueList);
headerNameList.add(nameLower);
}
headerValueList.add(value);
}","public synchronized void addHeader(String name, String value) {
String stringVar1 = stringLiteral2;
List listVar3 = listLiteral4;
if (null == listVar3) {
listVar3 = new ArrayList();
headerNameToValueListMap.put(stringVar1, listVar3);
headerNameList.add(stringVar1);
}
listVar3.add(value);
}"
11831,I18N,DM_DEFAULT_ENCODING,FP,fileupload,532,"headers = baos.toString();
","public String readHeaders() throws MalformedStreamException {
int i = 0;
byte b;
ByteArrayOutputStream baos = new ByteArrayOutputStream();
int size = 0;
while (i < HEADER_SEPARATOR.length) {
try {
b = readByte();
} catch (IOException e) {
throw new MalformedStreamException(""Stream ended unexpectedly"");
}
if (++size > HEADER_PART_SIZE_MAX) {
throw new MalformedStreamException(""Header section has more than "" + HEADER_PART_SIZE_MAX + "" bytes (maybe it is not properly terminated)"");
}
if (b == HEADER_SEPARATOR[i]) {
i++;
} else {
i = 0;
}
baos.write(b);
}
String headers = null;
if (headerEncoding != null) {
try {
headers = baos.toString(headerEncoding);
} catch (UnsupportedEncodingException e) {
headers = baos.toString();
}
} else {
headers = baos.toString();
}
return headers;
}","public String readHeaders() throws MalformedStreamException {
int intVar1 = intLiteral2;
byte byteVar3;
ByteArrayOutputStream bytearrayoutputstreamVar4 = bytearrayoutputstreamLiteral5;
int intVar6 = intLiteral2;
while (intVar1 < HEADER_SEPARATOR.length) {
try {
byteVar3 = readByte();
} catch (IOException e) {
throw new MalformedStreamException(""Stream ended unexpectedly"");
}
if (++intVar6 > HEADER_PART_SIZE_MAX) {
throw new MalformedStreamException(""Header section has more than "" + HEADER_PART_SIZE_MAX + "" bytes (maybe it is not properly terminated)"");
}
if (byteVar3 == HEADER_SEPARATOR[intVar1]) {
intVar1++;
} else {
intVar1 = 0;
}
bytearrayoutputstreamVar4.write(byteVar3);
}
String stringVar7 = stringLiteral8;
if (headerEncoding != null) {
try {
stringVar7 = bytearrayoutputstreamVar4.toString(headerEncoding);
} catch (UnsupportedEncodingException e) {
stringVar7 = bytearrayoutputstreamVar4.toString();
}
} else {
stringVar7 = bytearrayoutputstreamVar4.toString();
}
return stringVar7;
}"
11868,I18N,DM_CONVERT_CASE,FP,fileupload,569,"paramName = paramName.toLowerCase();
","public Map parse(final char[] chars, int offset, int length, char separator) {
if (chars == null) {
return new HashMap();
}
HashMap params = new HashMap();
this.chars = chars;
this.pos = offset;
this.len = length;
String paramName = null;
String paramValue = null;
while (hasChar()) {
paramName = parseToken(new char[] { '=', separator });
paramValue = null;
if (hasChar() && (chars[pos] == '=')) {
pos++;
paramValue = parseQuotedToken(new char[] { separator });
}
if (hasChar() && (chars[pos] == separator)) {
pos++;
}
if ((paramName != null) && (paramName.length() > 0)) {
if (this.lowerCaseNames) {
paramName = paramName.toLowerCase();
}
params.put(paramName, paramValue);
}
}
return params;
}","public Map parse(final char[] chars, int offset, int length, char separator) {
if (chars == null) {
return new HashMap();
}
HashMap hashmapVar1 = hashmapLiteral2;
this.chars = chars;
this.pos = offset;
this.len = length;
String stringVar3 = stringLiteral4;
String stringVar5 = stringLiteral4;
while (hasChar()) {
stringVar3 = parseToken(new char[] { '=', separator });
stringVar5 = null;
if (hasChar() && (chars[pos] == '=')) {
pos++;
stringVar5 = parseQuotedToken(new char[] { separator });
}
if (hasChar() && (chars[pos] == separator)) {
pos++;
}
if ((stringVar3 != null) && (stringVar3.length() > 0)) {
if (this.lowerCaseNames) {
stringVar3 = stringVar3.toLowerCase();
}
hashmapVar1.put(stringVar3, stringVar5);
}
}
return hashmapVar1;
}"
11876,I18N,DM_CONVERT_CASE,FP,fileupload,577,"if (!""post"".equals(request.getMethod().toLowerCase())) {
","public static final boolean isMultipartContent(HttpServletRequest request) {
if (!""post"".equals(request.getMethod().toLowerCase())) {
return false;
}
String contentType = request.getContentType();
if (contentType == null) {
return false;
}
if (contentType.toLowerCase().startsWith(MULTIPART)) {
return true;
}
return false;
}","public static final boolean isMultipartContent(HttpServletRequest request) {
if (!""post"".equals(request.getMethod().toLowerCase())) {
return false;
}
String stringVar1 = stringLiteral2;
if (stringVar1 == null) {
return false;
}
if (stringVar1.toLowerCase().startsWith(MULTIPART)) {
return true;
}
return false;
}"
11880,I18N,DM_DEFAULT_ENCODING,FP,fileupload,581,"return baos.toString();
","public static String asString(InputStream pStream) throws IOException {
ByteArrayOutputStream baos = new ByteArrayOutputStream();
copy(pStream, baos, true);
return baos.toString();
}","public static String asString(InputStream pStream) throws IOException {
ByteArrayOutputStream bytearrayoutputstreamVar1 = bytearrayoutputstreamLiteral2;
copy(pStream, bytearrayoutputstreamVar1, true);
return bytearrayoutputstreamVar1.toString();
}"
11891,BAD_PRACTICE,SR_NOT_CHECKED,FP,fileupload,592,"skip(av);
","public void close(boolean pCloseUnderlying) throws IOException {
if (closed) {
return;
}
if (pCloseUnderlying) {
closed = true;
input.close();
} else {
for (; ; ) {
int av = available();
if (av == 0) {
av = makeAvailable();
if (av == 0) {
break;
}
}
skip(av);
}
}
closed = true;
}","public void close(boolean pCloseUnderlying) throws IOException {
if (closed) {
return;
}
if (pCloseUnderlying) {
closed = true;
input.close();
} else {
for (; ; ) {
int intVar1 = intLiteral2;
if (intVar1 == 0) {
intVar1 = makeAvailable();
if (intVar1 == 0) {
break;
}
}
skip(intVar1);
}
}
closed = true;
}"
11963,MALICIOUS_CODE,MS_PKGPROTECT,FP,fileupload,664,"protected static final byte[] FIELD_SEPARATOR = { CR, LF };","protected static final byte[] FIELD_SEPARATOR = { CR, LF };",protected static final byte[] byteArrayVar1 = byteArrayLiteral2;
11985,MALICIOUS_CODE,MS_PKGPROTECT,FP,fileupload,686,"protected static final byte[] FIELD_SEPARATOR = { CR, LF };","protected static final byte[] FIELD_SEPARATOR = { CR, LF };",protected static final byte[] byteArrayVar1 = byteArrayLiteral2;
12007,I18N,DM_DEFAULT_ENCODING,FP,fileupload,708,"headers = baos.toString();
","public String readHeaders() throws FileUploadIOException, MalformedStreamException {
int i = 0;
byte b;
ByteArrayOutputStream baos = new ByteArrayOutputStream();
int size = 0;
while (i < HEADER_SEPARATOR.length) {
try {
b = readByte();
} catch (FileUploadIOException e) {
throw e;
} catch (IOException e) {
throw new MalformedStreamException(""Stream ended unexpectedly"");
}
if (++size > HEADER_PART_SIZE_MAX) {
throw new MalformedStreamException(format(""Header section has more than %s bytes (maybe it is not properly terminated)"", Integer.valueOf(HEADER_PART_SIZE_MAX)));
}
if (b == HEADER_SEPARATOR[i]) {
i++;
} else {
i = 0;
}
baos.write(b);
}
String headers = null;
if (headerEncoding != null) {
try {
headers = baos.toString(headerEncoding);
} catch (UnsupportedEncodingException e) {
headers = baos.toString();
}
} else {
headers = baos.toString();
}
return headers;
}","public String readHeaders() throws FileUploadIOException, MalformedStreamException {
int intVar1 = intLiteral2;
byte byteVar3;
ByteArrayOutputStream bytearrayoutputstreamVar4 = bytearrayoutputstreamLiteral5;
int intVar6 = intLiteral2;
while (intVar1 < HEADER_SEPARATOR.length) {
try {
byteVar3 = readByte();
} catch (FileUploadIOException e) {
throw e;
} catch (IOException e) {
throw new MalformedStreamException(""Stream ended unexpectedly"");
}
if (++intVar6 > HEADER_PART_SIZE_MAX) {
throw new MalformedStreamException(format(""Header section has more than %s bytes (maybe it is not properly terminated)"", Integer.valueOf(HEADER_PART_SIZE_MAX)));
}
if (byteVar3 == HEADER_SEPARATOR[intVar1]) {
intVar1++;
} else {
intVar1 = 0;
}
bytearrayoutputstreamVar4.write(byteVar3);
}
String stringVar7 = stringLiteral8;
if (headerEncoding != null) {
try {
stringVar7 = bytearrayoutputstreamVar4.toString(headerEncoding);
} catch (UnsupportedEncodingException e) {
stringVar7 = bytearrayoutputstreamVar4.toString();
}
} else {
stringVar7 = bytearrayoutputstreamVar4.toString();
}
return stringVar7;
}"
12029,BAD_PRACTICE,SR_NOT_CHECKED,FP,fileupload,730,"skip(av);
","public void close(boolean pCloseUnderlying) throws IOException {
if (closed) {
return;
}
if (pCloseUnderlying) {
closed = true;
input.close();
} else {
for (; ; ) {
int av = available();
if (av == 0) {
av = makeAvailable();
if (av == 0) {
break;
}
}
skip(av);
}
}
closed = true;
}","public void close(boolean pCloseUnderlying) throws IOException {
if (closed) {
return;
}
if (pCloseUnderlying) {
closed = true;
input.close();
} else {
for (; ; ) {
int intVar1 = intLiteral2;
if (intVar1 == 0) {
intVar1 = makeAvailable();
if (intVar1 == 0) {
break;
}
}
skip(intVar1);
}
}
closed = true;
}"
12039,I18N,DM_DEFAULT_ENCODING,FP,fileupload,740,"return baos.toString();
","public static String asString(InputStream inputStream) throws IOException {
ByteArrayOutputStream baos = new ByteArrayOutputStream();
copy(inputStream, baos, true);
return baos.toString();
}","public static String asString(InputStream inputStream) throws IOException {
ByteArrayOutputStream bytearrayoutputstreamVar1 = bytearrayoutputstreamLiteral2;
copy(inputStream, bytearrayoutputstreamVar1, true);
return bytearrayoutputstreamVar1.toString();
}"
12052,PERFORMANCE,WMI_WRONG_MAP_ITERATOR,FP,mavendp,12,"Dependency depMgtDependency = (Dependency) mismatch.get( resolvedArtifact );
","private boolean checkDependencyManagement() throws MojoExecutionException {
boolean foundError = false;
getLog().info(""Found Resolved Dependency / DependencyManagement mismatches:"");
List depMgtDependencies = null;
DependencyManagement depMgt = project.getDependencyManagement();
if (depMgt != null) {
depMgtDependencies = depMgt.getDependencies();
}
if (depMgtDependencies != null && !depMgtDependencies.isEmpty()) {
Map depMgtMap = new HashMap();
Map exclusions = new HashMap();
Iterator iter = depMgtDependencies.iterator();
while (iter.hasNext()) {
Dependency depMgtDependency = (Dependency) iter.next();
depMgtMap.put(depMgtDependency.getManagementKey(), depMgtDependency);
exclusions.putAll(addExclusions(depMgtDependency.getExclusions()));
}
Set allDependencyArtifacts = new HashSet(project.getArtifacts());
if (this.ignoreDirect) {
getLog().info(""\tIgnoring Direct Dependencies."");
Set directDependencies = project.getDependencyArtifacts();
allDependencyArtifacts.removeAll(directDependencies);
}
List exclusionErrors = getExclusionErrors(exclusions, allDependencyArtifacts);
Iterator exclusionIter = exclusionErrors.iterator();
while (exclusionIter.hasNext()) {
Artifact exclusion = (Artifact) exclusionIter.next();
getLog().info(StringUtils.stripEnd(getArtifactManagementKey(exclusion), "":"") + "" was excluded in DepMgt, but version "" + exclusion.getVersion() + "" has been found in the dependency tree."");
foundError = true;
}
Map mismatch = getMismatch(depMgtMap, allDependencyArtifacts);
Iterator mismatchIter = mismatch.keySet().iterator();
while (mismatchIter.hasNext()) {
Artifact resolvedArtifact = (Artifact) mismatchIter.next();
Dependency depMgtDependency = (Dependency) mismatch.get(resolvedArtifact);
logMismatch(resolvedArtifact, depMgtDependency);
}
if (!foundError) {
getLog().info(""   None"");
}
} else {
getLog().info(""   Nothing in DepMgt."");
}
return foundError;
}","private boolean checkDependencyManagement() throws MojoExecutionException {
boolean booleanVar1 = booleanLiteral2;
getLog().info(""Found Resolved Dependency / DependencyManagement mismatches:"");
List listVar3 = listLiteral4;
DependencyManagement dependencymanagementVar5 = dependencymanagementLiteral6;
if (dependencymanagementVar5 != null) {
listVar3 = dependencymanagementVar5.getDependencies();
}
if (listVar3 != null && !listVar3.isEmpty()) {
Map mapVar7 = mapLiteral8;
Map mapVar9 = mapLiteral8;
Iterator iteratorVar10 = iteratorLiteral11;
while (iteratorVar10.hasNext()) {
Dependency dependencyVar12 = dependencyLiteral13;
mapVar7.put(dependencyVar12.getManagementKey(), dependencyVar12);
mapVar9.putAll(addExclusions(dependencyVar12.getExclusions()));
}
Set setVar14 = setLiteral15;
if (this.ignoreDirect) {
getLog().info(""\tIgnoring Direct Dependencies."");
Set setVar16 = setLiteral17;
setVar14.removeAll(setVar16);
}
List listVar18 = listLiteral19;
Iterator iteratorVar20 = iteratorLiteral21;
while (iteratorVar20.hasNext()) {
Artifact artifactVar22 = artifactLiteral23;
getLog().info(StringUtils.stripEnd(getArtifactManagementKey(artifactVar22), "":"") + "" was excluded in DepMgt, but version "" + artifactVar22.getVersion() + "" has been found in the dependency tree."");
booleanVar1 = true;
}
Map mapVar24 = mapLiteral25;
Iterator iteratorVar26 = iteratorLiteral27;
while (iteratorVar26.hasNext()) {
Artifact artifactVar28 = artifactLiteral29;
Dependency dependencyVar12 = dependencyLiteral30;
logMismatch(artifactVar28, dependencyVar12);
}
if (!booleanVar1) {
getLog().info(""   None"");
}
} else {
getLog().info(""   Nothing in DepMgt."");
}
return booleanVar1;
}"
12063,CORRECTNESS,NP_UNWRITTEN_FIELD,FP,mavendp,23,"if ( ""pom"".equals( project.getPackaging() ) )
","public void executeReport(Locale locale) throws MavenReportException {
if (""pom"".equals(project.getPackaging())) {
getLog().info(""Skipping pom project"");
return;
}
if (outputDirectory == null || !outputDirectory.exists()) {
getLog().info(""Skipping project with no Target directory"");
return;
}
ProjectDependencyAnalysis analysis = null;
try {
analysis = analyzer.analyze(project);
} catch (ProjectDependencyAnalyzerException exception) {
throw new MavenReportException(""Cannot analyze dependencies"", exception);
}
Sink sink = getSink();
ResourceBundle bundle = getBundle(locale);
AnalyzeReportView analyzethis = new AnalyzeReportView();
analyzethis.generateReport(analysis, sink, bundle);
}","public void executeReport(Locale locale) throws MavenReportException {
if (""pom"".equals(project.getPackaging())) {
getLog().info(""Skipping pom project"");
return;
}
if (outputDirectory == null || !outputDirectory.exists()) {
getLog().info(""Skipping project with no Target directory"");
return;
}
ProjectDependencyAnalysis projectdependencyanalysisVar1 = projectdependencyanalysisLiteral2;
try {
projectdependencyanalysisVar1 = analyzer.analyze(project);
} catch (ProjectDependencyAnalyzerException exception) {
throw new MavenReportException(""Cannot analyze dependencies"", exception);
}
Sink sinkVar3 = sinkLiteral4;
ResourceBundle resourcebundleVar5 = resourcebundleLiteral6;
AnalyzeReportView analyzereportviewVar7 = analyzereportviewLiteral8;
analyzereportviewVar7.generateReport(projectdependencyanalysisVar1, sinkVar3, resourcebundleVar5);
}"
12072,BAD_PRACTICE,SE_COMPARATOR_SHOULD_BE_SERIALIZABLE,FP,mavendp,32,"public class BuildClasspathMojo
extends AbstractDependencyFilterMojo
implements Comparator
{
private boolean stripVersion = false;
private String prefix;
private File cpFile;
private File outputFile;
private boolean regenerateFile;
private String fileSeparator;
private String pathSeparator;
private String localRepoProperty;
boolean attach;
boolean outputFilterFile;
private MavenProjectHelper projectHelper;
boolean isFileSepSet = true;
boolean isPathSepSet = true;
public void execute()
throws MojoExecutionException
{
if (cpFile != null)
{
getLog().warn( ""The parameter cpFile is deprecated. Use outputFile instead."" );
this.outputFile = cpFile;
}
if ( StringUtils.isEmpty( fileSeparator ) )
{
isFileSepSet = false;
}
else
{
isFileSepSet = true;
}
if ( StringUtils.isEmpty( pathSeparator ) )
{
isPathSepSet = false;
}
else
{
isPathSepSet = true;
}
if ( attach && StringUtils.isEmpty( localRepoProperty ) )
{
localRepoProperty = ""${M2_REPO}"";
}
Set artifacts = getResolvedDependencies( true );
if ( artifacts == null || artifacts.isEmpty() )
{
getLog().info( ""No dependencies found."" );
}
List artList = new ArrayList( artifacts );
StringBuffer sb = new StringBuffer();
Iterator i = artList.iterator();
if ( i.hasNext() )
{
appendArtifactPath( (Artifact) i.next(), sb );
while ( i.hasNext() )
{
sb.append( isPathSepSet ? this.pathSeparator : File.pathSeparator );
appendArtifactPath( (Artifact) i.next(), sb );
}
}
String cpString = sb.toString();
if ( isFileSepSet )
{
String separator = File.separator;
if ( File.separator.equals( ""\\"" ) )
{
separator = ""\\\\"";
}
cpString = cpString.replaceAll( separator, fileSeparator );
}
if (outputFilterFile)
{
cpString = ""classpath=""+ cpString;
}
if ( outputFile == null )
{
getLog().info( ""Dependencies classpath:\n"" + cpString );
}
else
{
if ( regenerateFile || !isUpdToDate( cpString ) )
{
storeClasspathFile( cpString, outputFile );
}
else
{
this.getLog().info( ""Skipped writing classpath file '"" + outputFile + ""'.  No changes found."" );
}
}
if ( attach )
{
attachFile( cpString );
}
}
protected void attachFile( String cpString )
throws MojoExecutionException
{
File attachedFile = new File( project.getBuild().getDirectory(), ""classpath"" );
storeClasspathFile( cpString, attachedFile );
projectHelper.attachArtifact( project, attachedFile, ""classpath"" );
}
protected void appendArtifactPath( Artifact art, StringBuffer sb )
{
if ( prefix == null )
{
String file = art.getFile().getPath();
if ( StringUtils.isNotEmpty( localRepoProperty ) )
{
file = StringUtils.replace( file, getLocal().getBasedir(), localRepoProperty );
}
sb.append( file );
}
else
{
// TODO: add param for prepending groupId and version.
sb.append( prefix );
sb.append( File.separator );
sb.append( DependencyUtil.getFormattedFileName( art, this.stripVersion ) );
}
}
private boolean isUpdToDate( String cpString )
{
try
{
String oldCp = readClasspathFile();
return ( cpString == oldCp || ( cpString != null && cpString.equals( oldCp ) ) );
}
catch ( Exception ex )
{
this.getLog().warn( ""Error while reading old classpath file '"" + outputFile + ""' for up-to-date check: "" + ex );
return false;
}
}
private void storeClasspathFile( String cpString, File out )
throws MojoExecutionException
{
out.getParentFile().mkdirs();
try
{
Writer w = new BufferedWriter( new FileWriter( out ) );
try
{
w.write( cpString );
getLog().info( ""Wrote classpath file '"" + out + ""'."" );
}
catch ( IOException ex )
{
throw new MojoExecutionException( ""Error while writting to classpath file '"" + out + ""': "" +
ex.toString(), ex );
}
finally
{
w.close();
}
}
catch ( IOException ex )
{
throw new MojoExecutionException( ""Error while opening/closing classpath file '"" + out + ""': "" +
ex.toString(), ex );
}
}
protected String readClasspathFile()
throws IOException
{
if ( outputFile == null )
{
throw new IllegalArgumentException(
""The outputFile parameter cannot be null if the file is intended to be read."" );
}
if ( !outputFile.isFile() )
{
return null;
}
StringBuffer sb = new StringBuffer();
BufferedReader r = new BufferedReader( new FileReader( outputFile ) );
try
{
String l;
while ( ( l = r.readLine() ) != null )
{
sb.append( l );
}
return sb.toString();
}
finally
{
r.close();
}
}
public int compare( Object arg1, Object arg2 )
{
if ( arg1 instanceof Artifact && arg2 instanceof Artifact )
{
if ( arg1 == arg2 )
{
return 0;
}
else if ( arg1 == null )
{
return -1;
}
else if ( arg2 == null )
{
return +1;
}
Artifact art1 = (Artifact) arg1;
Artifact art2 = (Artifact) arg2;
String s1 = art1.getGroupId() + art1.getArtifactId() + art1.getVersion();
String s2 = art2.getGroupId() + art2.getArtifactId() + art2.getVersion();
return s1.compareTo( s2 );
}
else
{
return 0;
}
}
protected ArtifactsFilter getMarkedArtifactFilter()
{
return null;
}
public File getCpFile()
{
return this.outputFile;
}
public void setCpFile( File theCpFile )
{
this.outputFile = theCpFile;
}
public String getFileSeparator()
{
return this.fileSeparator;
}
public void setFileSeparator( String theFileSeparator )
{
this.fileSeparator = theFileSeparator;
}
public String getPathSeparator()
{
return this.pathSeparator;
}
public void setPathSeparator( String thePathSeparator )
{
this.pathSeparator = thePathSeparator;
}
public String getPrefix()
{
return this.prefix;
}
public void setPrefix( String thePrefix )
{
this.prefix = thePrefix;
}
public boolean isRegenerateFile()
{
return this.regenerateFile;
}
public void setRegenerateFile( boolean theRegenerateFile )
{
this.regenerateFile = theRegenerateFile;
}
public boolean isStripVersion()
{
return this.stripVersion;
}
public void setStripVersion( boolean theStripVersion )
{
this.stripVersion = theStripVersion;
}
public String getLocalRepoProperty()
{
return localRepoProperty;
}
public void setLocalRepoProperty( String localRepoProperty )
{
this.localRepoProperty = localRepoProperty;
}
public boolean isFileSepSet()
{
return isFileSepSet;
}
public void setFileSepSet( boolean isFileSepSet )
{
this.isFileSepSet = isFileSepSet;
}
public boolean isPathSepSet()
{
return isPathSepSet;
}
public void setPathSepSet( boolean isPathSepSet )
{
this.isPathSepSet = isPathSepSet;
}
","public int compare(Object arg1, Object arg2) {
if (arg1 instanceof Artifact && arg2 instanceof Artifact) {
if (arg1 == arg2) {
return 0;
} else if (arg1 == null) {
return -1;
} else if (arg2 == null) {
return +1;
}
Artifact art1 = (Artifact) arg1;
Artifact art2 = (Artifact) arg2;
String s1 = art1.getGroupId() + art1.getArtifactId() + art1.getVersion();
String s2 = art2.getGroupId() + art2.getArtifactId() + art2.getVersion();
return s1.compareTo(s2);
} else {
return 0;
}
}","public int compare(Object arg1, Object arg2) {
if (arg1 instanceof Artifact && arg2 instanceof Artifact) {
if (arg1 == arg2) {
return 0;
} else if (arg1 == null) {
return -1;
} else if (arg2 == null) {
return +1;
}
Artifact artifactVar1 = artifactLiteral2;
Artifact artifactVar3 = artifactLiteral4;
String stringVar5 = stringLiteral6;
String stringVar7 = stringLiteral8;
return stringVar5.compareTo(stringVar7);
} else {
return 0;
}
}"
12087,PERFORMANCE,SBSC_USE_STRINGBUFFER_CONCATENATION,FP,mavendp,47,"message += ""  "" + missingArtifact.getId() + ""\n"";
","private void refreshDependenciesForProject(MavenProject project, List exclusionPatterns) throws ArtifactResolutionException, MojoFailureException {
Map deps = createArtifactMap(project);
if (deps.isEmpty()) {
getLog().info(""Nothing to do for project: "" + project.getId());
return;
}
if (!exclusionPatterns.isEmpty()) {
for (Iterator it = exclusionPatterns.iterator(); it.hasNext(); ) {
String excludedKey = (String) it.next();
verbose(""Excluding: "" + excludedKey + "" from refresh operation for project: "" + project.getId());
deps.remove(excludedKey);
}
}
verbose(""Processing dependencies for project: "" + project.getId());
List missingArtifacts = new ArrayList();
for (Iterator it = deps.entrySet().iterator(); it.hasNext(); ) {
Map.Entry entry = (Map.Entry) it.next();
Artifact artifact = (Artifact) entry.getValue();
verbose(""Processing artifact: "" + artifact.getId());
File deleteTarget = findDeleteTarget(artifact);
verbose(""Deleting: "" + deleteTarget);
if (deleteTarget.isDirectory()) {
try {
FileUtils.deleteDirectory(deleteTarget);
} catch (IOException e) {
throw new MojoFailureException(this, ""Cannot delete dependency from the local repository: "" + artifact.getId(), ""Failed to delete: "" + deleteTarget);
}
} else {
deleteTarget.delete();
}
if (reResolve) {
verbose(""Re-resolving."");
artifact.setResolved(false);
try {
resolver.resolveAlways(artifact, project.getRemoteArtifactRepositories(), localRepository);
} catch (ArtifactResolutionException e) {
getLog().debug(e.getMessage());
missingArtifacts.add(artifact);
} catch (ArtifactNotFoundException e) {
getLog().debug(e.getMessage());
missingArtifacts.add(artifact);
}
}
}
if (missingArtifacts.size() > 0) {
String message = ""required artifacts missing:\n"";
for (Iterator i = missingArtifacts.iterator(); i.hasNext(); ) {
Artifact missingArtifact = (Artifact) i.next();
message += ""  "" + missingArtifact.getId() + ""\n"";
}
message += ""\nfor the artifact:"";
throw new ArtifactResolutionException(message, project.getArtifact(), project.getRemoteArtifactRepositories());
}
}","private void refreshDependenciesForProject(MavenProject project, List exclusionPatterns) throws ArtifactResolutionException, MojoFailureException {
Map mapVar1 = mapLiteral2;
if (mapVar1.isEmpty()) {
getLog().info(""Nothing to do for project: "" + project.getId());
return;
}
if (!exclusionPatterns.isEmpty()) {
for (Iterator iteratorVar22 = iteratorLiteral23; iteratorVar3.hasNext(); ) {
String stringVar5 = stringLiteral6;
verbose(""Excluding: "" + stringVar5 + "" from refresh operation for project: "" + project.getId());
mapVar1.remove(stringVar5);
}
}
verbose(""Processing dependencies for project: "" + project.getId());
List listVar7 = listLiteral8;
for (Iterator iteratorVar22 = iteratorLiteral24; iteratorVar3.hasNext(); ) {
Map.Entry map.entryVar10 = map.entryLiteral11;
Artifact artifactVar12 = artifactLiteral13;
verbose(""Processing artifact: "" + artifactVar12.getId());
File fileVar14 = fileLiteral15;
verbose(""Deleting: "" + fileVar14);
if (fileVar14.isDirectory()) {
try {
FileUtils.deleteDirectory(fileVar14);
} catch (IOException e) {
throw new MojoFailureException(this, ""Cannot delete dependency from the local repository: "" + artifactVar12.getId(), ""Failed to delete: "" + fileVar14);
}
} else {
fileVar14.delete();
}
if (reResolve) {
verbose(""Re-resolving."");
artifactVar12.setResolved(false);
try {
resolver.resolveAlways(artifactVar12, project.getRemoteArtifactRepositories(), localRepository);
} catch (ArtifactResolutionException e) {
getLog().debug(e.getMessage());
listVar7.add(artifactVar12);
} catch (ArtifactNotFoundException e) {
getLog().debug(e.getMessage());
listVar7.add(artifactVar12);
}
}
}
if (listVar7.size() > 0) {
String stringVar16 = stringLiteral17;
for (Iterator iteratorVar25 = iteratorLiteral26; iteratorVar18.hasNext(); ) {
Artifact artifactVar20 = artifactLiteral21;
stringVar16 += ""  "" + artifactVar20.getId() + ""\n"";
}
stringVar16 += ""\nfor the artifact:"";
throw new ArtifactResolutionException(stringVar16, project.getArtifact(), project.getRemoteArtifactRepositories());
}
}"
12089,CORRECTNESS,UWF_UNWRITTEN_FIELD,FP,mavendp,49,private ArtifactRepositoryFactory artifactRepositoryManager;,private ArtifactRepositoryFactory artifactRepositoryManager;,private ArtifactRepositoryFactory artifactrepositoryfactoryVar1;
12098,I18N,DM_DEFAULT_ENCODING,FP,mavendp,58,"writer = new FileWriter( file );
","public synchronized static void write(String string, File file, Log log) throws IOException {
file.getParentFile().mkdirs();
FileWriter writer = null;
try {
writer = new FileWriter(file);
writer.write(string);
} finally {
if (writer != null) {
try {
writer.close();
} catch (IOException exception) {
log.error(""Cannot close file"", exception);
}
}
}
}","public synchronized static void write(String string, File file, Log log) throws IOException {
file.getParentFile().mkdirs();
FileWriter filewriterVar1 = filewriterLiteral2;
try {
filewriterVar1 = new FileWriter(file);
filewriterVar1.write(string);
} finally {
if (filewriterVar1 != null) {
try {
filewriterVar1.close();
} catch (IOException exception) {
log.error(""Cannot close file"", exception);
}
}
}
}"
12103,BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,mavendp,63,"clearMarker.delete();
","public void setMarker() throws MojoExecutionException {
File marker = getMarkerFile();
File clearMarker = getMarkerFile(!this.resolved);
try {
marker.getParentFile().mkdirs();
} catch (NullPointerException e) {
}
try {
marker.createNewFile();
if (clearMarker.exists()) {
clearMarker.delete();
}
} catch (IOException e) {
throw new MojoExecutionException(""Unable to create Marker: "" + marker.getAbsolutePath(), e);
}
}","public void setMarker() throws MojoExecutionException {
File fileVar1 = fileLiteral2;
File fileVar3 = fileLiteral4;
try {
fileVar1.getParentFile().mkdirs();
} catch (NullPointerException e) {
}
try {
fileVar1.createNewFile();
if (fileVar3.exists()) {
fileVar3.delete();
}
} catch (IOException e) {
throw new MojoExecutionException(""Unable to create Marker: "" + fileVar1.getAbsolutePath(), e);
}
}"
12186,CORRECTNESS,UWF_UNWRITTEN_FIELD,FP,mavendp,146,private boolean excludeTransitive;,private boolean excludeTransitive;,private boolean booleanVar1;
12203,DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,mavendp,163,protected boolean outputAbsoluteArtifactFilename;,protected boolean outputAbsoluteArtifactFilename;,protected boolean booleanVar1;
12208,DODGY_CODE,NP_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD,FP,mavendp,168,"MavenProject pomProject = mavenProjectBuilder.buildFromRepository( pomArtifact, this.remoteRepos, this.local );
","protected Set resolveArtifactDependencies(Artifact artifact) throws ArtifactResolutionException, ArtifactNotFoundException, ProjectBuildingException, InvalidDependencyVersionException {
Artifact pomArtifact = this.factory.createArtifact(artifact.getGroupId(), artifact.getArtifactId(), artifact.getVersion(), """", ""pom"");
MavenProject pomProject = mavenProjectBuilder.buildFromRepository(pomArtifact, this.remoteRepos, this.local);
return resolveDependencyArtifacts(pomProject);
}","protected Set resolveArtifactDependencies(Artifact artifact) throws ArtifactResolutionException, ArtifactNotFoundException, ProjectBuildingException, InvalidDependencyVersionException {
Artifact artifactVar1 = artifactLiteral2;
MavenProject mavenprojectVar3 = mavenprojectLiteral4;
return resolveDependencyArtifacts(mavenprojectVar3);
}"
12221,BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,mavendp,181,"marker.createNewFile();
","public void setMarker() throws MojoExecutionException {
File marker = getMarkerFile();
File clearMarker = getMarkerFile(!this.resolved);
try {
marker.getParentFile().mkdirs();
} catch (NullPointerException e) {
}
try {
marker.createNewFile();
if (clearMarker.exists()) {
clearMarker.delete();
}
} catch (IOException e) {
throw new MojoExecutionException(""Unable to create Marker: "" + marker.getAbsolutePath(), e);
}
}","public void setMarker() throws MojoExecutionException {
File fileVar1 = fileLiteral2;
File fileVar3 = fileLiteral4;
try {
fileVar1.getParentFile().mkdirs();
} catch (NullPointerException e) {
}
try {
fileVar1.createNewFile();
if (fileVar3.exists()) {
fileVar3.delete();
}
} catch (IOException e) {
throw new MojoExecutionException(""Unable to create Marker: "" + fileVar1.getAbsolutePath(), e);
}
}"
12340,BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,mavendp,300,"location.mkdirs();
","protected void unpack(Artifact artifact, File location, String includes, String excludes) throws MojoExecutionException {
File file = artifact.getFile();
try {
logUnpack(file, location, includes, excludes);
location.mkdirs();
if (file.isDirectory()) {
// usual case is a future jar packaging, but there are special cases: classifier and other packaging
throw new MojoExecutionException(""Artifact has not been packaged yet. When used on reactor artifact, "" + ""unpack should be executed after packaging: see MDEP-98."");
}
UnArchiver unArchiver;
try {
unArchiver = archiverManager.getUnArchiver(artifact.getType());
getLog().debug(""Found unArchiver by type: "" + unArchiver);
} catch (NoSuchArchiverException e) {
unArchiver = archiverManager.getUnArchiver(file);
getLog().debug(""Found unArchiver by extension: "" + unArchiver);
}
unArchiver.setUseJvmChmod(useJvmChmod);
unArchiver.setIgnorePermissions(ignorePermissions);
unArchiver.setSourceFile(file);
unArchiver.setDestDirectory(location);
if (StringUtils.isNotEmpty(excludes) || StringUtils.isNotEmpty(includes)) {
IncludeExcludeFileSelector[] selectors = new IncludeExcludeFileSelector[] { new IncludeExcludeFileSelector() };
if (StringUtils.isNotEmpty(excludes)) {
selectors[0].setExcludes(excludes.split("",""));
}
if (StringUtils.isNotEmpty(includes)) {
selectors[0].setIncludes(includes.split("",""));
}
unArchiver.setFileSelectors(selectors);
}
if (this.silent) {
silenceUnarchiver(unArchiver);
}
unArchiver.extract();
} catch (NoSuchArchiverException e) {
throw new MojoExecutionException(""Unknown archiver type"", e);
} catch (ArchiverException e) {
throw new MojoExecutionException(""Error unpacking file: "" + file + "" to: "" + location + ""\r\n"" + e.toString(), e);
}
}","protected void unpack(Artifact artifact, File location, String includes, String excludes) throws MojoExecutionException {
File fileVar1 = fileLiteral2;
try {
logUnpack(fileVar1, location, includes, excludes);
location.mkdirs();
if (fileVar1.isDirectory()) {
// usual case is a future jar packaging, but there are special cases: classifier and other packaging
throw new MojoExecutionException(""Artifact has not been packaged yet. When used on reactor artifact, "" + ""unpack should be executed after packaging: see MDEP-98."");
}
UnArchiver unarchiverVar3;
try {
unarchiverVar3 = archiverManager.getUnArchiver(artifact.getType());
getLog().debug(""Found unArchiver by type: "" + unarchiverVar3);
} catch (NoSuchArchiverException e) {
unarchiverVar3 = archiverManager.getUnArchiver(fileVar1);
getLog().debug(""Found unArchiver by extension: "" + unarchiverVar3);
}
unarchiverVar3.setUseJvmChmod(useJvmChmod);
unarchiverVar3.setIgnorePermissions(ignorePermissions);
unarchiverVar3.setSourceFile(fileVar1);
unarchiverVar3.setDestDirectory(location);
if (StringUtils.isNotEmpty(excludes) || StringUtils.isNotEmpty(includes)) {
IncludeExcludeFileSelector[] includeexcludefileselectorArrayVar4 = includeexcludefileselectorArrayLiteral5;
if (StringUtils.isNotEmpty(excludes)) {
includeexcludefileselectorArrayVar4[0].setExcludes(excludes.split("",""));
}
if (StringUtils.isNotEmpty(includes)) {
includeexcludefileselectorArrayVar4[0].setIncludes(includes.split("",""));
}
unarchiverVar3.setFileSelectors(includeexcludefileselectorArrayVar4);
}
if (this.silent) {
silenceUnarchiver(unarchiverVar3);
}
unarchiverVar3.extract();
} catch (NoSuchArchiverException e) {
throw new MojoExecutionException(""Unknown archiver type"", e);
} catch (ArchiverException e) {
throw new MojoExecutionException(""Error unpacking file: "" + fileVar1 + "" to: "" + location + ""\r\n"" + e.toString(), e);
}
}"
12342,PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,FP,mavendp,302,"private class SnapshotsFilter
implements ArtifactFilter
{
public boolean include( Artifact artifact )
{
return artifact.isSnapshot();
","public boolean include(Artifact artifact) {
if (artifactsGAMatch(artifact, projectArtifact)) {
return true;
}
for (Artifact depArtifact : directDependencyArtifacts) {
if (this.artifactsGAMatch(artifact, depArtifact)) {
return true;
}
}
return false;
}","public boolean include(Artifact artifact) {
if (artifactsGAMatch(artifact, projectArtifact)) {
return true;
}
for (Artifact artifactVar1 : directDependencyArtifacts) {
if (this.artifactsGAMatch(artifact, artifactVar1)) {
return true;
}
}
return false;
}"
12393,PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,FP,mavendp,353,"private class ModuleDescriptor
{
String name;
boolean automatic = true;
","public String getOutput(boolean outputAbsoluteArtifactFilename, boolean theOutputScope, boolean theSort) {
StringBuilder sb = new StringBuilder();
sb.append(System.lineSeparator());
sb.append(""The following files have been resolved:"");
sb.append(System.lineSeparator());
if (results.getResolvedDependencies() == null || results.getResolvedDependencies().isEmpty()) {
sb.append(""   none"");
sb.append(System.lineSeparator());
} else {
sb.append(buildArtifactListOutput(results.getResolvedDependencies(), outputAbsoluteArtifactFilename, theOutputScope, theSort));
}
if (results.getSkippedDependencies() != null && !results.getSkippedDependencies().isEmpty()) {
sb.append(System.lineSeparator());
sb.append(""The following files were skipped:"");
sb.append(System.lineSeparator());
Set<Artifact> skippedDependencies = new LinkedHashSet<>();
skippedDependencies.addAll(results.getSkippedDependencies());
sb.append(buildArtifactListOutput(skippedDependencies, outputAbsoluteArtifactFilename, theOutputScope, theSort));
}
if (results.getUnResolvedDependencies() != null && !results.getUnResolvedDependencies().isEmpty()) {
sb.append(System.lineSeparator());
sb.append(""The following files have NOT been resolved:"");
sb.append(System.lineSeparator());
Set<Artifact> unResolvedDependencies = new LinkedHashSet<>();
unResolvedDependencies.addAll(results.getUnResolvedDependencies());
sb.append(buildArtifactListOutput(unResolvedDependencies, outputAbsoluteArtifactFilename, theOutputScope, theSort));
}
sb.append(System.lineSeparator());
return sb.toString();
}","public String getOutput(boolean outputAbsoluteArtifactFilename, boolean theOutputScope, boolean theSort) {
StringBuilder stringbuilderVar1 = stringbuilderLiteral2;
stringbuilderVar1.append(System.lineSeparator());
stringbuilderVar1.append(""The following files have been resolved:"");
stringbuilderVar1.append(System.lineSeparator());
if (results.getResolvedDependencies() == null || results.getResolvedDependencies().isEmpty()) {
stringbuilderVar1.append(""   none"");
stringbuilderVar1.append(System.lineSeparator());
} else {
stringbuilderVar1.append(buildArtifactListOutput(results.getResolvedDependencies(), outputAbsoluteArtifactFilename, theOutputScope, theSort));
}
if (results.getSkippedDependencies() != null && !results.getSkippedDependencies().isEmpty()) {
stringbuilderVar1.append(System.lineSeparator());
stringbuilderVar1.append(""The following files were skipped:"");
stringbuilderVar1.append(System.lineSeparator());
Set<Artifact> set<artifact>Var3 = set<artifact>Literal4;
set<artifact>Var3.addAll(results.getSkippedDependencies());
stringbuilderVar1.append(buildArtifactListOutput(set<artifact>Var3, outputAbsoluteArtifactFilename, theOutputScope, theSort));
}
if (results.getUnResolvedDependencies() != null && !results.getUnResolvedDependencies().isEmpty()) {
stringbuilderVar1.append(System.lineSeparator());
stringbuilderVar1.append(""The following files have NOT been resolved:"");
stringbuilderVar1.append(System.lineSeparator());
Set<Artifact> set<artifact>Var5 = set<artifact>Literal4;
set<artifact>Var5.addAll(results.getUnResolvedDependencies());
stringbuilderVar1.append(buildArtifactListOutput(set<artifact>Var5, outputAbsoluteArtifactFilename, theOutputScope, theSort));
}
stringbuilderVar1.append(System.lineSeparator());
return stringbuilderVar1.toString();
}"
12398,DODGY_CODE,RV_RETURN_VALUE_IGNORED_INFERRED,FP,mavendp,358,"dependency.setArtifact( dependency.getArtifact().setProperties( artifactProperties ) );
","private void applyDependencyManagementDfs(Map<String, org.apache.maven.model.Dependency> dependencyManagementMap, DependencyNode node) {
if (dependencyManagementMap.containsKey(getDependencyManagementCoordinate(node.getArtifact()))) {
org.apache.maven.model.Dependency manager = dependencyManagementMap.get(getDependencyManagementCoordinate(node.getArtifact()));
Map<String, String> artifactProperties = new HashMap<>();
for (Map.Entry<String, String> entry : node.getArtifact().getProperties().entrySet()) {
artifactProperties.put(entry.getKey(), entry.getValue());
}
if (!manager.getVersion().equals(node.getArtifact().getVersion())) {
artifactProperties.put(PRE_MANAGED_VERSION, node.getArtifact().getVersion());
node.setArtifact(node.getArtifact().setVersion(manager.getVersion()));
}
String managerScope = Objects.toString(manager.getScope(), ""compile"");
Dependency dependency = node.getDependency();
String dependencyScope = dependency.getScope();
if (!managerScope.equals(dependencyScope)) {
artifactProperties.put(PRE_MANAGED_SCOPE, dependencyScope);
artifactProperties.put(MANAGED_SCOPE, managerScope);
}
node.setArtifact(node.getArtifact().setProperties(artifactProperties));
dependency.setArtifact(dependency.getArtifact().setProperties(artifactProperties));
}
for (DependencyNode child : node.getChildren()) {
applyDependencyManagementDfs(dependencyManagementMap, child);
}
}","private void applyDependencyManagementDfs(Map<String, org.apache.maven.model.Dependency> dependencyManagementMap, DependencyNode node) {
if (dependencyManagementMap.containsKey(getDependencyManagementCoordinate(node.getArtifact()))) {
org.apache.maven.model.Dependency org.apache.maven.model.dependencyVar1 = org.apache.maven.model.dependencyLiteral2;
Map<String, String> map<string,string>Var3 = map<string,string>Literal4;
for (Map.Entry<String, String> map.entry<string,string>Var5 : node.getArtifact().getProperties().entrySet()) {
map<string,string>Var3.put(map.entry<string,string>Var5.getKey(), map.entry<string,string>Var5.getValue());
}
if (!org.apache.maven.model.dependencyVar1.getVersion().equals(node.getArtifact().getVersion())) {
map<string,string>Var3.put(PRE_MANAGED_VERSION, node.getArtifact().getVersion());
node.setArtifact(node.getArtifact().setVersion(org.apache.maven.model.dependencyVar1.getVersion()));
}
String stringVar6 = stringLiteral7;
Dependency dependencyVar8 = dependencyLiteral9;
String stringVar10 = stringLiteral11;
if (!stringVar6.equals(stringVar10)) {
map<string,string>Var3.put(PRE_MANAGED_SCOPE, stringVar10);
map<string,string>Var3.put(MANAGED_SCOPE, stringVar6);
}
node.setArtifact(node.getArtifact().setProperties(map<string,string>Var3));
dependencyVar8.setArtifact(dependencyVar8.getArtifact().setProperties(map<string,string>Var3));
}
for (DependencyNode dependencynodeVar12 : node.getChildren()) {
applyDependencyManagementDfs(dependencyManagementMap, dependencynodeVar12);
}
}"
12403,BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,mavendp,363,"marker.getParentFile().mkdirs();
","@Override
public void setMarker() throws MojoExecutionException {
File marker = getMarkerFile();
File clearMarker = getMarkerFile(!this.resolved);
try {
marker.getParentFile().mkdirs();
} catch (NullPointerException e) {
}
try {
marker.createNewFile();
if (clearMarker.exists()) {
if (!clearMarker.delete()) {
clearMarker.deleteOnExit();
}
}
} catch (IOException e) {
throw new MojoExecutionException(""Unable to create Marker: "" + marker.getAbsolutePath(), e);
}
}","@Override
public void setMarker() throws MojoExecutionException {
File fileVar1 = fileLiteral2;
File fileVar3 = fileLiteral4;
try {
fileVar1.getParentFile().mkdirs();
} catch (NullPointerException e) {
}
try {
fileVar1.createNewFile();
if (fileVar3.exists()) {
if (!fileVar3.delete()) {
fileVar3.deleteOnExit();
}
}
} catch (IOException e) {
throw new MojoExecutionException(""Unable to create Marker: "" + fileVar1.getAbsolutePath(), e);
}
}"
12415,MALICIOUS_CODE,EI_EXPOSE_REP2,FP,mavendp,375,"this.fileMappers = fileMappers;
","public void setFileMappers(FileMapper[] fileMappers) {
this.fileMappers = fileMappers;
}","public void setFileMappers(FileMapper[] fileMappers) {
this.fileMappers = fileMappers;
}"
12417,BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,mavendp,377,"out.getParentFile().mkdirs();
","private void storeClasspathFile(String cpString, File out) throws MojoExecutionException {
out.getParentFile().mkdirs();
String encoding = Objects.toString(outputEncoding, ""UTF-8"");
try (Writer w = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(out), encoding))) {
w.write(cpString);
getLog().info(""Wrote classpath file '"" + out + ""'."");
} catch (IOException ex) {
throw new MojoExecutionException(""Error while writing to classpath file '"" + out, ex);
}
}","private void storeClasspathFile(String cpString, File out) throws MojoExecutionException {
out.getParentFile().mkdirs();
String stringVar1 = stringLiteral2;
try (Writer writerVar3 = writerLiteral4) {
writerVar3.write(cpString);
getLog().info(""Wrote classpath file '"" + out + ""'."");
} catch (IOException ex) {
throw new MojoExecutionException(""Error while writing to classpath file '"" + out, ex);
}
}"
12431,BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,mavendp,391,"marker.createNewFile();
","@Override
public void setMarker() throws MojoExecutionException {
File marker = getMarkerFile();
File clearMarker = getMarkerFile(!this.resolved);
try {
marker.getParentFile().mkdirs();
} catch (NullPointerException e) {
}
try {
marker.createNewFile();
if (clearMarker.exists()) {
if (!clearMarker.delete()) {
clearMarker.deleteOnExit();
}
}
} catch (IOException e) {
throw new MojoExecutionException(""Unable to create Marker: "" + marker.getAbsolutePath(), e);
}
}","@Override
public void setMarker() throws MojoExecutionException {
File fileVar1 = fileLiteral2;
File fileVar3 = fileLiteral4;
try {
fileVar1.getParentFile().mkdirs();
} catch (NullPointerException e) {
}
try {
fileVar1.createNewFile();
if (fileVar3.exists()) {
if (!fileVar3.delete()) {
fileVar3.deleteOnExit();
}
}
} catch (IOException e) {
throw new MojoExecutionException(""Unable to create Marker: "" + fileVar1.getAbsolutePath(), e);
}
}"
12506,MALICIOUS_CODE,EI_EXPOSE_REP,FP,mavendp,466,"return this.fileMappers;
","public FileMapper[] getFileMappers() {
return this.fileMappers;
}","public FileMapper[] getFileMappers() {
return this.fileMappers;
}"
12511,MALICIOUS_CODE,EI_EXPOSE_REP2,FP,mavendp,471,"this.fileMappers = fileMappers;
","public void setFileMappers(FileMapper[] fileMappers) {
this.fileMappers = fileMappers;
}","public void setFileMappers(FileMapper[] fileMappers) {
this.fileMappers = fileMappers;
}"
12518,DODGY_CODE,UC_USELESS_OBJECT,FP,mavendp,478,"List<org.apache.maven.model.Exclusion> exclusions = new ArrayList<>();
","private DependencyNode buildTree(DependencyNode parent, org.eclipse.aether.graph.DependencyNode child) {
List<org.apache.maven.model.Exclusion> exclusions = new ArrayList<>();
for (org.eclipse.aether.graph.Exclusion exclusion : child.getDependency().getExclusions()) {
exclusions.add(convertAetherExclusionToMavenExclusion(exclusion));
}
DefaultDependencyNode newChild = new DefaultDependencyNode(parent, convertAetherArtifactToMavenArtifact(child), child.getArtifact().getProperties().get(""preManagedVersion""), child.getArtifact().getProperties().get(""preManagedScope""), null, child.getDependency().isOptional());
newChild.setChildren(new ArrayList<DependencyNode>());
for (org.eclipse.aether.graph.DependencyNode grandChild : child.getChildren()) {
newChild.getChildren().add(buildTree(newChild, grandChild));
}
return newChild;
}","private DependencyNode buildTree(DependencyNode parent, org.eclipse.aether.graph.DependencyNode child) {
List<org.apache.maven.model.Exclusion> list<org.apache.maven.model.exclusion>Var1 = list<org.apache.maven.model.exclusion>Literal2;
for (org.eclipse.aether.graph.Exclusion org.eclipse.aether.graph.exclusionVar3 : child.getDependency().getExclusions()) {
list<org.apache.maven.model.exclusion>Var1.add(convertAetherExclusionToMavenExclusion(org.eclipse.aether.graph.exclusionVar3));
}
DefaultDependencyNode defaultdependencynodeVar4 = defaultdependencynodeLiteral5;
defaultdependencynodeVar4.setChildren(new ArrayList<DependencyNode>());
for (org.eclipse.aether.graph.DependencyNode org.eclipse.aether.graph.dependencynodeVar6 : child.getChildren()) {
defaultdependencynodeVar4.getChildren().add(buildTree(defaultdependencynodeVar4, org.eclipse.aether.graph.dependencynodeVar6));
}
return defaultdependencynodeVar4;
}"
12522,BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,mavendp,482,"marker.createNewFile();
","@Override
public void setMarker() throws MojoExecutionException {
File marker = getMarkerFile();
try {
marker.getParentFile().mkdirs();
} catch (NullPointerException e) {
}
try {
marker.createNewFile();
} catch (IOException e) {
throw new MojoExecutionException(""Unable to create Marker: "" + marker.getAbsolutePath(), e);
}
try {
long ts;
if (this.artifact != null && this.artifact.getFile() != null) {
ts = this.artifact.getFile().lastModified();
} else {
ts = System.currentTimeMillis();
}
if (!marker.setLastModified(ts)) {
throw new MojoExecutionException(""Unable to update last modified timestamp on marker file "" + marker.getAbsolutePath());
}
} catch (Exception e) {
throw new MojoExecutionException(""Unable to update Marker timestamp: "" + marker.getAbsolutePath(), e);
}
}","@Override
public void setMarker() throws MojoExecutionException {
File fileVar1 = fileLiteral2;
try {
fileVar1.getParentFile().mkdirs();
} catch (NullPointerException e) {
}
try {
fileVar1.createNewFile();
} catch (IOException e) {
throw new MojoExecutionException(""Unable to create Marker: "" + fileVar1.getAbsolutePath(), e);
}
try {
long longVar3;
if (this.artifact != null && this.artifact.getFile() != null) {
longVar3 = this.artifact.getFile().lastModified();
} else {
longVar3 = System.currentTimeMillis();
}
if (!fileVar1.setLastModified(longVar3)) {
throw new MojoExecutionException(""Unable to update last modified timestamp on marker file "" + fileVar1.getAbsolutePath());
}
} catch (Exception e) {
throw new MojoExecutionException(""Unable to update Marker timestamp: "" + fileVar1.getAbsolutePath(), e);
}
}"
12528,DODGY_CODE,REC_CATCH_EXCEPTION,FP,mavendp,488,"catch ( Exception e )
","private void silenceUnarchiver(UnArchiver unArchiver) {
try {
Field field = ReflectionUtils.getFieldByNameIncludingSuperclasses(""logger"", unArchiver.getClass());
field.setAccessible(true);
field.set(unArchiver, this.getLog());
} catch (Exception e) {
}
}","private void silenceUnarchiver(UnArchiver unArchiver) {
try {
Field fieldVar1 = fieldLiteral2;
fieldVar1.setAccessible(true);
fieldVar1.set(unArchiver, this.getLog());
} catch (Exception e) {
}
}"
12537,MALICIOUS_CODE,EI_EXPOSE_REP,FP,mavendp,497,"return this.fileMappers;
","public FileMapper[] getFileMappers() {
return this.fileMappers;
}","public FileMapper[] getFileMappers() {
return this.fileMappers;
}"
12539,DODGY_CODE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,FP,mavendp,499,"@Parameter
protected boolean useJvmChmod = true;","@Parameter
protected boolean useJvmChmod = true;","@Parameter
protected boolean booleanVar1 = booleanLiteral2;"
12541,MALICIOUS_CODE,EI_EXPOSE_REP2,FP,mavendp,501,"this.fileMappers = fileMappers;
","public void setFileMappers(FileMapper[] fileMappers) {
this.fileMappers = fileMappers;
}","public void setFileMappers(FileMapper[] fileMappers) {
this.fileMappers = fileMappers;
}"
12545,DODGY_CODE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,FP,mavendp,505,"@Parameter
protected boolean useJvmChmod = true;","@Parameter
protected boolean useJvmChmod = true;","@Parameter
protected boolean booleanVar1 = booleanLiteral2;"
12546,MALICIOUS_CODE,EI_EXPOSE_REP2,FP,mavendp,506,"this.fileMappers = fileMappers;
","public void setFileMappers(FileMapper[] fileMappers) {
this.fileMappers = fileMappers;
}","public void setFileMappers(FileMapper[] fileMappers) {
this.fileMappers = fileMappers;
}"
12554,DODGY_CODE,UC_USELESS_OBJECT,FP,mavendp,514,"List<org.apache.maven.model.Exclusion> exclusions = new ArrayList<>();
","private DependencyNode buildTree(DependencyNode parent, org.eclipse.aether.graph.DependencyNode child) {
List<org.apache.maven.model.Exclusion> exclusions = new ArrayList<>();
for (org.eclipse.aether.graph.Exclusion exclusion : child.getDependency().getExclusions()) {
exclusions.add(convertAetherExclusionToMavenExclusion(exclusion));
}
DefaultDependencyNode newChild = new DefaultDependencyNode(parent, convertAetherArtifactToMavenArtifact(child), child.getArtifact().getProperties().get(""preManagedVersion""), child.getArtifact().getProperties().get(""preManagedScope""), null, child.getDependency().isOptional());
newChild.setChildren(new ArrayList<DependencyNode>());
for (org.eclipse.aether.graph.DependencyNode grandChild : child.getChildren()) {
newChild.getChildren().add(buildTree(newChild, grandChild));
}
return newChild;
}","private DependencyNode buildTree(DependencyNode parent, org.eclipse.aether.graph.DependencyNode child) {
List<org.apache.maven.model.Exclusion> list<org.apache.maven.model.exclusion>Var1 = list<org.apache.maven.model.exclusion>Literal2;
for (org.eclipse.aether.graph.Exclusion org.eclipse.aether.graph.exclusionVar3 : child.getDependency().getExclusions()) {
list<org.apache.maven.model.exclusion>Var1.add(convertAetherExclusionToMavenExclusion(org.eclipse.aether.graph.exclusionVar3));
}
DefaultDependencyNode defaultdependencynodeVar4 = defaultdependencynodeLiteral5;
defaultdependencynodeVar4.setChildren(new ArrayList<DependencyNode>());
for (org.eclipse.aether.graph.DependencyNode org.eclipse.aether.graph.dependencynodeVar6 : child.getChildren()) {
defaultdependencynodeVar4.getChildren().add(buildTree(defaultdependencynodeVar4, org.eclipse.aether.graph.dependencynodeVar6));
}
return defaultdependencynodeVar4;
}"
12557,BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,mavendp,517,"marker.createNewFile();
","@Override
public void setMarker() throws MojoExecutionException {
File marker = getMarkerFile();
try {
marker.getParentFile().mkdirs();
} catch (NullPointerException e) {
}
try {
marker.createNewFile();
} catch (IOException e) {
throw new MojoExecutionException(""Unable to create Marker: "" + marker.getAbsolutePath(), e);
}
try {
long ts;
if (this.artifact != null && this.artifact.getFile() != null) {
ts = this.artifact.getFile().lastModified();
} else {
ts = System.currentTimeMillis();
}
if (!marker.setLastModified(ts)) {
throw new MojoExecutionException(""Unable to update last modified timestamp on marker file "" + marker.getAbsolutePath());
}
} catch (Exception e) {
throw new MojoExecutionException(""Unable to update Marker timestamp: "" + marker.getAbsolutePath(), e);
}
}","@Override
public void setMarker() throws MojoExecutionException {
File fileVar1 = fileLiteral2;
try {
fileVar1.getParentFile().mkdirs();
} catch (NullPointerException e) {
}
try {
fileVar1.createNewFile();
} catch (IOException e) {
throw new MojoExecutionException(""Unable to create Marker: "" + fileVar1.getAbsolutePath(), e);
}
try {
long longVar3;
if (this.artifact != null && this.artifact.getFile() != null) {
longVar3 = this.artifact.getFile().lastModified();
} else {
longVar3 = System.currentTimeMillis();
}
if (!fileVar1.setLastModified(longVar3)) {
throw new MojoExecutionException(""Unable to update last modified timestamp on marker file "" + fileVar1.getAbsolutePath());
}
} catch (Exception e) {
throw new MojoExecutionException(""Unable to update Marker timestamp: "" + fileVar1.getAbsolutePath(), e);
}
}"
12563,DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,mavendp,523,"unArchiver = archiverManager.getUnArchiver( file );
","protected void unpack(File file, File location) throws MojoExecutionException {
try {
location.mkdirs();
UnArchiver unArchiver;
unArchiver = archiverManager.getUnArchiver(file);
unArchiver.setSourceFile(file);
unArchiver.setDestDirectory(location);
if (this.silent) {
silenceUnarchiver(unArchiver);
}
unArchiver.extract();
} catch (NoSuchArchiverException e) {
throw new MojoExecutionException(""Unknown archiver type"", e);
} catch (IOException e) {
e.printStackTrace();
throw new MojoExecutionException(""Error unpacking file: "" + (this.outputAbsoluteArtifactFilename ? file.getAbsolutePath() : file.getName()) + "" to: "" + location + ""\r\n"" + e.toString(), e);
} catch (ArchiverException e) {
e.printStackTrace();
throw new MojoExecutionException(""Error unpacking file: "" + file + "" to: "" + location + ""\r\n"" + e.toString(), e);
}
}","protected void unpack(File file, File location) throws MojoExecutionException {
try {
location.mkdirs();
UnArchiver unarchiverVar1;
unarchiverVar1 = archiverManager.getUnArchiver(file);
unarchiverVar1.setSourceFile(file);
unarchiverVar1.setDestDirectory(location);
if (this.silent) {
silenceUnarchiver(unarchiverVar1);
}
unarchiverVar1.extract();
} catch (NoSuchArchiverException e) {
throw new MojoExecutionException(""Unknown archiver type"", e);
} catch (IOException e) {
e.printStackTrace();
throw new MojoExecutionException(""Error unpacking file: "" + (this.outputAbsoluteArtifactFilename ? file.getAbsolutePath() : file.getName()) + "" to: "" + location + ""\r\n"" + e.toString(), e);
} catch (ArchiverException e) {
e.printStackTrace();
throw new MojoExecutionException(""Error unpacking file: "" + file + "" to: "" + location + ""\r\n"" + e.toString(), e);
}
}"
12580,CORRECTNESS,RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE,FP,mavendp,540,"logArtifacts( unusedDeclared, false );
","private boolean checkDependencies() throws MojoExecutionException {
boolean result = false;
try {
ProjectDependencyAnalysis analysis = analyzer.analyze(project);
if (this.displayUsed) {
getLog().info(""Used declared dependencies:"");
logArtifacts(analysis.getUsedDeclaredArtifacts(), false);
}
getLog().info(""Used undeclared dependencies:"");
Set usedUndeclared = analysis.getUsedUndeclaredArtifacts();
logArtifacts(usedUndeclared, true);
getLog().info(""Unused declared dependencies:"");
Set unusedDeclared = analysis.getUnusedDeclaredArtifacts();
if (ignoreNonCompile) {
Iterator iter = unusedDeclared.iterator();
while (iter.hasNext()) {
Artifact artifact = (Artifact) iter.next();
if (!artifact.getScope().equals(Artifact.SCOPE_COMPILE)) {
iter.remove();
}
}
}
logArtifacts(unusedDeclared, false);
if (outputXML) {
writeDependencyXML(usedUndeclared);
}
if (scriptableOutput) {
writeScriptableOutput(usedUndeclared);
}
if ((usedUndeclared != null && !usedUndeclared.isEmpty()) || unusedDeclared != null && !unusedDeclared.isEmpty()) {
getLog().warn(""Potential problems discovered."");
result = true;
}
} catch (ProjectDependencyAnalyzerException exception) {
throw new MojoExecutionException(""Cannot analyze dependencies"", exception);
}
return result;
}","private boolean checkDependencies() throws MojoExecutionException {
boolean booleanVar1 = booleanLiteral2;
try {
ProjectDependencyAnalysis projectdependencyanalysisVar3 = projectdependencyanalysisLiteral4;
if (this.displayUsed) {
getLog().info(""Used declared dependencies:"");
logArtifacts(projectdependencyanalysisVar3.getUsedDeclaredArtifacts(), false);
}
getLog().info(""Used undeclared dependencies:"");
Set setVar5 = setLiteral6;
logArtifacts(setVar5, true);
getLog().info(""Unused declared dependencies:"");
Set setVar7 = setLiteral8;
if (ignoreNonCompile) {
Iterator iteratorVar9 = iteratorLiteral10;
while (iteratorVar9.hasNext()) {
Artifact artifactVar11 = artifactLiteral12;
if (!artifactVar11.getScope().equals(Artifact.SCOPE_COMPILE)) {
iteratorVar9.remove();
}
}
}
logArtifacts(setVar7, false);
if (outputXML) {
writeDependencyXML(setVar5);
}
if (scriptableOutput) {
writeScriptableOutput(setVar5);
}
if ((setVar5 != null && !setVar5.isEmpty()) || setVar7 != null && !setVar7.isEmpty()) {
getLog().warn(""Potential problems discovered."");
booleanVar1 = true;
}
} catch (ProjectDependencyAnalyzerException exception) {
throw new MojoExecutionException(""Cannot analyze dependencies"", exception);
}
return booleanVar1;
}"
12589,CORRECTNESS,NP_NULL_PARAM_DEREF,FP,mavendp,549,"List artList = new ArrayList( artifacts );
","public void execute() throws MojoExecutionException {
Set artifacts = getResolvedDependencies(true);
if (artifacts == null || artifacts.isEmpty()) {
getLog().info(""No dependencies found."");
}
List artList = new ArrayList(artifacts);
StringBuffer sb = new StringBuffer();
Iterator i = artList.iterator();
if (i.hasNext()) {
appendArtifactPath((Artifact) i.next(), sb);
while (i.hasNext()) {
sb.append(File.pathSeparatorChar);
appendArtifactPath((Artifact) i.next(), sb);
}
}
String cpString = sb.toString();
if (cpFile == null) {
getLog().info(""Dependencies classpath:\n"" + cpString);
} else {
if (regenerateFile || !isUpdToDate(cpString)) {
storeClasspathFile(cpString);
} else {
this.getLog().info(""Skipped writting classpath file '"" + cpFile + ""'.  No changes found."");
}
}
}","public void execute() throws MojoExecutionException {
Set setVar1 = setLiteral2;
if (setVar1 == null || setVar1.isEmpty()) {
getLog().info(""No dependencies found."");
}
List listVar3 = listLiteral4;
StringBuffer stringbufferVar5 = stringbufferLiteral6;
Iterator iteratorVar7 = iteratorLiteral8;
if (iteratorVar7.hasNext()) {
appendArtifactPath((Artifact) iteratorVar7.next(), stringbufferVar5);
while (iteratorVar7.hasNext()) {
stringbufferVar5.append(File.pathSeparatorChar);
appendArtifactPath((Artifact) iteratorVar7.next(), stringbufferVar5);
}
}
String stringVar9 = stringLiteral10;
if (cpFile == null) {
getLog().info(""Dependencies classpath:\n"" + stringVar9);
} else {
if (regenerateFile || !isUpdToDate(stringVar9)) {
storeClasspathFile(stringVar9);
} else {
this.getLog().info(""Skipped writting classpath file '"" + cpFile + ""'.  No changes found."");
}
}
}"
12593,I18N,DM_DEFAULT_ENCODING,FP,mavendp,553,"BufferedReader r = new BufferedReader( new FileReader( cpFile ) );
","private String readClasspathFile() throws IOException {
if (!cpFile.isFile()) {
return null;
}
StringBuffer sb = new StringBuffer();
BufferedReader r = new BufferedReader(new FileReader(cpFile));
try {
String l;
while ((l = r.readLine()) != null) {
sb.append(l);
}
return sb.toString();
} finally {
r.close();
}
}","private String readClasspathFile() throws IOException {
if (!cpFile.isFile()) {
return null;
}
StringBuffer stringbufferVar1 = stringbufferLiteral2;
BufferedReader bufferedreaderVar3 = bufferedreaderLiteral4;
try {
String stringVar5;
while ((stringVar5 = bufferedreaderVar3.readLine()) != null) {
stringbufferVar1.append(stringVar5);
}
return stringbufferVar1.toString();
} finally {
bufferedreaderVar3.close();
}
}"
12596,DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,FP,mavendp,556,"else if ( arg2 == null )
","public int compare(Object arg1, Object arg2) {
if (arg1 instanceof Artifact && arg2 instanceof Artifact) {
if (arg1 == arg2) {
return 0;
} else if (arg1 == null) {
return -1;
} else if (arg2 == null) {
return +1;
}
Artifact art1 = (Artifact) arg1;
Artifact art2 = (Artifact) arg2;
String s1 = art1.getGroupId() + art1.getArtifactId() + art1.getVersion();
String s2 = art2.getGroupId() + art2.getArtifactId() + art2.getVersion();
return s1.compareTo(s2);
} else {
return 0;
}
}","public int compare(Object arg1, Object arg2) {
if (arg1 instanceof Artifact && arg2 instanceof Artifact) {
if (arg1 == arg2) {
return 0;
} else if (arg1 == null) {
return -1;
} else if (arg2 == null) {
return +1;
}
Artifact artifactVar1 = artifactLiteral2;
Artifact artifactVar3 = artifactLiteral4;
String stringVar5 = stringLiteral6;
String stringVar7 = stringLiteral8;
return stringVar5.compareTo(stringVar7);
} else {
return 0;
}
}"
12598,CORRECTNESS,UWF_UNWRITTEN_FIELD,FP,mavendp,558,private boolean regenerateFile;,private boolean regenerateFile;,private boolean booleanVar1;
12709,DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,mavendp,669,"Set<Artifact> directDependencies = project.getDependencyArtifacts();
","private boolean checkDependencyManagement() throws MojoExecutionException {
boolean foundError = false;
getLog().info(""Found Resolved Dependency/DependencyManagement mismatches:"");
List<Dependency> depMgtDependencies = null;
DependencyManagement depMgt = project.getDependencyManagement();
if (depMgt != null) {
depMgtDependencies = depMgt.getDependencies();
}
if (depMgtDependencies != null && !depMgtDependencies.isEmpty()) {
Map<String, Dependency> depMgtMap = new HashMap<>();
Map<String, Exclusion> exclusions = new HashMap<>();
for (Dependency depMgtDependency : depMgtDependencies) {
depMgtMap.put(depMgtDependency.getManagementKey(), depMgtDependency);
exclusions.putAll(addExclusions(depMgtDependency.getExclusions()));
}
Set<Artifact> allDependencyArtifacts = new LinkedHashSet<>(project.getArtifacts());
if (this.ignoreDirect) {
getLog().info(""\tIgnoring Direct Dependencies."");
Set<Artifact> directDependencies = project.getDependencyArtifacts();
allDependencyArtifacts.removeAll(directDependencies);
}
List<Artifact> exclusionErrors = getExclusionErrors(exclusions, allDependencyArtifacts);
for (Artifact exclusion : exclusionErrors) {
getLog().info(StringUtils.stripEnd(getArtifactManagementKey(exclusion), "":"") + "" was excluded in DepMgt, but version "" + exclusion.getVersion() + "" has been found in the dependency tree."");
foundError = true;
}
Map<Artifact, Dependency> mismatch = getMismatch(depMgtMap, allDependencyArtifacts);
for (Map.Entry<Artifact, Dependency> entry : mismatch.entrySet()) {
logMismatch(entry.getKey(), entry.getValue());
foundError = true;
}
if (!foundError) {
getLog().info(""\tNone"");
}
} else {
getLog().info(""\tNothing in DepMgt."");
}
return foundError;
}","private boolean checkDependencyManagement() throws MojoExecutionException {
boolean booleanVar1 = booleanLiteral2;
getLog().info(""Found Resolved Dependency/DependencyManagement mismatches:"");
List<Dependency> list<dependency>Var3 = list<dependency>Literal4;
DependencyManagement dependencymanagementVar5 = dependencymanagementLiteral6;
if (dependencymanagementVar5 != null) {
list<dependency>Var3 = dependencymanagementVar5.getDependencies();
}
if (list<dependency>Var3 != null && !list<dependency>Var3.isEmpty()) {
Map<String, Dependency> map<string,dependency>Var7 = map<string,dependency>Literal8;
Map<String, Exclusion> map<string,exclusion>Var9 = map<string,dependency>Literal8;
for (Dependency dependencyVar10 : list<dependency>Var3) {
map<string,dependency>Var7.put(dependencyVar10.getManagementKey(), dependencyVar10);
map<string,exclusion>Var9.putAll(addExclusions(dependencyVar10.getExclusions()));
}
Set<Artifact> set<artifact>Var11 = set<artifact>Literal12;
if (this.ignoreDirect) {
getLog().info(""\tIgnoring Direct Dependencies."");
Set<Artifact> set<artifact>Var13 = set<artifact>Literal14;
set<artifact>Var11.removeAll(set<artifact>Var13);
}
List<Artifact> list<artifact>Var15 = list<artifact>Literal16;
for (Artifact artifactVar17 : list<artifact>Var15) {
getLog().info(StringUtils.stripEnd(getArtifactManagementKey(artifactVar17), "":"") + "" was excluded in DepMgt, but version "" + artifactVar17.getVersion() + "" has been found in the dependency tree."");
booleanVar1 = true;
}
Map<Artifact, Dependency> map<artifact,dependency>Var18 = map<artifact,dependency>Literal19;
for (Map.Entry<Artifact, Dependency> map.entry<artifact,dependency>Var20 : map<artifact,dependency>Var18.entrySet()) {
logMismatch(map.entry<artifact,dependency>Var20.getKey(), map.entry<artifact,dependency>Var20.getValue());
booleanVar1 = true;
}
if (!booleanVar1) {
getLog().info(""\tNone"");
}
} else {
getLog().info(""\tNothing in DepMgt."");
}
return booleanVar1;
}"
12715,MALICIOUS_CODE,EI_EXPOSE_REP,FP,mavendp,675,"return this.fileMappers;
","public FileMapper[] getFileMappers() {
return this.fileMappers;
}","public FileMapper[] getFileMappers() {
return this.fileMappers;
}"
12730,BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,mavendp,690,"marker.getParentFile().mkdirs();
","@Override
public void setMarker() throws MojoExecutionException {
File marker = getMarkerFile();
File clearMarker = getMarkerFile(!this.resolved);
try {
marker.getParentFile().mkdirs();
} catch (NullPointerException e) {
}
try {
marker.createNewFile();
if (clearMarker.exists()) {
if (!clearMarker.delete()) {
clearMarker.deleteOnExit();
}
}
} catch (IOException e) {
throw new MojoExecutionException(""Unable to create Marker: "" + marker.getAbsolutePath(), e);
}
}","@Override
public void setMarker() throws MojoExecutionException {
File fileVar1 = fileLiteral2;
File fileVar3 = fileLiteral4;
try {
fileVar1.getParentFile().mkdirs();
} catch (NullPointerException e) {
}
try {
fileVar1.createNewFile();
if (fileVar3.exists()) {
if (!fileVar3.delete()) {
fileVar3.deleteOnExit();
}
}
} catch (IOException e) {
throw new MojoExecutionException(""Unable to create Marker: "" + fileVar1.getAbsolutePath(), e);
}
}"
12743,DODGY_CODE,NP_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD,FP,mavendp,703,"MavenProject pomProject = mavenProjectBuilder.buildFromRepository( pomArtifact, this.remoteRepos, this.local );
","protected Set resolveArtifactDependencies(Artifact artifact) throws ArtifactResolutionException, ArtifactNotFoundException, ProjectBuildingException, InvalidDependencyVersionException {
Artifact pomArtifact = this.factory.createArtifact(artifact.getGroupId(), artifact.getArtifactId(), artifact.getVersion(), """", ""pom"");
MavenProject pomProject = mavenProjectBuilder.buildFromRepository(pomArtifact, this.remoteRepos, this.local);
return resolveDependencyArtifacts(pomProject);
}","protected Set resolveArtifactDependencies(Artifact artifact) throws ArtifactResolutionException, ArtifactNotFoundException, ProjectBuildingException, InvalidDependencyVersionException {
Artifact artifactVar1 = artifactLiteral2;
MavenProject mavenprojectVar3 = mavenprojectLiteral4;
return resolveDependencyArtifacts(mavenprojectVar3);
}"
12753,BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,mavendp,713,"marker.createNewFile();
","public void setMarker() throws MojoExecutionException {
File marker = getMarkerFile();
try {
marker.getParentFile().mkdirs();
} catch (NullPointerException e) {
}
try {
marker.createNewFile();
} catch (IOException e) {
throw new MojoExecutionException(""Unable to create Marker: "" + marker.getAbsolutePath(), e);
}
}","public void setMarker() throws MojoExecutionException {
File fileVar1 = fileLiteral2;
try {
fileVar1.getParentFile().mkdirs();
} catch (NullPointerException e) {
}
try {
fileVar1.createNewFile();
} catch (IOException e) {
throw new MojoExecutionException(""Unable to create Marker: "" + fileVar1.getAbsolutePath(), e);
}
}"
12791,BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,mavendp,751,"marker.getParentFile().mkdirs();
","@Override
public void setMarker() throws MojoExecutionException {
File marker = getMarkerFile();
File clearMarker = getMarkerFile(!this.resolved);
try {
marker.getParentFile().mkdirs();
} catch (NullPointerException e) {
}
try {
marker.createNewFile();
if (clearMarker.exists()) {
if (!clearMarker.delete()) {
clearMarker.deleteOnExit();
}
}
} catch (IOException e) {
throw new MojoExecutionException(""Unable to create Marker: "" + marker.getAbsolutePath(), e);
}
}","@Override
public void setMarker() throws MojoExecutionException {
File fileVar1 = fileLiteral2;
File fileVar3 = fileLiteral4;
try {
fileVar1.getParentFile().mkdirs();
} catch (NullPointerException e) {
}
try {
fileVar1.createNewFile();
if (fileVar3.exists()) {
if (!fileVar3.delete()) {
fileVar3.deleteOnExit();
}
}
} catch (IOException e) {
throw new MojoExecutionException(""Unable to create Marker: "" + fileVar1.getAbsolutePath(), e);
}
}"
12828,DODGY_CODE,UWF_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD,FP,mavendp,788,protected boolean outputAbsoluteArtifactFilename;,protected boolean outputAbsoluteArtifactFilename;,protected boolean booleanVar1;
12850,CORRECTNESS,UWF_UNWRITTEN_FIELD,FP,mavendp,810,boolean attach;,boolean attach;,boolean booleanVar1;
12851,CORRECTNESS,NP_UNWRITTEN_FIELD,FP,mavendp,811,"projectHelper.attachArtifact( project, attachedFile, ""classpath"" );
","protected void attachFile(String cpString) throws MojoExecutionException {
File attachedFile = new File(project.getBuild().getDirectory(), ""classpath"");
storeClasspathFile(cpString, attachedFile);
projectHelper.attachArtifact(project, attachedFile, ""classpath"");
}","protected void attachFile(String cpString) throws MojoExecutionException {
File fileVar1 = fileLiteral2;
storeClasspathFile(cpString, fileVar1);
projectHelper.attachArtifact(project, fileVar1, ""classpath"");
}"
12855,CORRECTNESS,UWF_UNWRITTEN_FIELD,FP,mavendp,815,"private Map<String, ArtifactRepositoryLayout> repositoryLayouts;","private Map<String, ArtifactRepositoryLayout> repositoryLayouts;","private Map<String, ArtifactRepositoryLayout> map<string,artifactrepositorylayout>Var1;"
12868,CORRECTNESS,NP_UNWRITTEN_FIELD,FP,mavendp,828,"artifactRepositoryManager.createArtifactRepository( local.getId(), url, local.getLayout(),
","protected ArtifactRepository getLocal() {
if (this.overrideLocalRepository != null) {
return this.overrideLocalRepository;
}
ArtifactRepository local = super.getLocal();
if (this.localRepositoryDirectory != null) {
String url = ""file://"" + this.localRepositoryDirectory.getAbsolutePath();
this.overrideLocalRepository = artifactRepositoryManager.createArtifactRepository(local.getId(), url, local.getLayout(), local.getSnapshots(), local.getReleases());
this.getLog().debug(""Execution local repository is at: "" + this.overrideLocalRepository.getBasedir());
} else {
this.overrideLocalRepository = local;
}
return this.overrideLocalRepository;
}","protected ArtifactRepository getLocal() {
if (this.overrideLocalRepository != null) {
return this.overrideLocalRepository;
}
ArtifactRepository artifactrepositoryVar1 = artifactrepositoryLiteral2;
if (this.localRepositoryDirectory != null) {
String stringVar3 = stringLiteral4;
this.overrideLocalRepository = artifactRepositoryManager.createArtifactRepository(artifactrepositoryVar1.getId(), stringVar3, artifactrepositoryVar1.getLayout(), artifactrepositoryVar1.getSnapshots(), artifactrepositoryVar1.getReleases());
this.getLog().debug(""Execution local repository is at: "" + this.overrideLocalRepository.getBasedir());
} else {
this.overrideLocalRepository = artifactrepositoryVar1;
}
return this.overrideLocalRepository;
}"
12869,BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,mavendp,829,"artifactItem.getOutputDirectory().mkdirs();
","protected List<ArtifactItem> getProcessedArtifactItems(boolean removeVersion) throws MojoExecutionException {
if (artifactItems == null || artifactItems.size() < 1) {
throw new MojoExecutionException(""There are no artifactItems configured."");
}
for (ArtifactItem artifactItem : artifactItems) {
this.getLog().info(""Configured Artifact: "" + artifactItem.toString());
if (artifactItem.getOutputDirectory() == null) {
artifactItem.setOutputDirectory(this.outputDirectory);
}
artifactItem.getOutputDirectory().mkdirs();
if (StringUtils.isEmpty(artifactItem.getVersion())) {
fillMissingArtifactVersion(artifactItem);
}
artifactItem.setArtifact(this.getArtifact(artifactItem));
if (StringUtils.isEmpty(artifactItem.getDestFileName())) {
artifactItem.setDestFileName(DependencyUtil.getFormattedFileName(artifactItem.getArtifact(), removeVersion));
}
try {
artifactItem.setNeedsProcessing(checkIfProcessingNeeded(artifactItem));
} catch (ArtifactFilterException e) {
throw new MojoExecutionException(e.getMessage(), e);
}
}
return artifactItems;
}","protected List<ArtifactItem> getProcessedArtifactItems(boolean removeVersion) throws MojoExecutionException {
if (artifactItems == null || artifactItems.size() < 1) {
throw new MojoExecutionException(""There are no artifactItems configured."");
}
for (ArtifactItem artifactitemVar1 : artifactItems) {
this.getLog().info(""Configured Artifact: "" + artifactitemVar1.toString());
if (artifactitemVar1.getOutputDirectory() == null) {
artifactitemVar1.setOutputDirectory(this.outputDirectory);
}
artifactitemVar1.getOutputDirectory().mkdirs();
if (StringUtils.isEmpty(artifactitemVar1.getVersion())) {
fillMissingArtifactVersion(artifactitemVar1);
}
artifactitemVar1.setArtifact(this.getArtifact(artifactitemVar1));
if (StringUtils.isEmpty(artifactitemVar1.getDestFileName())) {
artifactitemVar1.setDestFileName(DependencyUtil.getFormattedFileName(artifactitemVar1.getArtifact(), removeVersion));
}
try {
artifactitemVar1.setNeedsProcessing(checkIfProcessingNeeded(artifactitemVar1));
} catch (ArtifactFilterException e) {
throw new MojoExecutionException(e.getMessage(), e);
}
}
return artifactItems;
}"
12870,CORRECTNESS,UWF_UNWRITTEN_FIELD,FP,mavendp,830,private ArtifactRepositoryFactory artifactRepositoryManager;,private ArtifactRepositoryFactory artifactRepositoryManager;,private ArtifactRepositoryFactory artifactrepositoryfactoryVar1;
12973,BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,mavendp,933,"markerFile.createNewFile();
","public static void unpackFile(Artifact artifact, File unpackDirectory, File markersDirectory, ArchiverManager archiverManager, Log log, boolean overWrite) throws MojoExecutionException {
markersDirectory.mkdirs();
File markerFile = new File(markersDirectory, artifact.getId().replace(':', '-') + "".unpacked"");
if (!markerFile.exists() || overWrite) {
try {
unpackDirectory.mkdirs();
unpack(artifact.getFile(), unpackDirectory, archiverManager, log);
markerFile.getParentFile().mkdirs();
markerFile.createNewFile();
} catch (IOException e) {
throw new MojoExecutionException(""Error creating marker file: "" + markerFile);
}
} else {
log.info(artifact.getFile().getName() + "" already unpacked."");
}
}","public static void unpackFile(Artifact artifact, File unpackDirectory, File markersDirectory, ArchiverManager archiverManager, Log log, boolean overWrite) throws MojoExecutionException {
markersDirectory.mkdirs();
File fileVar1 = fileLiteral2;
if (!fileVar1.exists() || overWrite) {
try {
unpackDirectory.mkdirs();
unpack(artifact.getFile(), unpackDirectory, archiverManager, log);
fileVar1.getParentFile().mkdirs();
fileVar1.createNewFile();
} catch (IOException e) {
throw new MojoExecutionException(""Error creating marker file: "" + fileVar1);
}
} else {
log.info(artifact.getFile().getName() + "" already unpacked."");
}
}"
12977,BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,mavendp,937,"marker.createNewFile();
","public void setMarker() throws MojoExecutionException {
File marker = getMarkerFile();
marker.getParentFile().mkdirs();
try {
marker.createNewFile();
} catch (IOException e) {
throw new MojoExecutionException(""Unable to create Marker: "" + marker.getAbsolutePath(), e);
}
}","public void setMarker() throws MojoExecutionException {
File fileVar1 = fileLiteral2;
fileVar1.getParentFile().mkdirs();
try {
fileVar1.createNewFile();
} catch (IOException e) {
throw new MojoExecutionException(""Unable to create Marker: "" + fileVar1.getAbsolutePath(), e);
}
}"
12985,DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,mavendp,945,"unArchiver = archiverManager.getUnArchiver( file );
","protected void unpack(Artifact artifact, String type, File location, String includes, String excludes, String encoding, FileMapper[] fileMappers) throws MojoExecutionException {
File file = artifact.getFile();
try {
logUnpack(file, location, includes, excludes);
location.mkdirs();
if (!location.exists()) {
throw new MojoExecutionException(""Location to write unpacked files to could not be created: "" + location);
}
if (file.isDirectory()) {
// usual case is a future jar packaging, but there are special cases: classifier and other packaging
throw new MojoExecutionException(""Artifact has not been packaged yet. When used on reactor artifact, "" + ""unpack should be executed after packaging: see MDEP-98."");
}
UnArchiver unArchiver;
try {
unArchiver = archiverManager.getUnArchiver(type);
getLog().debug(""Found unArchiver by type: "" + unArchiver);
} catch (NoSuchArchiverException e) {
unArchiver = archiverManager.getUnArchiver(file);
getLog().debug(""Found unArchiver by extension: "" + unArchiver);
}
if (encoding != null && unArchiver instanceof ZipUnArchiver) {
((ZipUnArchiver) unArchiver).setEncoding(encoding);
getLog().info(""Unpacks '"" + type + ""' with encoding '"" + encoding + ""'."");
}
unArchiver.setIgnorePermissions(ignorePermissions);
unArchiver.setSourceFile(file);
unArchiver.setDestDirectory(location);
if (StringUtils.isNotEmpty(excludes) || StringUtils.isNotEmpty(includes)) {
IncludeExcludeFileSelector[] selectors = new IncludeExcludeFileSelector[] { new IncludeExcludeFileSelector() };
if (StringUtils.isNotEmpty(excludes)) {
selectors[0].setExcludes(excludes.split("",""));
}
if (StringUtils.isNotEmpty(includes)) {
selectors[0].setIncludes(includes.split("",""));
}
unArchiver.setFileSelectors(selectors);
}
if (this.silent) {
silenceUnarchiver(unArchiver);
}
unArchiver.setFileMappers(fileMappers);
unArchiver.extract();
} catch (NoSuchArchiverException e) {
throw new MojoExecutionException(""Unknown archiver type"", e);
} catch (ArchiverException e) {
throw new MojoExecutionException(""Error unpacking file: "" + file + "" to: "" + location + System.lineSeparator() + e.toString(), e);
}
}","protected void unpack(Artifact artifact, String type, File location, String includes, String excludes, String encoding, FileMapper[] fileMappers) throws MojoExecutionException {
File fileVar1 = fileLiteral2;
try {
logUnpack(fileVar1, location, includes, excludes);
location.mkdirs();
if (!location.exists()) {
throw new MojoExecutionException(""Location to write unpacked files to could not be created: "" + location);
}
if (fileVar1.isDirectory()) {
// usual case is a future jar packaging, but there are special cases: classifier and other packaging
throw new MojoExecutionException(""Artifact has not been packaged yet. When used on reactor artifact, "" + ""unpack should be executed after packaging: see MDEP-98."");
}
UnArchiver unarchiverVar3;
try {
unarchiverVar3 = archiverManager.getUnArchiver(type);
getLog().debug(""Found unArchiver by type: "" + unarchiverVar3);
} catch (NoSuchArchiverException e) {
unarchiverVar3 = archiverManager.getUnArchiver(fileVar1);
getLog().debug(""Found unArchiver by extension: "" + unarchiverVar3);
}
if (encoding != null && unarchiverVar3 instanceof ZipUnArchiver) {
((ZipUnArchiver) unarchiverVar3).setEncoding(encoding);
getLog().info(""Unpacks '"" + type + ""' with encoding '"" + encoding + ""'."");
}
unarchiverVar3.setIgnorePermissions(ignorePermissions);
unarchiverVar3.setSourceFile(fileVar1);
unarchiverVar3.setDestDirectory(location);
if (StringUtils.isNotEmpty(excludes) || StringUtils.isNotEmpty(includes)) {
IncludeExcludeFileSelector[] includeexcludefileselectorArrayVar4 = includeexcludefileselectorArrayLiteral5;
if (StringUtils.isNotEmpty(excludes)) {
includeexcludefileselectorArrayVar4[0].setExcludes(excludes.split("",""));
}
if (StringUtils.isNotEmpty(includes)) {
includeexcludefileselectorArrayVar4[0].setIncludes(includes.split("",""));
}
unarchiverVar3.setFileSelectors(includeexcludefileselectorArrayVar4);
}
if (this.silent) {
silenceUnarchiver(unarchiverVar3);
}
unarchiverVar3.setFileMappers(fileMappers);
unarchiverVar3.extract();
} catch (NoSuchArchiverException e) {
throw new MojoExecutionException(""Unknown archiver type"", e);
} catch (ArchiverException e) {
throw new MojoExecutionException(""Error unpacking file: "" + fileVar1 + "" to: "" + location + System.lineSeparator() + e.toString(), e);
}
}"
12990,DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,FP,mavendp,950,"if ( artifact != null )
","private ProjectBuildingRequest makeBuildingRequest() throws MojoExecutionException, MojoFailureException {
if (artifact == null) {
throw new MojoFailureException(""You must specify an artifact, "" + ""e.g. -Dartifact=org.apache.maven.plugins:maven-downloader-plugin:1.0"");
}
if (artifact != null) {
String[] tokens = artifact.split("":"");
if (tokens.length < 3 || tokens.length > 5) {
throw new MojoFailureException(""Invalid artifact, you must specify "" + ""groupId:artifactId:version[:packaging[:classifier]] "" + artifact);
}
coordinate.setGroupId(tokens[0]);
coordinate.setArtifactId(tokens[1]);
coordinate.setVersion(tokens[2]);
if (tokens.length >= 4) {
coordinate.setType(tokens[3]);
}
if (tokens.length == 5) {
coordinate.setClassifier(tokens[4]);
}
}
ArtifactRepositoryPolicy always = new ArtifactRepositoryPolicy(true, ArtifactRepositoryPolicy.UPDATE_POLICY_ALWAYS, ArtifactRepositoryPolicy.CHECKSUM_POLICY_WARN);
List<ArtifactRepository> repoList = new ArrayList<>();
if (pomRemoteRepositories != null) {
repoList.addAll(pomRemoteRepositories);
}
if (remoteRepositories != null) {
// Use the same format as in the deploy plugin id::layout::url
String[] repos = remoteRepositories.split("","");
for (String repo : repos) {
repoList.add(parseRepository(repo, always));
}
}
ProjectBuildingRequest buildingRequest = new DefaultProjectBuildingRequest(session.getProjectBuildingRequest());
Settings settings = session.getSettings();
repositorySystem.injectMirror(repoList, settings.getMirrors());
repositorySystem.injectProxy(repoList, settings.getProxies());
repositorySystem.injectAuthentication(repoList, settings.getServers());
buildingRequest.setRemoteRepositories(repoList);
return buildingRequest;
}","private ProjectBuildingRequest makeBuildingRequest() throws MojoExecutionException, MojoFailureException {
if (artifact == null) {
throw new MojoFailureException(""You must specify an artifact, "" + ""e.g. -Dartifact=org.apache.maven.plugins:maven-downloader-plugin:1.0"");
}
if (artifact != null) {
String[] stringArrayVar1 = stringArrayLiteral2;
if (stringArrayVar1.length < 3 || stringArrayVar1.length > 5) {
throw new MojoFailureException(""Invalid artifact, you must specify "" + ""groupId:artifactId:version[:packaging[:classifier]] "" + artifact);
}
coordinate.setGroupId(stringArrayVar1[0]);
coordinate.setArtifactId(stringArrayVar1[1]);
coordinate.setVersion(stringArrayVar1[2]);
if (stringArrayVar1.length >= 4) {
coordinate.setType(stringArrayVar1[3]);
}
if (stringArrayVar1.length == 5) {
coordinate.setClassifier(stringArrayVar1[4]);
}
}
ArtifactRepositoryPolicy artifactrepositorypolicyVar3 = artifactrepositorypolicyLiteral4;
List<ArtifactRepository> list<artifactrepository>Var5 = list<artifactrepository>Literal6;
if (pomRemoteRepositories != null) {
list<artifactrepository>Var5.addAll(pomRemoteRepositories);
}
if (remoteRepositories != null) {
// Use the same format as in the deploy plugin id::layout::url
String[] stringArrayVar7 = stringArrayLiteral8;
for (String stringVar9 : stringArrayVar7) {
list<artifactrepository>Var5.add(parseRepository(stringVar9, artifactrepositorypolicyVar3));
}
}
ProjectBuildingRequest projectbuildingrequestVar10 = projectbuildingrequestLiteral11;
Settings settingsVar12 = settingsLiteral13;
repositorySystem.injectMirror(list<artifactrepository>Var5, settingsVar12.getMirrors());
repositorySystem.injectProxy(list<artifactrepository>Var5, settingsVar12.getProxies());
repositorySystem.injectAuthentication(list<artifactrepository>Var5, settingsVar12.getServers());
projectbuildingrequestVar10.setRemoteRepositories(list<artifactrepository>Var5);
return projectbuildingrequestVar10;
}"
13006,PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,FP,mavendp,966,"private class ModuleDescriptor
{
String name;
boolean automatic = true;
","public String getOutput(boolean outputAbsoluteArtifactFilename, boolean theOutputScope, boolean theSort) {
StringBuilder sb = new StringBuilder();
sb.append(System.lineSeparator());
sb.append(""The following files have been resolved:"");
sb.append(System.lineSeparator());
if (results.getResolvedDependencies() == null || results.getResolvedDependencies().isEmpty()) {
sb.append(""   none"");
sb.append(System.lineSeparator());
} else {
sb.append(buildArtifactListOutput(results.getResolvedDependencies(), outputAbsoluteArtifactFilename, theOutputScope, theSort));
}
if (results.getSkippedDependencies() != null && !results.getSkippedDependencies().isEmpty()) {
sb.append(System.lineSeparator());
sb.append(""The following files were skipped:"");
sb.append(System.lineSeparator());
Set<Artifact> skippedDependencies = new LinkedHashSet<>();
skippedDependencies.addAll(results.getSkippedDependencies());
sb.append(buildArtifactListOutput(skippedDependencies, outputAbsoluteArtifactFilename, theOutputScope, theSort));
}
if (results.getUnResolvedDependencies() != null && !results.getUnResolvedDependencies().isEmpty()) {
sb.append(System.lineSeparator());
sb.append(""The following files have NOT been resolved:"");
sb.append(System.lineSeparator());
Set<Artifact> unResolvedDependencies = new LinkedHashSet<>();
unResolvedDependencies.addAll(results.getUnResolvedDependencies());
sb.append(buildArtifactListOutput(unResolvedDependencies, outputAbsoluteArtifactFilename, theOutputScope, theSort));
}
sb.append(System.lineSeparator());
return sb.toString();
}","public String getOutput(boolean outputAbsoluteArtifactFilename, boolean theOutputScope, boolean theSort) {
StringBuilder stringbuilderVar1 = stringbuilderLiteral2;
stringbuilderVar1.append(System.lineSeparator());
stringbuilderVar1.append(""The following files have been resolved:"");
stringbuilderVar1.append(System.lineSeparator());
if (results.getResolvedDependencies() == null || results.getResolvedDependencies().isEmpty()) {
stringbuilderVar1.append(""   none"");
stringbuilderVar1.append(System.lineSeparator());
} else {
stringbuilderVar1.append(buildArtifactListOutput(results.getResolvedDependencies(), outputAbsoluteArtifactFilename, theOutputScope, theSort));
}
if (results.getSkippedDependencies() != null && !results.getSkippedDependencies().isEmpty()) {
stringbuilderVar1.append(System.lineSeparator());
stringbuilderVar1.append(""The following files were skipped:"");
stringbuilderVar1.append(System.lineSeparator());
Set<Artifact> set<artifact>Var3 = set<artifact>Literal4;
set<artifact>Var3.addAll(results.getSkippedDependencies());
stringbuilderVar1.append(buildArtifactListOutput(set<artifact>Var3, outputAbsoluteArtifactFilename, theOutputScope, theSort));
}
if (results.getUnResolvedDependencies() != null && !results.getUnResolvedDependencies().isEmpty()) {
stringbuilderVar1.append(System.lineSeparator());
stringbuilderVar1.append(""The following files have NOT been resolved:"");
stringbuilderVar1.append(System.lineSeparator());
Set<Artifact> set<artifact>Var5 = set<artifact>Literal4;
set<artifact>Var5.addAll(results.getUnResolvedDependencies());
stringbuilderVar1.append(buildArtifactListOutput(set<artifact>Var5, outputAbsoluteArtifactFilename, theOutputScope, theSort));
}
stringbuilderVar1.append(System.lineSeparator());
return stringbuilderVar1.toString();
}"
13076,BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,mavendp,1036,"location.mkdirs();
","protected void unpack(Artifact artifact, String type, File location, String includes, String excludes, String encoding, FileMapper[] fileMappers) throws MojoExecutionException {
File file = artifact.getFile();
try {
logUnpack(file, location, includes, excludes);
location.mkdirs();
if (!location.exists()) {
throw new MojoExecutionException(""Location to write unpacked files to could not be created: "" + location);
}
if (file.isDirectory()) {
// usual case is a future jar packaging, but there are special cases: classifier and other packaging
throw new MojoExecutionException(""Artifact has not been packaged yet. When used on reactor artifact, "" + ""unpack should be executed after packaging: see MDEP-98."");
}
UnArchiver unArchiver;
try {
unArchiver = archiverManager.getUnArchiver(type);
getLog().debug(""Found unArchiver by type: "" + unArchiver);
} catch (NoSuchArchiverException e) {
unArchiver = archiverManager.getUnArchiver(file);
getLog().debug(""Found unArchiver by extension: "" + unArchiver);
}
if (encoding != null && unArchiver instanceof ZipUnArchiver) {
((ZipUnArchiver) unArchiver).setEncoding(encoding);
getLog().info(""Unpacks '"" + type + ""' with encoding '"" + encoding + ""'."");
}
unArchiver.setIgnorePermissions(ignorePermissions);
unArchiver.setSourceFile(file);
unArchiver.setDestDirectory(location);
if (StringUtils.isNotEmpty(excludes) || StringUtils.isNotEmpty(includes)) {
IncludeExcludeFileSelector[] selectors = new IncludeExcludeFileSelector[] { new IncludeExcludeFileSelector() };
if (StringUtils.isNotEmpty(excludes)) {
selectors[0].setExcludes(excludes.split("",""));
}
if (StringUtils.isNotEmpty(includes)) {
selectors[0].setIncludes(includes.split("",""));
}
unArchiver.setFileSelectors(selectors);
}
if (this.silent) {
silenceUnarchiver(unArchiver);
}
unArchiver.setFileMappers(fileMappers);
unArchiver.extract();
} catch (NoSuchArchiverException e) {
throw new MojoExecutionException(""Unknown archiver type"", e);
} catch (ArchiverException e) {
throw new MojoExecutionException(""Error unpacking file: "" + file + "" to: "" + location + System.lineSeparator() + e.toString(), e);
}
}","protected void unpack(Artifact artifact, String type, File location, String includes, String excludes, String encoding, FileMapper[] fileMappers) throws MojoExecutionException {
File fileVar1 = fileLiteral2;
try {
logUnpack(fileVar1, location, includes, excludes);
location.mkdirs();
if (!location.exists()) {
throw new MojoExecutionException(""Location to write unpacked files to could not be created: "" + location);
}
if (fileVar1.isDirectory()) {
// usual case is a future jar packaging, but there are special cases: classifier and other packaging
throw new MojoExecutionException(""Artifact has not been packaged yet. When used on reactor artifact, "" + ""unpack should be executed after packaging: see MDEP-98."");
}
UnArchiver unarchiverVar3;
try {
unarchiverVar3 = archiverManager.getUnArchiver(type);
getLog().debug(""Found unArchiver by type: "" + unarchiverVar3);
} catch (NoSuchArchiverException e) {
unarchiverVar3 = archiverManager.getUnArchiver(fileVar1);
getLog().debug(""Found unArchiver by extension: "" + unarchiverVar3);
}
if (encoding != null && unarchiverVar3 instanceof ZipUnArchiver) {
((ZipUnArchiver) unarchiverVar3).setEncoding(encoding);
getLog().info(""Unpacks '"" + type + ""' with encoding '"" + encoding + ""'."");
}
unarchiverVar3.setIgnorePermissions(ignorePermissions);
unarchiverVar3.setSourceFile(fileVar1);
unarchiverVar3.setDestDirectory(location);
if (StringUtils.isNotEmpty(excludes) || StringUtils.isNotEmpty(includes)) {
IncludeExcludeFileSelector[] includeexcludefileselectorArrayVar4 = includeexcludefileselectorArrayLiteral5;
if (StringUtils.isNotEmpty(excludes)) {
includeexcludefileselectorArrayVar4[0].setExcludes(excludes.split("",""));
}
if (StringUtils.isNotEmpty(includes)) {
includeexcludefileselectorArrayVar4[0].setIncludes(includes.split("",""));
}
unarchiverVar3.setFileSelectors(includeexcludefileselectorArrayVar4);
}
if (this.silent) {
silenceUnarchiver(unarchiverVar3);
}
unarchiverVar3.setFileMappers(fileMappers);
unarchiverVar3.extract();
} catch (NoSuchArchiverException e) {
throw new MojoExecutionException(""Unknown archiver type"", e);
} catch (ArchiverException e) {
throw new MojoExecutionException(""Error unpacking file: "" + fileVar1 + "" to: "" + location + System.lineSeparator() + e.toString(), e);
}
}"
13077,DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,mavendp,1037,"unArchiver = archiverManager.getUnArchiver( file );
","protected void unpack(Artifact artifact, String type, File location, String includes, String excludes, String encoding, FileMapper[] fileMappers) throws MojoExecutionException {
File file = artifact.getFile();
try {
logUnpack(file, location, includes, excludes);
location.mkdirs();
if (!location.exists()) {
throw new MojoExecutionException(""Location to write unpacked files to could not be created: "" + location);
}
if (file.isDirectory()) {
// usual case is a future jar packaging, but there are special cases: classifier and other packaging
throw new MojoExecutionException(""Artifact has not been packaged yet. When used on reactor artifact, "" + ""unpack should be executed after packaging: see MDEP-98."");
}
UnArchiver unArchiver;
try {
unArchiver = archiverManager.getUnArchiver(type);
getLog().debug(""Found unArchiver by type: "" + unArchiver);
} catch (NoSuchArchiverException e) {
unArchiver = archiverManager.getUnArchiver(file);
getLog().debug(""Found unArchiver by extension: "" + unArchiver);
}
if (encoding != null && unArchiver instanceof ZipUnArchiver) {
((ZipUnArchiver) unArchiver).setEncoding(encoding);
getLog().info(""Unpacks '"" + type + ""' with encoding '"" + encoding + ""'."");
}
unArchiver.setIgnorePermissions(ignorePermissions);
unArchiver.setSourceFile(file);
unArchiver.setDestDirectory(location);
if (StringUtils.isNotEmpty(excludes) || StringUtils.isNotEmpty(includes)) {
IncludeExcludeFileSelector[] selectors = new IncludeExcludeFileSelector[] { new IncludeExcludeFileSelector() };
if (StringUtils.isNotEmpty(excludes)) {
selectors[0].setExcludes(excludes.split("",""));
}
if (StringUtils.isNotEmpty(includes)) {
selectors[0].setIncludes(includes.split("",""));
}
unArchiver.setFileSelectors(selectors);
}
if (this.silent) {
silenceUnarchiver(unArchiver);
}
unArchiver.setFileMappers(fileMappers);
unArchiver.extract();
} catch (NoSuchArchiverException e) {
throw new MojoExecutionException(""Unknown archiver type"", e);
} catch (ArchiverException e) {
throw new MojoExecutionException(""Error unpacking file: "" + file + "" to: "" + location + System.lineSeparator() + e.toString(), e);
}
}","protected void unpack(Artifact artifact, String type, File location, String includes, String excludes, String encoding, FileMapper[] fileMappers) throws MojoExecutionException {
File fileVar1 = fileLiteral2;
try {
logUnpack(fileVar1, location, includes, excludes);
location.mkdirs();
if (!location.exists()) {
throw new MojoExecutionException(""Location to write unpacked files to could not be created: "" + location);
}
if (fileVar1.isDirectory()) {
// usual case is a future jar packaging, but there are special cases: classifier and other packaging
throw new MojoExecutionException(""Artifact has not been packaged yet. When used on reactor artifact, "" + ""unpack should be executed after packaging: see MDEP-98."");
}
UnArchiver unarchiverVar3;
try {
unarchiverVar3 = archiverManager.getUnArchiver(type);
getLog().debug(""Found unArchiver by type: "" + unarchiverVar3);
} catch (NoSuchArchiverException e) {
unarchiverVar3 = archiverManager.getUnArchiver(fileVar1);
getLog().debug(""Found unArchiver by extension: "" + unarchiverVar3);
}
if (encoding != null && unarchiverVar3 instanceof ZipUnArchiver) {
((ZipUnArchiver) unarchiverVar3).setEncoding(encoding);
getLog().info(""Unpacks '"" + type + ""' with encoding '"" + encoding + ""'."");
}
unarchiverVar3.setIgnorePermissions(ignorePermissions);
unarchiverVar3.setSourceFile(fileVar1);
unarchiverVar3.setDestDirectory(location);
if (StringUtils.isNotEmpty(excludes) || StringUtils.isNotEmpty(includes)) {
IncludeExcludeFileSelector[] includeexcludefileselectorArrayVar4 = includeexcludefileselectorArrayLiteral5;
if (StringUtils.isNotEmpty(excludes)) {
includeexcludefileselectorArrayVar4[0].setExcludes(excludes.split("",""));
}
if (StringUtils.isNotEmpty(includes)) {
includeexcludefileselectorArrayVar4[0].setIncludes(includes.split("",""));
}
unarchiverVar3.setFileSelectors(includeexcludefileselectorArrayVar4);
}
if (this.silent) {
silenceUnarchiver(unarchiverVar3);
}
unarchiverVar3.setFileMappers(fileMappers);
unarchiverVar3.extract();
} catch (NoSuchArchiverException e) {
throw new MojoExecutionException(""Unknown archiver type"", e);
} catch (ArchiverException e) {
throw new MojoExecutionException(""Error unpacking file: "" + fileVar1 + "" to: "" + location + System.lineSeparator() + e.toString(), e);
}
}"
13089,MALICIOUS_CODE,EI_EXPOSE_REP,FP,mavendp,1049,"return this.fileMappers;
","public FileMapper[] getFileMappers() {
return this.fileMappers;
}","public FileMapper[] getFileMappers() {
return this.fileMappers;
}"
13095,MALICIOUS_CODE,EI_EXPOSE_REP2,FP,mavendp,1055,"this.fileMappers = fileMappers;
","public void setFileMappers(FileMapper[] fileMappers) {
this.fileMappers = fileMappers;
}","public void setFileMappers(FileMapper[] fileMappers) {
this.fileMappers = fileMappers;
}"
13096,MALICIOUS_CODE,EI_EXPOSE_REP,FP,mavendp,1056,"return this.fileMappers;
","public FileMapper[] getFileMappers() {
return this.fileMappers;
}","public FileMapper[] getFileMappers() {
return this.fileMappers;
}"
13100,DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,FP,mavendp,1060,"if ( plugins == null || plugins.isEmpty() )
","@Override
protected void doExecute() throws MojoExecutionException {
try {
final Set<Artifact> plugins = resolvePluginArtifacts();
StringBuilder sb = new StringBuilder();
sb.append(System.lineSeparator());
sb.append(""The following plugins have been resolved:"");
sb.append(System.lineSeparator());
if (plugins == null || plugins.isEmpty()) {
sb.append(""   none"");
sb.append(System.lineSeparator());
} else {
for (Artifact plugin : plugins) {
String artifactFilename = null;
if (outputAbsoluteArtifactFilename) {
try {
artifactFilename = plugin.getFile().getAbsoluteFile().getPath();
} catch (NullPointerException e) {
artifactFilename = null;
}
}
String id = plugin.toString();
sb.append(""   "").append(id).append(outputAbsoluteArtifactFilename ? "":"" + artifactFilename : """").append(System.lineSeparator());
if (!excludeTransitive) {
DefaultDependableCoordinate pluginCoordinate = new DefaultDependableCoordinate();
pluginCoordinate.setGroupId(plugin.getGroupId());
pluginCoordinate.setArtifactId(plugin.getArtifactId());
pluginCoordinate.setVersion(plugin.getVersion());
for (final Artifact artifact : resolveArtifactDependencies(pluginCoordinate)) {
artifactFilename = null;
if (outputAbsoluteArtifactFilename) {
try {
artifactFilename = artifact.getFile().getAbsoluteFile().getPath();
} catch (NullPointerException e) {
artifactFilename = null;
}
}
id = artifact.toString();
sb.append(""      "").append(id).append(outputAbsoluteArtifactFilename ? "":"" + artifactFilename : """").append(System.lineSeparator());
}
}
}
sb.append(System.lineSeparator());
String output = sb.toString();
if (outputFile == null) {
DependencyUtil.log(output, getLog());
} else {
String encoding = Objects.toString(outputEncoding, ""UTF-8"");
DependencyUtil.write(output, outputFile, appendOutput, encoding);
}
}
} catch (IOException | ArtifactFilterException | ArtifactResolverException | DependencyResolverException e) {
throw new MojoExecutionException(e.getMessage(), e);
}
}","@Override
protected void doExecute() throws MojoExecutionException {
try {
final Set<Artifact> set<artifact>Var1 = set<artifact>Literal2;
StringBuilder stringbuilderVar3 = stringbuilderLiteral4;
stringbuilderVar3.append(System.lineSeparator());
stringbuilderVar3.append(""The following plugins have been resolved:"");
stringbuilderVar3.append(System.lineSeparator());
if (set<artifact>Var1 == null || set<artifact>Var1.isEmpty()) {
stringbuilderVar3.append(""   none"");
stringbuilderVar3.append(System.lineSeparator());
} else {
for (Artifact artifactVar5 : set<artifact>Var1) {
String stringVar6 = stringLiteral7;
if (outputAbsoluteArtifactFilename) {
try {
stringVar6 = artifactVar5.getFile().getAbsoluteFile().getPath();
} catch (NullPointerException e) {
stringVar6 = null;
}
}
String stringVar8 = stringLiteral9;
stringbuilderVar3.append(""   "").append(stringVar8).append(outputAbsoluteArtifactFilename ? "":"" + stringVar6 : """").append(System.lineSeparator());
if (!excludeTransitive) {
DefaultDependableCoordinate defaultdependablecoordinateVar10 = defaultdependablecoordinateLiteral11;
defaultdependablecoordinateVar10.setGroupId(artifactVar5.getGroupId());
defaultdependablecoordinateVar10.setArtifactId(artifactVar5.getArtifactId());
defaultdependablecoordinateVar10.setVersion(artifactVar5.getVersion());
for (final Artifact artifactVar12 : resolveArtifactDependencies(defaultdependablecoordinateVar10)) {
stringVar6 = null;
if (outputAbsoluteArtifactFilename) {
try {
stringVar6 = artifactVar12.getFile().getAbsoluteFile().getPath();
} catch (NullPointerException e) {
stringVar6 = null;
}
}
stringVar8 = artifactVar12.toString();
stringbuilderVar3.append(""      "").append(stringVar8).append(outputAbsoluteArtifactFilename ? "":"" + stringVar6 : """").append(System.lineSeparator());
}
}
}
stringbuilderVar3.append(System.lineSeparator());
String stringVar13 = stringLiteral14;
if (outputFile == null) {
DependencyUtil.log(stringVar13, getLog());
} else {
String stringVar15 = stringLiteral16;
DependencyUtil.write(stringVar13, outputFile, appendOutput, stringVar15);
}
}
} catch (IOException | ArtifactFilterException | ArtifactResolverException | DependencyResolverException e) {
throw new MojoExecutionException(e.getMessage(), e);
}
}"
13116,DODGY_CODE,NP_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD,FP,mavendp,1076,"MavenProject pomProject = mavenProjectBuilder.buildFromRepository( pomArtifact, this.remoteRepos, this.local );
","protected Set resolveArtifactDependencies(Artifact artifact) throws ArtifactResolutionException, ArtifactNotFoundException, ProjectBuildingException, InvalidDependencyVersionException {
Artifact pomArtifact = this.factory.createArtifact(artifact.getGroupId(), artifact.getArtifactId(), artifact.getVersion(), """", ""pom"");
MavenProject pomProject = mavenProjectBuilder.buildFromRepository(pomArtifact, this.remoteRepos, this.local);
return resolveDependencyArtifacts(pomProject);
}","protected Set resolveArtifactDependencies(Artifact artifact) throws ArtifactResolutionException, ArtifactNotFoundException, ProjectBuildingException, InvalidDependencyVersionException {
Artifact artifactVar1 = artifactLiteral2;
MavenProject mavenprojectVar3 = mavenprojectLiteral4;
return resolveDependencyArtifacts(mavenprojectVar3);
}"
13137,CORRECTNESS,NP_UNWRITTEN_FIELD,FP,mavendp,1097,"projectHelper.attachArtifact( project, attachedFile, ""classpath"" );
","protected void attachFile(String cpString) throws MojoExecutionException {
File attachedFile = new File(project.getBuild().getDirectory(), ""classpath"");
storeClasspathFile(cpString, attachedFile);
projectHelper.attachArtifact(project, attachedFile, ""classpath"");
}","protected void attachFile(String cpString) throws MojoExecutionException {
File fileVar1 = fileLiteral2;
storeClasspathFile(cpString, fileVar1);
projectHelper.attachArtifact(project, fileVar1, ""classpath"");
}"
13143,PERFORMANCE,SBSC_USE_STRINGBUFFER_CONCATENATION,FP,mavendp,1103,"message += ""  "" + missingArtifact.getId() + ""\n"";
","private void refreshDependenciesForProject(MavenProject project, List exclusionPatterns) throws ArtifactResolutionException, MojoFailureException {
Map deps = createArtifactMap(project);
if (deps.isEmpty()) {
getLog().info(""Nothing to do for project: "" + project.getId());
return;
}
if (!exclusionPatterns.isEmpty()) {
for (Iterator it = exclusionPatterns.iterator(); it.hasNext(); ) {
String excludedKey = (String) it.next();
verbose(""Excluding: "" + excludedKey + "" from refresh operation for project: "" + project.getId());
deps.remove(excludedKey);
}
}
verbose(""Processing dependencies for project: "" + project.getId());
List missingArtifacts = new ArrayList();
for (Iterator it = deps.entrySet().iterator(); it.hasNext(); ) {
Map.Entry entry = (Map.Entry) it.next();
Artifact artifact = (Artifact) entry.getValue();
verbose(""Processing artifact: "" + artifact.getId());
File deleteTarget = findDeleteTarget(artifact);
verbose(""Deleting: "" + deleteTarget);
if (deleteTarget.isDirectory()) {
try {
FileUtils.deleteDirectory(deleteTarget);
} catch (IOException e) {
throw new MojoFailureException(this, ""Cannot delete dependency from the local repository: "" + artifact.getId(), ""Failed to delete: "" + deleteTarget);
}
} else {
deleteTarget.delete();
}
if (reResolve) {
verbose(""Re-resolving."");
artifact.setResolved(false);
try {
resolver.resolveAlways(artifact, project.getRemoteArtifactRepositories(), localRepository);
} catch (ArtifactResolutionException e) {
getLog().debug(e.getMessage());
missingArtifacts.add(artifact);
} catch (ArtifactNotFoundException e) {
getLog().debug(e.getMessage());
missingArtifacts.add(artifact);
}
}
}
if (missingArtifacts.size() > 0) {
String message = ""required artifacts missing:\n"";
for (Iterator i = missingArtifacts.iterator(); i.hasNext(); ) {
Artifact missingArtifact = (Artifact) i.next();
message += ""  "" + missingArtifact.getId() + ""\n"";
}
message += ""\nfor the artifact:"";
throw new ArtifactResolutionException(message, project.getArtifact(), project.getRemoteArtifactRepositories());
}
}","private void refreshDependenciesForProject(MavenProject project, List exclusionPatterns) throws ArtifactResolutionException, MojoFailureException {
Map mapVar1 = mapLiteral2;
if (mapVar1.isEmpty()) {
getLog().info(""Nothing to do for project: "" + project.getId());
return;
}
if (!exclusionPatterns.isEmpty()) {
for (Iterator iteratorVar22 = iteratorLiteral23; iteratorVar3.hasNext(); ) {
String stringVar5 = stringLiteral6;
verbose(""Excluding: "" + stringVar5 + "" from refresh operation for project: "" + project.getId());
mapVar1.remove(stringVar5);
}
}
verbose(""Processing dependencies for project: "" + project.getId());
List listVar7 = listLiteral8;
for (Iterator iteratorVar22 = iteratorLiteral24; iteratorVar3.hasNext(); ) {
Map.Entry map.entryVar10 = map.entryLiteral11;
Artifact artifactVar12 = artifactLiteral13;
verbose(""Processing artifact: "" + artifactVar12.getId());
File fileVar14 = fileLiteral15;
verbose(""Deleting: "" + fileVar14);
if (fileVar14.isDirectory()) {
try {
FileUtils.deleteDirectory(fileVar14);
} catch (IOException e) {
throw new MojoFailureException(this, ""Cannot delete dependency from the local repository: "" + artifactVar12.getId(), ""Failed to delete: "" + fileVar14);
}
} else {
fileVar14.delete();
}
if (reResolve) {
verbose(""Re-resolving."");
artifactVar12.setResolved(false);
try {
resolver.resolveAlways(artifactVar12, project.getRemoteArtifactRepositories(), localRepository);
} catch (ArtifactResolutionException e) {
getLog().debug(e.getMessage());
listVar7.add(artifactVar12);
} catch (ArtifactNotFoundException e) {
getLog().debug(e.getMessage());
listVar7.add(artifactVar12);
}
}
}
if (listVar7.size() > 0) {
String stringVar16 = stringLiteral17;
for (Iterator iteratorVar25 = iteratorLiteral26; iteratorVar18.hasNext(); ) {
Artifact artifactVar20 = artifactLiteral21;
stringVar16 += ""  "" + artifactVar20.getId() + ""\n"";
}
stringVar16 += ""\nfor the artifact:"";
throw new ArtifactResolutionException(stringVar16, project.getArtifact(), project.getRemoteArtifactRepositories());
}
}"
13149,I18N,DM_DEFAULT_ENCODING,FP,mavendp,1109,"writer = new FileWriter( file );
","public synchronized static void write(String string, File file, Log log) throws IOException {
file.getParentFile().mkdirs();
FileWriter writer = null;
try {
writer = new FileWriter(file);
writer.write(string);
} finally {
if (writer != null) {
try {
writer.close();
} catch (IOException exception) {
log.error(""Cannot close file"", exception);
}
}
}
}","public synchronized static void write(String string, File file, Log log) throws IOException {
file.getParentFile().mkdirs();
FileWriter filewriterVar1 = filewriterLiteral2;
try {
filewriterVar1 = new FileWriter(file);
filewriterVar1.write(string);
} finally {
if (filewriterVar1 != null) {
try {
filewriterVar1.close();
} catch (IOException exception) {
log.error(""Cannot close file"", exception);
}
}
}
}"
13151,BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,mavendp,1111,"marker.getParentFile().mkdirs();
","public void setMarker() throws MojoExecutionException {
File marker = getMarkerFile();
try {
marker.getParentFile().mkdirs();
} catch (NullPointerException e) {
}
try {
marker.createNewFile();
} catch (IOException e) {
throw new MojoExecutionException(""Unable to create Marker: "" + marker.getAbsolutePath(), e);
}
}","public void setMarker() throws MojoExecutionException {
File fileVar1 = fileLiteral2;
try {
fileVar1.getParentFile().mkdirs();
} catch (NullPointerException e) {
}
try {
fileVar1.createNewFile();
} catch (IOException e) {
throw new MojoExecutionException(""Unable to create Marker: "" + fileVar1.getAbsolutePath(), e);
}
}"
13155,DODGY_CODE,DLS_DEAD_LOCAL_STORE,FP,mavendp,1115,"Set results = artifacts;
","public Set translate(Set artifacts, Log log) {
Set results = artifacts;
log.debug(""Translating Artifacts using Classifier: "" + this.classifier + "" and Type: "" + this.type);
results = new HashSet();
for (Iterator i = artifacts.iterator(); i.hasNext(); ) {
Artifact artifact = (Artifact) i.next();
String useType = null;
if (StringUtils.isNotEmpty(this.type)) {
useType = this.type;
} else {
useType = artifact.getType();
}
String useClassifier = null;
if (StringUtils.isNotEmpty(this.classifier)) {
useClassifier = this.classifier;
} else {
useClassifier = artifact.getClassifier();
}
Artifact newArtifact = factory.createArtifactWithClassifier(artifact.getGroupId(), artifact.getArtifactId(), artifact.getVersion(), useType, useClassifier);
newArtifact.setScope(artifact.getScope());
results.add(newArtifact);
}
return results;
}","public Set translate(Set artifacts, Log log) {
Set setVar1 = setLiteral2;
log.debug(""Translating Artifacts using Classifier: "" + this.classifier + "" and Type: "" + this.type);
setVar1 = new HashSet();
for (Iterator iteratorVar12 = iteratorLiteral13; iteratorVar3.hasNext(); ) {
Artifact artifactVar5 = artifactLiteral6;
String stringVar7 = stringLiteral8;
if (StringUtils.isNotEmpty(this.type)) {
stringVar7 = this.type;
} else {
stringVar7 = artifactVar5.getType();
}
String stringVar9 = stringLiteral8;
if (StringUtils.isNotEmpty(this.classifier)) {
stringVar9 = this.classifier;
} else {
stringVar9 = artifactVar5.getClassifier();
}
Artifact artifactVar10 = artifactLiteral11;
artifactVar10.setScope(artifactVar5.getScope());
setVar1.add(artifactVar10);
}
return setVar1;
}"
13185,DODGY_CODE,REC_CATCH_EXCEPTION,FP,mavendp,1145,"catch ( Exception e )
","private void silenceUnarchiver(UnArchiver unArchiver) {
try {
Field field = ReflectionUtils.getFieldByNameIncludingSuperclasses(""logger"", unArchiver.getClass());
field.setAccessible(true);
field.set(unArchiver, this.getLog());
} catch (Exception e) {
}
}","private void silenceUnarchiver(UnArchiver unArchiver) {
try {
Field fieldVar1 = fieldLiteral2;
fieldVar1.setAccessible(true);
fieldVar1.set(unArchiver, this.getLog());
} catch (Exception e) {
}
}"
13188,BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,mavendp,1148,"location.mkdirs();
","protected void unpack(Artifact artifact, String type, File location, String includes, String excludes, String encoding, FileMapper[] fileMappers) throws MojoExecutionException {
File file = artifact.getFile();
try {
logUnpack(file, location, includes, excludes);
location.mkdirs();
if (!location.exists()) {
throw new MojoExecutionException(""Location to write unpacked files to could not be created: "" + location);
}
if (file.isDirectory()) {
// usual case is a future jar packaging, but there are special cases: classifier and other packaging
throw new MojoExecutionException(""Artifact has not been packaged yet. When used on reactor artifact, "" + ""unpack should be executed after packaging: see MDEP-98."");
}
UnArchiver unArchiver;
try {
unArchiver = archiverManager.getUnArchiver(type);
getLog().debug(""Found unArchiver by type: "" + unArchiver);
} catch (NoSuchArchiverException e) {
unArchiver = archiverManager.getUnArchiver(file);
getLog().debug(""Found unArchiver by extension: "" + unArchiver);
}
if (encoding != null && unArchiver instanceof ZipUnArchiver) {
((ZipUnArchiver) unArchiver).setEncoding(encoding);
getLog().info(""Unpacks '"" + type + ""' with encoding '"" + encoding + ""'."");
}
unArchiver.setIgnorePermissions(ignorePermissions);
unArchiver.setSourceFile(file);
unArchiver.setDestDirectory(location);
if (StringUtils.isNotEmpty(excludes) || StringUtils.isNotEmpty(includes)) {
IncludeExcludeFileSelector[] selectors = new IncludeExcludeFileSelector[] { new IncludeExcludeFileSelector() };
if (StringUtils.isNotEmpty(excludes)) {
selectors[0].setExcludes(excludes.split("",""));
}
if (StringUtils.isNotEmpty(includes)) {
selectors[0].setIncludes(includes.split("",""));
}
unArchiver.setFileSelectors(selectors);
}
if (this.silent) {
silenceUnarchiver(unArchiver);
}
unArchiver.setFileMappers(fileMappers);
unArchiver.extract();
} catch (NoSuchArchiverException e) {
throw new MojoExecutionException(""Unknown archiver type"", e);
} catch (ArchiverException e) {
throw new MojoExecutionException(""Error unpacking file: "" + file + "" to: "" + location, e);
}
}","protected void unpack(Artifact artifact, String type, File location, String includes, String excludes, String encoding, FileMapper[] fileMappers) throws MojoExecutionException {
File fileVar1 = fileLiteral2;
try {
logUnpack(fileVar1, location, includes, excludes);
location.mkdirs();
if (!location.exists()) {
throw new MojoExecutionException(""Location to write unpacked files to could not be created: "" + location);
}
if (fileVar1.isDirectory()) {
// usual case is a future jar packaging, but there are special cases: classifier and other packaging
throw new MojoExecutionException(""Artifact has not been packaged yet. When used on reactor artifact, "" + ""unpack should be executed after packaging: see MDEP-98."");
}
UnArchiver unarchiverVar3;
try {
unarchiverVar3 = archiverManager.getUnArchiver(type);
getLog().debug(""Found unArchiver by type: "" + unarchiverVar3);
} catch (NoSuchArchiverException e) {
unarchiverVar3 = archiverManager.getUnArchiver(fileVar1);
getLog().debug(""Found unArchiver by extension: "" + unarchiverVar3);
}
if (encoding != null && unarchiverVar3 instanceof ZipUnArchiver) {
((ZipUnArchiver) unarchiverVar3).setEncoding(encoding);
getLog().info(""Unpacks '"" + type + ""' with encoding '"" + encoding + ""'."");
}
unarchiverVar3.setIgnorePermissions(ignorePermissions);
unarchiverVar3.setSourceFile(fileVar1);
unarchiverVar3.setDestDirectory(location);
if (StringUtils.isNotEmpty(excludes) || StringUtils.isNotEmpty(includes)) {
IncludeExcludeFileSelector[] includeexcludefileselectorArrayVar4 = includeexcludefileselectorArrayLiteral5;
if (StringUtils.isNotEmpty(excludes)) {
includeexcludefileselectorArrayVar4[0].setExcludes(excludes.split("",""));
}
if (StringUtils.isNotEmpty(includes)) {
includeexcludefileselectorArrayVar4[0].setIncludes(includes.split("",""));
}
unarchiverVar3.setFileSelectors(includeexcludefileselectorArrayVar4);
}
if (this.silent) {
silenceUnarchiver(unarchiverVar3);
}
unarchiverVar3.setFileMappers(fileMappers);
unarchiverVar3.extract();
} catch (NoSuchArchiverException e) {
throw new MojoExecutionException(""Unknown archiver type"", e);
} catch (ArchiverException e) {
throw new MojoExecutionException(""Error unpacking file: "" + fileVar1 + "" to: "" + location, e);
}
}"
13204,DODGY_CODE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,FP,mavendp,1164,"@Parameter
protected boolean useJvmChmod = true;","@Parameter
protected boolean useJvmChmod = true;","@Parameter
protected boolean booleanVar1 = booleanLiteral2;"
13206,PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,FP,mavendp,1166,"private class ModuleDescriptor
{
String name;
boolean automatic = true;
","private StringBuilder buildArtifactListOutput(Set<Artifact> artifacts, boolean outputAbsoluteArtifactFilename, boolean theOutputScope, boolean theSort) {
StringBuilder sb = new StringBuilder();
List<String> artifactStringList = new ArrayList<>();
for (Artifact artifact : artifacts) {
MessageBuilder messageBuilder = MessageUtils.buffer();
messageBuilder.a(""   "");
if (theOutputScope) {
messageBuilder.a(artifact.toString());
} else {
messageBuilder.a(artifact.getId());
}
if (outputAbsoluteArtifactFilename) {
try {
String artifactFilename = artifact.getFile().getAbsoluteFile().getPath();
messageBuilder.a(':').a(artifactFilename);
} catch (NullPointerException e) {
}
}
if (theOutputScope && artifact.isOptional()) {
messageBuilder.a("" (optional)"");
}
if (artifact.getFile() != null) {
ModuleDescriptor moduleDescriptor = getModuleDescriptor(artifact.getFile());
if (moduleDescriptor != null) {
messageBuilder.project("" -- module "" + moduleDescriptor.name);
if (moduleDescriptor.automatic) {
if (""MANIFEST"".equals(moduleDescriptor.moduleNameSource)) {
messageBuilder.strong("" [auto]"");
} else {
messageBuilder.warning("" (auto)"");
}
}
}
}
artifactStringList.add(messageBuilder + System.lineSeparator());
}
if (theSort) {
Collections.sort(artifactStringList);
}
for (String artifactString : artifactStringList) {
sb.append(artifactString);
}
return sb;
}","private StringBuilder buildArtifactListOutput(Set<Artifact> artifacts, boolean outputAbsoluteArtifactFilename, boolean theOutputScope, boolean theSort) {
StringBuilder stringbuilderVar1 = stringbuilderLiteral2;
List<String> list<string>Var3 = list<string>Literal4;
for (Artifact artifactVar5 : artifacts) {
MessageBuilder messagebuilderVar6 = messagebuilderLiteral7;
messagebuilderVar6.a(""   "");
if (theOutputScope) {
messagebuilderVar6.a(artifactVar5.toString());
} else {
messagebuilderVar6.a(artifactVar5.getId());
}
if (outputAbsoluteArtifactFilename) {
try {
String stringVar8 = stringLiteral9;
messagebuilderVar6.a(':').a(stringVar8);
} catch (NullPointerException e) {
}
}
if (theOutputScope && artifactVar5.isOptional()) {
messagebuilderVar6.a("" (optional)"");
}
if (artifactVar5.getFile() != null) {
ModuleDescriptor moduledescriptorVar10 = moduledescriptorLiteral11;
if (moduledescriptorVar10 != null) {
messagebuilderVar6.project("" -- module "" + moduledescriptorVar10.name);
if (moduledescriptorVar10.automatic) {
if (""MANIFEST"".equals(moduledescriptorVar10.moduleNameSource)) {
messagebuilderVar6.strong("" [auto]"");
} else {
messagebuilderVar6.warning("" (auto)"");
}
}
}
}
list<string>Var3.add(messagebuilderVar6 + System.lineSeparator());
}
if (theSort) {
Collections.sort(list<string>Var3);
}
for (String stringVar12 : list<string>Var3) {
stringbuilderVar1.append(stringVar12);
}
return stringbuilderVar1;
}"
13299,I18N,DM_DEFAULT_ENCODING,FP,mavendp,1259,"r = new BufferedReader( new FileReader( outputFile ) );
","protected String readClasspathFile() throws IOException {
if (outputFile == null) {
throw new IllegalArgumentException(""The outputFile parameter cannot be null if the file is intended to be read."");
}
if (!outputFile.isFile()) {
return null;
}
StringBuilder sb = new StringBuilder();
BufferedReader r = null;
try {
r = new BufferedReader(new FileReader(outputFile));
String l;
while ((l = r.readLine()) != null) {
sb.append(l);
}
return sb.toString();
} finally {
IOUtil.close(r);
}
}","protected String readClasspathFile() throws IOException {
if (outputFile == null) {
throw new IllegalArgumentException(""The outputFile parameter cannot be null if the file is intended to be read."");
}
if (!outputFile.isFile()) {
return null;
}
StringBuilder stringbuilderVar1 = stringbuilderLiteral2;
BufferedReader bufferedreaderVar3 = bufferedreaderLiteral4;
try {
bufferedreaderVar3 = new BufferedReader(new FileReader(outputFile));
String stringVar5;
while ((stringVar5 = bufferedreaderVar3.readLine()) != null) {
stringbuilderVar1.append(stringVar5);
}
return stringbuilderVar1.toString();
} finally {
IOUtil.close(bufferedreaderVar3);
}
}"
13307,CORRECTNESS,NP_NULL_ON_SOME_PATH,FP,mavendp,1267,"return recommendedVersion.compareTo( theVersion ) <= 0;
","public static boolean containsVersion(VersionRange allowedRange, ArtifactVersion theVersion) {
ArtifactVersion recommendedVersion = allowedRange.getRecommendedVersion();
if (recommendedVersion == null) {
@SuppressWarnings(""unchecked"")
List<Restriction> restrictions = allowedRange.getRestrictions();
for (Restriction restriction : restrictions) {
if (restriction.containsVersion(theVersion)) {
return true;
}
}
}
return recommendedVersion.compareTo(theVersion) <= 0;
}","public static boolean containsVersion(VersionRange allowedRange, ArtifactVersion theVersion) {
ArtifactVersion artifactversionVar1 = artifactversionLiteral2;
if (artifactversionVar1 == null) {
@SuppressWarnings(""unchecked"")
List<Restriction> list<restriction>Var3 = list<restriction>Literal4;
for (Restriction restrictionVar5 : list<restriction>Var3) {
if (restrictionVar5.containsVersion(theVersion)) {
return true;
}
}
}
return artifactversionVar1.compareTo(theVersion) <= 0;
}"
13351,DODGY_CODE,REC_CATCH_EXCEPTION,FP,mavendp,1311,"catch ( Exception e )
","private void silenceUnarchiver(UnArchiver unArchiver) {
try {
Field field = ReflectionUtils.getFieldByNameIncludingSuperclasses(""logger"", unArchiver.getClass());
field.setAccessible(true);
field.set(unArchiver, this.getLog());
} catch (Exception e) {
}
}","private void silenceUnarchiver(UnArchiver unArchiver) {
try {
Field fieldVar1 = fieldLiteral2;
fieldVar1.setAccessible(true);
fieldVar1.set(unArchiver, this.getLog());
} catch (Exception e) {
}
}"
13363,DODGY_CODE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,FP,mavendp,1323,"@Parameter
protected boolean useJvmChmod = true;","@Parameter
protected boolean useJvmChmod = true;","@Parameter
protected boolean booleanVar1 = booleanLiteral2;"
13373,PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,FP,mavendp,1333,"private class ModuleDescriptor
{
String name;
boolean automatic = true;
","public String getOutput(boolean outputAbsoluteArtifactFilename, boolean theOutputScope, boolean theSort) {
StringBuilder sb = new StringBuilder();
sb.append(System.lineSeparator());
sb.append(""The following files have been resolved:"");
sb.append(System.lineSeparator());
if (results.getResolvedDependencies() == null || results.getResolvedDependencies().isEmpty()) {
sb.append(""   none"");
sb.append(System.lineSeparator());
} else {
sb.append(buildArtifactListOutput(results.getResolvedDependencies(), outputAbsoluteArtifactFilename, theOutputScope, theSort));
}
if (results.getSkippedDependencies() != null && !results.getSkippedDependencies().isEmpty()) {
sb.append(System.lineSeparator());
sb.append(""The following files were skipped:"");
sb.append(System.lineSeparator());
Set<Artifact> skippedDependencies = new LinkedHashSet<>();
skippedDependencies.addAll(results.getSkippedDependencies());
sb.append(buildArtifactListOutput(skippedDependencies, outputAbsoluteArtifactFilename, theOutputScope, theSort));
}
if (results.getUnResolvedDependencies() != null && !results.getUnResolvedDependencies().isEmpty()) {
sb.append(System.lineSeparator());
sb.append(""The following files have NOT been resolved:"");
sb.append(System.lineSeparator());
Set<Artifact> unResolvedDependencies = new LinkedHashSet<>();
unResolvedDependencies.addAll(results.getUnResolvedDependencies());
sb.append(buildArtifactListOutput(unResolvedDependencies, outputAbsoluteArtifactFilename, theOutputScope, theSort));
}
sb.append(System.lineSeparator());
return sb.toString();
}","public String getOutput(boolean outputAbsoluteArtifactFilename, boolean theOutputScope, boolean theSort) {
StringBuilder stringbuilderVar1 = stringbuilderLiteral2;
stringbuilderVar1.append(System.lineSeparator());
stringbuilderVar1.append(""The following files have been resolved:"");
stringbuilderVar1.append(System.lineSeparator());
if (results.getResolvedDependencies() == null || results.getResolvedDependencies().isEmpty()) {
stringbuilderVar1.append(""   none"");
stringbuilderVar1.append(System.lineSeparator());
} else {
stringbuilderVar1.append(buildArtifactListOutput(results.getResolvedDependencies(), outputAbsoluteArtifactFilename, theOutputScope, theSort));
}
if (results.getSkippedDependencies() != null && !results.getSkippedDependencies().isEmpty()) {
stringbuilderVar1.append(System.lineSeparator());
stringbuilderVar1.append(""The following files were skipped:"");
stringbuilderVar1.append(System.lineSeparator());
Set<Artifact> set<artifact>Var3 = set<artifact>Literal4;
set<artifact>Var3.addAll(results.getSkippedDependencies());
stringbuilderVar1.append(buildArtifactListOutput(set<artifact>Var3, outputAbsoluteArtifactFilename, theOutputScope, theSort));
}
if (results.getUnResolvedDependencies() != null && !results.getUnResolvedDependencies().isEmpty()) {
stringbuilderVar1.append(System.lineSeparator());
stringbuilderVar1.append(""The following files have NOT been resolved:"");
stringbuilderVar1.append(System.lineSeparator());
Set<Artifact> set<artifact>Var5 = set<artifact>Literal4;
set<artifact>Var5.addAll(results.getUnResolvedDependencies());
stringbuilderVar1.append(buildArtifactListOutput(set<artifact>Var5, outputAbsoluteArtifactFilename, theOutputScope, theSort));
}
stringbuilderVar1.append(System.lineSeparator());
return stringbuilderVar1.toString();
}"
13400,BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,mavendp,1360,"deleteTarget.delete();
","private void refreshDependenciesForProject(MavenProject project, List exclusionPatterns) throws ArtifactResolutionException, MojoFailureException {
Map deps = createArtifactMap(project);
if (deps.isEmpty()) {
getLog().info(""Nothing to do for project: "" + project.getId());
return;
}
if (!exclusionPatterns.isEmpty()) {
for (Iterator it = exclusionPatterns.iterator(); it.hasNext(); ) {
String excludedKey = (String) it.next();
verbose(""Excluding: "" + excludedKey + "" from refresh operation for project: "" + project.getId());
deps.remove(excludedKey);
}
}
verbose(""Processing dependencies for project: "" + project.getId());
List missingArtifacts = new ArrayList();
for (Iterator it = deps.entrySet().iterator(); it.hasNext(); ) {
Map.Entry entry = (Map.Entry) it.next();
Artifact artifact = (Artifact) entry.getValue();
verbose(""Processing artifact: "" + artifact.getId());
File deleteTarget = findDeleteTarget(artifact);
verbose(""Deleting: "" + deleteTarget);
if (deleteTarget.isDirectory()) {
try {
FileUtils.deleteDirectory(deleteTarget);
} catch (IOException e) {
throw new MojoFailureException(this, ""Cannot delete dependency from the local repository: "" + artifact.getId(), ""Failed to delete: "" + deleteTarget);
}
} else {
deleteTarget.delete();
}
if (reResolve) {
verbose(""Re-resolving."");
artifact.setResolved(false);
try {
resolver.resolveAlways(artifact, project.getRemoteArtifactRepositories(), localRepository);
} catch (ArtifactResolutionException e) {
getLog().debug(e.getMessage());
missingArtifacts.add(artifact);
} catch (ArtifactNotFoundException e) {
getLog().debug(e.getMessage());
missingArtifacts.add(artifact);
}
}
}
if (missingArtifacts.size() > 0) {
String message = ""required artifacts missing:\n"";
for (Iterator i = missingArtifacts.iterator(); i.hasNext(); ) {
Artifact missingArtifact = (Artifact) i.next();
message += ""  "" + missingArtifact.getId() + ""\n"";
}
message += ""\nfor the artifact:"";
throw new ArtifactResolutionException(message, project.getArtifact(), project.getRemoteArtifactRepositories());
}
}","private void refreshDependenciesForProject(MavenProject project, List exclusionPatterns) throws ArtifactResolutionException, MojoFailureException {
Map mapVar1 = mapLiteral2;
if (mapVar1.isEmpty()) {
getLog().info(""Nothing to do for project: "" + project.getId());
return;
}
if (!exclusionPatterns.isEmpty()) {
for (Iterator iteratorVar22 = iteratorLiteral23; iteratorVar3.hasNext(); ) {
String stringVar5 = stringLiteral6;
verbose(""Excluding: "" + stringVar5 + "" from refresh operation for project: "" + project.getId());
mapVar1.remove(stringVar5);
}
}
verbose(""Processing dependencies for project: "" + project.getId());
List listVar7 = listLiteral8;
for (Iterator iteratorVar22 = iteratorLiteral24; iteratorVar3.hasNext(); ) {
Map.Entry map.entryVar10 = map.entryLiteral11;
Artifact artifactVar12 = artifactLiteral13;
verbose(""Processing artifact: "" + artifactVar12.getId());
File fileVar14 = fileLiteral15;
verbose(""Deleting: "" + fileVar14);
if (fileVar14.isDirectory()) {
try {
FileUtils.deleteDirectory(fileVar14);
} catch (IOException e) {
throw new MojoFailureException(this, ""Cannot delete dependency from the local repository: "" + artifactVar12.getId(), ""Failed to delete: "" + fileVar14);
}
} else {
fileVar14.delete();
}
if (reResolve) {
verbose(""Re-resolving."");
artifactVar12.setResolved(false);
try {
resolver.resolveAlways(artifactVar12, project.getRemoteArtifactRepositories(), localRepository);
} catch (ArtifactResolutionException e) {
getLog().debug(e.getMessage());
listVar7.add(artifactVar12);
} catch (ArtifactNotFoundException e) {
getLog().debug(e.getMessage());
listVar7.add(artifactVar12);
}
}
}
if (listVar7.size() > 0) {
String stringVar16 = stringLiteral17;
for (Iterator iteratorVar25 = iteratorLiteral26; iteratorVar18.hasNext(); ) {
Artifact artifactVar20 = artifactLiteral21;
stringVar16 += ""  "" + artifactVar20.getId() + ""\n"";
}
stringVar16 += ""\nfor the artifact:"";
throw new ArtifactResolutionException(stringVar16, project.getArtifact(), project.getRemoteArtifactRepositories());
}
}"
13402,DODGY_CODE,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,FP,mavendp,1362,"if ( parent.list().length < 2 )
","private File findDeleteTarget(Artifact artifact) {
File deleteTarget = artifact.getFile();
if (GROUP_ID_FUZZINESS.equals(resolutionFuzziness)) {
deleteTarget = deleteTarget.getParentFile().getParentFile();
deleteTarget = deleteTarget.getParentFile();
String[] path = localRepository.pathOf(artifact).split(""\\/"");
int groupParts = path.length - 4;
File parent = deleteTarget.getParentFile();
int count = 0;
while (count++ < groupParts) {
if (parent.list().length < 2) {
deleteTarget = parent;
parent = deleteTarget.getParentFile();
} else {
break;
}
}
} else if (ARTIFACT_ID_FUZZINESS.equals(resolutionFuzziness)) {
deleteTarget = deleteTarget.getParentFile().getParentFile();
} else if (VERSION_FUZZINESS.equals(resolutionFuzziness)) {
deleteTarget = deleteTarget.getParentFile();
}
return deleteTarget;
}","private File findDeleteTarget(Artifact artifact) {
File fileVar1 = fileLiteral2;
if (GROUP_ID_FUZZINESS.equals(resolutionFuzziness)) {
fileVar1 = fileVar1.getParentFile().getParentFile();
fileVar1 = fileVar1.getParentFile();
String[] stringArrayVar3 = stringArrayLiteral4;
int intVar5 = intLiteral6;
File fileVar7 = fileLiteral8;
int intVar9 = intLiteral10;
while (intVar9++ < intVar5) {
if (fileVar7.list().length < 2) {
fileVar1 = fileVar7;
fileVar7 = fileVar1.getParentFile();
} else {
break;
}
}
} else if (ARTIFACT_ID_FUZZINESS.equals(resolutionFuzziness)) {
fileVar1 = fileVar1.getParentFile().getParentFile();
} else if (VERSION_FUZZINESS.equals(resolutionFuzziness)) {
fileVar1 = fileVar1.getParentFile();
}
return fileVar1;
}"
13515,DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,mavendp,1475,"unArchiver = archiverManager.getUnArchiver( file );
","protected void unpack(Artifact artifact, String type, File location, String includes, String excludes, String encoding, FileMapper[] fileMappers) throws MojoExecutionException {
File file = artifact.getFile();
try {
logUnpack(file, location, includes, excludes);
location.mkdirs();
if (!location.exists()) {
throw new MojoExecutionException(""Location to write unpacked files to could not be created: "" + location);
}
if (file.isDirectory()) {
// usual case is a future jar packaging, but there are special cases: classifier and other packaging
throw new MojoExecutionException(""Artifact has not been packaged yet. When used on reactor artifact, "" + ""unpack should be executed after packaging: see MDEP-98."");
}
UnArchiver unArchiver;
try {
unArchiver = archiverManager.getUnArchiver(type);
getLog().debug(""Found unArchiver by type: "" + unArchiver);
} catch (NoSuchArchiverException e) {
unArchiver = archiverManager.getUnArchiver(file);
getLog().debug(""Found unArchiver by extension: "" + unArchiver);
}
if (encoding != null && unArchiver instanceof ZipUnArchiver) {
((ZipUnArchiver) unArchiver).setEncoding(encoding);
getLog().info(""Unpacks '"" + type + ""' with encoding '"" + encoding + ""'."");
}
unArchiver.setIgnorePermissions(ignorePermissions);
unArchiver.setSourceFile(file);
unArchiver.setDestDirectory(location);
if (StringUtils.isNotEmpty(excludes) || StringUtils.isNotEmpty(includes)) {
IncludeExcludeFileSelector[] selectors = new IncludeExcludeFileSelector[] { new IncludeExcludeFileSelector() };
if (StringUtils.isNotEmpty(excludes)) {
selectors[0].setExcludes(excludes.split("",""));
}
if (StringUtils.isNotEmpty(includes)) {
selectors[0].setIncludes(includes.split("",""));
}
unArchiver.setFileSelectors(selectors);
}
if (this.silent) {
silenceUnarchiver(unArchiver);
}
unArchiver.setFileMappers(fileMappers);
unArchiver.extract();
} catch (NoSuchArchiverException e) {
throw new MojoExecutionException(""Unknown archiver type"", e);
} catch (ArchiverException e) {
throw new MojoExecutionException(""Error unpacking file: "" + file + "" to: "" + location + System.lineSeparator() + e.toString(), e);
}
}","protected void unpack(Artifact artifact, String type, File location, String includes, String excludes, String encoding, FileMapper[] fileMappers) throws MojoExecutionException {
File fileVar1 = fileLiteral2;
try {
logUnpack(fileVar1, location, includes, excludes);
location.mkdirs();
if (!location.exists()) {
throw new MojoExecutionException(""Location to write unpacked files to could not be created: "" + location);
}
if (fileVar1.isDirectory()) {
// usual case is a future jar packaging, but there are special cases: classifier and other packaging
throw new MojoExecutionException(""Artifact has not been packaged yet. When used on reactor artifact, "" + ""unpack should be executed after packaging: see MDEP-98."");
}
UnArchiver unarchiverVar3;
try {
unarchiverVar3 = archiverManager.getUnArchiver(type);
getLog().debug(""Found unArchiver by type: "" + unarchiverVar3);
} catch (NoSuchArchiverException e) {
unarchiverVar3 = archiverManager.getUnArchiver(fileVar1);
getLog().debug(""Found unArchiver by extension: "" + unarchiverVar3);
}
if (encoding != null && unarchiverVar3 instanceof ZipUnArchiver) {
((ZipUnArchiver) unarchiverVar3).setEncoding(encoding);
getLog().info(""Unpacks '"" + type + ""' with encoding '"" + encoding + ""'."");
}
unarchiverVar3.setIgnorePermissions(ignorePermissions);
unarchiverVar3.setSourceFile(fileVar1);
unarchiverVar3.setDestDirectory(location);
if (StringUtils.isNotEmpty(excludes) || StringUtils.isNotEmpty(includes)) {
IncludeExcludeFileSelector[] includeexcludefileselectorArrayVar4 = includeexcludefileselectorArrayLiteral5;
if (StringUtils.isNotEmpty(excludes)) {
includeexcludefileselectorArrayVar4[0].setExcludes(excludes.split("",""));
}
if (StringUtils.isNotEmpty(includes)) {
includeexcludefileselectorArrayVar4[0].setIncludes(includes.split("",""));
}
unarchiverVar3.setFileSelectors(includeexcludefileselectorArrayVar4);
}
if (this.silent) {
silenceUnarchiver(unarchiverVar3);
}
unarchiverVar3.setFileMappers(fileMappers);
unarchiverVar3.extract();
} catch (NoSuchArchiverException e) {
throw new MojoExecutionException(""Unknown archiver type"", e);
} catch (ArchiverException e) {
throw new MojoExecutionException(""Error unpacking file: "" + fileVar1 + "" to: "" + location + System.lineSeparator() + e.toString(), e);
}
}"
13521,PERFORMANCE,URF_UNREAD_FIELD,FP,mavendp,1481,"@Parameter(property = ""packaging"", defaultValue = ""jar"")
private String packaging = ""jar"";","@Parameter(property = ""packaging"", defaultValue = ""jar"")
private String packaging = ""jar"";","@Parameter(property = ""packaging"", defaultValue = ""jar"")
private String stringVar1 = stringLiteral2;"
13527,DODGY_CODE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,FP,mavendp,1487,"@Parameter
protected boolean useJvmChmod = true;","@Parameter
protected boolean useJvmChmod = true;","@Parameter
protected boolean booleanVar1 = booleanLiteral2;"
13555,DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,mavendp,1515,"final PlexusContainer container = (PlexusContainer) context.get( PlexusConstants.PLEXUS_KEY );
","protected ProjectDependencyAnalyzer createProjectDependencyAnalyzer() throws MojoExecutionException {
final String role = ProjectDependencyAnalyzer.ROLE;
final String roleHint = analyzer;
try {
final PlexusContainer container = (PlexusContainer) context.get(PlexusConstants.PLEXUS_KEY);
return (ProjectDependencyAnalyzer) container.lookup(role, roleHint);
} catch (Exception exception) {
throw new MojoExecutionException(""Failed to instantiate ProjectDependencyAnalyser with role "" + role + "" / role-hint "" + roleHint, exception);
}
}","protected ProjectDependencyAnalyzer createProjectDependencyAnalyzer() throws MojoExecutionException {
final String stringVar1 = stringLiteral2;
final String stringVar3 = stringLiteral4;
try {
final PlexusContainer plexuscontainerVar5 = plexuscontainerLiteral6;
return (ProjectDependencyAnalyzer) plexuscontainerVar5.lookup(stringVar1, stringVar3);
} catch (Exception exception) {
throw new MojoExecutionException(""Failed to instantiate ProjectDependencyAnalyser with role "" + stringVar1 + "" / role-hint "" + stringVar3, exception);
}
}"
13562,BAD_PRACTICE,SE_COMPARATOR_SHOULD_BE_SERIALIZABLE,FP,mavendp,1522,"@Mojo( name = ""build-classpath"", requiresDependencyResolution = ResolutionScope.TEST,
defaultPhase = LifecyclePhase.GENERATE_SOURCES, threadSafe = true )
public class BuildClasspathMojo
extends AbstractDependencyFilterMojo
implements Comparator<Artifact>
{
@Parameter( property = ""mdep.stripVersion"", defaultValue = ""false"" )
private boolean stripVersion = false;
@Parameter( property = ""mdep.stripClassifier"", defaultValue = ""false"" )
private boolean stripClassifier = false;
@Parameter( property = ""mdep.prefix"" )
private String prefix;
@Parameter( property = ""mdep.cpFile"" )
private File cpFile;
@Parameter( property = ""mdep.outputProperty"" )
private String outputProperty;
@Parameter( property = ""mdep.outputFile"" )
private File outputFile;
@Parameter( property = ""mdep.regenerateFile"", defaultValue = ""false"" )
private boolean regenerateFile;
@Parameter( property = ""mdep.fileSeparator"", defaultValue = """" )
private String fileSeparator;
@Parameter( property = ""mdep.pathSeparator"", defaultValue = """" )
private String pathSeparator;
@Parameter( property = ""mdep.localRepoProperty"", defaultValue = """" )
private String localRepoProperty;
@Parameter( defaultValue = ""false"" )
boolean attach;
@Parameter( property = ""mdep.outputFilterFile"", defaultValue = ""false"" )
boolean outputFilterFile;
@Parameter( property = ""mdep.useBaseVersion"", defaultValue = ""true"" )
protected boolean useBaseVersion = true;
@Component
private MavenProjectHelper projectHelper;
@Parameter
protected boolean useJvmChmod = true;
@Parameter
protected boolean ignorePermissions;
boolean isFileSepSet = true;
boolean isPathSepSet = true;
protected void doExecute()
throws MojoExecutionException
{
if ( cpFile != null )
{
getLog().warn( ""The parameter cpFile is deprecated. Use outputFile instead."" );
this.outputFile = cpFile;
}
isFileSepSet = StringUtils.isNotEmpty( fileSeparator );
isPathSepSet = StringUtils.isNotEmpty( pathSeparator );
if ( attach && StringUtils.isEmpty( localRepoProperty ) )
{
localRepoProperty = ""${M2_REPO}"";
}
Set<Artifact> artifacts = getResolvedDependencies( true );
if ( artifacts == null || artifacts.isEmpty() )
{
getLog().info( ""No dependencies found."" );
}
List<Artifact> artList = new ArrayList<Artifact>( artifacts );
StringBuilder sb = new StringBuilder();
Iterator<Artifact> i = artList.iterator();
if ( i.hasNext() )
{
appendArtifactPath( i.next(), sb );
while ( i.hasNext() )
{
sb.append( isPathSepSet ? this.pathSeparator : File.pathSeparator );
appendArtifactPath(i.next(), sb );
}
}
String cpString = sb.toString();
if ( isFileSepSet )
{
final String pattern = Pattern.quote( File.separator );
final String replacement = Matcher.quoteReplacement( fileSeparator );
cpString = cpString.replaceAll( pattern, replacement );
}
if ( outputFilterFile )
{
cpString = ""classpath="" + cpString;
}
if ( outputProperty != null )
{
project.getProperties().setProperty( outputProperty, cpString );
if ( getLog().isDebugEnabled() )
{
getLog().debug( outputProperty + "" = "" + cpString );
}
}
else if ( outputFile == null )
{
getLog().info( ""Dependencies classpath:\n"" + cpString );
}
else
{
if ( regenerateFile || !isUpdToDate( cpString ) )
{
storeClasspathFile( cpString, outputFile );
}
else
{
this.getLog().info( ""Skipped writing classpath file '"" + outputFile + ""'.  No changes found."" );
}
}
if ( attach )
{
attachFile( cpString );
}
}
protected void attachFile( String cpString )
throws MojoExecutionException
{
File attachedFile = new File( project.getBuild().getDirectory(), ""classpath"" );
storeClasspathFile( cpString, attachedFile );
projectHelper.attachArtifact( project, attachedFile, ""classpath"" );
}
protected void appendArtifactPath( Artifact art, StringBuilder sb )
{
if ( prefix == null )
{
String file = art.getFile().getPath();
if ( StringUtils.isNotEmpty( localRepoProperty ) )
{
file = StringUtils.replace( file, getLocal().getBasedir(), localRepoProperty );
}
sb.append( file );
}
else
{
// TODO: add param for prepending groupId and version.
sb.append( prefix );
sb.append( File.separator );
sb.append( DependencyUtil.getFormattedFileName( art, this.stripVersion, this.prependGroupId, this.useBaseVersion, this.stripClassifier ) );
}
}
private boolean isUpdToDate( String cpString )
{
try
{
String oldCp = readClasspathFile();
return (cpString.equals(oldCp) || ( cpString != null && cpString.equals( oldCp ) ) );
}
catch ( Exception ex )
{
this.getLog().warn(
""Error while reading old classpath file '"" + outputFile + ""' for up-to-date check: "" + ex );
return false;
}
}
private void storeClasspathFile( String cpString, File out )
throws MojoExecutionException
{
out.getParentFile().mkdirs();
Writer w = null;
try
{
w = new BufferedWriter( new FileWriter( out ) );
w.write( cpString );
getLog().info( ""Wrote classpath file '"" + out + ""'."" );
}
catch ( IOException ex )
{
throw new MojoExecutionException( ""Error while writting to classpath file '"" + out + ""': "" + ex.toString(),
ex );
}
finally
{
IOUtil.close( w );
}
}
protected String readClasspathFile()
throws IOException
{
if ( outputFile == null )
{
throw new IllegalArgumentException(
""The outputFile parameter cannot be null if the file is intended to be read."" );
}
if ( !outputFile.isFile() )
{
return null;
}
StringBuilder sb = new StringBuilder();
BufferedReader r = null;
try
{
r = new BufferedReader( new FileReader( outputFile ) );
String l;
while ( ( l = r.readLine() ) != null )
{
sb.append( l );
}
return sb.toString();
}
finally
{
IOUtil.close( r );
}
}
public int compare( Artifact art1, Artifact art2 )
{
if ( art1 == art2 )
{
return 0;
}
else if ( art1 == null )
{
return -1;
}
else if ( art2 == null )
{
return +1;
}
String s1 = art1.getGroupId() + art1.getArtifactId() + art1.getVersion();
String s2 = art2.getGroupId() + art2.getArtifactId() + art2.getVersion();
return s1.compareTo( s2 );
}
protected ArtifactsFilter getMarkedArtifactFilter()
{
return null;
}
public File getCpFile()
{
return this.outputFile;
}
public void setCpFile( File theCpFile )
{
this.outputFile = theCpFile;
}
public String getOutputProperty()
{
return this.outputProperty;
}
public void setOutputProperty( String theOutputProperty )
{
this.outputProperty = theOutputProperty;
}
public String getFileSeparator()
{
return this.fileSeparator;
}
public void setFileSeparator( String theFileSeparator )
{
this.fileSeparator = theFileSeparator;
}
public String getPathSeparator()
{
return this.pathSeparator;
}
public void setPathSeparator( String thePathSeparator )
{
this.pathSeparator = thePathSeparator;
}
public String getPrefix()
{
return this.prefix;
}
public void setPrefix( String thePrefix )
{
this.prefix = thePrefix;
}
public boolean isRegenerateFile()
{
return this.regenerateFile;
}
public void setRegenerateFile( boolean theRegenerateFile )
{
this.regenerateFile = theRegenerateFile;
}
public boolean isStripVersion()
{
return this.stripVersion;
}
public void setStripVersion( boolean theStripVersion )
{
this.stripVersion = theStripVersion;
}
public String getLocalRepoProperty()
{
return localRepoProperty;
}
public void setLocalRepoProperty( String localRepoProperty )
{
this.localRepoProperty = localRepoProperty;
}
public boolean isFileSepSet()
{
return isFileSepSet;
}
public void setFileSepSet( boolean isFileSepSet )
{
this.isFileSepSet = isFileSepSet;
}
public boolean isPathSepSet()
{
return isPathSepSet;
}
public void setPathSepSet( boolean isPathSepSet )
{
this.isPathSepSet = isPathSepSet;
}
","@Parameter
protected boolean useJvmChmod = true;","@Parameter
protected boolean booleanVar1 = booleanLiteral2;"
13564,CORRECTNESS,NP_NULL_PARAM_DEREF,FP,mavendp,1524,"List<Artifact> artList = new ArrayList<Artifact>( artifacts );
","protected void doExecute() throws MojoExecutionException {
if (cpFile != null) {
getLog().warn(""The parameter cpFile is deprecated. Use outputFile instead."");
this.outputFile = cpFile;
}
isFileSepSet = StringUtils.isNotEmpty(fileSeparator);
isPathSepSet = StringUtils.isNotEmpty(pathSeparator);
if (attach && StringUtils.isEmpty(localRepoProperty)) {
localRepoProperty = ""${M2_REPO}"";
}
Set<Artifact> artifacts = getResolvedDependencies(true);
if (artifacts == null || artifacts.isEmpty()) {
getLog().info(""No dependencies found."");
}
List<Artifact> artList = new ArrayList<Artifact>(artifacts);
StringBuilder sb = new StringBuilder();
Iterator<Artifact> i = artList.iterator();
if (i.hasNext()) {
appendArtifactPath(i.next(), sb);
while (i.hasNext()) {
sb.append(isPathSepSet ? this.pathSeparator : File.pathSeparator);
appendArtifactPath(i.next(), sb);
}
}
String cpString = sb.toString();
if (isFileSepSet) {
final String pattern = Pattern.quote(File.separator);
final String replacement = Matcher.quoteReplacement(fileSeparator);
cpString = cpString.replaceAll(pattern, replacement);
}
if (outputFilterFile) {
cpString = ""classpath="" + cpString;
}
if (outputProperty != null) {
project.getProperties().setProperty(outputProperty, cpString);
if (getLog().isDebugEnabled()) {
getLog().debug(outputProperty + "" = "" + cpString);
}
} else if (outputFile == null) {
getLog().info(""Dependencies classpath:\n"" + cpString);
} else {
if (regenerateFile || !isUpdToDate(cpString)) {
storeClasspathFile(cpString, outputFile);
} else {
this.getLog().info(""Skipped writing classpath file '"" + outputFile + ""'.  No changes found."");
}
}
if (attach) {
attachFile(cpString);
}
}","protected void doExecute() throws MojoExecutionException {
if (cpFile != null) {
getLog().warn(""The parameter cpFile is deprecated. Use outputFile instead."");
this.outputFile = cpFile;
}
isFileSepSet = StringUtils.isNotEmpty(fileSeparator);
isPathSepSet = StringUtils.isNotEmpty(pathSeparator);
if (attach && StringUtils.isEmpty(localRepoProperty)) {
localRepoProperty = ""${M2_REPO}"";
}
Set<Artifact> set<artifact>Var1 = set<artifact>Literal2;
if (set<artifact>Var1 == null || set<artifact>Var1.isEmpty()) {
getLog().info(""No dependencies found."");
}
List<Artifact> list<artifact>Var3 = list<artifact>Literal4;
StringBuilder stringbuilderVar5 = stringbuilderLiteral6;
Iterator<Artifact> iterator<artifact>Var7 = iterator<artifact>Literal8;
if (iterator<artifact>Var7.hasNext()) {
appendArtifactPath(iterator<artifact>Var7.next(), stringbuilderVar5);
while (iterator<artifact>Var7.hasNext()) {
stringbuilderVar5.append(isPathSepSet ? this.pathSeparator : File.pathSeparator);
appendArtifactPath(iterator<artifact>Var7.next(), stringbuilderVar5);
}
}
String stringVar9 = stringLiteral10;
if (isFileSepSet) {
final String stringVar11 = stringLiteral12;
final String stringVar13 = stringLiteral14;
stringVar9 = stringVar9.replaceAll(stringVar11, stringVar13);
}
if (outputFilterFile) {
stringVar9 = ""classpath="" + stringVar9;
}
if (outputProperty != null) {
project.getProperties().setProperty(outputProperty, stringVar9);
if (getLog().isDebugEnabled()) {
getLog().debug(outputProperty + "" = "" + stringVar9);
}
} else if (outputFile == null) {
getLog().info(""Dependencies classpath:\n"" + stringVar9);
} else {
if (regenerateFile || !isUpdToDate(stringVar9)) {
storeClasspathFile(stringVar9, outputFile);
} else {
this.getLog().info(""Skipped writing classpath file '"" + outputFile + ""'.  No changes found."");
}
}
if (attach) {
attachFile(stringVar9);
}
}"
13573,BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,mavendp,1533,".mkdirs();
","protected void doExecute() throws MojoExecutionException {
Writer outputWriter = null;
try {
final Set<Artifact> plugins = resolvePluginArtifacts();
if (this.outputFile != null) {
outputFile.getParentFile().mkdirs();
outputWriter = new FileWriter(outputFile);
}
for (final Artifact plugin : plugins) {
String logStr = ""Plugin Resolved: "" + DependencyUtil.getFormattedFileName(plugin, false);
if (!silent) {
this.getLog().info(logStr);
}
if (outputWriter != null) {
outputWriter.write(logStr);
outputWriter.write(""\n"");
}
if (!excludeTransitive) {
for (final Artifact artifact : resolveArtifactDependencies(plugin)) {
logStr = ""    Plugin Dependency Resolved: "" + DependencyUtil.getFormattedFileName(artifact, false);
if (!silent) {
this.getLog().info(logStr);
}
if (outputWriter != null) {
outputWriter.write(logStr);
outputWriter.write(""\n"");
}
}
}
}
} catch (final IOException e) {
throw new MojoExecutionException(""Nested:"", e);
} catch (final ArtifactResolutionException e) {
throw new MojoExecutionException(""Nested:"", e);
} catch (final ArtifactNotFoundException e) {
throw new MojoExecutionException(""Nested:"", e);
} catch (final ProjectBuildingException e) {
throw new MojoExecutionException(""Nested:"", e);
} catch (final InvalidDependencyVersionException e) {
throw new MojoExecutionException(""Nested:"", e);
} catch (final ArtifactFilterException e) {
throw new MojoExecutionException(""Nested:"", e);
} finally {
IOUtil.close(outputWriter);
}
}","protected void doExecute() throws MojoExecutionException {
Writer writerVar1 = writerLiteral2;
try {
final Set<Artifact> set<artifact>Var3 = set<artifact>Literal4;
if (this.outputFile != null) {
outputFile.getParentFile().mkdirs();
writerVar1 = new FileWriter(outputFile);
}
for (final Artifact artifactVar5 : set<artifact>Var3) {
String stringVar6 = stringLiteral7;
if (!silent) {
this.getLog().info(stringVar6);
}
if (writerVar1 != null) {
writerVar1.write(stringVar6);
writerVar1.write(""\n"");
}
if (!excludeTransitive) {
for (final Artifact artifactVar8 : resolveArtifactDependencies(artifactVar5)) {
stringVar6 = ""    Plugin Dependency Resolved: "" + DependencyUtil.getFormattedFileName(artifactVar8, false);
if (!silent) {
this.getLog().info(stringVar6);
}
if (writerVar1 != null) {
writerVar1.write(stringVar6);
writerVar1.write(""\n"");
}
}
}
}
} catch (final IOException e) {
throw new MojoExecutionException(""Nested:"", e);
} catch (final ArtifactResolutionException e) {
throw new MojoExecutionException(""Nested:"", e);
} catch (final ArtifactNotFoundException e) {
throw new MojoExecutionException(""Nested:"", e);
} catch (final ProjectBuildingException e) {
throw new MojoExecutionException(""Nested:"", e);
} catch (final InvalidDependencyVersionException e) {
throw new MojoExecutionException(""Nested:"", e);
} catch (final ArtifactFilterException e) {
throw new MojoExecutionException(""Nested:"", e);
} finally {
IOUtil.close(writerVar1);
}
}"
13583,BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,mavendp,1543,"marker.createNewFile();
","public void setMarker() throws MojoExecutionException {
File marker = getMarkerFile();
File clearMarker = getMarkerFile(!this.resolved);
try {
marker.getParentFile().mkdirs();
} catch (NullPointerException e) {
}
try {
marker.createNewFile();
if (clearMarker.exists()) {
clearMarker.delete();
}
} catch (IOException e) {
throw new MojoExecutionException(""Unable to create Marker: "" + marker.getAbsolutePath(), e);
}
}","public void setMarker() throws MojoExecutionException {
File fileVar1 = fileLiteral2;
File fileVar3 = fileLiteral4;
try {
fileVar1.getParentFile().mkdirs();
} catch (NullPointerException e) {
}
try {
fileVar1.createNewFile();
if (fileVar3.exists()) {
fileVar3.delete();
}
} catch (IOException e) {
throw new MojoExecutionException(""Unable to create Marker: "" + fileVar1.getAbsolutePath(), e);
}
}"
13584,DODGY_CODE,UUF_UNUSED_PUBLIC_OR_PROTECTED_FIELD,FP,mavendp,1544,protected List reactorProjects;,protected List reactorProjects;,protected List listVar1;
13599,CORRECTNESS,UWF_UNWRITTEN_FIELD,FP,mavendp,1559,private List remotePluginRepositories;,private List remotePluginRepositories;,private List listVar1;
13601,BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,mavendp,1561,"markerFile.createNewFile();
","public static void unpackFile(Artifact artifact, File unpackDirectory, File markersDirectory, ArchiverManager archiverManager, Log log, boolean overWrite) throws MojoExecutionException {
markersDirectory.mkdirs();
File markerFile = new File(markersDirectory, artifact.getId().replace(':', '-') + "".unpacked"");
if (!markerFile.exists() || overWrite) {
try {
unpackDirectory.mkdirs();
unpack(artifact.getFile(), unpackDirectory, archiverManager, log);
markerFile.getParentFile().mkdirs();
markerFile.createNewFile();
} catch (IOException e) {
throw new MojoExecutionException(""Error creating marker file: "" + markerFile);
}
} else {
log.info(artifact.getFile().getName() + "" already unpacked."");
}
}","public static void unpackFile(Artifact artifact, File unpackDirectory, File markersDirectory, ArchiverManager archiverManager, Log log, boolean overWrite) throws MojoExecutionException {
markersDirectory.mkdirs();
File fileVar1 = fileLiteral2;
if (!fileVar1.exists() || overWrite) {
try {
unpackDirectory.mkdirs();
unpack(artifact.getFile(), unpackDirectory, archiverManager, log);
fileVar1.getParentFile().mkdirs();
fileVar1.createNewFile();
} catch (IOException e) {
throw new MojoExecutionException(""Error creating marker file: "" + fileVar1);
}
} else {
log.info(artifact.getFile().getName() + "" already unpacked."");
}
}"
13705,DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,mavendp,1665,"Set<Artifact> directDependencies = project.getDependencyArtifacts();
","private boolean checkDependencyManagement() throws MojoExecutionException {
boolean foundError = false;
getLog().info(""Found Resolved Dependency/DependencyManagement mismatches:"");
List<Dependency> depMgtDependencies = null;
DependencyManagement depMgt = project.getDependencyManagement();
if (depMgt != null) {
depMgtDependencies = depMgt.getDependencies();
}
if (depMgtDependencies != null && !depMgtDependencies.isEmpty()) {
Map<String, Dependency> depMgtMap = new HashMap<>();
Map<String, Exclusion> exclusions = new HashMap<>();
for (Dependency depMgtDependency : depMgtDependencies) {
depMgtMap.put(depMgtDependency.getManagementKey(), depMgtDependency);
exclusions.putAll(addExclusions(depMgtDependency.getExclusions()));
}
Set<Artifact> allDependencyArtifacts = new LinkedHashSet<>(project.getArtifacts());
if (this.ignoreDirect) {
getLog().info(""\tIgnoring Direct Dependencies."");
Set<Artifact> directDependencies = project.getDependencyArtifacts();
allDependencyArtifacts.removeAll(directDependencies);
}
List<Artifact> exclusionErrors = getExclusionErrors(exclusions, allDependencyArtifacts);
for (Artifact exclusion : exclusionErrors) {
getLog().info(StringUtils.stripEnd(getArtifactManagementKey(exclusion), "":"") + "" was excluded in DepMgt, but version "" + exclusion.getVersion() + "" has been found in the dependency tree."");
foundError = true;
}
Map<Artifact, Dependency> mismatch = getMismatch(depMgtMap, allDependencyArtifacts);
for (Map.Entry<Artifact, Dependency> entry : mismatch.entrySet()) {
logMismatch(entry.getKey(), entry.getValue());
foundError = true;
}
if (!foundError) {
getLog().info(""\tNone"");
}
} else {
getLog().info(""\tNothing in DepMgt."");
}
return foundError;
}","private boolean checkDependencyManagement() throws MojoExecutionException {
boolean booleanVar1 = booleanLiteral2;
getLog().info(""Found Resolved Dependency/DependencyManagement mismatches:"");
List<Dependency> list<dependency>Var3 = list<dependency>Literal4;
DependencyManagement dependencymanagementVar5 = dependencymanagementLiteral6;
if (dependencymanagementVar5 != null) {
list<dependency>Var3 = dependencymanagementVar5.getDependencies();
}
if (list<dependency>Var3 != null && !list<dependency>Var3.isEmpty()) {
Map<String, Dependency> map<string,dependency>Var7 = map<string,dependency>Literal8;
Map<String, Exclusion> map<string,exclusion>Var9 = map<string,dependency>Literal8;
for (Dependency dependencyVar10 : list<dependency>Var3) {
map<string,dependency>Var7.put(dependencyVar10.getManagementKey(), dependencyVar10);
map<string,exclusion>Var9.putAll(addExclusions(dependencyVar10.getExclusions()));
}
Set<Artifact> set<artifact>Var11 = set<artifact>Literal12;
if (this.ignoreDirect) {
getLog().info(""\tIgnoring Direct Dependencies."");
Set<Artifact> set<artifact>Var13 = set<artifact>Literal14;
set<artifact>Var11.removeAll(set<artifact>Var13);
}
List<Artifact> list<artifact>Var15 = list<artifact>Literal16;
for (Artifact artifactVar17 : list<artifact>Var15) {
getLog().info(StringUtils.stripEnd(getArtifactManagementKey(artifactVar17), "":"") + "" was excluded in DepMgt, but version "" + artifactVar17.getVersion() + "" has been found in the dependency tree."");
booleanVar1 = true;
}
Map<Artifact, Dependency> map<artifact,dependency>Var18 = map<artifact,dependency>Literal19;
for (Map.Entry<Artifact, Dependency> map.entry<artifact,dependency>Var20 : map<artifact,dependency>Var18.entrySet()) {
logMismatch(map.entry<artifact,dependency>Var20.getKey(), map.entry<artifact,dependency>Var20.getValue());
booleanVar1 = true;
}
if (!booleanVar1) {
getLog().info(""\tNone"");
}
} else {
getLog().info(""\tNothing in DepMgt."");
}
return booleanVar1;
}"
13706,BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,mavendp,1666,"artifactItem.getOutputDirectory().mkdirs();
","protected List<ArtifactItem> getProcessedArtifactItems(ProcessArtifactItemsRequest processArtifactItemsRequest) throws MojoExecutionException {
boolean removeVersion = processArtifactItemsRequest.isRemoveVersion(), prependGroupId = processArtifactItemsRequest.isPrependGroupId(), useBaseVersion = processArtifactItemsRequest.isUseBaseVersion();
boolean removeClassifier = processArtifactItemsRequest.isRemoveClassifier();
if (artifactItems == null || artifactItems.size() < 1) {
throw new MojoExecutionException(""There are no artifactItems configured."");
}
for (ArtifactItem artifactItem : artifactItems) {
this.getLog().info(""Configured Artifact: "" + artifactItem.toString());
if (artifactItem.getOutputDirectory() == null) {
artifactItem.setOutputDirectory(this.outputDirectory);
}
artifactItem.getOutputDirectory().mkdirs();
if (StringUtils.isEmpty(artifactItem.getVersion())) {
fillMissingArtifactVersion(artifactItem);
}
artifactItem.setArtifact(this.getArtifact(artifactItem));
if (StringUtils.isEmpty(artifactItem.getDestFileName())) {
artifactItem.setDestFileName(DependencyUtil.getFormattedFileName(artifactItem.getArtifact(), removeVersion, prependGroupId, useBaseVersion, removeClassifier));
}
try {
artifactItem.setNeedsProcessing(checkIfProcessingNeeded(artifactItem));
} catch (ArtifactFilterException e) {
throw new MojoExecutionException(e.getMessage(), e);
}
}
return artifactItems;
}","protected List<ArtifactItem> getProcessedArtifactItems(ProcessArtifactItemsRequest processArtifactItemsRequest) throws MojoExecutionException {
boolean booleanVar1 = booleanLiteral2, booleanVar3 = booleanLiteral4, booleanVar5 = booleanLiteral6;
boolean booleanVar7 = booleanLiteral8;
if (artifactItems == null || artifactItems.size() < 1) {
throw new MojoExecutionException(""There are no artifactItems configured."");
}
for (ArtifactItem artifactitemVar9 : artifactItems) {
this.getLog().info(""Configured Artifact: "" + artifactitemVar9.toString());
if (artifactitemVar9.getOutputDirectory() == null) {
artifactitemVar9.setOutputDirectory(this.outputDirectory);
}
artifactitemVar9.getOutputDirectory().mkdirs();
if (StringUtils.isEmpty(artifactitemVar9.getVersion())) {
fillMissingArtifactVersion(artifactitemVar9);
}
artifactitemVar9.setArtifact(this.getArtifact(artifactitemVar9));
if (StringUtils.isEmpty(artifactitemVar9.getDestFileName())) {
artifactitemVar9.setDestFileName(DependencyUtil.getFormattedFileName(artifactitemVar9.getArtifact(), booleanVar1, booleanVar3, booleanVar5, booleanVar7));
}
try {
artifactitemVar9.setNeedsProcessing(checkIfProcessingNeeded(artifactitemVar9));
} catch (ArtifactFilterException e) {
throw new MojoExecutionException(e.getMessage(), e);
}
}
return artifactItems;
}"
13707,MALICIOUS_CODE,EI_EXPOSE_REP2,FP,mavendp,1667,"this.fileMappers = fileMappers;
","public void setFileMappers(FileMapper[] fileMappers) {
this.fileMappers = fileMappers;
}","public void setFileMappers(FileMapper[] fileMappers) {
this.fileMappers = fileMappers;
}"
13719,DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,mavendp,1679,"if ( results.getResolvedDependencies() == null || results.getResolvedDependencies().isEmpty() )
","public String getOutput(boolean outputAbsoluteArtifactFilename, boolean theOutputScope, boolean theSort) {
StringBuilder sb = new StringBuilder();
sb.append(System.lineSeparator());
sb.append(""The following files have been resolved:"");
sb.append(System.lineSeparator());
if (results.getResolvedDependencies() == null || results.getResolvedDependencies().isEmpty()) {
sb.append(""   none"");
sb.append(System.lineSeparator());
} else {
sb.append(buildArtifactListOutput(results.getResolvedDependencies(), outputAbsoluteArtifactFilename, theOutputScope, theSort));
}
if (results.getSkippedDependencies() != null && !results.getSkippedDependencies().isEmpty()) {
sb.append(System.lineSeparator());
sb.append(""The following files were skipped:"");
sb.append(System.lineSeparator());
Set<Artifact> skippedDependencies = new LinkedHashSet<>();
skippedDependencies.addAll(results.getSkippedDependencies());
sb.append(buildArtifactListOutput(skippedDependencies, outputAbsoluteArtifactFilename, theOutputScope, theSort));
}
if (results.getUnResolvedDependencies() != null && !results.getUnResolvedDependencies().isEmpty()) {
sb.append(System.lineSeparator());
sb.append(""The following files have NOT been resolved:"");
sb.append(System.lineSeparator());
Set<Artifact> unResolvedDependencies = new LinkedHashSet<>();
unResolvedDependencies.addAll(results.getUnResolvedDependencies());
sb.append(buildArtifactListOutput(unResolvedDependencies, outputAbsoluteArtifactFilename, theOutputScope, theSort));
}
sb.append(System.lineSeparator());
return sb.toString();
}","public String getOutput(boolean outputAbsoluteArtifactFilename, boolean theOutputScope, boolean theSort) {
StringBuilder stringbuilderVar1 = stringbuilderLiteral2;
stringbuilderVar1.append(System.lineSeparator());
stringbuilderVar1.append(""The following files have been resolved:"");
stringbuilderVar1.append(System.lineSeparator());
if (results.getResolvedDependencies() == null || results.getResolvedDependencies().isEmpty()) {
stringbuilderVar1.append(""   none"");
stringbuilderVar1.append(System.lineSeparator());
} else {
stringbuilderVar1.append(buildArtifactListOutput(results.getResolvedDependencies(), outputAbsoluteArtifactFilename, theOutputScope, theSort));
}
if (results.getSkippedDependencies() != null && !results.getSkippedDependencies().isEmpty()) {
stringbuilderVar1.append(System.lineSeparator());
stringbuilderVar1.append(""The following files were skipped:"");
stringbuilderVar1.append(System.lineSeparator());
Set<Artifact> set<artifact>Var3 = set<artifact>Literal4;
set<artifact>Var3.addAll(results.getSkippedDependencies());
stringbuilderVar1.append(buildArtifactListOutput(set<artifact>Var3, outputAbsoluteArtifactFilename, theOutputScope, theSort));
}
if (results.getUnResolvedDependencies() != null && !results.getUnResolvedDependencies().isEmpty()) {
stringbuilderVar1.append(System.lineSeparator());
stringbuilderVar1.append(""The following files have NOT been resolved:"");
stringbuilderVar1.append(System.lineSeparator());
Set<Artifact> set<artifact>Var5 = set<artifact>Literal4;
set<artifact>Var5.addAll(results.getUnResolvedDependencies());
stringbuilderVar1.append(buildArtifactListOutput(set<artifact>Var5, outputAbsoluteArtifactFilename, theOutputScope, theSort));
}
stringbuilderVar1.append(System.lineSeparator());
return stringbuilderVar1.toString();
}"
13720,PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,FP,mavendp,1680,"private class ModuleDescriptor
{
String name;
boolean automatic = true;
","private StringBuilder buildArtifactListOutput(Set<Artifact> artifacts, boolean outputAbsoluteArtifactFilename, boolean theOutputScope, boolean theSort) {
StringBuilder sb = new StringBuilder();
List<String> artifactStringList = new ArrayList<>();
for (Artifact artifact : artifacts) {
MessageBuilder messageBuilder = MessageUtils.buffer();
messageBuilder.a(""   "");
if (theOutputScope) {
messageBuilder.a(artifact.toString());
} else {
messageBuilder.a(artifact.getId());
}
if (outputAbsoluteArtifactFilename) {
try {
String artifactFilename = artifact.getFile().getAbsoluteFile().getPath();
messageBuilder.a(':').a(artifactFilename);
} catch (NullPointerException e) {
}
}
if (theOutputScope && artifact.isOptional()) {
messageBuilder.a("" (optional)"");
}
if (artifact.getFile() != null) {
ModuleDescriptor moduleDescriptor = getModuleDescriptor(artifact.getFile());
if (moduleDescriptor != null) {
messageBuilder.project("" -- module "" + moduleDescriptor.name);
if (moduleDescriptor.automatic) {
if (""MANIFEST"".equals(moduleDescriptor.moduleNameSource)) {
messageBuilder.strong("" [auto]"");
} else {
messageBuilder.warning("" (auto)"");
}
}
}
}
artifactStringList.add(messageBuilder.toString() + System.lineSeparator());
}
if (theSort) {
Collections.sort(artifactStringList);
}
for (String artifactString : artifactStringList) {
sb.append(artifactString);
}
return sb;
}","private StringBuilder buildArtifactListOutput(Set<Artifact> artifacts, boolean outputAbsoluteArtifactFilename, boolean theOutputScope, boolean theSort) {
StringBuilder stringbuilderVar1 = stringbuilderLiteral2;
List<String> list<string>Var3 = list<string>Literal4;
for (Artifact artifactVar5 : artifacts) {
MessageBuilder messagebuilderVar6 = messagebuilderLiteral7;
messagebuilderVar6.a(""   "");
if (theOutputScope) {
messagebuilderVar6.a(artifactVar5.toString());
} else {
messagebuilderVar6.a(artifactVar5.getId());
}
if (outputAbsoluteArtifactFilename) {
try {
String stringVar8 = stringLiteral9;
messagebuilderVar6.a(':').a(stringVar8);
} catch (NullPointerException e) {
}
}
if (theOutputScope && artifactVar5.isOptional()) {
messagebuilderVar6.a("" (optional)"");
}
if (artifactVar5.getFile() != null) {
ModuleDescriptor moduledescriptorVar10 = moduledescriptorLiteral11;
if (moduledescriptorVar10 != null) {
messagebuilderVar6.project("" -- module "" + moduledescriptorVar10.name);
if (moduledescriptorVar10.automatic) {
if (""MANIFEST"".equals(moduledescriptorVar10.moduleNameSource)) {
messagebuilderVar6.strong("" [auto]"");
} else {
messagebuilderVar6.warning("" (auto)"");
}
}
}
}
list<string>Var3.add(messagebuilderVar6.toString() + System.lineSeparator());
}
if (theSort) {
Collections.sort(list<string>Var3);
}
for (String stringVar12 : list<string>Var3) {
stringbuilderVar1.append(stringVar12);
}
return stringbuilderVar1;
}"
13722,DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,FP,mavendp,1682,"if ( plugins == null || plugins.isEmpty() )
","@Override
protected void doExecute() throws MojoExecutionException {
try {
final Set<Artifact> plugins = resolvePluginArtifacts();
StringBuilder sb = new StringBuilder();
sb.append(System.lineSeparator());
sb.append(""The following plugins have been resolved:"");
sb.append(System.lineSeparator());
if (plugins == null || plugins.isEmpty()) {
sb.append(""   none"");
sb.append(System.lineSeparator());
} else {
for (Artifact plugin : plugins) {
String artifactFilename = null;
if (outputAbsoluteArtifactFilename) {
try {
artifactFilename = plugin.getFile().getAbsoluteFile().getPath();
} catch (NullPointerException e) {
artifactFilename = null;
}
}
String id = plugin.toString();
sb.append(""   "").append(id).append(outputAbsoluteArtifactFilename ? "":"" + artifactFilename : """").append(System.lineSeparator());
if (!excludeTransitive) {
DefaultDependableCoordinate pluginCoordinate = new DefaultDependableCoordinate();
pluginCoordinate.setGroupId(plugin.getGroupId());
pluginCoordinate.setArtifactId(plugin.getArtifactId());
pluginCoordinate.setVersion(plugin.getVersion());
for (final Artifact artifact : resolveArtifactDependencies(pluginCoordinate)) {
artifactFilename = null;
if (outputAbsoluteArtifactFilename) {
try {
artifactFilename = artifact.getFile().getAbsoluteFile().getPath();
} catch (NullPointerException e) {
artifactFilename = null;
}
}
id = artifact.toString();
sb.append(""      "").append(id).append(outputAbsoluteArtifactFilename ? "":"" + artifactFilename : """").append(System.lineSeparator());
}
}
}
sb.append(System.lineSeparator());
String output = sb.toString();
if (outputFile == null) {
DependencyUtil.log(output, getLog());
} else {
String encoding = Objects.toString(outputEncoding, ""UTF-8"");
DependencyUtil.write(output, outputFile, appendOutput, encoding);
}
}
} catch (IOException | ArtifactFilterException | ArtifactResolverException | DependencyResolverException e) {
throw new MojoExecutionException(e.getMessage(), e);
}
}","@Override
protected void doExecute() throws MojoExecutionException {
try {
final Set<Artifact> set<artifact>Var1 = set<artifact>Literal2;
StringBuilder stringbuilderVar3 = stringbuilderLiteral4;
stringbuilderVar3.append(System.lineSeparator());
stringbuilderVar3.append(""The following plugins have been resolved:"");
stringbuilderVar3.append(System.lineSeparator());
if (set<artifact>Var1 == null || set<artifact>Var1.isEmpty()) {
stringbuilderVar3.append(""   none"");
stringbuilderVar3.append(System.lineSeparator());
} else {
for (Artifact artifactVar5 : set<artifact>Var1) {
String stringVar6 = stringLiteral7;
if (outputAbsoluteArtifactFilename) {
try {
stringVar6 = artifactVar5.getFile().getAbsoluteFile().getPath();
} catch (NullPointerException e) {
stringVar6 = null;
}
}
String stringVar8 = stringLiteral9;
stringbuilderVar3.append(""   "").append(stringVar8).append(outputAbsoluteArtifactFilename ? "":"" + stringVar6 : """").append(System.lineSeparator());
if (!excludeTransitive) {
DefaultDependableCoordinate defaultdependablecoordinateVar10 = defaultdependablecoordinateLiteral11;
defaultdependablecoordinateVar10.setGroupId(artifactVar5.getGroupId());
defaultdependablecoordinateVar10.setArtifactId(artifactVar5.getArtifactId());
defaultdependablecoordinateVar10.setVersion(artifactVar5.getVersion());
for (final Artifact artifactVar12 : resolveArtifactDependencies(defaultdependablecoordinateVar10)) {
stringVar6 = null;
if (outputAbsoluteArtifactFilename) {
try {
stringVar6 = artifactVar12.getFile().getAbsoluteFile().getPath();
} catch (NullPointerException e) {
stringVar6 = null;
}
}
stringVar8 = artifactVar12.toString();
stringbuilderVar3.append(""      "").append(stringVar8).append(outputAbsoluteArtifactFilename ? "":"" + stringVar6 : """").append(System.lineSeparator());
}
}
}
stringbuilderVar3.append(System.lineSeparator());
String stringVar13 = stringLiteral14;
if (outputFile == null) {
DependencyUtil.log(stringVar13, getLog());
} else {
String stringVar15 = stringLiteral16;
DependencyUtil.write(stringVar13, outputFile, appendOutput, stringVar15);
}
}
} catch (IOException | ArtifactFilterException | ArtifactResolverException | DependencyResolverException e) {
throw new MojoExecutionException(e.getMessage(), e);
}
}"
13723,DODGY_CODE,UC_USELESS_OBJECT,FP,mavendp,1683,"List<org.apache.maven.model.Exclusion> exclusions = new ArrayList<>();
","private DependencyNode buildTree(DependencyNode parent, org.eclipse.aether.graph.DependencyNode child) {
List<org.apache.maven.model.Exclusion> exclusions = new ArrayList<>();
for (org.eclipse.aether.graph.Exclusion exclusion : child.getDependency().getExclusions()) {
exclusions.add(convertAetherExclusionToMavenExclusion(exclusion));
}
DefaultDependencyNode newChild = new DefaultDependencyNode(parent, convertAetherArtifactToMavenArtifact(child), child.getArtifact().getProperties().get(""preManagedVersion""), child.getArtifact().getProperties().get(""preManagedScope""), null, child.getDependency().isOptional());
newChild.setChildren(new ArrayList<DependencyNode>());
for (org.eclipse.aether.graph.DependencyNode grandChild : child.getChildren()) {
newChild.getChildren().add(buildTree(newChild, grandChild));
}
return newChild;
}","private DependencyNode buildTree(DependencyNode parent, org.eclipse.aether.graph.DependencyNode child) {
List<org.apache.maven.model.Exclusion> list<org.apache.maven.model.exclusion>Var1 = list<org.apache.maven.model.exclusion>Literal2;
for (org.eclipse.aether.graph.Exclusion org.eclipse.aether.graph.exclusionVar3 : child.getDependency().getExclusions()) {
list<org.apache.maven.model.exclusion>Var1.add(convertAetherExclusionToMavenExclusion(org.eclipse.aether.graph.exclusionVar3));
}
DefaultDependencyNode defaultdependencynodeVar4 = defaultdependencynodeLiteral5;
defaultdependencynodeVar4.setChildren(new ArrayList<DependencyNode>());
for (org.eclipse.aether.graph.DependencyNode org.eclipse.aether.graph.dependencynodeVar6 : child.getChildren()) {
defaultdependencynodeVar4.getChildren().add(buildTree(defaultdependencynodeVar4, org.eclipse.aether.graph.dependencynodeVar6));
}
return defaultdependencynodeVar4;
}"
13726,BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,FP,mavendp,1686,"marker.createNewFile();
","@Override
public void setMarker() throws MojoExecutionException {
File marker = getMarkerFile();
try {
marker.getParentFile().mkdirs();
} catch (NullPointerException e) {
}
try {
marker.createNewFile();
} catch (IOException e) {
throw new MojoExecutionException(""Unable to create Marker: "" + marker.getAbsolutePath(), e);
}
try {
long ts;
if (this.artifact != null && this.artifact.getFile() != null) {
ts = this.artifact.getFile().lastModified();
} else {
ts = System.currentTimeMillis();
}
if (!marker.setLastModified(ts)) {
throw new MojoExecutionException(""Unable to update last modified timestamp on marker file "" + marker.getAbsolutePath());
}
} catch (Exception e) {
throw new MojoExecutionException(""Unable to update Marker timestamp: "" + marker.getAbsolutePath(), e);
}
}","@Override
public void setMarker() throws MojoExecutionException {
File fileVar1 = fileLiteral2;
try {
fileVar1.getParentFile().mkdirs();
} catch (NullPointerException e) {
}
try {
fileVar1.createNewFile();
} catch (IOException e) {
throw new MojoExecutionException(""Unable to create Marker: "" + fileVar1.getAbsolutePath(), e);
}
try {
long longVar3;
if (this.artifact != null && this.artifact.getFile() != null) {
longVar3 = this.artifact.getFile().lastModified();
} else {
longVar3 = System.currentTimeMillis();
}
if (!fileVar1.setLastModified(longVar3)) {
throw new MojoExecutionException(""Unable to update last modified timestamp on marker file "" + fileVar1.getAbsolutePath());
}
} catch (Exception e) {
throw new MojoExecutionException(""Unable to update Marker timestamp: "" + fileVar1.getAbsolutePath(), e);
}
}"
13859,BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,TP,mavendp,1819,"clearMarker.delete();
","@Override
public void setMarker() throws MojoExecutionException {
File marker = getMarkerFile();
File clearMarker = getMarkerFile(!this.resolved);
try {
marker.getParentFile().mkdirs();
} catch (NullPointerException e) {
}
try {
marker.createNewFile();
if (clearMarker.exists()) {
clearMarker.delete();
}
} catch (IOException e) {
throw new MojoExecutionException(""Unable to create Marker: "" + marker.getAbsolutePath(), e);
}
}","@Override
public void setMarker() throws MojoExecutionException {
File fileVar1 = fileLiteral2;
File fileVar3 = fileLiteral4;
try {
fileVar1.getParentFile().mkdirs();
} catch (NullPointerException e) {
}
try {
fileVar1.createNewFile();
if (fileVar3.exists()) {
fileVar3.delete();
}
} catch (IOException e) {
throw new MojoExecutionException(""Unable to create Marker: "" + fileVar1.getAbsolutePath(), e);
}
}"
13886,DODGY_CODE,UC_USELESS_OBJECT,FP,mavendp,1846,"List<org.apache.maven.model.Exclusion> exclusions = new ArrayList<>();
","private DependencyNode buildTree(DependencyNode parent, org.eclipse.aether.graph.DependencyNode child) {
List<org.apache.maven.model.Exclusion> exclusions = new ArrayList<>();
for (org.eclipse.aether.graph.Exclusion exclusion : child.getDependency().getExclusions()) {
exclusions.add(convertAetherExclusionToMavenExclusion(exclusion));
}
DefaultDependencyNode newChild = new DefaultDependencyNode(parent, convertAetherArtifactToMavenArtifact(child), child.getArtifact().getProperties().get(""preManagedVersion""), child.getArtifact().getProperties().get(""preManagedScope""), null, child.getDependency().isOptional());
newChild.setChildren(new ArrayList<>());
for (org.eclipse.aether.graph.DependencyNode grandChild : child.getChildren()) {
newChild.getChildren().add(buildTree(newChild, grandChild));
}
return newChild;
}","private DependencyNode buildTree(DependencyNode parent, org.eclipse.aether.graph.DependencyNode child) {
List<org.apache.maven.model.Exclusion> list<org.apache.maven.model.exclusion>Var1 = list<org.apache.maven.model.exclusion>Literal2;
for (org.eclipse.aether.graph.Exclusion org.eclipse.aether.graph.exclusionVar3 : child.getDependency().getExclusions()) {
list<org.apache.maven.model.exclusion>Var1.add(convertAetherExclusionToMavenExclusion(org.eclipse.aether.graph.exclusionVar3));
}
DefaultDependencyNode defaultdependencynodeVar4 = defaultdependencynodeLiteral5;
defaultdependencynodeVar4.setChildren(new ArrayList<>());
for (org.eclipse.aether.graph.DependencyNode org.eclipse.aether.graph.dependencynodeVar6 : child.getChildren()) {
defaultdependencynodeVar4.getChildren().add(buildTree(defaultdependencynodeVar4, org.eclipse.aether.graph.dependencynodeVar6));
}
return defaultdependencynodeVar4;
}"
13949,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,net,8,"return null;
","public String[] featureValues(String feature) throws IOException {
if (!initFeatureMap()) {
return null;
}
Set<String> entries = __featuresMap.get(feature.toUpperCase(Locale.ENGLISH));
if (entries != null) {
return entries.toArray(new String[entries.size()]);
}
return null;
}","public String[] featureValues(String feature) throws IOException {
if (!initFeatureMap()) {
return null;
}
Set<String> set<string>Var1 = set<string>Literal2;
if (set<string>Var1 != null) {
return set<string>Var1.toArray(new String[set<string>Var1.size()]);
}
return null;
}"
13952,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,net,11,"return null;
","public String[] listNames(String pathname) throws IOException {
Socket socket = _openDataConnection_(FTPCmd.NLST, getListArguments(pathname));
if (socket == null) {
return null;
}
BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream(), getControlEncoding()));
ArrayList<String> results = new ArrayList<String>();
String line;
while ((line = reader.readLine()) != null) {
results.add(line);
}
reader.close();
socket.close();
if (completePendingCommand()) {
String[] names = new String[results.size()];
return results.toArray(names);
}
return null;
}","public String[] listNames(String pathname) throws IOException {
Socket socketVar1 = socketLiteral2;
if (socketVar1 == null) {
return null;
}
BufferedReader bufferedreaderVar3 = bufferedreaderLiteral4;
ArrayList<String> arraylist<string>Var5 = arraylist<string>Literal6;
String stringVar7;
while ((stringVar7 = bufferedreaderVar3.readLine()) != null) {
arraylist<string>Var5.add(stringVar7);
}
bufferedreaderVar3.close();
socketVar1.close();
if (completePendingCommand()) {
String[] stringArrayVar8 = stringArrayLiteral9;
return arraylist<string>Var5.toArray(stringArrayVar8);
}
return null;
}"
13954,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,net,13,"return null;
","public byte[] parseADATReply(String reply) {
if (reply == null) {
return null;
} else {
return Base64.decodeBase64(extractPrefixedData(""ADAT="", reply));
}
}","public byte[] parseADATReply(String reply) {
if (reply == null) {
return null;
} else {
return Base64.decodeBase64(extractPrefixedData(""ADAT="", reply));
}
}"
13960,DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,net,19,"file = unixFTPEntryParser.parseFTPEntry(entry);
","private boolean parseUnixList(FTPFile file, String entry) {
file = unixFTPEntryParser.parseFTPEntry(entry);
if (file == null) {
return false;
}
return true;
}","private boolean parseUnixList(FTPFile file, String entry) {
file = unixFTPEntryParser.parseFTPEntry(entry);
if (file == null) {
return false;
}
return true;
}"
13976,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,net,35,"return null;
","public String[] listNewNews(NewGroupsOrNewsQuery query) throws IOException {
if (!NNTPReply.isPositiveCompletion(newnews(query.getNewsgroups(), query.getDate(), query.getTime(), query.isGMT(), query.getDistributions()))) {
return null;
}
Vector<String> list = new Vector<String>();
BufferedReader reader = new DotTerminatedMessageReader(_reader_);
String line;
try {
while ((line = reader.readLine()) != null) {
list.addElement(line);
}
} finally {
reader.close();
}
int size = list.size();
if (size < 1) {
return new String[0];
}
String[] result = new String[size];
list.copyInto(result);
return result;
}","public String[] listNewNews(NewGroupsOrNewsQuery query) throws IOException {
if (!NNTPReply.isPositiveCompletion(newnews(query.getNewsgroups(), query.getDate(), query.getTime(), query.isGMT(), query.getDistributions()))) {
return null;
}
Vector<String> vector<string>Var1 = vector<string>Literal2;
BufferedReader bufferedreaderVar3 = bufferedreaderLiteral4;
String stringVar5;
try {
while ((stringVar5 = bufferedreaderVar3.readLine()) != null) {
vector<string>Var1.addElement(stringVar5);
}
} finally {
bufferedreaderVar3.close();
}
int intVar6 = intLiteral7;
if (intVar6 < 1) {
return new String[0];
}
String[] stringArrayVar8 = stringArrayLiteral9;
vector<string>Var1.copyInto(stringArrayVar8);
return stringArrayVar8;
}"
13977,DODGY_CODE,DLS_DEAD_LOCAL_STORE,FP,net,36,"pointer.articleId = tokens[i++];
","private void __parseArticlePointer(String reply, ArticleInfo pointer) throws MalformedServerReplyException {
String[] tokens = reply.split("" "");
if (tokens.length >= 3) {
int i = 1;
try {
pointer.articleNumber = Long.parseLong(tokens[i++]);
pointer.articleId = tokens[i++];
return;
} catch (NumberFormatException e) {
}
}
throw new MalformedServerReplyException(""Could not parse article pointer.\nServer reply: "" + reply);
}","private void __parseArticlePointer(String reply, ArticleInfo pointer) throws MalformedServerReplyException {
String[] stringArrayVar1 = stringArrayLiteral2;
if (stringArrayVar1.length >= 3) {
int intVar3 = intLiteral4;
try {
pointer.articleNumber = Long.parseLong(stringArrayVar1[intVar3++]);
pointer.articleId = stringArrayVar1[intVar3++];
return;
} catch (NumberFormatException e) {
}
}
throw new MalformedServerReplyException(""Could not parse article pointer.\nServer reply: "" + reply);
}"
13997,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,net,56,"return null;
","public String[] getEnabledProtocols() {
if (_socket_ instanceof SSLSocket) {
return ((SSLSocket) _socket_).getEnabledProtocols();
}
return null;
}","public String[] getEnabledProtocols() {
if (_socket_ instanceof SSLSocket) {
return ((SSLSocket) _socket_).getEnabledProtocols();
}
return null;
}"
14115,DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,net,174,"ThreadContainer container = idTable.get(id);
","private void buildContainer(Threadable threadable) {
String id = threadable.messageThreadId();
ThreadContainer container = idTable.get(id);
if (container != null) {
if (container.threadable != null) {
id = ""<Bogus-id:"" + (bogusIdCount++) + "">"";
container = null;
} else {
container.threadable = threadable;
}
}
if (container == null) {
container = new ThreadContainer();
container.threadable = threadable;
idTable.put(id, container);
}
ThreadContainer parentRef = null;
{
String[] references = threadable.messageThreadReferences();
for (int i = 0; i < references.length; ++i) {
String refString = references[i];
ThreadContainer ref = idTable.get(refString);
if (ref == null) {
ref = new ThreadContainer();
idTable.put(refString, ref);
}
// Link references together in the order they appear in the References: header,
if ((parentRef != null) && (ref.parent == null) && (parentRef != ref) && !(ref.findChild(parentRef))) {
ref.parent = parentRef;
ref.next = parentRef.child;
parentRef.child = ref;
}
parentRef = ref;
}
}
if (parentRef != null && (parentRef == container || container.findChild(parentRef))) {
parentRef = null;
}
// if it has a parent already, its because we saw this message in a References: field, and presumed
if (container.parent != null) {
ThreadContainer rest, prev;
for (prev = null, rest = container.parent.child; rest != null; prev = rest, rest = rest.next) {
if (rest == container) {
break;
}
}
if (rest == null) {
throw new RuntimeException(""Didnt find "" + container + "" in parent"" + container.parent);
}
if (prev == null) {
container.parent.child = container.next;
} else {
prev.next = container.next;
}
container.next = null;
container.parent = null;
}
if (parentRef != null) {
container.parent = parentRef;
container.next = parentRef.child;
parentRef.child = container;
}
}","private void buildContainer(Threadable threadable) {
String stringVar1 = stringLiteral2;
ThreadContainer threadcontainerVar3 = threadcontainerLiteral4;
if (threadcontainerVar3 != null) {
if (threadcontainerVar3.threadable != null) {
stringVar1 = ""<Bogus-id:"" + (bogusIdCount++) + "">"";
threadcontainerVar3 = null;
} else {
threadcontainerVar3.threadable = threadable;
}
}
if (threadcontainerVar3 == null) {
threadcontainerVar3 = new ThreadContainer();
threadcontainerVar3.threadable = threadable;
idTable.put(stringVar1, threadcontainerVar3);
}
ThreadContainer threadcontainerVar5 = threadcontainerLiteral6;
{
String[] stringArrayVar7 = stringArrayLiteral8;
for (int intVar17 = intLiteral18; intVar9 < intLiteral1; ++intVar9) {
String stringVar11 = stringLiteral12;
ThreadContainer threadcontainerVar13 = threadcontainerLiteral14;
if (threadcontainerVar13 == null) {
threadcontainerVar13 = new ThreadContainer();
idTable.put(stringVar11, threadcontainerVar13);
}
// Link references together in the order they appear in the References: header,
if ((threadcontainerVar5 != null) && (threadcontainerVar13.parent == null) && (threadcontainerVar5 != threadcontainerVar13) && !(threadcontainerVar13.findChild(threadcontainerVar5))) {
threadcontainerVar13.parent = threadcontainerVar5;
threadcontainerVar13.next = threadcontainerVar5.child;
threadcontainerVar5.child = threadcontainerVar13;
}
threadcontainerVar5 = threadcontainerVar13;
}
}
if (threadcontainerVar5 != null && (threadcontainerVar5 == threadcontainerVar3 || threadcontainerVar3.findChild(threadcontainerVar5))) {
threadcontainerVar5 = null;
}
// if it has a parent already, its because we saw this message in a References: field, and presumed
if (threadcontainerVar3.parent != null) {
ThreadContainer threadcontainerVar15, threadcontainerVar16;
for (threadcontainerVar16 = null, threadcontainerVar15 = threadcontainerVar3.parent.child; threadcontainerVar15 != null; threadcontainerVar16 = threadcontainerVar15, threadcontainerVar15 = threadcontainerVar15.next) {
if (threadcontainerVar15 == threadcontainerVar3) {
break;
}
}
if (threadcontainerVar15 == null) {
throw new RuntimeException(""Didnt find "" + threadcontainerVar3 + "" in parent"" + threadcontainerVar3.parent);
}
if (threadcontainerVar16 == null) {
threadcontainerVar3.parent.child = threadcontainerVar3.next;
} else {
threadcontainerVar16.next = threadcontainerVar3.next;
}
threadcontainerVar3.next = null;
threadcontainerVar3.parent = null;
}
if (threadcontainerVar5 != null) {
threadcontainerVar3.parent = threadcontainerVar5;
threadcontainerVar3.next = threadcontainerVar5.child;
threadcontainerVar5.child = threadcontainerVar3;
}
}"
14132,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,net,191,"return null;
","public String[] getServerAliases(String keyType, Principal[] issuers) {
return null;
}","public String[] getServerAliases(String keyType, Principal[] issuers) {
return null;
}"
14133,BAD_PRACTICE,SE_BAD_FIELD,FP,net,192,private final CopyOnWriteArrayList<EventListener> __listeners;,private final CopyOnWriteArrayList<EventListener> __listeners;,private final CopyOnWriteArrayList<EventListener> copyonwritearraylist<eventlistener>Var1;
14461,I18N,DM_DEFAULT_ENCODING,FP,net,520,"this(new PrintWriter(stream), suppressLogin);
","public PrintCommandListener(PrintStream stream, boolean suppressLogin) {
this(new PrintWriter(stream), suppressLogin);
}","public PrintCommandListener(PrintStream stream, boolean suppressLogin) {
this(new PrintWriter(stream), suppressLogin);
}"
14470,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,net,529,"return null;
","public String[] getEnabledProtocols() {
if (_socket_ instanceof SSLSocket) {
return ((SSLSocket) _socket_).getEnabledProtocols();
}
return null;
}","public String[] getEnabledProtocols() {
if (_socket_ instanceof SSLSocket) {
return ((SSLSocket) _socket_).getEnabledProtocols();
}
return null;
}"
14492,DODGY_CODE,DLS_DEAD_LOCAL_STORE,FP,net,551,"pointer.articleId = tokens[i++];
","private void __parseArticlePointer(String reply, ArticleInfo pointer) throws MalformedServerReplyException {
String[] tokens = reply.split("" "");
if (tokens.length >= 3) {
int i = 1;
try {
pointer.articleNumber = Long.parseLong(tokens[i++]);
pointer.articleId = tokens[i++];
return;
} catch (NumberFormatException e) {
}
}
throw new MalformedServerReplyException(""Could not parse article pointer.\nServer reply: "" + reply);
}","private void __parseArticlePointer(String reply, ArticleInfo pointer) throws MalformedServerReplyException {
String[] stringArrayVar1 = stringArrayLiteral2;
if (stringArrayVar1.length >= 3) {
int intVar3 = intLiteral4;
try {
pointer.articleNumber = Long.parseLong(stringArrayVar1[intVar3++]);
pointer.articleId = stringArrayVar1[intVar3++];
return;
} catch (NumberFormatException e) {
}
}
throw new MalformedServerReplyException(""Could not parse article pointer.\nServer reply: "" + reply);
}"
14506,DODGY_CODE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,FP,net,565,public int size;,public int size;,public int intVar1;
14510,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,net,569,"return null;
","public String[] getEnabledProtocols() {
if (_socket_ instanceof SSLSocket) {
return ((SSLSocket) _socket_).getEnabledProtocols();
}
return null;
}","public String[] getEnabledProtocols() {
if (_socket_ instanceof SSLSocket) {
return ((SSLSocket) _socket_).getEnabledProtocols();
}
return null;
}"
14511,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,net,570,"return null;
","public String[] getEnabledCipherSuites() {
if (_socket_ instanceof SSLSocket) {
return ((SSLSocket) _socket_).getEnabledCipherSuites();
}
return null;
}","public String[] getEnabledCipherSuites() {
if (_socket_ instanceof SSLSocket) {
return ((SSLSocket) _socket_).getEnabledCipherSuites();
}
return null;
}"
14521,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,net,580,"return null;
","public int[] startSubnegotiationRemote() {
return null;
}","public int[] startSubnegotiationRemote() {
return null;
}"
14527,I18N,DM_DEFAULT_ENCODING,FP,net,586,"System.arraycopy(_filename.getBytes(), 0, data, 2, fileLength);
","@Override
final DatagramPacket _newDatagram(DatagramPacket datagram, byte[] data) {
int fileLength, modeLength;
fileLength = _filename.length();
modeLength = _modeBytes[_mode].length;
data[0] = 0;
data[1] = (byte) _type;
System.arraycopy(_filename.getBytes(), 0, data, 2, fileLength);
data[fileLength + 2] = 0;
System.arraycopy(_modeBytes[_mode], 0, data, fileLength + 3, modeLength);
datagram.setAddress(_address);
datagram.setPort(_port);
datagram.setData(data);
datagram.setLength(fileLength + modeLength + 3);
return datagram;
}","@Override
final DatagramPacket _newDatagram(DatagramPacket datagram, byte[] data) {
int intVar1, intVar2;
intVar1 = _filename.length();
intVar2 = _modeBytes[_mode].length;
data[0] = 0;
data[1] = (byte) _type;
System.arraycopy(_filename.getBytes(), 0, data, 2, intVar1);
data[intVar1 + 2] = 0;
System.arraycopy(_modeBytes[_mode], 0, data, intVar1 + 3, intVar2);
datagram.setAddress(_address);
datagram.setPort(_port);
datagram.setData(data);
datagram.setLength(intVar1 + intVar2 + 3);
return datagram;
}"
14901,DODGY_CODE,DB_DUPLICATE_SWITCH_CLAUSES,FP,net,960,"file.setPermission(FTPFile.USER_ACCESS, FTPFile.READ_PERMISSION, true);
break;
","private void doUnixPerms(FTPFile file, String valueLowerCase) {
for (char c : valueLowerCase.toCharArray()) {
switch(c) {
case 'a':
file.setPermission(FTPFile.USER_ACCESS, FTPFile.WRITE_PERMISSION, true);
break;
case 'c':
file.setPermission(FTPFile.USER_ACCESS, FTPFile.WRITE_PERMISSION, true);
break;
case 'd':
file.setPermission(FTPFile.USER_ACCESS, FTPFile.WRITE_PERMISSION, true);
break;
case 'e':
file.setPermission(FTPFile.USER_ACCESS, FTPFile.READ_PERMISSION, true);
break;
case 'f':
break;
case 'l':
file.setPermission(FTPFile.USER_ACCESS, FTPFile.EXECUTE_PERMISSION, true);
break;
case 'm':
file.setPermission(FTPFile.USER_ACCESS, FTPFile.WRITE_PERMISSION, true);
break;
case 'p':
file.setPermission(FTPFile.USER_ACCESS, FTPFile.WRITE_PERMISSION, true);
break;
case 'r':
file.setPermission(FTPFile.USER_ACCESS, FTPFile.READ_PERMISSION, true);
break;
case 'w':
file.setPermission(FTPFile.USER_ACCESS, FTPFile.WRITE_PERMISSION, true);
break;
default:
break;
}
}
}","private void doUnixPerms(FTPFile file, String valueLowerCase) {
for (char charVar1 : valueLowerCase.toCharArray()) {
switch(charVar1) {
case 'a':
file.setPermission(FTPFile.USER_ACCESS, FTPFile.WRITE_PERMISSION, true);
break;
case 'c':
file.setPermission(FTPFile.USER_ACCESS, FTPFile.WRITE_PERMISSION, true);
break;
case 'd':
file.setPermission(FTPFile.USER_ACCESS, FTPFile.WRITE_PERMISSION, true);
break;
case 'e':
file.setPermission(FTPFile.USER_ACCESS, FTPFile.READ_PERMISSION, true);
break;
case 'f':
break;
case 'l':
file.setPermission(FTPFile.USER_ACCESS, FTPFile.EXECUTE_PERMISSION, true);
break;
case 'm':
file.setPermission(FTPFile.USER_ACCESS, FTPFile.WRITE_PERMISSION, true);
break;
case 'p':
file.setPermission(FTPFile.USER_ACCESS, FTPFile.WRITE_PERMISSION, true);
break;
case 'r':
file.setPermission(FTPFile.USER_ACCESS, FTPFile.READ_PERMISSION, true);
break;
case 'w':
file.setPermission(FTPFile.USER_ACCESS, FTPFile.WRITE_PERMISSION, true);
break;
default:
break;
}
}
}"
14926,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,net,985,"return null;
","public POP3MessageInfo[] listUniqueIdentifiers() throws IOException {
if (getState() != TRANSACTION_STATE) {
return null;
}
if (sendCommand(POP3Command.UIDL) != POP3Reply.OK) {
return null;
}
getAdditionalReply();
POP3MessageInfo[] messages = new POP3MessageInfo[_replyLines.size() - 2];
ListIterator<String> en = _replyLines.listIterator(1);
for (int line = 0; line < messages.length; line++) {
messages[line] = __parseUID(en.next());
}
return messages;
}","public POP3MessageInfo[] listUniqueIdentifiers() throws IOException {
if (getState() != TRANSACTION_STATE) {
return null;
}
if (sendCommand(POP3Command.UIDL) != POP3Reply.OK) {
return null;
}
getAdditionalReply();
POP3MessageInfo[] pop3messageinfoArrayVar1 = pop3messageinfoArrayLiteral2;
ListIterator<String> listiterator<string>Var3 = listiterator<string>Literal4;
for (int intVar7 = intLiteral8; intVar5 < intLiteral1; intVar5++) {
pop3messageinfoArrayVar1[intVar5] = __parseUID(listiterator<string>Var3.next());
}
return pop3messageinfoArrayVar1;
}"
14928,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,net,987,"return null;
","public POP3MessageInfo[] listMessages() throws IOException {
if (getState() != TRANSACTION_STATE) {
return null;
}
if (sendCommand(POP3Command.LIST) != POP3Reply.OK) {
return null;
}
getAdditionalReply();
POP3MessageInfo[] messages = new POP3MessageInfo[_replyLines.size() - 2];
ListIterator<String> en = _replyLines.listIterator(1);
for (int line = 0; line < messages.length; line++) {
messages[line] = __parseStatus(en.next());
}
return messages;
}","public POP3MessageInfo[] listMessages() throws IOException {
if (getState() != TRANSACTION_STATE) {
return null;
}
if (sendCommand(POP3Command.LIST) != POP3Reply.OK) {
return null;
}
getAdditionalReply();
POP3MessageInfo[] pop3messageinfoArrayVar1 = pop3messageinfoArrayLiteral2;
ListIterator<String> listiterator<string>Var3 = listiterator<string>Literal4;
for (int intVar7 = intLiteral8; intVar5 < intLiteral1; intVar5++) {
pop3messageinfoArrayVar1[intVar5] = __parseStatus(listiterator<string>Var3.next());
}
return pop3messageinfoArrayVar1;
}"
14940,Multithreaded correctness,NO_NOTIFY_NOT_NOTIFYALL,FP,net,999,"__queue.notify();
","@Override
public void run() {
int ch;
try {
_outerLoop: while (!__isClosed) {
try {
if ((ch = __read(true)) < 0) {
break;
}
} catch (InterruptedIOException e) {
synchronized (__queue) {
__ioException = e;
__queue.notifyAll();
try {
__queue.wait(100);
} catch (InterruptedException interrupted) {
if (__isClosed) {
break _outerLoop;
}
}
continue;
}
} catch (RuntimeException re) {
super.close();
break _outerLoop;
}
boolean notify = false;
try {
notify = __processChar(ch);
} catch (InterruptedException e) {
if (__isClosed) {
break _outerLoop;
}
}
if (notify) {
__client.notifyInputListener();
}
}
} catch (IOException ioe) {
synchronized (__queue) {
__ioException = ioe;
}
__client.notifyInputListener();
}
synchronized (__queue) {
__isClosed = true;
__hasReachedEOF = true;
__queue.notify();
}
__threaded = false;
}","@Override
public void run() {
int intVar1;
try {
_outerLoop: while (!__isClosed) {
try {
if ((intVar1 = __read(true)) < 0) {
break;
}
} catch (InterruptedIOException e) {
synchronized (__queue) {
__ioException = e;
__queue.notifyAll();
try {
__queue.wait(100);
} catch (InterruptedException interrupted) {
if (__isClosed) {
break _outerLoop;
}
}
continue;
}
} catch (RuntimeException re) {
super.close();
break _outerLoop;
}
boolean booleanVar2 = booleanLiteral3;
try {
booleanVar2 = __processChar(intVar1);
} catch (InterruptedException e) {
if (__isClosed) {
break _outerLoop;
}
}
if (booleanVar2) {
__client.notifyInputListener();
}
}
} catch (IOException ioe) {
synchronized (__queue) {
__ioException = ioe;
}
__client.notifyInputListener();
}
synchronized (__queue) {
__isClosed = true;
__hasReachedEOF = true;
__queue.notify();
}
__threaded = false;
}"
14947,I18N,DM_DEFAULT_ENCODING,FP,net,1006,"System.arraycopy(_message.getBytes(), 0, data, 4, length);
","@Override
DatagramPacket _newDatagram(DatagramPacket datagram, byte[] data) {
int length;
length = _message.length();
data[0] = 0;
data[1] = (byte) _type;
data[2] = (byte) ((_error & 0xffff) >> 8);
data[3] = (byte) (_error & 0xff);
System.arraycopy(_message.getBytes(), 0, data, 4, length);
data[length + 4] = 0;
datagram.setAddress(_address);
datagram.setPort(_port);
datagram.setData(data);
datagram.setLength(length + 4);
return datagram;
}","@Override
DatagramPacket _newDatagram(DatagramPacket datagram, byte[] data) {
int intVar1;
intVar1 = _message.length();
data[0] = 0;
data[1] = (byte) _type;
data[2] = (byte) ((_error & 0xffff) >> 8);
data[3] = (byte) (_error & 0xff);
System.arraycopy(_message.getBytes(), 0, data, 4, intVar1);
data[intVar1 + 4] = 0;
datagram.setAddress(_address);
datagram.setPort(_port);
datagram.setData(data);
datagram.setLength(intVar1 + 4);
return datagram;
}"
14952,DODGY_CODE,SA_FIELD_DOUBLE_ASSIGNMENT,FP,net,1011,"modulus = (++modulus) % 3;
","void encode(byte[] in, int inPos, int inAvail) {
if (eof) {
return;
}
if (inAvail < 0) {
eof = true;
if (buffer == null || buffer.length - pos < encodeSize) {
resizeBuffer();
}
switch(modulus) {
case 1:
buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
if (encodeTable == STANDARD_ENCODE_TABLE) {
buffer[pos++] = PAD;
buffer[pos++] = PAD;
}
break;
case 2:
buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
if (encodeTable == STANDARD_ENCODE_TABLE) {
buffer[pos++] = PAD;
}
break;
default:
break;
}
if (lineLength > 0 && pos > 0) {
System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
pos += lineSeparator.length;
}
} else {
for (int i = 0; i < inAvail; i++) {
if (buffer == null || buffer.length - pos < encodeSize) {
resizeBuffer();
}
modulus = (++modulus) % 3;
int b = in[inPos++];
if (b < 0) {
b += 256;
}
x = (x << 8) + b;
if (0 == modulus) {
buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
buffer[pos++] = encodeTable[(x >> 12) & MASK_6BITS];
buffer[pos++] = encodeTable[(x >> 6) & MASK_6BITS];
buffer[pos++] = encodeTable[x & MASK_6BITS];
currentLinePos += 4;
if (lineLength > 0 && lineLength <= currentLinePos) {
System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
pos += lineSeparator.length;
currentLinePos = 0;
}
}
}
}
}","void encode(byte[] in, int inPos, int inAvail) {
if (eof) {
return;
}
if (inAvail < 0) {
eof = true;
if (buffer == null || buffer.length - pos < encodeSize) {
resizeBuffer();
}
switch(modulus) {
case 1:
buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
if (encodeTable == STANDARD_ENCODE_TABLE) {
buffer[pos++] = PAD;
buffer[pos++] = PAD;
}
break;
case 2:
buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
if (encodeTable == STANDARD_ENCODE_TABLE) {
buffer[pos++] = PAD;
}
break;
default:
break;
}
if (lineLength > 0 && pos > 0) {
System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
pos += lineSeparator.length;
}
} else {
for (int intVar5 = intLiteral6; intVar1 < intLiteral1; intVar1++) {
if (buffer == null || buffer.length - pos < encodeSize) {
resizeBuffer();
}
modulus = (++modulus) % 3;
int intVar3 = intLiteral4;
if (intVar3 < 0) {
intVar3 += 256;
}
x = (x << 8) + intVar3;
if (0 == modulus) {
buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
buffer[pos++] = encodeTable[(x >> 12) & MASK_6BITS];
buffer[pos++] = encodeTable[(x >> 6) & MASK_6BITS];
buffer[pos++] = encodeTable[x & MASK_6BITS];
currentLinePos += 4;
if (lineLength > 0 && lineLength <= currentLinePos) {
System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
pos += lineSeparator.length;
currentLinePos = 0;
}
}
}
}
}"
15147,BAD_PRACTICE,THROWS_METHOD_THROWS_CLAUSE_THROWABLE,FP,net,1206,"final Properties fp = new Properties();
final InputStream ras = Main.class.getResourceAsStream(""examples.properties"");
if (ras != null) {
fp.load(ras);
} else {
System.err.println(""[Cannot find examples.properties file, so aliases cannot be used]"");
}
if (args.length == 0) {
if (Thread.currentThread().getStackTrace().length > 2) { 
System.out.println(""Usage: mvn -q exec:java  -Dexec.arguments=<alias or"" +
"" exampleClass>,<exampleClass parameters> (comma-separated, no spaces)"");
System.out.println(""Or   : mvn -q exec:java  -Dexec.args=\""<alias"" +
"" or exampleClass> <exampleClass parameters>\"" (space separated)"");
} else {
if (fromJar()) {
System.out.println(
""Usage: java -jar commons-net-examples-m.n.jar <alias or exampleClass> <exampleClass parameters>"");
} else {
System.out.println(
""Usage: java -cp target/classes examples/Main <alias or exampleClass> <exampleClass parameters>"");
}
}
@SuppressWarnings(""unchecked"") 
List<String> l = (List<String>) Collections.list(fp.propertyNames());
if (l.isEmpty()) {
return;
}
Collections.sort(l);
System.out.println(""\nAliases and their classes:"");
for(String s : l) {
System.out.printf(""%-25s %s%n"",s,fp.getProperty(s));
}
return;
}
String shortName = args[0];
String fullName = fp.getProperty(shortName);
if (fullName == null) {
fullName = shortName;
}
fullName = fullName.replace('/', '.');
try {
Class<?> clazz = Class.forName(fullName);
Method m = clazz.getDeclaredMethod(""main"", new Class[]{args.getClass()});
String[] args2 = new String[args.length-1];
System.arraycopy(args, 1, args2, 0, args2.length);
try {
m.invoke(null, (Object)args2);
} catch (InvocationTargetException ite) {
Throwable cause = ite.getCause();
if (cause != null) {
throw cause;
} else {
throw ite;
}
}
} catch (ClassNotFoundException e) {
System.out.println(e);
}
}
","public static void main(String[] args) throws Throwable {
final Properties fp = new Properties();
final InputStream ras = Main.class.getResourceAsStream(""examples.properties"");
if (ras != null) {
fp.load(ras);
} else {
System.err.println(""[Cannot find examples.properties file, so aliases cannot be used]"");
}
if (args.length == 0) {
if (Thread.currentThread().getStackTrace().length > 2) {
System.out.println(""Usage: mvn -q exec:java  -Dexec.arguments=<alias or"" + "" exampleClass>,<exampleClass parameters> (comma-separated, no spaces)"");
System.out.println(""Or   : mvn -q exec:java  -Dexec.args=\""<alias"" + "" or exampleClass> <exampleClass parameters>\"" (space separated)"");
} else {
if (fromJar()) {
System.out.println(""Usage: java -jar commons-net-examples-m.n.jar <alias or exampleClass> <exampleClass parameters>"");
} else {
System.out.println(""Usage: java -cp target/classes examples/Main <alias or exampleClass> <exampleClass parameters>"");
}
}
@SuppressWarnings(""unchecked"")
List<String> l = (List<String>) Collections.list(fp.propertyNames());
if (l.isEmpty()) {
return;
}
Collections.sort(l);
System.out.println(""\nAliases and their classes:"");
for (String s : l) {
System.out.printf(""%-25s %s%n"", s, fp.getProperty(s));
}
return;
}
String shortName = args[0];
String fullName = fp.getProperty(shortName);
if (fullName == null) {
fullName = shortName;
}
fullName = fullName.replace('/', '.');
try {
Class<?> clazz = Class.forName(fullName);
Method m = clazz.getDeclaredMethod(""main"", new Class[] { args.getClass() });
String[] args2 = new String[args.length - 1];
System.arraycopy(args, 1, args2, 0, args2.length);
try {
m.invoke(null, (Object) args2);
} catch (InvocationTargetException ite) {
Throwable cause = ite.getCause();
if (cause != null) {
throw cause;
} else {
throw ite;
}
}
} catch (ClassNotFoundException e) {
System.out.println(e);
}
}","public static void main(String[] args) throws Throwable {
final Properties propertiesVar1 = propertiesLiteral2;
final InputStream inputstreamVar3 = inputstreamLiteral4;
if (inputstreamVar3 != null) {
propertiesVar1.load(inputstreamVar3);
} else {
System.err.println(""[Cannot find examples.properties file, so aliases cannot be used]"");
}
if (args.length == 0) {
if (Thread.currentThread().getStackTrace().length > 2) {
System.out.println(""Usage: mvn -q exec:java  -Dexec.arguments=<alias or"" + "" exampleClass>,<exampleClass parameters> (comma-separated, no spaces)"");
System.out.println(""Or   : mvn -q exec:java  -Dexec.args=\""<alias"" + "" or exampleClass> <exampleClass parameters>\"" (space separated)"");
} else {
if (fromJar()) {
System.out.println(""Usage: java -jar commons-net-examples-m.n.jar <alias or exampleClass> <exampleClass parameters>"");
} else {
System.out.println(""Usage: java -cp target/classes examples/Main <alias or exampleClass> <exampleClass parameters>"");
}
}
@SuppressWarnings(""unchecked"")
List<String> list<string>Var5 = list<string>Literal6;
if (list<string>Var5.isEmpty()) {
return;
}
Collections.sort(list<string>Var5);
System.out.println(""\nAliases and their classes:"");
for (String stringVar7 : list<string>Var5) {
System.out.printf(""%-25s %s%n"", stringVar7, propertiesVar1.getProperty(stringVar7));
}
return;
}
String stringVar8 = stringLiteral9;
String stringVar10 = stringLiteral11;
if (stringVar10 == null) {
stringVar10 = stringVar8;
}
stringVar10 = stringVar10.replace('/', '.');
try {
Class<?> class<?>Var12 = class<?>Literal13;
Method methodVar14 = methodLiteral15;
String[] stringArrayVar16 = stringArrayLiteral17;
System.arraycopy(args, 1, stringArrayVar16, 0, stringArrayVar16.length);
try {
methodVar14.invoke(null, (Object) stringArrayVar16);
} catch (InvocationTargetException ite) {
Throwable throwableVar18 = throwableLiteral19;
if (throwableVar18 != null) {
throw throwableVar18;
} else {
throw ite;
}
}
} catch (ClassNotFoundException e) {
System.out.println(e);
}
}"
15165,DODGY_CODE,NP_LOAD_OF_KNOWN_NULL_VALUE,FP,net,1224,"file.setUser(usr);
","@Override
public FTPFile parseFTPEntry(String entry) {
FTPFile file = new FTPFile();
file.setRawListing(entry);
int type;
boolean isDevice = false;
if (matches(entry)) {
String typeStr = group(1);
String hardLinkCount = ""0"";
String usr = null;
String grp = null;
String filesize = group(20);
String datestr = group(21) + "" "" + group(22);
String name = group(23);
String endtoken = group(24);
try {
file.setTimestamp(super.parseTimestamp(datestr));
} catch (ParseException e) {
}
switch(typeStr.charAt(0)) {
case 'd':
type = FTPFile.DIRECTORY_TYPE;
break;
case 'e':
type = FTPFile.SYMBOLIC_LINK_TYPE;
break;
case 'l':
type = FTPFile.SYMBOLIC_LINK_TYPE;
break;
case 'b':
case 'c':
isDevice = true;
type = FTPFile.FILE_TYPE;
break;
case 'f':
case '-':
type = FTPFile.FILE_TYPE;
break;
default:
// e.g. ? and w = whiteout
type = FTPFile.UNKNOWN_TYPE;
}
file.setType(type);
int g = 4;
for (int access = 0; access < 3; access++, g += 4) {
file.setPermission(access, FTPFile.READ_PERMISSION, (!group(g).equals(""-"")));
file.setPermission(access, FTPFile.WRITE_PERMISSION, (!group(g + 1).equals(""-"")));
String execPerm = group(g + 2);
if (!execPerm.equals(""-"") && !Character.isUpperCase(execPerm.charAt(0))) {
file.setPermission(access, FTPFile.EXECUTE_PERMISSION, true);
} else {
file.setPermission(access, FTPFile.EXECUTE_PERMISSION, false);
}
}
if (!isDevice) {
try {
file.setHardLinkCount(Integer.parseInt(hardLinkCount));
} catch (NumberFormatException e) {
}
}
file.setUser(usr);
file.setGroup(grp);
try {
file.setSize(Long.parseLong(filesize));
} catch (NumberFormatException e) {
}
if (null == endtoken) {
file.setName(name);
} else {
name += endtoken;
if (type == FTPFile.SYMBOLIC_LINK_TYPE) {
int end = name.indexOf("" -> "");
if (end == -1) {
file.setName(name);
} else {
file.setName(name.substring(0, end));
file.setLink(name.substring(end + 4));
}
} else {
file.setName(name);
}
}
return file;
}
return null;
}","@Override
public FTPFile parseFTPEntry(String entry) {
FTPFile ftpfileVar1 = ftpfileLiteral2;
ftpfileVar1.setRawListing(entry);
int intVar3;
boolean booleanVar4 = booleanLiteral5;
if (matches(entry)) {
String stringVar6 = stringLiteral7;
String stringVar8 = stringLiteral9;
String stringVar10 = stringLiteral11;
String stringVar12 = stringLiteral11;
String stringVar13 = stringLiteral14;
String stringVar15 = stringLiteral16;
String stringVar17 = stringLiteral18;
String stringVar19 = stringLiteral20;
try {
ftpfileVar1.setTimestamp(super.parseTimestamp(stringVar15));
} catch (ParseException e) {
}
switch(stringVar6.charAt(0)) {
case 'd':
intVar3 = FTPFile.DIRECTORY_TYPE;
break;
case 'e':
intVar3 = FTPFile.SYMBOLIC_LINK_TYPE;
break;
case 'l':
intVar3 = FTPFile.SYMBOLIC_LINK_TYPE;
break;
case 'b':
case 'c':
booleanVar4 = true;
intVar3 = FTPFile.FILE_TYPE;
break;
case 'f':
case '-':
intVar3 = FTPFile.FILE_TYPE;
break;
default:
// e.g. ? and w = whiteout
intVar3 = FTPFile.UNKNOWN_TYPE;
}
ftpfileVar1.setType(intVar3);
int intVar21 = intLiteral22;
for (int intVar29 = intLiteral30; intVar23 < intLiteral1; intVar23++, intVar21 += 4) {
ftpfileVar1.setPermission(intVar23, FTPFile.READ_PERMISSION, (!group(intVar21).equals(""-"")));
ftpfileVar1.setPermission(intVar23, FTPFile.WRITE_PERMISSION, (!group(intVar21 + 1).equals(""-"")));
String stringVar25 = stringLiteral26;
if (!stringVar25.equals(""-"") && !Character.isUpperCase(stringVar25.charAt(0))) {
ftpfileVar1.setPermission(intVar23, FTPFile.EXECUTE_PERMISSION, true);
} else {
ftpfileVar1.setPermission(intVar23, FTPFile.EXECUTE_PERMISSION, false);
}
}
if (!booleanVar4) {
try {
ftpfileVar1.setHardLinkCount(Integer.parseInt(stringVar8));
} catch (NumberFormatException e) {
}
}
ftpfileVar1.setUser(stringVar10);
ftpfileVar1.setGroup(stringVar12);
try {
ftpfileVar1.setSize(Long.parseLong(stringVar13));
} catch (NumberFormatException e) {
}
if (null == stringVar19) {
ftpfileVar1.setName(stringVar17);
} else {
stringVar17 += stringVar19;
if (intVar3 == FTPFile.SYMBOLIC_LINK_TYPE) {
int intVar27 = intLiteral28;
if (intVar27 == -1) {
ftpfileVar1.setName(stringVar17);
} else {
ftpfileVar1.setName(stringVar17.substring(0, intVar27));
ftpfileVar1.setLink(stringVar17.substring(intVar27 + 4));
}
} else {
ftpfileVar1.setName(stringVar17);
}
}
return ftpfileVar1;
}
return null;
}"
15180,BAD_PRACTICE,THROWS_METHOD_THROWS_RUNTIMEEXCEPTION,FP,net,1239,"if (parent != null && threadable == null) {
throw new RuntimeException(""no threadable in "" + this.toString());
}
parent = null;
if (threadable != null) {
threadable.setChild(child == null ? null : child.threadable);
}
if (child != null) {
child.flush();
child = null;
}
if (threadable != null) {
threadable.setNext(next == null ? null : next.threadable);
}
if (next != null) {
next.flush();
next = null;
}
threadable = null;
}
","void flush() {
if (parent != null && threadable == null) {
throw new RuntimeException(""no threadable in "" + this.toString());
}
parent = null;
if (threadable != null) {
threadable.setChild(child == null ? null : child.threadable);
}
if (child != null) {
child.flush();
child = null;
}
if (threadable != null) {
threadable.setNext(next == null ? null : next.threadable);
}
if (next != null) {
next.flush();
next = null;
}
threadable = null;
}","void flush() {
if (parent != null && threadable == null) {
throw new RuntimeException(""no threadable in "" + this.toString());
}
parent = null;
if (threadable != null) {
threadable.setChild(child == null ? null : child.threadable);
}
if (child != null) {
child.flush();
child = null;
}
if (threadable != null) {
threadable.setNext(next == null ? null : next.threadable);
}
if (next != null) {
next.flush();
next = null;
}
threadable = null;
}"
15205,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,net,1264,"return null;
","@Override
public int[] answerSubnegotiation(int[] suboptionData, int suboptionLength) {
if ((suboptionData != null) && (suboptionLength > 1) && (termType != null)) {
if ((suboptionData[0] == TERMINAL_TYPE) && (suboptionData[1] == TERMINAL_TYPE_SEND)) {
int[] response = new int[termType.length() + 2];
response[0] = TERMINAL_TYPE;
response[1] = TERMINAL_TYPE_IS;
for (int ii = 0; ii < termType.length(); ii++) {
response[ii + 2] = termType.charAt(ii);
}
return response;
}
}
return null;
}","@Override
public int[] answerSubnegotiation(int[] suboptionData, int suboptionLength) {
if ((suboptionData != null) && (suboptionLength > 1) && (termType != null)) {
if ((suboptionData[0] == TERMINAL_TYPE) && (suboptionData[1] == TERMINAL_TYPE_SEND)) {
int[] intArrayVar1 = intArrayLiteral2;
intArrayVar1[0] = TERMINAL_TYPE;
intArrayVar1[1] = TERMINAL_TYPE_IS;
for (int intVar5 = intLiteral6; intVar3 < intLiteral1; intVar3++) {
intArrayVar1[intVar3 + 2] = termType.charAt(intVar3);
}
return intArrayVar1;
}
}
return null;
}"
15238,MALICIOUS_CODE,MS_SHOULD_BE_FINAL,FP,net,1297,"@Deprecated
public static String KEYSTORE_ALGORITHM;","@Deprecated
public static String KEYSTORE_ALGORITHM;","@Deprecated
public static String stringVar1;"
15262,PERFORMANCE,WMI_WRONG_MAP_ITERATOR,FP,net,1321,"ThreadContainer c = idTable.get(key);
","private ThreadContainer findRootSet() {
ThreadContainer root = new ThreadContainer();
Iterator<String> iter = idTable.keySet().iterator();
while (iter.hasNext()) {
Object key = iter.next();
ThreadContainer c = idTable.get(key);
if (c.parent == null) {
if (c.next != null) {
throw new RuntimeException(""c.next is "" + c.next.toString());
}
c.next = root.child;
root.child = c;
}
}
return root;
}","private ThreadContainer findRootSet() {
ThreadContainer threadcontainerVar1 = threadcontainerLiteral2;
Iterator<String> iterator<string>Var3 = iterator<string>Literal4;
while (iterator<string>Var3.hasNext()) {
Object objectVar5 = objectLiteral6;
ThreadContainer threadcontainerVar7 = threadcontainerLiteral8;
if (threadcontainerVar7.parent == null) {
if (threadcontainerVar7.next != null) {
throw new RuntimeException(""c.next is "" + threadcontainerVar7.next.toString());
}
threadcontainerVar7.next = threadcontainerVar1.child;
threadcontainerVar1.child = threadcontainerVar7;
}
}
return threadcontainerVar1;
}"
15266,MALICIOUS_CODE,MC_OVERRIDABLE_METHOD_CALL_IN_CONSTRUCTOR,FP,net,1325,"computeDetails();
","public TimeInfo(NtpV3Packet message, long returnTime, List<String> comments, boolean doComputeDetails) {
if (message == null) {
throw new IllegalArgumentException(""message cannot be null"");
}
this._returnTime = returnTime;
this._message = message;
this._comments = comments;
if (doComputeDetails) {
computeDetails();
}
}","public TimeInfo(NtpV3Packet message, long returnTime, List<String> comments, boolean doComputeDetails) {
if (message == null) {
throw new IllegalArgumentException(""message cannot be null"");
}
this._returnTime = returnTime;
this._message = message;
this._comments = comments;
if (doComputeDetails) {
computeDetails();
}
}"
15268,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,net,1327,"return null;
","public POP3MessageInfo[] listMessages() throws IOException {
if (getState() != TRANSACTION_STATE) {
return null;
}
if (sendCommand(POP3Command.LIST) != POP3Reply.OK) {
return null;
}
getAdditionalReply();
POP3MessageInfo[] messages = new POP3MessageInfo[_replyLines.size() - 2];
ListIterator<String> en = _replyLines.listIterator(1);
for (int line = 0; line < messages.length; line++) {
messages[line] = __parseStatus(en.next());
}
return messages;
}","public POP3MessageInfo[] listMessages() throws IOException {
if (getState() != TRANSACTION_STATE) {
return null;
}
if (sendCommand(POP3Command.LIST) != POP3Reply.OK) {
return null;
}
getAdditionalReply();
POP3MessageInfo[] pop3messageinfoArrayVar1 = pop3messageinfoArrayLiteral2;
ListIterator<String> listiterator<string>Var3 = listiterator<string>Literal4;
for (int intVar7 = intLiteral8; intVar5 < intLiteral1; intVar5++) {
pop3messageinfoArrayVar1[intVar5] = __parseStatus(listiterator<string>Var3.next());
}
return pop3messageinfoArrayVar1;
}"
15271,DODGY_CODE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,FP,net,1330,"(SSLSocket) ssf.createSocket(_socket_, ip, port, true);
","private void performSSLNegotiation() throws IOException {
initSSLContext();
SSLSocketFactory ssf = context.getSocketFactory();
String ip = getRemoteAddress().getHostAddress();
int port = getRemotePort();
SSLSocket socket = (SSLSocket) ssf.createSocket(_socket_, ip, port, true);
socket.setEnableSessionCreation(true);
socket.setUseClientMode(true);
if (protocols != null) {
socket.setEnabledProtocols(protocols);
}
if (suites != null) {
socket.setEnabledCipherSuites(suites);
}
socket.startHandshake();
_socket_ = socket;
_input_ = socket.getInputStream();
_output_ = socket.getOutputStream();
_reader = new CRLFLineReader(new InputStreamReader(_input_, _DEFAULT_ENCODING));
_writer = new BufferedWriter(new OutputStreamWriter(_output_, _DEFAULT_ENCODING));
}","private void performSSLNegotiation() throws IOException {
initSSLContext();
SSLSocketFactory sslsocketfactoryVar1 = sslsocketfactoryLiteral2;
String stringVar3 = stringLiteral4;
int intVar5 = intLiteral6;
SSLSocket sslsocketVar7 = sslsocketLiteral8;
sslsocketVar7.setEnableSessionCreation(true);
sslsocketVar7.setUseClientMode(true);
if (protocols != null) {
sslsocketVar7.setEnabledProtocols(protocols);
}
if (suites != null) {
sslsocketVar7.setEnabledCipherSuites(suites);
}
sslsocketVar7.startHandshake();
_socket_ = sslsocketVar7;
_input_ = sslsocketVar7.getInputStream();
_output_ = sslsocketVar7.getOutputStream();
_reader = new CRLFLineReader(new InputStreamReader(_input_, _DEFAULT_ENCODING));
_writer = new BufferedWriter(new OutputStreamWriter(_output_, _DEFAULT_ENCODING));
}"
15272,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,net,1331,"return null;
","public String[] getEnabledProtocols() {
if (_socket_ instanceof SSLSocket) {
return ((SSLSocket) _socket_).getEnabledProtocols();
}
return null;
}","public String[] getEnabledProtocols() {
if (_socket_ instanceof SSLSocket) {
return ((SSLSocket) _socket_).getEnabledProtocols();
}
return null;
}"
15523,I18N,DM_DEFAULT_ENCODING,FP,net,1582,"this(new PrintWriter(stream), suppressLogin, eolMarker, showDirection);
","public PrintCommandListener(PrintStream stream, boolean suppressLogin, char eolMarker, boolean showDirection) {
this(new PrintWriter(stream), suppressLogin, eolMarker, showDirection);
}","public PrintCommandListener(PrintStream stream, boolean suppressLogin, char eolMarker, boolean showDirection) {
this(new PrintWriter(stream), suppressLogin, eolMarker, showDirection);
}"
15524,I18N,DM_DEFAULT_ENCODING,FP,net,1583,"this(new PrintWriter(stream), suppressLogin);
","public PrintCommandListener(PrintStream stream, boolean suppressLogin) {
this(new PrintWriter(stream), suppressLogin);
}","public PrintCommandListener(PrintStream stream, boolean suppressLogin) {
this(new PrintWriter(stream), suppressLogin);
}"
15602,DODGY_CODE,DLS_DEAD_LOCAL_STORE,FP,net,1661,"pointer.articleId = tokens[i++];
","private void __parseArticlePointer(String reply, ArticleInfo pointer) throws MalformedServerReplyException {
String[] tokens = reply.split("" "");
if (tokens.length >= 3) {
int i = 1;
try {
pointer.articleNumber = Long.parseLong(tokens[i++]);
pointer.articleId = tokens[i++];
return;
} catch (NumberFormatException e) {
}
}
throw new MalformedServerReplyException(""Could not parse article pointer.\nServer reply: "" + reply);
}","private void __parseArticlePointer(String reply, ArticleInfo pointer) throws MalformedServerReplyException {
String[] stringArrayVar1 = stringArrayLiteral2;
if (stringArrayVar1.length >= 3) {
int intVar3 = intLiteral4;
try {
pointer.articleNumber = Long.parseLong(stringArrayVar1[intVar3++]);
pointer.articleId = stringArrayVar1[intVar3++];
return;
} catch (NumberFormatException e) {
}
}
throw new MalformedServerReplyException(""Could not parse article pointer.\nServer reply: "" + reply);
}"
15605,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,net,1664,"return null;
","public String[] listNewNews(NewGroupsOrNewsQuery query) throws IOException {
if (!NNTPReply.isPositiveCompletion(newnews(query.getNewsgroups(), query.getDate(), query.getTime(), query.isGMT(), query.getDistributions()))) {
return null;
}
Vector<String> list = new Vector<String>();
BufferedReader reader = new DotTerminatedMessageReader(_reader_);
String line;
try {
while ((line = reader.readLine()) != null) {
list.addElement(line);
}
} finally {
reader.close();
}
int size = list.size();
if (size < 1) {
return new String[0];
}
String[] result = new String[size];
list.copyInto(result);
return result;
}","public String[] listNewNews(NewGroupsOrNewsQuery query) throws IOException {
if (!NNTPReply.isPositiveCompletion(newnews(query.getNewsgroups(), query.getDate(), query.getTime(), query.isGMT(), query.getDistributions()))) {
return null;
}
Vector<String> vector<string>Var1 = vector<string>Literal2;
BufferedReader bufferedreaderVar3 = bufferedreaderLiteral4;
String stringVar5;
try {
while ((stringVar5 = bufferedreaderVar3.readLine()) != null) {
vector<string>Var1.addElement(stringVar5);
}
} finally {
bufferedreaderVar3.close();
}
int intVar6 = intLiteral7;
if (intVar6 < 1) {
return new String[0];
}
String[] stringArrayVar8 = stringArrayLiteral9;
vector<string>Var1.copyInto(stringArrayVar8);
return stringArrayVar8;
}"
15632,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,net,1691,"return null;
","@Override
public int[] answerSubnegotiation(int[] suboptionData, int suboptionLength) {
if ((suboptionData != null) && (suboptionLength > 1) && (termType != null)) {
if ((suboptionData[0] == TERMINAL_TYPE) && (suboptionData[1] == TERMINAL_TYPE_SEND)) {
int[] response = new int[termType.length() + 2];
response[0] = TERMINAL_TYPE;
response[1] = TERMINAL_TYPE_IS;
for (int ii = 0; ii < termType.length(); ii++) {
response[ii + 2] = termType.charAt(ii);
}
return response;
}
}
return null;
}","@Override
public int[] answerSubnegotiation(int[] suboptionData, int suboptionLength) {
if ((suboptionData != null) && (suboptionLength > 1) && (termType != null)) {
if ((suboptionData[0] == TERMINAL_TYPE) && (suboptionData[1] == TERMINAL_TYPE_SEND)) {
int[] intArrayVar1 = intArrayLiteral2;
intArrayVar1[0] = TERMINAL_TYPE;
intArrayVar1[1] = TERMINAL_TYPE_IS;
for (int intVar5 = intLiteral6; intVar3 < intLiteral1; intVar3++) {
intArrayVar1[intVar3 + 2] = termType.charAt(intVar3);
}
return intArrayVar1;
}
}
return null;
}"
15636,I18N,DM_DEFAULT_ENCODING,FP,net,1695,"System.arraycopy(_fileName.getBytes(), 0, data, 2, fileLength);
","@Override
public final DatagramPacket newDatagram() {
int fileLength, modeLength;
byte[] data;
fileLength = _fileName.length();
modeLength = _modeBytes[_mode].length;
data = new byte[fileLength + modeLength + 4];
data[0] = 0;
data[1] = (byte) _type;
System.arraycopy(_fileName.getBytes(), 0, data, 2, fileLength);
data[fileLength + 2] = 0;
System.arraycopy(_modeBytes[_mode], 0, data, fileLength + 3, modeLength);
return new DatagramPacket(data, data.length, _address, _port);
}","@Override
public final DatagramPacket newDatagram() {
int intVar1, intVar2;
byte[] byteArrayVar3;
intVar1 = _fileName.length();
intVar2 = _modeBytes[_mode].length;
byteArrayVar3 = new byte[intVar1 + intVar2 + 4];
byteArrayVar3[0] = 0;
byteArrayVar3[1] = (byte) _type;
System.arraycopy(_fileName.getBytes(), 0, byteArrayVar3, 2, intVar1);
byteArrayVar3[intVar1 + 2] = 0;
System.arraycopy(_modeBytes[_mode], 0, byteArrayVar3, intVar1 + 3, intVar2);
return new DatagramPacket(byteArrayVar3, byteArrayVar3.length, _address, _port);
}"
15880,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,net,1939,"return null;
","public String[] getEnabledCipherSuites() {
if (_socket_ instanceof SSLSocket) {
return ((SSLSocket) _socket_).getEnabledCipherSuites();
}
return null;
}","public String[] getEnabledCipherSuites() {
if (_socket_ instanceof SSLSocket) {
return ((SSLSocket) _socket_).getEnabledCipherSuites();
}
return null;
}"
15888,CORRECTNESS,IP_PARAMETER_IS_DEAD_BUT_OVERWRITTEN,FP,net,1947,"file = unixFTPEntryParser.parseFTPEntry(entry);
","private boolean parseUnixList(FTPFile file, String entry) {
file = unixFTPEntryParser.parseFTPEntry(entry);
if (file == null) {
return false;
}
return true;
}","private boolean parseUnixList(FTPFile file, String entry) {
file = unixFTPEntryParser.parseFTPEntry(entry);
if (file == null) {
return false;
}
return true;
}"
15906,BAD_PRACTICE,THROWS_METHOD_THROWS_RUNTIMEEXCEPTION,FP,net,1965,"if (messages == null) {
return null;
}
HashMap<String,ThreadContainer> idTable = new HashMap<String,ThreadContainer>();
for (Threadable t : messages) {
if (!t.isDummy()) {
buildContainer(t, idTable);
}
}
if (idTable.isEmpty()) {
return null;
}
ThreadContainer root = findRootSet(idTable);
idTable.clear();
idTable = null;
pruneEmptyContainers(root);
root.reverseChildren();
gatherSubjects(root);
if (root.next != null) {
throw new RuntimeException(""root node has a next:"" + root);
}
for (ThreadContainer r = root.child; r != null; r = r.next) {
if (r.threadable == null) {
r.threadable = r.child.threadable.makeDummy();
}
}
Threadable result = (root.child == null ? null : root.child.threadable);
root.flush();
return result;
","public Threadable thread(Iterable<? extends Threadable> messages) {
if (messages == null) {
return null;
}
HashMap<String, ThreadContainer> idTable = new HashMap<String, ThreadContainer>();
for (Threadable t : messages) {
if (!t.isDummy()) {
buildContainer(t, idTable);
}
}
if (idTable.isEmpty()) {
return null;
}
ThreadContainer root = findRootSet(idTable);
idTable.clear();
idTable = null;
pruneEmptyContainers(root);
root.reverseChildren();
gatherSubjects(root);
if (root.next != null) {
throw new RuntimeException(""root node has a next:"" + root);
}
for (ThreadContainer r = root.child; r != null; r = r.next) {
if (r.threadable == null) {
r.threadable = r.child.threadable.makeDummy();
}
}
Threadable result = (root.child == null ? null : root.child.threadable);
root.flush();
return result;
}","public Threadable thread(Iterable<? extends Threadable> messages) {
if (messages == null) {
return null;
}
HashMap<String, ThreadContainer> hashmap<string,threadcontainer>Var1 = hashmap<string,threadcontainer>Literal2;
for (Threadable threadableVar3 : messages) {
if (!threadableVar3.isDummy()) {
buildContainer(threadableVar3, hashmap<string,threadcontainer>Var1);
}
}
if (hashmap<string,threadcontainer>Var1.isEmpty()) {
return null;
}
ThreadContainer threadcontainerVar4 = threadcontainerLiteral5;
hashmap<string,threadcontainer>Var1.clear();
hashmap<string,threadcontainer>Var1 = null;
pruneEmptyContainers(threadcontainerVar4);
threadcontainerVar4.reverseChildren();
gatherSubjects(threadcontainerVar4);
if (threadcontainerVar4.next != null) {
throw new RuntimeException(""root node has a next:"" + threadcontainerVar4);
}
for (ThreadContainer threadcontainerVar10 = threadcontainerLiteral11; threadcontainerVar6 != intLiteral1; threadcontainerVar6 = threadcontainerVar6.next) {
if (threadcontainerVar6.threadable == null) {
threadcontainerVar6.threadable = threadcontainerVar6.child.threadable.makeDummy();
}
}
Threadable threadableVar8 = threadableLiteral9;
threadcontainerVar4.flush();
return threadableVar8;
}"
15909,MALICIOUS_CODE,MC_OVERRIDABLE_METHOD_CALL_IN_CONSTRUCTOR,FP,net,1968,"computeDetails();
","public TimeInfo(NtpV3Packet message, long returnTime, List<String> comments, boolean doComputeDetails) {
if (message == null) {
throw new IllegalArgumentException(""message cannot be null"");
}
this._returnTime = returnTime;
this._message = message;
this._comments = comments;
if (doComputeDetails) {
computeDetails();
}
}","public TimeInfo(NtpV3Packet message, long returnTime, List<String> comments, boolean doComputeDetails) {
if (message == null) {
throw new IllegalArgumentException(""message cannot be null"");
}
this._returnTime = returnTime;
this._message = message;
this._comments = comments;
if (doComputeDetails) {
computeDetails();
}
}"
15910,DODGY_CODE,DLS_DEAD_LOCAL_STORE,FP,net,1969,"num = size = 0;
","private static POP3MessageInfo __parseStatus(String line) {
int num, size;
StringTokenizer tokenizer;
tokenizer = new StringTokenizer(line);
if (!tokenizer.hasMoreElements()) {
return null;
}
num = size = 0;
try {
num = Integer.parseInt(tokenizer.nextToken());
if (!tokenizer.hasMoreElements()) {
return null;
}
size = Integer.parseInt(tokenizer.nextToken());
} catch (NumberFormatException e) {
return null;
}
return new POP3MessageInfo(num, size);
}","private static POP3MessageInfo __parseStatus(String line) {
int intVar1, intVar2;
StringTokenizer stringtokenizerVar3;
stringtokenizerVar3 = new StringTokenizer(line);
if (!stringtokenizerVar3.hasMoreElements()) {
return null;
}
intVar1 = intVar2 = 0;
try {
intVar1 = Integer.parseInt(stringtokenizerVar3.nextToken());
if (!stringtokenizerVar3.hasMoreElements()) {
return null;
}
intVar2 = Integer.parseInt(stringtokenizerVar3.nextToken());
} catch (NumberFormatException e) {
return null;
}
return new POP3MessageInfo(intVar1, intVar2);
}"
15911,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,net,1970,"return null;
","public POP3MessageInfo[] listMessages() throws IOException {
if (getState() != TRANSACTION_STATE) {
return null;
}
if (sendCommand(POP3Command.LIST) != POP3Reply.OK) {
return null;
}
getAdditionalReply();
POP3MessageInfo[] messages = new POP3MessageInfo[_replyLines.size() - 2];
ListIterator<String> en = _replyLines.listIterator(1);
for (int line = 0; line < messages.length; line++) {
messages[line] = __parseStatus(en.next());
}
return messages;
}","public POP3MessageInfo[] listMessages() throws IOException {
if (getState() != TRANSACTION_STATE) {
return null;
}
if (sendCommand(POP3Command.LIST) != POP3Reply.OK) {
return null;
}
getAdditionalReply();
POP3MessageInfo[] pop3messageinfoArrayVar1 = pop3messageinfoArrayLiteral2;
ListIterator<String> listiterator<string>Var3 = listiterator<string>Literal4;
for (int intVar7 = intLiteral8; intVar5 < intLiteral1; intVar5++) {
pop3messageinfoArrayVar1[intVar5] = __parseStatus(listiterator<string>Var3.next());
}
return pop3messageinfoArrayVar1;
}"
15922,Multithreaded correctness,NO_NOTIFY_NOT_NOTIFYALL,FP,net,1981,"__queue.notify();
","@Override
public void run() {
int ch;
try {
_outerLoop: while (!__isClosed) {
try {
if ((ch = __read(true)) < 0) {
break;
}
} catch (InterruptedIOException e) {
synchronized (__queue) {
__ioException = e;
__queue.notifyAll();
try {
__queue.wait(100);
} catch (InterruptedException interrupted) {
if (__isClosed) {
break _outerLoop;
}
}
continue;
}
} catch (RuntimeException re) {
super.close();
break _outerLoop;
}
boolean notify = false;
try {
notify = __processChar(ch);
} catch (InterruptedException e) {
if (__isClosed) {
break _outerLoop;
}
}
if (notify) {
__client.notifyInputListener();
}
}
} catch (IOException ioe) {
synchronized (__queue) {
__ioException = ioe;
}
__client.notifyInputListener();
}
synchronized (__queue) {
__isClosed = true;
__hasReachedEOF = true;
__queue.notify();
}
__threaded = false;
}","@Override
public void run() {
int intVar1;
try {
_outerLoop: while (!__isClosed) {
try {
if ((intVar1 = __read(true)) < 0) {
break;
}
} catch (InterruptedIOException e) {
synchronized (__queue) {
__ioException = e;
__queue.notifyAll();
try {
__queue.wait(100);
} catch (InterruptedException interrupted) {
if (__isClosed) {
break _outerLoop;
}
}
continue;
}
} catch (RuntimeException re) {
super.close();
break _outerLoop;
}
boolean booleanVar2 = booleanLiteral3;
try {
booleanVar2 = __processChar(intVar1);
} catch (InterruptedException e) {
if (__isClosed) {
break _outerLoop;
}
}
if (booleanVar2) {
__client.notifyInputListener();
}
}
} catch (IOException ioe) {
synchronized (__queue) {
__ioException = ioe;
}
__client.notifyInputListener();
}
synchronized (__queue) {
__isClosed = true;
__hasReachedEOF = true;
__queue.notify();
}
__threaded = false;
}"
15923,Multithreaded correctness,NO_NOTIFY_NOT_NOTIFYALL,FP,net,1982,"__queue.notify();
","@Override
public int read() throws IOException {
synchronized (__queue) {
while (true) {
if (__ioException != null) {
IOException e;
e = __ioException;
__ioException = null;
throw e;
}
if (__bytesAvailable == 0) {
if (__hasReachedEOF) {
return EOF;
}
if (__threaded) {
__queue.notify();
try {
__readIsWaiting = true;
__queue.wait();
__readIsWaiting = false;
} catch (InterruptedException e) {
throw new InterruptedIOException(""Fatal thread interruption during read."");
}
} else {
__readIsWaiting = true;
int ch;
boolean mayBlock = true;
do {
try {
if ((ch = __read(mayBlock)) < 0) {
if (ch != WOULD_BLOCK) {
return (ch);
}
}
} catch (InterruptedIOException e) {
synchronized (__queue) {
__ioException = e;
__queue.notifyAll();
try {
__queue.wait(100);
} catch (InterruptedException interrupted) {
}
}
return EOF;
}
try {
if (ch != WOULD_BLOCK) {
__processChar(ch);
}
} catch (InterruptedException e) {
if (__isClosed) {
return EOF;
}
}
mayBlock = false;
} while (super.available() > 0 && __bytesAvailable < __queue.length - 1);
__readIsWaiting = false;
}
continue;
} else {
int ch;
ch = __queue[__queueHead];
if (++__queueHead >= __queue.length) {
__queueHead = 0;
}
--__bytesAvailable;
if (__bytesAvailable == 0 && __threaded) {
__queue.notify();
}
return ch;
}
}
}
}","@Override
public int read() throws IOException {
synchronized (__queue) {
while (true) {
if (__ioException != null) {
IOException ioexceptionVar1;
ioexceptionVar1 = __ioException;
__ioException = null;
throw ioexceptionVar1;
}
if (__bytesAvailable == 0) {
if (__hasReachedEOF) {
return EOF;
}
if (__threaded) {
__queue.notify();
try {
__readIsWaiting = true;
__queue.wait();
__readIsWaiting = false;
} catch (InterruptedException e) {
throw new InterruptedIOException(""Fatal thread interruption during read."");
}
} else {
__readIsWaiting = true;
int intVar2;
boolean booleanVar3 = booleanLiteral4;
do {
try {
if ((intVar2 = __read(booleanVar3)) < 0) {
if (intVar2 != WOULD_BLOCK) {
return (intVar2);
}
}
} catch (InterruptedIOException e) {
synchronized (__queue) {
__ioException = ioexceptionVar1;
__queue.notifyAll();
try {
__queue.wait(100);
} catch (InterruptedException interrupted) {
}
}
return EOF;
}
try {
if (intVar2 != WOULD_BLOCK) {
__processChar(intVar2);
}
} catch (InterruptedException e) {
if (__isClosed) {
return EOF;
}
}
booleanVar3 = false;
} while (super.available() > 0 && __bytesAvailable < __queue.length - 1);
__readIsWaiting = false;
}
continue;
} else {
int intVar2;
intVar2 = __queue[__queueHead];
if (++__queueHead >= __queue.length) {
__queueHead = 0;
}
--__bytesAvailable;
if (__bytesAvailable == 0 && __threaded) {
__queue.notify();
}
return intVar2;
}
}
}
}"
15965,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,net,2024,"return null;
","public String[] getEnabledProtocols() {
if (_socket_ instanceof SSLSocket) {
return ((SSLSocket) _socket_).getEnabledProtocols();
}
return null;
}","public String[] getEnabledProtocols() {
if (_socket_ instanceof SSLSocket) {
return ((SSLSocket) _socket_).getEnabledProtocols();
}
return null;
}"
15966,DODGY_CODE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,FP,net,2025,"(SSLSocket) ssf.createSocket(_socket_, ip, port, false);
","protected void sslNegotiation() throws IOException {
plainSocket = _socket_;
initSslContext();
SSLSocketFactory ssf = context.getSocketFactory();
String ip = _socket_.getInetAddress().getHostAddress();
int port = _socket_.getPort();
SSLSocket socket = (SSLSocket) ssf.createSocket(_socket_, ip, port, false);
socket.setEnableSessionCreation(isCreation);
socket.setUseClientMode(isClientMode);
if (!isClientMode) {
socket.setNeedClientAuth(isNeedClientAuth);
socket.setWantClientAuth(isWantClientAuth);
}
if (protocols != null) {
socket.setEnabledProtocols(protocols);
}
if (suites != null) {
socket.setEnabledCipherSuites(suites);
}
socket.startHandshake();
_socket_ = socket;
_controlInput_ = new BufferedReader(new InputStreamReader(socket.getInputStream(), getControlEncoding()));
_controlOutput_ = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream(), getControlEncoding()));
}","protected void sslNegotiation() throws IOException {
plainSocket = _socket_;
initSslContext();
SSLSocketFactory sslsocketfactoryVar1 = sslsocketfactoryLiteral2;
String stringVar3 = stringLiteral4;
int intVar5 = intLiteral6;
SSLSocket sslsocketVar7 = sslsocketLiteral8;
sslsocketVar7.setEnableSessionCreation(isCreation);
sslsocketVar7.setUseClientMode(isClientMode);
if (!isClientMode) {
sslsocketVar7.setNeedClientAuth(isNeedClientAuth);
sslsocketVar7.setWantClientAuth(isWantClientAuth);
}
if (protocols != null) {
sslsocketVar7.setEnabledProtocols(protocols);
}
if (suites != null) {
sslsocketVar7.setEnabledCipherSuites(suites);
}
sslsocketVar7.startHandshake();
_socket_ = sslsocketVar7;
_controlInput_ = new BufferedReader(new InputStreamReader(sslsocketVar7.getInputStream(), getControlEncoding()));
_controlOutput_ = new BufferedWriter(new OutputStreamWriter(sslsocketVar7.getOutputStream(), getControlEncoding()));
}"
15967,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,net,2026,"return null;
","public String[] getEnabledCipherSuites() {
if (_socket_ instanceof SSLSocket) {
return ((SSLSocket) _socket_).getEnabledCipherSuites();
}
return null;
}","public String[] getEnabledCipherSuites() {
if (_socket_ instanceof SSLSocket) {
return ((SSLSocket) _socket_).getEnabledCipherSuites();
}
return null;
}"
15984,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,net,2043,"return null;
","public NewsgroupInfo[] listNewsgroups() throws IOException {
if (!NNTPReply.isPositiveCompletion(list())) {
return null;
}
return __readNewsgroupListing();
}","public NewsgroupInfo[] listNewsgroups() throws IOException {
if (!NNTPReply.isPositiveCompletion(list())) {
return null;
}
return __readNewsgroupListing();
}"
15985,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,net,2044,"return null;
","public NewsgroupInfo[] listNewNewsgroups(NewGroupsOrNewsQuery query) throws IOException {
if (!NNTPReply.isPositiveCompletion(newgroups(query.getDate(), query.getTime(), query.isGMT(), query.getDistributions()))) {
return null;
}
return __readNewsgroupListing();
}","public NewsgroupInfo[] listNewNewsgroups(NewGroupsOrNewsQuery query) throws IOException {
if (!NNTPReply.isPositiveCompletion(newgroups(query.getDate(), query.getTime(), query.isGMT(), query.getDistributions()))) {
return null;
}
return __readNewsgroupListing();
}"
16010,DODGY_CODE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,FP,net,2069,"(SSLSocket) ssf.createSocket(_socket_, ip, port, true);
","private void performSSLNegotiation() throws IOException {
initSSLContext();
SSLSocketFactory ssf = context.getSocketFactory();
String ip = getRemoteAddress().getHostAddress();
int port = getRemotePort();
SSLSocket socket = (SSLSocket) ssf.createSocket(_socket_, ip, port, true);
socket.setEnableSessionCreation(true);
socket.setUseClientMode(true);
if (protocols != null) {
socket.setEnabledProtocols(protocols);
}
if (suites != null) {
socket.setEnabledCipherSuites(suites);
}
socket.startHandshake();
_socket_ = socket;
_input_ = socket.getInputStream();
_output_ = socket.getOutputStream();
_reader = new CRLFLineReader(new InputStreamReader(_input_, encoding));
_writer = new BufferedWriter(new OutputStreamWriter(_output_, encoding));
}","private void performSSLNegotiation() throws IOException {
initSSLContext();
SSLSocketFactory sslsocketfactoryVar1 = sslsocketfactoryLiteral2;
String stringVar3 = stringLiteral4;
int intVar5 = intLiteral6;
SSLSocket sslsocketVar7 = sslsocketLiteral8;
sslsocketVar7.setEnableSessionCreation(true);
sslsocketVar7.setUseClientMode(true);
if (protocols != null) {
sslsocketVar7.setEnabledProtocols(protocols);
}
if (suites != null) {
sslsocketVar7.setEnabledCipherSuites(suites);
}
sslsocketVar7.startHandshake();
_socket_ = sslsocketVar7;
_input_ = sslsocketVar7.getInputStream();
_output_ = sslsocketVar7.getOutputStream();
_reader = new CRLFLineReader(new InputStreamReader(_input_, encoding));
_writer = new BufferedWriter(new OutputStreamWriter(_output_, encoding));
}"
16018,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,net,2077,"return null;
","@Override
public int[] answerSubnegotiation(int[] suboptionData, int suboptionLength) {
return null;
}","@Override
public int[] answerSubnegotiation(int[] suboptionData, int suboptionLength) {
return null;
}"
16048,DODGY_CODE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,FP,net,2107,"return null;
","public String[] getServerAliases(String keyType, Principal[] issuers) {
return null;
}","public String[] getServerAliases(String keyType, Principal[] issuers) {
return null;
}"
16050,DODGY_CODE,DLS_DEAD_LOCAL_STORE,TP,net,2109,"dataLength = lastBlock = hostPort = bytesRead = totalThisPacket = 0;
","public void sendFile(String filename, int mode, InputStream input, InetAddress host, int port) throws IOException {
int bytesRead, timeouts, lastBlock, block, hostPort, dataLength, offset, totalThisPacket;
TFTPPacket sent, received = null;
TFTPErrorPacket error;
TFTPDataPacket data = new TFTPDataPacket(host, port, 0, _sendBuffer, 4, 0);
TFTPAckPacket ack;
boolean justStarted = true;
beginBufferedOps();
dataLength = lastBlock = hostPort = bytesRead = totalThisPacket = 0;
block = 0;
boolean lastAckWait = false;
if (mode == TFTP.ASCII_MODE) {
input = new ToNetASCIIInputStream(input);
}
sent = new TFTPWriteRequestPacket(host, port, filename, mode);
_sendPacket: do {
// first time: block is 0, lastBlock is 0, send a request packet.
// subsequent: block is integer starting at 1, send data packet.
bufferedSend(sent);
_receivePacket: while (true) {
timeouts = 0;
do {
try {
received = bufferedReceive();
break;
} catch (SocketException e) {
if (++timeouts >= __maxTimeouts) {
endBufferedOps();
throw new IOException(""Connection timed out."");
}
continue _sendPacket;
} catch (InterruptedIOException e) {
if (++timeouts >= __maxTimeouts) {
endBufferedOps();
throw new IOException(""Connection timed out."");
}
continue _sendPacket;
} catch (TFTPPacketException e) {
endBufferedOps();
throw new IOException(""Bad packet: "" + e.getMessage());
}
} while (timeouts < __maxTimeouts);
if (justStarted) {
justStarted = false;
hostPort = received.getPort();
data.setPort(hostPort);
if (!host.equals(received.getAddress())) {
host = received.getAddress();
data.setAddress(host);
sent.setAddress(host);
}
}
if (host.equals(received.getAddress()) && received.getPort() == hostPort) {
switch(received.getType()) {
case TFTPPacket.ERROR:
error = (TFTPErrorPacket) received;
endBufferedOps();
throw new IOException(""Error code "" + error.getError() + "" received: "" + error.getMessage());
case TFTPPacket.ACKNOWLEDGEMENT:
ack = (TFTPAckPacket) received;
lastBlock = ack.getBlockNumber();
if (lastBlock == block) {
++block;
if (block > 65535) {
block = 0;
}
if (lastAckWait) {
break _sendPacket;
} else {
break _receivePacket;
}
} else {
discardPackets();
continue _receivePacket;
}
default:
endBufferedOps();
throw new IOException(""Received unexpected packet type."");
}
} else {
error = new TFTPErrorPacket(received.getAddress(), received.getPort(), TFTPErrorPacket.UNKNOWN_TID, ""Unexpected host or port."");
bufferedSend(error);
continue _sendPacket;
}
}
dataLength = TFTPPacket.SEGMENT_SIZE;
offset = 4;
totalThisPacket = 0;
while (dataLength > 0 && (bytesRead = input.read(_sendBuffer, offset, dataLength)) > 0) {
offset += bytesRead;
dataLength -= bytesRead;
totalThisPacket += bytesRead;
}
if (totalThisPacket < TFTPPacket.SEGMENT_SIZE) {
lastAckWait = true;
}
data.setBlockNumber(block);
data.setData(_sendBuffer, 4, totalThisPacket);
sent = data;
} while (totalThisPacket > 0 || lastAckWait);
// Note: this was looping while dataLength == 0 || lastAckWait,
endBufferedOps();
}","public void sendFile(String filename, int mode, InputStream input, InetAddress host, int port) throws IOException {
int intVar1, intVar2, intVar3, intVar4, intVar5, intVar6, intVar7, intVar8;
TFTPPacket tftppacketVar9, tftppacketVar10 = tftppacketLiteral11;
TFTPErrorPacket tftperrorpacketVar12;
TFTPDataPacket tftpdatapacketVar13 = tftpdatapacketLiteral14;
TFTPAckPacket tftpackpacketVar15;
boolean booleanVar16 = booleanLiteral17;
beginBufferedOps();
intVar6 = intVar3 = intVar5 = intVar1 = intVar8 = 0;
intVar4 = 0;
boolean booleanVar18 = booleanLiteral19;
if (mode == TFTP.ASCII_MODE) {
input = new ToNetASCIIInputStream(input);
}
tftppacketVar9 = new TFTPWriteRequestPacket(host, port, filename, mode);
_sendPacket: do {
// first time: block is 0, lastBlock is 0, send a request packet.
// subsequent: block is integer starting at 1, send data packet.
bufferedSend(tftppacketVar9);
_receivePacket: while (true) {
intVar2 = 0;
do {
try {
tftppacketVar10 = bufferedReceive();
break;
} catch (SocketException e) {
if (++intVar2 >= __maxTimeouts) {
endBufferedOps();
throw new IOException(""Connection timed out."");
}
continue _sendPacket;
} catch (InterruptedIOException e) {
if (++intVar2 >= __maxTimeouts) {
endBufferedOps();
throw new IOException(""Connection timed out."");
}
continue _sendPacket;
} catch (TFTPPacketException e) {
endBufferedOps();
throw new IOException(""Bad packet: "" + e.getMessage());
}
} while (intVar2 < __maxTimeouts);
if (booleanVar16) {
booleanVar16 = false;
intVar5 = tftppacketVar10.getPort();
tftpdatapacketVar13.setPort(intVar5);
if (!host.equals(tftppacketVar10.getAddress())) {
host = tftppacketVar10.getAddress();
tftpdatapacketVar13.setAddress(host);
tftppacketVar9.setAddress(host);
}
}
if (host.equals(tftppacketVar10.getAddress()) && tftppacketVar10.getPort() == intVar5) {
switch(tftppacketVar10.getType()) {
case TFTPPacket.ERROR:
tftperrorpacketVar12 = (TFTPErrorPacket) tftppacketVar10;
endBufferedOps();
throw new IOException(""Error code "" + tftperrorpacketVar12.getError() + "" received: "" + tftperrorpacketVar12.getMessage());
case TFTPPacket.ACKNOWLEDGEMENT:
tftpackpacketVar15 = (TFTPAckPacket) tftppacketVar10;
intVar3 = tftpackpacketVar15.getBlockNumber();
if (intVar3 == intVar4) {
++intVar4;
if (intVar4 > 65535) {
intVar4 = 0;
}
if (booleanVar18) {
break _sendPacket;
} else {
break _receivePacket;
}
} else {
discardPackets();
continue _receivePacket;
}
default:
endBufferedOps();
throw new IOException(""Received unexpected packet type."");
}
} else {
tftperrorpacketVar12 = new TFTPErrorPacket(tftppacketVar10.getAddress(), tftppacketVar10.getPort(), TFTPErrorPacket.UNKNOWN_TID, ""Unexpected host or port."");
bufferedSend(tftperrorpacketVar12);
continue _sendPacket;
}
}
intVar6 = TFTPPacket.SEGMENT_SIZE;
intVar7 = 4;
intVar8 = 0;
while (intVar6 > 0 && (intVar1 = input.read(_sendBuffer, intVar7, intVar6)) > 0) {
intVar7 += intVar1;
intVar6 -= intVar1;
intVar8 += intVar1;
}
if (intVar8 < TFTPPacket.SEGMENT_SIZE) {
booleanVar18 = true;
}
tftpdatapacketVar13.setBlockNumber(intVar4);
tftpdatapacketVar13.setData(_sendBuffer, 4, intVar8);
tftppacketVar9 = tftpdatapacketVar13;
} while (intVar8 > 0 || booleanVar18);
// Note: this was looping while dataLength == 0 || lastAckWait,
endBufferedOps();
}"
16074,MALICIOUS_CODE,MS_SHOULD_BE_FINAL,TP,net,2133,"@Deprecated
public static String PROVIDER;","@Deprecated
public static String PROVIDER;","@Deprecated
public static String stringVar1;"
16077,I18N,DM_DEFAULT_ENCODING,FP,net,2136,"BufferedReader reader = new BufferedReader(
","private void tunnelHandshake(String host, int port, InputStream input, OutputStream output) throws IOException, UnsupportedEncodingException {
final String connectString = ""CONNECT "" + host + "":"" + port + "" HTTP/1.1"";
_output_.write(connectString.getBytes(getControlEncoding()));
_output_.write(CRLF);
if (proxyUsername != null && proxyPassword != null) {
final String header = ""Proxy-Authorization: Basic "" + base64.encode(proxyUsername + "":"" + proxyPassword) + ""\r\n"";
_output_.write(header.getBytes(""UTF-8""));
_output_.write(CRLF);
List<String> response = new ArrayList<String>();
BufferedReader reader = new BufferedReader(new InputStreamReader(_input_));
for (String line = reader.readLine(); line != null && line.length() > 0; line = reader.readLine()) {
response.add(line);
}
int size = response.size();
if (size == 0) {
throw new IOException(""No response from proxy"");
}
String code = null;
String resp = response.get(0);
if (resp.startsWith(""HTTP/"") && resp.length() >= 12) {
code = resp.substring(9, 12);
} else {
throw new IOException(""Invalid response from proxy: "" + resp);
}
if (!""200"".equals(code)) {
StringBuilder msg = new StringBuilder();
msg.append(""HTTPTunnelConnector: connection failed\r\n"");
msg.append(""Response received from the proxy:\r\n"");
for (String line : response) {
msg.append(line);
msg.append(""\r\n"");
}
throw new IOException(msg.toString());
}
}
}","private void tunnelHandshake(String host, int port, InputStream input, OutputStream output) throws IOException, UnsupportedEncodingException {
final String stringVar1 = stringLiteral2;
_output_.write(stringVar1.getBytes(getControlEncoding()));
_output_.write(CRLF);
if (proxyUsername != null && proxyPassword != null) {
final String stringVar3 = stringLiteral4;
_output_.write(stringVar3.getBytes(""UTF-8""));
_output_.write(CRLF);
List<String> list<string>Var5 = list<string>Literal6;
BufferedReader bufferedreaderVar7 = bufferedreaderLiteral8;
for (String stringVar19 = stringLiteral20; stringVar9 != null && intLiteral1; stringVar9 = bufferedreaderVar7.readLine()) {
list<string>Var5.add(stringVar9);
}
int intVar11 = intLiteral12;
if (intVar11 == 0) {
throw new IOException(""No response from proxy"");
}
String stringVar13 = stringLiteral14;
String stringVar15 = stringLiteral16;
if (stringVar15.startsWith(""HTTP/"") && stringVar15.length() >= 12) {
stringVar13 = stringVar15.substring(9, 12);
} else {
throw new IOException(""Invalid response from proxy: "" + stringVar15);
}
if (!""200"".equals(stringVar13)) {
StringBuilder stringbuilderVar17 = stringbuilderLiteral18;
stringbuilderVar17.append(""HTTPTunnelConnector: connection failed\r\n"");
stringbuilderVar17.append(""Response received from the proxy:\r\n"");
for (String stringVar9 : list<string>Var5) {
stringbuilderVar17.append(stringVar9);
stringbuilderVar17.append(""\r\n"");
}
throw new IOException(stringbuilderVar17.toString());
}
}
}"
16081,BAD_PRACTICE,IMSE_DONT_CATCH_IMSE,TP,net,2140,"catch (IllegalMonitorStateException e)
","final boolean _sendAYT(long timeout) throws IOException, IllegalArgumentException, InterruptedException {
boolean retValue = false;
synchronized (aytMonitor) {
synchronized (this) {
aytFlag = false;
_output_.write(_COMMAND_AYT);
_output_.flush();
}
try {
aytMonitor.wait(timeout);
if (aytFlag == false) {
retValue = false;
aytFlag = true;
} else {
retValue = true;
}
} catch (IllegalMonitorStateException e) {
System.err.println(""Exception processing AYT:"" + e.getMessage());
}
}
return (retValue);
}","final boolean _sendAYT(long timeout) throws IOException, IllegalArgumentException, InterruptedException {
boolean booleanVar1 = booleanLiteral2;
synchronized (aytMonitor) {
synchronized (this) {
aytFlag = false;
_output_.write(_COMMAND_AYT);
_output_.flush();
}
try {
aytMonitor.wait(timeout);
if (aytFlag == false) {
booleanVar1 = false;
aytFlag = true;
} else {
booleanVar1 = true;
}
} catch (IllegalMonitorStateException e) {
System.err.println(""Exception processing AYT:"" + e.getMessage());
}
}
return (booleanVar1);
}"
16100,BAD_PRACTICE,THROWS_METHOD_THROWS_CLAUSE_BASIC_EXCEPTION,TP,net,2159,"if (args.length==0) {
System.out.println(""Usage: java -jar commons-net-examples-m.n.jar <exampleClass> <exampleClass parameters>"");
}
CodeSource codeSource = Main.class.getProtectionDomain().getCodeSource();
Map<String, String> map = new HashMap<String, String>();
if ( codeSource != null) {
final String sourceFile = codeSource.getLocation().getFile();
if (sourceFile.endsWith("".jar"")) {
if (args.length==0) {
System.out.println(""\nClasses found in the jar:"");
}
JarFile jf = new JarFile(sourceFile);
Enumeration<JarEntry> e = jf.entries();
while (e.hasMoreElements()) {
JarEntry je = e.nextElement();
String name = je.getName();
if (!name.endsWith("".class"")
|| name.contains(""$"") 
|| name.equals(""examples/nntp/NNTPUtils.class"") 
|| name.equals(""examples/util/IOUtil.class"") 
|| name.equals(""examples/mail/IMAPUtils.class"") 
|| name.equals(""examples/Main.class"")) { 
continue;
}
name = name.replace("".class"", """");
int lastSep = name.lastIndexOf('/');
String alias = name.substring(lastSep+1);
if (args.length==0) {
System.out.printf(""%-25s %s%n"",alias,name);
}
map.put(alias, name);
}
jf.close();
}
}
if (args.length==0) {
return;
}
String shortName = args[0];
String fullName = map.get(shortName);
if (fullName == null) {
fullName = shortName;
}
fullName = fullName.replace('/', '.');
Class<?> clazz = Class.forName(fullName);
Method m = clazz.getDeclaredMethod(""main"", new Class[]{args.getClass()});
String[] args2 = new String[args.length-1];
System.arraycopy(args, 1, args2, 0, args2.length);
m.invoke(null, (Object)args2);
}
","public static void main(String[] args) throws Exception {
if (args.length == 0) {
System.out.println(""Usage: java -jar commons-net-examples-m.n.jar <exampleClass> <exampleClass parameters>"");
}
CodeSource codeSource = Main.class.getProtectionDomain().getCodeSource();
Map<String, String> map = new HashMap<String, String>();
if (codeSource != null) {
final String sourceFile = codeSource.getLocation().getFile();
if (sourceFile.endsWith("".jar"")) {
if (args.length == 0) {
System.out.println(""\nClasses found in the jar:"");
}
JarFile jf = new JarFile(sourceFile);
Enumeration<JarEntry> e = jf.entries();
while (e.hasMoreElements()) {
JarEntry je = e.nextElement();
String name = je.getName();
if (!name.endsWith("".class"") || name.contains(""$"") || name.equals(""examples/nntp/NNTPUtils.class"") || name.equals(""examples/util/IOUtil.class"") || name.equals(""examples/mail/IMAPUtils.class"") || name.equals(""examples/Main.class"")) {
continue;
}
name = name.replace("".class"", """");
int lastSep = name.lastIndexOf('/');
String alias = name.substring(lastSep + 1);
if (args.length == 0) {
System.out.printf(""%-25s %s%n"", alias, name);
}
map.put(alias, name);
}
jf.close();
}
}
if (args.length == 0) {
return;
}
String shortName = args[0];
String fullName = map.get(shortName);
if (fullName == null) {
fullName = shortName;
}
fullName = fullName.replace('/', '.');
Class<?> clazz = Class.forName(fullName);
Method m = clazz.getDeclaredMethod(""main"", new Class[] { args.getClass() });
String[] args2 = new String[args.length - 1];
System.arraycopy(args, 1, args2, 0, args2.length);
m.invoke(null, (Object) args2);
}","public static void main(String[] args) throws Exception {
if (args.length == 0) {
System.out.println(""Usage: java -jar commons-net-examples-m.n.jar <exampleClass> <exampleClass parameters>"");
}
CodeSource codesourceVar1 = codesourceLiteral2;
Map<String, String> map<string,string>Var3 = map<string,string>Literal4;
if (codesourceVar1 != null) {
final String stringVar5 = stringLiteral6;
if (stringVar5.endsWith("".jar"")) {
if (args.length == 0) {
System.out.println(""\nClasses found in the jar:"");
}
JarFile jarfileVar7 = jarfileLiteral8;
Enumeration<JarEntry> enumeration<jarentry>Var9 = enumeration<jarentry>Literal10;
while (enumeration<jarentry>Var9.hasMoreElements()) {
JarEntry jarentryVar11 = jarentryLiteral12;
String stringVar13 = stringLiteral14;
if (!stringVar13.endsWith("".class"") || stringVar13.contains(""$"") || stringVar13.equals(""examples/nntp/NNTPUtils.class"") || stringVar13.equals(""examples/util/IOUtil.class"") || stringVar13.equals(""examples/mail/IMAPUtils.class"") || stringVar13.equals(""examples/Main.class"")) {
continue;
}
stringVar13 = stringVar13.replace("".class"", """");
int intVar15 = intLiteral16;
String stringVar17 = stringLiteral18;
if (args.length == 0) {
System.out.printf(""%-25s %s%n"", stringVar17, stringVar13);
}
map<string,string>Var3.put(stringVar17, stringVar13);
}
jarfileVar7.close();
}
}
if (args.length == 0) {
return;
}
String stringVar19 = stringLiteral20;
String stringVar21 = stringLiteral22;
if (stringVar21 == null) {
stringVar21 = stringVar19;
}
stringVar21 = stringVar21.replace('/', '.');
Class<?> class<?>Var23 = class<?>Literal24;
Method methodVar25 = methodLiteral26;
String[] stringArrayVar27 = stringArrayLiteral28;
System.arraycopy(args, 1, stringArrayVar27, 0, stringArrayVar27.length);
methodVar25.invoke(null, (Object) stringArrayVar27);
}"
16123,DODGY_CODE,BC_UNCONFIRMED_CAST_OF_RETURN_VALUE,TP,net,2182,"(SSLSocket) ssf.createSocket(_socket_, host, port, false);
","protected void sslNegotiation() throws IOException {
plainSocket = _socket_;
initSslContext();
SSLSocketFactory ssf = context.getSocketFactory();
String host = (_hostname_ != null) ? _hostname_ : getRemoteAddress().getHostAddress();
int port = _socket_.getPort();
SSLSocket socket = (SSLSocket) ssf.createSocket(_socket_, host, port, false);
socket.setEnableSessionCreation(isCreation);
socket.setUseClientMode(isClientMode);
if (isClientMode) {
if (tlsEndpointChecking) {
SSLSocketUtils.enableEndpointNameVerification(socket);
}
} else {
socket.setNeedClientAuth(isNeedClientAuth);
socket.setWantClientAuth(isWantClientAuth);
}
if (protocols != null) {
socket.setEnabledProtocols(protocols);
}
if (suites != null) {
socket.setEnabledCipherSuites(suites);
}
socket.startHandshake();
_socket_ = socket;
_controlInput_ = new BufferedReader(new InputStreamReader(socket.getInputStream(), getControlEncoding()));
_controlOutput_ = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream(), getControlEncoding()));
if (isClientMode) {
if (hostnameVerifier != null && !hostnameVerifier.verify(host, socket.getSession())) {
throw new SSLHandshakeException(""Hostname doesn't match certificate"");
}
}
}","protected void sslNegotiation() throws IOException {
plainSocket = _socket_;
initSslContext();
SSLSocketFactory sslsocketfactoryVar1 = sslsocketfactoryLiteral2;
String stringVar3 = stringLiteral4;
int intVar5 = intLiteral6;
SSLSocket sslsocketVar7 = sslsocketLiteral8;
sslsocketVar7.setEnableSessionCreation(isCreation);
sslsocketVar7.setUseClientMode(isClientMode);
if (isClientMode) {
if (tlsEndpointChecking) {
SSLSocketUtils.enableEndpointNameVerification(sslsocketVar7);
}
} else {
sslsocketVar7.setNeedClientAuth(isNeedClientAuth);
sslsocketVar7.setWantClientAuth(isWantClientAuth);
}
if (protocols != null) {
sslsocketVar7.setEnabledProtocols(protocols);
}
if (suites != null) {
sslsocketVar7.setEnabledCipherSuites(suites);
}
sslsocketVar7.startHandshake();
_socket_ = sslsocketVar7;
_controlInput_ = new BufferedReader(new InputStreamReader(sslsocketVar7.getInputStream(), getControlEncoding()));
_controlOutput_ = new BufferedWriter(new OutputStreamWriter(sslsocketVar7.getOutputStream(), getControlEncoding()));
if (isClientMode) {
if (hostnameVerifier != null && !hostnameVerifier.verify(stringVar3, sslsocketVar7.getSession())) {
throw new SSLHandshakeException(""Hostname doesn't match certificate"");
}
}
}"
16128,DODGY_CODE,DLS_DEAD_LOCAL_STORE,TP,net,2187,"dataLength = lastBlock = hostPort = bytesRead = totalThisPacket = 0;
","public void sendFile(String filename, int mode, InputStream input, InetAddress host, int port) throws IOException {
int bytesRead, timeouts, lastBlock, block, hostPort, dataLength, offset, totalThisPacket;
TFTPPacket sent, received = null;
TFTPErrorPacket error;
TFTPDataPacket data = new TFTPDataPacket(host, port, 0, _sendBuffer, 4, 0);
TFTPAckPacket ack;
boolean justStarted = true;
beginBufferedOps();
dataLength = lastBlock = hostPort = bytesRead = totalThisPacket = 0;
totalBytesSent = 0L;
block = 0;
boolean lastAckWait = false;
if (mode == TFTP.ASCII_MODE) {
input = new ToNetASCIIInputStream(input);
}
sent = new TFTPWriteRequestPacket(host, port, filename, mode);
_sendPacket: do {
// first time: block is 0, lastBlock is 0, send a request packet.
// subsequent: block is integer starting at 1, send data packet.
bufferedSend(sent);
_receivePacket: while (true) {
timeouts = 0;
do {
try {
received = bufferedReceive();
break;
} catch (SocketException e) {
if (++timeouts >= __maxTimeouts) {
endBufferedOps();
throw new IOException(""Connection timed out."");
}
continue _sendPacket;
} catch (InterruptedIOException e) {
if (++timeouts >= __maxTimeouts) {
endBufferedOps();
throw new IOException(""Connection timed out."");
}
continue _sendPacket;
} catch (TFTPPacketException e) {
endBufferedOps();
throw new IOException(""Bad packet: "" + e.getMessage());
}
} while (timeouts < __maxTimeouts);
if (justStarted) {
justStarted = false;
hostPort = received.getPort();
data.setPort(hostPort);
if (!host.equals(received.getAddress())) {
host = received.getAddress();
data.setAddress(host);
sent.setAddress(host);
}
}
if (host.equals(received.getAddress()) && received.getPort() == hostPort) {
switch(received.getType()) {
case TFTPPacket.ERROR:
error = (TFTPErrorPacket) received;
endBufferedOps();
throw new IOException(""Error code "" + error.getError() + "" received: "" + error.getMessage());
case TFTPPacket.ACKNOWLEDGEMENT:
ack = (TFTPAckPacket) received;
lastBlock = ack.getBlockNumber();
if (lastBlock == block) {
++block;
if (block > 65535) {
block = 0;
}
if (lastAckWait) {
break _sendPacket;
} else {
break _receivePacket;
}
} else {
discardPackets();
continue _receivePacket;
}
default:
endBufferedOps();
throw new IOException(""Received unexpected packet type."");
}
} else {
error = new TFTPErrorPacket(received.getAddress(), received.getPort(), TFTPErrorPacket.UNKNOWN_TID, ""Unexpected host or port."");
bufferedSend(error);
continue _sendPacket;
}
}
dataLength = TFTPPacket.SEGMENT_SIZE;
offset = 4;
totalThisPacket = 0;
while (dataLength > 0 && (bytesRead = input.read(_sendBuffer, offset, dataLength)) > 0) {
offset += bytesRead;
dataLength -= bytesRead;
totalThisPacket += bytesRead;
}
if (totalThisPacket < TFTPPacket.SEGMENT_SIZE) {
lastAckWait = true;
}
data.setBlockNumber(block);
data.setData(_sendBuffer, 4, totalThisPacket);
sent = data;
totalBytesSent += totalThisPacket;
} while (totalThisPacket > 0 || lastAckWait);
// Note: this was looping while dataLength == 0 || lastAckWait,
endBufferedOps();
}","public void sendFile(String filename, int mode, InputStream input, InetAddress host, int port) throws IOException {
int intVar1, intVar2, intVar3, intVar4, intVar5, intVar6, intVar7, intVar8;
TFTPPacket tftppacketVar9, tftppacketVar10 = tftppacketLiteral11;
TFTPErrorPacket tftperrorpacketVar12;
TFTPDataPacket tftpdatapacketVar13 = tftpdatapacketLiteral14;
TFTPAckPacket tftpackpacketVar15;
boolean booleanVar16 = booleanLiteral17;
beginBufferedOps();
intVar6 = intVar3 = intVar5 = intVar1 = intVar8 = 0;
totalBytesSent = 0L;
intVar4 = 0;
boolean booleanVar18 = booleanLiteral19;
if (mode == TFTP.ASCII_MODE) {
input = new ToNetASCIIInputStream(input);
}
tftppacketVar9 = new TFTPWriteRequestPacket(host, port, filename, mode);
_sendPacket: do {
// first time: block is 0, lastBlock is 0, send a request packet.
// subsequent: block is integer starting at 1, send data packet.
bufferedSend(tftppacketVar9);
_receivePacket: while (true) {
intVar2 = 0;
do {
try {
tftppacketVar10 = bufferedReceive();
break;
} catch (SocketException e) {
if (++intVar2 >= __maxTimeouts) {
endBufferedOps();
throw new IOException(""Connection timed out."");
}
continue _sendPacket;
} catch (InterruptedIOException e) {
if (++intVar2 >= __maxTimeouts) {
endBufferedOps();
throw new IOException(""Connection timed out."");
}
continue _sendPacket;
} catch (TFTPPacketException e) {
endBufferedOps();
throw new IOException(""Bad packet: "" + e.getMessage());
}
} while (intVar2 < __maxTimeouts);
if (booleanVar16) {
booleanVar16 = false;
intVar5 = tftppacketVar10.getPort();
tftpdatapacketVar13.setPort(intVar5);
if (!host.equals(tftppacketVar10.getAddress())) {
host = tftppacketVar10.getAddress();
tftpdatapacketVar13.setAddress(host);
tftppacketVar9.setAddress(host);
}
}
if (host.equals(tftppacketVar10.getAddress()) && tftppacketVar10.getPort() == intVar5) {
switch(tftppacketVar10.getType()) {
case TFTPPacket.ERROR:
tftperrorpacketVar12 = (TFTPErrorPacket) tftppacketVar10;
endBufferedOps();
throw new IOException(""Error code "" + tftperrorpacketVar12.getError() + "" received: "" + tftperrorpacketVar12.getMessage());
case TFTPPacket.ACKNOWLEDGEMENT:
tftpackpacketVar15 = (TFTPAckPacket) tftppacketVar10;
intVar3 = tftpackpacketVar15.getBlockNumber();
if (intVar3 == intVar4) {
++intVar4;
if (intVar4 > 65535) {
intVar4 = 0;
}
if (booleanVar18) {
break _sendPacket;
} else {
break _receivePacket;
}
} else {
discardPackets();
continue _receivePacket;
}
default:
endBufferedOps();
throw new IOException(""Received unexpected packet type."");
}
} else {
tftperrorpacketVar12 = new TFTPErrorPacket(tftppacketVar10.getAddress(), tftppacketVar10.getPort(), TFTPErrorPacket.UNKNOWN_TID, ""Unexpected host or port."");
bufferedSend(tftperrorpacketVar12);
continue _sendPacket;
}
}
intVar6 = TFTPPacket.SEGMENT_SIZE;
intVar7 = 4;
intVar8 = 0;
while (intVar6 > 0 && (intVar1 = input.read(_sendBuffer, intVar7, intVar6)) > 0) {
intVar7 += intVar1;
intVar6 -= intVar1;
intVar8 += intVar1;
}
if (intVar8 < TFTPPacket.SEGMENT_SIZE) {
booleanVar18 = true;
}
tftpdatapacketVar13.setBlockNumber(intVar4);
tftpdatapacketVar13.setData(_sendBuffer, 4, intVar8);
tftppacketVar9 = tftpdatapacketVar13;
totalBytesSent += intVar8;
} while (intVar8 > 0 || booleanVar18);
// Note: this was looping while dataLength == 0 || lastAckWait,
endBufferedOps();
}"
16228,CORRECTNESS,RV_RETURN_VALUE_IGNORED,FP,pool,93,"writeLock.tryLock();
","@Override
public void returnObject(final K key, final V obj) {
WriteLock writeLock = readWriteLock.writeLock();
writeLock.tryLock();
try {
keyedPool.returnObject(key, obj);
} catch (Exception e) {
} finally {
writeLock.unlock();
}
}","@Override
public void returnObject(final K key, final V obj) {
WriteLock writelockVar1 = writelockLiteral2;
writelockVar1.tryLock();
try {
keyedPool.returnObject(key, obj);
} catch (Exception e) {
} finally {
writelockVar1.unlock();
}
}"
16243,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,108,"} catch (Exception e) {
","public void close() {
try {
keyedPool.close();
} catch (Exception e) {
}
}","public void close() {
try {
keyedPool.close();
} catch (Exception e) {
}
}"
16247,CORRECTNESS,RV_RETURN_VALUE_IGNORED,FP,pool,112,"writeLock.tryLock();
","@Override
public void addObject() throws Exception, IllegalStateException, UnsupportedOperationException {
WriteLock writeLock = readWriteLock.writeLock();
writeLock.tryLock();
try {
pool.addObject();
} finally {
writeLock.unlock();
}
}","@Override
public void addObject() throws Exception, IllegalStateException, UnsupportedOperationException {
WriteLock writelockVar1 = writelockLiteral2;
writelockVar1.tryLock();
try {
pool.addObject();
} finally {
writelockVar1.unlock();
}
}"
16261,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,126,"} catch(Exception e) {
","@Override
public synchronized void returnObject(T obj) throws Exception {
boolean success = !isClosed();
if (_factory != null) {
if (!_factory.validateObject(obj)) {
success = false;
} else {
try {
_factory.passivateObject(obj);
} catch (Exception e) {
success = false;
}
}
}
boolean shouldDestroy = !success;
_numActive--;
if (success) {
_pool.add(new SoftReference<T>(obj, refQueue));
}
notifyAll();
if (shouldDestroy && _factory != null) {
try {
_factory.destroyObject(obj);
} catch (Exception e) {
}
}
}","@Override
public synchronized void returnObject(T obj) throws Exception {
boolean booleanVar1 = booleanLiteral2;
if (_factory != null) {
if (!_factory.validateObject(obj)) {
booleanVar1 = false;
} else {
try {
_factory.passivateObject(obj);
} catch (Exception e) {
booleanVar1 = false;
}
}
}
boolean booleanVar3 = booleanLiteral4;
_numActive--;
if (booleanVar1) {
_pool.add(new SoftReference<T>(obj, refQueue));
}
notifyAll();
if (booleanVar3 && _factory != null) {
try {
_factory.destroyObject(obj);
} catch (Exception e) {
}
}
}"
16280,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,145,"} catch (Exception e) {
","public void invalidateObject(final K key, final V obj) {
synchronized (lock) {
try {
keyedPool.invalidateObject(key, obj);
} catch (Exception e) {
}
}
}","public void invalidateObject(final K key, final V obj) {
synchronized (lock) {
try {
keyedPool.invalidateObject(key, obj);
} catch (Exception e) {
}
}
}"
16289,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,154,"} catch (Exception e) {
","public void returnObject(final V obj) {
try {
keyedPool.returnObject(key, obj);
} catch (Exception e) {
}
}","public void returnObject(final V obj) {
try {
keyedPool.returnObject(key, obj);
} catch (Exception e) {
}
}"
16295,DODGY_CODE,UCF_USELESS_CONTROL_FLOW,FP,pool,160,"if (!underTest.endEvictionTest(idleObjects)) {
","public void evict() throws Exception {
assertOpen();
if (getNumIdle() == 0) {
return;
}
boolean testWhileIdle = getTestWhileIdle();
long idleEvictTime = Long.MAX_VALUE;
if (getMinEvictableIdleTimeMillis() > 0) {
idleEvictTime = getMinEvictableIdleTimeMillis();
}
PooledObject<T> underTest = null;
LinkedBlockingDeque<PooledObject<T>> idleObjects = null;
for (int i = 0, m = getNumTests(); i < m; i++) {
if (evictionIterator == null || !evictionIterator.hasNext()) {
if (evictionKeyIterator == null || !evictionKeyIterator.hasNext()) {
List<K> keyCopy = new ArrayList<K>();
keyCopy.addAll(poolKeyList);
evictionKeyIterator = keyCopy.iterator();
}
while (evictionKeyIterator.hasNext()) {
evictionKey = evictionKeyIterator.next();
ObjectDeque<T> objectDeque = poolMap.get(evictionKey);
if (objectDeque == null) {
continue;
}
idleObjects = objectDeque.getIdleObjects();
if (getLifo()) {
evictionIterator = idleObjects.descendingIterator();
} else {
evictionIterator = idleObjects.iterator();
}
if (evictionIterator.hasNext()) {
break;
}
evictionIterator = null;
}
}
if (evictionIterator == null) {
return;
}
try {
underTest = evictionIterator.next();
} catch (NoSuchElementException nsee) {
i--;
evictionIterator = null;
continue;
}
if (!underTest.startEvictionTest()) {
i--;
continue;
}
if (idleEvictTime < underTest.getIdleTimeMillis()) {
destroy(evictionKey, underTest, true);
destroyedByEvictorCount.incrementAndGet();
} else {
if (testWhileIdle) {
boolean active = false;
try {
factory.activateObject(evictionKey, underTest.getObject());
active = true;
} catch (Exception e) {
destroy(evictionKey, underTest, true);
destroyedByEvictorCount.incrementAndGet();
}
if (active) {
if (!factory.validateObject(evictionKey, underTest.getObject())) {
destroy(evictionKey, underTest, true);
destroyedByEvictorCount.incrementAndGet();
} else {
try {
factory.passivateObject(evictionKey, underTest.getObject());
} catch (Exception e) {
destroy(evictionKey, underTest, true);
destroyedByEvictorCount.incrementAndGet();
}
}
}
}
if (!underTest.endEvictionTest(idleObjects)) {
}
}
}
}","public void evict() throws Exception {
assertOpen();
if (getNumIdle() == 0) {
return;
}
boolean booleanVar1 = booleanLiteral2;
long longVar3 = longLiteral4;
if (getMinEvictableIdleTimeMillis() > 0) {
longVar3 = getMinEvictableIdleTimeMillis();
}
PooledObject<T> pooledobject<t>Var5 = pooledobject<t>Literal6;
LinkedBlockingDeque<PooledObject<T>> linkedblockingdeque<pooledobject<t>>Var7 = pooledobject<t>Literal6;
for (int intVar18 = intLiteral19, intVar20 = intLiteral21; intVar8 < intLiteral1; intVar8++) {
if (evictionIterator == null || !evictionIterator.hasNext()) {
if (evictionKeyIterator == null || !evictionKeyIterator.hasNext()) {
List<K> list<k>Var12 = list<k>Literal13;
list<k>Var12.addAll(poolKeyList);
evictionKeyIterator = list<k>Var12.iterator();
}
while (evictionKeyIterator.hasNext()) {
evictionKey = evictionKeyIterator.next();
ObjectDeque<T> objectdeque<t>Var14 = objectdeque<t>Literal15;
if (objectdeque<t>Var14 == null) {
continue;
}
linkedblockingdeque<pooledobject<t>>Var7 = objectdeque<t>Var14.getIdleObjects();
if (getLifo()) {
evictionIterator = linkedblockingdeque<pooledobject<t>>Var7.descendingIterator();
} else {
evictionIterator = linkedblockingdeque<pooledobject<t>>Var7.iterator();
}
if (evictionIterator.hasNext()) {
break;
}
evictionIterator = null;
}
}
if (evictionIterator == null) {
return;
}
try {
pooledobject<t>Var5 = evictionIterator.next();
} catch (NoSuchElementException nsee) {
intVar8--;
evictionIterator = null;
continue;
}
if (!pooledobject<t>Var5.startEvictionTest()) {
intVar8--;
continue;
}
if (longVar3 < pooledobject<t>Var5.getIdleTimeMillis()) {
destroy(evictionKey, pooledobject<t>Var5, true);
destroyedByEvictorCount.incrementAndGet();
} else {
if (booleanVar1) {
boolean booleanVar16 = booleanLiteral17;
try {
factory.activateObject(evictionKey, pooledobject<t>Var5.getObject());
booleanVar16 = true;
} catch (Exception e) {
destroy(evictionKey, pooledobject<t>Var5, true);
destroyedByEvictorCount.incrementAndGet();
}
if (booleanVar16) {
if (!factory.validateObject(evictionKey, pooledobject<t>Var5.getObject())) {
destroy(evictionKey, pooledobject<t>Var5, true);
destroyedByEvictorCount.incrementAndGet();
} else {
try {
factory.passivateObject(evictionKey, pooledobject<t>Var5.getObject());
} catch (Exception e) {
destroy(evictionKey, pooledobject<t>Var5, true);
destroyedByEvictorCount.incrementAndGet();
}
}
}
}
if (!pooledobject<t>Var5.endEvictionTest(linkedblockingdeque<pooledobject<t>>Var7)) {
}
}
}
}"
16312,Multithreaded correctness,NO_NOTIFY_NOT_NOTIFYALL,FP,pool,177,"latch.notify();
","private void allocate() {
boolean clearOldest = false;
synchronized (this) {
if (isClosed())
return;
for (; ; ) {
if (!_allocationQueue.isEmpty()) {
Latch latch = (Latch) _allocationQueue.getFirst();
ObjectQueue pool = (ObjectQueue) (_poolMap.get(latch.getkey()));
if (null == pool) {
pool = new ObjectQueue();
_poolMap.put(latch.getkey(), pool);
_poolList.add(latch.getkey());
}
latch.setPool(pool);
if (!pool.queue.isEmpty()) {
_allocationQueue.removeFirst();
latch.setPair((ObjectTimestampPair) pool.queue.removeFirst());
pool.incrementInternalProcessingCount();
_totalIdle--;
synchronized (latch) {
latch.notify();
}
continue;
}
if ((_maxTotal > 0) && (_totalActive + _totalIdle + _totalInternalProcessing >= _maxTotal)) {
clearOldest = true;
break;
}
if ((_maxActive < 0 || pool.activeCount + pool.internalProcessingCount < _maxActive) && (_maxTotal < 0 || _totalActive + _totalIdle + _totalInternalProcessing < _maxTotal)) {
_allocationQueue.removeFirst();
latch.setMayCreate(true);
pool.incrementInternalProcessingCount();
synchronized (latch) {
latch.notify();
}
continue;
}
}
break;
}
}
if (clearOldest) {
clearOldest();
}
}","private void allocate() {
boolean booleanVar1 = booleanLiteral2;
synchronized (this) {
if (isClosed())
return;
for (; ; ) {
if (!_allocationQueue.isEmpty()) {
Latch latchVar3 = latchLiteral4;
ObjectQueue objectqueueVar5 = objectqueueLiteral6;
if (null == objectqueueVar5) {
objectqueueVar5 = new ObjectQueue();
_poolMap.put(latchVar3.getkey(), objectqueueVar5);
_poolList.add(latchVar3.getkey());
}
latchVar3.setPool(objectqueueVar5);
if (!objectqueueVar5.queue.isEmpty()) {
_allocationQueue.removeFirst();
latchVar3.setPair((ObjectTimestampPair) objectqueueVar5.queue.removeFirst());
objectqueueVar5.incrementInternalProcessingCount();
_totalIdle--;
synchronized (latchVar3) {
latchVar3.notify();
}
continue;
}
if ((_maxTotal > 0) && (_totalActive + _totalIdle + _totalInternalProcessing >= _maxTotal)) {
booleanVar1 = true;
break;
}
if ((_maxActive < 0 || objectqueueVar5.activeCount + objectqueueVar5.internalProcessingCount < _maxActive) && (_maxTotal < 0 || _totalActive + _totalIdle + _totalInternalProcessing < _maxTotal)) {
_allocationQueue.removeFirst();
latchVar3.setMayCreate(true);
objectqueueVar5.incrementInternalProcessingCount();
synchronized (latchVar3) {
latchVar3.notify();
}
continue;
}
}
break;
}
}
if (booleanVar1) {
clearOldest();
}
}"
16331,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,196,"} catch (Exception e2) {
","@Override
public void returnObject(T obj) throws Exception {
try {
addObjectToPool(obj, true);
} catch (Exception e) {
if (_factory != null) {
try {
_factory.destroyObject(obj);
} catch (Exception e2) {
}
// TODO: Correctness here depends on control in addObjectToPool.
synchronized (this) {
_numActiveOld--;
}
allocate();
}
}
}","@Override
public void returnObject(T obj) throws Exception {
try {
addObjectToPool(obj, true);
} catch (Exception e) {
if (_factory != null) {
try {
_factory.destroyObject(obj);
} catch (Exception e2) {
}
// TODO: Correctness here depends on control in addObjectToPool.
synchronized (this) {
_numActiveOld--;
}
allocate();
}
}
}"
16345,DODGY_CODE,UCF_USELESS_CONTROL_FLOW,FP,pool,210,"if (!underTest.endEvictionTest(idleObjects)) {
","@Override
public void evict() throws E {
assertOpen();
if (getNumIdle() > 0) {
PooledObject<T> underTest = null;
final EvictionPolicy<T> evictionPolicy = getEvictionPolicy();
synchronized (evictionLock) {
final EvictionConfig evictionConfig = new EvictionConfig(getMinEvictableIdleDuration(), getSoftMinEvictableIdleDuration(), getMinIdlePerKey());
final boolean testWhileIdle = getTestWhileIdle();
for (int i = 0, m = getNumTests(); i < m; i++) {
if (evictionIterator == null || !evictionIterator.hasNext()) {
if (evictionKeyIterator == null || !evictionKeyIterator.hasNext()) {
final List<K> keyCopy = new ArrayList<>();
final Lock readLock = keyLock.readLock();
readLock.lock();
try {
keyCopy.addAll(poolKeyList);
} finally {
readLock.unlock();
}
evictionKeyIterator = keyCopy.iterator();
}
while (evictionKeyIterator.hasNext()) {
evictionKey = evictionKeyIterator.next();
final ObjectDeque<T> objectDeque = poolMap.get(evictionKey);
if (objectDeque == null) {
continue;
}
final Deque<PooledObject<T>> idleObjects = objectDeque.getIdleObjects();
evictionIterator = new EvictionIterator(idleObjects);
if (evictionIterator.hasNext()) {
break;
}
evictionIterator = null;
}
}
if (evictionIterator == null) {
return;
}
final Deque<PooledObject<T>> idleObjects;
try {
underTest = evictionIterator.next();
idleObjects = evictionIterator.getIdleObjects();
} catch (final NoSuchElementException nsee) {
i--;
evictionIterator = null;
continue;
}
if (!underTest.startEvictionTest()) {
i--;
continue;
}
boolean evict;
try {
evict = evictionPolicy.evict(evictionConfig, underTest, poolMap.get(evictionKey).getIdleObjects().size());
} catch (final Throwable t) {
PoolUtils.checkRethrow(t);
swallowException(new Exception(t));
evict = false;
}
if (evict) {
destroy(evictionKey, underTest, true, DestroyMode.NORMAL);
destroyedByEvictorCount.incrementAndGet();
} else {
if (testWhileIdle) {
boolean active = false;
try {
factory.activateObject(evictionKey, underTest);
active = true;
} catch (final Exception e) {
destroy(evictionKey, underTest, true, DestroyMode.NORMAL);
destroyedByEvictorCount.incrementAndGet();
}
if (active) {
boolean validate = false;
Throwable validationThrowable = null;
try {
validate = factory.validateObject(evictionKey, underTest);
} catch (final Throwable t) {
PoolUtils.checkRethrow(t);
validationThrowable = t;
}
if (!validate) {
destroy(evictionKey, underTest, true, DestroyMode.NORMAL);
destroyedByEvictorCount.incrementAndGet();
if (validationThrowable != null) {
if (validationThrowable instanceof RuntimeException) {
throw (RuntimeException) validationThrowable;
}
throw (Error) validationThrowable;
}
} else {
try {
factory.passivateObject(evictionKey, underTest);
} catch (final Exception e) {
destroy(evictionKey, underTest, true, DestroyMode.NORMAL);
destroyedByEvictorCount.incrementAndGet();
}
}
}
}
if (!underTest.endEvictionTest(idleObjects)) {
}
}
}
}
}
final AbandonedConfig ac = this.abandonedConfig;
if (ac != null && ac.getRemoveAbandonedOnMaintenance()) {
removeAbandoned(ac);
}
}","@Override
public void evict() throws E {
assertOpen();
if (getNumIdle() > 0) {
PooledObject<T> pooledobject<t>Var1 = pooledobject<t>Literal2;
final EvictionPolicy<T> evictionpolicy<t>Var3 = evictionpolicy<t>Literal4;
synchronized (evictionLock) {
final EvictionConfig evictionconfigVar5 = evictionconfigLiteral6;
final boolean booleanVar7 = booleanLiteral8;
for (int intVar28 = intLiteral29, intVar30 = intLiteral31; intVar9 < intLiteral1; intVar9++) {
if (evictionIterator == null || !evictionIterator.hasNext()) {
if (evictionKeyIterator == null || !evictionKeyIterator.hasNext()) {
final List<K> list<k>Var13 = list<k>Literal14;
final Lock lockVar15 = lockLiteral16;
lockVar15.lock();
try {
list<k>Var13.addAll(poolKeyList);
} finally {
lockVar15.unlock();
}
evictionKeyIterator = list<k>Var13.iterator();
}
while (evictionKeyIterator.hasNext()) {
evictionKey = evictionKeyIterator.next();
final ObjectDeque<T> objectdeque<t>Var17 = objectdeque<t>Literal18;
if (objectdeque<t>Var17 == null) {
continue;
}
final Deque<PooledObject<T>> deque<pooledobject<t>>Var19 = deque<pooledobject<t>>Literal20;
evictionIterator = new EvictionIterator(deque<pooledobject<t>>Var19);
if (evictionIterator.hasNext()) {
break;
}
evictionIterator = null;
}
}
if (evictionIterator == null) {
return;
}
final Deque<PooledObject<T>> deque<pooledobject<t>>Var19;
try {
pooledobject<t>Var1 = evictionIterator.next();
deque<pooledobject<t>>Var19 = evictionIterator.getIdleObjects();
} catch (final NoSuchElementException nsee) {
intVar9--;
evictionIterator = null;
continue;
}
if (!pooledobject<t>Var1.startEvictionTest()) {
intVar9--;
continue;
}
boolean booleanVar21;
try {
booleanVar21 = evictionpolicy<t>Var3.evict(evictionconfigVar5, pooledobject<t>Var1, poolMap.get(evictionKey).getIdleObjects().size());
} catch (final Throwable t) {
PoolUtils.checkRethrow(t);
swallowException(new Exception(t));
booleanVar21 = false;
}
if (booleanVar21) {
destroy(evictionKey, pooledobject<t>Var1, true, DestroyMode.NORMAL);
destroyedByEvictorCount.incrementAndGet();
} else {
if (booleanVar7) {
boolean booleanVar22 = booleanLiteral23;
try {
factory.activateObject(evictionKey, pooledobject<t>Var1);
booleanVar22 = true;
} catch (final Exception e) {
destroy(evictionKey, pooledobject<t>Var1, true, DestroyMode.NORMAL);
destroyedByEvictorCount.incrementAndGet();
}
if (booleanVar22) {
boolean booleanVar24 = booleanLiteral23;
Throwable throwableVar25 = pooledobject<t>Literal2;
try {
booleanVar24 = factory.validateObject(evictionKey, pooledobject<t>Var1);
} catch (final Throwable t) {
PoolUtils.checkRethrow(t);
throwableVar25 = t;
}
if (!booleanVar24) {
destroy(evictionKey, pooledobject<t>Var1, true, DestroyMode.NORMAL);
destroyedByEvictorCount.incrementAndGet();
if (throwableVar25 != null) {
if (throwableVar25 instanceof RuntimeException) {
throw (RuntimeException) throwableVar25;
}
throw (Error) throwableVar25;
}
} else {
try {
factory.passivateObject(evictionKey, pooledobject<t>Var1);
} catch (final Exception e) {
destroy(evictionKey, pooledobject<t>Var1, true, DestroyMode.NORMAL);
destroyedByEvictorCount.incrementAndGet();
}
}
}
}
if (!pooledobject<t>Var1.endEvictionTest(deque<pooledobject<t>>Var19)) {
}
}
}
}
}
final AbandonedConfig abandonedconfigVar26 = abandonedconfigLiteral27;
if (abandonedconfigVar26 != null && abandonedconfigVar26.getRemoveAbandonedOnMaintenance()) {
removeAbandoned(abandonedconfigVar26);
}
}"
16356,DODGY_CODE,REC_CATCH_EXCEPTION,FP,pool,221,"} catch (final Exception e) {
","@Override
public void run() {
boolean success = false;
try {
if (keyedPool.getNumIdle(key) < minIdle) {
keyedPool.addObject(key);
}
success = true;
} catch (final Exception e) {
cancel();
} finally {
if (!success) {
cancel();
}
}
}","@Override
public void run() {
boolean booleanVar1 = booleanLiteral2;
try {
if (keyedPool.getNumIdle(key) < minIdle) {
keyedPool.addObject(key);
}
booleanVar1 = true;
} catch (final Exception e) {
cancel();
} finally {
if (!booleanVar1) {
cancel();
}
}
}"
16383,PERFORMANCE,WMI_WRONG_MAP_ITERATOR,FP,pool,248,"ObjectQueue pool = _poolMap.get(key);
","public void setFactory(KeyedPoolableObjectFactory<K, V> factory) throws IllegalStateException {
Map toDestroy = new HashMap();
final KeyedPoolableObjectFactory<K, V> oldFactory = _factory;
synchronized (this) {
assertOpen();
if (0 < getNumActive()) {
throw new IllegalStateException(""Objects are already active"");
} else {
for (Iterator<K> it = _poolMap.keySet().iterator(); it.hasNext(); ) {
K key = it.next();
ObjectQueue pool = _poolMap.get(key);
if (pool != null) {
List objects = new ArrayList();
objects.addAll(pool.queue);
toDestroy.put(key, objects);
it.remove();
_poolList.remove(key);
_totalIdle = _totalIdle - pool.queue.size();
_totalInternalProcessing = _totalInternalProcessing + pool.queue.size();
pool.queue.clear();
}
}
_factory = factory;
}
}
destroy(toDestroy, oldFactory);
}","public void setFactory(KeyedPoolableObjectFactory<K, V> factory) throws IllegalStateException {
Map mapVar1 = mapLiteral2;
final KeyedPoolableObjectFactory<K, V> keyedpoolableobjectfactory<k,v>Var3 = keyedpoolableobjectfactory<k,v>Literal4;
synchronized (this) {
assertOpen();
if (0 < getNumActive()) {
throw new IllegalStateException(""Objects are already active"");
} else {
for (Iterator<K> iterator<k>Var13 = iterator<k>Literal14; iterator<k>Var5.hasNext(); ) {
K kVar7 = kLiteral8;
ObjectQueue objectqueueVar9 = objectqueueLiteral10;
if (objectqueueVar9 != null) {
List listVar11 = listLiteral12;
listVar11.addAll(objectqueueVar9.queue);
mapVar1.put(kVar7, listVar11);
iterator<k>Var5.remove();
_poolList.remove(kVar7);
_totalIdle = _totalIdle - objectqueueVar9.queue.size();
_totalInternalProcessing = _totalInternalProcessing + objectqueueVar9.queue.size();
objectqueueVar9.queue.clear();
}
}
_factory = factory;
}
}
destroy(mapVar1, keyedpoolableobjectfactory<k,v>Var3);
}"
16396,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,261,"} catch (Exception e) {
","public synchronized Object borrowObject() throws Exception {
assertOpen();
Object obj = null;
boolean newlyCreated = false;
while (null == obj) {
if (!_pool.empty()) {
obj = _pool.pop();
} else {
if (null == _factory) {
throw new NoSuchElementException();
} else {
newlyCreated = true;
obj = _factory.makeObject();
if (obj == null) {
throw new NoSuchElementException(""PoolableObjectFactory.makeObject() returned null."");
}
}
}
if (!newlyCreated && null != _factory && null != obj) {
try {
_factory.activateObject(obj);
} catch (Exception e) {
try {
_factory.destroyObject(obj);
} catch (Exception e2) {
} finally {
obj = null;
}
}
}
if (!newlyCreated && null != _factory && null != obj) {
boolean validated = false;
try {
validated = _factory.validateObject(obj);
} catch (Exception e) {
}
if (!validated) {
try {
_factory.destroyObject(obj);
} catch (Exception e) {
} finally {
obj = null;
}
}
}
}
_numActive++;
return obj;
}","public synchronized Object borrowObject() throws Exception {
assertOpen();
Object objectVar1 = objectLiteral2;
boolean booleanVar3 = booleanLiteral4;
while (null == objectVar1) {
if (!_pool.empty()) {
objectVar1 = _pool.pop();
} else {
if (null == _factory) {
throw new NoSuchElementException();
} else {
booleanVar3 = true;
objectVar1 = _factory.makeObject();
if (objectVar1 == null) {
throw new NoSuchElementException(""PoolableObjectFactory.makeObject() returned null."");
}
}
}
if (!booleanVar3 && null != _factory && null != objectVar1) {
try {
_factory.activateObject(objectVar1);
} catch (Exception e) {
try {
_factory.destroyObject(objectVar1);
} catch (Exception e2) {
} finally {
objectVar1 = null;
}
}
}
if (!booleanVar3 && null != _factory && null != objectVar1) {
boolean booleanVar5 = booleanLiteral4;
try {
booleanVar5 = _factory.validateObject(objectVar1);
} catch (Exception e) {
}
if (!booleanVar5) {
try {
_factory.destroyObject(objectVar1);
} catch (Exception e) {
} finally {
objectVar1 = null;
}
}
}
}
_numActive++;
return objectVar1;
}"
16401,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,266,"} catch (Exception e) {
","public void returnObject(final V obj) {
try {
keyedPool.returnObject(key, obj);
} catch (Exception e) {
}
}","public void returnObject(final V obj) {
try {
keyedPool.returnObject(key, obj);
} catch (Exception e) {
}
}"
16407,PERFORMANCE,WMI_WRONG_MAP_ITERATOR,FP,pool,272,"final LinkedList list = ((ObjectQueue)_poolMap.get(key)).queue;
","public synchronized void clearOldest() {
final Map map = new TreeMap();
for (Iterator keyiter = _poolMap.keySet().iterator(); keyiter.hasNext(); ) {
final Object key = keyiter.next();
final LinkedList list = ((ObjectQueue) _poolMap.get(key)).queue;
for (Iterator it = list.iterator(); it.hasNext(); ) {
map.put(it.next(), key);
}
}
Set setPairKeys = map.entrySet();
int itemsToRemove = ((int) (map.size() * 0.15)) + 1;
Iterator iter = setPairKeys.iterator();
while (iter.hasNext() && itemsToRemove > 0) {
Map.Entry entry = (Map.Entry) iter.next();
Object key = entry.getValue();
ObjectTimestampPair pairTimeStamp = (ObjectTimestampPair) entry.getKey();
final LinkedList list = ((ObjectQueue) (_poolMap.get(key))).queue;
list.remove(pairTimeStamp);
try {
_factory.destroyObject(key, pairTimeStamp.value);
} catch (Exception e) {
}
if (list.isEmpty()) {
_poolMap.remove(key);
}
_totalIdle--;
itemsToRemove--;
}
notifyAll();
}","public synchronized void clearOldest() {
final Map mapVar1 = mapLiteral2;
for (Iterator iteratorVar23 = iteratorLiteral24; iteratorVar3.hasNext(); ) {
final Object objectVar5 = objectLiteral6;
final LinkedList linkedlistVar7 = linkedlistLiteral8;
for (Iterator iteratorVar25 = iteratorLiteral26; iteratorVar9.hasNext(); ) {
mapVar1.put(iteratorVar9.next(), objectVar5);
}
}
Set setVar11 = setLiteral12;
int intVar13 = intLiteral14;
Iterator iteratorVar15 = iteratorLiteral16;
while (iteratorVar15.hasNext() && intVar13 > 0) {
Map.Entry map.entryVar17 = map.entryLiteral18;
Object objectVar5 = objectLiteral19;
ObjectTimestampPair objecttimestamppairVar20 = objecttimestamppairLiteral21;
final LinkedList linkedlistVar7 = linkedlistLiteral22;
linkedlistVar7.remove(objecttimestamppairVar20);
try {
_factory.destroyObject(objectVar5, objecttimestamppairVar20.value);
} catch (Exception e) {
}
if (linkedlistVar7.isEmpty()) {
_poolMap.remove(objectVar5);
}
_totalIdle--;
intVar13--;
}
notifyAll();
}"
16419,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,284,"} catch (Exception e) {
","public void invalidateObject(final K key, final V obj) {
synchronized (lock) {
try {
keyedPool.invalidateObject(key, obj);
} catch (Exception e) {
}
}
}","public void invalidateObject(final K key, final V obj) {
synchronized (lock) {
try {
keyedPool.invalidateObject(key, obj);
} catch (Exception e) {
}
}
}"
16424,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,289,"} catch (final Exception e1) {
","public T borrowObject(final long borrowMaxWaitMillis) throws Exception {
assertOpen();
final AbandonedConfig ac = this.abandonedConfig;
if (ac != null && ac.getRemoveAbandonedOnBorrow() && (getNumIdle() < 2) && (getNumActive() > getMaxTotal() - 3)) {
removeAbandoned(ac);
}
PooledObject<T> p = null;
final boolean blockWhenExhausted = getBlockWhenExhausted();
boolean create;
final long waitTime = System.currentTimeMillis();
while (p == null) {
create = false;
p = idleObjects.pollFirst();
if (p == null) {
p = create();
if (p != null) {
create = true;
}
}
if (blockWhenExhausted) {
if (p == null) {
if (borrowMaxWaitMillis < 0) {
p = idleObjects.takeFirst();
} else {
p = idleObjects.pollFirst(borrowMaxWaitMillis, TimeUnit.MILLISECONDS);
}
}
if (p == null) {
throw new NoSuchElementException(""Timeout waiting for idle object"");
}
} else {
if (p == null) {
throw new NoSuchElementException(""Pool exhausted"");
}
}
if (!p.allocate()) {
p = null;
}
if (p != null) {
try {
factory.activateObject(p);
} catch (final Exception e) {
try {
destroy(p);
} catch (final Exception e1) {
}
p = null;
if (create) {
final NoSuchElementException nsee = new NoSuchElementException(""Unable to activate object"");
nsee.initCause(e);
throw nsee;
}
}
if (p != null && (getTestOnBorrow() || create && getTestOnCreate())) {
boolean validate = false;
Throwable validationThrowable = null;
try {
validate = factory.validateObject(p);
} catch (final Throwable t) {
PoolUtils.checkRethrow(t);
validationThrowable = t;
}
if (!validate) {
try {
destroy(p);
destroyedByBorrowValidationCount.incrementAndGet();
} catch (final Exception e) {
}
p = null;
if (create) {
final NoSuchElementException nsee = new NoSuchElementException(""Unable to validate object"");
nsee.initCause(validationThrowable);
throw nsee;
}
}
}
}
}
updateStatsBorrow(p, System.currentTimeMillis() - waitTime);
return p.getObject();
}","public T borrowObject(final long borrowMaxWaitMillis) throws Exception {
assertOpen();
final AbandonedConfig abandonedconfigVar1 = abandonedconfigLiteral2;
if (abandonedconfigVar1 != null && abandonedconfigVar1.getRemoveAbandonedOnBorrow() && (getNumIdle() < 2) && (getNumActive() > getMaxTotal() - 3)) {
removeAbandoned(abandonedconfigVar1);
}
PooledObject<T> pooledobject<t>Var3 = pooledobject<t>Literal4;
final boolean booleanVar5 = booleanLiteral6;
boolean booleanVar7;
final long longVar8 = longLiteral9;
while (pooledobject<t>Var3 == null) {
booleanVar7 = false;
pooledobject<t>Var3 = idleObjects.pollFirst();
if (pooledobject<t>Var3 == null) {
pooledobject<t>Var3 = create();
if (pooledobject<t>Var3 != null) {
booleanVar7 = true;
}
}
if (booleanVar5) {
if (pooledobject<t>Var3 == null) {
if (borrowMaxWaitMillis < 0) {
pooledobject<t>Var3 = idleObjects.takeFirst();
} else {
pooledobject<t>Var3 = idleObjects.pollFirst(borrowMaxWaitMillis, TimeUnit.MILLISECONDS);
}
}
if (pooledobject<t>Var3 == null) {
throw new NoSuchElementException(""Timeout waiting for idle object"");
}
} else {
if (pooledobject<t>Var3 == null) {
throw new NoSuchElementException(""Pool exhausted"");
}
}
if (!pooledobject<t>Var3.allocate()) {
pooledobject<t>Var3 = null;
}
if (pooledobject<t>Var3 != null) {
try {
factory.activateObject(pooledobject<t>Var3);
} catch (final Exception e) {
try {
destroy(pooledobject<t>Var3);
} catch (final Exception e1) {
}
pooledobject<t>Var3 = null;
if (booleanVar7) {
final NoSuchElementException nosuchelementexceptionVar10 = nosuchelementexceptionLiteral11;
nosuchelementexceptionVar10.initCause(e);
throw nosuchelementexceptionVar10;
}
}
if (pooledobject<t>Var3 != null && (getTestOnBorrow() || booleanVar7 && getTestOnCreate())) {
boolean booleanVar12 = booleanLiteral13;
Throwable throwableVar14 = pooledobject<t>Literal4;
try {
booleanVar12 = factory.validateObject(pooledobject<t>Var3);
} catch (final Throwable t) {
PoolUtils.checkRethrow(t);
throwableVar14 = t;
}
if (!booleanVar12) {
try {
destroy(pooledobject<t>Var3);
destroyedByBorrowValidationCount.incrementAndGet();
} catch (final Exception e) {
}
pooledobject<t>Var3 = null;
if (booleanVar7) {
final NoSuchElementException nosuchelementexceptionVar10 = nosuchelementexceptionLiteral15;
nosuchelementexceptionVar10.initCause(throwableVar14);
throw nosuchelementexceptionVar10;
}
}
}
}
}
updateStatsBorrow(pooledobject<t>Var3, System.currentTimeMillis() - longVar8);
return pooledobject<t>Var3.getObject();
}"
16443,Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,pool,308,private int initIdleCapacity;,private int initIdleCapacity;,private int intVar1;
16447,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,312,"} catch (Exception e1) {
","public T borrowObject(K key, long borrowMaxWaitMillis) throws Exception {
assertOpen();
PooledObject<T> p = null;
boolean blockWhenExhausted = getBlockWhenExhausted();
boolean create;
long waitTime = System.currentTimeMillis();
ObjectDeque<T> objectDeque = register(key);
try {
while (p == null) {
create = false;
if (blockWhenExhausted) {
p = objectDeque.getIdleObjects().pollFirst();
if (p == null) {
p = create(key);
if (p != null) {
create = true;
}
}
if (p == null) {
if (borrowMaxWaitMillis < 0) {
p = objectDeque.getIdleObjects().takeFirst();
} else {
p = objectDeque.getIdleObjects().pollFirst(borrowMaxWaitMillis, TimeUnit.MILLISECONDS);
}
}
if (p == null) {
throw new NoSuchElementException(""Timeout waiting for idle object"");
}
if (!p.allocate()) {
p = null;
}
} else {
p = objectDeque.getIdleObjects().pollFirst();
if (p == null) {
p = create(key);
if (p != null) {
create = true;
}
}
if (p == null) {
throw new NoSuchElementException(""Pool exhausted"");
}
if (!p.allocate()) {
p = null;
}
}
if (p != null) {
try {
factory.activateObject(key, p);
} catch (Exception e) {
try {
destroy(key, p, true);
} catch (Exception e1) {
}
p = null;
if (create) {
NoSuchElementException nsee = new NoSuchElementException(""Unable to activate object"");
nsee.initCause(e);
throw nsee;
}
}
if (p != null && (getTestOnBorrow() || create && getTestOnCreate())) {
boolean validate = false;
Throwable validationThrowable = null;
try {
validate = factory.validateObject(key, p);
} catch (Throwable t) {
PoolUtils.checkRethrow(t);
validationThrowable = t;
}
if (!validate) {
try {
destroy(key, p, true);
destroyedByBorrowValidationCount.incrementAndGet();
} catch (Exception e) {
}
p = null;
if (create) {
NoSuchElementException nsee = new NoSuchElementException(""Unable to validate object"");
nsee.initCause(validationThrowable);
throw nsee;
}
}
}
}
}
} finally {
deregister(key);
}
updateStatsBorrow(p, System.currentTimeMillis() - waitTime);
return p.getObject();
}","public T borrowObject(K key, long borrowMaxWaitMillis) throws Exception {
assertOpen();
PooledObject<T> pooledobject<t>Var1 = pooledobject<t>Literal2;
boolean booleanVar3 = booleanLiteral4;
boolean booleanVar5;
long longVar6 = longLiteral7;
ObjectDeque<T> objectdeque<t>Var8 = objectdeque<t>Literal9;
try {
while (pooledobject<t>Var1 == null) {
booleanVar5 = false;
if (booleanVar3) {
pooledobject<t>Var1 = objectdeque<t>Var8.getIdleObjects().pollFirst();
if (pooledobject<t>Var1 == null) {
pooledobject<t>Var1 = create(key);
if (pooledobject<t>Var1 != null) {
booleanVar5 = true;
}
}
if (pooledobject<t>Var1 == null) {
if (borrowMaxWaitMillis < 0) {
pooledobject<t>Var1 = objectdeque<t>Var8.getIdleObjects().takeFirst();
} else {
pooledobject<t>Var1 = objectdeque<t>Var8.getIdleObjects().pollFirst(borrowMaxWaitMillis, TimeUnit.MILLISECONDS);
}
}
if (pooledobject<t>Var1 == null) {
throw new NoSuchElementException(""Timeout waiting for idle object"");
}
if (!pooledobject<t>Var1.allocate()) {
pooledobject<t>Var1 = null;
}
} else {
pooledobject<t>Var1 = objectdeque<t>Var8.getIdleObjects().pollFirst();
if (pooledobject<t>Var1 == null) {
pooledobject<t>Var1 = create(key);
if (pooledobject<t>Var1 != null) {
booleanVar5 = true;
}
}
if (pooledobject<t>Var1 == null) {
throw new NoSuchElementException(""Pool exhausted"");
}
if (!pooledobject<t>Var1.allocate()) {
pooledobject<t>Var1 = null;
}
}
if (pooledobject<t>Var1 != null) {
try {
factory.activateObject(key, pooledobject<t>Var1);
} catch (Exception e) {
try {
destroy(key, pooledobject<t>Var1, true);
} catch (Exception e1) {
}
pooledobject<t>Var1 = null;
if (booleanVar5) {
NoSuchElementException nosuchelementexceptionVar10 = nosuchelementexceptionLiteral11;
nosuchelementexceptionVar10.initCause(e);
throw nosuchelementexceptionVar10;
}
}
if (pooledobject<t>Var1 != null && (getTestOnBorrow() || booleanVar5 && getTestOnCreate())) {
boolean booleanVar12 = booleanLiteral13;
Throwable throwableVar14 = pooledobject<t>Literal2;
try {
booleanVar12 = factory.validateObject(key, pooledobject<t>Var1);
} catch (Throwable t) {
PoolUtils.checkRethrow(t);
throwableVar14 = t;
}
if (!booleanVar12) {
try {
destroy(key, pooledobject<t>Var1, true);
destroyedByBorrowValidationCount.incrementAndGet();
} catch (Exception e) {
}
pooledobject<t>Var1 = null;
if (booleanVar5) {
NoSuchElementException nosuchelementexceptionVar10 = nosuchelementexceptionLiteral15;
nosuchelementexceptionVar10.initCause(throwableVar14);
throw nosuchelementexceptionVar10;
}
}
}
}
}
} finally {
deregister(key);
}
updateStatsBorrow(pooledobject<t>Var1, System.currentTimeMillis() - longVar6);
return pooledobject<t>Var1.getObject();
}"
16455,CORRECTNESS,RV_RETURN_VALUE_IGNORED,FP,pool,320,"writeLock.tryLock();
","@Override
public void close() {
WriteLock writeLock = readWriteLock.writeLock();
writeLock.tryLock();
try {
keyedPool.close();
} catch (Exception e) {
} finally {
writeLock.unlock();
}
}","@Override
public void close() {
WriteLock writelockVar1 = writelockLiteral2;
writelockVar1.tryLock();
try {
keyedPool.close();
} catch (Exception e) {
} finally {
writelockVar1.unlock();
}
}"
16466,CORRECTNESS,RV_RETURN_VALUE_IGNORED,FP,pool,331,"writeLock.tryLock();
","@Override
public void clear() throws Exception, UnsupportedOperationException {
WriteLock writeLock = readWriteLock.writeLock();
writeLock.tryLock();
try {
pool.clear();
} finally {
writeLock.unlock();
}
}","@Override
public void clear() throws Exception, UnsupportedOperationException {
WriteLock writelockVar1 = writelockLiteral2;
writelockVar1.tryLock();
try {
pool.clear();
} finally {
writelockVar1.unlock();
}
}"
16485,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,350,"} catch (Exception e) {
","@Override
public void run() {
try {
evict();
} catch (Exception e) {
} catch (OutOfMemoryError oome) {
oome.printStackTrace(System.err);
}
try {
ensureMinIdle();
} catch (Exception e) {
}
}","@Override
public void run() {
try {
evict();
} catch (Exception e) {
} catch (OutOfMemoryError oome) {
oome.printStackTrace(System.err);
}
try {
ensureMinIdle();
} catch (Exception e) {
}
}"
16497,DODGY_CODE,NP_LOAD_OF_KNOWN_NULL_VALUE,FP,pool,362,"nsee.initCause(validationThrowable);
","public T borrowObject(K key, long borrowMaxWaitMillis) throws Exception {
assertOpen();
PooledObject<T> p = null;
boolean blockWhenExhausted = getBlockWhenExhausted();
boolean create;
long waitTime = 0;
ObjectDeque<T> objectDeque = register(key);
try {
while (p == null) {
create = false;
if (blockWhenExhausted) {
if (objectDeque != null) {
p = objectDeque.getIdleObjects().pollFirst();
}
if (p == null) {
create = true;
p = create(key);
}
if (p == null && objectDeque != null) {
if (borrowMaxWaitMillis < 0) {
p = objectDeque.getIdleObjects().takeFirst();
} else {
waitTime = System.currentTimeMillis();
p = objectDeque.getIdleObjects().pollFirst(borrowMaxWaitMillis, TimeUnit.MILLISECONDS);
waitTime = System.currentTimeMillis() - waitTime;
}
}
if (p == null) {
throw new NoSuchElementException(""Timeout waiting for idle object"");
}
if (!p.allocate()) {
p = null;
}
} else {
if (objectDeque != null) {
p = objectDeque.getIdleObjects().pollFirst();
}
if (p == null) {
create = true;
p = create(key);
}
if (p == null) {
throw new NoSuchElementException(""Pool exhausted"");
}
if (!p.allocate()) {
p = null;
}
}
if (p != null) {
try {
factory.activateObject(key, p.getObject());
} catch (Exception e) {
try {
destroy(key, p, true);
} catch (Exception e1) {
}
p = null;
if (create) {
NoSuchElementException nsee = new NoSuchElementException(""Unable to activate object"");
nsee.initCause(e);
throw nsee;
}
}
if (p != null && getTestOnBorrow()) {
boolean validate = false;
Throwable validationThrowable = null;
try {
validate = factory.validateObject(key, p.getObject());
} catch (Throwable t) {
PoolUtils.checkRethrow(t);
}
if (!validate) {
try {
destroy(key, p, true);
destroyedByBorrowValidationCount.incrementAndGet();
} catch (Exception e) {
}
p = null;
if (create) {
NoSuchElementException nsee = new NoSuchElementException(""Unable to validate object"");
nsee.initCause(validationThrowable);
throw nsee;
}
}
}
}
}
} finally {
deregister(key);
}
updateStatsBorrow(p, waitTime);
return p.getObject();
}","public T borrowObject(K key, long borrowMaxWaitMillis) throws Exception {
assertOpen();
PooledObject<T> pooledobject<t>Var1 = pooledobject<t>Literal2;
boolean booleanVar3 = booleanLiteral4;
boolean booleanVar5;
long longVar6 = longLiteral7;
ObjectDeque<T> objectdeque<t>Var8 = objectdeque<t>Literal9;
try {
while (pooledobject<t>Var1 == null) {
booleanVar5 = false;
if (booleanVar3) {
if (objectdeque<t>Var8 != null) {
pooledobject<t>Var1 = objectdeque<t>Var8.getIdleObjects().pollFirst();
}
if (pooledobject<t>Var1 == null) {
booleanVar5 = true;
pooledobject<t>Var1 = create(key);
}
if (pooledobject<t>Var1 == null && objectdeque<t>Var8 != null) {
if (borrowMaxWaitMillis < 0) {
pooledobject<t>Var1 = objectdeque<t>Var8.getIdleObjects().takeFirst();
} else {
longVar6 = System.currentTimeMillis();
pooledobject<t>Var1 = objectdeque<t>Var8.getIdleObjects().pollFirst(borrowMaxWaitMillis, TimeUnit.MILLISECONDS);
longVar6 = System.currentTimeMillis() - longVar6;
}
}
if (pooledobject<t>Var1 == null) {
throw new NoSuchElementException(""Timeout waiting for idle object"");
}
if (!pooledobject<t>Var1.allocate()) {
pooledobject<t>Var1 = null;
}
} else {
if (objectdeque<t>Var8 != null) {
pooledobject<t>Var1 = objectdeque<t>Var8.getIdleObjects().pollFirst();
}
if (pooledobject<t>Var1 == null) {
booleanVar5 = true;
pooledobject<t>Var1 = create(key);
}
if (pooledobject<t>Var1 == null) {
throw new NoSuchElementException(""Pool exhausted"");
}
if (!pooledobject<t>Var1.allocate()) {
pooledobject<t>Var1 = null;
}
}
if (pooledobject<t>Var1 != null) {
try {
factory.activateObject(key, pooledobject<t>Var1.getObject());
} catch (Exception e) {
try {
destroy(key, pooledobject<t>Var1, true);
} catch (Exception e1) {
}
pooledobject<t>Var1 = null;
if (booleanVar5) {
NoSuchElementException nosuchelementexceptionVar10 = nosuchelementexceptionLiteral11;
nosuchelementexceptionVar10.initCause(e);
throw nosuchelementexceptionVar10;
}
}
if (pooledobject<t>Var1 != null && getTestOnBorrow()) {
boolean booleanVar12 = booleanLiteral13;
Throwable throwableVar14 = pooledobject<t>Literal2;
try {
booleanVar12 = factory.validateObject(key, pooledobject<t>Var1.getObject());
} catch (Throwable t) {
PoolUtils.checkRethrow(t);
}
if (!booleanVar12) {
try {
destroy(key, pooledobject<t>Var1, true);
destroyedByBorrowValidationCount.incrementAndGet();
} catch (Exception e) {
}
pooledobject<t>Var1 = null;
if (booleanVar5) {
NoSuchElementException nosuchelementexceptionVar10 = nosuchelementexceptionLiteral15;
nosuchelementexceptionVar10.initCause(throwableVar14);
throw nosuchelementexceptionVar10;
}
}
}
}
}
} finally {
deregister(key);
}
updateStatsBorrow(pooledobject<t>Var1, longVar6);
return pooledobject<t>Var1.getObject();
}"
16504,Multithreaded correctness,IS2_INCONSISTENT_SYNC,TP,pool,369,private int initIdleCapacity;,private int initIdleCapacity;,private int intVar1;
16505,Multithreaded correctness,IS2_INCONSISTENT_SYNC,TP,pool,370,private int maxSleeping;,private int maxSleeping;,private int intVar1;
16508,Multithreaded correctness,IS2_INCONSISTENT_SYNC,TP,pool,373,private boolean _testOnReturn = DEFAULT_TEST_ON_RETURN;,private boolean _testOnReturn = DEFAULT_TEST_ON_RETURN;,private boolean booleanVar1 = booleanLiteral2;
16510,CORRECTNESS,RV_RETURN_VALUE_IGNORED,TP,pool,375,"writeLock.tryLock();
","@Override
public boolean validateObject(final K key, final V obj) {
writeLock.tryLock();
try {
return keyedFactory.validateObject(key, obj);
} finally {
writeLock.unlock();
}
}","@Override
public boolean validateObject(final K key, final V obj) {
writeLock.tryLock();
try {
return keyedFactory.validateObject(key, obj);
} finally {
writeLock.unlock();
}
}"
16513,CORRECTNESS,RV_RETURN_VALUE_IGNORED,TP,pool,378,"writeLock.tryLock();
","@Override
public void activateObject(final T obj) throws Exception {
writeLock.tryLock();
try {
factory.activateObject(obj);
} finally {
writeLock.unlock();
}
}","@Override
public void activateObject(final T obj) throws Exception {
writeLock.tryLock();
try {
factory.activateObject(obj);
} finally {
writeLock.unlock();
}
}"
16517,CORRECTNESS,RV_RETURN_VALUE_IGNORED,TP,pool,382,"readLock.tryLock();
","@Override
public int getNumActive() {
ReadLock readLock = readWriteLock.readLock();
readLock.tryLock();
try {
return keyedPool.getNumActive();
} finally {
readLock.unlock();
}
}","@Override
public int getNumActive() {
ReadLock readlockVar1 = readlockLiteral2;
readlockVar1.tryLock();
try {
return keyedPool.getNumActive();
} finally {
readlockVar1.unlock();
}
}"
16521,Multithreaded correctness,VO_VOLATILE_INCREMENT,TP,pool,386,"_numActive++;
","@Override
public synchronized T borrowObject() throws Exception {
assertOpen();
T obj = null;
boolean newlyCreated = false;
while (null == obj) {
if (!_pool.empty()) {
obj = _pool.pop();
} else {
if (null == _factory) {
throw new NoSuchElementException();
} else {
obj = _factory.makeObject();
newlyCreated = true;
if (obj == null) {
throw new NoSuchElementException(""PoolableObjectFactory.makeObject() returned null."");
}
}
}
if (null != _factory && null != obj) {
try {
_factory.activateObject(obj);
if (!_factory.validateObject(obj)) {
throw new Exception(""ValidateObject failed"");
}
} catch (Throwable t) {
PoolUtils.checkRethrow(t);
try {
_factory.destroyObject(obj);
} catch (Throwable t2) {
PoolUtils.checkRethrow(t2);
} finally {
obj = null;
}
if (newlyCreated) {
throw new NoSuchElementException(""Could not create a validated object, cause: "" + t.getMessage());
}
}
}
}
_numActive++;
return obj;
}","@Override
public synchronized T borrowObject() throws Exception {
assertOpen();
T tVar1 = tLiteral2;
boolean booleanVar3 = booleanLiteral4;
while (null == tVar1) {
if (!_pool.empty()) {
tVar1 = _pool.pop();
} else {
if (null == _factory) {
throw new NoSuchElementException();
} else {
tVar1 = _factory.makeObject();
booleanVar3 = true;
if (tVar1 == null) {
throw new NoSuchElementException(""PoolableObjectFactory.makeObject() returned null."");
}
}
}
if (null != _factory && null != tVar1) {
try {
_factory.activateObject(tVar1);
if (!_factory.validateObject(tVar1)) {
throw new Exception(""ValidateObject failed"");
}
} catch (Throwable t) {
PoolUtils.checkRethrow(t);
try {
_factory.destroyObject(tVar1);
} catch (Throwable t2) {
PoolUtils.checkRethrow(t2);
} finally {
tVar1 = null;
}
if (booleanVar3) {
throw new NoSuchElementException(""Could not create a validated object, cause: "" + t.getMessage());
}
}
}
}
_numActive++;
return tVar1;
}"
16548,CORRECTNESS,RV_RETURN_VALUE_IGNORED,TP,pool,413,"writeLock.tryLock();
","@Override
public void returnObject(final T obj) {
WriteLock writeLock = readWriteLock.writeLock();
writeLock.tryLock();
try {
pool.returnObject(obj);
} catch (Exception e) {
} finally {
writeLock.unlock();
}
}","@Override
public void returnObject(final T obj) {
WriteLock writelockVar1 = writelockLiteral2;
writelockVar1.tryLock();
try {
pool.returnObject(obj);
} catch (Exception e) {
} finally {
writelockVar1.unlock();
}
}"
16558,Multithreaded correctness,IS2_INCONSISTENT_SYNC,TP,pool,423,private int initIdleCapacity;,private int initIdleCapacity;,private int intVar1;
16566,PERFORMANCE,WMI_WRONG_MAP_ITERATOR,TP,pool,431,"final CursorableLinkedList<ObjectTimestampPair<V>> list = _poolMap.get(key).queue;
","public void clearOldest() {
final Map<K, List<ObjectTimestampPair<V>>> toDestroy = new HashMap<K, List<ObjectTimestampPair<V>>>();
final Map<ObjectTimestampPair<V>, K> map = new TreeMap<ObjectTimestampPair<V>, K>();
synchronized (this) {
for (Iterator<K> keyiter = _poolMap.keySet().iterator(); keyiter.hasNext(); ) {
final K key = keyiter.next();
final CursorableLinkedList<ObjectTimestampPair<V>> list = _poolMap.get(key).queue;
for (Iterator<ObjectTimestampPair<V>> it = list.iterator(); it.hasNext(); ) {
map.put(it.next(), key);
}
}
Set<Map.Entry<ObjectTimestampPair<V>, K>> setPairKeys = map.entrySet();
int itemsToRemove = ((int) (map.size() * 0.15)) + 1;
Iterator<Map.Entry<ObjectTimestampPair<V>, K>> iter = setPairKeys.iterator();
while (iter.hasNext() && itemsToRemove > 0) {
Map.Entry<ObjectTimestampPair<V>, K> entry = iter.next();
K key = entry.getValue();
ObjectTimestampPair<V> pairTimeStamp = entry.getKey();
ObjectQueue objectQueue = _poolMap.get(key);
final CursorableLinkedList<ObjectTimestampPair<V>> list = objectQueue.queue;
list.remove(pairTimeStamp);
if (toDestroy.containsKey(key)) {
toDestroy.get(key).add(pairTimeStamp);
} else {
List<ObjectTimestampPair<V>> listForKey = new ArrayList<ObjectTimestampPair<V>>();
listForKey.add(pairTimeStamp);
toDestroy.put(key, listForKey);
}
objectQueue.incrementInternalProcessingCount();
_totalIdle--;
itemsToRemove--;
}
}
destroy(toDestroy, _factory);
}","public void clearOldest() {
final Map<K, List<ObjectTimestampPair<V>>> map<k,list<objecttimestamppair<v>>>Var1 = map<k,list<objecttimestamppair<v>>>Literal2;
final Map<ObjectTimestampPair<V>, K> map<objecttimestamppair<v>,k>Var3 = map<objecttimestamppair<v>,k>Literal4;
synchronized (this) {
for (Iterator<K> iterator<k>Var29 = iterator<k>Literal30; iterator<k>Var5.hasNext(); ) {
final K kVar7 = kLiteral8;
final CursorableLinkedList<ObjectTimestampPair<V>> cursorablelinkedlist<objecttimestamppair<v>>Var9 = cursorablelinkedlist<objecttimestamppair<v>>Literal10;
for (Iterator<ObjectTimestampPair<V>> iterator<objecttimestamppair<v>>Var31 = iterator<objecttimestamppair<v>>Literal32; iterator<objecttimestamppair<v>>Var11.hasNext(); ) {
map<objecttimestamppair<v>,k>Var3.put(iterator<objecttimestamppair<v>>Var11.next(), kVar7);
}
}
Set<Map.Entry<ObjectTimestampPair<V>, K>> set<map.entry<objecttimestamppair<v>,k>>Var13 = set<map.entry<objecttimestamppair<v>,k>>Literal14;
int intVar15 = intLiteral16;
Iterator<Map.Entry<ObjectTimestampPair<V>, K>> iterator<map.entry<objecttimestamppair<v>,k>>Var17 = iterator<map.entry<objecttimestamppair<v>,k>>Literal18;
while (iterator<map.entry<objecttimestamppair<v>,k>>Var17.hasNext() && intVar15 > 0) {
Map.Entry<ObjectTimestampPair<V>, K> map.entry<objecttimestamppair<v>,k>Var19 = map.entry<objecttimestamppair<v>,k>Literal20;
K kVar7 = kLiteral21;
ObjectTimestampPair<V> objecttimestamppair<v>Var22 = objecttimestamppair<v>Literal23;
ObjectQueue objectqueueVar24 = objectqueueLiteral25;
final CursorableLinkedList<ObjectTimestampPair<V>> cursorablelinkedlist<objecttimestamppair<v>>Var9 = cursorablelinkedlist<objecttimestamppair<v>>Literal26;
cursorablelinkedlist<objecttimestamppair<v>>Var9.remove(objecttimestamppair<v>Var22);
if (map<k,list<objecttimestamppair<v>>>Var1.containsKey(kVar7)) {
map<k,list<objecttimestamppair<v>>>Var1.get(kVar7).add(objecttimestamppair<v>Var22);
} else {
List<ObjectTimestampPair<V>> list<objecttimestamppair<v>>Var27 = list<objecttimestamppair<v>>Literal28;
list<objecttimestamppair<v>>Var27.add(objecttimestamppair<v>Var22);
map<k,list<objecttimestamppair<v>>>Var1.put(kVar7, list<objecttimestamppair<v>>Var27);
}
objectqueueVar24.incrementInternalProcessingCount();
_totalIdle--;
intVar15--;
}
}
destroy(map<k,list<objecttimestamppair<v>>>Var1, _factory);
}"
16578,PERFORMANCE,WMI_WRONG_MAP_ITERATOR,TP,pool,443,"final ObjectDeque<T> deque = poolMap.get(k);
","private boolean hasBorrowWaiters() {
for (final K k : poolMap.keySet()) {
final ObjectDeque<T> deque = poolMap.get(k);
if (deque != null) {
final LinkedBlockingDeque<PooledObject<T>> pool = deque.getIdleObjects();
if (pool.hasTakeWaiters()) {
return true;
}
}
}
return false;
}","private boolean hasBorrowWaiters() {
for (final K kVar1 : poolMap.keySet()) {
final ObjectDeque<T> objectdeque<t>Var2 = objectdeque<t>Literal3;
if (objectdeque<t>Var2 != null) {
final LinkedBlockingDeque<PooledObject<T>> linkedblockingdeque<pooledobject<t>>Var4 = linkedblockingdeque<pooledobject<t>>Literal5;
if (linkedblockingdeque<pooledobject<t>>Var4.hasTakeWaiters()) {
return true;
}
}
}
return false;
}"
16586,Multithreaded correctness,IS2_INCONSISTENT_SYNC,TP,pool,451,private boolean _testOnReturn = DEFAULT_TEST_ON_RETURN;,private boolean _testOnReturn = DEFAULT_TEST_ON_RETURN;,private boolean booleanVar1 = booleanLiteral2;
16632,Multithreaded correctness,IS2_INCONSISTENT_SYNC,TP,pool,497,private boolean _testOnBorrow = DEFAULT_TEST_ON_BORROW;,private boolean _testOnBorrow = DEFAULT_TEST_ON_BORROW;,private boolean booleanVar1 = booleanLiteral2;
16633,Multithreaded correctness,IS2_INCONSISTENT_SYNC,TP,pool,498,private PoolableObjectFactory _factory = null;,private PoolableObjectFactory _factory = null;,private PoolableObjectFactory poolableobjectfactoryVar1 = poolableobjectfactoryLiteral2;
16634,CORRECTNESS,RV_RETURN_VALUE_IGNORED,TP,pool,499,"writeLock.tryLock();
","@Override
public boolean validateObject(final T obj) {
writeLock.tryLock();
try {
return factory.validateObject(obj);
} finally {
writeLock.unlock();
}
}","@Override
public boolean validateObject(final T obj) {
writeLock.tryLock();
try {
return factory.validateObject(obj);
} finally {
writeLock.unlock();
}
}"
16640,DODGY_CODE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,TP,pool,505,"if (p == null && objectDeque != null) {
","public T borrowObject(K key, long borrowMaxWaitMillis) throws Exception {
assertOpen();
PooledObject<T> p = null;
boolean blockWhenExhausted = getBlockWhenExhausted();
boolean create;
long waitTime = 0;
ObjectDeque<T> objectDeque = register(key);
try {
while (p == null) {
create = false;
if (blockWhenExhausted) {
if (objectDeque != null) {
p = objectDeque.getIdleObjects().pollFirst();
}
if (p == null) {
create = true;
p = create(key);
}
if (p == null && objectDeque != null) {
if (borrowMaxWaitMillis < 0) {
p = objectDeque.getIdleObjects().takeFirst();
} else {
waitTime = System.currentTimeMillis();
p = objectDeque.getIdleObjects().pollFirst(borrowMaxWaitMillis, TimeUnit.MILLISECONDS);
waitTime = System.currentTimeMillis() - waitTime;
}
}
if (p == null) {
throw new NoSuchElementException(""Timeout waiting for idle object"");
}
if (!p.allocate()) {
p = null;
}
} else {
if (objectDeque != null) {
p = objectDeque.getIdleObjects().pollFirst();
}
if (p == null) {
create = true;
p = create(key);
}
if (p == null) {
throw new NoSuchElementException(""Pool exhausted"");
}
if (!p.allocate()) {
p = null;
}
}
if (p != null) {
try {
factory.activateObject(key, p.getObject());
} catch (Exception e) {
try {
destroy(key, p, true);
} catch (Exception e1) {
}
p = null;
if (create) {
NoSuchElementException nsee = new NoSuchElementException(""Unable to activate object"");
nsee.initCause(e);
throw nsee;
}
}
if (p != null && getTestOnBorrow()) {
boolean validate = false;
Throwable validationThrowable = null;
try {
validate = factory.validateObject(key, p.getObject());
} catch (Throwable t) {
PoolUtils.checkRethrow(t);
validationThrowable = t;
}
if (!validate) {
try {
destroy(key, p, true);
destroyedByBorrowValidationCount.incrementAndGet();
} catch (Exception e) {
}
p = null;
if (create) {
NoSuchElementException nsee = new NoSuchElementException(""Unable to validate object"");
nsee.initCause(validationThrowable);
throw nsee;
}
}
}
}
}
} finally {
deregister(key);
}
updateStatsBorrow(p, waitTime);
return p.getObject();
}","public T borrowObject(K key, long borrowMaxWaitMillis) throws Exception {
assertOpen();
PooledObject<T> pooledobject<t>Var1 = pooledobject<t>Literal2;
boolean booleanVar3 = booleanLiteral4;
boolean booleanVar5;
long longVar6 = longLiteral7;
ObjectDeque<T> objectdeque<t>Var8 = objectdeque<t>Literal9;
try {
while (pooledobject<t>Var1 == null) {
booleanVar5 = false;
if (booleanVar3) {
if (objectdeque<t>Var8 != null) {
pooledobject<t>Var1 = objectdeque<t>Var8.getIdleObjects().pollFirst();
}
if (pooledobject<t>Var1 == null) {
booleanVar5 = true;
pooledobject<t>Var1 = create(key);
}
if (pooledobject<t>Var1 == null && objectdeque<t>Var8 != null) {
if (borrowMaxWaitMillis < 0) {
pooledobject<t>Var1 = objectdeque<t>Var8.getIdleObjects().takeFirst();
} else {
longVar6 = System.currentTimeMillis();
pooledobject<t>Var1 = objectdeque<t>Var8.getIdleObjects().pollFirst(borrowMaxWaitMillis, TimeUnit.MILLISECONDS);
longVar6 = System.currentTimeMillis() - longVar6;
}
}
if (pooledobject<t>Var1 == null) {
throw new NoSuchElementException(""Timeout waiting for idle object"");
}
if (!pooledobject<t>Var1.allocate()) {
pooledobject<t>Var1 = null;
}
} else {
if (objectdeque<t>Var8 != null) {
pooledobject<t>Var1 = objectdeque<t>Var8.getIdleObjects().pollFirst();
}
if (pooledobject<t>Var1 == null) {
booleanVar5 = true;
pooledobject<t>Var1 = create(key);
}
if (pooledobject<t>Var1 == null) {
throw new NoSuchElementException(""Pool exhausted"");
}
if (!pooledobject<t>Var1.allocate()) {
pooledobject<t>Var1 = null;
}
}
if (pooledobject<t>Var1 != null) {
try {
factory.activateObject(key, pooledobject<t>Var1.getObject());
} catch (Exception e) {
try {
destroy(key, pooledobject<t>Var1, true);
} catch (Exception e1) {
}
pooledobject<t>Var1 = null;
if (booleanVar5) {
NoSuchElementException nosuchelementexceptionVar10 = nosuchelementexceptionLiteral11;
nosuchelementexceptionVar10.initCause(e);
throw nosuchelementexceptionVar10;
}
}
if (pooledobject<t>Var1 != null && getTestOnBorrow()) {
boolean booleanVar12 = booleanLiteral13;
Throwable throwableVar14 = pooledobject<t>Literal2;
try {
booleanVar12 = factory.validateObject(key, pooledobject<t>Var1.getObject());
} catch (Throwable t) {
PoolUtils.checkRethrow(t);
throwableVar14 = t;
}
if (!booleanVar12) {
try {
destroy(key, pooledobject<t>Var1, true);
destroyedByBorrowValidationCount.incrementAndGet();
} catch (Exception e) {
}
pooledobject<t>Var1 = null;
if (booleanVar5) {
NoSuchElementException nosuchelementexceptionVar10 = nosuchelementexceptionLiteral15;
nosuchelementexceptionVar10.initCause(throwableVar14);
throw nosuchelementexceptionVar10;
}
}
}
}
}
} finally {
deregister(key);
}
updateStatsBorrow(pooledobject<t>Var1, longVar6);
return pooledobject<t>Var1.getObject();
}"
16644,Multithreaded correctness,VO_VOLATILE_INCREMENT,TP,pool,509,"_numActive--;
","@Override
public synchronized void invalidateObject(T obj) throws Exception {
_numActive--;
if (null != _factory) {
_factory.destroyObject(obj);
}
notifyAll();
}","@Override
public synchronized void invalidateObject(T obj) throws Exception {
_numActive--;
if (null != _factory) {
_factory.destroyObject(obj);
}
notifyAll();
}"
16652,PERFORMANCE,DM_NUMBER_CTOR,TP,pool,517,"_activeCount.put(key, new Integer(active.intValue() - 1));
","private void decrementActiveCount(K key) {
_totActive--;
Integer active = _activeCount.get(key);
if (null == active) {
} else if (active.intValue() <= 1) {
_activeCount.remove(key);
} else {
_activeCount.put(key, new Integer(active.intValue() - 1));
}
}","private void decrementActiveCount(K key) {
_totActive--;
Integer integerVar1 = integerLiteral2;
if (null == integerVar1) {
} else if (integerVar1.intValue() <= 1) {
_activeCount.remove(key);
} else {
_activeCount.put(key, new Integer(integerVar1.intValue() - 1));
}
}"
16659,Multithreaded correctness,IS2_INCONSISTENT_SYNC,TP,pool,524,private byte _whenExhaustedAction = DEFAULT_WHEN_EXHAUSTED_ACTION;,private byte _whenExhaustedAction = DEFAULT_WHEN_EXHAUSTED_ACTION;,private byte byteVar1 = byteLiteral2;
16680,PERFORMANCE,WMI_WRONG_MAP_ITERATOR,TP,pool,545,"buf.append(""\t"").append(key).append("" "").append(_poolMap.get(key)).append(""\n"");
","synchronized String debugInfo() {
StringBuffer buf = new StringBuffer();
buf.append(""Active: "").append(getNumActive()).append(""\n"");
buf.append(""Idle: "").append(getNumIdle()).append(""\n"");
for (K key : _poolMap.keySet()) {
buf.append(""\t"").append(key).append("" "").append(_poolMap.get(key)).append(""\n"");
}
return buf.toString();
}","synchronized String debugInfo() {
StringBuffer stringbufferVar1 = stringbufferLiteral2;
stringbufferVar1.append(""Active: "").append(getNumActive()).append(""\n"");
stringbufferVar1.append(""Idle: "").append(getNumIdle()).append(""\n"");
for (K kVar3 : _poolMap.keySet()) {
stringbufferVar1.append(""\t"").append(kVar3).append("" "").append(_poolMap.get(kVar3)).append(""\n"");
}
return stringbufferVar1.toString();
}"
16685,BAD_PRACTICE,DE_MIGHT_IGNORE,TP,pool,550,"} catch (Exception ex2) {
","@Override
public void addObject(K key) throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
V obj = _factory.makeObject(key);
try {
assertOpen();
addObjectToPool(key, obj, false);
} catch (IllegalStateException ex) {
try {
_factory.destroyObject(key, obj);
} catch (Exception ex2) {
}
throw ex;
}
}","@Override
public void addObject(K key) throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
V vVar1 = vLiteral2;
try {
assertOpen();
addObjectToPool(key, vVar1, false);
} catch (IllegalStateException ex) {
try {
_factory.destroyObject(key, vVar1);
} catch (Exception ex2) {
}
throw ex;
}
}"
16695,Multithreaded correctness,IS2_INCONSISTENT_SYNC,TP,pool,560,private boolean _testOnReturn = DEFAULT_TEST_ON_RETURN;,private boolean _testOnReturn = DEFAULT_TEST_ON_RETURN;,private boolean booleanVar1 = booleanLiteral2;
16710,BAD_PRACTICE,EQ_COMPARETO_USE_OBJECT_EQUALS,FP,pool,575,"public class DefaultPooledObject<T> implements PooledObject<T> {
","@Override
public int compareTo(PooledObject<T> other) {
final long lastActiveDiff = this.getLastReturnTime() - other.getLastReturnTime();
if (lastActiveDiff == 0) {
return System.identityHashCode(this) - System.identityHashCode(other);
}
return (int) Math.min(Math.max(lastActiveDiff, Integer.MIN_VALUE), Integer.MAX_VALUE);
}","@Override
public int compareTo(PooledObject<T> other) {
final long longVar1 = longLiteral2;
if (longVar1 == 0) {
return System.identityHashCode(this) - System.identityHashCode(other);
}
return (int) Math.min(Math.max(longVar1, Integer.MIN_VALUE), Integer.MAX_VALUE);
}"
16725,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,590,"} catch (Exception e) {
","@Override
public void invalidateObject(final K key, final V obj) {
try {
keyedPool.invalidateObject(key, obj);
} catch (Exception e) {
}
}","@Override
public void invalidateObject(final K key, final V obj) {
try {
keyedPool.invalidateObject(key, obj);
} catch (Exception e) {
}
}"
16727,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,592,"} catch (Exception e) {
","@Override
public void close() {
try {
pool.close();
} catch (Exception e) {
}
}","@Override
public void close() {
try {
pool.close();
} catch (Exception e) {
}
}"
16735,PERFORMANCE,WMI_WRONG_MAP_ITERATOR,FP,pool,600,"ObjectDeque<T> queue = poolMap.get(key);
","@Override
public Map<String, Integer> getNumWaitersByKey() {
Map<String, Integer> result = new HashMap<String, Integer>();
for (K key : poolMap.keySet()) {
ObjectDeque<T> queue = poolMap.get(key);
if (queue != null) {
if (getBlockWhenExhausted()) {
result.put(key.toString(), Integer.valueOf(queue.getIdleObjects().getTakeQueueLength()));
} else {
result.put(key.toString(), Integer.valueOf(0));
}
}
}
return result;
}","@Override
public Map<String, Integer> getNumWaitersByKey() {
Map<String, Integer> map<string,integer>Var1 = map<string,integer>Literal2;
for (K kVar3 : poolMap.keySet()) {
ObjectDeque<T> objectdeque<t>Var4 = objectdeque<t>Literal5;
if (objectdeque<t>Var4 != null) {
if (getBlockWhenExhausted()) {
map<string,integer>Var1.put(kVar3.toString(), Integer.valueOf(objectdeque<t>Var4.getIdleObjects().getTakeQueueLength()));
} else {
map<string,integer>Var1.put(kVar3.toString(), Integer.valueOf(0));
}
}
}
return map<string,integer>Var1;
}"
16743,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,608,"} catch (Exception e) {
","public void invalidateObject(final K key, final V obj) {
try {
pool.invalidateObject(obj);
} catch (Exception e) {
}
}","public void invalidateObject(final K key, final V obj) {
try {
pool.invalidateObject(obj);
} catch (Exception e) {
}
}"
16762,DODGY_CODE,REC_CATCH_EXCEPTION,FP,pool,627,"} catch (Exception e) {
","@Override
public void run() {
boolean success = false;
try {
if (keyedPool.getNumIdle(key) < minIdle) {
keyedPool.addObject(key);
}
success = true;
} catch (Exception e) {
cancel();
} finally {
if (!success) {
cancel();
}
}
}","@Override
public void run() {
boolean booleanVar1 = booleanLiteral2;
try {
if (keyedPool.getNumIdle(key) < minIdle) {
keyedPool.addObject(key);
}
booleanVar1 = true;
} catch (Exception e) {
cancel();
} finally {
if (!booleanVar1) {
cancel();
}
}
}"
16769,BAD_PRACTICE,EQ_COMPARETO_USE_OBJECT_EQUALS,FP,pool,634,"final long tstampdiff = this.tstamp - other.tstamp;
if (tstampdiff == 0) {
return System.identityHashCode(this) - System.identityHashCode(other);
} else {
return (int)Math.min(Math.max(tstampdiff, Integer.MIN_VALUE), Integer.MAX_VALUE);
","public int compareTo(ObjectTimestampPair<T> other) {
final long tstampdiff = this.tstamp - other.tstamp;
if (tstampdiff == 0) {
return System.identityHashCode(this) - System.identityHashCode(other);
} else {
return (int) Math.min(Math.max(tstampdiff, Integer.MIN_VALUE), Integer.MAX_VALUE);
}
}","public int compareTo(ObjectTimestampPair<T> other) {
final long longVar1 = longLiteral2;
if (longVar1 == 0) {
return System.identityHashCode(this) - System.identityHashCode(other);
} else {
return (int) Math.min(Math.max(longVar1, Integer.MIN_VALUE), Integer.MAX_VALUE);
}
}"
16782,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,647,"} catch (Exception e2) {
","@Override
public void returnObject(T obj) throws Exception {
try {
addObjectToPool(obj, true);
} catch (Exception e) {
if (_factory != null) {
try {
_factory.destroyObject(obj);
} catch (Exception e2) {
}
// TODO: Correctness here depends on control in addObjectToPool.
synchronized (this) {
_numActive--;
}
allocate();
}
}
}","@Override
public void returnObject(T obj) throws Exception {
try {
addObjectToPool(obj, true);
} catch (Exception e) {
if (_factory != null) {
try {
_factory.destroyObject(obj);
} catch (Exception e2) {
}
// TODO: Correctness here depends on control in addObjectToPool.
synchronized (this) {
_numActive--;
}
allocate();
}
}
}"
16794,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,659,"} catch(Exception e) {
","@Override
public synchronized void addObject() throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
T obj = _factory.makeObject();
boolean success = true;
if (!_factory.validateObject(obj)) {
success = false;
} else {
_factory.passivateObject(obj);
}
boolean shouldDestroy = !success;
if (success) {
_pool.add(new SoftReference<T>(obj, refQueue));
notifyAll();
}
if (shouldDestroy) {
try {
_factory.destroyObject(obj);
} catch (Exception e) {
}
}
}","@Override
public synchronized void addObject() throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
T tVar1 = tLiteral2;
boolean booleanVar3 = booleanLiteral4;
if (!_factory.validateObject(tVar1)) {
booleanVar3 = false;
} else {
_factory.passivateObject(tVar1);
}
boolean booleanVar5 = booleanLiteral6;
if (booleanVar3) {
_pool.add(new SoftReference<T>(tVar1, refQueue));
notifyAll();
}
if (booleanVar5) {
try {
_factory.destroyObject(tVar1);
} catch (Exception e) {
}
}
}"
16806,DODGY_CODE,RI_REDUNDANT_INTERFACES,FP,pool,671,"this(null,DEFAULT_MAX_SLEEPING,DEFAULT_INIT_SLEEPING_CAPACITY);
}
@Deprecated
public StackObjectPool(int maxIdle) {
this(null,maxIdle,DEFAULT_INIT_SLEEPING_CAPACITY);
}
@Deprecated
public StackObjectPool(int maxIdle, int initIdleCapacity) {
this(null,maxIdle,initIdleCapacity);
}
public StackObjectPool(PoolableObjectFactory<T> factory) {
this(factory,DEFAULT_MAX_SLEEPING,DEFAULT_INIT_SLEEPING_CAPACITY);
}
public StackObjectPool(PoolableObjectFactory<T> factory, int maxIdle) {
this(factory,maxIdle,DEFAULT_INIT_SLEEPING_CAPACITY);
}
public StackObjectPool(PoolableObjectFactory<T> factory, int maxIdle, int initIdleCapacity) {
_factory = factory;
_maxSleeping = (maxIdle < 0 ? DEFAULT_MAX_SLEEPING : maxIdle);
int initcapacity = (initIdleCapacity < 1 ? DEFAULT_INIT_SLEEPING_CAPACITY : initIdleCapacity);
_pool = new Stack<T>();
_pool.ensureCapacity( initcapacity > _maxSleeping ? _maxSleeping : initcapacity);
}
@Override
public synchronized T borrowObject() throws Exception {
assertOpen();
T obj = null;
boolean newlyCreated = false;
while (null == obj) {
if (!_pool.empty()) {
obj = _pool.pop();
} else {
if(null == _factory) {
throw new NoSuchElementException();
} else {
obj = _factory.makeObject();
newlyCreated = true;
if (obj == null) {
throw new NoSuchElementException(""PoolableObjectFactory.makeObject() returned null."");
}
}
}
if (null != _factory && null != obj) {
try {
_factory.activateObject(obj);
if (!_factory.validateObject(obj)) {
throw new Exception(""ValidateObject failed"");
}
} catch (Throwable t) {
PoolUtils.checkRethrow(t);
try {
_factory.destroyObject(obj);
} catch (Throwable t2) {
PoolUtils.checkRethrow(t2);
} finally {
obj = null;
}
if (newlyCreated) {
throw new NoSuchElementException(
""Could not create a validated object, cause: "" +
t.getMessage());
}
}
}
}
_numActive++;
return obj;
}
@Override
public synchronized void returnObject(T obj) throws Exception {
boolean success = !isClosed();
if(null != _factory) {
if(!_factory.validateObject(obj)) {
success = false;
} else {
try {
_factory.passivateObject(obj);
} catch(Exception e) {
success = false;
}
}
}
boolean shouldDestroy = !success;
_numActive--;
if (success) {
T toBeDestroyed = null;
if(_pool.size() >= _maxSleeping) {
shouldDestroy = true;
toBeDestroyed = _pool.remove(0); 
}
_pool.push(obj);
obj = toBeDestroyed; 
}
notifyAll(); 
if(shouldDestroy) { 
try {
_factory.destroyObject(obj);
} catch(Exception e) {
}
}
}
@Override
public synchronized void invalidateObject(T obj) throws Exception {
_numActive--;
if (null != _factory) {
_factory.destroyObject(obj);
}
notifyAll(); 
}
@Override
public synchronized int getNumIdle() {
return _pool.size();
}
@Override
public synchronized int getNumActive() {
return _numActive;
}
@Override
public synchronized void clear() {
if(null != _factory) {
Iterator<T> it = _pool.iterator();
while(it.hasNext()) {
try {
_factory.destroyObject(it.next());
} catch(Exception e) {
}
}
}
_pool.clear();
}
@Override
public void close() throws Exception {
super.close();
clear();
}
@Override
public synchronized void addObject() throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
T obj = _factory.makeObject();
boolean success = true;
if(!_factory.validateObject(obj)) {
success = false;
} else {
_factory.passivateObject(obj);
}
boolean shouldDestroy = !success;
if (success) {
T toBeDestroyed = null;
if(_pool.size() >= _maxSleeping) {
shouldDestroy = true;
toBeDestroyed = _pool.remove(0); 
}
_pool.push(obj);
obj = toBeDestroyed; 
}
notifyAll(); 
if(shouldDestroy) { 
try {
_factory.destroyObject(obj);
} catch(Exception e) {
}
}
}
@Deprecated
@Override
public synchronized void setFactory(PoolableObjectFactory<T> factory) throws IllegalStateException {
assertOpen();
if(0 < getNumActive()) {
throw new IllegalStateException(""Objects are already active"");
} else {
clear();
_factory = factory;
}
}
protected static final int DEFAULT_MAX_SLEEPING  = 8;
protected static final int DEFAULT_INIT_SLEEPING_CAPACITY = 4;
@Deprecated
protected Stack<T> _pool = null;
@Deprecated
protected PoolableObjectFactory<T> _factory = null;
@Deprecated
protected int _maxSleeping = DEFAULT_MAX_SLEEPING;
@Deprecated
protected int _numActive = 0;
public synchronized PoolableObjectFactory<T> getFactory() {
return _factory;
}
public int getMaxSleeping() {
return _maxSleeping;
","@Override
public synchronized void returnObject(T obj) throws Exception {
boolean success = !isClosed();
if (null != _factory) {
if (!_factory.validateObject(obj)) {
success = false;
} else {
try {
_factory.passivateObject(obj);
} catch (Exception e) {
success = false;
}
}
}
boolean shouldDestroy = !success;
_numActive--;
if (success) {
T toBeDestroyed = null;
if (_pool.size() >= _maxSleeping) {
shouldDestroy = true;
toBeDestroyed = _pool.remove(0);
}
_pool.push(obj);
obj = toBeDestroyed;
}
notifyAll();
if (shouldDestroy) {
try {
_factory.destroyObject(obj);
} catch (Exception e) {
}
}
}","@Override
public synchronized void returnObject(T obj) throws Exception {
boolean booleanVar1 = booleanLiteral2;
if (null != _factory) {
if (!_factory.validateObject(obj)) {
booleanVar1 = false;
} else {
try {
_factory.passivateObject(obj);
} catch (Exception e) {
booleanVar1 = false;
}
}
}
boolean booleanVar3 = booleanLiteral4;
_numActive--;
if (booleanVar1) {
T tVar5 = tLiteral6;
if (_pool.size() >= _maxSleeping) {
booleanVar3 = true;
tVar5 = _pool.remove(0);
}
_pool.push(obj);
obj = tVar5;
}
notifyAll();
if (booleanVar3) {
try {
_factory.destroyObject(obj);
} catch (Exception e) {
}
}
}"
16889,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,754,"} catch (Exception e) {
","public void returnObject(final Object key, final Object obj) {
try {
pool.returnObject(obj);
} catch (Exception e) {
}
}","public void returnObject(final Object key, final Object obj) {
try {
pool.returnObject(obj);
} catch (Exception e) {
}
}"
16918,PERFORMANCE,WMI_WRONG_MAP_ITERATOR,FP,pool,783,"ObjectQueue pool = (ObjectQueue)_poolMap.get(key);
","public void setFactory(KeyedPoolableObjectFactory factory) throws IllegalStateException {
Map toDestroy = new HashMap();
synchronized (this) {
assertOpen();
if (0 < getNumActive()) {
throw new IllegalStateException(""Objects are already active"");
} else {
for (Iterator it = _poolMap.keySet().iterator(); it.hasNext(); ) {
Object key = it.next();
ObjectQueue pool = (ObjectQueue) _poolMap.get(key);
if (pool != null) {
List objects = new ArrayList();
objects.addAll(pool.queue);
toDestroy.put(key, objects);
it.remove();
_poolList.remove(key);
_totalIdle = _totalIdle - pool.queue.size();
_totalInternalProcessing = _totalInternalProcessing + pool.queue.size();
pool.queue.clear();
}
}
_factory = factory;
}
}
destroy(toDestroy);
}","public void setFactory(KeyedPoolableObjectFactory factory) throws IllegalStateException {
Map mapVar1 = mapLiteral2;
synchronized (this) {
assertOpen();
if (0 < getNumActive()) {
throw new IllegalStateException(""Objects are already active"");
} else {
for (Iterator iteratorVar11 = iteratorLiteral12; iteratorVar3.hasNext(); ) {
Object objectVar5 = objectLiteral6;
ObjectQueue objectqueueVar7 = objectqueueLiteral8;
if (objectqueueVar7 != null) {
List listVar9 = listLiteral10;
listVar9.addAll(objectqueueVar7.queue);
mapVar1.put(objectVar5, listVar9);
iteratorVar3.remove();
_poolList.remove(objectVar5);
_totalIdle = _totalIdle - objectqueueVar7.queue.size();
_totalInternalProcessing = _totalInternalProcessing + objectqueueVar7.queue.size();
objectqueueVar7.queue.clear();
}
}
_factory = factory;
}
}
destroy(mapVar1);
}"
16919,DODGY_CODE,RI_REDUNDANT_INTERFACES,FP,pool,784,"public class GenericKeyedObjectPool extends BaseKeyedObjectPool implements KeyedObjectPool {
public static final byte WHEN_EXHAUSTED_FAIL   = 0;
public static final byte WHEN_EXHAUSTED_BLOCK  = 1;
public static final byte WHEN_EXHAUSTED_GROW   = 2;
public static final int DEFAULT_MAX_IDLE  = 8;
public static final int DEFAULT_MAX_ACTIVE  = 8;
public static final int DEFAULT_MAX_TOTAL  = -1;
public static final byte DEFAULT_WHEN_EXHAUSTED_ACTION = WHEN_EXHAUSTED_BLOCK;
public static final long DEFAULT_MAX_WAIT = -1L;
public static final boolean DEFAULT_TEST_ON_BORROW = false;
public static final boolean DEFAULT_TEST_ON_RETURN = false;
public static final boolean DEFAULT_TEST_WHILE_IDLE = false;
public static final long DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS = -1L;
public static final int DEFAULT_NUM_TESTS_PER_EVICTION_RUN = 3;
public static final long DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS = 1000L * 60L * 30L;
public static final int DEFAULT_MIN_IDLE = 0;
public static final boolean DEFAULT_LIFO = true;
public GenericKeyedObjectPool() {
this(null, DEFAULT_MAX_ACTIVE, DEFAULT_WHEN_EXHAUSTED_ACTION, DEFAULT_MAX_WAIT, DEFAULT_MAX_IDLE,
DEFAULT_TEST_ON_BORROW, DEFAULT_TEST_ON_RETURN, DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS,
DEFAULT_NUM_TESTS_PER_EVICTION_RUN, DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS, DEFAULT_TEST_WHILE_IDLE);
}
public GenericKeyedObjectPool(KeyedPoolableObjectFactory factory) {
this(factory, DEFAULT_MAX_ACTIVE, DEFAULT_WHEN_EXHAUSTED_ACTION, DEFAULT_MAX_WAIT, DEFAULT_MAX_IDLE,
DEFAULT_TEST_ON_BORROW, DEFAULT_TEST_ON_RETURN, DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS,
DEFAULT_NUM_TESTS_PER_EVICTION_RUN, DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS, DEFAULT_TEST_WHILE_IDLE);
}
public GenericKeyedObjectPool(KeyedPoolableObjectFactory factory, GenericKeyedObjectPool.Config config) {
this(factory, config.maxActive, config.whenExhaustedAction, config.maxWait, config.maxIdle, config.maxTotal,
config.minIdle, config.testOnBorrow, config.testOnReturn, config.timeBetweenEvictionRunsMillis,
config.numTestsPerEvictionRun, config.minEvictableIdleTimeMillis, config.testWhileIdle, config.lifo);
}
public GenericKeyedObjectPool(KeyedPoolableObjectFactory factory, int maxActive) {
this(factory,maxActive, DEFAULT_WHEN_EXHAUSTED_ACTION, DEFAULT_MAX_WAIT, DEFAULT_MAX_IDLE,
DEFAULT_TEST_ON_BORROW, DEFAULT_TEST_ON_RETURN, DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS,
DEFAULT_NUM_TESTS_PER_EVICTION_RUN, DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS, DEFAULT_TEST_WHILE_IDLE);
}
public GenericKeyedObjectPool(KeyedPoolableObjectFactory factory, int maxActive, byte whenExhaustedAction,
long maxWait) {
this(factory, maxActive, whenExhaustedAction, maxWait, DEFAULT_MAX_IDLE, DEFAULT_TEST_ON_BORROW,
DEFAULT_TEST_ON_RETURN, DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS, DEFAULT_NUM_TESTS_PER_EVICTION_RUN,
DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS, DEFAULT_TEST_WHILE_IDLE);
}
public GenericKeyedObjectPool(KeyedPoolableObjectFactory factory, int maxActive, byte whenExhaustedAction,
long maxWait, boolean testOnBorrow, boolean testOnReturn) {
this(factory, maxActive, whenExhaustedAction, maxWait, DEFAULT_MAX_IDLE,testOnBorrow,testOnReturn,
DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS, DEFAULT_NUM_TESTS_PER_EVICTION_RUN,
DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS, DEFAULT_TEST_WHILE_IDLE);
}
public GenericKeyedObjectPool(KeyedPoolableObjectFactory factory, int maxActive, byte whenExhaustedAction,
long maxWait, int maxIdle) {
this(factory, maxActive, whenExhaustedAction, maxWait, maxIdle, DEFAULT_TEST_ON_BORROW, DEFAULT_TEST_ON_RETURN,
DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS, DEFAULT_NUM_TESTS_PER_EVICTION_RUN,
DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS, DEFAULT_TEST_WHILE_IDLE);
}
public GenericKeyedObjectPool(KeyedPoolableObjectFactory factory, int maxActive, byte whenExhaustedAction,
long maxWait, int maxIdle, boolean testOnBorrow, boolean testOnReturn) {
this(factory, maxActive, whenExhaustedAction, maxWait, maxIdle, testOnBorrow, testOnReturn,
DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS, DEFAULT_NUM_TESTS_PER_EVICTION_RUN,
DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS, DEFAULT_TEST_WHILE_IDLE);
}
public GenericKeyedObjectPool(KeyedPoolableObjectFactory factory, int maxActive, byte whenExhaustedAction,
long maxWait, int maxIdle, boolean testOnBorrow, boolean testOnReturn, long timeBetweenEvictionRunsMillis,
int numTestsPerEvictionRun, long minEvictableIdleTimeMillis, boolean testWhileIdle) {
this(factory, maxActive, whenExhaustedAction, maxWait, maxIdle, GenericKeyedObjectPool.DEFAULT_MAX_TOTAL,
testOnBorrow, testOnReturn, timeBetweenEvictionRunsMillis, numTestsPerEvictionRun,
minEvictableIdleTimeMillis, testWhileIdle);
}
public GenericKeyedObjectPool(KeyedPoolableObjectFactory factory, int maxActive, byte whenExhaustedAction,
long maxWait, int maxIdle, int maxTotal, boolean testOnBorrow, boolean testOnReturn,
long timeBetweenEvictionRunsMillis, int numTestsPerEvictionRun, long minEvictableIdleTimeMillis,
boolean testWhileIdle) {
this(factory, maxActive, whenExhaustedAction, maxWait, maxIdle, maxTotal,
GenericKeyedObjectPool.DEFAULT_MIN_IDLE, testOnBorrow, testOnReturn, timeBetweenEvictionRunsMillis,
numTestsPerEvictionRun, minEvictableIdleTimeMillis, testWhileIdle);
}
public GenericKeyedObjectPool(KeyedPoolableObjectFactory factory, int maxActive, byte whenExhaustedAction,
long maxWait, int maxIdle, int maxTotal, int minIdle, boolean testOnBorrow, boolean testOnReturn,
long timeBetweenEvictionRunsMillis, int numTestsPerEvictionRun, long minEvictableIdleTimeMillis,
boolean testWhileIdle) {
this(factory, maxActive, whenExhaustedAction, maxWait, maxIdle, maxTotal, minIdle, testOnBorrow, testOnReturn,
timeBetweenEvictionRunsMillis, numTestsPerEvictionRun, minEvictableIdleTimeMillis, testWhileIdle,
DEFAULT_LIFO);
}
public GenericKeyedObjectPool(KeyedPoolableObjectFactory factory, int maxActive, byte whenExhaustedAction,
long maxWait, int maxIdle, int maxTotal, int minIdle, boolean testOnBorrow, boolean testOnReturn,
long timeBetweenEvictionRunsMillis, int numTestsPerEvictionRun, long minEvictableIdleTimeMillis,
boolean testWhileIdle, boolean lifo) {
_factory = factory;
_maxActive = maxActive;
_lifo = lifo;
switch (whenExhaustedAction) {
case WHEN_EXHAUSTED_BLOCK:
case WHEN_EXHAUSTED_FAIL:
case WHEN_EXHAUSTED_GROW:
_whenExhaustedAction = whenExhaustedAction;
break;
default:
throw new IllegalArgumentException(""whenExhaustedAction "" + whenExhaustedAction + "" not recognized."");
}
_maxWait = maxWait;
_maxIdle = maxIdle;
_maxTotal = maxTotal;
_minIdle = minIdle;
_testOnBorrow = testOnBorrow;
_testOnReturn = testOnReturn;
_timeBetweenEvictionRunsMillis = timeBetweenEvictionRunsMillis;
_numTestsPerEvictionRun = numTestsPerEvictionRun;
_minEvictableIdleTimeMillis = minEvictableIdleTimeMillis;
_testWhileIdle = testWhileIdle;
_poolMap = new HashMap();
_poolList = new CursorableLinkedList();
startEvictor(_timeBetweenEvictionRunsMillis);
}
public synchronized int getMaxActive() {
return _maxActive;
}
public synchronized void setMaxActive(int maxActive) {
_maxActive = maxActive;
allocate();
}
public synchronized int getMaxTotal() {
return _maxTotal;
}
public synchronized void setMaxTotal(int maxTotal) {
_maxTotal = maxTotal;
allocate();
}
public synchronized byte getWhenExhaustedAction() {
return _whenExhaustedAction;
}
public synchronized void setWhenExhaustedAction(byte whenExhaustedAction) {
switch(whenExhaustedAction) {
case WHEN_EXHAUSTED_BLOCK:
case WHEN_EXHAUSTED_FAIL:
case WHEN_EXHAUSTED_GROW:
_whenExhaustedAction = whenExhaustedAction;
allocate();
break;
default:
throw new IllegalArgumentException(""whenExhaustedAction "" + whenExhaustedAction + "" not recognized."");
}
}
public synchronized long getMaxWait() {
return _maxWait;
}
public synchronized void setMaxWait(long maxWait) {
_maxWait = maxWait;
}
public synchronized int getMaxIdle() {
return _maxIdle;
}
public synchronized void setMaxIdle(int maxIdle) {
_maxIdle = maxIdle;
allocate();
}
public synchronized void setMinIdle(int poolSize) {
_minIdle = poolSize;
}
public synchronized int getMinIdle() {
return _minIdle;
}
public boolean getTestOnBorrow() {
return _testOnBorrow;
}
public void setTestOnBorrow(boolean testOnBorrow) {
_testOnBorrow = testOnBorrow;
}
public boolean getTestOnReturn() {
return _testOnReturn;
}
public void setTestOnReturn(boolean testOnReturn) {
_testOnReturn = testOnReturn;
}
public synchronized long getTimeBetweenEvictionRunsMillis() {
return _timeBetweenEvictionRunsMillis;
}
public synchronized void setTimeBetweenEvictionRunsMillis(long timeBetweenEvictionRunsMillis) {
_timeBetweenEvictionRunsMillis = timeBetweenEvictionRunsMillis;
startEvictor(_timeBetweenEvictionRunsMillis);
}
public synchronized int getNumTestsPerEvictionRun() {
return _numTestsPerEvictionRun;
}
public synchronized void setNumTestsPerEvictionRun(int numTestsPerEvictionRun) {
_numTestsPerEvictionRun = numTestsPerEvictionRun;
}
public synchronized long getMinEvictableIdleTimeMillis() {
return _minEvictableIdleTimeMillis;
}
public synchronized void setMinEvictableIdleTimeMillis(long minEvictableIdleTimeMillis) {
_minEvictableIdleTimeMillis = minEvictableIdleTimeMillis;
}
public synchronized boolean getTestWhileIdle() {
return _testWhileIdle;
}
public synchronized void setTestWhileIdle(boolean testWhileIdle) {
_testWhileIdle = testWhileIdle;
}
public synchronized void setConfig(GenericKeyedObjectPool.Config conf) {
setMaxIdle(conf.maxIdle);
setMaxActive(conf.maxActive);
setMaxTotal(conf.maxTotal);
setMinIdle(conf.minIdle);
setMaxWait(conf.maxWait);
setWhenExhaustedAction(conf.whenExhaustedAction);
setTestOnBorrow(conf.testOnBorrow);
setTestOnReturn(conf.testOnReturn);
setTestWhileIdle(conf.testWhileIdle);
setNumTestsPerEvictionRun(conf.numTestsPerEvictionRun);
setMinEvictableIdleTimeMillis(conf.minEvictableIdleTimeMillis);
setTimeBetweenEvictionRunsMillis(conf.timeBetweenEvictionRunsMillis);
}
public synchronized boolean getLifo() {
return _lifo;
}
public synchronized void setLifo(boolean lifo) {
this._lifo = lifo;
}
public Object borrowObject(Object key) throws Exception {
long starttime = System.currentTimeMillis();
Latch latch = new Latch(key);
byte whenExhaustedAction;
long maxWait;
synchronized (this) {
whenExhaustedAction = _whenExhaustedAction;
maxWait = _maxWait;
_allocationQueue.add(latch);
allocate();
}
for(;;) {
synchronized (this) {
assertOpen();
}
if (null == latch.getPair()) {
if (latch.mayCreate()) {
} else {
switch(whenExhaustedAction) {
case WHEN_EXHAUSTED_GROW:
synchronized (this) {
if (latch.getPair() == null && !latch.mayCreate()) {
_allocationQueue.remove(latch);
latch.getPool().incrementInternalProcessingCount();
}
}
break;
case WHEN_EXHAUSTED_FAIL:
synchronized (this) {
if (latch.getPair() != null || latch.mayCreate()) {
break;
}
_allocationQueue.remove(latch);
}
throw new NoSuchElementException(""Pool exhausted"");
case WHEN_EXHAUSTED_BLOCK:
try {
synchronized (latch) {
if (latch.getPair() == null && !latch.mayCreate()) {
if (maxWait <= 0) {
latch.wait();
} else {
final long elapsed = (System.currentTimeMillis() - starttime);
final long waitTime = maxWait - elapsed;
if (waitTime > 0)
{
latch.wait(waitTime);
}
}
} else {
break;
}
}
} catch(InterruptedException e) {
Thread.currentThread().interrupt();
throw e;
}
if (maxWait > 0 && ((System.currentTimeMillis() - starttime) >= maxWait)) {
synchronized (this) {
if (latch.getPair() == null && !latch.mayCreate()) {
_allocationQueue.remove(latch);
} else {
break;
}
}
throw new NoSuchElementException(""Timeout waiting for idle object"");
} else {
continue; 
}
default:
throw new IllegalArgumentException(""whenExhaustedAction "" + whenExhaustedAction +
"" not recognized."");
}
}
}
boolean newlyCreated = false;
if (null == latch.getPair()) {
try {
Object obj = _factory.makeObject(key);
latch.setPair(new ObjectTimestampPair(obj));
newlyCreated = true;
} finally {
if (!newlyCreated) {
synchronized (this) {
latch.getPool().decrementInternalProcessingCount();
allocate();
}
}
}
}
try {
_factory.activateObject(key, latch.getPair().value);
if (_testOnBorrow && !_factory.validateObject(key, latch.getPair().value)) {
throw new Exception(""ValidateObject failed"");
}
synchronized (this) {
latch.getPool().decrementInternalProcessingCount();
latch.getPool().incrementActiveCount();
}
return latch.getPair().value;
} catch (Throwable e) {
try {
_factory.destroyObject(key, latch.getPair().value);
} catch (Throwable e2) {
}
synchronized (this) {
latch.getPool().decrementInternalProcessingCount();
if (!newlyCreated) {
latch.reset();
_allocationQueue.add(0, latch);
}
allocate();
}
if (newlyCreated) {
throw new NoSuchElementException(
""Could not create a validated object, cause: "" +
e.getMessage());
}
else {
continue; 
}
}
}
}
private void allocate() {
boolean clearOldest = false;
synchronized (this) {
if (isClosed()) return;
Iterator allocationQueueIter = _allocationQueue.iterator();
while (allocationQueueIter.hasNext()) {
Latch latch = (Latch) allocationQueueIter.next();
ObjectQueue pool = (ObjectQueue)(_poolMap.get(latch.getkey()));
if (null == pool) {
pool = new ObjectQueue();
_poolMap.put(latch.getkey(), pool);
_poolList.add(latch.getkey());
}
latch.setPool(pool);
if (!pool.queue.isEmpty()) {
allocationQueueIter.remove();
latch.setPair(
(ObjectTimestampPair) pool.queue.removeFirst());
pool.incrementInternalProcessingCount();
_totalIdle--;
synchronized (latch) {
latch.notify();
}
continue;
}
if ((_maxTotal > 0) &&
(_totalActive + _totalIdle + _totalInternalProcessing >= _maxTotal)) {
clearOldest = true;
break;
}
if ((_maxActive < 0 || pool.activeCount + pool.internalProcessingCount < _maxActive) &&
(_maxTotal < 0 || _totalActive + _totalIdle + _totalInternalProcessing < _maxTotal)) {
allocationQueueIter.remove();
latch.setMayCreate(true);
pool.incrementInternalProcessingCount();
synchronized (latch) {
latch.notify();
}
continue;
}
if (_maxActive < 0) {
break;
}
}
}
if (clearOldest) {
clearOldest();
}
}
public void clear() {
Map toDestroy = new HashMap();
synchronized (this) {
for (Iterator it = _poolMap.keySet().iterator(); it.hasNext();) {
Object key = it.next();
ObjectQueue pool = (ObjectQueue)_poolMap.get(key);
List objects = new ArrayList();
objects.addAll(pool.queue);
toDestroy.put(key, objects);
it.remove();
_poolList.remove(key);
_totalIdle = _totalIdle - pool.queue.size();
_totalInternalProcessing =
_totalInternalProcessing + pool.queue.size();
pool.queue.clear();
}
}
destroy(toDestroy);
}
public void clearOldest() {
final Map toDestroy = new HashMap();
final Map map = new TreeMap();
synchronized (this) {
for (Iterator keyiter = _poolMap.keySet().iterator(); keyiter.hasNext();) {
final Object key = keyiter.next();
final CursorableLinkedList list = ((ObjectQueue)_poolMap.get(key)).queue;
for (Iterator it = list.iterator(); it.hasNext();) {
map.put(it.next(), key);
}
}
Set setPairKeys = map.entrySet();
int itemsToRemove = ((int) (map.size() * 0.15)) + 1;
Iterator iter = setPairKeys.iterator();
while (iter.hasNext() && itemsToRemove > 0) {
Map.Entry entry = (Map.Entry) iter.next();
Object key = entry.getValue();
ObjectTimestampPair pairTimeStamp = (ObjectTimestampPair) entry.getKey();
final CursorableLinkedList list =
((ObjectQueue)(_poolMap.get(key))).queue;
list.remove(pairTimeStamp);
if (toDestroy.containsKey(key)) {
((List)toDestroy.get(key)).add(pairTimeStamp);
} else {
List listForKey = new ArrayList();
listForKey.add(pairTimeStamp);
toDestroy.put(key, listForKey);
}
if (list.isEmpty()) {
_poolMap.remove(key);
_poolList.remove(key);
}
_totalIdle--;
_totalInternalProcessing++;
itemsToRemove--;
}
}
destroy(toDestroy);
}
public void clear(Object key) {
Map toDestroy = new HashMap();
final ObjectQueue pool;
synchronized (this) {
pool = (ObjectQueue)(_poolMap.remove(key));
if (pool == null) {
return;
} else {
_poolList.remove(key);
}
List objects = new ArrayList();
objects.addAll(pool.queue);
toDestroy.put(key, objects);
_totalIdle = _totalIdle - pool.queue.size();
_totalInternalProcessing =
_totalInternalProcessing + pool.queue.size();
pool.queue.clear();
}
destroy(toDestroy);
}
private void destroy(Map m) {
for (Iterator keys = m.keySet().iterator(); keys.hasNext();) {
Object key = keys.next();
Collection c = (Collection) m.get(key);
for (Iterator it = c.iterator(); it.hasNext();) {
try {
_factory.destroyObject(
key,((ObjectTimestampPair)(it.next())).value);
} catch(Exception e) {
} finally {
synchronized(this) {
_totalInternalProcessing--;
allocate();
}
}
}
}
}
public synchronized int getNumActive() {
return _totalActive;
}
public synchronized int getNumIdle() {
return _totalIdle;
}
public synchronized int getNumActive(Object key) {
final ObjectQueue pool = (ObjectQueue)(_poolMap.get(key));
return pool != null ? pool.activeCount : 0;
}
public synchronized int getNumIdle(Object key) {
final ObjectQueue pool = (ObjectQueue)(_poolMap.get(key));
return pool != null ? pool.queue.size() : 0;
}
public void returnObject(Object key, Object obj) throws Exception {
try {
addObjectToPool(key, obj, true);
} catch (Exception e) {
if (_factory != null) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e2) {
}
// TODO: Correctness here depends on control in addObjectToPool.
ObjectQueue pool = (ObjectQueue) (_poolMap.get(key));
if (pool != null) {
synchronized(this) {
pool.decrementActiveCount();
allocate();
}
}
}
}
}
private void addObjectToPool(Object key, Object obj,
boolean decrementNumActive) throws Exception {
boolean success = true; 
if (_testOnReturn && !_factory.validateObject(key, obj)) {
success = false;
} else {
_factory.passivateObject(key, obj);
}
boolean shouldDestroy = !success;
ObjectQueue pool;
synchronized (this) {
pool = (ObjectQueue) (_poolMap.get(key));
if (null == pool) {
pool = new ObjectQueue();
_poolMap.put(key, pool);
_poolList.add(key);
}
if (isClosed()) {
shouldDestroy = true;
} else {
if (_maxIdle >= 0 && (pool.queue.size() >= _maxIdle)) {
shouldDestroy = true;
} else if (success) {
if (_lifo) {
pool.queue.addFirst(new ObjectTimestampPair(obj));
} else {
pool.queue.addLast(new ObjectTimestampPair(obj));
}
_totalIdle++;
if (decrementNumActive) {
pool.decrementActiveCount();
}
allocate();
}
}
}
if (shouldDestroy) {
try {
_factory.destroyObject(key, obj);
} catch(Exception e) {
}
if (decrementNumActive) {
synchronized(this) {
pool.decrementActiveCount();
allocate();
}
}
}
}
public void invalidateObject(Object key, Object obj) throws Exception {
try {
_factory.destroyObject(key, obj);
} finally {
synchronized (this) {
ObjectQueue pool = (ObjectQueue) (_poolMap.get(key));
if (null == pool) {
pool = new ObjectQueue();
_poolMap.put(key, pool);
_poolList.add(key);
}
pool.decrementActiveCount();
allocate(); 
}
}
}
public void addObject(Object key) throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
Object obj = _factory.makeObject(key);
try {
assertOpen();
addObjectToPool(key, obj, false);
} catch (IllegalStateException ex) { 
try {
_factory.destroyObject(key, obj);
} catch (Exception ex2) {
}
throw ex;
}
}
public synchronized void preparePool(Object key, boolean populateImmediately) {
ObjectQueue pool = (ObjectQueue)(_poolMap.get(key));
if (null == pool) {
pool = new ObjectQueue();
_poolMap.put(key,pool);
_poolList.add(key);
}
if (populateImmediately) {
try {
ensureMinIdle(key);
}
catch (Exception e) {
}
}
}
public void close() throws Exception {
super.close();
synchronized (this) {
clear();
if (null != _evictionCursor) {
_evictionCursor.close();
_evictionCursor = null;
}
if (null != _evictionKeyCursor) {
_evictionKeyCursor.close();
_evictionKeyCursor = null;
}
startEvictor(-1L);
}
}
public void setFactory(KeyedPoolableObjectFactory factory) throws IllegalStateException {
Map toDestroy = new HashMap();
synchronized (this) {
assertOpen();
if (0 < getNumActive()) {
throw new IllegalStateException(""Objects are already active"");
} else {
for (Iterator it = _poolMap.keySet().iterator(); it.hasNext();) {
Object key = it.next();
ObjectQueue pool = (ObjectQueue)_poolMap.get(key);
if (pool != null) {
List objects = new ArrayList();
objects.addAll(pool.queue);
toDestroy.put(key, objects);
it.remove();
_poolList.remove(key);
_totalIdle = _totalIdle - pool.queue.size();
_totalInternalProcessing =
_totalInternalProcessing + pool.queue.size();
pool.queue.clear();
}
}
_factory = factory;
}
}
destroy(toDestroy);
}
public void evict() throws Exception {
Object key = null;
boolean testWhileIdle;
long minEvictableIdleTimeMillis;
synchronized (this) {
testWhileIdle = _testWhileIdle;
minEvictableIdleTimeMillis = _minEvictableIdleTimeMillis;
if (_evictionKeyCursor != null &&
_evictionKeyCursor._lastReturned != null) {
key = _evictionKeyCursor._lastReturned.value();
}
}
for (int i=0, m=getNumTests(); i<m; i++) {
final ObjectTimestampPair pair;
synchronized (this) {
if (_poolMap == null || _poolMap.size() == 0) {
continue;
}
if (null == _evictionKeyCursor) {
resetEvictionKeyCursor();
key = null;
}
if (null == _evictionCursor) {
if (_evictionKeyCursor.hasNext()) {
key = _evictionKeyCursor.next();
resetEvictionObjectCursor(key);
} else {
resetEvictionKeyCursor();
if (_evictionKeyCursor != null) {
if (_evictionKeyCursor.hasNext()) {
key = _evictionKeyCursor.next();
resetEvictionObjectCursor(key);
}
}
}
}
if (_evictionCursor == null) {
continue; 
}
if ((_lifo && !_evictionCursor.hasPrevious()) ||
(!_lifo && !_evictionCursor.hasNext())) {
if (_evictionKeyCursor != null) {
if (_evictionKeyCursor.hasNext()) {
key = _evictionKeyCursor.next();
resetEvictionObjectCursor(key);
} else { 
resetEvictionKeyCursor();
if (_evictionKeyCursor != null) {
if (_evictionKeyCursor.hasNext()) {
key = _evictionKeyCursor.next();
resetEvictionObjectCursor(key);
}
}
}
}
}
if ((_lifo && !_evictionCursor.hasPrevious()) ||
(!_lifo && !_evictionCursor.hasNext())) {
continue; 
}
pair = _lifo ?
(ObjectTimestampPair) _evictionCursor.previous() :
(ObjectTimestampPair) _evictionCursor.next();
_evictionCursor.remove();
_totalIdle--;
_totalInternalProcessing++;
}
boolean removeObject=false;
if ((minEvictableIdleTimeMillis > 0) &&
(System.currentTimeMillis() - pair.tstamp >
minEvictableIdleTimeMillis)) {
removeObject=true;
}
if (testWhileIdle && removeObject == false) {
boolean active = false;
try {
_factory.activateObject(key,pair.value);
active = true;
} catch(Exception e) {
removeObject=true;
}
if (active) {
if (!_factory.validateObject(key,pair.value)) {
removeObject=true;
} else {
try {
_factory.passivateObject(key,pair.value);
} catch(Exception e) {
removeObject=true;
}
}
}
}
if (removeObject) {
try {
_factory.destroyObject(key, pair.value);
} catch(Exception e) {
} finally {
if (_minIdle == 0) {
synchronized (this) {
ObjectQueue objectQueue =
(ObjectQueue)_poolMap.get(key);
if (objectQueue != null &&
objectQueue.queue.isEmpty()) {
_poolMap.remove(key);
_poolList.remove(key);
}
}
}
}
}
synchronized (this) {
if (!removeObject) {
_evictionCursor.add(pair);
_totalIdle++;
if (_lifo) {
_evictionCursor.previous();
}
}
_totalInternalProcessing--;
}
}
}
private void resetEvictionKeyCursor() {
if (_evictionKeyCursor != null) {
_evictionKeyCursor.close();
}
_evictionKeyCursor = _poolList.cursor();
if (null != _evictionCursor) {
_evictionCursor.close();
_evictionCursor = null;
}
}
private void resetEvictionObjectCursor(Object key) {
if (_evictionCursor != null) {
_evictionCursor.close();
}
if (_poolMap == null) {
return;
}
ObjectQueue pool = (ObjectQueue) (_poolMap.get(key));
if (pool != null) {
CursorableLinkedList queue = pool.queue;
_evictionCursor = queue.cursor(_lifo ? queue.size() : 0);
}
}
private void ensureMinIdle() throws Exception {
if (_minIdle > 0) {
Object[] keysCopy;
synchronized(this) {
keysCopy = _poolMap.keySet().toArray();
}
for (int i=0; i < keysCopy.length; i++) {
ensureMinIdle(keysCopy[i]);
}
}
}
private void ensureMinIdle(Object key) throws Exception {
ObjectQueue pool;
synchronized(this) {
pool = (ObjectQueue)(_poolMap.get(key));
}
if (pool == null) {
return;
}
int objectDeficit = calculateDeficit(pool, false);
for (int i = 0; i < objectDeficit && calculateDeficit(pool, true) > 0; i++) {
try {
addObject(key);
} finally {
synchronized (this) {
pool.decrementInternalProcessingCount();
allocate();
}
}
}
}
protected synchronized void startEvictor(long delay) {
if (null != _evictor) {
EvictionTimer.cancel(_evictor);
_evictor = null;
}
if (delay > 0) {
_evictor = new Evictor();
EvictionTimer.schedule(_evictor, delay, delay);
}
}
synchronized String debugInfo() {
StringBuffer buf = new StringBuffer();
buf.append(""Active: "").append(getNumActive()).append(""\n"");
buf.append(""Idle: "").append(getNumIdle()).append(""\n"");
Iterator it = _poolMap.keySet().iterator();
while (it.hasNext()) {
Object key = it.next();
buf.append(""\t"").append(key).append("" "").append(_poolMap.get(key)).append(""\n"");
}
return buf.toString();
}
private synchronized int getNumTests() {
if (_numTestsPerEvictionRun >= 0) {
return Math.min(_numTestsPerEvictionRun, _totalIdle);
} else {
return(int)(Math.ceil(_totalIdle/Math.abs((double)_numTestsPerEvictionRun)));
}
}
private synchronized int calculateDeficit(ObjectQueue pool,
boolean incrementInternal) {
int objectDefecit = 0;
objectDefecit = getMinIdle() - pool.queue.size();
if (getMaxActive() > 0) {
int growLimit = Math.max(0, getMaxActive() - pool.activeCount - pool.queue.size() - pool.internalProcessingCount);
objectDefecit = Math.min(objectDefecit, growLimit);
}
if (getMaxTotal() > 0) {
int growLimit = Math.max(0, getMaxTotal() - getNumActive() - getNumIdle() - _totalInternalProcessing);
objectDefecit = Math.min(objectDefecit, growLimit);
}
if (incrementInternal && objectDefecit > 0) {
pool.incrementInternalProcessingCount();
}
return objectDefecit;
}
private class ObjectQueue {
private int activeCount = 0;
private final CursorableLinkedList queue = new CursorableLinkedList();
private int internalProcessingCount = 0;
void incrementActiveCount() {
synchronized (GenericKeyedObjectPool.this) {
_totalActive++;
}
activeCount++;
}
void decrementActiveCount() {
synchronized (GenericKeyedObjectPool.this) {
_totalActive--;
}
if (activeCount > 0) {
activeCount--;
}
}
void incrementInternalProcessingCount() {
synchronized (GenericKeyedObjectPool.this) {
_totalInternalProcessing++;
}
internalProcessingCount++;
}
void decrementInternalProcessingCount() {
synchronized (GenericKeyedObjectPool.this) {
_totalInternalProcessing--;
}
internalProcessingCount--;
}
}
static class ObjectTimestampPair implements Comparable {
Object value;
long tstamp;
ObjectTimestampPair(Object val) {
this(val, System.currentTimeMillis());
}
ObjectTimestampPair(Object val, long time) {
value = val;
tstamp = time;
}
public String toString() {
return value + "";"" + tstamp;
}
public int compareTo(Object obj) {
return compareTo((ObjectTimestampPair) obj);
}
public int compareTo(ObjectTimestampPair other) {
final long tstampdiff = this.tstamp - other.tstamp;
if (tstampdiff == 0) {
return System.identityHashCode(this) - System.identityHashCode(other);
} else {
return (int)Math.min(Math.max(tstampdiff, Integer.MIN_VALUE), Integer.MAX_VALUE);
}
}
}
private class Evictor extends TimerTask {
public void run() {
try {
evict();
} catch(Exception e) {
} catch(OutOfMemoryError oome) {
oome.printStackTrace(System.err);
}
try {
ensureMinIdle();
} catch (Exception e) {
}
}
}
public static class Config {
public int maxIdle = GenericKeyedObjectPool.DEFAULT_MAX_IDLE;
public int maxActive = GenericKeyedObjectPool.DEFAULT_MAX_ACTIVE;
public int maxTotal = GenericKeyedObjectPool.DEFAULT_MAX_TOTAL;
public int minIdle = GenericKeyedObjectPool.DEFAULT_MIN_IDLE;
public long maxWait = GenericKeyedObjectPool.DEFAULT_MAX_WAIT;
public byte whenExhaustedAction = GenericKeyedObjectPool.DEFAULT_WHEN_EXHAUSTED_ACTION;
public boolean testOnBorrow = GenericKeyedObjectPool.DEFAULT_TEST_ON_BORROW;
public boolean testOnReturn = GenericKeyedObjectPool.DEFAULT_TEST_ON_RETURN;
public boolean testWhileIdle = GenericKeyedObjectPool.DEFAULT_TEST_WHILE_IDLE;
public long timeBetweenEvictionRunsMillis = GenericKeyedObjectPool.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS;
public int numTestsPerEvictionRun =  GenericKeyedObjectPool.DEFAULT_NUM_TESTS_PER_EVICTION_RUN;
public long minEvictableIdleTimeMillis = GenericKeyedObjectPool.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS;
public boolean lifo = GenericKeyedObjectPool.DEFAULT_LIFO;
}
private static final class Latch {
private final Object _key;
private ObjectQueue _pool;
private ObjectTimestampPair _pair;
private boolean _mayCreate = false;
private Latch(Object key) {
_key = key;
}
private synchronized Object getkey() {
return _key;
}
private synchronized ObjectQueue getPool() {
return _pool;
}
private synchronized void setPool(ObjectQueue pool) {
_pool = pool;
}
private synchronized ObjectTimestampPair getPair() {
return _pair;
}
private synchronized void setPair(ObjectTimestampPair pair) {
_pair = pair;
}
private synchronized boolean mayCreate() {
return _mayCreate;
}
private synchronized void setMayCreate(boolean mayCreate) {
_mayCreate = mayCreate;
}
private synchronized void reset() {
_pair = null;
_mayCreate = false;
}
}
private int _maxIdle = DEFAULT_MAX_IDLE;
private int _minIdle = DEFAULT_MIN_IDLE;
private int _maxActive = DEFAULT_MAX_ACTIVE;
private int _maxTotal = DEFAULT_MAX_TOTAL;
private long _maxWait = DEFAULT_MAX_WAIT;
private byte _whenExhaustedAction = DEFAULT_WHEN_EXHAUSTED_ACTION;
private volatile boolean _testOnBorrow = DEFAULT_TEST_ON_BORROW;
private volatile boolean _testOnReturn = DEFAULT_TEST_ON_RETURN;
private boolean _testWhileIdle = DEFAULT_TEST_WHILE_IDLE;
private long _timeBetweenEvictionRunsMillis = DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS;
private int _numTestsPerEvictionRun =  DEFAULT_NUM_TESTS_PER_EVICTION_RUN;
private long _minEvictableIdleTimeMillis = DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS;
private Map _poolMap = null;
private int _totalActive = 0;
private int _totalIdle = 0;
private int _totalInternalProcessing = 0;
private KeyedPoolableObjectFactory _factory = null;
private Evictor _evictor = null;
private CursorableLinkedList _poolList = null;
private CursorableLinkedList.Cursor _evictionCursor = null;
private CursorableLinkedList.Cursor _evictionKeyCursor = null;
private boolean _lifo = DEFAULT_LIFO;
private LinkedList _allocationQueue = new LinkedList();
","public synchronized void preparePool(Object key, boolean populateImmediately) {
ObjectQueue pool = (ObjectQueue) (_poolMap.get(key));
if (null == pool) {
pool = new ObjectQueue();
_poolMap.put(key, pool);
_poolList.add(key);
}
if (populateImmediately) {
try {
ensureMinIdle(key);
} catch (Exception e) {
// Do nothing
}
}
}","public synchronized void preparePool(Object key, boolean populateImmediately) {
ObjectQueue objectqueueVar1 = objectqueueLiteral2;
if (null == objectqueueVar1) {
objectqueueVar1 = new ObjectQueue();
_poolMap.put(key, objectqueueVar1);
_poolList.add(key);
}
if (populateImmediately) {
try {
ensureMinIdle(key);
} catch (Exception e) {
// Do nothing
}
}
}"
16928,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,793,"} catch (Exception e2) {
","public void returnObject(Object obj) throws Exception {
try {
addObjectToPool(obj, true);
} catch (Exception e) {
if (_factory != null) {
try {
_factory.destroyObject(obj);
} catch (Exception e2) {
}
// TODO: Correctness here depends on control in addObjectToPool.
synchronized (this) {
_numActive--;
allocate();
}
}
}
}","public void returnObject(Object obj) throws Exception {
try {
addObjectToPool(obj, true);
} catch (Exception e) {
if (_factory != null) {
try {
_factory.destroyObject(obj);
} catch (Exception e2) {
}
// TODO: Correctness here depends on control in addObjectToPool.
synchronized (this) {
_numActive--;
allocate();
}
}
}
}"
16929,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,794,"} catch (Exception ex2) {
","public void addObject() throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
Object obj = _factory.makeObject();
try {
assertOpen();
addObjectToPool(obj, false);
} catch (IllegalStateException ex) {
try {
_factory.destroyObject(obj);
} catch (Exception ex2) {
}
throw ex;
}
}","public void addObject() throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
Object objectVar1 = objectLiteral2;
try {
assertOpen();
addObjectToPool(objectVar1, false);
} catch (IllegalStateException ex) {
try {
_factory.destroyObject(objectVar1);
} catch (Exception ex2) {
}
throw ex;
}
}"
16944,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,809,"} catch(Exception e) {
","public synchronized void returnObject(Object obj) throws Exception {
boolean success = !isClosed();
if (null != _factory) {
if (!_factory.validateObject(obj)) {
success = false;
} else {
try {
_factory.passivateObject(obj);
} catch (Exception e) {
success = false;
}
}
}
boolean shouldDestroy = !success;
_numActive--;
if (success) {
Object toBeDestroyed = null;
if (_pool.size() >= _maxSleeping) {
shouldDestroy = true;
toBeDestroyed = _pool.remove(0);
}
_pool.push(obj);
obj = toBeDestroyed;
}
notifyAll();
if (shouldDestroy) {
try {
_factory.destroyObject(obj);
} catch (Exception e) {
}
}
}","public synchronized void returnObject(Object obj) throws Exception {
boolean booleanVar1 = booleanLiteral2;
if (null != _factory) {
if (!_factory.validateObject(obj)) {
booleanVar1 = false;
} else {
try {
_factory.passivateObject(obj);
} catch (Exception e) {
booleanVar1 = false;
}
}
}
boolean booleanVar3 = booleanLiteral4;
_numActive--;
if (booleanVar1) {
Object objectVar5 = objectLiteral6;
if (_pool.size() >= _maxSleeping) {
booleanVar3 = true;
objectVar5 = _pool.remove(0);
}
_pool.push(obj);
obj = objectVar5;
}
notifyAll();
if (booleanVar3) {
try {
_factory.destroyObject(obj);
} catch (Exception e) {
}
}
}"
16949,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,814,"} catch (Exception e) {
","public void close() {
try {
pool.close();
} catch (Exception e) {
}
}","public void close() {
try {
pool.close();
} catch (Exception e) {
}
}"
16961,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,826,"} catch (Exception e) {
","public void returnObject(final Object obj) {
if (type.isInstance(obj)) {
try {
pool.returnObject(obj);
} catch (Exception e) {
}
} else {
throw new ClassCastException(""Returned object is not of type: "" + type.getName() + "" was: "" + obj);
}
}","public void returnObject(final Object obj) {
if (type.isInstance(obj)) {
try {
pool.returnObject(obj);
} catch (Exception e) {
}
} else {
throw new ClassCastException(""Returned object is not of type: "" + type.getName() + "" was: "" + obj);
}
}"
16963,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,828,"} catch (Exception e) {
","public void close() {
try {
pool.close();
} catch (Exception e) {
}
}","public void close() {
try {
pool.close();
} catch (Exception e) {
}
}"
16966,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,831,"} catch (Exception e) {
","public void invalidateObject(final Object obj) {
if (type.isInstance(obj)) {
try {
pool.invalidateObject(obj);
} catch (Exception e) {
}
} else {
throw new ClassCastException(""Invalidated object is not of type: "" + type.getName() + "" was: "" + obj);
}
}","public void invalidateObject(final Object obj) {
if (type.isInstance(obj)) {
try {
pool.invalidateObject(obj);
} catch (Exception e) {
}
} else {
throw new ClassCastException(""Invalidated object is not of type: "" + type.getName() + "" was: "" + obj);
}
}"
16972,PERFORMANCE,WMI_WRONG_MAP_ITERATOR,FP,pool,837,"ObjectQueue pool = (ObjectQueue)_poolMap.get(key);
","public void clear() {
Map toDestroy = new HashMap();
synchronized (this) {
for (Iterator it = _poolMap.keySet().iterator(); it.hasNext(); ) {
Object key = it.next();
ObjectQueue pool = (ObjectQueue) _poolMap.get(key);
List objects = new ArrayList();
objects.addAll(pool.queue);
toDestroy.put(key, objects);
it.remove();
_poolList.remove(key);
_totalIdle = _totalIdle - pool.queue.size();
_totalInternalProcessing = _totalInternalProcessing + pool.queue.size();
pool.queue.clear();
}
}
destroy(toDestroy, _factory);
}","public void clear() {
Map mapVar1 = mapLiteral2;
synchronized (this) {
for (Iterator iteratorVar11 = iteratorLiteral12; iteratorVar3.hasNext(); ) {
Object objectVar5 = objectLiteral6;
ObjectQueue objectqueueVar7 = objectqueueLiteral8;
List listVar9 = listLiteral10;
listVar9.addAll(objectqueueVar7.queue);
mapVar1.put(objectVar5, listVar9);
iteratorVar3.remove();
_poolList.remove(objectVar5);
_totalIdle = _totalIdle - objectqueueVar7.queue.size();
_totalInternalProcessing = _totalInternalProcessing + objectqueueVar7.queue.size();
objectqueueVar7.queue.clear();
}
}
destroy(mapVar1, _factory);
}"
16976,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,841,"} catch (Exception ex2) {
","public void addObject(Object key) throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
Object obj = _factory.makeObject(key);
try {
assertOpen();
addObjectToPool(key, obj, false);
} catch (IllegalStateException ex) {
try {
_factory.destroyObject(key, obj);
} catch (Exception ex2) {
}
throw ex;
}
}","public void addObject(Object key) throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
Object objectVar1 = objectLiteral2;
try {
assertOpen();
addObjectToPool(key, objectVar1, false);
} catch (IllegalStateException ex) {
try {
_factory.destroyObject(key, objectVar1);
} catch (Exception ex2) {
}
throw ex;
}
}"
16980,DODGY_CODE,RI_REDUNDANT_INTERFACES,FP,pool,845,"public class GenericKeyedObjectPool extends BaseKeyedObjectPool implements KeyedObjectPool {
public static final byte WHEN_EXHAUSTED_FAIL   = 0;
public static final byte WHEN_EXHAUSTED_BLOCK  = 1;
public static final byte WHEN_EXHAUSTED_GROW   = 2;
public static final int DEFAULT_MAX_IDLE  = 8;
public static final int DEFAULT_MAX_ACTIVE  = 8;
public static final int DEFAULT_MAX_TOTAL  = -1;
public static final byte DEFAULT_WHEN_EXHAUSTED_ACTION = WHEN_EXHAUSTED_BLOCK;
public static final long DEFAULT_MAX_WAIT = -1L;
public static final boolean DEFAULT_TEST_ON_BORROW = false;
public static final boolean DEFAULT_TEST_ON_RETURN = false;
public static final boolean DEFAULT_TEST_WHILE_IDLE = false;
public static final long DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS = -1L;
public static final int DEFAULT_NUM_TESTS_PER_EVICTION_RUN = 3;
public static final long DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS = 1000L * 60L * 30L;
public static final int DEFAULT_MIN_IDLE = 0;
public static final boolean DEFAULT_LIFO = true;
public GenericKeyedObjectPool() {
this(null, DEFAULT_MAX_ACTIVE, DEFAULT_WHEN_EXHAUSTED_ACTION, DEFAULT_MAX_WAIT, DEFAULT_MAX_IDLE,
DEFAULT_TEST_ON_BORROW, DEFAULT_TEST_ON_RETURN, DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS,
DEFAULT_NUM_TESTS_PER_EVICTION_RUN, DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS, DEFAULT_TEST_WHILE_IDLE);
}
public GenericKeyedObjectPool(KeyedPoolableObjectFactory factory) {
this(factory, DEFAULT_MAX_ACTIVE, DEFAULT_WHEN_EXHAUSTED_ACTION, DEFAULT_MAX_WAIT, DEFAULT_MAX_IDLE,
DEFAULT_TEST_ON_BORROW, DEFAULT_TEST_ON_RETURN, DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS,
DEFAULT_NUM_TESTS_PER_EVICTION_RUN, DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS, DEFAULT_TEST_WHILE_IDLE);
}
public GenericKeyedObjectPool(KeyedPoolableObjectFactory factory, GenericKeyedObjectPool.Config config) {
this(factory, config.maxActive, config.whenExhaustedAction, config.maxWait, config.maxIdle, config.maxTotal,
config.minIdle, config.testOnBorrow, config.testOnReturn, config.timeBetweenEvictionRunsMillis,
config.numTestsPerEvictionRun, config.minEvictableIdleTimeMillis, config.testWhileIdle, config.lifo);
}
public GenericKeyedObjectPool(KeyedPoolableObjectFactory factory, int maxActive) {
this(factory,maxActive, DEFAULT_WHEN_EXHAUSTED_ACTION, DEFAULT_MAX_WAIT, DEFAULT_MAX_IDLE,
DEFAULT_TEST_ON_BORROW, DEFAULT_TEST_ON_RETURN, DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS,
DEFAULT_NUM_TESTS_PER_EVICTION_RUN, DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS, DEFAULT_TEST_WHILE_IDLE);
}
public GenericKeyedObjectPool(KeyedPoolableObjectFactory factory, int maxActive, byte whenExhaustedAction,
long maxWait) {
this(factory, maxActive, whenExhaustedAction, maxWait, DEFAULT_MAX_IDLE, DEFAULT_TEST_ON_BORROW,
DEFAULT_TEST_ON_RETURN, DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS, DEFAULT_NUM_TESTS_PER_EVICTION_RUN,
DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS, DEFAULT_TEST_WHILE_IDLE);
}
public GenericKeyedObjectPool(KeyedPoolableObjectFactory factory, int maxActive, byte whenExhaustedAction,
long maxWait, boolean testOnBorrow, boolean testOnReturn) {
this(factory, maxActive, whenExhaustedAction, maxWait, DEFAULT_MAX_IDLE,testOnBorrow,testOnReturn,
DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS, DEFAULT_NUM_TESTS_PER_EVICTION_RUN,
DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS, DEFAULT_TEST_WHILE_IDLE);
}
public GenericKeyedObjectPool(KeyedPoolableObjectFactory factory, int maxActive, byte whenExhaustedAction,
long maxWait, int maxIdle) {
this(factory, maxActive, whenExhaustedAction, maxWait, maxIdle, DEFAULT_TEST_ON_BORROW, DEFAULT_TEST_ON_RETURN,
DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS, DEFAULT_NUM_TESTS_PER_EVICTION_RUN,
DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS, DEFAULT_TEST_WHILE_IDLE);
}
public GenericKeyedObjectPool(KeyedPoolableObjectFactory factory, int maxActive, byte whenExhaustedAction,
long maxWait, int maxIdle, boolean testOnBorrow, boolean testOnReturn) {
this(factory, maxActive, whenExhaustedAction, maxWait, maxIdle, testOnBorrow, testOnReturn,
DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS, DEFAULT_NUM_TESTS_PER_EVICTION_RUN,
DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS, DEFAULT_TEST_WHILE_IDLE);
}
public GenericKeyedObjectPool(KeyedPoolableObjectFactory factory, int maxActive, byte whenExhaustedAction,
long maxWait, int maxIdle, boolean testOnBorrow, boolean testOnReturn, long timeBetweenEvictionRunsMillis,
int numTestsPerEvictionRun, long minEvictableIdleTimeMillis, boolean testWhileIdle) {
this(factory, maxActive, whenExhaustedAction, maxWait, maxIdle, GenericKeyedObjectPool.DEFAULT_MAX_TOTAL,
testOnBorrow, testOnReturn, timeBetweenEvictionRunsMillis, numTestsPerEvictionRun,
minEvictableIdleTimeMillis, testWhileIdle);
}
public GenericKeyedObjectPool(KeyedPoolableObjectFactory factory, int maxActive, byte whenExhaustedAction,
long maxWait, int maxIdle, int maxTotal, boolean testOnBorrow, boolean testOnReturn,
long timeBetweenEvictionRunsMillis, int numTestsPerEvictionRun, long minEvictableIdleTimeMillis,
boolean testWhileIdle) {
this(factory, maxActive, whenExhaustedAction, maxWait, maxIdle, maxTotal,
GenericKeyedObjectPool.DEFAULT_MIN_IDLE, testOnBorrow, testOnReturn, timeBetweenEvictionRunsMillis,
numTestsPerEvictionRun, minEvictableIdleTimeMillis, testWhileIdle);
}
public GenericKeyedObjectPool(KeyedPoolableObjectFactory factory, int maxActive, byte whenExhaustedAction,
long maxWait, int maxIdle, int maxTotal, int minIdle, boolean testOnBorrow, boolean testOnReturn,
long timeBetweenEvictionRunsMillis, int numTestsPerEvictionRun, long minEvictableIdleTimeMillis,
boolean testWhileIdle) {
this(factory, maxActive, whenExhaustedAction, maxWait, maxIdle, maxTotal, minIdle, testOnBorrow, testOnReturn,
timeBetweenEvictionRunsMillis, numTestsPerEvictionRun, minEvictableIdleTimeMillis, testWhileIdle,
DEFAULT_LIFO);
}
public GenericKeyedObjectPool(KeyedPoolableObjectFactory factory, int maxActive, byte whenExhaustedAction,
long maxWait, int maxIdle, int maxTotal, int minIdle, boolean testOnBorrow, boolean testOnReturn,
long timeBetweenEvictionRunsMillis, int numTestsPerEvictionRun, long minEvictableIdleTimeMillis,
boolean testWhileIdle, boolean lifo) {
_factory = factory;
_maxActive = maxActive;
_lifo = lifo;
switch (whenExhaustedAction) {
case WHEN_EXHAUSTED_BLOCK:
case WHEN_EXHAUSTED_FAIL:
case WHEN_EXHAUSTED_GROW:
_whenExhaustedAction = whenExhaustedAction;
break;
default:
throw new IllegalArgumentException(""whenExhaustedAction "" + whenExhaustedAction + "" not recognized."");
}
_maxWait = maxWait;
_maxIdle = maxIdle;
_maxTotal = maxTotal;
_minIdle = minIdle;
_testOnBorrow = testOnBorrow;
_testOnReturn = testOnReturn;
_timeBetweenEvictionRunsMillis = timeBetweenEvictionRunsMillis;
_numTestsPerEvictionRun = numTestsPerEvictionRun;
_minEvictableIdleTimeMillis = minEvictableIdleTimeMillis;
_testWhileIdle = testWhileIdle;
_poolMap = new HashMap();
_poolList = new CursorableLinkedList();
startEvictor(_timeBetweenEvictionRunsMillis);
}
public synchronized int getMaxActive() {
return _maxActive;
}
public void setMaxActive(int maxActive) {
synchronized(this) {
_maxActive = maxActive;
}
allocate();
}
public synchronized int getMaxTotal() {
return _maxTotal;
}
public void setMaxTotal(int maxTotal) {
synchronized(this) {
_maxTotal = maxTotal;
}
allocate();
}
public synchronized byte getWhenExhaustedAction() {
return _whenExhaustedAction;
}
public void setWhenExhaustedAction(byte whenExhaustedAction) {
synchronized(this) {
switch(whenExhaustedAction) {
case WHEN_EXHAUSTED_BLOCK:
case WHEN_EXHAUSTED_FAIL:
case WHEN_EXHAUSTED_GROW:
_whenExhaustedAction = whenExhaustedAction;
break;
default:
throw new IllegalArgumentException(""whenExhaustedAction "" + whenExhaustedAction + "" not recognized."");
}
}
allocate();
}
public synchronized long getMaxWait() {
return _maxWait;
}
public void setMaxWait(long maxWait) {
synchronized(this) {
_maxWait = maxWait;
}
allocate();
}
public synchronized int getMaxIdle() {
return _maxIdle;
}
public void setMaxIdle(int maxIdle) {
synchronized(this) {
_maxIdle = maxIdle;
}
allocate();
}
public void setMinIdle(int poolSize) {
_minIdle = poolSize;
}
public int getMinIdle() {
return _minIdle;
}
public boolean getTestOnBorrow() {
return _testOnBorrow;
}
public void setTestOnBorrow(boolean testOnBorrow) {
_testOnBorrow = testOnBorrow;
}
public boolean getTestOnReturn() {
return _testOnReturn;
}
public void setTestOnReturn(boolean testOnReturn) {
_testOnReturn = testOnReturn;
}
public synchronized long getTimeBetweenEvictionRunsMillis() {
return _timeBetweenEvictionRunsMillis;
}
public synchronized void setTimeBetweenEvictionRunsMillis(long timeBetweenEvictionRunsMillis) {
_timeBetweenEvictionRunsMillis = timeBetweenEvictionRunsMillis;
startEvictor(_timeBetweenEvictionRunsMillis);
}
public synchronized int getNumTestsPerEvictionRun() {
return _numTestsPerEvictionRun;
}
public synchronized void setNumTestsPerEvictionRun(int numTestsPerEvictionRun) {
_numTestsPerEvictionRun = numTestsPerEvictionRun;
}
public synchronized long getMinEvictableIdleTimeMillis() {
return _minEvictableIdleTimeMillis;
}
public synchronized void setMinEvictableIdleTimeMillis(long minEvictableIdleTimeMillis) {
_minEvictableIdleTimeMillis = minEvictableIdleTimeMillis;
}
public synchronized boolean getTestWhileIdle() {
return _testWhileIdle;
}
public synchronized void setTestWhileIdle(boolean testWhileIdle) {
_testWhileIdle = testWhileIdle;
}
public synchronized void setConfig(GenericKeyedObjectPool.Config conf) {
setMaxIdle(conf.maxIdle);
setMaxActive(conf.maxActive);
setMaxTotal(conf.maxTotal);
setMinIdle(conf.minIdle);
setMaxWait(conf.maxWait);
setWhenExhaustedAction(conf.whenExhaustedAction);
setTestOnBorrow(conf.testOnBorrow);
setTestOnReturn(conf.testOnReturn);
setTestWhileIdle(conf.testWhileIdle);
setNumTestsPerEvictionRun(conf.numTestsPerEvictionRun);
setMinEvictableIdleTimeMillis(conf.minEvictableIdleTimeMillis);
setTimeBetweenEvictionRunsMillis(conf.timeBetweenEvictionRunsMillis);
}
public synchronized boolean getLifo() {
return _lifo;
}
public synchronized void setLifo(boolean lifo) {
this._lifo = lifo;
}
public Object borrowObject(Object key) throws Exception {
long starttime = System.currentTimeMillis();
Latch latch = new Latch(key);
byte whenExhaustedAction;
long maxWait;
synchronized (this) {
whenExhaustedAction = _whenExhaustedAction;
maxWait = _maxWait;
_allocationQueue.add(latch);
}
allocate();
for(;;) {
synchronized (this) {
assertOpen();
}
if (null == latch.getPair()) {
if (latch.mayCreate()) {
} else {
switch(whenExhaustedAction) {
case WHEN_EXHAUSTED_GROW:
synchronized (this) {
if (latch.getPair() == null && !latch.mayCreate()) {
_allocationQueue.remove(latch);
latch.getPool().incrementInternalProcessingCount();
}
}
break;
case WHEN_EXHAUSTED_FAIL:
synchronized (this) {
if (latch.getPair() != null || latch.mayCreate()) {
break;
}
_allocationQueue.remove(latch);
}
throw new NoSuchElementException(""Pool exhausted"");
case WHEN_EXHAUSTED_BLOCK:
try {
synchronized (latch) {
if (latch.getPair() == null && !latch.mayCreate()) {
if (maxWait <= 0) {
latch.wait();
} else {
final long elapsed = (System.currentTimeMillis() - starttime);
final long waitTime = maxWait - elapsed;
if (waitTime > 0)
{
latch.wait(waitTime);
}
}
} else {
break;
}
}
if(isClosed() == true) {
throw new IllegalStateException(""Pool closed"");
}
} catch(InterruptedException e) {
boolean doAllocate = false;
synchronized (this) {
if (latch.getPair() == null && !latch.mayCreate()) {
_allocationQueue.remove(latch);
} else if (latch.getPair() == null && latch.mayCreate()) {
latch.getPool().decrementInternalProcessingCount();
doAllocate = true;
} else {
latch.getPool().decrementInternalProcessingCount();
latch.getPool().incrementActiveCount();
returnObject(latch.getkey(), latch.getPair().getValue());
}
}
if (doAllocate) {
allocate();
}
Thread.currentThread().interrupt();
throw e;
}
if (maxWait > 0 && ((System.currentTimeMillis() - starttime) >= maxWait)) {
synchronized (this) {
if (latch.getPair() == null && !latch.mayCreate()) {
_allocationQueue.remove(latch);
} else {
break;
}
}
throw new NoSuchElementException(""Timeout waiting for idle object"");
} else {
continue; 
}
default:
throw new IllegalArgumentException(""whenExhaustedAction "" + whenExhaustedAction +
"" not recognized."");
}
}
}
boolean newlyCreated = false;
if (null == latch.getPair()) {
try {
Object obj = _factory.makeObject(key);
latch.setPair(new ObjectTimestampPair(obj));
newlyCreated = true;
} finally {
if (!newlyCreated) {
synchronized (this) {
latch.getPool().decrementInternalProcessingCount();
}
allocate();
}
}
}
try {
_factory.activateObject(key, latch.getPair().value);
if (_testOnBorrow && !_factory.validateObject(key, latch.getPair().value)) {
throw new Exception(""ValidateObject failed"");
}
synchronized (this) {
latch.getPool().decrementInternalProcessingCount();
latch.getPool().incrementActiveCount();
}
return latch.getPair().value;
} catch (Throwable e) {
PoolUtils.checkRethrow(e);
try {
_factory.destroyObject(key, latch.getPair().value);
} catch (Throwable e2) {
PoolUtils.checkRethrow(e2);
}
synchronized (this) {
latch.getPool().decrementInternalProcessingCount();
if (!newlyCreated) {
latch.reset();
_allocationQueue.add(0, latch);
}
}
allocate();
if (newlyCreated) {
throw new NoSuchElementException(
""Could not create a validated object, cause: "" +
e.getMessage());
}
else {
continue; 
}
}
}
}
private void allocate() {
boolean clearOldest = false;
synchronized (this) {
if (isClosed()) return;
Iterator allocationQueueIter = _allocationQueue.iterator();
while (allocationQueueIter.hasNext()) {
Latch latch = (Latch) allocationQueueIter.next();
ObjectQueue pool = (ObjectQueue)(_poolMap.get(latch.getkey()));
if (null == pool) {
pool = new ObjectQueue();
_poolMap.put(latch.getkey(), pool);
_poolList.add(latch.getkey());
}
latch.setPool(pool);
if (!pool.queue.isEmpty()) {
allocationQueueIter.remove();
latch.setPair(
(ObjectTimestampPair) pool.queue.removeFirst());
pool.incrementInternalProcessingCount();
_totalIdle--;
synchronized (latch) {
latch.notify();
}
continue;
}
if ((_maxTotal > 0) &&
(_totalActive + _totalIdle + _totalInternalProcessing >= _maxTotal)) {
clearOldest = true;
break;
}
if ((_maxActive < 0 || pool.activeCount + pool.internalProcessingCount < _maxActive) &&
(_maxTotal < 0 || _totalActive + _totalIdle + _totalInternalProcessing < _maxTotal)) {
allocationQueueIter.remove();
latch.setMayCreate(true);
pool.incrementInternalProcessingCount();
synchronized (latch) {
latch.notify();
}
continue;
}
if (_maxActive < 0) {
break;
}
}
}
if (clearOldest) {
clearOldest();
}
}
public void clear() {
Map toDestroy = new HashMap();
synchronized (this) {
for (Iterator it = _poolMap.keySet().iterator(); it.hasNext();) {
Object key = it.next();
ObjectQueue pool = (ObjectQueue)_poolMap.get(key);
List objects = new ArrayList();
objects.addAll(pool.queue);
toDestroy.put(key, objects);
it.remove();
_poolList.remove(key);
_totalIdle = _totalIdle - pool.queue.size();
_totalInternalProcessing =
_totalInternalProcessing + pool.queue.size();
pool.queue.clear();
}
}
destroy(toDestroy, _factory);
}
public void clearOldest() {
final Map toDestroy = new HashMap();
final Map map = new TreeMap();
synchronized (this) {
for (Iterator keyiter = _poolMap.keySet().iterator(); keyiter.hasNext();) {
final Object key = keyiter.next();
final CursorableLinkedList list = ((ObjectQueue)_poolMap.get(key)).queue;
for (Iterator it = list.iterator(); it.hasNext();) {
map.put(it.next(), key);
}
}
Set setPairKeys = map.entrySet();
int itemsToRemove = ((int) (map.size() * 0.15)) + 1;
Iterator iter = setPairKeys.iterator();
while (iter.hasNext() && itemsToRemove > 0) {
Map.Entry entry = (Map.Entry) iter.next();
Object key = entry.getValue();
ObjectTimestampPair pairTimeStamp = (ObjectTimestampPair) entry.getKey();
ObjectQueue objectQueue = (ObjectQueue)_poolMap.get(key);
final CursorableLinkedList list = objectQueue.queue;
list.remove(pairTimeStamp);
if (toDestroy.containsKey(key)) {
((List)toDestroy.get(key)).add(pairTimeStamp);
} else {
List listForKey = new ArrayList();
listForKey.add(pairTimeStamp);
toDestroy.put(key, listForKey);
}
objectQueue.incrementInternalProcessingCount();
_totalIdle--;
itemsToRemove--;
}
}
destroy(toDestroy, _factory);
}
public void clear(Object key) {
Map toDestroy = new HashMap();
final ObjectQueue pool;
synchronized (this) {
pool = (ObjectQueue)(_poolMap.remove(key));
if (pool == null) {
return;
} else {
_poolList.remove(key);
}
List objects = new ArrayList();
objects.addAll(pool.queue);
toDestroy.put(key, objects);
_totalIdle = _totalIdle - pool.queue.size();
_totalInternalProcessing =
_totalInternalProcessing + pool.queue.size();
pool.queue.clear();
}
destroy(toDestroy, _factory);
}
private void destroy(Map m, KeyedPoolableObjectFactory factory) {
for (Iterator entries = m.entrySet().iterator(); entries.hasNext();) {
Map.Entry entry = (Entry) entries.next();
Object key = entry.getKey();
Collection c = (Collection) entry.getValue();
for (Iterator it = c.iterator(); it.hasNext();) {
try {
factory.destroyObject(
key,((ObjectTimestampPair)(it.next())).value);
} catch(Exception e) {
} finally {
synchronized(this) {
ObjectQueue objectQueue =
(ObjectQueue) _poolMap.get(key);
if (objectQueue != null) {
objectQueue.decrementInternalProcessingCount();
if (objectQueue.internalProcessingCount == 0 &&
objectQueue.activeCount == 0 &&
objectQueue.queue.isEmpty()) {
_poolMap.remove(key);
_poolList.remove(key);
}
} else {
_totalInternalProcessing--;
}
}
allocate();
}
}
}
}
public synchronized int getNumActive() {
return _totalActive;
}
public synchronized int getNumIdle() {
return _totalIdle;
}
public synchronized int getNumActive(Object key) {
final ObjectQueue pool = (ObjectQueue)(_poolMap.get(key));
return pool != null ? pool.activeCount : 0;
}
public synchronized int getNumIdle(Object key) {
final ObjectQueue pool = (ObjectQueue)(_poolMap.get(key));
return pool != null ? pool.queue.size() : 0;
}
public void returnObject(Object key, Object obj) throws Exception {
try {
addObjectToPool(key, obj, true);
} catch (Exception e) {
if (_factory != null) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e2) {
}
// TODO: Correctness here depends on control in addObjectToPool.
ObjectQueue pool = (ObjectQueue) (_poolMap.get(key));
if (pool != null) {
synchronized(this) {
pool.decrementActiveCount();
if (pool.queue.isEmpty() &&
pool.activeCount == 0 &&
pool.internalProcessingCount == 0) {
_poolMap.remove(key);
_poolList.remove(key);
}
}
allocate();
}
}
}
}
private void addObjectToPool(Object key, Object obj,
boolean decrementNumActive) throws Exception {
boolean success = true; 
if (_testOnReturn && !_factory.validateObject(key, obj)) {
success = false;
} else {
_factory.passivateObject(key, obj);
}
boolean shouldDestroy = !success;
ObjectQueue pool;
boolean doAllocate = false;
synchronized (this) {
pool = (ObjectQueue) (_poolMap.get(key));
if (null == pool) {
pool = new ObjectQueue();
_poolMap.put(key, pool);
_poolList.add(key);
}
if (isClosed()) {
shouldDestroy = true;
} else {
if (_maxIdle >= 0 && (pool.queue.size() >= _maxIdle)) {
shouldDestroy = true;
} else if (success) {
if (_lifo) {
pool.queue.addFirst(new ObjectTimestampPair(obj));
} else {
pool.queue.addLast(new ObjectTimestampPair(obj));
}
_totalIdle++;
if (decrementNumActive) {
pool.decrementActiveCount();
}
doAllocate = true;
}
}
}
if (doAllocate) {
allocate();
}
if (shouldDestroy) {
try {
_factory.destroyObject(key, obj);
} catch(Exception e) {
}
if (decrementNumActive) {
synchronized(this) {
pool.decrementActiveCount();
if (pool.queue.isEmpty() &&
pool.activeCount == 0 &&
pool.internalProcessingCount == 0) {
_poolMap.remove(key);
_poolList.remove(key);
}
}
allocate();
}
}
}
public void invalidateObject(Object key, Object obj) throws Exception {
try {
_factory.destroyObject(key, obj);
} finally {
synchronized (this) {
ObjectQueue pool = (ObjectQueue) (_poolMap.get(key));
if (null == pool) {
pool = new ObjectQueue();
_poolMap.put(key, pool);
_poolList.add(key);
}
pool.decrementActiveCount();
}
allocate(); 
}
}
public void addObject(Object key) throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
Object obj = _factory.makeObject(key);
try {
assertOpen();
addObjectToPool(key, obj, false);
} catch (IllegalStateException ex) { 
try {
_factory.destroyObject(key, obj);
} catch (Exception ex2) {
}
throw ex;
}
}
public synchronized void preparePool(Object key, boolean populateImmediately) {
ObjectQueue pool = (ObjectQueue)(_poolMap.get(key));
if (null == pool) {
pool = new ObjectQueue();
_poolMap.put(key,pool);
_poolList.add(key);
}
if (populateImmediately) {
try {
ensureMinIdle(key);
}
catch (Exception e) {
}
}
}
public void close() throws Exception {
super.close();
synchronized (this) {
clear();
if (null != _evictionCursor) {
_evictionCursor.close();
_evictionCursor = null;
}
if (null != _evictionKeyCursor) {
_evictionKeyCursor.close();
_evictionKeyCursor = null;
}
startEvictor(-1L);
while(_allocationQueue.size() > 0) {
Latch l = (Latch) _allocationQueue.removeFirst();
synchronized (l) {
l.notify();
}
}
}
}
public void setFactory(KeyedPoolableObjectFactory factory) throws IllegalStateException {
Map toDestroy = new HashMap();
final KeyedPoolableObjectFactory oldFactory = _factory;
synchronized (this) {
assertOpen();
if (0 < getNumActive()) {
throw new IllegalStateException(""Objects are already active"");
} else {
for (Iterator it = _poolMap.keySet().iterator(); it.hasNext();) {
Object key = it.next();
ObjectQueue pool = (ObjectQueue)_poolMap.get(key);
if (pool != null) {
List objects = new ArrayList();
objects.addAll(pool.queue);
toDestroy.put(key, objects);
it.remove();
_poolList.remove(key);
_totalIdle = _totalIdle - pool.queue.size();
_totalInternalProcessing =
_totalInternalProcessing + pool.queue.size();
pool.queue.clear();
}
}
_factory = factory;
}
}
destroy(toDestroy, oldFactory);
}
public void evict() throws Exception {
Object key = null;
boolean testWhileIdle;
long minEvictableIdleTimeMillis;
synchronized (this) {
testWhileIdle = _testWhileIdle;
minEvictableIdleTimeMillis = _minEvictableIdleTimeMillis;
if (_evictionKeyCursor != null &&
_evictionKeyCursor._lastReturned != null) {
key = _evictionKeyCursor._lastReturned.value();
}
}
for (int i=0, m=getNumTests(); i<m; i++) {
final ObjectTimestampPair pair;
synchronized (this) {
if (_poolMap == null || _poolMap.size() == 0) {
continue;
}
if (null == _evictionKeyCursor) {
resetEvictionKeyCursor();
key = null;
}
if (null == _evictionCursor) {
if (_evictionKeyCursor.hasNext()) {
key = _evictionKeyCursor.next();
resetEvictionObjectCursor(key);
} else {
resetEvictionKeyCursor();
if (_evictionKeyCursor != null) {
if (_evictionKeyCursor.hasNext()) {
key = _evictionKeyCursor.next();
resetEvictionObjectCursor(key);
}
}
}
}
if (_evictionCursor == null) {
continue; 
}
if ((_lifo && !_evictionCursor.hasPrevious()) ||
(!_lifo && !_evictionCursor.hasNext())) {
if (_evictionKeyCursor != null) {
if (_evictionKeyCursor.hasNext()) {
key = _evictionKeyCursor.next();
resetEvictionObjectCursor(key);
} else { 
resetEvictionKeyCursor();
if (_evictionKeyCursor != null) {
if (_evictionKeyCursor.hasNext()) {
key = _evictionKeyCursor.next();
resetEvictionObjectCursor(key);
}
}
}
}
}
if ((_lifo && !_evictionCursor.hasPrevious()) ||
(!_lifo && !_evictionCursor.hasNext())) {
continue; 
}
pair = _lifo ?
(ObjectTimestampPair) _evictionCursor.previous() :
(ObjectTimestampPair) _evictionCursor.next();
_evictionCursor.remove();
ObjectQueue objectQueue = (ObjectQueue) _poolMap.get(key);
objectQueue.incrementInternalProcessingCount();
_totalIdle--;
}
boolean removeObject=false;
if ((minEvictableIdleTimeMillis > 0) &&
(System.currentTimeMillis() - pair.tstamp >
minEvictableIdleTimeMillis)) {
removeObject=true;
}
if (testWhileIdle && removeObject == false) {
boolean active = false;
try {
_factory.activateObject(key,pair.value);
active = true;
} catch(Exception e) {
removeObject=true;
}
if (active) {
if (!_factory.validateObject(key,pair.value)) {
removeObject=true;
} else {
try {
_factory.passivateObject(key,pair.value);
} catch(Exception e) {
removeObject=true;
}
}
}
}
if (removeObject) {
try {
_factory.destroyObject(key, pair.value);
} catch(Exception e) {
}
}
synchronized (this) {
ObjectQueue objectQueue =
(ObjectQueue)_poolMap.get(key);
objectQueue.decrementInternalProcessingCount();
if (removeObject) {
if (objectQueue.queue.isEmpty() &&
objectQueue.activeCount == 0 &&
objectQueue.internalProcessingCount == 0) {
_poolMap.remove(key);
_poolList.remove(key);
}
} else {
_evictionCursor.add(pair);
_totalIdle++;
if (_lifo) {
_evictionCursor.previous();
}
}
}
}
allocate();
}
private void resetEvictionKeyCursor() {
if (_evictionKeyCursor != null) {
_evictionKeyCursor.close();
}
_evictionKeyCursor = _poolList.cursor();
if (null != _evictionCursor) {
_evictionCursor.close();
_evictionCursor = null;
}
}
private void resetEvictionObjectCursor(Object key) {
if (_evictionCursor != null) {
_evictionCursor.close();
}
if (_poolMap == null) {
return;
}
ObjectQueue pool = (ObjectQueue) (_poolMap.get(key));
if (pool != null) {
CursorableLinkedList queue = pool.queue;
_evictionCursor = queue.cursor(_lifo ? queue.size() : 0);
}
}
private void ensureMinIdle() throws Exception {
if (_minIdle > 0) {
Object[] keysCopy;
synchronized(this) {
keysCopy = _poolMap.keySet().toArray();
}
for (int i=0; i < keysCopy.length; i++) {
ensureMinIdle(keysCopy[i]);
}
}
}
private void ensureMinIdle(Object key) throws Exception {
ObjectQueue pool;
synchronized(this) {
pool = (ObjectQueue)(_poolMap.get(key));
}
if (pool == null) {
return;
}
int objectDeficit = calculateDeficit(pool, false);
for (int i = 0; i < objectDeficit && calculateDeficit(pool, true) > 0; i++) {
try {
addObject(key);
} finally {
synchronized (this) {
pool.decrementInternalProcessingCount();
}
allocate();
}
}
}
protected synchronized void startEvictor(long delay) {
if (null != _evictor) {
EvictionTimer.cancel(_evictor);
_evictor = null;
}
if (delay > 0) {
_evictor = new Evictor();
EvictionTimer.schedule(_evictor, delay, delay);
}
}
synchronized String debugInfo() {
StringBuffer buf = new StringBuffer();
buf.append(""Active: "").append(getNumActive()).append(""\n"");
buf.append(""Idle: "").append(getNumIdle()).append(""\n"");
Iterator it = _poolMap.keySet().iterator();
while (it.hasNext()) {
Object key = it.next();
buf.append(""\t"").append(key).append("" "").append(_poolMap.get(key)).append(""\n"");
}
return buf.toString();
}
private synchronized int getNumTests() {
if (_numTestsPerEvictionRun >= 0) {
return Math.min(_numTestsPerEvictionRun, _totalIdle);
} else {
return(int)(Math.ceil(_totalIdle/Math.abs((double)_numTestsPerEvictionRun)));
}
}
private synchronized int calculateDeficit(ObjectQueue pool,
boolean incrementInternal) {
int objectDefecit = 0;
objectDefecit = getMinIdle() - pool.queue.size();
if (getMaxActive() > 0) {
int growLimit = Math.max(0, getMaxActive() - pool.activeCount - pool.queue.size() - pool.internalProcessingCount);
objectDefecit = Math.min(objectDefecit, growLimit);
}
if (getMaxTotal() > 0) {
int growLimit = Math.max(0, getMaxTotal() - getNumActive() - getNumIdle() - _totalInternalProcessing);
objectDefecit = Math.min(objectDefecit, growLimit);
}
if (incrementInternal && objectDefecit > 0) {
pool.incrementInternalProcessingCount();
}
return objectDefecit;
}
private class ObjectQueue {
private int activeCount = 0;
private final CursorableLinkedList queue = new CursorableLinkedList();
private int internalProcessingCount = 0;
void incrementActiveCount() {
synchronized (GenericKeyedObjectPool.this) {
_totalActive++;
}
activeCount++;
}
void decrementActiveCount() {
synchronized (GenericKeyedObjectPool.this) {
_totalActive--;
}
if (activeCount > 0) {
activeCount--;
}
}
void incrementInternalProcessingCount() {
synchronized (GenericKeyedObjectPool.this) {
_totalInternalProcessing++;
}
internalProcessingCount++;
}
void decrementInternalProcessingCount() {
synchronized (GenericKeyedObjectPool.this) {
_totalInternalProcessing--;
}
internalProcessingCount--;
}
}
static class ObjectTimestampPair implements Comparable {
//CHECKSTYLE: stop VisibilityModifier
Object value;
long tstamp;
//CHECKSTYLE: resume VisibilityModifier
ObjectTimestampPair(Object val) {
this(val, System.currentTimeMillis());
}
ObjectTimestampPair(Object val, long time) {
value = val;
tstamp = time;
}
public String toString() {
return value + "";"" + tstamp;
}
public int compareTo(Object obj) {
return compareTo((ObjectTimestampPair) obj);
}
public int compareTo(ObjectTimestampPair other) {
final long tstampdiff = this.tstamp - other.tstamp;
if (tstampdiff == 0) {
return System.identityHashCode(this) - System.identityHashCode(other);
} else {
return (int)Math.min(Math.max(tstampdiff, Integer.MIN_VALUE), Integer.MAX_VALUE);
}
}
public Object getValue() {
return value;
}
public long getTstamp() {
return tstamp;
}
}
private class Evictor extends TimerTask {
public void run() {
try {
evict();
} catch(Exception e) {
} catch(OutOfMemoryError oome) {
oome.printStackTrace(System.err);
}
try {
ensureMinIdle();
} catch (Exception e) {
}
}
}
public static class Config {
//CHECKSTYLE: stop VisibilityModifier
public int maxIdle = GenericKeyedObjectPool.DEFAULT_MAX_IDLE;
public int maxActive = GenericKeyedObjectPool.DEFAULT_MAX_ACTIVE;
public int maxTotal = GenericKeyedObjectPool.DEFAULT_MAX_TOTAL;
public int minIdle = GenericKeyedObjectPool.DEFAULT_MIN_IDLE;
public long maxWait = GenericKeyedObjectPool.DEFAULT_MAX_WAIT;
public byte whenExhaustedAction = GenericKeyedObjectPool.DEFAULT_WHEN_EXHAUSTED_ACTION;
public boolean testOnBorrow = GenericKeyedObjectPool.DEFAULT_TEST_ON_BORROW;
public boolean testOnReturn = GenericKeyedObjectPool.DEFAULT_TEST_ON_RETURN;
public boolean testWhileIdle = GenericKeyedObjectPool.DEFAULT_TEST_WHILE_IDLE;
public long timeBetweenEvictionRunsMillis = GenericKeyedObjectPool.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS;
public int numTestsPerEvictionRun =  GenericKeyedObjectPool.DEFAULT_NUM_TESTS_PER_EVICTION_RUN;
public long minEvictableIdleTimeMillis = GenericKeyedObjectPool.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS;
public boolean lifo = GenericKeyedObjectPool.DEFAULT_LIFO;
//CHECKSTYLE: resume VisibilityModifier
}
private static final class Latch {
private final Object _key;
private ObjectQueue _pool;
private ObjectTimestampPair _pair;
private boolean _mayCreate = false;
private Latch(Object key) {
_key = key;
}
private synchronized Object getkey() {
return _key;
}
private synchronized ObjectQueue getPool() {
return _pool;
}
private synchronized void setPool(ObjectQueue pool) {
_pool = pool;
}
private synchronized ObjectTimestampPair getPair() {
return _pair;
}
private synchronized void setPair(ObjectTimestampPair pair) {
_pair = pair;
}
private synchronized boolean mayCreate() {
return _mayCreate;
}
private synchronized void setMayCreate(boolean mayCreate) {
_mayCreate = mayCreate;
}
private synchronized void reset() {
_pair = null;
_mayCreate = false;
}
}
private int _maxIdle = DEFAULT_MAX_IDLE;
private volatile int _minIdle = DEFAULT_MIN_IDLE;
private int _maxActive = DEFAULT_MAX_ACTIVE;
private int _maxTotal = DEFAULT_MAX_TOTAL;
private long _maxWait = DEFAULT_MAX_WAIT;
private byte _whenExhaustedAction = DEFAULT_WHEN_EXHAUSTED_ACTION;
private volatile boolean _testOnBorrow = DEFAULT_TEST_ON_BORROW;
private volatile boolean _testOnReturn = DEFAULT_TEST_ON_RETURN;
private boolean _testWhileIdle = DEFAULT_TEST_WHILE_IDLE;
private long _timeBetweenEvictionRunsMillis = DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS;
private int _numTestsPerEvictionRun =  DEFAULT_NUM_TESTS_PER_EVICTION_RUN;
private long _minEvictableIdleTimeMillis = DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS;
private Map _poolMap = null;
private int _totalActive = 0;
private int _totalIdle = 0;
private int _totalInternalProcessing = 0;
private KeyedPoolableObjectFactory _factory = null;
private Evictor _evictor = null;
private CursorableLinkedList _poolList = null;
private CursorableLinkedList.Cursor _evictionCursor = null;
private CursorableLinkedList.Cursor _evictionKeyCursor = null;
private boolean _lifo = DEFAULT_LIFO;
private LinkedList _allocationQueue = new LinkedList();
","synchronized String debugInfo() {
StringBuffer buf = new StringBuffer();
buf.append(""Active: "").append(getNumActive()).append(""\n"");
buf.append(""Idle: "").append(getNumIdle()).append(""\n"");
Iterator it = _poolMap.keySet().iterator();
while (it.hasNext()) {
Object key = it.next();
buf.append(""\t"").append(key).append("" "").append(_poolMap.get(key)).append(""\n"");
}
return buf.toString();
}","synchronized String debugInfo() {
StringBuffer stringbufferVar1 = stringbufferLiteral2;
stringbufferVar1.append(""Active: "").append(getNumActive()).append(""\n"");
stringbufferVar1.append(""Idle: "").append(getNumIdle()).append(""\n"");
Iterator iteratorVar3 = iteratorLiteral4;
while (iteratorVar3.hasNext()) {
Object objectVar5 = objectLiteral6;
stringbufferVar1.append(""\t"").append(objectVar5).append("" "").append(_poolMap.get(objectVar5)).append(""\n"");
}
return stringbufferVar1.toString();
}"
16987,Multithreaded correctness,NN_NAKED_NOTIFY,FP,pool,852,"latch.notify();
","private synchronized void allocate() {
if (isClosed())
return;
for (; ; ) {
if (!_pool.isEmpty() && !_allocationQueue.isEmpty()) {
Latch latch = (Latch) _allocationQueue.removeFirst();
latch.setPair((ObjectTimestampPair) _pool.removeFirst());
_numInternalProcessing++;
synchronized (latch) {
latch.notify();
}
} else {
break;
}
}
for (; ; ) {
if ((!_allocationQueue.isEmpty()) && (_maxActive < 0 || (_numActive + _numInternalProcessing) < _maxActive)) {
Latch latch = (Latch) _allocationQueue.removeFirst();
latch.setMayCreate(true);
_numInternalProcessing++;
synchronized (latch) {
latch.notify();
}
} else {
break;
}
}
}","private synchronized void allocate() {
if (isClosed())
return;
for (; ; ) {
if (!_pool.isEmpty() && !_allocationQueue.isEmpty()) {
Latch latchVar1 = latchLiteral2;
latchVar1.setPair((ObjectTimestampPair) _pool.removeFirst());
_numInternalProcessing++;
synchronized (latchVar1) {
latchVar1.notify();
}
} else {
break;
}
}
for (; ; ) {
if ((!_allocationQueue.isEmpty()) && (_maxActive < 0 || (_numActive + _numInternalProcessing) < _maxActive)) {
Latch latchVar1 = latchLiteral2;
latchVar1.setMayCreate(true);
_numInternalProcessing++;
synchronized (latchVar1) {
latchVar1.notify();
}
} else {
break;
}
}
}"
16989,Multithreaded correctness,NN_NAKED_NOTIFY,FP,pool,854,"l.notify();
","public void close() throws Exception {
super.close();
synchronized (this) {
clear();
startEvictor(-1L);
while (_allocationQueue.size() > 0) {
Latch l = (Latch) _allocationQueue.removeFirst();
synchronized (l) {
l.notify();
}
}
}
}","public void close() throws Exception {
super.close();
synchronized (this) {
clear();
startEvictor(-1L);
while (_allocationQueue.size() > 0) {
Latch latchVar1 = latchLiteral2;
synchronized (latchVar1) {
latchVar1.notify();
}
}
}
}"
17004,Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,pool,869,protected int _totActive = 0;,protected int _totActive = 0;,protected int intVar1 = intLiteral2;
17042,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,907,"} catch(Exception e) {
","private void addObjectToPool(Object key, Object obj, boolean decrementNumActive) throws Exception {
boolean success = true;
if (_testOnReturn && !_factory.validateObject(key, obj)) {
success = false;
} else {
_factory.passivateObject(key, obj);
}
boolean shouldDestroy = !success;
ObjectQueue pool;
boolean doAllocate = false;
synchronized (this) {
pool = (ObjectQueue) (_poolMap.get(key));
if (null == pool) {
pool = new ObjectQueue();
_poolMap.put(key, pool);
_poolList.add(key);
}
if (isClosed()) {
shouldDestroy = true;
} else {
if (_maxIdle >= 0 && (pool.queue.size() >= _maxIdle)) {
shouldDestroy = true;
} else if (success) {
if (_lifo) {
pool.queue.addFirst(new ObjectTimestampPair(obj));
} else {
pool.queue.addLast(new ObjectTimestampPair(obj));
}
_totalIdle++;
if (decrementNumActive) {
pool.decrementActiveCount();
}
doAllocate = true;
}
}
}
if (doAllocate) {
allocate();
}
if (shouldDestroy) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e) {
}
if (decrementNumActive) {
synchronized (this) {
pool.decrementActiveCount();
if (pool.queue.isEmpty() && pool.activeCount == 0 && pool.internalProcessingCount == 0) {
_poolMap.remove(key);
_poolList.remove(key);
}
}
allocate();
}
}
}","private void addObjectToPool(Object key, Object obj, boolean decrementNumActive) throws Exception {
boolean booleanVar1 = booleanLiteral2;
if (_testOnReturn && !_factory.validateObject(key, obj)) {
booleanVar1 = false;
} else {
_factory.passivateObject(key, obj);
}
boolean booleanVar3 = booleanLiteral4;
ObjectQueue objectqueueVar5;
boolean booleanVar6 = booleanLiteral7;
synchronized (this) {
objectqueueVar5 = (ObjectQueue) (_poolMap.get(key));
if (null == objectqueueVar5) {
objectqueueVar5 = new ObjectQueue();
_poolMap.put(key, objectqueueVar5);
_poolList.add(key);
}
if (isClosed()) {
booleanVar3 = true;
} else {
if (_maxIdle >= 0 && (objectqueueVar5.queue.size() >= _maxIdle)) {
booleanVar3 = true;
} else if (booleanVar1) {
if (_lifo) {
objectqueueVar5.queue.addFirst(new ObjectTimestampPair(obj));
} else {
objectqueueVar5.queue.addLast(new ObjectTimestampPair(obj));
}
_totalIdle++;
if (decrementNumActive) {
objectqueueVar5.decrementActiveCount();
}
booleanVar6 = true;
}
}
}
if (booleanVar6) {
allocate();
}
if (booleanVar3) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e) {
}
if (decrementNumActive) {
synchronized (this) {
objectqueueVar5.decrementActiveCount();
if (objectqueueVar5.queue.isEmpty() && objectqueueVar5.activeCount == 0 && objectqueueVar5.internalProcessingCount == 0) {
_poolMap.remove(key);
_poolList.remove(key);
}
}
allocate();
}
}
}"
17043,Multithreaded correctness,NO_NOTIFY_NOT_NOTIFYALL,FP,pool,908,"latch.notify();
","private void allocate() {
boolean clearOldest = false;
synchronized (this) {
if (isClosed())
return;
Iterator allocationQueueIter = _allocationQueue.iterator();
while (allocationQueueIter.hasNext()) {
Latch latch = (Latch) allocationQueueIter.next();
ObjectQueue pool = (ObjectQueue) (_poolMap.get(latch.getkey()));
if (null == pool) {
pool = new ObjectQueue();
_poolMap.put(latch.getkey(), pool);
_poolList.add(latch.getkey());
}
latch.setPool(pool);
if (!pool.queue.isEmpty()) {
allocationQueueIter.remove();
latch.setPair((ObjectTimestampPair) pool.queue.removeFirst());
pool.incrementInternalProcessingCount();
_totalIdle--;
synchronized (latch) {
latch.notify();
}
continue;
}
if ((_maxTotal > 0) && (_totalActive + _totalIdle + _totalInternalProcessing >= _maxTotal)) {
clearOldest = true;
break;
}
if ((_maxActive < 0 || pool.activeCount + pool.internalProcessingCount < _maxActive) && (_maxTotal < 0 || _totalActive + _totalIdle + _totalInternalProcessing < _maxTotal)) {
allocationQueueIter.remove();
latch.setMayCreate(true);
pool.incrementInternalProcessingCount();
synchronized (latch) {
latch.notify();
}
continue;
}
if (_maxActive < 0) {
break;
}
}
}
if (clearOldest) {
clearOldest();
}
}","private void allocate() {
boolean booleanVar1 = booleanLiteral2;
synchronized (this) {
if (isClosed())
return;
Iterator iteratorVar3 = iteratorLiteral4;
while (iteratorVar3.hasNext()) {
Latch latchVar5 = latchLiteral6;
ObjectQueue objectqueueVar7 = objectqueueLiteral8;
if (null == objectqueueVar7) {
objectqueueVar7 = new ObjectQueue();
_poolMap.put(latchVar5.getkey(), objectqueueVar7);
_poolList.add(latchVar5.getkey());
}
latchVar5.setPool(objectqueueVar7);
if (!objectqueueVar7.queue.isEmpty()) {
iteratorVar3.remove();
latchVar5.setPair((ObjectTimestampPair) objectqueueVar7.queue.removeFirst());
objectqueueVar7.incrementInternalProcessingCount();
_totalIdle--;
synchronized (latchVar5) {
latchVar5.notify();
}
continue;
}
if ((_maxTotal > 0) && (_totalActive + _totalIdle + _totalInternalProcessing >= _maxTotal)) {
booleanVar1 = true;
break;
}
if ((_maxActive < 0 || objectqueueVar7.activeCount + objectqueueVar7.internalProcessingCount < _maxActive) && (_maxTotal < 0 || _totalActive + _totalIdle + _totalInternalProcessing < _maxTotal)) {
iteratorVar3.remove();
latchVar5.setMayCreate(true);
objectqueueVar7.incrementInternalProcessingCount();
synchronized (latchVar5) {
latchVar5.notify();
}
continue;
}
if (_maxActive < 0) {
break;
}
}
}
if (booleanVar1) {
clearOldest();
}
}"
17065,Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,pool,930,protected int _totIdle = 0;,protected int _totIdle = 0;,protected int intVar1 = intLiteral2;
17067,Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,pool,932,protected int _totActive = 0;,protected int _totActive = 0;,protected int intVar1 = intLiteral2;
17078,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,943,"} catch (Exception e) {
","public void close() {
try {
keyedPool.close();
} catch (Exception e) {
}
}","public void close() {
try {
keyedPool.close();
} catch (Exception e) {
}
}"
17086,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,951,"} catch (Exception e) {
","public void returnObject(final T obj) {
synchronized (lock) {
try {
pool.returnObject(obj);
} catch (Exception e) {
}
}
}","public void returnObject(final T obj) {
synchronized (lock) {
try {
pool.returnObject(obj);
} catch (Exception e) {
}
}
}"
17099,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,964,"} catch (Exception e2) {
","@Override
public void returnObject(K key, V obj) throws Exception {
try {
addObjectToPool(key, obj, true);
} catch (Exception e) {
if (_factory != null) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e2) {
}
// TODO: Correctness here depends on control in addObjectToPool.
ObjectQueue pool = (_poolMap.get(key));
if (pool != null) {
synchronized (this) {
pool.decrementActiveCount();
if (pool.queue.isEmpty() && pool.activeCount == 0 && pool.internalProcessingCount == 0) {
_poolMap.remove(key);
_poolList.remove(key);
}
}
allocate();
}
}
}
}","@Override
public void returnObject(K key, V obj) throws Exception {
try {
addObjectToPool(key, obj, true);
} catch (Exception e) {
if (_factory != null) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e2) {
}
// TODO: Correctness here depends on control in addObjectToPool.
ObjectQueue objectqueueVar1 = objectqueueLiteral2;
if (objectqueueVar1 != null) {
synchronized (this) {
objectqueueVar1.decrementActiveCount();
if (objectqueueVar1.queue.isEmpty() && objectqueueVar1.activeCount == 0 && objectqueueVar1.internalProcessingCount == 0) {
_poolMap.remove(key);
_poolList.remove(key);
}
}
allocate();
}
}
}
}"
17102,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,967,"} catch(Exception e) {
","public void evict() throws Exception {
K key = null;
boolean testWhileIdle;
long minEvictableIdleTimeMillis;
synchronized (this) {
testWhileIdle = _testWhileIdle;
minEvictableIdleTimeMillis = _minEvictableIdleTimeMillis;
if (_evictionKeyCursor != null && _evictionKeyCursor._lastReturned != null) {
key = _evictionKeyCursor._lastReturned.value();
}
}
for (int i = 0, m = getNumTests(); i < m; i++) {
final ObjectTimestampPair<V> pair;
synchronized (this) {
if (_poolMap == null || _poolMap.size() == 0) {
continue;
}
if (null == _evictionKeyCursor) {
resetEvictionKeyCursor();
key = null;
}
if (null == _evictionCursor) {
if (_evictionKeyCursor.hasNext()) {
key = _evictionKeyCursor.next();
resetEvictionObjectCursor(key);
} else {
resetEvictionKeyCursor();
if (_evictionKeyCursor != null) {
if (_evictionKeyCursor.hasNext()) {
key = _evictionKeyCursor.next();
resetEvictionObjectCursor(key);
}
}
}
}
if (_evictionCursor == null) {
continue;
}
if ((_lifo && !_evictionCursor.hasPrevious()) || (!_lifo && !_evictionCursor.hasNext())) {
if (_evictionKeyCursor != null) {
if (_evictionKeyCursor.hasNext()) {
key = _evictionKeyCursor.next();
resetEvictionObjectCursor(key);
} else {
resetEvictionKeyCursor();
if (_evictionKeyCursor != null) {
if (_evictionKeyCursor.hasNext()) {
key = _evictionKeyCursor.next();
resetEvictionObjectCursor(key);
}
}
}
}
}
if ((_lifo && !_evictionCursor.hasPrevious()) || (!_lifo && !_evictionCursor.hasNext())) {
continue;
}
pair = _lifo ? _evictionCursor.previous() : _evictionCursor.next();
_evictionCursor.remove();
ObjectQueue objectQueue = _poolMap.get(key);
objectQueue.incrementInternalProcessingCount();
_totalIdle--;
}
boolean removeObject = false;
if ((minEvictableIdleTimeMillis > 0) && (System.currentTimeMillis() - pair.tstamp > minEvictableIdleTimeMillis)) {
removeObject = true;
}
if (testWhileIdle && removeObject == false) {
boolean active = false;
try {
_factory.activateObject(key, pair.value);
active = true;
} catch (Exception e) {
removeObject = true;
}
if (active) {
if (!_factory.validateObject(key, pair.value)) {
removeObject = true;
} else {
try {
_factory.passivateObject(key, pair.value);
} catch (Exception e) {
removeObject = true;
}
}
}
}
if (removeObject) {
try {
_factory.destroyObject(key, pair.value);
} catch (Exception e) {
}
}
synchronized (this) {
ObjectQueue objectQueue = _poolMap.get(key);
objectQueue.decrementInternalProcessingCount();
if (removeObject) {
if (objectQueue.queue.isEmpty() && objectQueue.activeCount == 0 && objectQueue.internalProcessingCount == 0) {
_poolMap.remove(key);
_poolList.remove(key);
}
} else {
_evictionCursor.add(pair);
_totalIdle++;
if (_lifo) {
_evictionCursor.previous();
}
}
}
}
allocate();
}","public void evict() throws Exception {
K kVar1 = kLiteral2;
boolean booleanVar3;
long longVar4;
synchronized (this) {
booleanVar3 = _testWhileIdle;
longVar4 = _minEvictableIdleTimeMillis;
if (_evictionKeyCursor != null && _evictionKeyCursor._lastReturned != null) {
kVar1 = _evictionKeyCursor._lastReturned.value();
}
}
for (int intVar15 = intLiteral16, intVar17 = intLiteral18; intVar5 < intLiteral1; intVar5++) {
final ObjectTimestampPair<V> objecttimestamppair<v>Var9;
synchronized (this) {
if (_poolMap == null || _poolMap.size() == 0) {
continue;
}
if (null == _evictionKeyCursor) {
resetEvictionKeyCursor();
kVar1 = null;
}
if (null == _evictionCursor) {
if (_evictionKeyCursor.hasNext()) {
kVar1 = _evictionKeyCursor.next();
resetEvictionObjectCursor(kVar1);
} else {
resetEvictionKeyCursor();
if (_evictionKeyCursor != null) {
if (_evictionKeyCursor.hasNext()) {
kVar1 = _evictionKeyCursor.next();
resetEvictionObjectCursor(kVar1);
}
}
}
}
if (_evictionCursor == null) {
continue;
}
if ((_lifo && !_evictionCursor.hasPrevious()) || (!_lifo && !_evictionCursor.hasNext())) {
if (_evictionKeyCursor != null) {
if (_evictionKeyCursor.hasNext()) {
kVar1 = _evictionKeyCursor.next();
resetEvictionObjectCursor(kVar1);
} else {
resetEvictionKeyCursor();
if (_evictionKeyCursor != null) {
if (_evictionKeyCursor.hasNext()) {
kVar1 = _evictionKeyCursor.next();
resetEvictionObjectCursor(kVar1);
}
}
}
}
}
if ((_lifo && !_evictionCursor.hasPrevious()) || (!_lifo && !_evictionCursor.hasNext())) {
continue;
}
objecttimestamppair<v>Var9 = _lifo ? _evictionCursor.previous() : _evictionCursor.next();
_evictionCursor.remove();
ObjectQueue objectqueueVar10 = objectqueueLiteral11;
objectqueueVar10.incrementInternalProcessingCount();
_totalIdle--;
}
boolean booleanVar12 = booleanLiteral13;
if ((longVar4 > 0) && (System.currentTimeMillis() - objecttimestamppair<v>Var9.tstamp > longVar4)) {
booleanVar12 = true;
}
if (booleanVar3 && booleanVar12 == false) {
boolean booleanVar14 = booleanLiteral13;
try {
_factory.activateObject(kVar1, objecttimestamppair<v>Var9.value);
booleanVar14 = true;
} catch (Exception e) {
booleanVar12 = true;
}
if (booleanVar14) {
if (!_factory.validateObject(kVar1, objecttimestamppair<v>Var9.value)) {
booleanVar12 = true;
} else {
try {
_factory.passivateObject(kVar1, objecttimestamppair<v>Var9.value);
} catch (Exception e) {
booleanVar12 = true;
}
}
}
}
if (booleanVar12) {
try {
_factory.destroyObject(kVar1, objecttimestamppair<v>Var9.value);
} catch (Exception e) {
}
}
synchronized (this) {
ObjectQueue objectqueueVar10 = objectqueueLiteral11;
objectqueueVar10.decrementInternalProcessingCount();
if (booleanVar12) {
if (objectqueueVar10.queue.isEmpty() && objectqueueVar10.activeCount == 0 && objectqueueVar10.internalProcessingCount == 0) {
_poolMap.remove(kVar1);
_poolList.remove(kVar1);
}
} else {
_evictionCursor.add(objecttimestamppair<v>Var9);
_totalIdle++;
if (_lifo) {
_evictionCursor.previous();
}
}
}
}
allocate();
}"
17119,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,984,"} catch(Exception e) {
","@Override
public void run() {
try {
evict();
} catch (Exception e) {
} catch (OutOfMemoryError oome) {
oome.printStackTrace(System.err);
}
try {
ensureMinIdle();
} catch (Exception e) {
}
}","@Override
public void run() {
try {
evict();
} catch (Exception e) {
} catch (OutOfMemoryError oome) {
oome.printStackTrace(System.err);
}
try {
ensureMinIdle();
} catch (Exception e) {
}
}"
17253,DODGY_CODE,RI_REDUNDANT_INTERFACES,FP,pool,1118,"this((KeyedPoolableObjectFactory)null,DEFAULT_MAX_SLEEPING,DEFAULT_INIT_SLEEPING_CAPACITY);
}
public StackKeyedObjectPool(int max) {
this((KeyedPoolableObjectFactory)null,max,DEFAULT_INIT_SLEEPING_CAPACITY);
}
public StackKeyedObjectPool(int max, int init) {
this((KeyedPoolableObjectFactory)null,max,init);
}
public StackKeyedObjectPool(KeyedPoolableObjectFactory factory) {
this(factory,DEFAULT_MAX_SLEEPING);
}
public StackKeyedObjectPool(KeyedPoolableObjectFactory factory, int max) {
this(factory,max,DEFAULT_INIT_SLEEPING_CAPACITY);
}
public StackKeyedObjectPool(KeyedPoolableObjectFactory factory, int max, int init) {
_factory = factory;
_maxSleeping = (max < 0 ? DEFAULT_MAX_SLEEPING : max);
_initSleepingCapacity = (init < 1 ? DEFAULT_INIT_SLEEPING_CAPACITY : init);
_pools = new HashMap();
_activeCount = new HashMap();
}
public synchronized Object borrowObject(Object key) throws Exception {
assertOpen();
Stack stack = (Stack)(_pools.get(key));
if(null == stack) {
stack = new Stack();
stack.ensureCapacity( _initSleepingCapacity > _maxSleeping ? _maxSleeping : _initSleepingCapacity);
_pools.put(key,stack);
}
Object obj = null;
do {
boolean newlyMade = false;
if (!stack.empty()) {
obj = stack.pop();
_totIdle--;
} else {
if(null == _factory) {
throw new NoSuchElementException(""pools without a factory cannot create new objects as needed."");
} else {
obj = _factory.makeObject(key);
newlyMade = true;
}
}
if (null != _factory && null != obj) {
try {
_factory.activateObject(key, obj);
if (!_factory.validateObject(key, obj)) {
throw new Exception(""ValidateObject failed"");
}
} catch (Throwable t) {
try {
_factory.destroyObject(key,obj);
} catch (Throwable t2) {
} finally {
obj = null;
}
if (newlyMade) {
throw new NoSuchElementException(
""Could not create a validated object, cause: "" +
t.getMessage());
}
}
}
} while (obj == null);
incrementActiveCount(key);
return obj;
}
public synchronized void returnObject(Object key, Object obj) throws Exception {
decrementActiveCount(key);
if (null != _factory) {
if (_factory.validateObject(key, obj)) {
try {
_factory.passivateObject(key, obj);
} catch (Exception ex) {
_factory.destroyObject(key, obj);
return;
}
} else {
return;
}
}
if (isClosed()) {
if (null != _factory) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e) {
}
}
return;
}
Stack stack = (Stack)_pools.get(key);
if(null == stack) {
stack = new Stack();
stack.ensureCapacity( _initSleepingCapacity > _maxSleeping ? _maxSleeping : _initSleepingCapacity);
_pools.put(key,stack);
}
final int stackSize = stack.size();
if (stackSize >= _maxSleeping) {
final Object staleObj;
if (stackSize > 0) {
staleObj = stack.remove(0);
_totIdle--;
} else {
staleObj = obj;
}
if(null != _factory) {
try {
_factory.destroyObject(key, staleObj);
} catch (Exception e) {
}
}
}
stack.push(obj);
_totIdle++;
}
public synchronized void invalidateObject(Object key, Object obj) throws Exception {
decrementActiveCount(key);
if(null != _factory) {
_factory.destroyObject(key,obj);
}
notifyAll(); 
}
public synchronized void addObject(Object key) throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
Object obj = _factory.makeObject(key);
try {
if (!_factory.validateObject(key, obj)) {
return;
}
} catch (Exception e) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e2) {
}
return;
}
_factory.passivateObject(key, obj);
Stack stack = (Stack)_pools.get(key);
if(null == stack) {
stack = new Stack();
stack.ensureCapacity( _initSleepingCapacity > _maxSleeping ? _maxSleeping : _initSleepingCapacity);
_pools.put(key,stack);
}
final int stackSize = stack.size();
if (stackSize >= _maxSleeping) {
final Object staleObj;
if (stackSize > 0) {
staleObj = stack.remove(0);
_totIdle--;
} else {
staleObj = obj;
}
try {
_factory.destroyObject(key, staleObj);
} catch (Exception e) {
if (obj == staleObj) {
throw e;
}
}
} else {
stack.push(obj);
_totIdle++;
}
}
public synchronized int getNumIdle() {
return _totIdle;
}
public synchronized int getNumActive() {
return _totActive;
}
public synchronized int getNumActive(Object key) {
return getActiveCount(key);
}
public synchronized int getNumIdle(Object key) {
try {
return((Stack)(_pools.get(key))).size();
} catch(Exception e) {
return 0;
}
}
public synchronized void clear() {
Iterator it = _pools.keySet().iterator();
while(it.hasNext()) {
Object key = it.next();
Stack stack = (Stack)(_pools.get(key));
destroyStack(key,stack);
}
_totIdle = 0;
_pools.clear();
_activeCount.clear();
}
public synchronized void clear(Object key) {
Stack stack = (Stack)(_pools.remove(key));
destroyStack(key,stack);
}
private synchronized void destroyStack(Object key, Stack stack) {
if(null == stack) {
return;
} else {
if(null != _factory) {
Iterator it = stack.iterator();
while(it.hasNext()) {
try {
_factory.destroyObject(key,it.next());
} catch(Exception e) {
}
}
}
_totIdle -= stack.size();
_activeCount.remove(key);
stack.clear();
}
}
public synchronized String toString() {
StringBuffer buf = new StringBuffer();
buf.append(getClass().getName());
buf.append("" contains "").append(_pools.size()).append("" distinct pools: "");
Iterator it = _pools.keySet().iterator();
while(it.hasNext()) {
Object key = it.next();
buf.append("" |"").append(key).append(""|="");
Stack s = (Stack)(_pools.get(key));
buf.append(s.size());
}
return buf.toString();
}
public void close() throws Exception {
super.close();
clear();
}
public synchronized void setFactory(KeyedPoolableObjectFactory factory) throws IllegalStateException {
if(0 < getNumActive()) {
throw new IllegalStateException(""Objects are already active"");
} else {
clear();
_factory = factory;
}
}
private int getActiveCount(Object key) {
try {
return ((Integer)_activeCount.get(key)).intValue();
} catch(NoSuchElementException e) {
return 0;
} catch(NullPointerException e) {
return 0;
}
}
private void incrementActiveCount(Object key) {
_totActive++;
Integer old = (Integer)(_activeCount.get(key));
if(null == old) {
_activeCount.put(key,new Integer(1));
} else {
_activeCount.put(key,new Integer(old.intValue() + 1));
}
}
private void decrementActiveCount(Object key) {
_totActive--;
Integer active = (Integer)(_activeCount.get(key));
if(null == active) {
} else if(active.intValue() <= 1) {
_activeCount.remove(key);
} else {
_activeCount.put(key, new Integer(active.intValue() - 1));
}
}
protected static final int DEFAULT_MAX_SLEEPING  = 8;
protected static final int DEFAULT_INIT_SLEEPING_CAPACITY = 4;
protected HashMap _pools = null;
protected KeyedPoolableObjectFactory _factory = null;
protected int _maxSleeping = DEFAULT_MAX_SLEEPING;
protected int _initSleepingCapacity = DEFAULT_INIT_SLEEPING_CAPACITY;
protected int _totActive = 0;
protected int _totIdle = 0;
protected HashMap _activeCount = null;
","public synchronized void returnObject(Object key, Object obj) throws Exception {
decrementActiveCount(key);
if (null != _factory) {
if (_factory.validateObject(key, obj)) {
try {
_factory.passivateObject(key, obj);
} catch (Exception ex) {
_factory.destroyObject(key, obj);
return;
}
} else {
return;
}
}
if (isClosed()) {
if (null != _factory) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e) {
}
}
return;
}
Stack stack = (Stack) _pools.get(key);
if (null == stack) {
stack = new Stack();
stack.ensureCapacity(_initSleepingCapacity > _maxSleeping ? _maxSleeping : _initSleepingCapacity);
_pools.put(key, stack);
}
final int stackSize = stack.size();
if (stackSize >= _maxSleeping) {
final Object staleObj;
if (stackSize > 0) {
staleObj = stack.remove(0);
_totIdle--;
} else {
staleObj = obj;
}
if (null != _factory) {
try {
_factory.destroyObject(key, staleObj);
} catch (Exception e) {
}
}
}
stack.push(obj);
_totIdle++;
}","public synchronized void returnObject(Object key, Object obj) throws Exception {
decrementActiveCount(key);
if (null != _factory) {
if (_factory.validateObject(key, obj)) {
try {
_factory.passivateObject(key, obj);
} catch (Exception ex) {
_factory.destroyObject(key, obj);
return;
}
} else {
return;
}
}
if (isClosed()) {
if (null != _factory) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e) {
}
}
return;
}
Stack stackVar1 = stackLiteral2;
if (null == stackVar1) {
stackVar1 = new Stack();
stackVar1.ensureCapacity(_initSleepingCapacity > _maxSleeping ? _maxSleeping : _initSleepingCapacity);
_pools.put(key, stackVar1);
}
final int intVar3 = intLiteral4;
if (intVar3 >= _maxSleeping) {
final Object objectVar5;
if (intVar3 > 0) {
objectVar5 = stackVar1.remove(0);
_totIdle--;
} else {
objectVar5 = obj;
}
if (null != _factory) {
try {
_factory.destroyObject(key, objectVar5);
} catch (Exception e) {
}
}
}
stackVar1.push(obj);
_totIdle++;
}"
17260,DODGY_CODE,REC_CATCH_EXCEPTION,FP,pool,1125,"} catch (Exception e) {
","public void run() {
boolean success = false;
try {
if (keyedPool.getNumIdle(key) < minIdle) {
keyedPool.addObject(key);
}
success = true;
} catch (Exception e) {
cancel();
} finally {
if (!success) {
cancel();
}
}
}","public void run() {
boolean booleanVar1 = booleanLiteral2;
try {
if (keyedPool.getNumIdle(key) < minIdle) {
keyedPool.addObject(key);
}
booleanVar1 = true;
} catch (Exception e) {
cancel();
} finally {
if (!booleanVar1) {
cancel();
}
}
}"
17270,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1135,"} catch (Exception e) {
","public void returnObject(final Object obj) {
if (type.isInstance(obj)) {
try {
pool.returnObject(obj);
} catch (Exception e) {
}
} else {
throw new ClassCastException(""Returned object is not of type: "" + type.getName() + "" was: "" + obj);
}
}","public void returnObject(final Object obj) {
if (type.isInstance(obj)) {
try {
pool.returnObject(obj);
} catch (Exception e) {
}
} else {
throw new ClassCastException(""Returned object is not of type: "" + type.getName() + "" was: "" + obj);
}
}"
17275,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1140,"} catch (Exception e) {
","public void invalidateObject(final Object obj) {
synchronized (lock) {
try {
pool.invalidateObject(obj);
} catch (Exception e) {
}
}
}","public void invalidateObject(final Object obj) {
synchronized (lock) {
try {
pool.invalidateObject(obj);
} catch (Exception e) {
}
}
}"
17303,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1168,"} catch(Exception e) {
","public synchronized void addObject() throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
Object obj = _factory.makeObject();
boolean success = true;
if (!_factory.validateObject(obj)) {
success = false;
} else {
_factory.passivateObject(obj);
}
boolean shouldDestroy = !success;
if (success) {
_pool.add(new SoftReference(obj, refQueue));
notifyAll();
}
if (shouldDestroy) {
try {
_factory.destroyObject(obj);
} catch (Exception e) {
}
}
}","public synchronized void addObject() throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
Object objectVar1 = objectLiteral2;
boolean booleanVar3 = booleanLiteral4;
if (!_factory.validateObject(objectVar1)) {
booleanVar3 = false;
} else {
_factory.passivateObject(objectVar1);
}
boolean booleanVar5 = booleanLiteral6;
if (booleanVar3) {
_pool.add(new SoftReference(objectVar1, refQueue));
notifyAll();
}
if (booleanVar5) {
try {
_factory.destroyObject(objectVar1);
} catch (Exception e) {
}
}
}"
17316,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1181,"} catch(Exception e) {
","public synchronized void clear() {
if (null != _factory) {
Iterator it = _pool.iterator();
while (it.hasNext()) {
try {
_factory.destroyObject(it.next());
} catch (Exception e) {
}
}
}
_pool.clear();
}","public synchronized void clear() {
if (null != _factory) {
Iterator iteratorVar1 = iteratorLiteral2;
while (iteratorVar1.hasNext()) {
try {
_factory.destroyObject(iteratorVar1.next());
} catch (Exception e) {
}
}
}
_pool.clear();
}"
17343,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1208,"} catch(Exception e) {
","private void addObjectToPool(Object key, Object obj, boolean decrementNumActive) throws Exception {
boolean success = true;
if (_testOnReturn && !_factory.validateObject(key, obj)) {
success = false;
} else {
_factory.passivateObject(key, obj);
}
boolean shouldDestroy = !success;
ObjectQueue pool;
boolean doAllocate = false;
synchronized (this) {
pool = (ObjectQueue) (_poolMap.get(key));
if (null == pool) {
pool = new ObjectQueue();
_poolMap.put(key, pool);
_poolList.add(key);
}
if (isClosed()) {
shouldDestroy = true;
} else {
if (_maxIdle >= 0 && (pool.queue.size() >= _maxIdle)) {
shouldDestroy = true;
} else if (success) {
if (_lifo) {
pool.queue.addFirst(new ObjectTimestampPair(obj));
} else {
pool.queue.addLast(new ObjectTimestampPair(obj));
}
_totalIdle++;
if (decrementNumActive) {
pool.decrementActiveCount();
}
doAllocate = true;
}
}
}
if (doAllocate) {
allocate();
}
if (shouldDestroy) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e) {
}
if (decrementNumActive) {
synchronized (this) {
pool.decrementActiveCount();
if (pool.queue.isEmpty() && pool.activeCount == 0 && pool.internalProcessingCount == 0) {
_poolMap.remove(key);
_poolList.remove(key);
}
}
allocate();
}
}
}","private void addObjectToPool(Object key, Object obj, boolean decrementNumActive) throws Exception {
boolean booleanVar1 = booleanLiteral2;
if (_testOnReturn && !_factory.validateObject(key, obj)) {
booleanVar1 = false;
} else {
_factory.passivateObject(key, obj);
}
boolean booleanVar3 = booleanLiteral4;
ObjectQueue objectqueueVar5;
boolean booleanVar6 = booleanLiteral7;
synchronized (this) {
objectqueueVar5 = (ObjectQueue) (_poolMap.get(key));
if (null == objectqueueVar5) {
objectqueueVar5 = new ObjectQueue();
_poolMap.put(key, objectqueueVar5);
_poolList.add(key);
}
if (isClosed()) {
booleanVar3 = true;
} else {
if (_maxIdle >= 0 && (objectqueueVar5.queue.size() >= _maxIdle)) {
booleanVar3 = true;
} else if (booleanVar1) {
if (_lifo) {
objectqueueVar5.queue.addFirst(new ObjectTimestampPair(obj));
} else {
objectqueueVar5.queue.addLast(new ObjectTimestampPair(obj));
}
_totalIdle++;
if (decrementNumActive) {
objectqueueVar5.decrementActiveCount();
}
booleanVar6 = true;
}
}
}
if (booleanVar6) {
allocate();
}
if (booleanVar3) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e) {
}
if (decrementNumActive) {
synchronized (this) {
objectqueueVar5.decrementActiveCount();
if (objectqueueVar5.queue.isEmpty() && objectqueueVar5.activeCount == 0 && objectqueueVar5.internalProcessingCount == 0) {
_poolMap.remove(key);
_poolList.remove(key);
}
}
allocate();
}
}
}"
17350,DODGY_CODE,RI_REDUNDANT_INTERFACES,FP,pool,1215,"public class GenericKeyedObjectPool extends BaseKeyedObjectPool implements KeyedObjectPool {
public static final byte WHEN_EXHAUSTED_FAIL   = 0;
public static final byte WHEN_EXHAUSTED_BLOCK  = 1;
public static final byte WHEN_EXHAUSTED_GROW   = 2;
public static final int DEFAULT_MAX_IDLE  = 8;
public static final int DEFAULT_MAX_ACTIVE  = 8;
public static final int DEFAULT_MAX_TOTAL  = -1;
public static final byte DEFAULT_WHEN_EXHAUSTED_ACTION = WHEN_EXHAUSTED_BLOCK;
public static final long DEFAULT_MAX_WAIT = -1L;
public static final boolean DEFAULT_TEST_ON_BORROW = false;
public static final boolean DEFAULT_TEST_ON_RETURN = false;
public static final boolean DEFAULT_TEST_WHILE_IDLE = false;
public static final long DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS = -1L;
public static final int DEFAULT_NUM_TESTS_PER_EVICTION_RUN = 3;
public static final long DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS = 1000L * 60L * 30L;
public static final int DEFAULT_MIN_IDLE = 0;
public static final boolean DEFAULT_LIFO = true;
public GenericKeyedObjectPool() {
this(null, DEFAULT_MAX_ACTIVE, DEFAULT_WHEN_EXHAUSTED_ACTION, DEFAULT_MAX_WAIT, DEFAULT_MAX_IDLE,
DEFAULT_TEST_ON_BORROW, DEFAULT_TEST_ON_RETURN, DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS,
DEFAULT_NUM_TESTS_PER_EVICTION_RUN, DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS, DEFAULT_TEST_WHILE_IDLE);
}
public GenericKeyedObjectPool(KeyedPoolableObjectFactory factory) {
this(factory, DEFAULT_MAX_ACTIVE, DEFAULT_WHEN_EXHAUSTED_ACTION, DEFAULT_MAX_WAIT, DEFAULT_MAX_IDLE,
DEFAULT_TEST_ON_BORROW, DEFAULT_TEST_ON_RETURN, DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS,
DEFAULT_NUM_TESTS_PER_EVICTION_RUN, DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS, DEFAULT_TEST_WHILE_IDLE);
}
public GenericKeyedObjectPool(KeyedPoolableObjectFactory factory, GenericKeyedObjectPool.Config config) {
this(factory, config.maxActive, config.whenExhaustedAction, config.maxWait, config.maxIdle, config.maxTotal,
config.minIdle, config.testOnBorrow, config.testOnReturn, config.timeBetweenEvictionRunsMillis,
config.numTestsPerEvictionRun, config.minEvictableIdleTimeMillis, config.testWhileIdle, config.lifo);
}
public GenericKeyedObjectPool(KeyedPoolableObjectFactory factory, int maxActive) {
this(factory,maxActive, DEFAULT_WHEN_EXHAUSTED_ACTION, DEFAULT_MAX_WAIT, DEFAULT_MAX_IDLE,
DEFAULT_TEST_ON_BORROW, DEFAULT_TEST_ON_RETURN, DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS,
DEFAULT_NUM_TESTS_PER_EVICTION_RUN, DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS, DEFAULT_TEST_WHILE_IDLE);
}
public GenericKeyedObjectPool(KeyedPoolableObjectFactory factory, int maxActive, byte whenExhaustedAction,
long maxWait) {
this(factory, maxActive, whenExhaustedAction, maxWait, DEFAULT_MAX_IDLE, DEFAULT_TEST_ON_BORROW,
DEFAULT_TEST_ON_RETURN, DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS, DEFAULT_NUM_TESTS_PER_EVICTION_RUN,
DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS, DEFAULT_TEST_WHILE_IDLE);
}
public GenericKeyedObjectPool(KeyedPoolableObjectFactory factory, int maxActive, byte whenExhaustedAction,
long maxWait, boolean testOnBorrow, boolean testOnReturn) {
this(factory, maxActive, whenExhaustedAction, maxWait, DEFAULT_MAX_IDLE,testOnBorrow,testOnReturn,
DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS, DEFAULT_NUM_TESTS_PER_EVICTION_RUN,
DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS, DEFAULT_TEST_WHILE_IDLE);
}
public GenericKeyedObjectPool(KeyedPoolableObjectFactory factory, int maxActive, byte whenExhaustedAction,
long maxWait, int maxIdle) {
this(factory, maxActive, whenExhaustedAction, maxWait, maxIdle, DEFAULT_TEST_ON_BORROW, DEFAULT_TEST_ON_RETURN,
DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS, DEFAULT_NUM_TESTS_PER_EVICTION_RUN,
DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS, DEFAULT_TEST_WHILE_IDLE);
}
public GenericKeyedObjectPool(KeyedPoolableObjectFactory factory, int maxActive, byte whenExhaustedAction,
long maxWait, int maxIdle, boolean testOnBorrow, boolean testOnReturn) {
this(factory, maxActive, whenExhaustedAction, maxWait, maxIdle, testOnBorrow, testOnReturn,
DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS, DEFAULT_NUM_TESTS_PER_EVICTION_RUN,
DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS, DEFAULT_TEST_WHILE_IDLE);
}
public GenericKeyedObjectPool(KeyedPoolableObjectFactory factory, int maxActive, byte whenExhaustedAction,
long maxWait, int maxIdle, boolean testOnBorrow, boolean testOnReturn, long timeBetweenEvictionRunsMillis,
int numTestsPerEvictionRun, long minEvictableIdleTimeMillis, boolean testWhileIdle) {
this(factory, maxActive, whenExhaustedAction, maxWait, maxIdle, GenericKeyedObjectPool.DEFAULT_MAX_TOTAL,
testOnBorrow, testOnReturn, timeBetweenEvictionRunsMillis, numTestsPerEvictionRun,
minEvictableIdleTimeMillis, testWhileIdle);
}
public GenericKeyedObjectPool(KeyedPoolableObjectFactory factory, int maxActive, byte whenExhaustedAction,
long maxWait, int maxIdle, int maxTotal, boolean testOnBorrow, boolean testOnReturn,
long timeBetweenEvictionRunsMillis, int numTestsPerEvictionRun, long minEvictableIdleTimeMillis,
boolean testWhileIdle) {
this(factory, maxActive, whenExhaustedAction, maxWait, maxIdle, maxTotal,
GenericKeyedObjectPool.DEFAULT_MIN_IDLE, testOnBorrow, testOnReturn, timeBetweenEvictionRunsMillis,
numTestsPerEvictionRun, minEvictableIdleTimeMillis, testWhileIdle);
}
public GenericKeyedObjectPool(KeyedPoolableObjectFactory factory, int maxActive, byte whenExhaustedAction,
long maxWait, int maxIdle, int maxTotal, int minIdle, boolean testOnBorrow, boolean testOnReturn,
long timeBetweenEvictionRunsMillis, int numTestsPerEvictionRun, long minEvictableIdleTimeMillis,
boolean testWhileIdle) {
this(factory, maxActive, whenExhaustedAction, maxWait, maxIdle, maxTotal, minIdle, testOnBorrow, testOnReturn,
timeBetweenEvictionRunsMillis, numTestsPerEvictionRun, minEvictableIdleTimeMillis, testWhileIdle,
DEFAULT_LIFO);
}
public GenericKeyedObjectPool(KeyedPoolableObjectFactory factory, int maxActive, byte whenExhaustedAction,
long maxWait, int maxIdle, int maxTotal, int minIdle, boolean testOnBorrow, boolean testOnReturn,
long timeBetweenEvictionRunsMillis, int numTestsPerEvictionRun, long minEvictableIdleTimeMillis,
boolean testWhileIdle, boolean lifo) {
_factory = factory;
_maxActive = maxActive;
_lifo = lifo;
switch (whenExhaustedAction) {
case WHEN_EXHAUSTED_BLOCK:
case WHEN_EXHAUSTED_FAIL:
case WHEN_EXHAUSTED_GROW:
_whenExhaustedAction = whenExhaustedAction;
break;
default:
throw new IllegalArgumentException(""whenExhaustedAction "" + whenExhaustedAction + "" not recognized."");
}
_maxWait = maxWait;
_maxIdle = maxIdle;
_maxTotal = maxTotal;
_minIdle = minIdle;
_testOnBorrow = testOnBorrow;
_testOnReturn = testOnReturn;
_timeBetweenEvictionRunsMillis = timeBetweenEvictionRunsMillis;
_numTestsPerEvictionRun = numTestsPerEvictionRun;
_minEvictableIdleTimeMillis = minEvictableIdleTimeMillis;
_testWhileIdle = testWhileIdle;
_poolMap = new HashMap();
_poolList = new CursorableLinkedList();
startEvictor(_timeBetweenEvictionRunsMillis);
}
public synchronized int getMaxActive() {
return _maxActive;
}
public void setMaxActive(int maxActive) {
synchronized(this) {
_maxActive = maxActive;
}
allocate();
}
public synchronized int getMaxTotal() {
return _maxTotal;
}
public void setMaxTotal(int maxTotal) {
synchronized(this) {
_maxTotal = maxTotal;
}
allocate();
}
public synchronized byte getWhenExhaustedAction() {
return _whenExhaustedAction;
}
public void setWhenExhaustedAction(byte whenExhaustedAction) {
synchronized(this) {
switch(whenExhaustedAction) {
case WHEN_EXHAUSTED_BLOCK:
case WHEN_EXHAUSTED_FAIL:
case WHEN_EXHAUSTED_GROW:
_whenExhaustedAction = whenExhaustedAction;
break;
default:
throw new IllegalArgumentException(""whenExhaustedAction "" + whenExhaustedAction + "" not recognized."");
}
}
allocate();
}
public synchronized long getMaxWait() {
return _maxWait;
}
public void setMaxWait(long maxWait) {
synchronized(this) {
_maxWait = maxWait;
}
allocate();
}
public synchronized int getMaxIdle() {
return _maxIdle;
}
public void setMaxIdle(int maxIdle) {
synchronized(this) {
_maxIdle = maxIdle;
}
allocate();
}
public void setMinIdle(int poolSize) {
_minIdle = poolSize;
}
public int getMinIdle() {
return _minIdle;
}
public boolean getTestOnBorrow() {
return _testOnBorrow;
}
public void setTestOnBorrow(boolean testOnBorrow) {
_testOnBorrow = testOnBorrow;
}
public boolean getTestOnReturn() {
return _testOnReturn;
}
public void setTestOnReturn(boolean testOnReturn) {
_testOnReturn = testOnReturn;
}
public synchronized long getTimeBetweenEvictionRunsMillis() {
return _timeBetweenEvictionRunsMillis;
}
public synchronized void setTimeBetweenEvictionRunsMillis(long timeBetweenEvictionRunsMillis) {
_timeBetweenEvictionRunsMillis = timeBetweenEvictionRunsMillis;
startEvictor(_timeBetweenEvictionRunsMillis);
}
public synchronized int getNumTestsPerEvictionRun() {
return _numTestsPerEvictionRun;
}
public synchronized void setNumTestsPerEvictionRun(int numTestsPerEvictionRun) {
_numTestsPerEvictionRun = numTestsPerEvictionRun;
}
public synchronized long getMinEvictableIdleTimeMillis() {
return _minEvictableIdleTimeMillis;
}
public synchronized void setMinEvictableIdleTimeMillis(long minEvictableIdleTimeMillis) {
_minEvictableIdleTimeMillis = minEvictableIdleTimeMillis;
}
public synchronized boolean getTestWhileIdle() {
return _testWhileIdle;
}
public synchronized void setTestWhileIdle(boolean testWhileIdle) {
_testWhileIdle = testWhileIdle;
}
public synchronized void setConfig(GenericKeyedObjectPool.Config conf) {
setMaxIdle(conf.maxIdle);
setMaxActive(conf.maxActive);
setMaxTotal(conf.maxTotal);
setMinIdle(conf.minIdle);
setMaxWait(conf.maxWait);
setWhenExhaustedAction(conf.whenExhaustedAction);
setTestOnBorrow(conf.testOnBorrow);
setTestOnReturn(conf.testOnReturn);
setTestWhileIdle(conf.testWhileIdle);
setNumTestsPerEvictionRun(conf.numTestsPerEvictionRun);
setMinEvictableIdleTimeMillis(conf.minEvictableIdleTimeMillis);
setTimeBetweenEvictionRunsMillis(conf.timeBetweenEvictionRunsMillis);
}
public synchronized boolean getLifo() {
return _lifo;
}
public synchronized void setLifo(boolean lifo) {
this._lifo = lifo;
}
public Object borrowObject(Object key) throws Exception {
long starttime = System.currentTimeMillis();
Latch latch = new Latch(key);
byte whenExhaustedAction;
long maxWait;
synchronized (this) {
whenExhaustedAction = _whenExhaustedAction;
maxWait = _maxWait;
_allocationQueue.add(latch);
}
allocate();
for(;;) {
synchronized (this) {
assertOpen();
}
if (null == latch.getPair()) {
if (latch.mayCreate()) {
} else {
switch(whenExhaustedAction) {
case WHEN_EXHAUSTED_GROW:
synchronized (this) {
if (latch.getPair() == null && !latch.mayCreate()) {
_allocationQueue.remove(latch);
latch.getPool().incrementInternalProcessingCount();
}
}
break;
case WHEN_EXHAUSTED_FAIL:
synchronized (this) {
if (latch.getPair() != null || latch.mayCreate()) {
break;
}
_allocationQueue.remove(latch);
}
throw new NoSuchElementException(""Pool exhausted"");
case WHEN_EXHAUSTED_BLOCK:
try {
synchronized (latch) {
if (latch.getPair() == null && !latch.mayCreate()) {
if (maxWait <= 0) {
latch.wait();
} else {
final long elapsed = (System.currentTimeMillis() - starttime);
final long waitTime = maxWait - elapsed;
if (waitTime > 0)
{
latch.wait(waitTime);
}
}
} else {
break;
}
}
} catch(InterruptedException e) {
boolean doAllocate = false;
synchronized (this) {
if (latch.getPair() == null && !latch.mayCreate()) {
_allocationQueue.remove(latch);
} else if (latch.getPair() == null && latch.mayCreate()) {
latch.getPool().decrementInternalProcessingCount();
doAllocate = true;
} else {
latch.getPool().decrementInternalProcessingCount();
latch.getPool().incrementActiveCount();
returnObject(latch.getkey(), latch.getPair().getValue());
}
}
if (doAllocate) {
allocate();
}
Thread.currentThread().interrupt();
throw e;
}
if (maxWait > 0 && ((System.currentTimeMillis() - starttime) >= maxWait)) {
synchronized (this) {
if (latch.getPair() == null && !latch.mayCreate()) {
_allocationQueue.remove(latch);
} else {
break;
}
}
throw new NoSuchElementException(""Timeout waiting for idle object"");
} else {
continue; 
}
default:
throw new IllegalArgumentException(""whenExhaustedAction "" + whenExhaustedAction +
"" not recognized."");
}
}
}
boolean newlyCreated = false;
if (null == latch.getPair()) {
try {
Object obj = _factory.makeObject(key);
latch.setPair(new ObjectTimestampPair(obj));
newlyCreated = true;
} finally {
if (!newlyCreated) {
synchronized (this) {
latch.getPool().decrementInternalProcessingCount();
}
allocate();
}
}
}
try {
_factory.activateObject(key, latch.getPair().value);
if (_testOnBorrow && !_factory.validateObject(key, latch.getPair().value)) {
throw new Exception(""ValidateObject failed"");
}
synchronized (this) {
latch.getPool().decrementInternalProcessingCount();
latch.getPool().incrementActiveCount();
}
return latch.getPair().value;
} catch (Throwable e) {
PoolUtils.checkRethrow(e);
try {
_factory.destroyObject(key, latch.getPair().value);
} catch (Throwable e2) {
PoolUtils.checkRethrow(e2);
}
synchronized (this) {
latch.getPool().decrementInternalProcessingCount();
if (!newlyCreated) {
latch.reset();
_allocationQueue.add(0, latch);
}
}
allocate();
if (newlyCreated) {
throw new NoSuchElementException(
""Could not create a validated object, cause: "" +
e.getMessage());
}
else {
continue; 
}
}
}
}
private void allocate() {
boolean clearOldest = false;
synchronized (this) {
if (isClosed()) return;
Iterator allocationQueueIter = _allocationQueue.iterator();
while (allocationQueueIter.hasNext()) {
Latch latch = (Latch) allocationQueueIter.next();
ObjectQueue pool = (ObjectQueue)(_poolMap.get(latch.getkey()));
if (null == pool) {
pool = new ObjectQueue();
_poolMap.put(latch.getkey(), pool);
_poolList.add(latch.getkey());
}
latch.setPool(pool);
if (!pool.queue.isEmpty()) {
allocationQueueIter.remove();
latch.setPair(
(ObjectTimestampPair) pool.queue.removeFirst());
pool.incrementInternalProcessingCount();
_totalIdle--;
synchronized (latch) {
latch.notify();
}
continue;
}
if ((_maxTotal > 0) &&
(_totalActive + _totalIdle + _totalInternalProcessing >= _maxTotal)) {
clearOldest = true;
break;
}
if ((_maxActive < 0 || pool.activeCount + pool.internalProcessingCount < _maxActive) &&
(_maxTotal < 0 || _totalActive + _totalIdle + _totalInternalProcessing < _maxTotal)) {
allocationQueueIter.remove();
latch.setMayCreate(true);
pool.incrementInternalProcessingCount();
synchronized (latch) {
latch.notify();
}
continue;
}
if (_maxActive < 0) {
break;
}
}
}
if (clearOldest) {
clearOldest();
}
}
public void clear() {
Map toDestroy = new HashMap();
synchronized (this) {
for (Iterator it = _poolMap.keySet().iterator(); it.hasNext();) {
Object key = it.next();
ObjectQueue pool = (ObjectQueue)_poolMap.get(key);
List objects = new ArrayList();
objects.addAll(pool.queue);
toDestroy.put(key, objects);
it.remove();
_poolList.remove(key);
_totalIdle = _totalIdle - pool.queue.size();
_totalInternalProcessing =
_totalInternalProcessing + pool.queue.size();
pool.queue.clear();
}
}
destroy(toDestroy, _factory);
}
public void clearOldest() {
final Map toDestroy = new HashMap();
final Map map = new TreeMap();
synchronized (this) {
for (Iterator keyiter = _poolMap.keySet().iterator(); keyiter.hasNext();) {
final Object key = keyiter.next();
final CursorableLinkedList list = ((ObjectQueue)_poolMap.get(key)).queue;
for (Iterator it = list.iterator(); it.hasNext();) {
map.put(it.next(), key);
}
}
Set setPairKeys = map.entrySet();
int itemsToRemove = ((int) (map.size() * 0.15)) + 1;
Iterator iter = setPairKeys.iterator();
while (iter.hasNext() && itemsToRemove > 0) {
Map.Entry entry = (Map.Entry) iter.next();
Object key = entry.getValue();
ObjectTimestampPair pairTimeStamp = (ObjectTimestampPair) entry.getKey();
ObjectQueue objectQueue = (ObjectQueue)_poolMap.get(key);
final CursorableLinkedList list = objectQueue.queue;
list.remove(pairTimeStamp);
if (toDestroy.containsKey(key)) {
((List)toDestroy.get(key)).add(pairTimeStamp);
} else {
List listForKey = new ArrayList();
listForKey.add(pairTimeStamp);
toDestroy.put(key, listForKey);
}
objectQueue.incrementInternalProcessingCount();
_totalIdle--;
itemsToRemove--;
}
}
destroy(toDestroy, _factory);
}
public void clear(Object key) {
Map toDestroy = new HashMap();
final ObjectQueue pool;
synchronized (this) {
pool = (ObjectQueue)(_poolMap.remove(key));
if (pool == null) {
return;
} else {
_poolList.remove(key);
}
List objects = new ArrayList();
objects.addAll(pool.queue);
toDestroy.put(key, objects);
_totalIdle = _totalIdle - pool.queue.size();
_totalInternalProcessing =
_totalInternalProcessing + pool.queue.size();
pool.queue.clear();
}
destroy(toDestroy, _factory);
}
private void destroy(Map m, KeyedPoolableObjectFactory factory) {
for (Iterator entries = m.entrySet().iterator(); entries.hasNext();) {
Map.Entry entry = (Entry) entries.next();
Object key = entry.getKey();
Collection c = (Collection) entry.getValue();
for (Iterator it = c.iterator(); it.hasNext();) {
try {
factory.destroyObject(
key,((ObjectTimestampPair)(it.next())).value);
} catch(Exception e) {
} finally {
synchronized(this) {
ObjectQueue objectQueue =
(ObjectQueue) _poolMap.get(key);
if (objectQueue != null) {
objectQueue.decrementInternalProcessingCount();
if (objectQueue.internalProcessingCount == 0 &&
objectQueue.activeCount == 0 &&
objectQueue.queue.isEmpty()) {
_poolMap.remove(key);
_poolList.remove(key);
}
}
}
allocate();
}
}
}
}
public synchronized int getNumActive() {
return _totalActive;
}
public synchronized int getNumIdle() {
return _totalIdle;
}
public synchronized int getNumActive(Object key) {
final ObjectQueue pool = (ObjectQueue)(_poolMap.get(key));
return pool != null ? pool.activeCount : 0;
}
public synchronized int getNumIdle(Object key) {
final ObjectQueue pool = (ObjectQueue)(_poolMap.get(key));
return pool != null ? pool.queue.size() : 0;
}
public void returnObject(Object key, Object obj) throws Exception {
try {
addObjectToPool(key, obj, true);
} catch (Exception e) {
if (_factory != null) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e2) {
}
// TODO: Correctness here depends on control in addObjectToPool.
ObjectQueue pool = (ObjectQueue) (_poolMap.get(key));
if (pool != null) {
synchronized(this) {
pool.decrementActiveCount();
if (pool.queue.isEmpty() &&
pool.activeCount == 0 &&
pool.internalProcessingCount == 0) {
_poolMap.remove(key);
_poolList.remove(key);
}
}
allocate();
}
}
}
}
private void addObjectToPool(Object key, Object obj,
boolean decrementNumActive) throws Exception {
boolean success = true; 
if (_testOnReturn && !_factory.validateObject(key, obj)) {
success = false;
} else {
_factory.passivateObject(key, obj);
}
boolean shouldDestroy = !success;
ObjectQueue pool;
boolean doAllocate = false;
synchronized (this) {
pool = (ObjectQueue) (_poolMap.get(key));
if (null == pool) {
pool = new ObjectQueue();
_poolMap.put(key, pool);
_poolList.add(key);
}
if (isClosed()) {
shouldDestroy = true;
} else {
if (_maxIdle >= 0 && (pool.queue.size() >= _maxIdle)) {
shouldDestroy = true;
} else if (success) {
if (_lifo) {
pool.queue.addFirst(new ObjectTimestampPair(obj));
} else {
pool.queue.addLast(new ObjectTimestampPair(obj));
}
_totalIdle++;
if (decrementNumActive) {
pool.decrementActiveCount();
}
doAllocate = true;
}
}
}
if (doAllocate) {
allocate();
}
if (shouldDestroy) {
try {
_factory.destroyObject(key, obj);
} catch(Exception e) {
}
if (decrementNumActive) {
synchronized(this) {
pool.decrementActiveCount();
if (pool.queue.isEmpty() &&
pool.activeCount == 0 &&
pool.internalProcessingCount == 0) {
_poolMap.remove(key);
_poolList.remove(key);
}
}
allocate();
}
}
}
public void invalidateObject(Object key, Object obj) throws Exception {
try {
_factory.destroyObject(key, obj);
} finally {
synchronized (this) {
ObjectQueue pool = (ObjectQueue) (_poolMap.get(key));
if (null == pool) {
pool = new ObjectQueue();
_poolMap.put(key, pool);
_poolList.add(key);
}
pool.decrementActiveCount();
}
allocate(); 
}
}
public void addObject(Object key) throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
Object obj = _factory.makeObject(key);
try {
assertOpen();
addObjectToPool(key, obj, false);
} catch (IllegalStateException ex) { 
try {
_factory.destroyObject(key, obj);
} catch (Exception ex2) {
}
throw ex;
}
}
public synchronized void preparePool(Object key, boolean populateImmediately) {
ObjectQueue pool = (ObjectQueue)(_poolMap.get(key));
if (null == pool) {
pool = new ObjectQueue();
_poolMap.put(key,pool);
_poolList.add(key);
}
if (populateImmediately) {
try {
ensureMinIdle(key);
}
catch (Exception e) {
}
}
}
public void close() throws Exception {
super.close();
synchronized (this) {
clear();
if (null != _evictionCursor) {
_evictionCursor.close();
_evictionCursor = null;
}
if (null != _evictionKeyCursor) {
_evictionKeyCursor.close();
_evictionKeyCursor = null;
}
startEvictor(-1L);
}
}
public void setFactory(KeyedPoolableObjectFactory factory) throws IllegalStateException {
Map toDestroy = new HashMap();
final KeyedPoolableObjectFactory oldFactory = _factory;
synchronized (this) {
assertOpen();
if (0 < getNumActive()) {
throw new IllegalStateException(""Objects are already active"");
} else {
for (Iterator it = _poolMap.keySet().iterator(); it.hasNext();) {
Object key = it.next();
ObjectQueue pool = (ObjectQueue)_poolMap.get(key);
if (pool != null) {
List objects = new ArrayList();
objects.addAll(pool.queue);
toDestroy.put(key, objects);
it.remove();
_poolList.remove(key);
_totalIdle = _totalIdle - pool.queue.size();
_totalInternalProcessing =
_totalInternalProcessing + pool.queue.size();
pool.queue.clear();
}
}
_factory = factory;
}
}
destroy(toDestroy, oldFactory);
}
public void evict() throws Exception {
Object key = null;
boolean testWhileIdle;
long minEvictableIdleTimeMillis;
synchronized (this) {
testWhileIdle = _testWhileIdle;
minEvictableIdleTimeMillis = _minEvictableIdleTimeMillis;
if (_evictionKeyCursor != null &&
_evictionKeyCursor._lastReturned != null) {
key = _evictionKeyCursor._lastReturned.value();
}
}
for (int i=0, m=getNumTests(); i<m; i++) {
final ObjectTimestampPair pair;
synchronized (this) {
if (_poolMap == null || _poolMap.size() == 0) {
continue;
}
if (null == _evictionKeyCursor) {
resetEvictionKeyCursor();
key = null;
}
if (null == _evictionCursor) {
if (_evictionKeyCursor.hasNext()) {
key = _evictionKeyCursor.next();
resetEvictionObjectCursor(key);
} else {
resetEvictionKeyCursor();
if (_evictionKeyCursor != null) {
if (_evictionKeyCursor.hasNext()) {
key = _evictionKeyCursor.next();
resetEvictionObjectCursor(key);
}
}
}
}
if (_evictionCursor == null) {
continue; 
}
if ((_lifo && !_evictionCursor.hasPrevious()) ||
(!_lifo && !_evictionCursor.hasNext())) {
if (_evictionKeyCursor != null) {
if (_evictionKeyCursor.hasNext()) {
key = _evictionKeyCursor.next();
resetEvictionObjectCursor(key);
} else { 
resetEvictionKeyCursor();
if (_evictionKeyCursor != null) {
if (_evictionKeyCursor.hasNext()) {
key = _evictionKeyCursor.next();
resetEvictionObjectCursor(key);
}
}
}
}
}
if ((_lifo && !_evictionCursor.hasPrevious()) ||
(!_lifo && !_evictionCursor.hasNext())) {
continue; 
}
pair = _lifo ?
(ObjectTimestampPair) _evictionCursor.previous() :
(ObjectTimestampPair) _evictionCursor.next();
_evictionCursor.remove();
ObjectQueue objectQueue = (ObjectQueue) _poolMap.get(key);
objectQueue.incrementInternalProcessingCount();
_totalIdle--;
}
boolean removeObject=false;
if ((minEvictableIdleTimeMillis > 0) &&
(System.currentTimeMillis() - pair.tstamp >
minEvictableIdleTimeMillis)) {
removeObject=true;
}
if (testWhileIdle && removeObject == false) {
boolean active = false;
try {
_factory.activateObject(key,pair.value);
active = true;
} catch(Exception e) {
removeObject=true;
}
if (active) {
if (!_factory.validateObject(key,pair.value)) {
removeObject=true;
} else {
try {
_factory.passivateObject(key,pair.value);
} catch(Exception e) {
removeObject=true;
}
}
}
}
if (removeObject) {
try {
_factory.destroyObject(key, pair.value);
} catch(Exception e) {
}
}
synchronized (this) {
ObjectQueue objectQueue =
(ObjectQueue)_poolMap.get(key);
objectQueue.decrementInternalProcessingCount();
if (removeObject) {
if (objectQueue.queue.isEmpty() &&
objectQueue.activeCount == 0 &&
objectQueue.internalProcessingCount == 0) {
_poolMap.remove(key);
_poolList.remove(key);
}
} else {
_evictionCursor.add(pair);
_totalIdle++;
if (_lifo) {
_evictionCursor.previous();
}
}
}
}
allocate();
}
private void resetEvictionKeyCursor() {
if (_evictionKeyCursor != null) {
_evictionKeyCursor.close();
}
_evictionKeyCursor = _poolList.cursor();
if (null != _evictionCursor) {
_evictionCursor.close();
_evictionCursor = null;
}
}
private void resetEvictionObjectCursor(Object key) {
if (_evictionCursor != null) {
_evictionCursor.close();
}
if (_poolMap == null) {
return;
}
ObjectQueue pool = (ObjectQueue) (_poolMap.get(key));
if (pool != null) {
CursorableLinkedList queue = pool.queue;
_evictionCursor = queue.cursor(_lifo ? queue.size() : 0);
}
}
private void ensureMinIdle() throws Exception {
if (_minIdle > 0) {
Object[] keysCopy;
synchronized(this) {
keysCopy = _poolMap.keySet().toArray();
}
for (int i=0; i < keysCopy.length; i++) {
ensureMinIdle(keysCopy[i]);
}
}
}
private void ensureMinIdle(Object key) throws Exception {
ObjectQueue pool;
synchronized(this) {
pool = (ObjectQueue)(_poolMap.get(key));
}
if (pool == null) {
return;
}
int objectDeficit = calculateDeficit(pool, false);
for (int i = 0; i < objectDeficit && calculateDeficit(pool, true) > 0; i++) {
try {
addObject(key);
} finally {
synchronized (this) {
pool.decrementInternalProcessingCount();
}
allocate();
}
}
}
protected synchronized void startEvictor(long delay) {
if (null != _evictor) {
EvictionTimer.cancel(_evictor);
_evictor = null;
}
if (delay > 0) {
_evictor = new Evictor();
EvictionTimer.schedule(_evictor, delay, delay);
}
}
synchronized String debugInfo() {
StringBuffer buf = new StringBuffer();
buf.append(""Active: "").append(getNumActive()).append(""\n"");
buf.append(""Idle: "").append(getNumIdle()).append(""\n"");
Iterator it = _poolMap.keySet().iterator();
while (it.hasNext()) {
Object key = it.next();
buf.append(""\t"").append(key).append("" "").append(_poolMap.get(key)).append(""\n"");
}
return buf.toString();
}
private synchronized int getNumTests() {
if (_numTestsPerEvictionRun >= 0) {
return Math.min(_numTestsPerEvictionRun, _totalIdle);
} else {
return(int)(Math.ceil(_totalIdle/Math.abs((double)_numTestsPerEvictionRun)));
}
}
private synchronized int calculateDeficit(ObjectQueue pool,
boolean incrementInternal) {
int objectDefecit = 0;
objectDefecit = getMinIdle() - pool.queue.size();
if (getMaxActive() > 0) {
int growLimit = Math.max(0, getMaxActive() - pool.activeCount - pool.queue.size() - pool.internalProcessingCount);
objectDefecit = Math.min(objectDefecit, growLimit);
}
if (getMaxTotal() > 0) {
int growLimit = Math.max(0, getMaxTotal() - getNumActive() - getNumIdle() - _totalInternalProcessing);
objectDefecit = Math.min(objectDefecit, growLimit);
}
if (incrementInternal && objectDefecit > 0) {
pool.incrementInternalProcessingCount();
}
return objectDefecit;
}
private class ObjectQueue {
private int activeCount = 0;
private final CursorableLinkedList queue = new CursorableLinkedList();
private int internalProcessingCount = 0;
void incrementActiveCount() {
synchronized (GenericKeyedObjectPool.this) {
_totalActive++;
}
activeCount++;
}
void decrementActiveCount() {
synchronized (GenericKeyedObjectPool.this) {
_totalActive--;
}
if (activeCount > 0) {
activeCount--;
}
}
void incrementInternalProcessingCount() {
synchronized (GenericKeyedObjectPool.this) {
_totalInternalProcessing++;
}
internalProcessingCount++;
}
void decrementInternalProcessingCount() {
synchronized (GenericKeyedObjectPool.this) {
_totalInternalProcessing--;
}
internalProcessingCount--;
}
}
static class ObjectTimestampPair implements Comparable {
//CHECKSTYLE: stop VisibilityModifier
Object value;
long tstamp;
//CHECKSTYLE: resume VisibilityModifier
ObjectTimestampPair(Object val) {
this(val, System.currentTimeMillis());
}
ObjectTimestampPair(Object val, long time) {
value = val;
tstamp = time;
}
public String toString() {
return value + "";"" + tstamp;
}
public int compareTo(Object obj) {
return compareTo((ObjectTimestampPair) obj);
}
public int compareTo(ObjectTimestampPair other) {
final long tstampdiff = this.tstamp - other.tstamp;
if (tstampdiff == 0) {
return System.identityHashCode(this) - System.identityHashCode(other);
} else {
return (int)Math.min(Math.max(tstampdiff, Integer.MIN_VALUE), Integer.MAX_VALUE);
}
}
public Object getValue() {
return value;
}
public long getTstamp() {
return tstamp;
}
}
private class Evictor extends TimerTask {
public void run() {
try {
evict();
} catch(Exception e) {
} catch(OutOfMemoryError oome) {
oome.printStackTrace(System.err);
}
try {
ensureMinIdle();
} catch (Exception e) {
}
}
}
public static class Config {
//CHECKSTYLE: stop VisibilityModifier
public int maxIdle = GenericKeyedObjectPool.DEFAULT_MAX_IDLE;
public int maxActive = GenericKeyedObjectPool.DEFAULT_MAX_ACTIVE;
public int maxTotal = GenericKeyedObjectPool.DEFAULT_MAX_TOTAL;
public int minIdle = GenericKeyedObjectPool.DEFAULT_MIN_IDLE;
public long maxWait = GenericKeyedObjectPool.DEFAULT_MAX_WAIT;
public byte whenExhaustedAction = GenericKeyedObjectPool.DEFAULT_WHEN_EXHAUSTED_ACTION;
public boolean testOnBorrow = GenericKeyedObjectPool.DEFAULT_TEST_ON_BORROW;
public boolean testOnReturn = GenericKeyedObjectPool.DEFAULT_TEST_ON_RETURN;
public boolean testWhileIdle = GenericKeyedObjectPool.DEFAULT_TEST_WHILE_IDLE;
public long timeBetweenEvictionRunsMillis = GenericKeyedObjectPool.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS;
public int numTestsPerEvictionRun =  GenericKeyedObjectPool.DEFAULT_NUM_TESTS_PER_EVICTION_RUN;
public long minEvictableIdleTimeMillis = GenericKeyedObjectPool.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS;
public boolean lifo = GenericKeyedObjectPool.DEFAULT_LIFO;
//CHECKSTYLE: resume VisibilityModifier
}
private static final class Latch {
private final Object _key;
private ObjectQueue _pool;
private ObjectTimestampPair _pair;
private boolean _mayCreate = false;
private Latch(Object key) {
_key = key;
}
private synchronized Object getkey() {
return _key;
}
private synchronized ObjectQueue getPool() {
return _pool;
}
private synchronized void setPool(ObjectQueue pool) {
_pool = pool;
}
private synchronized ObjectTimestampPair getPair() {
return _pair;
}
private synchronized void setPair(ObjectTimestampPair pair) {
_pair = pair;
}
private synchronized boolean mayCreate() {
return _mayCreate;
}
private synchronized void setMayCreate(boolean mayCreate) {
_mayCreate = mayCreate;
}
private synchronized void reset() {
_pair = null;
_mayCreate = false;
}
}
private int _maxIdle = DEFAULT_MAX_IDLE;
private volatile int _minIdle = DEFAULT_MIN_IDLE;
private int _maxActive = DEFAULT_MAX_ACTIVE;
private int _maxTotal = DEFAULT_MAX_TOTAL;
private long _maxWait = DEFAULT_MAX_WAIT;
private byte _whenExhaustedAction = DEFAULT_WHEN_EXHAUSTED_ACTION;
private volatile boolean _testOnBorrow = DEFAULT_TEST_ON_BORROW;
private volatile boolean _testOnReturn = DEFAULT_TEST_ON_RETURN;
private boolean _testWhileIdle = DEFAULT_TEST_WHILE_IDLE;
private long _timeBetweenEvictionRunsMillis = DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS;
private int _numTestsPerEvictionRun =  DEFAULT_NUM_TESTS_PER_EVICTION_RUN;
private long _minEvictableIdleTimeMillis = DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS;
private Map _poolMap = null;
private int _totalActive = 0;
private int _totalIdle = 0;
private int _totalInternalProcessing = 0;
private KeyedPoolableObjectFactory _factory = null;
private Evictor _evictor = null;
private CursorableLinkedList _poolList = null;
private CursorableLinkedList.Cursor _evictionCursor = null;
private CursorableLinkedList.Cursor _evictionKeyCursor = null;
private boolean _lifo = DEFAULT_LIFO;
private LinkedList _allocationQueue = new LinkedList();
","public void setFactory(KeyedPoolableObjectFactory factory) throws IllegalStateException {
Map toDestroy = new HashMap();
final KeyedPoolableObjectFactory oldFactory = _factory;
synchronized (this) {
assertOpen();
if (0 < getNumActive()) {
throw new IllegalStateException(""Objects are already active"");
} else {
for (Iterator it = _poolMap.keySet().iterator(); it.hasNext(); ) {
Object key = it.next();
ObjectQueue pool = (ObjectQueue) _poolMap.get(key);
if (pool != null) {
List objects = new ArrayList();
objects.addAll(pool.queue);
toDestroy.put(key, objects);
it.remove();
_poolList.remove(key);
_totalIdle = _totalIdle - pool.queue.size();
_totalInternalProcessing = _totalInternalProcessing + pool.queue.size();
pool.queue.clear();
}
}
_factory = factory;
}
}
destroy(toDestroy, oldFactory);
}","public void setFactory(KeyedPoolableObjectFactory factory) throws IllegalStateException {
Map mapVar1 = mapLiteral2;
final KeyedPoolableObjectFactory keyedpoolableobjectfactoryVar3 = keyedpoolableobjectfactoryLiteral4;
synchronized (this) {
assertOpen();
if (0 < getNumActive()) {
throw new IllegalStateException(""Objects are already active"");
} else {
for (Iterator iteratorVar13 = iteratorLiteral14; iteratorVar5.hasNext(); ) {
Object objectVar7 = objectLiteral8;
ObjectQueue objectqueueVar9 = objectqueueLiteral10;
if (objectqueueVar9 != null) {
List listVar11 = listLiteral12;
listVar11.addAll(objectqueueVar9.queue);
mapVar1.put(objectVar7, listVar11);
iteratorVar5.remove();
_poolList.remove(objectVar7);
_totalIdle = _totalIdle - objectqueueVar9.queue.size();
_totalInternalProcessing = _totalInternalProcessing + objectqueueVar9.queue.size();
objectqueueVar9.queue.clear();
}
}
_factory = factory;
}
}
destroy(mapVar1, keyedpoolableobjectfactoryVar3);
}"
17371,Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,pool,1236,protected int _totIdle = 0;,protected int _totIdle = 0;,protected int intVar1 = intLiteral2;
17375,DODGY_CODE,RI_REDUNDANT_INTERFACES,FP,pool,1240,"this((PoolableObjectFactory<T>)null,DEFAULT_MAX_SLEEPING,DEFAULT_INIT_SLEEPING_CAPACITY);
}
public StackObjectPool(int maxIdle) {
this((PoolableObjectFactory<T>)null,maxIdle,DEFAULT_INIT_SLEEPING_CAPACITY);
}
public StackObjectPool(int maxIdle, int initIdleCapacity) {
this((PoolableObjectFactory<T>)null,maxIdle,initIdleCapacity);
}
public StackObjectPool(PoolableObjectFactory<T> factory) {
this(factory,DEFAULT_MAX_SLEEPING,DEFAULT_INIT_SLEEPING_CAPACITY);
}
public StackObjectPool(PoolableObjectFactory<T> factory, int maxIdle) {
this(factory,maxIdle,DEFAULT_INIT_SLEEPING_CAPACITY);
}
public StackObjectPool(PoolableObjectFactory<T> factory, int maxIdle, int initIdleCapacity) {
_factory = factory;
_maxSleeping = (maxIdle < 0 ? DEFAULT_MAX_SLEEPING : maxIdle);
int initcapacity = (initIdleCapacity < 1 ? DEFAULT_INIT_SLEEPING_CAPACITY : initIdleCapacity);
_pool = new Stack<T>();
_pool.ensureCapacity( initcapacity > _maxSleeping ? _maxSleeping : initcapacity);
}
public synchronized T borrowObject() throws Exception {
assertOpen();
T obj = null;
boolean newlyCreated = false;
while (null == obj) {
if (!_pool.empty()) {
obj = _pool.pop();
} else {
if(null == _factory) {
throw new NoSuchElementException();
} else {
obj = _factory.makeObject();
newlyCreated = true;
if (obj == null) {
throw new NoSuchElementException(""PoolableObjectFactory.makeObject() returned null."");
}
}
}
if (null != _factory && null != obj) {
try {
_factory.activateObject(obj);
if (!_factory.validateObject(obj)) {
throw new Exception(""ValidateObject failed"");
}
} catch (Throwable t) {
PoolUtils.checkRethrow(t);
try {
_factory.destroyObject(obj);
} catch (Throwable t2) {
PoolUtils.checkRethrow(t2);
} finally {
obj = null;
}
if (newlyCreated) {
throw new NoSuchElementException(
""Could not create a validated object, cause: "" +
t.getMessage());
}
}
}
}
_numActive++;
return obj;
}
public synchronized void returnObject(T obj) throws Exception {
boolean success = !isClosed();
if(null != _factory) {
if(!_factory.validateObject(obj)) {
success = false;
} else {
try {
_factory.passivateObject(obj);
} catch(Exception e) {
success = false;
}
}
}
boolean shouldDestroy = !success;
_numActive--;
if (success) {
T toBeDestroyed = null;
if(_pool.size() >= _maxSleeping) {
shouldDestroy = true;
toBeDestroyed = _pool.remove(0); 
}
_pool.push(obj);
obj = toBeDestroyed; 
}
notifyAll(); 
if(shouldDestroy) { 
try {
_factory.destroyObject(obj);
} catch(Exception e) {
}
}
}
public synchronized void invalidateObject(T obj) throws Exception {
_numActive--;
if (null != _factory) {
_factory.destroyObject(obj);
}
notifyAll(); 
}
public synchronized int getNumIdle() {
return _pool.size();
}
public synchronized int getNumActive() {
return _numActive;
}
public synchronized void clear() {
if(null != _factory) {
Iterator<T> it = _pool.iterator();
while(it.hasNext()) {
try {
_factory.destroyObject(it.next());
} catch(Exception e) {
}
}
}
_pool.clear();
}
public void close() throws Exception {
super.close();
clear();
}
public synchronized void addObject() throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
T obj = _factory.makeObject();
boolean success = true;
if(!_factory.validateObject(obj)) {
success = false;
} else {
_factory.passivateObject(obj);
}
boolean shouldDestroy = !success;
if (success) {
T toBeDestroyed = null;
if(_pool.size() >= _maxSleeping) {
shouldDestroy = true;
toBeDestroyed = _pool.remove(0); 
}
_pool.push(obj);
obj = toBeDestroyed; 
}
notifyAll(); 
if(shouldDestroy) { 
try {
_factory.destroyObject(obj);
} catch(Exception e) {
}
}
}
public synchronized void setFactory(PoolableObjectFactory<T> factory) throws IllegalStateException {
assertOpen();
if(0 < getNumActive()) {
throw new IllegalStateException(""Objects are already active"");
} else {
clear();
_factory = factory;
}
}
protected static final int DEFAULT_MAX_SLEEPING  = 8;
protected static final int DEFAULT_INIT_SLEEPING_CAPACITY = 4;
protected Stack<T> _pool = null;
protected PoolableObjectFactory<T> _factory = null;
protected int _maxSleeping = DEFAULT_MAX_SLEEPING;
protected int _numActive = 0;
public synchronized PoolableObjectFactory getFactory() {
return _factory;
}
public int getMaxSleeping() {
return _maxSleeping;
","public synchronized void returnObject(T obj) throws Exception {
boolean success = !isClosed();
if (null != _factory) {
if (!_factory.validateObject(obj)) {
success = false;
} else {
try {
_factory.passivateObject(obj);
} catch (Exception e) {
success = false;
}
}
}
boolean shouldDestroy = !success;
_numActive--;
if (success) {
T toBeDestroyed = null;
if (_pool.size() >= _maxSleeping) {
shouldDestroy = true;
toBeDestroyed = _pool.remove(0);
}
_pool.push(obj);
obj = toBeDestroyed;
}
notifyAll();
if (shouldDestroy) {
try {
_factory.destroyObject(obj);
} catch (Exception e) {
}
}
}","public synchronized void returnObject(T obj) throws Exception {
boolean booleanVar1 = booleanLiteral2;
if (null != _factory) {
if (!_factory.validateObject(obj)) {
booleanVar1 = false;
} else {
try {
_factory.passivateObject(obj);
} catch (Exception e) {
booleanVar1 = false;
}
}
}
boolean booleanVar3 = booleanLiteral4;
_numActive--;
if (booleanVar1) {
T tVar5 = tLiteral6;
if (_pool.size() >= _maxSleeping) {
booleanVar3 = true;
tVar5 = _pool.remove(0);
}
_pool.push(obj);
obj = tVar5;
}
notifyAll();
if (booleanVar3) {
try {
_factory.destroyObject(obj);
} catch (Exception e) {
}
}
}"
17378,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1243,"} catch(Exception e) {
","public synchronized void addObject() throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
T obj = _factory.makeObject();
boolean success = true;
if (!_factory.validateObject(obj)) {
success = false;
} else {
_factory.passivateObject(obj);
}
boolean shouldDestroy = !success;
if (success) {
T toBeDestroyed = null;
if (_pool.size() >= _maxSleeping) {
shouldDestroy = true;
toBeDestroyed = _pool.remove(0);
}
_pool.push(obj);
obj = toBeDestroyed;
}
notifyAll();
if (shouldDestroy) {
try {
_factory.destroyObject(obj);
} catch (Exception e) {
}
}
}","public synchronized void addObject() throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
T tVar1 = tLiteral2;
boolean booleanVar3 = booleanLiteral4;
if (!_factory.validateObject(tVar1)) {
booleanVar3 = false;
} else {
_factory.passivateObject(tVar1);
}
boolean booleanVar5 = booleanLiteral6;
if (booleanVar3) {
T tVar7 = tLiteral8;
if (_pool.size() >= _maxSleeping) {
booleanVar5 = true;
tVar7 = _pool.remove(0);
}
_pool.push(tVar1);
tVar1 = tVar7;
}
notifyAll();
if (booleanVar5) {
try {
_factory.destroyObject(tVar1);
} catch (Exception e) {
}
}
}"
17434,BAD_PRACTICE,EQ_COMPARETO_USE_OBJECT_EQUALS,FP,pool,1299,"final long tstampdiff = this.tstamp - other.tstamp;
if (tstampdiff == 0) {
return System.identityHashCode(this) - System.identityHashCode(other);
} else {
return (int)Math.min(Math.max(tstampdiff, Integer.MIN_VALUE), Integer.MAX_VALUE);
","public int compareTo(ObjectTimestampPair<T> other) {
final long tstampdiff = this.tstamp - other.tstamp;
if (tstampdiff == 0) {
return System.identityHashCode(this) - System.identityHashCode(other);
} else {
return (int) Math.min(Math.max(tstampdiff, Integer.MIN_VALUE), Integer.MAX_VALUE);
}
}","public int compareTo(ObjectTimestampPair<T> other) {
final long longVar1 = longLiteral2;
if (longVar1 == 0) {
return System.identityHashCode(this) - System.identityHashCode(other);
} else {
return (int) Math.min(Math.max(longVar1, Integer.MIN_VALUE), Integer.MAX_VALUE);
}
}"
17439,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1304,"} catch (Exception ex2) {
","@Override
public void addObject() throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
T obj = _factory.makeObject();
try {
assertOpen();
addObjectToPool(obj, false);
} catch (IllegalStateException ex) {
try {
_factory.destroyObject(obj);
} catch (Exception ex2) {
}
throw ex;
}
}","@Override
public void addObject() throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
T tVar1 = tLiteral2;
try {
assertOpen();
addObjectToPool(tVar1, false);
} catch (IllegalStateException ex) {
try {
_factory.destroyObject(tVar1);
} catch (Exception ex2) {
}
throw ex;
}
}"
17448,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1313,"} catch(Exception e) {
","@Override
public synchronized void addObject() throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
T obj = _factory.makeObject();
boolean success = true;
if (!_factory.validateObject(obj)) {
success = false;
} else {
_factory.passivateObject(obj);
}
boolean shouldDestroy = !success;
if (success) {
_pool.add(new SoftReference<T>(obj, refQueue));
notifyAll();
}
if (shouldDestroy) {
try {
_factory.destroyObject(obj);
} catch (Exception e) {
}
}
}","@Override
public synchronized void addObject() throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
T tVar1 = tLiteral2;
boolean booleanVar3 = booleanLiteral4;
if (!_factory.validateObject(tVar1)) {
booleanVar3 = false;
} else {
_factory.passivateObject(tVar1);
}
boolean booleanVar5 = booleanLiteral6;
if (booleanVar3) {
_pool.add(new SoftReference<T>(tVar1, refQueue));
notifyAll();
}
if (booleanVar5) {
try {
_factory.destroyObject(tVar1);
} catch (Exception e) {
}
}
}"
17464,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1329,"} catch (Exception e) {
","public void close() {
try {
keyedPool.close();
} catch (Exception e) {
}
}","public void close() {
try {
keyedPool.close();
} catch (Exception e) {
}
}"
17489,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1354,"} catch (Exception ex2) {
","public void addObject(Object key) throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
Object obj = _factory.makeObject(key);
try {
assertOpen();
addObjectToPool(key, obj, false);
} catch (IllegalStateException ex) {
try {
_factory.destroyObject(key, obj);
} catch (Exception ex2) {
}
throw ex;
}
}","public void addObject(Object key) throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
Object objectVar1 = objectLiteral2;
try {
assertOpen();
addObjectToPool(key, objectVar1, false);
} catch (IllegalStateException ex) {
try {
_factory.destroyObject(key, objectVar1);
} catch (Exception ex2) {
}
throw ex;
}
}"
17498,PERFORMANCE,WMI_WRONG_MAP_ITERATOR,FP,pool,1363,"buf.append(""\t"").append(key).append("" "").append(_poolMap.get(key)).append(""\n"");
","synchronized String debugInfo() {
StringBuffer buf = new StringBuffer();
buf.append(""Active: "").append(getNumActive()).append(""\n"");
buf.append(""Idle: "").append(getNumIdle()).append(""\n"");
Iterator it = _poolMap.keySet().iterator();
while (it.hasNext()) {
Object key = it.next();
buf.append(""\t"").append(key).append("" "").append(_poolMap.get(key)).append(""\n"");
}
return buf.toString();
}","synchronized String debugInfo() {
StringBuffer stringbufferVar1 = stringbufferLiteral2;
stringbufferVar1.append(""Active: "").append(getNumActive()).append(""\n"");
stringbufferVar1.append(""Idle: "").append(getNumIdle()).append(""\n"");
Iterator iteratorVar3 = iteratorLiteral4;
while (iteratorVar3.hasNext()) {
Object objectVar5 = objectLiteral6;
stringbufferVar1.append(""\t"").append(objectVar5).append("" "").append(_poolMap.get(objectVar5)).append(""\n"");
}
return stringbufferVar1.toString();
}"
17507,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1372,"} catch (Exception ex2) {
","public void addObject() throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
Object obj = _factory.makeObject();
try {
assertOpen();
addObjectToPool(obj, false);
} catch (IllegalStateException ex) {
try {
_factory.destroyObject(obj);
} catch (Exception ex2) {
}
throw ex;
}
}","public void addObject() throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
Object objectVar1 = objectLiteral2;
try {
assertOpen();
addObjectToPool(objectVar1, false);
} catch (IllegalStateException ex) {
try {
_factory.destroyObject(objectVar1);
} catch (Exception ex2) {
}
throw ex;
}
}"
17530,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1395,"} catch (Exception e) {
","public void returnObject(final Object key, final Object obj) {
try {
pool.returnObject(obj);
} catch (Exception e) {
}
}","public void returnObject(final Object key, final Object obj) {
try {
pool.returnObject(obj);
} catch (Exception e) {
}
}"
17543,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1408,"} catch (Exception e) {
","public void invalidateObject(final Object obj) {
if (type.isInstance(obj)) {
try {
pool.invalidateObject(obj);
} catch (Exception e) {
}
} else {
throw new ClassCastException(""Invalidated object is not of type: "" + type.getName() + "" was: "" + obj);
}
}","public void invalidateObject(final Object obj) {
if (type.isInstance(obj)) {
try {
pool.invalidateObject(obj);
} catch (Exception e) {
}
} else {
throw new ClassCastException(""Invalidated object is not of type: "" + type.getName() + "" was: "" + obj);
}
}"
17560,BAD_PRACTICE,EQ_COMPARETO_USE_OBJECT_EQUALS,FP,pool,1425,"final long tstampdiff = this.tstamp - other.tstamp;
if (tstampdiff == 0) {
return System.identityHashCode(this) - System.identityHashCode(other);
} else {
return (int)Math.min(Math.max(tstampdiff, Integer.MIN_VALUE), Integer.MAX_VALUE);
","public int compareTo(ObjectTimestampPair other) {
final long tstampdiff = this.tstamp - other.tstamp;
if (tstampdiff == 0) {
return System.identityHashCode(this) - System.identityHashCode(other);
} else {
return (int) Math.min(Math.max(tstampdiff, Integer.MIN_VALUE), Integer.MAX_VALUE);
}
}","public int compareTo(ObjectTimestampPair other) {
final long longVar1 = longLiteral2;
if (longVar1 == 0) {
return System.identityHashCode(this) - System.identityHashCode(other);
} else {
return (int) Math.min(Math.max(longVar1, Integer.MIN_VALUE), Integer.MAX_VALUE);
}
}"
17599,PERFORMANCE,WMI_WRONG_MAP_ITERATOR,FP,pool,1464,"final ObjectDeque<T> deque = poolMap.get(k);
","private boolean hasBorrowWaiters() {
for (K k : poolMap.keySet()) {
final ObjectDeque<T> deque = poolMap.get(k);
if (deque != null) {
final LinkedBlockingDeque<PooledObject<T>> pool = deque.getIdleObjects();
if (pool.hasTakeWaiters()) {
return true;
}
}
}
return false;
}","private boolean hasBorrowWaiters() {
for (K kVar1 : poolMap.keySet()) {
final ObjectDeque<T> objectdeque<t>Var2 = objectdeque<t>Literal3;
if (objectdeque<t>Var2 != null) {
final LinkedBlockingDeque<PooledObject<T>> linkedblockingdeque<pooledobject<t>>Var4 = linkedblockingdeque<pooledobject<t>>Literal5;
if (linkedblockingdeque<pooledobject<t>>Var4.hasTakeWaiters()) {
return true;
}
}
}
return false;
}"
17617,DODGY_CODE,UCF_USELESS_CONTROL_FLOW,FP,pool,1482,"if (!idleQueue.offerFirst(this)) {
","@Override
public synchronized boolean endEvictionTest(Deque<PooledObject<T>> idleQueue) {
if (state == PooledObjectState.EVICTION) {
state = PooledObjectState.IDLE;
return true;
} else if (state == PooledObjectState.EVICTION_RETURN_TO_HEAD) {
state = PooledObjectState.IDLE;
if (!idleQueue.offerFirst(this)) {
}
}
return false;
}","@Override
public synchronized boolean endEvictionTest(Deque<PooledObject<T>> idleQueue) {
if (state == PooledObjectState.EVICTION) {
state = PooledObjectState.IDLE;
return true;
} else if (state == PooledObjectState.EVICTION_RETURN_TO_HEAD) {
state = PooledObjectState.IDLE;
if (!idleQueue.offerFirst(this)) {
}
}
return false;
}"
17636,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1501,"} catch (Exception e) {
","public void invalidateObject(final Object obj) {
try {
keyedPool.invalidateObject(key, obj);
} catch (Exception e) {
}
}","public void invalidateObject(final Object obj) {
try {
keyedPool.invalidateObject(key, obj);
} catch (Exception e) {
}
}"
17690,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1555,"} catch (Exception e) {
","@Override
public void close() {
try {
pool.close();
} catch (Exception e) {
}
}","@Override
public void close() {
try {
pool.close();
} catch (Exception e) {
}
}"
17699,DODGY_CODE,UCF_USELESS_CONTROL_FLOW,FP,pool,1564,"if (!underTest.endEvictionTest(idleObjects)) {
","@Override
public void evict() throws Exception {
assertOpen();
if (getNumIdle() == 0) {
return;
}
PooledObject<T> underTest = null;
EvictionPolicy<T> evictionPolicy = getEvictionPolicy();
synchronized (evictionLock) {
EvictionConfig evictionConfig = new EvictionConfig(getMinEvictableIdleTimeMillis(), getSoftMinEvictableIdleTimeMillis(), getMinIdlePerKey());
boolean testWhileIdle = getTestWhileIdle();
LinkedBlockingDeque<PooledObject<T>> idleObjects = null;
for (int i = 0, m = getNumTests(); i < m; i++) {
if (evictionIterator == null || !evictionIterator.hasNext()) {
if (evictionKeyIterator == null || !evictionKeyIterator.hasNext()) {
List<K> keyCopy = new ArrayList<K>();
Lock readLock = keyLock.readLock();
readLock.lock();
try {
keyCopy.addAll(poolKeyList);
} finally {
readLock.unlock();
}
evictionKeyIterator = keyCopy.iterator();
}
while (evictionKeyIterator.hasNext()) {
evictionKey = evictionKeyIterator.next();
ObjectDeque<T> objectDeque = poolMap.get(evictionKey);
if (objectDeque == null) {
continue;
}
idleObjects = objectDeque.getIdleObjects();
if (getLifo()) {
evictionIterator = idleObjects.descendingIterator();
} else {
evictionIterator = idleObjects.iterator();
}
if (evictionIterator.hasNext()) {
break;
}
evictionIterator = null;
}
}
if (evictionIterator == null) {
return;
}
try {
underTest = evictionIterator.next();
} catch (NoSuchElementException nsee) {
i--;
evictionIterator = null;
continue;
}
if (!underTest.startEvictionTest()) {
i--;
continue;
}
if (evictionPolicy.evict(evictionConfig, underTest, poolMap.get(evictionKey).getIdleObjects().size())) {
destroy(evictionKey, underTest, true);
destroyedByEvictorCount.incrementAndGet();
} else {
if (testWhileIdle) {
boolean active = false;
try {
factory.activateObject(evictionKey, underTest);
active = true;
} catch (Exception e) {
destroy(evictionKey, underTest, true);
destroyedByEvictorCount.incrementAndGet();
}
if (active) {
if (!factory.validateObject(evictionKey, underTest)) {
destroy(evictionKey, underTest, true);
destroyedByEvictorCount.incrementAndGet();
} else {
try {
factory.passivateObject(evictionKey, underTest);
} catch (Exception e) {
destroy(evictionKey, underTest, true);
destroyedByEvictorCount.incrementAndGet();
}
}
}
}
if (!underTest.endEvictionTest(idleObjects)) {
}
}
}
}
}","@Override
public void evict() throws Exception {
assertOpen();
if (getNumIdle() == 0) {
return;
}
PooledObject<T> pooledobject<t>Var1 = pooledobject<t>Literal2;
EvictionPolicy<T> evictionpolicy<t>Var3 = evictionpolicy<t>Literal4;
synchronized (evictionLock) {
EvictionConfig evictionconfigVar5 = evictionconfigLiteral6;
boolean booleanVar7 = booleanLiteral8;
LinkedBlockingDeque<PooledObject<T>> linkedblockingdeque<pooledobject<t>>Var9 = pooledobject<t>Literal2;
for (int intVar22 = intLiteral23, intVar24 = intLiteral25; intVar10 < intLiteral1; intVar10++) {
if (evictionIterator == null || !evictionIterator.hasNext()) {
if (evictionKeyIterator == null || !evictionKeyIterator.hasNext()) {
List<K> list<k>Var14 = list<k>Literal15;
Lock lockVar16 = lockLiteral17;
lockVar16.lock();
try {
list<k>Var14.addAll(poolKeyList);
} finally {
lockVar16.unlock();
}
evictionKeyIterator = list<k>Var14.iterator();
}
while (evictionKeyIterator.hasNext()) {
evictionKey = evictionKeyIterator.next();
ObjectDeque<T> objectdeque<t>Var18 = objectdeque<t>Literal19;
if (objectdeque<t>Var18 == null) {
continue;
}
linkedblockingdeque<pooledobject<t>>Var9 = objectdeque<t>Var18.getIdleObjects();
if (getLifo()) {
evictionIterator = linkedblockingdeque<pooledobject<t>>Var9.descendingIterator();
} else {
evictionIterator = linkedblockingdeque<pooledobject<t>>Var9.iterator();
}
if (evictionIterator.hasNext()) {
break;
}
evictionIterator = null;
}
}
if (evictionIterator == null) {
return;
}
try {
pooledobject<t>Var1 = evictionIterator.next();
} catch (NoSuchElementException nsee) {
intVar10--;
evictionIterator = null;
continue;
}
if (!pooledobject<t>Var1.startEvictionTest()) {
intVar10--;
continue;
}
if (evictionpolicy<t>Var3.evict(evictionconfigVar5, pooledobject<t>Var1, poolMap.get(evictionKey).getIdleObjects().size())) {
destroy(evictionKey, pooledobject<t>Var1, true);
destroyedByEvictorCount.incrementAndGet();
} else {
if (booleanVar7) {
boolean booleanVar20 = booleanLiteral21;
try {
factory.activateObject(evictionKey, pooledobject<t>Var1);
booleanVar20 = true;
} catch (Exception e) {
destroy(evictionKey, pooledobject<t>Var1, true);
destroyedByEvictorCount.incrementAndGet();
}
if (booleanVar20) {
if (!factory.validateObject(evictionKey, pooledobject<t>Var1)) {
destroy(evictionKey, pooledobject<t>Var1, true);
destroyedByEvictorCount.incrementAndGet();
} else {
try {
factory.passivateObject(evictionKey, pooledobject<t>Var1);
} catch (Exception e) {
destroy(evictionKey, pooledobject<t>Var1, true);
destroyedByEvictorCount.incrementAndGet();
}
}
}
}
if (!pooledobject<t>Var1.endEvictionTest(linkedblockingdeque<pooledobject<t>>Var9)) {
}
}
}
}
}"
17700,PERFORMANCE,WMI_WRONG_MAP_ITERATOR,FP,pool,1565,"final ObjectDeque<T> deque = poolMap.get(k);
","private boolean hasBorrowWaiters() {
for (K k : poolMap.keySet()) {
final ObjectDeque<T> deque = poolMap.get(k);
if (deque != null) {
final LinkedBlockingDeque<PooledObject<T>> pool = deque.getIdleObjects();
if (pool.hasTakeWaiters()) {
return true;
}
}
}
return false;
}","private boolean hasBorrowWaiters() {
for (K kVar1 : poolMap.keySet()) {
final ObjectDeque<T> objectdeque<t>Var2 = objectdeque<t>Literal3;
if (objectdeque<t>Var2 != null) {
final LinkedBlockingDeque<PooledObject<T>> linkedblockingdeque<pooledobject<t>>Var4 = linkedblockingdeque<pooledobject<t>>Literal5;
if (linkedblockingdeque<pooledobject<t>>Var4.hasTakeWaiters()) {
return true;
}
}
}
return false;
}"
17701,PERFORMANCE,WMI_WRONG_MAP_ITERATOR,FP,pool,1566,"ObjectDeque<T> queue = poolMap.get(key);
","@Override
public Map<String, Integer> getNumWaitersByKey() {
Map<String, Integer> result = new HashMap<String, Integer>();
for (K key : poolMap.keySet()) {
ObjectDeque<T> queue = poolMap.get(key);
if (queue != null) {
if (getBlockWhenExhausted()) {
result.put(key.toString(), Integer.valueOf(queue.getIdleObjects().getTakeQueueLength()));
} else {
result.put(key.toString(), Integer.valueOf(0));
}
}
}
return result;
}","@Override
public Map<String, Integer> getNumWaitersByKey() {
Map<String, Integer> map<string,integer>Var1 = map<string,integer>Literal2;
for (K kVar3 : poolMap.keySet()) {
ObjectDeque<T> objectdeque<t>Var4 = objectdeque<t>Literal5;
if (objectdeque<t>Var4 != null) {
if (getBlockWhenExhausted()) {
map<string,integer>Var1.put(kVar3.toString(), Integer.valueOf(objectdeque<t>Var4.getIdleObjects().getTakeQueueLength()));
} else {
map<string,integer>Var1.put(kVar3.toString(), Integer.valueOf(0));
}
}
}
return map<string,integer>Var1;
}"
17709,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1574,"} catch (Exception e) {
","public void invalidateObject(final Object obj) {
try {
keyedPool.invalidateObject(key, obj);
} catch (Exception e) {
}
}","public void invalidateObject(final Object obj) {
try {
keyedPool.invalidateObject(key, obj);
} catch (Exception e) {
}
}"
17718,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1583,"} catch (Exception e) {
","public void returnObject(final Object obj) {
if (type.isInstance(obj)) {
try {
pool.returnObject(obj);
} catch (Exception e) {
}
} else {
throw new ClassCastException(""Returned object is not of type: "" + type.getName() + "" was: "" + obj);
}
}","public void returnObject(final Object obj) {
if (type.isInstance(obj)) {
try {
pool.returnObject(obj);
} catch (Exception e) {
}
} else {
throw new ClassCastException(""Returned object is not of type: "" + type.getName() + "" was: "" + obj);
}
}"
17726,DODGY_CODE,REC_CATCH_EXCEPTION,FP,pool,1591,"} catch (Exception e) {
","public void run() {
boolean success = false;
try {
if (keyedPool.getNumIdle(key) < minIdle) {
keyedPool.addObject(key);
}
success = true;
} catch (Exception e) {
cancel();
} finally {
if (!success) {
cancel();
}
}
}","public void run() {
boolean booleanVar1 = booleanLiteral2;
try {
if (keyedPool.getNumIdle(key) < minIdle) {
keyedPool.addObject(key);
}
booleanVar1 = true;
} catch (Exception e) {
cancel();
} finally {
if (!booleanVar1) {
cancel();
}
}
}"
17744,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1609,"catch (Exception e) {
","public synchronized void preparePool(Object key, boolean populateImmediately) {
ObjectQueue pool = (ObjectQueue) (_poolMap.get(key));
if (null == pool) {
pool = new ObjectQueue();
_poolMap.put(key, pool);
_poolList.add(key);
}
if (populateImmediately) {
try {
ensureMinIdle(key);
} catch (Exception e) {
}
}
}","public synchronized void preparePool(Object key, boolean populateImmediately) {
ObjectQueue objectqueueVar1 = objectqueueLiteral2;
if (null == objectqueueVar1) {
objectqueueVar1 = new ObjectQueue();
_poolMap.put(key, objectqueueVar1);
_poolList.add(key);
}
if (populateImmediately) {
try {
ensureMinIdle(key);
} catch (Exception e) {
}
}
}"
17747,DODGY_CODE,RI_REDUNDANT_INTERFACES,FP,pool,1612,"public class GenericObjectPool extends BaseObjectPool implements ObjectPool {
public static final byte WHEN_EXHAUSTED_FAIL   = 0;
public static final byte WHEN_EXHAUSTED_BLOCK  = 1;
public static final byte WHEN_EXHAUSTED_GROW   = 2;
public static final int DEFAULT_MAX_IDLE  = 8;
public static final int DEFAULT_MIN_IDLE = 0;
public static final int DEFAULT_MAX_ACTIVE  = 8;
public static final byte DEFAULT_WHEN_EXHAUSTED_ACTION = WHEN_EXHAUSTED_BLOCK;
public static final boolean DEFAULT_LIFO = true;
public static final long DEFAULT_MAX_WAIT = -1L;
public static final boolean DEFAULT_TEST_ON_BORROW = false;
public static final boolean DEFAULT_TEST_ON_RETURN = false;
public static final boolean DEFAULT_TEST_WHILE_IDLE = false;
public static final long DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS = -1L;
public static final int DEFAULT_NUM_TESTS_PER_EVICTION_RUN = 3;
public static final long DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS = 1000L * 60L * 30L;
public static final long DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS = -1;
public GenericObjectPool() {
this(null, DEFAULT_MAX_ACTIVE, DEFAULT_WHEN_EXHAUSTED_ACTION, DEFAULT_MAX_WAIT, DEFAULT_MAX_IDLE,
DEFAULT_MIN_IDLE, DEFAULT_TEST_ON_BORROW, DEFAULT_TEST_ON_RETURN, DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS,
DEFAULT_NUM_TESTS_PER_EVICTION_RUN, DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS, DEFAULT_TEST_WHILE_IDLE);
}
public GenericObjectPool(PoolableObjectFactory factory) {
this(factory, DEFAULT_MAX_ACTIVE, DEFAULT_WHEN_EXHAUSTED_ACTION, DEFAULT_MAX_WAIT, DEFAULT_MAX_IDLE,
DEFAULT_MIN_IDLE, DEFAULT_TEST_ON_BORROW, DEFAULT_TEST_ON_RETURN, DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS,
DEFAULT_NUM_TESTS_PER_EVICTION_RUN, DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS, DEFAULT_TEST_WHILE_IDLE);
}
public GenericObjectPool(PoolableObjectFactory factory, GenericObjectPool.Config config) {
this(factory, config.maxActive, config.whenExhaustedAction, config.maxWait, config.maxIdle, config.minIdle,
config.testOnBorrow, config.testOnReturn, config.timeBetweenEvictionRunsMillis,
config.numTestsPerEvictionRun, config.minEvictableIdleTimeMillis, config.testWhileIdle,
config.softMinEvictableIdleTimeMillis, config.lifo);
}
public GenericObjectPool(PoolableObjectFactory factory, int maxActive) {
this(factory, maxActive, DEFAULT_WHEN_EXHAUSTED_ACTION, DEFAULT_MAX_WAIT, DEFAULT_MAX_IDLE, DEFAULT_MIN_IDLE,
DEFAULT_TEST_ON_BORROW, DEFAULT_TEST_ON_RETURN, DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS,
DEFAULT_NUM_TESTS_PER_EVICTION_RUN, DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS, DEFAULT_TEST_WHILE_IDLE);
}
public GenericObjectPool(PoolableObjectFactory factory, int maxActive, byte whenExhaustedAction, long maxWait) {
this(factory, maxActive, whenExhaustedAction, maxWait, DEFAULT_MAX_IDLE, DEFAULT_MIN_IDLE, DEFAULT_TEST_ON_BORROW,
DEFAULT_TEST_ON_RETURN, DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS, DEFAULT_NUM_TESTS_PER_EVICTION_RUN,
DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS, DEFAULT_TEST_WHILE_IDLE);
}
public GenericObjectPool(PoolableObjectFactory factory, int maxActive, byte whenExhaustedAction, long maxWait,
boolean testOnBorrow, boolean testOnReturn) {
this(factory, maxActive, whenExhaustedAction, maxWait, DEFAULT_MAX_IDLE, DEFAULT_MIN_IDLE, testOnBorrow,
testOnReturn, DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS, DEFAULT_NUM_TESTS_PER_EVICTION_RUN,
DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS, DEFAULT_TEST_WHILE_IDLE);
}
public GenericObjectPool(PoolableObjectFactory factory, int maxActive, byte whenExhaustedAction, long maxWait, int maxIdle) {
this(factory, maxActive, whenExhaustedAction, maxWait, maxIdle, DEFAULT_MIN_IDLE, DEFAULT_TEST_ON_BORROW,
DEFAULT_TEST_ON_RETURN, DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS, DEFAULT_NUM_TESTS_PER_EVICTION_RUN,
DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS, DEFAULT_TEST_WHILE_IDLE);
}
public GenericObjectPool(PoolableObjectFactory factory, int maxActive, byte whenExhaustedAction, long maxWait,
int maxIdle, boolean testOnBorrow, boolean testOnReturn) {
this(factory, maxActive, whenExhaustedAction, maxWait, maxIdle, DEFAULT_MIN_IDLE, testOnBorrow, testOnReturn,
DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS, DEFAULT_NUM_TESTS_PER_EVICTION_RUN,
DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS, DEFAULT_TEST_WHILE_IDLE);
}
public GenericObjectPool(PoolableObjectFactory factory, int maxActive, byte whenExhaustedAction, long maxWait,
int maxIdle, boolean testOnBorrow, boolean testOnReturn, long timeBetweenEvictionRunsMillis,
int numTestsPerEvictionRun, long minEvictableIdleTimeMillis, boolean testWhileIdle) {
this(factory, maxActive, whenExhaustedAction, maxWait, maxIdle, DEFAULT_MIN_IDLE, testOnBorrow, testOnReturn,
timeBetweenEvictionRunsMillis, numTestsPerEvictionRun, minEvictableIdleTimeMillis, testWhileIdle);
}
public GenericObjectPool(PoolableObjectFactory factory, int maxActive, byte whenExhaustedAction, long maxWait,
int maxIdle, int minIdle, boolean testOnBorrow, boolean testOnReturn, long timeBetweenEvictionRunsMillis,
int numTestsPerEvictionRun, long minEvictableIdleTimeMillis, boolean testWhileIdle) {
this(factory, maxActive, whenExhaustedAction, maxWait, maxIdle, minIdle, testOnBorrow, testOnReturn,
timeBetweenEvictionRunsMillis, numTestsPerEvictionRun, minEvictableIdleTimeMillis, testWhileIdle,
DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS);
}
public GenericObjectPool(PoolableObjectFactory factory, int maxActive, byte whenExhaustedAction, long maxWait,
int maxIdle, int minIdle, boolean testOnBorrow, boolean testOnReturn, long timeBetweenEvictionRunsMillis,
int numTestsPerEvictionRun, long minEvictableIdleTimeMillis, boolean testWhileIdle,
long softMinEvictableIdleTimeMillis) {
this(factory, maxActive, whenExhaustedAction, maxWait, maxIdle, minIdle, testOnBorrow, testOnReturn,
timeBetweenEvictionRunsMillis, numTestsPerEvictionRun, minEvictableIdleTimeMillis, testWhileIdle,
softMinEvictableIdleTimeMillis, DEFAULT_LIFO);
}
public GenericObjectPool(PoolableObjectFactory factory, int maxActive, byte whenExhaustedAction, long maxWait,
int maxIdle, int minIdle, boolean testOnBorrow, boolean testOnReturn, long timeBetweenEvictionRunsMillis,
int numTestsPerEvictionRun, long minEvictableIdleTimeMillis, boolean testWhileIdle,
long softMinEvictableIdleTimeMillis, boolean lifo) {
_factory = factory;
_maxActive = maxActive;
_lifo = lifo;
switch(whenExhaustedAction) {
case WHEN_EXHAUSTED_BLOCK:
case WHEN_EXHAUSTED_FAIL:
case WHEN_EXHAUSTED_GROW:
_whenExhaustedAction = whenExhaustedAction;
break;
default:
throw new IllegalArgumentException(""whenExhaustedAction "" + whenExhaustedAction + "" not recognized."");
}
_maxWait = maxWait;
_maxIdle = maxIdle;
_minIdle = minIdle;
_testOnBorrow = testOnBorrow;
_testOnReturn = testOnReturn;
_timeBetweenEvictionRunsMillis = timeBetweenEvictionRunsMillis;
_numTestsPerEvictionRun = numTestsPerEvictionRun;
_minEvictableIdleTimeMillis = minEvictableIdleTimeMillis;
_softMinEvictableIdleTimeMillis = softMinEvictableIdleTimeMillis;
_testWhileIdle = testWhileIdle;
_pool = new CursorableLinkedList();
startEvictor(_timeBetweenEvictionRunsMillis);
}
public synchronized int getMaxActive() {
return _maxActive;
}
public synchronized void setMaxActive(int maxActive) {
_maxActive = maxActive;
allocate();
}
public synchronized byte getWhenExhaustedAction() {
return _whenExhaustedAction;
}
public synchronized void setWhenExhaustedAction(byte whenExhaustedAction) {
switch(whenExhaustedAction) {
case WHEN_EXHAUSTED_BLOCK:
case WHEN_EXHAUSTED_FAIL:
case WHEN_EXHAUSTED_GROW:
_whenExhaustedAction = whenExhaustedAction;
allocate();
break;
default:
throw new IllegalArgumentException(""whenExhaustedAction "" + whenExhaustedAction + "" not recognized."");
}
}
public synchronized long getMaxWait() {
return _maxWait;
}
public synchronized void setMaxWait(long maxWait) {
_maxWait = maxWait;
allocate();
}
public synchronized int getMaxIdle() {
return _maxIdle;
}
public synchronized void setMaxIdle(int maxIdle) {
_maxIdle = maxIdle;
allocate();
}
public synchronized void setMinIdle(int minIdle) {
_minIdle = minIdle;
allocate();
}
public synchronized int getMinIdle() {
return _minIdle;
}
public boolean getTestOnBorrow() {
return _testOnBorrow;
}
public void setTestOnBorrow(boolean testOnBorrow) {
_testOnBorrow = testOnBorrow;
}
public boolean getTestOnReturn() {
return _testOnReturn;
}
public void setTestOnReturn(boolean testOnReturn) {
_testOnReturn = testOnReturn;
}
public synchronized long getTimeBetweenEvictionRunsMillis() {
return _timeBetweenEvictionRunsMillis;
}
public synchronized void setTimeBetweenEvictionRunsMillis(long timeBetweenEvictionRunsMillis) {
_timeBetweenEvictionRunsMillis = timeBetweenEvictionRunsMillis;
startEvictor(_timeBetweenEvictionRunsMillis);
}
public synchronized int getNumTestsPerEvictionRun() {
return _numTestsPerEvictionRun;
}
public synchronized void setNumTestsPerEvictionRun(int numTestsPerEvictionRun) {
_numTestsPerEvictionRun = numTestsPerEvictionRun;
}
public synchronized long getMinEvictableIdleTimeMillis() {
return _minEvictableIdleTimeMillis;
}
public synchronized void setMinEvictableIdleTimeMillis(long minEvictableIdleTimeMillis) {
_minEvictableIdleTimeMillis = minEvictableIdleTimeMillis;
}
public synchronized long getSoftMinEvictableIdleTimeMillis() {
return _softMinEvictableIdleTimeMillis;
}
public synchronized void setSoftMinEvictableIdleTimeMillis(long softMinEvictableIdleTimeMillis) {
_softMinEvictableIdleTimeMillis = softMinEvictableIdleTimeMillis;
}
public synchronized boolean getTestWhileIdle() {
return _testWhileIdle;
}
public synchronized void setTestWhileIdle(boolean testWhileIdle) {
_testWhileIdle = testWhileIdle;
}
public synchronized boolean getLifo() {
return _lifo;
}
public synchronized void setLifo(boolean lifo) {
this._lifo = lifo;
}
public synchronized void setConfig(GenericObjectPool.Config conf) {
setMaxIdle(conf.maxIdle);
setMinIdle(conf.minIdle);
setMaxActive(conf.maxActive);
setMaxWait(conf.maxWait);
setWhenExhaustedAction(conf.whenExhaustedAction);
setTestOnBorrow(conf.testOnBorrow);
setTestOnReturn(conf.testOnReturn);
setTestWhileIdle(conf.testWhileIdle);
setNumTestsPerEvictionRun(conf.numTestsPerEvictionRun);
setMinEvictableIdleTimeMillis(conf.minEvictableIdleTimeMillis);
setTimeBetweenEvictionRunsMillis(conf.timeBetweenEvictionRunsMillis);
setSoftMinEvictableIdleTimeMillis(conf.softMinEvictableIdleTimeMillis);
setLifo(conf.lifo);
allocate();
}
public Object borrowObject() throws Exception {
long starttime = System.currentTimeMillis();
Latch latch = new Latch();
byte whenExhaustedAction;
long maxWait;
synchronized (this) {
whenExhaustedAction = _whenExhaustedAction;
maxWait = _maxWait;
_allocationQueue.add(latch);
allocate();
}
for(;;) {
synchronized (this) {
assertOpen();
}
if(latch.getPair() == null) {
if(latch.mayCreate()) {
} else {
switch(whenExhaustedAction) {
case WHEN_EXHAUSTED_GROW:
synchronized (this) {
if (latch.getPair() == null) {
_allocationQueue.remove(latch);
_numInternalProcessing++;
}
}
break;
case WHEN_EXHAUSTED_FAIL:
synchronized (this) {
if (latch.getPair() != null) {
break;
}
_allocationQueue.remove(latch);
}
throw new NoSuchElementException(""Pool exhausted"");
case WHEN_EXHAUSTED_BLOCK:
try {
synchronized (latch) {
if (latch.getPair() == null) {
if(maxWait <= 0) {
latch.wait();
} else {
final long elapsed = (System.currentTimeMillis() - starttime);
final long waitTime = maxWait - elapsed;
if (waitTime > 0)
{
latch.wait(waitTime);
}
}
} else {
break;
}
}
} catch(InterruptedException e) {
Thread.currentThread().interrupt();
throw e;
}
if(maxWait > 0 && ((System.currentTimeMillis() - starttime) >= maxWait)) {
synchronized(this) {
if (latch.getPair() == null) {
_allocationQueue.remove(latch);
} else {
break;
}
}
throw new NoSuchElementException(""Timeout waiting for idle object"");
} else {
continue; 
}
default:
throw new IllegalArgumentException(""WhenExhaustedAction property "" + whenExhaustedAction +
"" not recognized."");
}
}
}
boolean newlyCreated = false;
if(null == latch.getPair()) {
try {
Object obj = _factory.makeObject();
latch.setPair(new ObjectTimestampPair(obj));
newlyCreated = true;
} finally {
if (!newlyCreated) {
synchronized (this) {
_numInternalProcessing--;
allocate();
}
}
}
}
try {
_factory.activateObject(latch.getPair().value);
if(_testOnBorrow &&
!_factory.validateObject(latch.getPair().value)) {
throw new Exception(""ValidateObject failed"");
}
synchronized(this) {
_numInternalProcessing--;
_numActive++;
}
return latch.getPair().value;
}
catch (Throwable e) {
try {
_factory.destroyObject(latch.getPair().value);
} catch (Throwable e2) {
}
synchronized (this) {
_numInternalProcessing--;
latch.reset();
_allocationQueue.add(0, latch);
allocate();
}
if(newlyCreated) {
throw new NoSuchElementException(""Could not create a validated object, cause: "" + e.getMessage());
}
else {
continue; 
}
}
}
}
private synchronized void allocate() {
if (isClosed()) return;
for (;;) {
if (!_pool.isEmpty() && !_allocationQueue.isEmpty()) {
Latch latch = (Latch) _allocationQueue.removeFirst();
latch.setPair((ObjectTimestampPair) _pool.removeFirst());
_numInternalProcessing++;
synchronized (latch) {
latch.notify();
}
} else {
break;
}
}
for(;;) {
if((!_allocationQueue.isEmpty()) && (_maxActive < 0 || (_numActive + _numInternalProcessing) < _maxActive)) {
Latch latch = (Latch) _allocationQueue.removeFirst();
latch.setMayCreate(true);
_numInternalProcessing++;
synchronized (latch) {
latch.notify();
}
} else {
break;
}
}
}
public void invalidateObject(Object obj) throws Exception {
try {
if (_factory != null) {
_factory.destroyObject(obj);
}
} finally {
synchronized (this) {
_numActive--;
allocate();
}
}
}
public void clear() {
List toDestroy = new ArrayList();
synchronized(this) {
toDestroy.addAll(_pool);
_numInternalProcessing = _numInternalProcessing + _pool._size;
_pool.clear();
}
destroy(toDestroy);
}
private void destroy(Collection c) {
for (Iterator it = c.iterator(); it.hasNext();) {
try {
_factory.destroyObject(((ObjectTimestampPair)(it.next())).value);
} catch(Exception e) {
} finally {
synchronized(this) {
_numInternalProcessing--;
allocate();
}
}
}
}
public synchronized int getNumActive() {
return _numActive;
}
public synchronized int getNumIdle() {
return _pool.size();
}
public void returnObject(Object obj) throws Exception {
try {
addObjectToPool(obj, true);
} catch (Exception e) {
if (_factory != null) {
try {
_factory.destroyObject(obj);
} catch (Exception e2) {
}
// TODO: Correctness here depends on control in addObjectToPool.
synchronized(this) {
_numActive--;
allocate();
}
}
}
}
private void addObjectToPool(Object obj, boolean decrementNumActive) throws Exception {
boolean success = true;
if(_testOnReturn && !(_factory.validateObject(obj))) {
success = false;
} else {
_factory.passivateObject(obj);
}
boolean shouldDestroy = !success;
synchronized (this) {
if (isClosed()) {
shouldDestroy = true;
} else {
if((_maxIdle >= 0) && (_pool.size() >= _maxIdle)) {
shouldDestroy = true;
} else if(success) {
if (_lifo) {
_pool.addFirst(new ObjectTimestampPair(obj));
} else {
_pool.addLast(new ObjectTimestampPair(obj));
}
if (decrementNumActive) {
_numActive--;
}
allocate();
}
}
}
if(shouldDestroy) {
try {
_factory.destroyObject(obj);
} catch(Exception e) {
}
if (decrementNumActive) {
synchronized(this) {
_numActive--;
allocate();
}
}
}
}
public void close() throws Exception {
super.close();
synchronized (this) {
clear();
startEvictor(-1L);
}
}
public void setFactory(PoolableObjectFactory factory) throws IllegalStateException {
List toDestroy = new ArrayList();
synchronized (this) {
assertOpen();
if(0 < getNumActive()) {
throw new IllegalStateException(""Objects are already active"");
} else {
toDestroy.addAll(_pool);
_numInternalProcessing = _numInternalProcessing + _pool._size;
_pool.clear();
}
_factory = factory;
}
destroy(toDestroy);
}
public void evict() throws Exception {
assertOpen();
synchronized (this) {
if(_pool.isEmpty()) {
return;
}
if (null == _evictionCursor) {
_evictionCursor = (_pool.cursor(_lifo ? _pool.size() : 0));
}
}
for (int i=0,m=getNumTests();i<m;i++) {
final ObjectTimestampPair pair;
synchronized (this) {
if ((_lifo && !_evictionCursor.hasPrevious()) ||
!_lifo && !_evictionCursor.hasNext()) {
_evictionCursor.close();
_evictionCursor = _pool.cursor(_lifo ? _pool.size() : 0);
}
pair = _lifo ?
(ObjectTimestampPair) _evictionCursor.previous() :
(ObjectTimestampPair) _evictionCursor.next();
_evictionCursor.remove();
_numInternalProcessing++;
}
boolean removeObject = false;
final long idleTimeMilis = System.currentTimeMillis() - pair.tstamp;
if ((getMinEvictableIdleTimeMillis() > 0) &&
(idleTimeMilis > getMinEvictableIdleTimeMillis())) {
removeObject = true;
} else if ((getSoftMinEvictableIdleTimeMillis() > 0) &&
(idleTimeMilis > getSoftMinEvictableIdleTimeMillis()) &&
((getNumIdle() + 1)> getMinIdle())) { 
removeObject = true;
}
if(getTestWhileIdle() && !removeObject) {
boolean active = false;
try {
_factory.activateObject(pair.value);
active = true;
} catch(Exception e) {
removeObject=true;
}
if(active) {
if(!_factory.validateObject(pair.value)) {
removeObject=true;
} else {
try {
_factory.passivateObject(pair.value);
} catch(Exception e) {
removeObject=true;
}
}
}
}
if (removeObject) {
try {
_factory.destroyObject(pair.value);
} catch(Exception e) {
}
}
synchronized (this) {
if(!removeObject) {
_evictionCursor.add(pair);
if (_lifo) {
_evictionCursor.previous();
}
}
_numInternalProcessing--;
}
}
}
private void ensureMinIdle() throws Exception {
int objectDeficit = calculateDeficit(false);
for ( int j = 0 ; j < objectDeficit && calculateDeficit(true) > 0 ; j++ ) {
try {
addObject();
} finally {
synchronized (this) {
_numInternalProcessing--;
allocate();
}
}
}
}
private synchronized int calculateDeficit(boolean incrementInternal) {
int objectDeficit = getMinIdle() - getNumIdle();
if (_maxActive > 0) {
int growLimit = Math.max(0,
getMaxActive() - getNumActive() - getNumIdle() - _numInternalProcessing);
objectDeficit = Math.min(objectDeficit, growLimit);
}
if (incrementInternal && objectDeficit >0) {
_numInternalProcessing++;
}
return objectDeficit;
}
public void addObject() throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
Object obj = _factory.makeObject();
try {
assertOpen();
addObjectToPool(obj, false);
} catch (IllegalStateException ex) { 
try {
_factory.destroyObject(obj);
} catch (Exception ex2) {
}
throw ex;
}
}
protected synchronized void startEvictor(long delay) {
if(null != _evictor) {
EvictionTimer.cancel(_evictor);
_evictor = null;
}
if(delay > 0) {
_evictor = new Evictor();
EvictionTimer.schedule(_evictor, delay, delay);
}
}
synchronized String debugInfo() {
StringBuffer buf = new StringBuffer();
buf.append(""Active: "").append(getNumActive()).append(""\n"");
buf.append(""Idle: "").append(getNumIdle()).append(""\n"");
buf.append(""Idle Objects:\n"");
Iterator it = _pool.iterator();
long time = System.currentTimeMillis();
while(it.hasNext()) {
ObjectTimestampPair pair = (ObjectTimestampPair)(it.next());
buf.append(""\t"").append(pair.value).append(""\t"").append(time - pair.tstamp).append(""\n"");
}
return buf.toString();
}
private int getNumTests() {
if(_numTestsPerEvictionRun >= 0) {
return Math.min(_numTestsPerEvictionRun, _pool.size());
} else {
return(int)(Math.ceil(_pool.size()/Math.abs((double)_numTestsPerEvictionRun)));
}
}
private class Evictor extends TimerTask {
public void run() {
try {
evict();
} catch(Exception e) {
} catch(OutOfMemoryError oome) {
oome.printStackTrace(System.err);
}
try {
ensureMinIdle();
} catch(Exception e) {
}
}
}
public static class Config {
public int maxIdle = GenericObjectPool.DEFAULT_MAX_IDLE;
public int minIdle = GenericObjectPool.DEFAULT_MIN_IDLE;
public int maxActive = GenericObjectPool.DEFAULT_MAX_ACTIVE;
public long maxWait = GenericObjectPool.DEFAULT_MAX_WAIT;
public byte whenExhaustedAction = GenericObjectPool.DEFAULT_WHEN_EXHAUSTED_ACTION;
public boolean testOnBorrow = GenericObjectPool.DEFAULT_TEST_ON_BORROW;
public boolean testOnReturn = GenericObjectPool.DEFAULT_TEST_ON_RETURN;
public boolean testWhileIdle = GenericObjectPool.DEFAULT_TEST_WHILE_IDLE;
public long timeBetweenEvictionRunsMillis = GenericObjectPool.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS;
public int numTestsPerEvictionRun =  GenericObjectPool.DEFAULT_NUM_TESTS_PER_EVICTION_RUN;
public long minEvictableIdleTimeMillis = GenericObjectPool.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS;
public long softMinEvictableIdleTimeMillis = GenericObjectPool.DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS;
public boolean lifo = GenericObjectPool.DEFAULT_LIFO;
}
private static final class Latch {
private ObjectTimestampPair _pair;
private boolean _mayCreate = false;
private synchronized ObjectTimestampPair getPair() {
return _pair;
}
private synchronized void setPair(ObjectTimestampPair pair) {
_pair = pair;
}
private synchronized boolean mayCreate() {
return _mayCreate;
}
private synchronized void setMayCreate(boolean mayCreate) {
_mayCreate = mayCreate;
}
private synchronized void reset() {
_pair = null;
_mayCreate = false;
}
}
private int _maxIdle = DEFAULT_MAX_IDLE;
private int _minIdle = DEFAULT_MIN_IDLE;
private int _maxActive = DEFAULT_MAX_ACTIVE;
private long _maxWait = DEFAULT_MAX_WAIT;
private byte _whenExhaustedAction = DEFAULT_WHEN_EXHAUSTED_ACTION;
private volatile boolean _testOnBorrow = DEFAULT_TEST_ON_BORROW;
private volatile boolean _testOnReturn = DEFAULT_TEST_ON_RETURN;
private boolean _testWhileIdle = DEFAULT_TEST_WHILE_IDLE;
private long _timeBetweenEvictionRunsMillis = DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS;
private int _numTestsPerEvictionRun =  DEFAULT_NUM_TESTS_PER_EVICTION_RUN;
private long _minEvictableIdleTimeMillis = DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS;
private long _softMinEvictableIdleTimeMillis = DEFAULT_SOFT_MIN_EVICTABLE_IDLE_TIME_MILLIS;
private boolean _lifo = DEFAULT_LIFO;
private CursorableLinkedList _pool = null;
private CursorableLinkedList.Cursor _evictionCursor = null;
private PoolableObjectFactory _factory = null;
private int _numActive = 0;
private Evictor _evictor = null;
private int _numInternalProcessing = 0;
private LinkedList _allocationQueue = new LinkedList();
","public void addObject() throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
Object obj = _factory.makeObject();
try {
assertOpen();
addObjectToPool(obj, false);
} catch (IllegalStateException ex) {
try {
_factory.destroyObject(obj);
} catch (Exception ex2) {
}
throw ex;
}
}","public void addObject() throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
Object objectVar1 = objectLiteral2;
try {
assertOpen();
addObjectToPool(objectVar1, false);
} catch (IllegalStateException ex) {
try {
_factory.destroyObject(objectVar1);
} catch (Exception ex2) {
}
throw ex;
}
}"
17755,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1620,"} catch(Exception e) {
","public synchronized void returnObject(Object obj) throws Exception {
boolean success = !isClosed();
if (_factory != null) {
if (!_factory.validateObject(obj)) {
success = false;
} else {
try {
_factory.passivateObject(obj);
} catch (Exception e) {
success = false;
}
}
}
boolean shouldDestroy = !success;
_numActive--;
if (success) {
_pool.add(new SoftReference(obj, refQueue));
}
notifyAll();
if (shouldDestroy && _factory != null) {
try {
_factory.destroyObject(obj);
} catch (Exception e) {
}
}
}","public synchronized void returnObject(Object obj) throws Exception {
boolean booleanVar1 = booleanLiteral2;
if (_factory != null) {
if (!_factory.validateObject(obj)) {
booleanVar1 = false;
} else {
try {
_factory.passivateObject(obj);
} catch (Exception e) {
booleanVar1 = false;
}
}
}
boolean booleanVar3 = booleanLiteral4;
_numActive--;
if (booleanVar1) {
_pool.add(new SoftReference(obj, refQueue));
}
notifyAll();
if (booleanVar3 && _factory != null) {
try {
_factory.destroyObject(obj);
} catch (Exception e) {
}
}
}"
17760,PERFORMANCE,WMI_WRONG_MAP_ITERATOR,FP,pool,1625,"Stack s = (Stack)(_pools.get(key));
","public synchronized String toString() {
StringBuffer buf = new StringBuffer();
buf.append(getClass().getName());
buf.append("" contains "").append(_pools.size()).append("" distinct pools: "");
Iterator it = _pools.keySet().iterator();
while (it.hasNext()) {
Object key = it.next();
buf.append("" |"").append(key).append(""|="");
Stack s = (Stack) (_pools.get(key));
buf.append(s.size());
}
return buf.toString();
}","public synchronized String toString() {
StringBuffer stringbufferVar1 = stringbufferLiteral2;
stringbufferVar1.append(getClass().getName());
stringbufferVar1.append("" contains "").append(_pools.size()).append("" distinct pools: "");
Iterator iteratorVar3 = iteratorLiteral4;
while (iteratorVar3.hasNext()) {
Object objectVar5 = objectLiteral6;
stringbufferVar1.append("" |"").append(objectVar5).append(""|="");
Stack stackVar7 = stackLiteral8;
stringbufferVar1.append(stackVar7.size());
}
return stringbufferVar1.toString();
}"
17770,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1635,"} catch (Exception e) {
","public void returnObject(final Object obj) {
if (type.isInstance(obj)) {
try {
pool.returnObject(obj);
} catch (Exception e) {
}
} else {
throw new ClassCastException(""Returned object is not of type: "" + type.getName() + "" was: "" + obj);
}
}","public void returnObject(final Object obj) {
if (type.isInstance(obj)) {
try {
pool.returnObject(obj);
} catch (Exception e) {
}
} else {
throw new ClassCastException(""Returned object is not of type: "" + type.getName() + "" was: "" + obj);
}
}"
17799,PERFORMANCE,WMI_WRONG_MAP_ITERATOR,FP,pool,1664,"ObjectQueue pool = (ObjectQueue)_poolMap.get(key);
","public void clear() {
Map toDestroy = new HashMap();
synchronized (this) {
for (Iterator it = _poolMap.keySet().iterator(); it.hasNext(); ) {
Object key = it.next();
ObjectQueue pool = (ObjectQueue) _poolMap.get(key);
List objects = new ArrayList();
objects.addAll(pool.queue);
toDestroy.put(key, objects);
it.remove();
_poolList.remove(key);
_totalIdle = _totalIdle - pool.queue.size();
_totalInternalProcessing = _totalInternalProcessing + pool.queue.size();
pool.queue.clear();
}
}
destroy(toDestroy, _factory);
}","public void clear() {
Map mapVar1 = mapLiteral2;
synchronized (this) {
for (Iterator iteratorVar11 = iteratorLiteral12; iteratorVar3.hasNext(); ) {
Object objectVar5 = objectLiteral6;
ObjectQueue objectqueueVar7 = objectqueueLiteral8;
List listVar9 = listLiteral10;
listVar9.addAll(objectqueueVar7.queue);
mapVar1.put(objectVar5, listVar9);
iteratorVar3.remove();
_poolList.remove(objectVar5);
_totalIdle = _totalIdle - objectqueueVar7.queue.size();
_totalInternalProcessing = _totalInternalProcessing + objectqueueVar7.queue.size();
objectqueueVar7.queue.clear();
}
}
destroy(mapVar1, _factory);
}"
17807,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1672,"} catch(Exception e) {
","public void run() {
try {
evict();
} catch (Exception e) {
} catch (OutOfMemoryError oome) {
oome.printStackTrace(System.err);
}
try {
ensureMinIdle();
} catch (Exception e) {
}
}","public void run() {
try {
evict();
} catch (Exception e) {
} catch (OutOfMemoryError oome) {
oome.printStackTrace(System.err);
}
try {
ensureMinIdle();
} catch (Exception e) {
}
}"
17819,PERFORMANCE,WMI_WRONG_MAP_ITERATOR,FP,pool,1684,"Stack s = (Stack)(_pools.get(key));
","public synchronized String toString() {
StringBuffer buf = new StringBuffer();
buf.append(getClass().getName());
buf.append("" contains "").append(_pools.size()).append("" distinct pools: "");
Iterator it = _pools.keySet().iterator();
while (it.hasNext()) {
Object key = it.next();
buf.append("" |"").append(key).append(""|="");
Stack s = (Stack) (_pools.get(key));
buf.append(s.size());
}
return buf.toString();
}","public synchronized String toString() {
StringBuffer stringbufferVar1 = stringbufferLiteral2;
stringbufferVar1.append(getClass().getName());
stringbufferVar1.append("" contains "").append(_pools.size()).append("" distinct pools: "");
Iterator iteratorVar3 = iteratorLiteral4;
while (iteratorVar3.hasNext()) {
Object objectVar5 = objectLiteral6;
stringbufferVar1.append("" |"").append(objectVar5).append(""|="");
Stack stackVar7 = stackLiteral8;
stringbufferVar1.append(stackVar7.size());
}
return stringbufferVar1.toString();
}"
17831,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1696,"} catch (Exception e) {
","public void invalidateObject(final Object obj) {
if (type.isInstance(obj)) {
try {
pool.invalidateObject(obj);
} catch (Exception e) {
}
} else {
throw new ClassCastException(""Invalidated object is not of type: "" + type.getName() + "" was: "" + obj);
}
}","public void invalidateObject(final Object obj) {
if (type.isInstance(obj)) {
try {
pool.invalidateObject(obj);
} catch (Exception e) {
}
} else {
throw new ClassCastException(""Invalidated object is not of type: "" + type.getName() + "" was: "" + obj);
}
}"
17845,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1710,"} catch (Exception e) {
","public void invalidateObject(final Object obj) {
try {
keyedPool.invalidateObject(key, obj);
} catch (Exception e) {
}
}","public void invalidateObject(final Object obj) {
try {
keyedPool.invalidateObject(key, obj);
} catch (Exception e) {
}
}"
17846,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1711,"} catch (Exception e) {
","public void close() {
try {
keyedPool.close();
} catch (Exception e) {
}
}","public void close() {
try {
keyedPool.close();
} catch (Exception e) {
}
}"
17862,DODGY_CODE,RI_REDUNDANT_INTERFACES,FP,pool,1727,"public class GenericKeyedObjectPool extends BaseKeyedObjectPool implements KeyedObjectPool {
public static final byte WHEN_EXHAUSTED_FAIL   = 0;
public static final byte WHEN_EXHAUSTED_BLOCK  = 1;
public static final byte WHEN_EXHAUSTED_GROW   = 2;
public static final int DEFAULT_MAX_IDLE  = 8;
public static final int DEFAULT_MAX_ACTIVE  = 8;
public static final int DEFAULT_MAX_TOTAL  = -1;
public static final byte DEFAULT_WHEN_EXHAUSTED_ACTION = WHEN_EXHAUSTED_BLOCK;
public static final long DEFAULT_MAX_WAIT = -1L;
public static final boolean DEFAULT_TEST_ON_BORROW = false;
public static final boolean DEFAULT_TEST_ON_RETURN = false;
public static final boolean DEFAULT_TEST_WHILE_IDLE = false;
public static final long DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS = -1L;
public static final int DEFAULT_NUM_TESTS_PER_EVICTION_RUN = 3;
public static final long DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS = 1000L * 60L * 30L;
public static final int DEFAULT_MIN_IDLE = 0;
public static final boolean DEFAULT_LIFO = true;
public GenericKeyedObjectPool() {
this(null, DEFAULT_MAX_ACTIVE, DEFAULT_WHEN_EXHAUSTED_ACTION, DEFAULT_MAX_WAIT, DEFAULT_MAX_IDLE,
DEFAULT_TEST_ON_BORROW, DEFAULT_TEST_ON_RETURN, DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS,
DEFAULT_NUM_TESTS_PER_EVICTION_RUN, DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS, DEFAULT_TEST_WHILE_IDLE);
}
public GenericKeyedObjectPool(KeyedPoolableObjectFactory factory) {
this(factory, DEFAULT_MAX_ACTIVE, DEFAULT_WHEN_EXHAUSTED_ACTION, DEFAULT_MAX_WAIT, DEFAULT_MAX_IDLE,
DEFAULT_TEST_ON_BORROW, DEFAULT_TEST_ON_RETURN, DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS,
DEFAULT_NUM_TESTS_PER_EVICTION_RUN, DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS, DEFAULT_TEST_WHILE_IDLE);
}
public GenericKeyedObjectPool(KeyedPoolableObjectFactory factory, GenericKeyedObjectPool.Config config) {
this(factory, config.maxActive, config.whenExhaustedAction, config.maxWait, config.maxIdle, config.maxTotal,
config.minIdle, config.testOnBorrow, config.testOnReturn, config.timeBetweenEvictionRunsMillis,
config.numTestsPerEvictionRun, config.minEvictableIdleTimeMillis, config.testWhileIdle, config.lifo);
}
public GenericKeyedObjectPool(KeyedPoolableObjectFactory factory, int maxActive) {
this(factory,maxActive, DEFAULT_WHEN_EXHAUSTED_ACTION, DEFAULT_MAX_WAIT, DEFAULT_MAX_IDLE,
DEFAULT_TEST_ON_BORROW, DEFAULT_TEST_ON_RETURN, DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS,
DEFAULT_NUM_TESTS_PER_EVICTION_RUN, DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS, DEFAULT_TEST_WHILE_IDLE);
}
public GenericKeyedObjectPool(KeyedPoolableObjectFactory factory, int maxActive, byte whenExhaustedAction,
long maxWait) {
this(factory, maxActive, whenExhaustedAction, maxWait, DEFAULT_MAX_IDLE, DEFAULT_TEST_ON_BORROW,
DEFAULT_TEST_ON_RETURN, DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS, DEFAULT_NUM_TESTS_PER_EVICTION_RUN,
DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS, DEFAULT_TEST_WHILE_IDLE);
}
public GenericKeyedObjectPool(KeyedPoolableObjectFactory factory, int maxActive, byte whenExhaustedAction,
long maxWait, boolean testOnBorrow, boolean testOnReturn) {
this(factory, maxActive, whenExhaustedAction, maxWait, DEFAULT_MAX_IDLE,testOnBorrow,testOnReturn,
DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS, DEFAULT_NUM_TESTS_PER_EVICTION_RUN,
DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS, DEFAULT_TEST_WHILE_IDLE);
}
public GenericKeyedObjectPool(KeyedPoolableObjectFactory factory, int maxActive, byte whenExhaustedAction,
long maxWait, int maxIdle) {
this(factory, maxActive, whenExhaustedAction, maxWait, maxIdle, DEFAULT_TEST_ON_BORROW, DEFAULT_TEST_ON_RETURN,
DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS, DEFAULT_NUM_TESTS_PER_EVICTION_RUN,
DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS, DEFAULT_TEST_WHILE_IDLE);
}
public GenericKeyedObjectPool(KeyedPoolableObjectFactory factory, int maxActive, byte whenExhaustedAction,
long maxWait, int maxIdle, boolean testOnBorrow, boolean testOnReturn) {
this(factory, maxActive, whenExhaustedAction, maxWait, maxIdle, testOnBorrow, testOnReturn,
DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS, DEFAULT_NUM_TESTS_PER_EVICTION_RUN,
DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS, DEFAULT_TEST_WHILE_IDLE);
}
public GenericKeyedObjectPool(KeyedPoolableObjectFactory factory, int maxActive, byte whenExhaustedAction,
long maxWait, int maxIdle, boolean testOnBorrow, boolean testOnReturn, long timeBetweenEvictionRunsMillis,
int numTestsPerEvictionRun, long minEvictableIdleTimeMillis, boolean testWhileIdle) {
this(factory, maxActive, whenExhaustedAction, maxWait, maxIdle, GenericKeyedObjectPool.DEFAULT_MAX_TOTAL,
testOnBorrow, testOnReturn, timeBetweenEvictionRunsMillis, numTestsPerEvictionRun,
minEvictableIdleTimeMillis, testWhileIdle);
}
public GenericKeyedObjectPool(KeyedPoolableObjectFactory factory, int maxActive, byte whenExhaustedAction,
long maxWait, int maxIdle, int maxTotal, boolean testOnBorrow, boolean testOnReturn,
long timeBetweenEvictionRunsMillis, int numTestsPerEvictionRun, long minEvictableIdleTimeMillis,
boolean testWhileIdle) {
this(factory, maxActive, whenExhaustedAction, maxWait, maxIdle, maxTotal,
GenericKeyedObjectPool.DEFAULT_MIN_IDLE, testOnBorrow, testOnReturn, timeBetweenEvictionRunsMillis,
numTestsPerEvictionRun, minEvictableIdleTimeMillis, testWhileIdle);
}
public GenericKeyedObjectPool(KeyedPoolableObjectFactory factory, int maxActive, byte whenExhaustedAction,
long maxWait, int maxIdle, int maxTotal, int minIdle, boolean testOnBorrow, boolean testOnReturn,
long timeBetweenEvictionRunsMillis, int numTestsPerEvictionRun, long minEvictableIdleTimeMillis,
boolean testWhileIdle) {
this(factory, maxActive, whenExhaustedAction, maxWait, maxIdle, maxTotal, minIdle, testOnBorrow, testOnReturn,
timeBetweenEvictionRunsMillis, numTestsPerEvictionRun, minEvictableIdleTimeMillis, testWhileIdle,
DEFAULT_LIFO);
}
public GenericKeyedObjectPool(KeyedPoolableObjectFactory factory, int maxActive, byte whenExhaustedAction,
long maxWait, int maxIdle, int maxTotal, int minIdle, boolean testOnBorrow, boolean testOnReturn,
long timeBetweenEvictionRunsMillis, int numTestsPerEvictionRun, long minEvictableIdleTimeMillis,
boolean testWhileIdle, boolean lifo) {
_factory = factory;
_maxActive = maxActive;
_lifo = lifo;
switch (whenExhaustedAction) {
case WHEN_EXHAUSTED_BLOCK:
case WHEN_EXHAUSTED_FAIL:
case WHEN_EXHAUSTED_GROW:
_whenExhaustedAction = whenExhaustedAction;
break;
default:
throw new IllegalArgumentException(""whenExhaustedAction "" + whenExhaustedAction + "" not recognized."");
}
_maxWait = maxWait;
_maxIdle = maxIdle;
_maxTotal = maxTotal;
_minIdle = minIdle;
_testOnBorrow = testOnBorrow;
_testOnReturn = testOnReturn;
_timeBetweenEvictionRunsMillis = timeBetweenEvictionRunsMillis;
_numTestsPerEvictionRun = numTestsPerEvictionRun;
_minEvictableIdleTimeMillis = minEvictableIdleTimeMillis;
_testWhileIdle = testWhileIdle;
_poolMap = new HashMap();
_poolList = new CursorableLinkedList();
startEvictor(_timeBetweenEvictionRunsMillis);
}
public synchronized int getMaxActive() {
return _maxActive;
}
public void setMaxActive(int maxActive) {
synchronized(this) {
_maxActive = maxActive;
}
allocate();
}
public synchronized int getMaxTotal() {
return _maxTotal;
}
public void setMaxTotal(int maxTotal) {
synchronized(this) {
_maxTotal = maxTotal;
}
allocate();
}
public synchronized byte getWhenExhaustedAction() {
return _whenExhaustedAction;
}
public void setWhenExhaustedAction(byte whenExhaustedAction) {
synchronized(this) {
switch(whenExhaustedAction) {
case WHEN_EXHAUSTED_BLOCK:
case WHEN_EXHAUSTED_FAIL:
case WHEN_EXHAUSTED_GROW:
_whenExhaustedAction = whenExhaustedAction;
break;
default:
throw new IllegalArgumentException(""whenExhaustedAction "" + whenExhaustedAction + "" not recognized."");
}
}
allocate();
}
public synchronized long getMaxWait() {
return _maxWait;
}
public void setMaxWait(long maxWait) {
synchronized(this) {
_maxWait = maxWait;
}
allocate();
}
public synchronized int getMaxIdle() {
return _maxIdle;
}
public void setMaxIdle(int maxIdle) {
synchronized(this) {
_maxIdle = maxIdle;
}
allocate();
}
public void setMinIdle(int poolSize) {
_minIdle = poolSize;
}
public int getMinIdle() {
return _minIdle;
}
public boolean getTestOnBorrow() {
return _testOnBorrow;
}
public void setTestOnBorrow(boolean testOnBorrow) {
_testOnBorrow = testOnBorrow;
}
public boolean getTestOnReturn() {
return _testOnReturn;
}
public void setTestOnReturn(boolean testOnReturn) {
_testOnReturn = testOnReturn;
}
public synchronized long getTimeBetweenEvictionRunsMillis() {
return _timeBetweenEvictionRunsMillis;
}
public synchronized void setTimeBetweenEvictionRunsMillis(long timeBetweenEvictionRunsMillis) {
_timeBetweenEvictionRunsMillis = timeBetweenEvictionRunsMillis;
startEvictor(_timeBetweenEvictionRunsMillis);
}
public synchronized int getNumTestsPerEvictionRun() {
return _numTestsPerEvictionRun;
}
public synchronized void setNumTestsPerEvictionRun(int numTestsPerEvictionRun) {
_numTestsPerEvictionRun = numTestsPerEvictionRun;
}
public synchronized long getMinEvictableIdleTimeMillis() {
return _minEvictableIdleTimeMillis;
}
public synchronized void setMinEvictableIdleTimeMillis(long minEvictableIdleTimeMillis) {
_minEvictableIdleTimeMillis = minEvictableIdleTimeMillis;
}
public synchronized boolean getTestWhileIdle() {
return _testWhileIdle;
}
public synchronized void setTestWhileIdle(boolean testWhileIdle) {
_testWhileIdle = testWhileIdle;
}
public synchronized void setConfig(GenericKeyedObjectPool.Config conf) {
setMaxIdle(conf.maxIdle);
setMaxActive(conf.maxActive);
setMaxTotal(conf.maxTotal);
setMinIdle(conf.minIdle);
setMaxWait(conf.maxWait);
setWhenExhaustedAction(conf.whenExhaustedAction);
setTestOnBorrow(conf.testOnBorrow);
setTestOnReturn(conf.testOnReturn);
setTestWhileIdle(conf.testWhileIdle);
setNumTestsPerEvictionRun(conf.numTestsPerEvictionRun);
setMinEvictableIdleTimeMillis(conf.minEvictableIdleTimeMillis);
setTimeBetweenEvictionRunsMillis(conf.timeBetweenEvictionRunsMillis);
}
public synchronized boolean getLifo() {
return _lifo;
}
public synchronized void setLifo(boolean lifo) {
this._lifo = lifo;
}
public Object borrowObject(Object key) throws Exception {
long starttime = System.currentTimeMillis();
Latch latch = new Latch(key);
byte whenExhaustedAction;
long maxWait;
synchronized (this) {
whenExhaustedAction = _whenExhaustedAction;
maxWait = _maxWait;
_allocationQueue.add(latch);
}
allocate();
for(;;) {
synchronized (this) {
assertOpen();
}
if (null == latch.getPair()) {
if (latch.mayCreate()) {
} else {
switch(whenExhaustedAction) {
case WHEN_EXHAUSTED_GROW:
synchronized (this) {
if (latch.getPair() == null && !latch.mayCreate()) {
_allocationQueue.remove(latch);
latch.getPool().incrementInternalProcessingCount();
}
}
break;
case WHEN_EXHAUSTED_FAIL:
synchronized (this) {
if (latch.getPair() != null || latch.mayCreate()) {
break;
}
_allocationQueue.remove(latch);
}
throw new NoSuchElementException(""Pool exhausted"");
case WHEN_EXHAUSTED_BLOCK:
try {
synchronized (latch) {
if (latch.getPair() == null && !latch.mayCreate()) {
if (maxWait <= 0) {
latch.wait();
} else {
final long elapsed = (System.currentTimeMillis() - starttime);
final long waitTime = maxWait - elapsed;
if (waitTime > 0)
{
latch.wait(waitTime);
}
}
} else {
break;
}
}
} catch(InterruptedException e) {
boolean doAllocate = false;
synchronized (this) {
if (latch.getPair() == null && !latch.mayCreate()) {
_allocationQueue.remove(latch);
} else if (latch.getPair() == null && latch.mayCreate()) {
latch.getPool().decrementInternalProcessingCount();
doAllocate = true;
} else {
latch.getPool().decrementInternalProcessingCount();
latch.getPool().incrementActiveCount();
returnObject(latch.getkey(), latch.getPair().getValue());
}
}
if (doAllocate) {
allocate();
}
Thread.currentThread().interrupt();
throw e;
}
if (maxWait > 0 && ((System.currentTimeMillis() - starttime) >= maxWait)) {
synchronized (this) {
if (latch.getPair() == null && !latch.mayCreate()) {
_allocationQueue.remove(latch);
} else {
break;
}
}
throw new NoSuchElementException(""Timeout waiting for idle object"");
} else {
continue; 
}
default:
throw new IllegalArgumentException(""whenExhaustedAction "" + whenExhaustedAction +
"" not recognized."");
}
}
}
boolean newlyCreated = false;
if (null == latch.getPair()) {
try {
Object obj = _factory.makeObject(key);
latch.setPair(new ObjectTimestampPair(obj));
newlyCreated = true;
} finally {
if (!newlyCreated) {
synchronized (this) {
latch.getPool().decrementInternalProcessingCount();
}
allocate();
}
}
}
try {
_factory.activateObject(key, latch.getPair().value);
if (_testOnBorrow && !_factory.validateObject(key, latch.getPair().value)) {
throw new Exception(""ValidateObject failed"");
}
synchronized (this) {
latch.getPool().decrementInternalProcessingCount();
latch.getPool().incrementActiveCount();
}
return latch.getPair().value;
} catch (Throwable e) {
PoolUtils.checkRethrow(e);
try {
_factory.destroyObject(key, latch.getPair().value);
} catch (Throwable e2) {
PoolUtils.checkRethrow(e2);
}
synchronized (this) {
latch.getPool().decrementInternalProcessingCount();
if (!newlyCreated) {
latch.reset();
_allocationQueue.add(0, latch);
}
}
allocate();
if (newlyCreated) {
throw new NoSuchElementException(
""Could not create a validated object, cause: "" +
e.getMessage());
}
else {
continue; 
}
}
}
}
private void allocate() {
boolean clearOldest = false;
synchronized (this) {
if (isClosed()) return;
Iterator allocationQueueIter = _allocationQueue.iterator();
while (allocationQueueIter.hasNext()) {
Latch latch = (Latch) allocationQueueIter.next();
ObjectQueue pool = (ObjectQueue)(_poolMap.get(latch.getkey()));
if (null == pool) {
pool = new ObjectQueue();
_poolMap.put(latch.getkey(), pool);
_poolList.add(latch.getkey());
}
latch.setPool(pool);
if (!pool.queue.isEmpty()) {
allocationQueueIter.remove();
latch.setPair(
(ObjectTimestampPair) pool.queue.removeFirst());
pool.incrementInternalProcessingCount();
_totalIdle--;
synchronized (latch) {
latch.notify();
}
continue;
}
if ((_maxTotal > 0) &&
(_totalActive + _totalIdle + _totalInternalProcessing >= _maxTotal)) {
clearOldest = true;
break;
}
if ((_maxActive < 0 || pool.activeCount + pool.internalProcessingCount < _maxActive) &&
(_maxTotal < 0 || _totalActive + _totalIdle + _totalInternalProcessing < _maxTotal)) {
allocationQueueIter.remove();
latch.setMayCreate(true);
pool.incrementInternalProcessingCount();
synchronized (latch) {
latch.notify();
}
continue;
}
if (_maxActive < 0) {
break;
}
}
}
if (clearOldest) {
clearOldest();
}
}
public void clear() {
Map toDestroy = new HashMap();
synchronized (this) {
for (Iterator it = _poolMap.keySet().iterator(); it.hasNext();) {
Object key = it.next();
ObjectQueue pool = (ObjectQueue)_poolMap.get(key);
List objects = new ArrayList();
objects.addAll(pool.queue);
toDestroy.put(key, objects);
it.remove();
_poolList.remove(key);
_totalIdle = _totalIdle - pool.queue.size();
_totalInternalProcessing =
_totalInternalProcessing + pool.queue.size();
pool.queue.clear();
}
}
destroy(toDestroy, _factory);
}
public void clearOldest() {
final Map toDestroy = new HashMap();
final Map map = new TreeMap();
synchronized (this) {
for (Iterator keyiter = _poolMap.keySet().iterator(); keyiter.hasNext();) {
final Object key = keyiter.next();
final CursorableLinkedList list = ((ObjectQueue)_poolMap.get(key)).queue;
for (Iterator it = list.iterator(); it.hasNext();) {
map.put(it.next(), key);
}
}
Set setPairKeys = map.entrySet();
int itemsToRemove = ((int) (map.size() * 0.15)) + 1;
Iterator iter = setPairKeys.iterator();
while (iter.hasNext() && itemsToRemove > 0) {
Map.Entry entry = (Map.Entry) iter.next();
Object key = entry.getValue();
ObjectTimestampPair pairTimeStamp = (ObjectTimestampPair) entry.getKey();
ObjectQueue objectQueue = (ObjectQueue)_poolMap.get(key);
final CursorableLinkedList list = objectQueue.queue;
list.remove(pairTimeStamp);
if (toDestroy.containsKey(key)) {
((List)toDestroy.get(key)).add(pairTimeStamp);
} else {
List listForKey = new ArrayList();
listForKey.add(pairTimeStamp);
toDestroy.put(key, listForKey);
}
objectQueue.incrementInternalProcessingCount();
_totalIdle--;
itemsToRemove--;
}
}
destroy(toDestroy, _factory);
}
public void clear(Object key) {
Map toDestroy = new HashMap();
final ObjectQueue pool;
synchronized (this) {
pool = (ObjectQueue)(_poolMap.remove(key));
if (pool == null) {
return;
} else {
_poolList.remove(key);
}
List objects = new ArrayList();
objects.addAll(pool.queue);
toDestroy.put(key, objects);
_totalIdle = _totalIdle - pool.queue.size();
_totalInternalProcessing =
_totalInternalProcessing + pool.queue.size();
pool.queue.clear();
}
destroy(toDestroy, _factory);
}
private void destroy(Map m, KeyedPoolableObjectFactory factory) {
for (Iterator entries = m.entrySet().iterator(); entries.hasNext();) {
Map.Entry entry = (Entry) entries.next();
Object key = entry.getKey();
Collection c = (Collection) entry.getValue();
for (Iterator it = c.iterator(); it.hasNext();) {
try {
factory.destroyObject(
key,((ObjectTimestampPair)(it.next())).value);
} catch(Exception e) {
} finally {
synchronized(this) {
ObjectQueue objectQueue =
(ObjectQueue) _poolMap.get(key);
if (objectQueue != null) {
objectQueue.decrementInternalProcessingCount();
if (objectQueue.internalProcessingCount == 0 &&
objectQueue.activeCount == 0 &&
objectQueue.queue.isEmpty()) {
_poolMap.remove(key);
_poolList.remove(key);
}
}
}
allocate();
}
}
}
}
public synchronized int getNumActive() {
return _totalActive;
}
public synchronized int getNumIdle() {
return _totalIdle;
}
public synchronized int getNumActive(Object key) {
final ObjectQueue pool = (ObjectQueue)(_poolMap.get(key));
return pool != null ? pool.activeCount : 0;
}
public synchronized int getNumIdle(Object key) {
final ObjectQueue pool = (ObjectQueue)(_poolMap.get(key));
return pool != null ? pool.queue.size() : 0;
}
public void returnObject(Object key, Object obj) throws Exception {
try {
addObjectToPool(key, obj, true);
} catch (Exception e) {
if (_factory != null) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e2) {
}
// TODO: Correctness here depends on control in addObjectToPool.
ObjectQueue pool = (ObjectQueue) (_poolMap.get(key));
if (pool != null) {
synchronized(this) {
pool.decrementActiveCount();
if (pool.queue.isEmpty() &&
pool.activeCount == 0 &&
pool.internalProcessingCount == 0) {
_poolMap.remove(key);
_poolList.remove(key);
}
}
allocate();
}
}
}
}
private void addObjectToPool(Object key, Object obj,
boolean decrementNumActive) throws Exception {
boolean success = true; 
if (_testOnReturn && !_factory.validateObject(key, obj)) {
success = false;
} else {
_factory.passivateObject(key, obj);
}
boolean shouldDestroy = !success;
ObjectQueue pool;
boolean doAllocate = false;
synchronized (this) {
pool = (ObjectQueue) (_poolMap.get(key));
if (null == pool) {
pool = new ObjectQueue();
_poolMap.put(key, pool);
_poolList.add(key);
}
if (isClosed()) {
shouldDestroy = true;
} else {
if (_maxIdle >= 0 && (pool.queue.size() >= _maxIdle)) {
shouldDestroy = true;
} else if (success) {
if (_lifo) {
pool.queue.addFirst(new ObjectTimestampPair(obj));
} else {
pool.queue.addLast(new ObjectTimestampPair(obj));
}
_totalIdle++;
if (decrementNumActive) {
pool.decrementActiveCount();
}
doAllocate = true;
}
}
}
if (doAllocate) {
allocate();
}
if (shouldDestroy) {
try {
_factory.destroyObject(key, obj);
} catch(Exception e) {
}
if (decrementNumActive) {
synchronized(this) {
pool.decrementActiveCount();
if (pool.queue.isEmpty() &&
pool.activeCount == 0 &&
pool.internalProcessingCount == 0) {
_poolMap.remove(key);
_poolList.remove(key);
}
}
allocate();
}
}
}
public void invalidateObject(Object key, Object obj) throws Exception {
try {
_factory.destroyObject(key, obj);
} finally {
synchronized (this) {
ObjectQueue pool = (ObjectQueue) (_poolMap.get(key));
if (null == pool) {
pool = new ObjectQueue();
_poolMap.put(key, pool);
_poolList.add(key);
}
pool.decrementActiveCount();
}
allocate(); 
}
}
public void addObject(Object key) throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
Object obj = _factory.makeObject(key);
try {
assertOpen();
addObjectToPool(key, obj, false);
} catch (IllegalStateException ex) { 
try {
_factory.destroyObject(key, obj);
} catch (Exception ex2) {
}
throw ex;
}
}
public synchronized void preparePool(Object key, boolean populateImmediately) {
ObjectQueue pool = (ObjectQueue)(_poolMap.get(key));
if (null == pool) {
pool = new ObjectQueue();
_poolMap.put(key,pool);
_poolList.add(key);
}
if (populateImmediately) {
try {
ensureMinIdle(key);
}
catch (Exception e) {
}
}
}
public void close() throws Exception {
super.close();
synchronized (this) {
clear();
if (null != _evictionCursor) {
_evictionCursor.close();
_evictionCursor = null;
}
if (null != _evictionKeyCursor) {
_evictionKeyCursor.close();
_evictionKeyCursor = null;
}
startEvictor(-1L);
}
}
public void setFactory(KeyedPoolableObjectFactory factory) throws IllegalStateException {
Map toDestroy = new HashMap();
final KeyedPoolableObjectFactory oldFactory = _factory;
synchronized (this) {
assertOpen();
if (0 < getNumActive()) {
throw new IllegalStateException(""Objects are already active"");
} else {
for (Iterator it = _poolMap.keySet().iterator(); it.hasNext();) {
Object key = it.next();
ObjectQueue pool = (ObjectQueue)_poolMap.get(key);
if (pool != null) {
List objects = new ArrayList();
objects.addAll(pool.queue);
toDestroy.put(key, objects);
it.remove();
_poolList.remove(key);
_totalIdle = _totalIdle - pool.queue.size();
_totalInternalProcessing =
_totalInternalProcessing + pool.queue.size();
pool.queue.clear();
}
}
_factory = factory;
}
}
destroy(toDestroy, oldFactory);
}
public void evict() throws Exception {
Object key = null;
boolean testWhileIdle;
long minEvictableIdleTimeMillis;
synchronized (this) {
testWhileIdle = _testWhileIdle;
minEvictableIdleTimeMillis = _minEvictableIdleTimeMillis;
if (_evictionKeyCursor != null &&
_evictionKeyCursor._lastReturned != null) {
key = _evictionKeyCursor._lastReturned.value();
}
}
for (int i=0, m=getNumTests(); i<m; i++) {
final ObjectTimestampPair pair;
synchronized (this) {
if (_poolMap == null || _poolMap.size() == 0) {
continue;
}
if (null == _evictionKeyCursor) {
resetEvictionKeyCursor();
key = null;
}
if (null == _evictionCursor) {
if (_evictionKeyCursor.hasNext()) {
key = _evictionKeyCursor.next();
resetEvictionObjectCursor(key);
} else {
resetEvictionKeyCursor();
if (_evictionKeyCursor != null) {
if (_evictionKeyCursor.hasNext()) {
key = _evictionKeyCursor.next();
resetEvictionObjectCursor(key);
}
}
}
}
if (_evictionCursor == null) {
continue; 
}
if ((_lifo && !_evictionCursor.hasPrevious()) ||
(!_lifo && !_evictionCursor.hasNext())) {
if (_evictionKeyCursor != null) {
if (_evictionKeyCursor.hasNext()) {
key = _evictionKeyCursor.next();
resetEvictionObjectCursor(key);
} else { 
resetEvictionKeyCursor();
if (_evictionKeyCursor != null) {
if (_evictionKeyCursor.hasNext()) {
key = _evictionKeyCursor.next();
resetEvictionObjectCursor(key);
}
}
}
}
}
if ((_lifo && !_evictionCursor.hasPrevious()) ||
(!_lifo && !_evictionCursor.hasNext())) {
continue; 
}
pair = _lifo ?
(ObjectTimestampPair) _evictionCursor.previous() :
(ObjectTimestampPair) _evictionCursor.next();
_evictionCursor.remove();
ObjectQueue objectQueue = (ObjectQueue) _poolMap.get(key);
objectQueue.incrementInternalProcessingCount();
_totalIdle--;
}
boolean removeObject=false;
if ((minEvictableIdleTimeMillis > 0) &&
(System.currentTimeMillis() - pair.tstamp >
minEvictableIdleTimeMillis)) {
removeObject=true;
}
if (testWhileIdle && removeObject == false) {
boolean active = false;
try {
_factory.activateObject(key,pair.value);
active = true;
} catch(Exception e) {
removeObject=true;
}
if (active) {
if (!_factory.validateObject(key,pair.value)) {
removeObject=true;
} else {
try {
_factory.passivateObject(key,pair.value);
} catch(Exception e) {
removeObject=true;
}
}
}
}
if (removeObject) {
try {
_factory.destroyObject(key, pair.value);
} catch(Exception e) {
}
}
synchronized (this) {
ObjectQueue objectQueue =
(ObjectQueue)_poolMap.get(key);
objectQueue.decrementInternalProcessingCount();
if (removeObject) {
if (objectQueue.queue.isEmpty() &&
objectQueue.activeCount == 0 &&
objectQueue.internalProcessingCount == 0) {
_poolMap.remove(key);
_poolList.remove(key);
}
} else {
_evictionCursor.add(pair);
_totalIdle++;
if (_lifo) {
_evictionCursor.previous();
}
}
}
}
allocate();
}
private void resetEvictionKeyCursor() {
if (_evictionKeyCursor != null) {
_evictionKeyCursor.close();
}
_evictionKeyCursor = _poolList.cursor();
if (null != _evictionCursor) {
_evictionCursor.close();
_evictionCursor = null;
}
}
private void resetEvictionObjectCursor(Object key) {
if (_evictionCursor != null) {
_evictionCursor.close();
}
if (_poolMap == null) {
return;
}
ObjectQueue pool = (ObjectQueue) (_poolMap.get(key));
if (pool != null) {
CursorableLinkedList queue = pool.queue;
_evictionCursor = queue.cursor(_lifo ? queue.size() : 0);
}
}
private void ensureMinIdle() throws Exception {
if (_minIdle > 0) {
Object[] keysCopy;
synchronized(this) {
keysCopy = _poolMap.keySet().toArray();
}
for (int i=0; i < keysCopy.length; i++) {
ensureMinIdle(keysCopy[i]);
}
}
}
private void ensureMinIdle(Object key) throws Exception {
ObjectQueue pool;
synchronized(this) {
pool = (ObjectQueue)(_poolMap.get(key));
}
if (pool == null) {
return;
}
int objectDeficit = calculateDeficit(pool, false);
for (int i = 0; i < objectDeficit && calculateDeficit(pool, true) > 0; i++) {
try {
addObject(key);
} finally {
synchronized (this) {
pool.decrementInternalProcessingCount();
}
allocate();
}
}
}
protected synchronized void startEvictor(long delay) {
if (null != _evictor) {
EvictionTimer.cancel(_evictor);
_evictor = null;
}
if (delay > 0) {
_evictor = new Evictor();
EvictionTimer.schedule(_evictor, delay, delay);
}
}
synchronized String debugInfo() {
StringBuffer buf = new StringBuffer();
buf.append(""Active: "").append(getNumActive()).append(""\n"");
buf.append(""Idle: "").append(getNumIdle()).append(""\n"");
Iterator it = _poolMap.keySet().iterator();
while (it.hasNext()) {
Object key = it.next();
buf.append(""\t"").append(key).append("" "").append(_poolMap.get(key)).append(""\n"");
}
return buf.toString();
}
private synchronized int getNumTests() {
if (_numTestsPerEvictionRun >= 0) {
return Math.min(_numTestsPerEvictionRun, _totalIdle);
} else {
return(int)(Math.ceil(_totalIdle/Math.abs((double)_numTestsPerEvictionRun)));
}
}
private synchronized int calculateDeficit(ObjectQueue pool,
boolean incrementInternal) {
int objectDefecit = 0;
objectDefecit = getMinIdle() - pool.queue.size();
if (getMaxActive() > 0) {
int growLimit = Math.max(0, getMaxActive() - pool.activeCount - pool.queue.size() - pool.internalProcessingCount);
objectDefecit = Math.min(objectDefecit, growLimit);
}
if (getMaxTotal() > 0) {
int growLimit = Math.max(0, getMaxTotal() - getNumActive() - getNumIdle() - _totalInternalProcessing);
objectDefecit = Math.min(objectDefecit, growLimit);
}
if (incrementInternal && objectDefecit > 0) {
pool.incrementInternalProcessingCount();
}
return objectDefecit;
}
private class ObjectQueue {
private int activeCount = 0;
private final CursorableLinkedList queue = new CursorableLinkedList();
private int internalProcessingCount = 0;
void incrementActiveCount() {
synchronized (GenericKeyedObjectPool.this) {
_totalActive++;
}
activeCount++;
}
void decrementActiveCount() {
synchronized (GenericKeyedObjectPool.this) {
_totalActive--;
}
if (activeCount > 0) {
activeCount--;
}
}
void incrementInternalProcessingCount() {
synchronized (GenericKeyedObjectPool.this) {
_totalInternalProcessing++;
}
internalProcessingCount++;
}
void decrementInternalProcessingCount() {
synchronized (GenericKeyedObjectPool.this) {
_totalInternalProcessing--;
}
internalProcessingCount--;
}
}
static class ObjectTimestampPair implements Comparable {
//CHECKSTYLE: stop VisibilityModifier
Object value;
long tstamp;
//CHECKSTYLE: resume VisibilityModifier
ObjectTimestampPair(Object val) {
this(val, System.currentTimeMillis());
}
ObjectTimestampPair(Object val, long time) {
value = val;
tstamp = time;
}
public String toString() {
return value + "";"" + tstamp;
}
public int compareTo(Object obj) {
return compareTo((ObjectTimestampPair) obj);
}
public int compareTo(ObjectTimestampPair other) {
final long tstampdiff = this.tstamp - other.tstamp;
if (tstampdiff == 0) {
return System.identityHashCode(this) - System.identityHashCode(other);
} else {
return (int)Math.min(Math.max(tstampdiff, Integer.MIN_VALUE), Integer.MAX_VALUE);
}
}
public Object getValue() {
return value;
}
public long getTstamp() {
return tstamp;
}
}
private class Evictor extends TimerTask {
public void run() {
try {
evict();
} catch(Exception e) {
} catch(OutOfMemoryError oome) {
oome.printStackTrace(System.err);
}
try {
ensureMinIdle();
} catch (Exception e) {
}
}
}
public static class Config {
//CHECKSTYLE: stop VisibilityModifier
public int maxIdle = GenericKeyedObjectPool.DEFAULT_MAX_IDLE;
public int maxActive = GenericKeyedObjectPool.DEFAULT_MAX_ACTIVE;
public int maxTotal = GenericKeyedObjectPool.DEFAULT_MAX_TOTAL;
public int minIdle = GenericKeyedObjectPool.DEFAULT_MIN_IDLE;
public long maxWait = GenericKeyedObjectPool.DEFAULT_MAX_WAIT;
public byte whenExhaustedAction = GenericKeyedObjectPool.DEFAULT_WHEN_EXHAUSTED_ACTION;
public boolean testOnBorrow = GenericKeyedObjectPool.DEFAULT_TEST_ON_BORROW;
public boolean testOnReturn = GenericKeyedObjectPool.DEFAULT_TEST_ON_RETURN;
public boolean testWhileIdle = GenericKeyedObjectPool.DEFAULT_TEST_WHILE_IDLE;
public long timeBetweenEvictionRunsMillis = GenericKeyedObjectPool.DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS;
public int numTestsPerEvictionRun =  GenericKeyedObjectPool.DEFAULT_NUM_TESTS_PER_EVICTION_RUN;
public long minEvictableIdleTimeMillis = GenericKeyedObjectPool.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS;
public boolean lifo = GenericKeyedObjectPool.DEFAULT_LIFO;
//CHECKSTYLE: resume VisibilityModifier
}
private static final class Latch {
private final Object _key;
private ObjectQueue _pool;
private ObjectTimestampPair _pair;
private boolean _mayCreate = false;
private Latch(Object key) {
_key = key;
}
private synchronized Object getkey() {
return _key;
}
private synchronized ObjectQueue getPool() {
return _pool;
}
private synchronized void setPool(ObjectQueue pool) {
_pool = pool;
}
private synchronized ObjectTimestampPair getPair() {
return _pair;
}
private synchronized void setPair(ObjectTimestampPair pair) {
_pair = pair;
}
private synchronized boolean mayCreate() {
return _mayCreate;
}
private synchronized void setMayCreate(boolean mayCreate) {
_mayCreate = mayCreate;
}
private synchronized void reset() {
_pair = null;
_mayCreate = false;
}
}
private int _maxIdle = DEFAULT_MAX_IDLE;
private volatile int _minIdle = DEFAULT_MIN_IDLE;
private int _maxActive = DEFAULT_MAX_ACTIVE;
private int _maxTotal = DEFAULT_MAX_TOTAL;
private long _maxWait = DEFAULT_MAX_WAIT;
private byte _whenExhaustedAction = DEFAULT_WHEN_EXHAUSTED_ACTION;
private volatile boolean _testOnBorrow = DEFAULT_TEST_ON_BORROW;
private volatile boolean _testOnReturn = DEFAULT_TEST_ON_RETURN;
private boolean _testWhileIdle = DEFAULT_TEST_WHILE_IDLE;
private long _timeBetweenEvictionRunsMillis = DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS;
private int _numTestsPerEvictionRun =  DEFAULT_NUM_TESTS_PER_EVICTION_RUN;
private long _minEvictableIdleTimeMillis = DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS;
private Map _poolMap = null;
private int _totalActive = 0;
private int _totalIdle = 0;
private int _totalInternalProcessing = 0;
private KeyedPoolableObjectFactory _factory = null;
private Evictor _evictor = null;
private CursorableLinkedList _poolList = null;
private CursorableLinkedList.Cursor _evictionCursor = null;
private CursorableLinkedList.Cursor _evictionKeyCursor = null;
private boolean _lifo = DEFAULT_LIFO;
private LinkedList _allocationQueue = new LinkedList();
","private void addObjectToPool(Object key, Object obj, boolean decrementNumActive) throws Exception {
boolean success = true;
if (_testOnReturn && !_factory.validateObject(key, obj)) {
success = false;
} else {
_factory.passivateObject(key, obj);
}
boolean shouldDestroy = !success;
ObjectQueue pool;
boolean doAllocate = false;
synchronized (this) {
pool = (ObjectQueue) (_poolMap.get(key));
if (null == pool) {
pool = new ObjectQueue();
_poolMap.put(key, pool);
_poolList.add(key);
}
if (isClosed()) {
shouldDestroy = true;
} else {
if (_maxIdle >= 0 && (pool.queue.size() >= _maxIdle)) {
shouldDestroy = true;
} else if (success) {
if (_lifo) {
pool.queue.addFirst(new ObjectTimestampPair(obj));
} else {
pool.queue.addLast(new ObjectTimestampPair(obj));
}
_totalIdle++;
if (decrementNumActive) {
pool.decrementActiveCount();
}
doAllocate = true;
}
}
}
if (doAllocate) {
allocate();
}
if (shouldDestroy) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e) {
}
if (decrementNumActive) {
synchronized (this) {
pool.decrementActiveCount();
if (pool.queue.isEmpty() && pool.activeCount == 0 && pool.internalProcessingCount == 0) {
_poolMap.remove(key);
_poolList.remove(key);
}
}
allocate();
}
}
}","private void addObjectToPool(Object key, Object obj, boolean decrementNumActive) throws Exception {
boolean booleanVar1 = booleanLiteral2;
if (_testOnReturn && !_factory.validateObject(key, obj)) {
booleanVar1 = false;
} else {
_factory.passivateObject(key, obj);
}
boolean booleanVar3 = booleanLiteral4;
ObjectQueue objectqueueVar5;
boolean booleanVar6 = booleanLiteral7;
synchronized (this) {
objectqueueVar5 = (ObjectQueue) (_poolMap.get(key));
if (null == objectqueueVar5) {
objectqueueVar5 = new ObjectQueue();
_poolMap.put(key, objectqueueVar5);
_poolList.add(key);
}
if (isClosed()) {
booleanVar3 = true;
} else {
if (_maxIdle >= 0 && (objectqueueVar5.queue.size() >= _maxIdle)) {
booleanVar3 = true;
} else if (booleanVar1) {
if (_lifo) {
objectqueueVar5.queue.addFirst(new ObjectTimestampPair(obj));
} else {
objectqueueVar5.queue.addLast(new ObjectTimestampPair(obj));
}
_totalIdle++;
if (decrementNumActive) {
objectqueueVar5.decrementActiveCount();
}
booleanVar6 = true;
}
}
}
if (booleanVar6) {
allocate();
}
if (booleanVar3) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e) {
}
if (decrementNumActive) {
synchronized (this) {
objectqueueVar5.decrementActiveCount();
if (objectqueueVar5.queue.isEmpty() && objectqueueVar5.activeCount == 0 && objectqueueVar5.internalProcessingCount == 0) {
_poolMap.remove(key);
_poolList.remove(key);
}
}
allocate();
}
}
}"
17865,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1730,"} catch(Exception e) {
","private void addObjectToPool(Object obj, boolean decrementNumActive) throws Exception {
boolean success = true;
if (_testOnReturn && !(_factory.validateObject(obj))) {
success = false;
} else {
_factory.passivateObject(obj);
}
boolean shouldDestroy = !success;
boolean doAllocate = false;
synchronized (this) {
if (isClosed()) {
shouldDestroy = true;
} else {
if ((_maxIdle >= 0) && (_pool.size() >= _maxIdle)) {
shouldDestroy = true;
} else if (success) {
if (_lifo) {
_pool.addFirst(new ObjectTimestampPair(obj));
} else {
_pool.addLast(new ObjectTimestampPair(obj));
}
if (decrementNumActive) {
_numActive--;
}
doAllocate = true;
}
}
}
if (doAllocate) {
allocate();
}
if (shouldDestroy) {
try {
_factory.destroyObject(obj);
} catch (Exception e) {
}
if (decrementNumActive) {
synchronized (this) {
_numActive--;
}
allocate();
}
}
}","private void addObjectToPool(Object obj, boolean decrementNumActive) throws Exception {
boolean booleanVar1 = booleanLiteral2;
if (_testOnReturn && !(_factory.validateObject(obj))) {
booleanVar1 = false;
} else {
_factory.passivateObject(obj);
}
boolean booleanVar3 = booleanLiteral4;
boolean booleanVar5 = booleanLiteral6;
synchronized (this) {
if (isClosed()) {
booleanVar3 = true;
} else {
if ((_maxIdle >= 0) && (_pool.size() >= _maxIdle)) {
booleanVar3 = true;
} else if (booleanVar1) {
if (_lifo) {
_pool.addFirst(new ObjectTimestampPair(obj));
} else {
_pool.addLast(new ObjectTimestampPair(obj));
}
if (decrementNumActive) {
_numActive--;
}
booleanVar5 = true;
}
}
}
if (booleanVar5) {
allocate();
}
if (booleanVar3) {
try {
_factory.destroyObject(obj);
} catch (Exception e) {
}
if (decrementNumActive) {
synchronized (this) {
_numActive--;
}
allocate();
}
}
}"
17872,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1737,"} catch(Exception e) {
","public synchronized void returnObject(Object obj) throws Exception {
boolean success = !isClosed();
if (_factory != null) {
if (!_factory.validateObject(obj)) {
success = false;
} else {
try {
_factory.passivateObject(obj);
} catch (Exception e) {
success = false;
}
}
}
boolean shouldDestroy = !success;
_numActive--;
if (success) {
_pool.add(new SoftReference(obj, refQueue));
}
notifyAll();
if (shouldDestroy && _factory != null) {
try {
_factory.destroyObject(obj);
} catch (Exception e) {
}
}
}","public synchronized void returnObject(Object obj) throws Exception {
boolean booleanVar1 = booleanLiteral2;
if (_factory != null) {
if (!_factory.validateObject(obj)) {
booleanVar1 = false;
} else {
try {
_factory.passivateObject(obj);
} catch (Exception e) {
booleanVar1 = false;
}
}
}
boolean booleanVar3 = booleanLiteral4;
_numActive--;
if (booleanVar1) {
_pool.add(new SoftReference(obj, refQueue));
}
notifyAll();
if (booleanVar3 && _factory != null) {
try {
_factory.destroyObject(obj);
} catch (Exception e) {
}
}
}"
17879,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1744,"} catch (Exception e2) {
","public synchronized void addObject(Object key) throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
Object obj = _factory.makeObject(key);
try {
if (!_factory.validateObject(key, obj)) {
return;
}
} catch (Exception e) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e2) {
}
return;
}
_factory.passivateObject(key, obj);
Stack stack = (Stack) _pools.get(key);
if (null == stack) {
stack = new Stack();
stack.ensureCapacity(_initSleepingCapacity > _maxSleeping ? _maxSleeping : _initSleepingCapacity);
_pools.put(key, stack);
}
final int stackSize = stack.size();
if (stackSize >= _maxSleeping) {
final Object staleObj;
if (stackSize > 0) {
staleObj = stack.remove(0);
_totIdle--;
} else {
staleObj = obj;
}
try {
_factory.destroyObject(key, staleObj);
} catch (Exception e) {
if (obj == staleObj) {
throw e;
}
}
} else {
stack.push(obj);
_totIdle++;
}
}","public synchronized void addObject(Object key) throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
Object objectVar1 = objectLiteral2;
try {
if (!_factory.validateObject(key, objectVar1)) {
return;
}
} catch (Exception e) {
try {
_factory.destroyObject(key, objectVar1);
} catch (Exception e2) {
}
return;
}
_factory.passivateObject(key, objectVar1);
Stack stackVar3 = stackLiteral4;
if (null == stackVar3) {
stackVar3 = new Stack();
stackVar3.ensureCapacity(_initSleepingCapacity > _maxSleeping ? _maxSleeping : _initSleepingCapacity);
_pools.put(key, stackVar3);
}
final int intVar5 = intLiteral6;
if (intVar5 >= _maxSleeping) {
final Object objectVar7;
if (intVar5 > 0) {
objectVar7 = stackVar3.remove(0);
_totIdle--;
} else {
objectVar7 = objectVar1;
}
try {
_factory.destroyObject(key, objectVar7);
} catch (Exception e) {
if (objectVar1 == objectVar7) {
throw e;
}
}
} else {
stackVar3.push(objectVar1);
_totIdle++;
}
}"
17886,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1751,"} catch(Exception e) {
","public synchronized void returnObject(Object obj) throws Exception {
boolean success = !isClosed();
if (null != _factory) {
if (!_factory.validateObject(obj)) {
success = false;
} else {
try {
_factory.passivateObject(obj);
} catch (Exception e) {
success = false;
}
}
}
boolean shouldDestroy = !success;
_numActive--;
if (success) {
Object toBeDestroyed = null;
if (_pool.size() >= _maxSleeping) {
shouldDestroy = true;
toBeDestroyed = _pool.remove(0);
}
_pool.push(obj);
obj = toBeDestroyed;
}
notifyAll();
if (shouldDestroy) {
try {
_factory.destroyObject(obj);
} catch (Exception e) {
}
}
}","public synchronized void returnObject(Object obj) throws Exception {
boolean booleanVar1 = booleanLiteral2;
if (null != _factory) {
if (!_factory.validateObject(obj)) {
booleanVar1 = false;
} else {
try {
_factory.passivateObject(obj);
} catch (Exception e) {
booleanVar1 = false;
}
}
}
boolean booleanVar3 = booleanLiteral4;
_numActive--;
if (booleanVar1) {
Object objectVar5 = objectLiteral6;
if (_pool.size() >= _maxSleeping) {
booleanVar3 = true;
objectVar5 = _pool.remove(0);
}
_pool.push(obj);
obj = objectVar5;
}
notifyAll();
if (booleanVar3) {
try {
_factory.destroyObject(obj);
} catch (Exception e) {
}
}
}"
17943,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1808,"} catch (Exception e) {
","@Override
public void close() {
try {
pool.close();
} catch (Exception e) {
}
}","@Override
public void close() {
try {
pool.close();
} catch (Exception e) {
}
}"
17954,PERFORMANCE,WMI_WRONG_MAP_ITERATOR,FP,pool,1819,"ObjectDeque<T> queue = poolMap.get(key);
","@Override
public Map<String, Integer> getNumWaitersByKey() {
Map<String, Integer> result = new HashMap<String, Integer>();
for (K key : poolMap.keySet()) {
ObjectDeque<T> queue = poolMap.get(key);
if (queue != null) {
if (getBlockWhenExhausted()) {
result.put(key.toString(), Integer.valueOf(queue.getIdleObjects().getTakeQueueLength()));
} else {
result.put(key.toString(), Integer.valueOf(0));
}
}
}
return result;
}","@Override
public Map<String, Integer> getNumWaitersByKey() {
Map<String, Integer> map<string,integer>Var1 = map<string,integer>Literal2;
for (K kVar3 : poolMap.keySet()) {
ObjectDeque<T> objectdeque<t>Var4 = objectdeque<t>Literal5;
if (objectdeque<t>Var4 != null) {
if (getBlockWhenExhausted()) {
map<string,integer>Var1.put(kVar3.toString(), Integer.valueOf(objectdeque<t>Var4.getIdleObjects().getTakeQueueLength()));
} else {
map<string,integer>Var1.put(kVar3.toString(), Integer.valueOf(0));
}
}
}
return map<string,integer>Var1;
}"
17957,PERFORMANCE,WMI_WRONG_MAP_ITERATOR,FP,pool,1822,"ObjectDeque<T> queue = poolMap.get(key);
","@Override
public Map<String, List<DefaultPooledObjectInfo>> listAllObjects() {
Map<String, List<DefaultPooledObjectInfo>> result = new HashMap<String, List<DefaultPooledObjectInfo>>();
for (K key : poolMap.keySet()) {
ObjectDeque<T> queue = poolMap.get(key);
if (queue != null) {
List<DefaultPooledObjectInfo> list = new ArrayList<DefaultPooledObjectInfo>();
result.put(key.toString(), list);
for (PooledObject<T> p : queue.getAllObjects().values()) {
list.add(new DefaultPooledObjectInfo(p));
}
}
}
return result;
}","@Override
public Map<String, List<DefaultPooledObjectInfo>> listAllObjects() {
Map<String, List<DefaultPooledObjectInfo>> map<string,list<defaultpooledobjectinfo>>Var1 = map<string,list<defaultpooledobjectinfo>>Literal2;
for (K kVar3 : poolMap.keySet()) {
ObjectDeque<T> objectdeque<t>Var4 = objectdeque<t>Literal5;
if (objectdeque<t>Var4 != null) {
List<DefaultPooledObjectInfo> list<defaultpooledobjectinfo>Var6 = list<defaultpooledobjectinfo>Literal7;
map<string,list<defaultpooledobjectinfo>>Var1.put(kVar3.toString(), list<defaultpooledobjectinfo>Var6);
for (PooledObject<T> pooledobject<t>Var8 : objectdeque<t>Var4.getAllObjects().values()) {
list<defaultpooledobjectinfo>Var6.add(new DefaultPooledObjectInfo(pooledobject<t>Var8));
}
}
}
return map<string,list<defaultpooledobjectinfo>>Var1;
}"
17967,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1832,"} catch (Exception e) {
","public void invalidateObject(final T obj) {
if (type.isInstance(obj)) {
try {
pool.invalidateObject(obj);
} catch (Exception e) {
}
} else {
throw new ClassCastException(""Invalidated object is not of type: "" + type.getName() + "" was: "" + obj);
}
}","public void invalidateObject(final T obj) {
if (type.isInstance(obj)) {
try {
pool.invalidateObject(obj);
} catch (Exception e) {
}
} else {
throw new ClassCastException(""Invalidated object is not of type: "" + type.getName() + "" was: "" + obj);
}
}"
17972,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1837,"} catch (Exception e) {
","public void close() {
try {
pool.close();
} catch (Exception e) {
}
}","public void close() {
try {
pool.close();
} catch (Exception e) {
}
}"
17983,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1848,"} catch (Exception e) {
","public void close() {
try {
keyedPool.close();
} catch (Exception e) {
}
}","public void close() {
try {
keyedPool.close();
} catch (Exception e) {
}
}"
17990,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1855,"} catch (Exception ex2) {
","@Override
public void addObject(K key) throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
V obj = _factory.makeObject(key);
try {
assertOpen();
addObjectToPool(key, obj, false);
} catch (IllegalStateException ex) {
try {
_factory.destroyObject(key, obj);
} catch (Exception ex2) {
}
throw ex;
}
}","@Override
public void addObject(K key) throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
V vVar1 = vLiteral2;
try {
assertOpen();
addObjectToPool(key, vVar1, false);
} catch (IllegalStateException ex) {
try {
_factory.destroyObject(key, vVar1);
} catch (Exception ex2) {
}
throw ex;
}
}"
17992,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1857,"} catch(Exception e) {
","@Override
public void run() {
try {
evict();
} catch (Exception e) {
} catch (OutOfMemoryError oome) {
oome.printStackTrace(System.err);
}
try {
ensureMinIdle();
} catch (Exception e) {
}
}","@Override
public void run() {
try {
evict();
} catch (Exception e) {
} catch (OutOfMemoryError oome) {
oome.printStackTrace(System.err);
}
try {
ensureMinIdle();
} catch (Exception e) {
}
}"
17997,PERFORMANCE,WMI_WRONG_MAP_ITERATOR,FP,pool,1862,"final List<ObjectTimestampPair<V>> list = _poolMap.get(key).queue;
","public void clearOldest() {
final Map<K, List<ObjectTimestampPair<V>>> toDestroy = new HashMap<K, List<ObjectTimestampPair<V>>>();
final Map<ObjectTimestampPair<V>, K> map = new TreeMap<ObjectTimestampPair<V>, K>();
synchronized (this) {
for (Iterator<K> keyiter = _poolMap.keySet().iterator(); keyiter.hasNext(); ) {
final K key = keyiter.next();
final List<ObjectTimestampPair<V>> list = _poolMap.get(key).queue;
for (Iterator<ObjectTimestampPair<V>> it = list.iterator(); it.hasNext(); ) {
map.put(it.next(), key);
}
}
Set<Entry<ObjectTimestampPair<V>, K>> setPairKeys = map.entrySet();
int itemsToRemove = ((int) (map.size() * 0.15)) + 1;
Iterator<Entry<ObjectTimestampPair<V>, K>> iter = setPairKeys.iterator();
while (iter.hasNext() && itemsToRemove > 0) {
Entry<ObjectTimestampPair<V>, K> entry = iter.next();
K key = entry.getValue();
ObjectTimestampPair<V> pairTimeStamp = entry.getKey();
ObjectQueue objectQueue = _poolMap.get(key);
final List<ObjectTimestampPair<V>> list = objectQueue.queue;
list.remove(pairTimeStamp);
if (toDestroy.containsKey(key)) {
toDestroy.get(key).add(pairTimeStamp);
} else {
List<ObjectTimestampPair<V>> listForKey = new ArrayList<ObjectTimestampPair<V>>();
listForKey.add(pairTimeStamp);
toDestroy.put(key, listForKey);
}
objectQueue.incrementInternalProcessingCount();
_totalIdle--;
itemsToRemove--;
}
}
destroy(toDestroy, _factory);
}","public void clearOldest() {
final Map<K, List<ObjectTimestampPair<V>>> map<k,list<objecttimestamppair<v>>>Var1 = map<k,list<objecttimestamppair<v>>>Literal2;
final Map<ObjectTimestampPair<V>, K> map<objecttimestamppair<v>,k>Var3 = map<objecttimestamppair<v>,k>Literal4;
synchronized (this) {
for (Iterator<K> iterator<k>Var29 = iterator<k>Literal30; iterator<k>Var5.hasNext(); ) {
final K kVar7 = kLiteral8;
final List<ObjectTimestampPair<V>> list<objecttimestamppair<v>>Var9 = list<objecttimestamppair<v>>Literal10;
for (Iterator<ObjectTimestampPair<V>> iterator<objecttimestamppair<v>>Var31 = iterator<objecttimestamppair<v>>Literal32; iterator<objecttimestamppair<v>>Var11.hasNext(); ) {
map<objecttimestamppair<v>,k>Var3.put(iterator<objecttimestamppair<v>>Var11.next(), kVar7);
}
}
Set<Entry<ObjectTimestampPair<V>, K>> set<entry<objecttimestamppair<v>,k>>Var13 = set<entry<objecttimestamppair<v>,k>>Literal14;
int intVar15 = intLiteral16;
Iterator<Entry<ObjectTimestampPair<V>, K>> iterator<entry<objecttimestamppair<v>,k>>Var17 = iterator<entry<objecttimestamppair<v>,k>>Literal18;
while (iterator<entry<objecttimestamppair<v>,k>>Var17.hasNext() && intVar15 > 0) {
Entry<ObjectTimestampPair<V>, K> entry<objecttimestamppair<v>,k>Var19 = entry<objecttimestamppair<v>,k>Literal20;
K kVar7 = kLiteral21;
ObjectTimestampPair<V> objecttimestamppair<v>Var22 = objecttimestamppair<v>Literal23;
ObjectQueue objectqueueVar24 = objectqueueLiteral25;
final List<ObjectTimestampPair<V>> list<objecttimestamppair<v>>Var9 = list<objecttimestamppair<v>>Literal26;
list<objecttimestamppair<v>>Var9.remove(objecttimestamppair<v>Var22);
if (map<k,list<objecttimestamppair<v>>>Var1.containsKey(kVar7)) {
map<k,list<objecttimestamppair<v>>>Var1.get(kVar7).add(objecttimestamppair<v>Var22);
} else {
List<ObjectTimestampPair<V>> list<objecttimestamppair<v>>Var27 = list<objecttimestamppair<v>>Literal28;
list<objecttimestamppair<v>>Var27.add(objecttimestamppair<v>Var22);
map<k,list<objecttimestamppair<v>>>Var1.put(kVar7, list<objecttimestamppair<v>>Var27);
}
objectqueueVar24.incrementInternalProcessingCount();
_totalIdle--;
intVar15--;
}
}
destroy(map<k,list<objecttimestamppair<v>>>Var1, _factory);
}"
17999,Multithreaded correctness,NO_NOTIFY_NOT_NOTIFYALL,FP,pool,1864,"l.notify();
","@Override
public void close() throws Exception {
super.close();
synchronized (this) {
clear();
if (null != _evictionCursor) {
_evictionCursor.close();
_evictionCursor = null;
}
if (null != _evictionKeyCursor) {
_evictionKeyCursor.close();
_evictionKeyCursor = null;
}
startEvictor(-1L);
while (_allocationQueue.size() > 0) {
Latch<K, V> l = _allocationQueue.removeFirst();
synchronized (l) {
l.notify();
}
}
}
}","@Override
public void close() throws Exception {
super.close();
synchronized (this) {
clear();
if (null != _evictionCursor) {
_evictionCursor.close();
_evictionCursor = null;
}
if (null != _evictionKeyCursor) {
_evictionKeyCursor.close();
_evictionKeyCursor = null;
}
startEvictor(-1L);
while (_allocationQueue.size() > 0) {
Latch<K, V> latch<k,v>Var1 = latch<k,v>Literal2;
synchronized (latch<k,v>Var1) {
latch<k,v>Var1.notify();
}
}
}
}"
18002,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1867,"} catch(Exception e) {
","public void evict() throws Exception {
K key = null;
boolean testWhileIdle;
long minEvictableIdleTimeMillis;
synchronized (this) {
testWhileIdle = _testWhileIdle;
minEvictableIdleTimeMillis = _minEvictableIdleTimeMillis;
if (_evictionKeyCursor != null && _evictionKeyCursor._lastReturned != null) {
key = _evictionKeyCursor._lastReturned.value();
}
}
for (int i = 0, m = getNumTests(); i < m; i++) {
final ObjectTimestampPair<V> pair;
synchronized (this) {
if (_poolMap == null || _poolMap.size() == 0) {
continue;
}
if (null == _evictionKeyCursor) {
resetEvictionKeyCursor();
key = null;
}
if (null == _evictionCursor) {
if (_evictionKeyCursor.hasNext()) {
key = _evictionKeyCursor.next();
resetEvictionObjectCursor(key);
} else {
resetEvictionKeyCursor();
if (_evictionKeyCursor != null) {
if (_evictionKeyCursor.hasNext()) {
key = _evictionKeyCursor.next();
resetEvictionObjectCursor(key);
}
}
}
}
if (_evictionCursor == null) {
continue;
}
if ((_lifo && !_evictionCursor.hasPrevious()) || (!_lifo && !_evictionCursor.hasNext())) {
if (_evictionKeyCursor != null) {
if (_evictionKeyCursor.hasNext()) {
key = _evictionKeyCursor.next();
resetEvictionObjectCursor(key);
} else {
resetEvictionKeyCursor();
if (_evictionKeyCursor != null) {
if (_evictionKeyCursor.hasNext()) {
key = _evictionKeyCursor.next();
resetEvictionObjectCursor(key);
}
}
}
}
}
if ((_lifo && !_evictionCursor.hasPrevious()) || (!_lifo && !_evictionCursor.hasNext())) {
continue;
}
pair = _lifo ? _evictionCursor.previous() : _evictionCursor.next();
_evictionCursor.remove();
ObjectQueue objectQueue = _poolMap.get(key);
objectQueue.incrementInternalProcessingCount();
_totalIdle--;
}
boolean removeObject = false;
if ((minEvictableIdleTimeMillis > 0) && (System.currentTimeMillis() - pair.tstamp > minEvictableIdleTimeMillis)) {
removeObject = true;
}
if (testWhileIdle && removeObject == false) {
boolean active = false;
try {
_factory.activateObject(key, pair.value);
active = true;
} catch (Exception e) {
removeObject = true;
}
if (active) {
if (!_factory.validateObject(key, pair.value)) {
removeObject = true;
} else {
try {
_factory.passivateObject(key, pair.value);
} catch (Exception e) {
removeObject = true;
}
}
}
}
if (removeObject) {
try {
_factory.destroyObject(key, pair.value);
} catch (Exception e) {
}
}
synchronized (this) {
ObjectQueue objectQueue = _poolMap.get(key);
objectQueue.decrementInternalProcessingCount();
if (removeObject) {
if (objectQueue.queue.isEmpty() && objectQueue.activeCount == 0 && objectQueue.internalProcessingCount == 0) {
_poolMap.remove(key);
_poolList.remove(key);
}
} else {
_evictionCursor.add(pair);
_totalIdle++;
if (_lifo) {
_evictionCursor.previous();
}
}
}
}
allocate();
}","public void evict() throws Exception {
K kVar1 = kLiteral2;
boolean booleanVar3;
long longVar4;
synchronized (this) {
booleanVar3 = _testWhileIdle;
longVar4 = _minEvictableIdleTimeMillis;
if (_evictionKeyCursor != null && _evictionKeyCursor._lastReturned != null) {
kVar1 = _evictionKeyCursor._lastReturned.value();
}
}
for (int intVar15 = intLiteral16, intVar17 = intLiteral18; intVar5 < intLiteral1; intVar5++) {
final ObjectTimestampPair<V> objecttimestamppair<v>Var9;
synchronized (this) {
if (_poolMap == null || _poolMap.size() == 0) {
continue;
}
if (null == _evictionKeyCursor) {
resetEvictionKeyCursor();
kVar1 = null;
}
if (null == _evictionCursor) {
if (_evictionKeyCursor.hasNext()) {
kVar1 = _evictionKeyCursor.next();
resetEvictionObjectCursor(kVar1);
} else {
resetEvictionKeyCursor();
if (_evictionKeyCursor != null) {
if (_evictionKeyCursor.hasNext()) {
kVar1 = _evictionKeyCursor.next();
resetEvictionObjectCursor(kVar1);
}
}
}
}
if (_evictionCursor == null) {
continue;
}
if ((_lifo && !_evictionCursor.hasPrevious()) || (!_lifo && !_evictionCursor.hasNext())) {
if (_evictionKeyCursor != null) {
if (_evictionKeyCursor.hasNext()) {
kVar1 = _evictionKeyCursor.next();
resetEvictionObjectCursor(kVar1);
} else {
resetEvictionKeyCursor();
if (_evictionKeyCursor != null) {
if (_evictionKeyCursor.hasNext()) {
kVar1 = _evictionKeyCursor.next();
resetEvictionObjectCursor(kVar1);
}
}
}
}
}
if ((_lifo && !_evictionCursor.hasPrevious()) || (!_lifo && !_evictionCursor.hasNext())) {
continue;
}
objecttimestamppair<v>Var9 = _lifo ? _evictionCursor.previous() : _evictionCursor.next();
_evictionCursor.remove();
ObjectQueue objectqueueVar10 = objectqueueLiteral11;
objectqueueVar10.incrementInternalProcessingCount();
_totalIdle--;
}
boolean booleanVar12 = booleanLiteral13;
if ((longVar4 > 0) && (System.currentTimeMillis() - objecttimestamppair<v>Var9.tstamp > longVar4)) {
booleanVar12 = true;
}
if (booleanVar3 && booleanVar12 == false) {
boolean booleanVar14 = booleanLiteral13;
try {
_factory.activateObject(kVar1, objecttimestamppair<v>Var9.value);
booleanVar14 = true;
} catch (Exception e) {
booleanVar12 = true;
}
if (booleanVar14) {
if (!_factory.validateObject(kVar1, objecttimestamppair<v>Var9.value)) {
booleanVar12 = true;
} else {
try {
_factory.passivateObject(kVar1, objecttimestamppair<v>Var9.value);
} catch (Exception e) {
booleanVar12 = true;
}
}
}
}
if (booleanVar12) {
try {
_factory.destroyObject(kVar1, objecttimestamppair<v>Var9.value);
} catch (Exception e) {
}
}
synchronized (this) {
ObjectQueue objectqueueVar10 = objectqueueLiteral11;
objectqueueVar10.decrementInternalProcessingCount();
if (booleanVar12) {
if (objectqueueVar10.queue.isEmpty() && objectqueueVar10.activeCount == 0 && objectqueueVar10.internalProcessingCount == 0) {
_poolMap.remove(kVar1);
_poolList.remove(kVar1);
}
} else {
_evictionCursor.add(objecttimestamppair<v>Var9);
_totalIdle++;
if (_lifo) {
_evictionCursor.previous();
}
}
}
}
allocate();
}"
18022,PERFORMANCE,DM_NUMBER_CTOR,FP,pool,1887,"_activeCount.put(key, new Integer(active.intValue() - 1));
","private void decrementActiveCount(K key) {
_totActive--;
Integer active = _activeCount.get(key);
if (null == active) {
} else if (active.intValue() <= 1) {
_activeCount.remove(key);
} else {
_activeCount.put(key, new Integer(active.intValue() - 1));
}
}","private void decrementActiveCount(K key) {
_totActive--;
Integer integerVar1 = integerLiteral2;
if (null == integerVar1) {
} else if (integerVar1.intValue() <= 1) {
_activeCount.remove(key);
} else {
_activeCount.put(key, new Integer(integerVar1.intValue() - 1));
}
}"
18037,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1902,"} catch (Exception e) {
","public void invalidateObject(final Object key, final Object obj) {
try {
pool.invalidateObject(obj);
} catch (Exception e) {
}
}","public void invalidateObject(final Object key, final Object obj) {
try {
pool.invalidateObject(obj);
} catch (Exception e) {
}
}"
18050,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1915,"} catch (Exception e) {
","public void invalidateObject(final Object obj) {
if (type.isInstance(obj)) {
try {
pool.invalidateObject(obj);
} catch (Exception e) {
}
} else {
throw new ClassCastException(""Invalidated object is not of type: "" + type.getName() + "" was: "" + obj);
}
}","public void invalidateObject(final Object obj) {
if (type.isInstance(obj)) {
try {
pool.invalidateObject(obj);
} catch (Exception e) {
}
} else {
throw new ClassCastException(""Invalidated object is not of type: "" + type.getName() + "" was: "" + obj);
}
}"
18073,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,1938,"} catch (Exception ex2) {
","public void addObject() throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
Object obj = _factory.makeObject();
try {
assertOpen();
addObjectToPool(obj, false);
} catch (IllegalStateException ex) {
try {
_factory.destroyObject(obj);
} catch (Exception ex2) {
}
throw ex;
}
}","public void addObject() throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
Object objectVar1 = objectLiteral2;
try {
assertOpen();
addObjectToPool(objectVar1, false);
} catch (IllegalStateException ex) {
try {
_factory.destroyObject(objectVar1);
} catch (Exception ex2) {
}
throw ex;
}
}"
18104,Multithreaded correctness,NN_NAKED_NOTIFY,FP,pool,1969,"latch.notify();
","private void allocate() {
boolean clearOldest = false;
synchronized (this) {
if (isClosed())
return;
Iterator<Latch> allocationQueueIter = _allocationQueue.iterator();
while (allocationQueueIter.hasNext()) {
Latch latch = allocationQueueIter.next();
ObjectQueue pool = _poolMap.get(latch.getkey());
if (null == pool) {
pool = new ObjectQueue();
_poolMap.put(latch.getkey(), pool);
_poolList.add(latch.getkey());
}
latch.setPool(pool);
if (!pool.queue.isEmpty()) {
allocationQueueIter.remove();
latch.setPair(pool.queue.removeFirst());
pool.incrementInternalProcessingCount();
_totalIdle--;
synchronized (latch) {
latch.notify();
}
continue;
}
if ((this.maxTotal > 0) && (_totalActive + _totalIdle + _totalInternalProcessing >= this.maxTotal)) {
clearOldest = true;
break;
}
if ((this.maxTotalPerKey < 0 || pool.activeCount + pool.internalProcessingCount < this.maxTotalPerKey) && (this.maxTotal < 0 || _totalActive + _totalIdle + _totalInternalProcessing < this.maxTotal)) {
allocationQueueIter.remove();
latch.setMayCreate(true);
pool.incrementInternalProcessingCount();
synchronized (latch) {
latch.notify();
}
continue;
}
if (this.maxTotalPerKey < 0) {
break;
}
}
}
if (clearOldest) {
clearOldest();
}
}","private void allocate() {
boolean booleanVar1 = booleanLiteral2;
synchronized (this) {
if (isClosed())
return;
Iterator<Latch> iterator<latch>Var3 = iterator<latch>Literal4;
while (iterator<latch>Var3.hasNext()) {
Latch latchVar5 = latchLiteral6;
ObjectQueue objectqueueVar7 = objectqueueLiteral8;
if (null == objectqueueVar7) {
objectqueueVar7 = new ObjectQueue();
_poolMap.put(latchVar5.getkey(), objectqueueVar7);
_poolList.add(latchVar5.getkey());
}
latchVar5.setPool(objectqueueVar7);
if (!objectqueueVar7.queue.isEmpty()) {
iterator<latch>Var3.remove();
latchVar5.setPair(objectqueueVar7.queue.removeFirst());
objectqueueVar7.incrementInternalProcessingCount();
_totalIdle--;
synchronized (latchVar5) {
latchVar5.notify();
}
continue;
}
if ((this.maxTotal > 0) && (_totalActive + _totalIdle + _totalInternalProcessing >= this.maxTotal)) {
booleanVar1 = true;
break;
}
if ((this.maxTotalPerKey < 0 || objectqueueVar7.activeCount + objectqueueVar7.internalProcessingCount < this.maxTotalPerKey) && (this.maxTotal < 0 || _totalActive + _totalIdle + _totalInternalProcessing < this.maxTotal)) {
iterator<latch>Var3.remove();
latchVar5.setMayCreate(true);
objectqueueVar7.incrementInternalProcessingCount();
synchronized (latchVar5) {
latchVar5.notify();
}
continue;
}
if (this.maxTotalPerKey < 0) {
break;
}
}
}
if (booleanVar1) {
clearOldest();
}
}"
18129,Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,pool,1994,private long minEvictableIdleTimeMillis;,private long minEvictableIdleTimeMillis;,private long longVar1;
18139,Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,pool,2004,private boolean testOnBorrow;,private boolean testOnBorrow;,private boolean booleanVar1;
18152,Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,pool,2017,private long timeBetweenEvictionRunsMillis;,private long timeBetweenEvictionRunsMillis;,private long longVar1;
18158,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2023,"} catch (Exception e) {
","public void close() {
try {
keyedPool.close();
} catch (Exception e) {
}
}","public void close() {
try {
keyedPool.close();
} catch (Exception e) {
}
}"
18161,DODGY_CODE,REC_CATCH_EXCEPTION,FP,pool,2026,"} catch (Exception e) {
","public void run() {
boolean success = false;
try {
if (keyedPool.getNumIdle(key) < minIdle) {
keyedPool.addObject(key);
}
success = true;
} catch (Exception e) {
cancel();
} finally {
if (!success) {
cancel();
}
}
}","public void run() {
boolean booleanVar1 = booleanLiteral2;
try {
if (keyedPool.getNumIdle(key) < minIdle) {
keyedPool.addObject(key);
}
booleanVar1 = true;
} catch (Exception e) {
cancel();
} finally {
if (!booleanVar1) {
cancel();
}
}
}"
18167,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2032,"} catch (Exception e) {
","public void invalidateObject(final Object key, final Object obj) {
try {
pool.invalidateObject(obj);
} catch (Exception e) {
}
}","public void invalidateObject(final Object key, final Object obj) {
try {
pool.invalidateObject(obj);
} catch (Exception e) {
}
}"
18193,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2058,"} catch (Exception ex2) {
","public void addObject() throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
Object obj = _factory.makeObject();
try {
assertOpen();
addObjectToPool(obj, false);
} catch (IllegalStateException ex) {
try {
_factory.destroyObject(obj);
} catch (Exception ex2) {
}
throw ex;
}
}","public void addObject() throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
Object objectVar1 = objectLiteral2;
try {
assertOpen();
addObjectToPool(objectVar1, false);
} catch (IllegalStateException ex) {
try {
_factory.destroyObject(objectVar1);
} catch (Exception ex2) {
}
throw ex;
}
}"
18209,DODGY_CODE,RI_REDUNDANT_INTERFACES,FP,pool,2074,"this((KeyedPoolableObjectFactory)null,DEFAULT_MAX_SLEEPING,DEFAULT_INIT_SLEEPING_CAPACITY);
}
public StackKeyedObjectPool(int max) {
this((KeyedPoolableObjectFactory)null,max,DEFAULT_INIT_SLEEPING_CAPACITY);
}
public StackKeyedObjectPool(int max, int init) {
this((KeyedPoolableObjectFactory)null,max,init);
}
public StackKeyedObjectPool(KeyedPoolableObjectFactory factory) {
this(factory,DEFAULT_MAX_SLEEPING);
}
public StackKeyedObjectPool(KeyedPoolableObjectFactory factory, int max) {
this(factory,max,DEFAULT_INIT_SLEEPING_CAPACITY);
}
public StackKeyedObjectPool(KeyedPoolableObjectFactory factory, int max, int init) {
_factory = factory;
_maxSleeping = (max < 0 ? DEFAULT_MAX_SLEEPING : max);
_initSleepingCapacity = (init < 1 ? DEFAULT_INIT_SLEEPING_CAPACITY : init);
_pools = new HashMap();
_activeCount = new HashMap();
}
public synchronized Object borrowObject(Object key) throws Exception {
assertOpen();
Stack stack = (Stack)(_pools.get(key));
if(null == stack) {
stack = new Stack();
stack.ensureCapacity( _initSleepingCapacity > _maxSleeping ? _maxSleeping : _initSleepingCapacity);
_pools.put(key,stack);
}
Object obj = null;
do {
boolean newlyMade = false;
if (!stack.empty()) {
obj = stack.pop();
_totIdle--;
} else {
if(null == _factory) {
throw new NoSuchElementException(""pools without a factory cannot create new objects as needed."");
} else {
obj = _factory.makeObject(key);
newlyMade = true;
}
}
if (null != _factory && null != obj) {
try {
_factory.activateObject(key, obj);
if (!_factory.validateObject(key, obj)) {
throw new Exception(""ValidateObject failed"");
}
} catch (Throwable t) {
try {
_factory.destroyObject(key,obj);
} catch (Throwable t2) {
} finally {
obj = null;
}
if (newlyMade) {
throw new NoSuchElementException(
""Could not create a validated object, cause: "" +
t.getMessage());
}
}
}
} while (obj == null);
incrementActiveCount(key);
return obj;
}
public synchronized void returnObject(Object key, Object obj) throws Exception {
decrementActiveCount(key);
if (null != _factory) {
if (_factory.validateObject(key, obj)) {
try {
_factory.passivateObject(key, obj);
} catch (Exception ex) {
_factory.destroyObject(key, obj);
return;
}
} else {
return;
}
}
if (isClosed()) {
if (null != _factory) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e) {
}
}
return;
}
Stack stack = (Stack)_pools.get(key);
if(null == stack) {
stack = new Stack();
stack.ensureCapacity( _initSleepingCapacity > _maxSleeping ? _maxSleeping : _initSleepingCapacity);
_pools.put(key,stack);
}
final int stackSize = stack.size();
if (stackSize >= _maxSleeping) {
final Object staleObj;
if (stackSize > 0) {
staleObj = stack.remove(0);
_totIdle--;
} else {
staleObj = obj;
}
if(null != _factory) {
try {
_factory.destroyObject(key, staleObj);
} catch (Exception e) {
}
}
}
stack.push(obj);
_totIdle++;
}
public synchronized void invalidateObject(Object key, Object obj) throws Exception {
decrementActiveCount(key);
if(null != _factory) {
_factory.destroyObject(key,obj);
}
notifyAll(); 
}
public synchronized void addObject(Object key) throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
Object obj = _factory.makeObject(key);
try {
if (!_factory.validateObject(key, obj)) {
return;
}
} catch (Exception e) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e2) {
}
return;
}
_factory.passivateObject(key, obj);
Stack stack = (Stack)_pools.get(key);
if(null == stack) {
stack = new Stack();
stack.ensureCapacity( _initSleepingCapacity > _maxSleeping ? _maxSleeping : _initSleepingCapacity);
_pools.put(key,stack);
}
final int stackSize = stack.size();
if (stackSize >= _maxSleeping) {
final Object staleObj;
if (stackSize > 0) {
staleObj = stack.remove(0);
_totIdle--;
} else {
staleObj = obj;
}
try {
_factory.destroyObject(key, staleObj);
} catch (Exception e) {
if (obj == staleObj) {
throw e;
}
}
} else {
stack.push(obj);
_totIdle++;
}
}
public synchronized int getNumIdle() {
return _totIdle;
}
public synchronized int getNumActive() {
return _totActive;
}
public synchronized int getNumActive(Object key) {
return getActiveCount(key);
}
public synchronized int getNumIdle(Object key) {
try {
return((Stack)(_pools.get(key))).size();
} catch(Exception e) {
return 0;
}
}
public synchronized void clear() {
Iterator it = _pools.keySet().iterator();
while(it.hasNext()) {
Object key = it.next();
Stack stack = (Stack)(_pools.get(key));
destroyStack(key,stack);
}
_totIdle = 0;
_pools.clear();
_activeCount.clear();
}
public synchronized void clear(Object key) {
Stack stack = (Stack)(_pools.remove(key));
destroyStack(key,stack);
}
private synchronized void destroyStack(Object key, Stack stack) {
if(null == stack) {
return;
} else {
if(null != _factory) {
Iterator it = stack.iterator();
while(it.hasNext()) {
try {
_factory.destroyObject(key,it.next());
} catch(Exception e) {
}
}
}
_totIdle -= stack.size();
_activeCount.remove(key);
stack.clear();
}
}
public synchronized String toString() {
StringBuffer buf = new StringBuffer();
buf.append(getClass().getName());
buf.append("" contains "").append(_pools.size()).append("" distinct pools: "");
Iterator it = _pools.keySet().iterator();
while(it.hasNext()) {
Object key = it.next();
buf.append("" |"").append(key).append(""|="");
Stack s = (Stack)(_pools.get(key));
buf.append(s.size());
}
return buf.toString();
}
public void close() throws Exception {
super.close();
clear();
}
public synchronized void setFactory(KeyedPoolableObjectFactory factory) throws IllegalStateException {
if(0 < getNumActive()) {
throw new IllegalStateException(""Objects are already active"");
} else {
clear();
_factory = factory;
}
}
private int getActiveCount(Object key) {
try {
return ((Integer)_activeCount.get(key)).intValue();
} catch(NoSuchElementException e) {
return 0;
} catch(NullPointerException e) {
return 0;
}
}
private void incrementActiveCount(Object key) {
_totActive++;
Integer old = (Integer)(_activeCount.get(key));
if(null == old) {
_activeCount.put(key,new Integer(1));
} else {
_activeCount.put(key,new Integer(old.intValue() + 1));
}
}
private void decrementActiveCount(Object key) {
_totActive--;
Integer active = (Integer)(_activeCount.get(key));
if(null == active) {
} else if(active.intValue() <= 1) {
_activeCount.remove(key);
} else {
_activeCount.put(key, new Integer(active.intValue() - 1));
}
}
protected static final int DEFAULT_MAX_SLEEPING  = 8;
protected static final int DEFAULT_INIT_SLEEPING_CAPACITY = 4;
protected HashMap _pools = null;
protected KeyedPoolableObjectFactory _factory = null;
protected int _maxSleeping = DEFAULT_MAX_SLEEPING;
protected int _initSleepingCapacity = DEFAULT_INIT_SLEEPING_CAPACITY;
protected int _totActive = 0;
protected int _totIdle = 0;
protected HashMap _activeCount = null;
","public synchronized void returnObject(Object key, Object obj) throws Exception {
decrementActiveCount(key);
if (null != _factory) {
if (_factory.validateObject(key, obj)) {
try {
_factory.passivateObject(key, obj);
} catch (Exception ex) {
_factory.destroyObject(key, obj);
return;
}
} else {
return;
}
}
if (isClosed()) {
if (null != _factory) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e) {
}
}
return;
}
Stack stack = (Stack) _pools.get(key);
if (null == stack) {
stack = new Stack();
stack.ensureCapacity(_initSleepingCapacity > _maxSleeping ? _maxSleeping : _initSleepingCapacity);
_pools.put(key, stack);
}
final int stackSize = stack.size();
if (stackSize >= _maxSleeping) {
final Object staleObj;
if (stackSize > 0) {
staleObj = stack.remove(0);
_totIdle--;
} else {
staleObj = obj;
}
if (null != _factory) {
try {
_factory.destroyObject(key, staleObj);
} catch (Exception e) {
}
}
}
stack.push(obj);
_totIdle++;
}","public synchronized void returnObject(Object key, Object obj) throws Exception {
decrementActiveCount(key);
if (null != _factory) {
if (_factory.validateObject(key, obj)) {
try {
_factory.passivateObject(key, obj);
} catch (Exception ex) {
_factory.destroyObject(key, obj);
return;
}
} else {
return;
}
}
if (isClosed()) {
if (null != _factory) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e) {
}
}
return;
}
Stack stackVar1 = stackLiteral2;
if (null == stackVar1) {
stackVar1 = new Stack();
stackVar1.ensureCapacity(_initSleepingCapacity > _maxSleeping ? _maxSleeping : _initSleepingCapacity);
_pools.put(key, stackVar1);
}
final int intVar3 = intLiteral4;
if (intVar3 >= _maxSleeping) {
final Object objectVar5;
if (intVar3 > 0) {
objectVar5 = stackVar1.remove(0);
_totIdle--;
} else {
objectVar5 = obj;
}
if (null != _factory) {
try {
_factory.destroyObject(key, objectVar5);
} catch (Exception e) {
}
}
}
stackVar1.push(obj);
_totIdle++;
}"
18329,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2194,"} catch (Exception e) {
","public void close() {
try {
keyedPool.close();
} catch (Exception e) {
}
}","public void close() {
try {
keyedPool.close();
} catch (Exception e) {
}
}"
18342,PERFORMANCE,WMI_WRONG_MAP_ITERATOR,FP,pool,2207,"final CursorableLinkedList<ObjectTimestampPair<V>> list = _poolMap.get(key).queue;
","public void clearOldest() {
final Map<K, List<ObjectTimestampPair<V>>> toDestroy = new HashMap<K, List<ObjectTimestampPair<V>>>();
final Map<ObjectTimestampPair<V>, K> map = new TreeMap<ObjectTimestampPair<V>, K>();
synchronized (this) {
for (K key : _poolMap.keySet()) {
final CursorableLinkedList<ObjectTimestampPair<V>> list = _poolMap.get(key).queue;
for (ObjectTimestampPair<V> pair : list) {
map.put(pair, key);
}
}
Set<Map.Entry<ObjectTimestampPair<V>, K>> setPairKeys = map.entrySet();
int itemsToRemove = ((int) (map.size() * 0.15)) + 1;
Iterator<Map.Entry<ObjectTimestampPair<V>, K>> iter = setPairKeys.iterator();
while (iter.hasNext() && itemsToRemove > 0) {
Map.Entry<ObjectTimestampPair<V>, K> entry = iter.next();
K key = entry.getValue();
ObjectTimestampPair<V> pairTimeStamp = entry.getKey();
final CursorableLinkedList<ObjectTimestampPair<V>> list = _poolMap.get(key).queue;
list.remove(pairTimeStamp);
if (toDestroy.containsKey(key)) {
toDestroy.get(key).add(pairTimeStamp);
} else {
List<ObjectTimestampPair<V>> listForKey = new ArrayList<ObjectTimestampPair<V>>();
listForKey.add(pairTimeStamp);
toDestroy.put(key, listForKey);
}
if (list.isEmpty()) {
_poolMap.remove(key);
_poolList.remove(key);
}
_totalIdle--;
_totalInternalProcessing++;
itemsToRemove--;
}
}
destroy(toDestroy, _factory);
}","public void clearOldest() {
final Map<K, List<ObjectTimestampPair<V>>> map<k,list<objecttimestamppair<v>>>Var1 = map<k,list<objecttimestamppair<v>>>Literal2;
final Map<ObjectTimestampPair<V>, K> map<objecttimestamppair<v>,k>Var3 = map<objecttimestamppair<v>,k>Literal4;
synchronized (this) {
for (K kVar5 : _poolMap.keySet()) {
final CursorableLinkedList<ObjectTimestampPair<V>> cursorablelinkedlist<objecttimestamppair<v>>Var6 = cursorablelinkedlist<objecttimestamppair<v>>Literal7;
for (ObjectTimestampPair<V> objecttimestamppair<v>Var8 : cursorablelinkedlist<objecttimestamppair<v>>Var6) {
map<objecttimestamppair<v>,k>Var3.put(objecttimestamppair<v>Var8, kVar5);
}
}
Set<Map.Entry<ObjectTimestampPair<V>, K>> set<map.entry<objecttimestamppair<v>,k>>Var9 = set<map.entry<objecttimestamppair<v>,k>>Literal10;
int intVar11 = intLiteral12;
Iterator<Map.Entry<ObjectTimestampPair<V>, K>> iterator<map.entry<objecttimestamppair<v>,k>>Var13 = iterator<map.entry<objecttimestamppair<v>,k>>Literal14;
while (iterator<map.entry<objecttimestamppair<v>,k>>Var13.hasNext() && intVar11 > 0) {
Map.Entry<ObjectTimestampPair<V>, K> map.entry<objecttimestamppair<v>,k>Var15 = map.entry<objecttimestamppair<v>,k>Literal16;
K kVar5 = kLiteral17;
ObjectTimestampPair<V> objecttimestamppair<v>Var18 = objecttimestamppair<v>Literal19;
final CursorableLinkedList<ObjectTimestampPair<V>> cursorablelinkedlist<objecttimestamppair<v>>Var6 = cursorablelinkedlist<objecttimestamppair<v>>Literal7;
cursorablelinkedlist<objecttimestamppair<v>>Var6.remove(objecttimestamppair<v>Var18);
if (map<k,list<objecttimestamppair<v>>>Var1.containsKey(kVar5)) {
map<k,list<objecttimestamppair<v>>>Var1.get(kVar5).add(objecttimestamppair<v>Var18);
} else {
List<ObjectTimestampPair<V>> list<objecttimestamppair<v>>Var20 = list<objecttimestamppair<v>>Literal21;
list<objecttimestamppair<v>>Var20.add(objecttimestamppair<v>Var18);
map<k,list<objecttimestamppair<v>>>Var1.put(kVar5, list<objecttimestamppair<v>>Var20);
}
if (cursorablelinkedlist<objecttimestamppair<v>>Var6.isEmpty()) {
_poolMap.remove(kVar5);
_poolList.remove(kVar5);
}
_totalIdle--;
_totalInternalProcessing++;
intVar11--;
}
}
destroy(map<k,list<objecttimestamppair<v>>>Var1, _factory);
}"
18345,BAD_PRACTICE,EQ_COMPARETO_USE_OBJECT_EQUALS,FP,pool,2210,"final long tstampdiff = this.tstamp - other.tstamp;
if (tstampdiff == 0) {
return System.identityHashCode(this) - System.identityHashCode(other);
} else {
return (int)Math.min(Math.max(tstampdiff, Integer.MIN_VALUE), Integer.MAX_VALUE);
","public int compareTo(ObjectTimestampPair<V> other) {
final long tstampdiff = this.tstamp - other.tstamp;
if (tstampdiff == 0) {
return System.identityHashCode(this) - System.identityHashCode(other);
} else {
return (int) Math.min(Math.max(tstampdiff, Integer.MIN_VALUE), Integer.MAX_VALUE);
}
}","public int compareTo(ObjectTimestampPair<V> other) {
final long longVar1 = longLiteral2;
if (longVar1 == 0) {
return System.identityHashCode(this) - System.identityHashCode(other);
} else {
return (int) Math.min(Math.max(longVar1, Integer.MIN_VALUE), Integer.MAX_VALUE);
}
}"
18390,DODGY_CODE,RI_REDUNDANT_INTERFACES,FP,pool,2255,"public SoftReferenceObjectPool(PoolableObjectFactory<T> factory) {
if (factory == null) {
throw new IllegalArgumentException(""factory must not be null"");
}
_pool = new ArrayList<SoftReference<T>>();
_factory = factory;
}
@Override
public synchronized T borrowObject() throws Exception {
assertOpen();
T obj = null;
boolean newlyCreated = false;
while(null == obj) {
if(_pool.isEmpty()) {
newlyCreated = true;
obj = _factory.makeObject();
} else {
SoftReference<T> ref = _pool.remove(_pool.size() - 1);
obj = ref.get();
ref.clear(); 
}
if (null != obj) {
try {
_factory.activateObject(obj);
if (!_factory.validateObject(obj)) {
throw new Exception(""ValidateObject failed"");
}
} catch (Throwable t) {
PoolUtils.checkRethrow(t);
try {
_factory.destroyObject(obj);
} catch (Throwable t2) {
PoolUtils.checkRethrow(t2);
} finally {
obj = null;
}
if (newlyCreated) {
throw new NoSuchElementException(
""Could not create a validated object, cause: "" +
t.getMessage());
}
}
}
}
_numActive++;
return obj;
}
@Override
public synchronized void returnObject(T obj) throws Exception {
boolean success = !isClosed();
if(!_factory.validateObject(obj)) {
success = false;
} else {
try {
_factory.passivateObject(obj);
} catch(Exception e) {
success = false;
}
}
boolean shouldDestroy = !success;
_numActive--;
if(success) {
_pool.add(new SoftReference<T>(obj, refQueue));
}
notifyAll(); 
if (shouldDestroy) {
try {
_factory.destroyObject(obj);
} catch(Exception e) {
}
}
}
@Override
public synchronized void invalidateObject(T obj) throws Exception {
_numActive--;
_factory.destroyObject(obj);
notifyAll(); 
}
@Override
public synchronized void addObject() throws Exception {
assertOpen();
T obj = _factory.makeObject();
boolean success = true;
if(!_factory.validateObject(obj)) {
success = false;
} else {
_factory.passivateObject(obj);
}
boolean shouldDestroy = !success;
if(success) {
_pool.add(new SoftReference<T>(obj, refQueue));
notifyAll(); 
}
if(shouldDestroy) {
try {
_factory.destroyObject(obj);
} catch(Exception e) {
}
}
}
@Override
public synchronized int getNumIdle() {
pruneClearedReferences();
return _pool.size();
}
@Override
public synchronized int getNumActive() {
return _numActive;
}
@Override
public synchronized void clear() {
for (SoftReference<T> element : _pool) {
try {
T obj = element.get();
if (null != obj) {
_factory.destroyObject(obj);
}
} catch (Exception e) {
}
}
_pool.clear();
pruneClearedReferences();
}
@Override
public void close() throws Exception {
super.close();
clear();
}
private void pruneClearedReferences() {
Reference<? extends T> ref;
while ((ref = refQueue.poll()) != null) {
try {
_pool.remove(ref);
} catch (UnsupportedOperationException uoe) {
}
}
}
public PoolableObjectFactory<T> getFactory() {
return _factory;
}
private final List<SoftReference<T>> _pool;
private final PoolableObjectFactory<T> _factory;
private final ReferenceQueue<T> refQueue = new ReferenceQueue<T>();
private int _numActive = 0; 
","@Override
public synchronized void returnObject(T obj) throws Exception {
boolean success = !isClosed();
if (!_factory.validateObject(obj)) {
success = false;
} else {
try {
_factory.passivateObject(obj);
} catch (Exception e) {
success = false;
}
}
boolean shouldDestroy = !success;
_numActive--;
if (success) {
_pool.add(new SoftReference<T>(obj, refQueue));
}
notifyAll();
if (shouldDestroy) {
try {
_factory.destroyObject(obj);
} catch (Exception e) {
}
}
}","@Override
public synchronized void returnObject(T obj) throws Exception {
boolean booleanVar1 = booleanLiteral2;
if (!_factory.validateObject(obj)) {
booleanVar1 = false;
} else {
try {
_factory.passivateObject(obj);
} catch (Exception e) {
booleanVar1 = false;
}
}
boolean booleanVar3 = booleanLiteral4;
_numActive--;
if (booleanVar1) {
_pool.add(new SoftReference<T>(obj, refQueue));
}
notifyAll();
if (booleanVar3) {
try {
_factory.destroyObject(obj);
} catch (Exception e) {
}
}
}"
18407,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2272,"} catch (Exception e1) {
","public T borrowObject(K key, long borrowMaxWaitMillis) throws Exception {
assertOpen();
PooledObject<T> p = null;
boolean blockWhenExhausted = getBlockWhenExhausted();
boolean create;
long waitTime = 0;
ObjectDeque<T> objectDeque = register(key);
try {
while (p == null) {
create = false;
if (blockWhenExhausted) {
p = objectDeque.getIdleObjects().pollFirst();
if (p == null) {
create = true;
p = create(key);
}
if (p == null) {
if (borrowMaxWaitMillis < 0) {
p = objectDeque.getIdleObjects().takeFirst();
} else {
waitTime = System.currentTimeMillis();
p = objectDeque.getIdleObjects().pollFirst(borrowMaxWaitMillis, TimeUnit.MILLISECONDS);
waitTime = System.currentTimeMillis() - waitTime;
}
}
if (p == null) {
throw new NoSuchElementException(""Timeout waiting for idle object"");
}
if (!p.allocate()) {
p = null;
}
} else {
p = objectDeque.getIdleObjects().pollFirst();
if (p == null) {
create = true;
p = create(key);
}
if (p == null) {
throw new NoSuchElementException(""Pool exhausted"");
}
if (!p.allocate()) {
p = null;
}
}
if (p != null) {
try {
factory.activateObject(key, p);
} catch (Exception e) {
try {
destroy(key, p, true);
} catch (Exception e1) {
}
p = null;
if (create) {
NoSuchElementException nsee = new NoSuchElementException(""Unable to activate object"");
nsee.initCause(e);
throw nsee;
}
}
if (p != null && getTestOnBorrow()) {
boolean validate = false;
Throwable validationThrowable = null;
try {
validate = factory.validateObject(key, p);
} catch (Throwable t) {
PoolUtils.checkRethrow(t);
validationThrowable = t;
}
if (!validate) {
try {
destroy(key, p, true);
destroyedByBorrowValidationCount.incrementAndGet();
} catch (Exception e) {
}
p = null;
if (create) {
NoSuchElementException nsee = new NoSuchElementException(""Unable to validate object"");
nsee.initCause(validationThrowable);
throw nsee;
}
}
}
}
}
} finally {
deregister(key);
}
updateStatsBorrow(p, waitTime);
return p.getObject();
}","public T borrowObject(K key, long borrowMaxWaitMillis) throws Exception {
assertOpen();
PooledObject<T> pooledobject<t>Var1 = pooledobject<t>Literal2;
boolean booleanVar3 = booleanLiteral4;
boolean booleanVar5;
long longVar6 = longLiteral7;
ObjectDeque<T> objectdeque<t>Var8 = objectdeque<t>Literal9;
try {
while (pooledobject<t>Var1 == null) {
booleanVar5 = false;
if (booleanVar3) {
pooledobject<t>Var1 = objectdeque<t>Var8.getIdleObjects().pollFirst();
if (pooledobject<t>Var1 == null) {
booleanVar5 = true;
pooledobject<t>Var1 = create(key);
}
if (pooledobject<t>Var1 == null) {
if (borrowMaxWaitMillis < 0) {
pooledobject<t>Var1 = objectdeque<t>Var8.getIdleObjects().takeFirst();
} else {
longVar6 = System.currentTimeMillis();
pooledobject<t>Var1 = objectdeque<t>Var8.getIdleObjects().pollFirst(borrowMaxWaitMillis, TimeUnit.MILLISECONDS);
longVar6 = System.currentTimeMillis() - longVar6;
}
}
if (pooledobject<t>Var1 == null) {
throw new NoSuchElementException(""Timeout waiting for idle object"");
}
if (!pooledobject<t>Var1.allocate()) {
pooledobject<t>Var1 = null;
}
} else {
pooledobject<t>Var1 = objectdeque<t>Var8.getIdleObjects().pollFirst();
if (pooledobject<t>Var1 == null) {
booleanVar5 = true;
pooledobject<t>Var1 = create(key);
}
if (pooledobject<t>Var1 == null) {
throw new NoSuchElementException(""Pool exhausted"");
}
if (!pooledobject<t>Var1.allocate()) {
pooledobject<t>Var1 = null;
}
}
if (pooledobject<t>Var1 != null) {
try {
factory.activateObject(key, pooledobject<t>Var1);
} catch (Exception e) {
try {
destroy(key, pooledobject<t>Var1, true);
} catch (Exception e1) {
}
pooledobject<t>Var1 = null;
if (booleanVar5) {
NoSuchElementException nosuchelementexceptionVar10 = nosuchelementexceptionLiteral11;
nosuchelementexceptionVar10.initCause(e);
throw nosuchelementexceptionVar10;
}
}
if (pooledobject<t>Var1 != null && getTestOnBorrow()) {
boolean booleanVar12 = booleanLiteral13;
Throwable throwableVar14 = pooledobject<t>Literal2;
try {
booleanVar12 = factory.validateObject(key, pooledobject<t>Var1);
} catch (Throwable t) {
PoolUtils.checkRethrow(t);
throwableVar14 = t;
}
if (!booleanVar12) {
try {
destroy(key, pooledobject<t>Var1, true);
destroyedByBorrowValidationCount.incrementAndGet();
} catch (Exception e) {
}
pooledobject<t>Var1 = null;
if (booleanVar5) {
NoSuchElementException nosuchelementexceptionVar10 = nosuchelementexceptionLiteral15;
nosuchelementexceptionVar10.initCause(throwableVar14);
throw nosuchelementexceptionVar10;
}
}
}
}
}
} finally {
deregister(key);
}
updateStatsBorrow(pooledobject<t>Var1, longVar6);
return pooledobject<t>Var1.getObject();
}"
18410,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2275,"} catch (Exception e) {
","@Override
public synchronized void returnObject(T obj) throws Exception {
boolean success = !isClosed();
final PooledSoftReference<T> ref = findReference(obj);
if (ref == null) {
throw new IllegalStateException(""Returned object not currently part of this pool"");
}
if (factory != null) {
if (!factory.validateObject(ref)) {
success = false;
} else {
try {
factory.passivateObject(ref);
} catch (Exception e) {
success = false;
}
}
}
boolean shouldDestroy = !success;
numActive--;
if (success) {
ref.deallocate();
idleReferences.add(ref);
}
notifyAll();
if (shouldDestroy && factory != null) {
try {
destroy(ref);
} catch (Exception e) {
}
}
}","@Override
public synchronized void returnObject(T obj) throws Exception {
boolean booleanVar1 = booleanLiteral2;
final PooledSoftReference<T> pooledsoftreference<t>Var3 = pooledsoftreference<t>Literal4;
if (pooledsoftreference<t>Var3 == null) {
throw new IllegalStateException(""Returned object not currently part of this pool"");
}
if (factory != null) {
if (!factory.validateObject(pooledsoftreference<t>Var3)) {
booleanVar1 = false;
} else {
try {
factory.passivateObject(pooledsoftreference<t>Var3);
} catch (Exception e) {
booleanVar1 = false;
}
}
}
boolean booleanVar5 = booleanLiteral6;
numActive--;
if (booleanVar1) {
pooledsoftreference<t>Var3.deallocate();
idleReferences.add(pooledsoftreference<t>Var3);
}
notifyAll();
if (booleanVar5 && factory != null) {
try {
destroy(pooledsoftreference<t>Var3);
} catch (Exception e) {
}
}
}"
18412,DODGY_CODE,REC_CATCH_EXCEPTION,FP,pool,2277,"} catch (Exception e) {
","@Override
public void run() {
boolean success = false;
try {
if (keyedPool.getNumIdle(key) < minIdle) {
keyedPool.addObject(key);
}
success = true;
} catch (Exception e) {
cancel();
} finally {
if (!success) {
cancel();
}
}
}","@Override
public void run() {
boolean booleanVar1 = booleanLiteral2;
try {
if (keyedPool.getNumIdle(key) < minIdle) {
keyedPool.addObject(key);
}
booleanVar1 = true;
} catch (Exception e) {
cancel();
} finally {
if (!booleanVar1) {
cancel();
}
}
}"
18427,PERFORMANCE,WMI_WRONG_MAP_ITERATOR,FP,pool,2292,"final ObjectDeque<T> deque = poolMap.get(k);
","private void reuseCapacity() {
final int maxTotalPerKeySave = getMaxTotalPerKey();
int maxQueueLength = 0;
LinkedBlockingDeque<PooledObject<T>> mostLoaded = null;
K loadedKey = null;
for (K k : poolMap.keySet()) {
final ObjectDeque<T> deque = poolMap.get(k);
if (deque != null) {
final LinkedBlockingDeque<PooledObject<T>> pool = deque.getIdleObjects();
final int queueLength = pool.getTakeQueueLength();
if (getNumActive(k) < maxTotalPerKeySave && queueLength > maxQueueLength) {
maxQueueLength = queueLength;
mostLoaded = pool;
loadedKey = k;
}
}
}
if (mostLoaded != null) {
register(loadedKey);
try {
PooledObject<T> p = create(loadedKey);
if (p != null) {
addIdleObject(loadedKey, p);
}
} catch (Exception e) {
swallowException(e);
} finally {
deregister(loadedKey);
}
}
}","private void reuseCapacity() {
final int intVar1 = intLiteral2;
int intVar3 = intLiteral4;
LinkedBlockingDeque<PooledObject<T>> linkedblockingdeque<pooledobject<t>>Var5 = linkedblockingdeque<pooledobject<t>>Literal6;
K kVar7 = linkedblockingdeque<pooledobject<t>>Literal6;
for (K kVar8 : poolMap.keySet()) {
final ObjectDeque<T> objectdeque<t>Var9 = objectdeque<t>Literal10;
if (objectdeque<t>Var9 != null) {
final LinkedBlockingDeque<PooledObject<T>> linkedblockingdeque<pooledobject<t>>Var11 = linkedblockingdeque<pooledobject<t>>Literal12;
final int intVar13 = intLiteral14;
if (getNumActive(kVar8) < intVar1 && intVar13 > intVar3) {
intVar3 = intVar13;
linkedblockingdeque<pooledobject<t>>Var5 = linkedblockingdeque<pooledobject<t>>Var11;
kVar7 = kVar8;
}
}
}
if (linkedblockingdeque<pooledobject<t>>Var5 != null) {
register(kVar7);
try {
PooledObject<T> pooledobject<t>Var15 = pooledobject<t>Literal16;
if (pooledobject<t>Var15 != null) {
addIdleObject(kVar7, pooledobject<t>Var15);
}
} catch (Exception e) {
swallowException(e);
} finally {
deregister(kVar7);
}
}
}"
18454,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2319,"} catch (Exception e) {
","public void invalidateObject(final Object key, final Object obj) {
try {
keyedPool.invalidateObject(key, obj);
} catch (Exception e) {
}
}","public void invalidateObject(final Object key, final Object obj) {
try {
keyedPool.invalidateObject(key, obj);
} catch (Exception e) {
}
}"
18456,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2321,"} catch (Exception e) {
","public void run() {
try {
objectPool.getFactory().destroyObject(obj);
} catch (Exception e) {
}
}","public void run() {
try {
objectPool.getFactory().destroyObject(obj);
} catch (Exception e) {
}
}"
18469,BAD_PRACTICE,SE_BAD_FIELD,FP,pool,2334,"// XXX: Add better handling of when this instance is not Serializable
private final PoolableObjectFactory factory;","// XXX: Add better handling of when this instance is not Serializable
private final PoolableObjectFactory factory;","// XXX: Add better handling of when this instance is not Serializable
private final PoolableObjectFactory poolableobjectfactoryVar1;"
18510,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2375,"} catch(Exception e) {
","public synchronized void clear() {
for (Iterator entries = _poolMap.entrySet().iterator(); entries.hasNext(); ) {
final Map.Entry entry = (Map.Entry) entries.next();
final Object key = entry.getKey();
final CursorableLinkedList list = ((ObjectQueue) (entry.getValue())).queue;
for (Iterator it = list.iterator(); it.hasNext(); ) {
try {
_factory.destroyObject(key, ((ObjectTimestampPair) (it.next())).value);
} catch (Exception e) {
}
it.remove();
}
}
_poolMap.clear();
_poolList.clear();
_totalIdle = 0;
notifyAll();
}","public synchronized void clear() {
for (Iterator iteratorVar11 = iteratorLiteral12; iteratorVar1.hasNext(); ) {
final Map.Entry map.entryVar3 = map.entryLiteral4;
final Object objectVar5 = objectLiteral6;
final CursorableLinkedList cursorablelinkedlistVar7 = cursorablelinkedlistLiteral8;
for (Iterator iteratorVar13 = iteratorLiteral14; iteratorVar9.hasNext(); ) {
try {
_factory.destroyObject(objectVar5, ((ObjectTimestampPair) (iteratorVar9.next())).value);
} catch (Exception e) {
}
iteratorVar9.remove();
}
}
_poolMap.clear();
_poolList.clear();
_totalIdle = 0;
notifyAll();
}"
18519,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2384,"} catch (Exception e2) {
","public void returnObject(Object obj) throws Exception {
try {
addObjectToPool(obj, true);
} catch (Exception e) {
if (_factory != null) {
try {
_factory.destroyObject(obj);
} catch (Exception e2) {
}
}
}
}","public void returnObject(Object obj) throws Exception {
try {
addObjectToPool(obj, true);
} catch (Exception e) {
if (_factory != null) {
try {
_factory.destroyObject(obj);
} catch (Exception e2) {
}
}
}
}"
18546,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2411,"} catch (Exception e) {
","public void invalidateObject(final T obj) {
try {
pool.invalidateObject(obj);
} catch (Exception e) {
}
}","public void invalidateObject(final T obj) {
try {
pool.invalidateObject(obj);
} catch (Exception e) {
}
}"
18639,Multithreaded correctness,NO_NOTIFY_NOT_NOTIFYALL,FP,pool,2504,"latch.notify();
","private void allocate() {
boolean clearOldest = false;
synchronized (this) {
if (isClosed())
return;
Iterator allocationQueueIter = _allocationQueue.iterator();
while (allocationQueueIter.hasNext()) {
Latch latch = (Latch) allocationQueueIter.next();
ObjectQueue pool = (ObjectQueue) (_poolMap.get(latch.getkey()));
if (null == pool) {
pool = new ObjectQueue();
_poolMap.put(latch.getkey(), pool);
_poolList.add(latch.getkey());
}
latch.setPool(pool);
if (!pool.queue.isEmpty()) {
allocationQueueIter.remove();
latch.setPair((ObjectTimestampPair) pool.queue.removeFirst());
pool.incrementInternalProcessingCount();
_totalIdle--;
synchronized (latch) {
latch.notify();
}
continue;
}
if ((_maxTotal > 0) && (_totalActive + _totalIdle + _totalInternalProcessing >= _maxTotal)) {
clearOldest = true;
break;
}
if ((_maxActive < 0 || pool.activeCount + pool.internalProcessingCount < _maxActive) && (_maxTotal < 0 || _totalActive + _totalIdle + _totalInternalProcessing < _maxTotal)) {
allocationQueueIter.remove();
latch.setMayCreate(true);
pool.incrementInternalProcessingCount();
synchronized (latch) {
latch.notify();
}
continue;
}
if (_maxActive < 0) {
break;
}
}
}
if (clearOldest) {
clearOldest();
}
}","private void allocate() {
boolean booleanVar1 = booleanLiteral2;
synchronized (this) {
if (isClosed())
return;
Iterator iteratorVar3 = iteratorLiteral4;
while (iteratorVar3.hasNext()) {
Latch latchVar5 = latchLiteral6;
ObjectQueue objectqueueVar7 = objectqueueLiteral8;
if (null == objectqueueVar7) {
objectqueueVar7 = new ObjectQueue();
_poolMap.put(latchVar5.getkey(), objectqueueVar7);
_poolList.add(latchVar5.getkey());
}
latchVar5.setPool(objectqueueVar7);
if (!objectqueueVar7.queue.isEmpty()) {
iteratorVar3.remove();
latchVar5.setPair((ObjectTimestampPair) objectqueueVar7.queue.removeFirst());
objectqueueVar7.incrementInternalProcessingCount();
_totalIdle--;
synchronized (latchVar5) {
latchVar5.notify();
}
continue;
}
if ((_maxTotal > 0) && (_totalActive + _totalIdle + _totalInternalProcessing >= _maxTotal)) {
booleanVar1 = true;
break;
}
if ((_maxActive < 0 || objectqueueVar7.activeCount + objectqueueVar7.internalProcessingCount < _maxActive) && (_maxTotal < 0 || _totalActive + _totalIdle + _totalInternalProcessing < _maxTotal)) {
iteratorVar3.remove();
latchVar5.setMayCreate(true);
objectqueueVar7.incrementInternalProcessingCount();
synchronized (latchVar5) {
latchVar5.notify();
}
continue;
}
if (_maxActive < 0) {
break;
}
}
}
if (booleanVar1) {
clearOldest();
}
}"
18645,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2510,"} catch(Exception e) {
","public void run() {
try {
evict();
} catch (Exception e) {
} catch (OutOfMemoryError oome) {
oome.printStackTrace(System.err);
}
try {
ensureMinIdle();
} catch (Exception e) {
}
}","public void run() {
try {
evict();
} catch (Exception e) {
} catch (OutOfMemoryError oome) {
oome.printStackTrace(System.err);
}
try {
ensureMinIdle();
} catch (Exception e) {
}
}"
18646,Multithreaded correctness,NN_NAKED_NOTIFY,FP,pool,2511,"latch.notify();
","private synchronized void allocate() {
if (isClosed())
return;
for (; ; ) {
if (!_pool.isEmpty() && !_allocationQueue.isEmpty()) {
Latch latch = (Latch) _allocationQueue.removeFirst();
latch.setPair((ObjectTimestampPair) _pool.removeFirst());
_numInternalProcessing++;
synchronized (latch) {
latch.notify();
}
} else {
break;
}
}
for (; ; ) {
if ((!_allocationQueue.isEmpty()) && (_maxActive < 0 || (_numActive + _numInternalProcessing) < _maxActive)) {
Latch latch = (Latch) _allocationQueue.removeFirst();
latch.setMayCreate(true);
_numInternalProcessing++;
synchronized (latch) {
latch.notify();
}
} else {
break;
}
}
}","private synchronized void allocate() {
if (isClosed())
return;
for (; ; ) {
if (!_pool.isEmpty() && !_allocationQueue.isEmpty()) {
Latch latchVar1 = latchLiteral2;
latchVar1.setPair((ObjectTimestampPair) _pool.removeFirst());
_numInternalProcessing++;
synchronized (latchVar1) {
latchVar1.notify();
}
} else {
break;
}
}
for (; ; ) {
if ((!_allocationQueue.isEmpty()) && (_maxActive < 0 || (_numActive + _numInternalProcessing) < _maxActive)) {
Latch latchVar1 = latchLiteral2;
latchVar1.setMayCreate(true);
_numInternalProcessing++;
synchronized (latchVar1) {
latchVar1.notify();
}
} else {
break;
}
}
}"
18647,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2512,"} catch (Exception ex2) {
","public void addObject() throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
Object obj = _factory.makeObject();
try {
assertOpen();
addObjectToPool(obj, false);
} catch (IllegalStateException ex) {
try {
_factory.destroyObject(obj);
} catch (Exception ex2) {
}
throw ex;
}
}","public void addObject() throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
Object objectVar1 = objectLiteral2;
try {
assertOpen();
addObjectToPool(objectVar1, false);
} catch (IllegalStateException ex) {
try {
_factory.destroyObject(objectVar1);
} catch (Exception ex2) {
}
throw ex;
}
}"
18649,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2514,"} catch(Exception e) {
","public void run() {
try {
evict();
} catch (Exception e) {
} catch (OutOfMemoryError oome) {
oome.printStackTrace(System.err);
}
try {
ensureMinIdle();
} catch (Exception e) {
}
}","public void run() {
try {
evict();
} catch (Exception e) {
} catch (OutOfMemoryError oome) {
oome.printStackTrace(System.err);
}
try {
ensureMinIdle();
} catch (Exception e) {
}
}"
18651,Multithreaded correctness,NO_NOTIFY_NOT_NOTIFYALL,FP,pool,2516,"latch.notify();
","private synchronized void allocate() {
if (isClosed())
return;
for (; ; ) {
if (!_pool.isEmpty() && !_allocationQueue.isEmpty()) {
Latch latch = (Latch) _allocationQueue.removeFirst();
latch.setPair((ObjectTimestampPair) _pool.removeFirst());
_numInternalProcessing++;
synchronized (latch) {
latch.notify();
}
} else {
break;
}
}
for (; ; ) {
if ((!_allocationQueue.isEmpty()) && (_maxActive < 0 || (_numActive + _numInternalProcessing) < _maxActive)) {
Latch latch = (Latch) _allocationQueue.removeFirst();
latch.setMayCreate(true);
_numInternalProcessing++;
synchronized (latch) {
latch.notify();
}
} else {
break;
}
}
}","private synchronized void allocate() {
if (isClosed())
return;
for (; ; ) {
if (!_pool.isEmpty() && !_allocationQueue.isEmpty()) {
Latch latchVar1 = latchLiteral2;
latchVar1.setPair((ObjectTimestampPair) _pool.removeFirst());
_numInternalProcessing++;
synchronized (latchVar1) {
latchVar1.notify();
}
} else {
break;
}
}
for (; ; ) {
if ((!_allocationQueue.isEmpty()) && (_maxActive < 0 || (_numActive + _numInternalProcessing) < _maxActive)) {
Latch latchVar1 = latchLiteral2;
latchVar1.setMayCreate(true);
_numInternalProcessing++;
synchronized (latchVar1) {
latchVar1.notify();
}
} else {
break;
}
}
}"
18657,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2522,"} catch (Exception e) {
","public synchronized void returnObject(Object key, Object obj) throws Exception {
decrementActiveCount(key);
if (null != _factory) {
if (_factory.validateObject(key, obj)) {
try {
_factory.passivateObject(key, obj);
} catch (Exception ex) {
_factory.destroyObject(key, obj);
return;
}
} else {
return;
}
}
if (isClosed()) {
if (null != _factory) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e) {
}
}
return;
}
Stack stack = (Stack) _pools.get(key);
if (null == stack) {
stack = new Stack();
stack.ensureCapacity(_initSleepingCapacity > _maxSleeping ? _maxSleeping : _initSleepingCapacity);
_pools.put(key, stack);
}
final int stackSize = stack.size();
if (stackSize >= _maxSleeping) {
final Object staleObj;
if (stackSize > 0) {
staleObj = stack.remove(0);
_totIdle--;
} else {
staleObj = obj;
}
if (null != _factory) {
try {
_factory.destroyObject(key, staleObj);
} catch (Exception e) {
}
}
}
stack.push(obj);
_totIdle++;
}","public synchronized void returnObject(Object key, Object obj) throws Exception {
decrementActiveCount(key);
if (null != _factory) {
if (_factory.validateObject(key, obj)) {
try {
_factory.passivateObject(key, obj);
} catch (Exception ex) {
_factory.destroyObject(key, obj);
return;
}
} else {
return;
}
}
if (isClosed()) {
if (null != _factory) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e) {
}
}
return;
}
Stack stackVar1 = stackLiteral2;
if (null == stackVar1) {
stackVar1 = new Stack();
stackVar1.ensureCapacity(_initSleepingCapacity > _maxSleeping ? _maxSleeping : _initSleepingCapacity);
_pools.put(key, stackVar1);
}
final int intVar3 = intLiteral4;
if (intVar3 >= _maxSleeping) {
final Object objectVar5;
if (intVar3 > 0) {
objectVar5 = stackVar1.remove(0);
_totIdle--;
} else {
objectVar5 = obj;
}
if (null != _factory) {
try {
_factory.destroyObject(key, objectVar5);
} catch (Exception e) {
}
}
}
stackVar1.push(obj);
_totIdle++;
}"
18662,PERFORMANCE,WMI_WRONG_MAP_ITERATOR,FP,pool,2527,"Stack s = (Stack)(_pools.get(key));
","public synchronized String toString() {
StringBuffer buf = new StringBuffer();
buf.append(getClass().getName());
buf.append("" contains "").append(_pools.size()).append("" distinct pools: "");
Iterator it = _pools.keySet().iterator();
while (it.hasNext()) {
Object key = it.next();
buf.append("" |"").append(key).append(""|="");
Stack s = (Stack) (_pools.get(key));
buf.append(s.size());
}
return buf.toString();
}","public synchronized String toString() {
StringBuffer stringbufferVar1 = stringbufferLiteral2;
stringbufferVar1.append(getClass().getName());
stringbufferVar1.append("" contains "").append(_pools.size()).append("" distinct pools: "");
Iterator iteratorVar3 = iteratorLiteral4;
while (iteratorVar3.hasNext()) {
Object objectVar5 = objectLiteral6;
stringbufferVar1.append("" |"").append(objectVar5).append(""|="");
Stack stackVar7 = stackLiteral8;
stringbufferVar1.append(stackVar7.size());
}
return stringbufferVar1.toString();
}"
18733,Multithreaded correctness,NO_NOTIFY_NOT_NOTIFYALL,FP,pool,2598,"latch.notify();
","private synchronized void allocate() {
if (isClosed())
return;
for (; ; ) {
if (!_pool.isEmpty() && !_allocationQueue.isEmpty()) {
Latch latch = (Latch) _allocationQueue.removeFirst();
latch.setPair((ObjectTimestampPair) _pool.removeFirst());
_numInternalProcessing++;
synchronized (latch) {
latch.notify();
}
} else {
break;
}
}
for (; ; ) {
if ((!_allocationQueue.isEmpty()) && (_maxActive < 0 || (_numActive + _numInternalProcessing) < _maxActive)) {
Latch latch = (Latch) _allocationQueue.removeFirst();
latch.setMayCreate(true);
_numInternalProcessing++;
synchronized (latch) {
latch.notify();
}
} else {
break;
}
}
}","private synchronized void allocate() {
if (isClosed())
return;
for (; ; ) {
if (!_pool.isEmpty() && !_allocationQueue.isEmpty()) {
Latch latchVar1 = latchLiteral2;
latchVar1.setPair((ObjectTimestampPair) _pool.removeFirst());
_numInternalProcessing++;
synchronized (latchVar1) {
latchVar1.notify();
}
} else {
break;
}
}
for (; ; ) {
if ((!_allocationQueue.isEmpty()) && (_maxActive < 0 || (_numActive + _numInternalProcessing) < _maxActive)) {
Latch latchVar1 = latchLiteral2;
latchVar1.setMayCreate(true);
_numInternalProcessing++;
synchronized (latchVar1) {
latchVar1.notify();
}
} else {
break;
}
}
}"
18740,Multithreaded correctness,IS2_INCONSISTENT_SYNC,FP,pool,2605,protected int _totIdle = 0;,protected int _totIdle = 0;,protected int intVar1 = intLiteral2;
18743,DODGY_CODE,RI_REDUNDANT_INTERFACES,FP,pool,2608,"this((KeyedPoolableObjectFactory)null,DEFAULT_MAX_SLEEPING,DEFAULT_INIT_SLEEPING_CAPACITY);
}
public StackKeyedObjectPool(int max) {
this((KeyedPoolableObjectFactory)null,max,DEFAULT_INIT_SLEEPING_CAPACITY);
}
public StackKeyedObjectPool(int max, int init) {
this((KeyedPoolableObjectFactory)null,max,init);
}
public StackKeyedObjectPool(KeyedPoolableObjectFactory factory) {
this(factory,DEFAULT_MAX_SLEEPING);
}
public StackKeyedObjectPool(KeyedPoolableObjectFactory factory, int max) {
this(factory,max,DEFAULT_INIT_SLEEPING_CAPACITY);
}
public StackKeyedObjectPool(KeyedPoolableObjectFactory factory, int max, int init) {
_factory = factory;
_maxSleeping = (max < 0 ? DEFAULT_MAX_SLEEPING : max);
_initSleepingCapacity = (init < 1 ? DEFAULT_INIT_SLEEPING_CAPACITY : init);
_pools = new HashMap();
_activeCount = new HashMap();
}
public synchronized Object borrowObject(Object key) throws Exception {
assertOpen();
Stack stack = (Stack)(_pools.get(key));
if(null == stack) {
stack = new Stack();
stack.ensureCapacity( _initSleepingCapacity > _maxSleeping ? _maxSleeping : _initSleepingCapacity);
_pools.put(key,stack);
}
Object obj = null;
do {
boolean newlyMade = false;
if (!stack.empty()) {
obj = stack.pop();
_totIdle--;
} else {
if(null == _factory) {
throw new NoSuchElementException(""pools without a factory cannot create new objects as needed."");
} else {
obj = _factory.makeObject(key);
newlyMade = true;
}
}
if (null != _factory && null != obj) {
try {
_factory.activateObject(key, obj);
if (!_factory.validateObject(key, obj)) {
throw new Exception(""ValidateObject failed"");
}
} catch (Throwable t) {
PoolUtils.checkRethrow(t);
try {
_factory.destroyObject(key,obj);
} catch (Throwable t2) {
PoolUtils.checkRethrow(t2);
} finally {
obj = null;
}
if (newlyMade) {
throw new NoSuchElementException(
""Could not create a validated object, cause: "" +
t.getMessage());
}
}
}
} while (obj == null);
incrementActiveCount(key);
return obj;
}
public synchronized void returnObject(Object key, Object obj) throws Exception {
decrementActiveCount(key);
if (null != _factory) {
if (_factory.validateObject(key, obj)) {
try {
_factory.passivateObject(key, obj);
} catch (Exception ex) {
_factory.destroyObject(key, obj);
return;
}
} else {
return;
}
}
if (isClosed()) {
if (null != _factory) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e) {
}
}
return;
}
Stack stack = (Stack)_pools.get(key);
if(null == stack) {
stack = new Stack();
stack.ensureCapacity( _initSleepingCapacity > _maxSleeping ? _maxSleeping : _initSleepingCapacity);
_pools.put(key,stack);
}
final int stackSize = stack.size();
if (stackSize >= _maxSleeping) {
final Object staleObj;
if (stackSize > 0) {
staleObj = stack.remove(0);
_totIdle--;
} else {
staleObj = obj;
}
if(null != _factory) {
try {
_factory.destroyObject(key, staleObj);
} catch (Exception e) {
}
}
}
stack.push(obj);
_totIdle++;
}
public synchronized void invalidateObject(Object key, Object obj) throws Exception {
decrementActiveCount(key);
if(null != _factory) {
_factory.destroyObject(key,obj);
}
notifyAll(); 
}
public synchronized void addObject(Object key) throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
Object obj = _factory.makeObject(key);
try {
if (!_factory.validateObject(key, obj)) {
return;
}
} catch (Exception e) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e2) {
}
return;
}
_factory.passivateObject(key, obj);
Stack stack = (Stack)_pools.get(key);
if(null == stack) {
stack = new Stack();
stack.ensureCapacity( _initSleepingCapacity > _maxSleeping ? _maxSleeping : _initSleepingCapacity);
_pools.put(key,stack);
}
final int stackSize = stack.size();
if (stackSize >= _maxSleeping) {
final Object staleObj;
if (stackSize > 0) {
staleObj = stack.remove(0);
_totIdle--;
} else {
staleObj = obj;
}
try {
_factory.destroyObject(key, staleObj);
} catch (Exception e) {
if (obj == staleObj) {
throw e;
}
}
} else {
stack.push(obj);
_totIdle++;
}
}
public synchronized int getNumIdle() {
return _totIdle;
}
public synchronized int getNumActive() {
return _totActive;
}
public synchronized int getNumActive(Object key) {
return getActiveCount(key);
}
public synchronized int getNumIdle(Object key) {
try {
return((Stack)(_pools.get(key))).size();
} catch(Exception e) {
return 0;
}
}
public synchronized void clear() {
Iterator it = _pools.keySet().iterator();
while(it.hasNext()) {
Object key = it.next();
Stack stack = (Stack)(_pools.get(key));
destroyStack(key,stack);
}
_totIdle = 0;
_pools.clear();
_activeCount.clear();
}
public synchronized void clear(Object key) {
Stack stack = (Stack)(_pools.remove(key));
destroyStack(key,stack);
}
private synchronized void destroyStack(Object key, Stack stack) {
if(null == stack) {
return;
} else {
if(null != _factory) {
Iterator it = stack.iterator();
while(it.hasNext()) {
try {
_factory.destroyObject(key,it.next());
} catch(Exception e) {
}
}
}
_totIdle -= stack.size();
_activeCount.remove(key);
stack.clear();
}
}
public synchronized String toString() {
StringBuffer buf = new StringBuffer();
buf.append(getClass().getName());
buf.append("" contains "").append(_pools.size()).append("" distinct pools: "");
Iterator it = _pools.keySet().iterator();
while(it.hasNext()) {
Object key = it.next();
buf.append("" |"").append(key).append(""|="");
Stack s = (Stack)(_pools.get(key));
buf.append(s.size());
}
return buf.toString();
}
public void close() throws Exception {
super.close();
clear();
}
public synchronized void setFactory(KeyedPoolableObjectFactory factory) throws IllegalStateException {
if(0 < getNumActive()) {
throw new IllegalStateException(""Objects are already active"");
} else {
clear();
_factory = factory;
}
}
public synchronized KeyedPoolableObjectFactory getFactory() {
return _factory;
}
private int getActiveCount(Object key) {
try {
return ((Integer)_activeCount.get(key)).intValue();
} catch(NoSuchElementException e) {
return 0;
} catch(NullPointerException e) {
return 0;
}
}
private void incrementActiveCount(Object key) {
_totActive++;
Integer old = (Integer)(_activeCount.get(key));
if(null == old) {
_activeCount.put(key,new Integer(1));
} else {
_activeCount.put(key,new Integer(old.intValue() + 1));
}
}
private void decrementActiveCount(Object key) {
_totActive--;
Integer active = (Integer)(_activeCount.get(key));
if(null == active) {
} else if(active.intValue() <= 1) {
_activeCount.remove(key);
} else {
_activeCount.put(key, new Integer(active.intValue() - 1));
}
}
public Map getPools() {
return _pools;
}
public int getMaxSleeping() {
return _maxSleeping;
}
public int getInitSleepingCapacity() {
return _initSleepingCapacity;
}
public int getTotActive() {
return _totActive;
}
public int getTotIdle() {
return _totIdle;
}
public Map getActiveCount() {
return _activeCount;
}
protected static final int DEFAULT_MAX_SLEEPING  = 8;
protected static final int DEFAULT_INIT_SLEEPING_CAPACITY = 4;
protected HashMap _pools = null;
protected KeyedPoolableObjectFactory _factory = null;
protected int _maxSleeping = DEFAULT_MAX_SLEEPING;
protected int _initSleepingCapacity = DEFAULT_INIT_SLEEPING_CAPACITY;
protected int _totActive = 0;
protected int _totIdle = 0;
protected HashMap _activeCount = null;
","public synchronized String toString() {
StringBuffer buf = new StringBuffer();
buf.append(getClass().getName());
buf.append("" contains "").append(_pools.size()).append("" distinct pools: "");
Iterator it = _pools.keySet().iterator();
while (it.hasNext()) {
Object key = it.next();
buf.append("" |"").append(key).append(""|="");
Stack s = (Stack) (_pools.get(key));
buf.append(s.size());
}
return buf.toString();
}","public synchronized String toString() {
StringBuffer stringbufferVar1 = stringbufferLiteral2;
stringbufferVar1.append(getClass().getName());
stringbufferVar1.append("" contains "").append(_pools.size()).append("" distinct pools: "");
Iterator iteratorVar3 = iteratorLiteral4;
while (iteratorVar3.hasNext()) {
Object objectVar5 = objectLiteral6;
stringbufferVar1.append("" |"").append(objectVar5).append(""|="");
Stack stackVar7 = stackLiteral8;
stringbufferVar1.append(stackVar7.size());
}
return stringbufferVar1.toString();
}"
18746,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2611,"} catch(Exception e) {
","public synchronized void clear() {
if (null != _factory) {
Iterator it = _pool.iterator();
while (it.hasNext()) {
try {
_factory.destroyObject(it.next());
} catch (Exception e) {
}
}
}
_pool.clear();
}","public synchronized void clear() {
if (null != _factory) {
Iterator iteratorVar1 = iteratorLiteral2;
while (iteratorVar1.hasNext()) {
try {
_factory.destroyObject(iteratorVar1.next());
} catch (Exception e) {
}
}
}
_pool.clear();
}"
18762,PERFORMANCE,WMI_WRONG_MAP_ITERATOR,FP,pool,2627,"final ObjectDeque<T> deque = poolMap.get(k);
","private boolean hasBorrowWaiters() {
for (K k : poolMap.keySet()) {
final ObjectDeque<T> deque = poolMap.get(k);
if (deque != null) {
final LinkedBlockingDeque<PooledObject<T>> pool = deque.getIdleObjects();
if (pool.hasTakeWaiters()) {
return true;
}
}
}
return false;
}","private boolean hasBorrowWaiters() {
for (K kVar1 : poolMap.keySet()) {
final ObjectDeque<T> objectdeque<t>Var2 = objectdeque<t>Literal3;
if (objectdeque<t>Var2 != null) {
final LinkedBlockingDeque<PooledObject<T>> linkedblockingdeque<pooledobject<t>>Var4 = linkedblockingdeque<pooledobject<t>>Literal5;
if (linkedblockingdeque<pooledobject<t>>Var4.hasTakeWaiters()) {
return true;
}
}
}
return false;
}"
18763,PERFORMANCE,WMI_WRONG_MAP_ITERATOR,FP,pool,2628,"ObjectDeque<T> queue = poolMap.get(key);
","@Override
public Map<String, Integer> getNumWaitersByKey() {
Map<String, Integer> result = new HashMap<String, Integer>();
for (K key : poolMap.keySet()) {
ObjectDeque<T> queue = poolMap.get(key);
if (queue != null) {
if (getBlockWhenExhausted()) {
result.put(key.toString(), Integer.valueOf(queue.getIdleObjects().getTakeQueueLength()));
} else {
result.put(key.toString(), Integer.valueOf(0));
}
}
}
return result;
}","@Override
public Map<String, Integer> getNumWaitersByKey() {
Map<String, Integer> map<string,integer>Var1 = map<string,integer>Literal2;
for (K kVar3 : poolMap.keySet()) {
ObjectDeque<T> objectdeque<t>Var4 = objectdeque<t>Literal5;
if (objectdeque<t>Var4 != null) {
if (getBlockWhenExhausted()) {
map<string,integer>Var1.put(kVar3.toString(), Integer.valueOf(objectdeque<t>Var4.getIdleObjects().getTakeQueueLength()));
} else {
map<string,integer>Var1.put(kVar3.toString(), Integer.valueOf(0));
}
}
}
return map<string,integer>Var1;
}"
18849,DODGY_CODE,UCF_USELESS_CONTROL_FLOW,FP,pool,2714,"if (!underTest.endEvictionTest(idleObjects)) {
","@Override
public void evict() throws Exception {
assertOpen();
if (idleObjects.size() > 0) {
PooledObject<T> underTest = null;
final EvictionPolicy<T> evictionPolicy = getEvictionPolicy();
synchronized (evictionLock) {
final EvictionConfig evictionConfig = new EvictionConfig(getMinEvictableIdleTimeMillis(), getSoftMinEvictableIdleTimeMillis(), getMinIdle());
final boolean testWhileIdle = getTestWhileIdle();
for (int i = 0, m = getNumTests(); i < m; i++) {
if (evictionIterator == null || !evictionIterator.hasNext()) {
evictionIterator = new EvictionIterator(idleObjects);
}
if (!evictionIterator.hasNext()) {
return;
}
try {
underTest = evictionIterator.next();
} catch (final NoSuchElementException nsee) {
i--;
evictionIterator = null;
continue;
}
if (!underTest.startEvictionTest()) {
i--;
continue;
}
boolean evict;
try {
evict = evictionPolicy.evict(evictionConfig, underTest, idleObjects.size());
} catch (final Throwable t) {
PoolUtils.checkRethrow(t);
swallowException(new Exception(t));
evict = false;
}
if (evict) {
destroy(underTest);
destroyedByEvictorCount.incrementAndGet();
} else {
if (testWhileIdle) {
boolean active = false;
try {
factory.activateObject(underTest);
active = true;
} catch (final Exception e) {
destroy(underTest);
destroyedByEvictorCount.incrementAndGet();
}
if (active) {
if (!factory.validateObject(underTest)) {
destroy(underTest);
destroyedByEvictorCount.incrementAndGet();
} else {
try {
factory.passivateObject(underTest);
} catch (final Exception e) {
destroy(underTest);
destroyedByEvictorCount.incrementAndGet();
}
}
}
}
if (!underTest.endEvictionTest(idleObjects)) {
}
}
}
}
}
final AbandonedConfig ac = this.abandonedConfig;
if (ac != null && ac.getRemoveAbandonedOnMaintenance()) {
removeAbandoned(ac);
}
}","@Override
public void evict() throws Exception {
assertOpen();
if (idleObjects.size() > 0) {
PooledObject<T> pooledobject<t>Var1 = pooledobject<t>Literal2;
final EvictionPolicy<T> evictionpolicy<t>Var3 = evictionpolicy<t>Literal4;
synchronized (evictionLock) {
final EvictionConfig evictionconfigVar5 = evictionconfigLiteral6;
final boolean booleanVar7 = booleanLiteral8;
for (int intVar18 = intLiteral19, intVar20 = intLiteral21; intVar9 < intLiteral1; intVar9++) {
if (evictionIterator == null || !evictionIterator.hasNext()) {
evictionIterator = new EvictionIterator(idleObjects);
}
if (!evictionIterator.hasNext()) {
return;
}
try {
pooledobject<t>Var1 = evictionIterator.next();
} catch (final NoSuchElementException nsee) {
intVar9--;
evictionIterator = null;
continue;
}
if (!pooledobject<t>Var1.startEvictionTest()) {
intVar9--;
continue;
}
boolean booleanVar13;
try {
booleanVar13 = evictionpolicy<t>Var3.evict(evictionconfigVar5, pooledobject<t>Var1, idleObjects.size());
} catch (final Throwable t) {
PoolUtils.checkRethrow(t);
swallowException(new Exception(t));
booleanVar13 = false;
}
if (booleanVar13) {
destroy(pooledobject<t>Var1);
destroyedByEvictorCount.incrementAndGet();
} else {
if (booleanVar7) {
boolean booleanVar14 = booleanLiteral15;
try {
factory.activateObject(pooledobject<t>Var1);
booleanVar14 = true;
} catch (final Exception e) {
destroy(pooledobject<t>Var1);
destroyedByEvictorCount.incrementAndGet();
}
if (booleanVar14) {
if (!factory.validateObject(pooledobject<t>Var1)) {
destroy(pooledobject<t>Var1);
destroyedByEvictorCount.incrementAndGet();
} else {
try {
factory.passivateObject(pooledobject<t>Var1);
} catch (final Exception e) {
destroy(pooledobject<t>Var1);
destroyedByEvictorCount.incrementAndGet();
}
}
}
}
if (!pooledobject<t>Var1.endEvictionTest(idleObjects)) {
}
}
}
}
}
final AbandonedConfig abandonedconfigVar16 = abandonedconfigLiteral17;
if (abandonedconfigVar16 != null && abandonedconfigVar16.getRemoveAbandonedOnMaintenance()) {
removeAbandoned(abandonedconfigVar16);
}
}"
18857,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2722,"} catch (final Exception ignored) {
","@Override
public void close() {
try {
pool.close();
} catch (final Exception ignored) {
}
}","@Override
public void close() {
try {
pool.close();
} catch (final Exception ignored) {
}
}"
18861,DODGY_CODE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,FP,pool,2726,"scheduledFuture.cancel(false);
","void cancel() {
scheduledFuture.cancel(false);
}","void cancel() {
scheduledFuture.cancel(false);
}"
18862,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,pool,2727,"return (E) throwable;
","@SuppressWarnings(""unchecked"")
protected E cast(final Throwable throwable) {
return (E) throwable;
}","@SuppressWarnings(""unchecked"")
protected E cast(final Throwable throwable) {
return (E) throwable;
}"
18896,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2761,"} catch (final Exception e) {
","@Override
public void close() {
try {
keyedPool.close();
} catch (final Exception e) {
}
}","@Override
public void close() {
try {
keyedPool.close();
} catch (final Exception e) {
}
}"
18898,BAD_PRACTICE,CO_ABSTRACT_SELF,FP,pool,2763,"public interface PooledObject<T> extends Comparable<PooledObject<T>> {
boolean allocate();
@Override
int compareTo(PooledObject<T> other);
boolean deallocate();
boolean endEvictionTest(Deque<PooledObject<T>> idleQueue);
@Override
boolean equals(Object obj);
default Duration getActiveDuration() {
final Instant lastReturnInstant = getLastReturnInstant();
final Instant lastBorrowInstant = getLastBorrowInstant();
// @formatter:off
return lastReturnInstant.isAfter(lastBorrowInstant) ?
Duration.between(lastBorrowInstant, lastReturnInstant) :
Duration.between(lastBorrowInstant, Instant.now());
// @formatter:on
}
@Deprecated
default Duration getActiveTime() {
return getActiveDuration();
}
@Deprecated
long getActiveTimeMillis();
default long getBorrowedCount() {
return -1;
}
default Instant getCreateInstant() {
return Instant.ofEpochMilli(getCreateTime());
}
@Deprecated
long getCreateTime();
default Duration getFullDuration() {
return Duration.between(getCreateInstant(), Instant.now());
}
default Duration getIdleDuration() {
return Duration.ofMillis(getIdleTimeMillis());
}
@Deprecated
default Duration getIdleTime() {
return Duration.ofMillis(getIdleTimeMillis());
}
@Deprecated
long getIdleTimeMillis();
default Instant getLastBorrowInstant() {
return Instant.ofEpochMilli(getLastBorrowTime());
}
@Deprecated
long getLastBorrowTime();
default Instant getLastReturnInstant() {
return Instant.ofEpochMilli(getLastReturnTime());
}
@Deprecated
long getLastReturnTime();
default Instant getLastUsedInstant() {
return Instant.ofEpochMilli(getLastUsedTime());
}
@Deprecated
long getLastUsedTime();
T getObject();
PooledObjectState getState();
@Override
int hashCode();
void invalidate();
void markAbandoned();
void markReturning();
void printStackTrace(PrintWriter writer);
void setLogAbandoned(boolean logAbandoned);
default void setRequireFullStackTrace(final boolean requireFullStackTrace) {
}
",PooledObjectState getState();,PooledObjectState getState();
18920,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2785,"} catch (Exception e) {
","public void close() {
try {
keyedPool.close();
} catch (Exception e) {
}
}","public void close() {
try {
keyedPool.close();
} catch (Exception e) {
}
}"
18924,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2789,"} catch (Exception e) {
","public void close() {
try {
pool.close();
} catch (Exception e) {
}
}","public void close() {
try {
pool.close();
} catch (Exception e) {
}
}"
18927,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2792,"} catch (Exception e) {
","public void invalidateObject(final Object key, final Object obj) {
try {
keyedPool.invalidateObject(key, obj);
} catch (Exception e) {
}
}","public void invalidateObject(final Object key, final Object obj) {
try {
keyedPool.invalidateObject(key, obj);
} catch (Exception e) {
}
}"
18932,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2797,"} catch (Exception e) {
","public void returnObject(final Object obj) {
synchronized (lock) {
try {
pool.returnObject(obj);
} catch (Exception e) {
}
}
}","public void returnObject(final Object obj) {
synchronized (lock) {
try {
pool.returnObject(obj);
} catch (Exception e) {
}
}
}"
18937,PERFORMANCE,WMI_WRONG_MAP_ITERATOR,FP,pool,2802,"Collection c = (Collection) m.get(key);
","private void destroy(Map m) {
for (Iterator keys = m.keySet().iterator(); keys.hasNext(); ) {
Object key = keys.next();
Collection c = (Collection) m.get(key);
for (Iterator it = c.iterator(); it.hasNext(); ) {
try {
_factory.destroyObject(key, ((ObjectTimestampPair) (it.next())).value);
} catch (Exception e) {
} finally {
synchronized (this) {
_totalInternalProcessing--;
allocate();
}
}
}
}
}","private void destroy(Map m) {
for (Iterator iteratorVar9 = iteratorLiteral10; iteratorVar1.hasNext(); ) {
Object objectVar3 = objectLiteral4;
Collection collectionVar5 = collectionLiteral6;
for (Iterator iteratorVar11 = iteratorLiteral12; iteratorVar7.hasNext(); ) {
try {
_factory.destroyObject(objectVar3, ((ObjectTimestampPair) (iteratorVar7.next())).value);
} catch (Exception e) {
} finally {
synchronized (this) {
_totalInternalProcessing--;
allocate();
}
}
}
}
}"
18941,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2806,"} catch(Exception e) {
","private void addObjectToPool(Object key, Object obj, boolean decrementNumActive) throws Exception {
boolean success = true;
if (_testOnReturn && !_factory.validateObject(key, obj)) {
success = false;
} else {
_factory.passivateObject(key, obj);
}
boolean shouldDestroy = !success;
ObjectQueue pool;
synchronized (this) {
pool = (ObjectQueue) (_poolMap.get(key));
if (null == pool) {
pool = new ObjectQueue();
_poolMap.put(key, pool);
_poolList.add(key);
}
if (isClosed()) {
shouldDestroy = true;
} else {
if (_maxIdle >= 0 && (pool.queue.size() >= _maxIdle)) {
shouldDestroy = true;
} else if (success) {
if (_lifo) {
pool.queue.addFirst(new ObjectTimestampPair(obj));
} else {
pool.queue.addLast(new ObjectTimestampPair(obj));
}
_totalIdle++;
if (decrementNumActive) {
pool.decrementActiveCount();
}
allocate();
}
}
}
if (shouldDestroy) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e) {
}
if (decrementNumActive) {
synchronized (this) {
pool.decrementActiveCount();
allocate();
}
}
}
}","private void addObjectToPool(Object key, Object obj, boolean decrementNumActive) throws Exception {
boolean booleanVar1 = booleanLiteral2;
if (_testOnReturn && !_factory.validateObject(key, obj)) {
booleanVar1 = false;
} else {
_factory.passivateObject(key, obj);
}
boolean booleanVar3 = booleanLiteral4;
ObjectQueue objectqueueVar5;
synchronized (this) {
objectqueueVar5 = (ObjectQueue) (_poolMap.get(key));
if (null == objectqueueVar5) {
objectqueueVar5 = new ObjectQueue();
_poolMap.put(key, objectqueueVar5);
_poolList.add(key);
}
if (isClosed()) {
booleanVar3 = true;
} else {
if (_maxIdle >= 0 && (objectqueueVar5.queue.size() >= _maxIdle)) {
booleanVar3 = true;
} else if (booleanVar1) {
if (_lifo) {
objectqueueVar5.queue.addFirst(new ObjectTimestampPair(obj));
} else {
objectqueueVar5.queue.addLast(new ObjectTimestampPair(obj));
}
_totalIdle++;
if (decrementNumActive) {
objectqueueVar5.decrementActiveCount();
}
allocate();
}
}
}
if (booleanVar3) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e) {
}
if (decrementNumActive) {
synchronized (this) {
objectqueueVar5.decrementActiveCount();
allocate();
}
}
}
}"
18951,Multithreaded correctness,NN_NAKED_NOTIFY,FP,pool,2816,"latch.notify();
","private synchronized void allocate() {
if (isClosed())
return;
for (; ; ) {
if (!_pool.isEmpty() && !_allocationQueue.isEmpty()) {
Latch latch = (Latch) _allocationQueue.removeFirst();
latch.setPair((ObjectTimestampPair) _pool.removeFirst());
_numInternalProcessing++;
synchronized (latch) {
latch.notify();
}
} else {
break;
}
}
for (; ; ) {
if ((!_allocationQueue.isEmpty()) && (_maxActive < 0 || (_numActive + _numInternalProcessing) < _maxActive)) {
Latch latch = (Latch) _allocationQueue.removeFirst();
latch.setMayCreate(true);
_numInternalProcessing++;
synchronized (latch) {
latch.notify();
}
} else {
break;
}
}
}","private synchronized void allocate() {
if (isClosed())
return;
for (; ; ) {
if (!_pool.isEmpty() && !_allocationQueue.isEmpty()) {
Latch latchVar1 = latchLiteral2;
latchVar1.setPair((ObjectTimestampPair) _pool.removeFirst());
_numInternalProcessing++;
synchronized (latchVar1) {
latchVar1.notify();
}
} else {
break;
}
}
for (; ; ) {
if ((!_allocationQueue.isEmpty()) && (_maxActive < 0 || (_numActive + _numInternalProcessing) < _maxActive)) {
Latch latchVar1 = latchLiteral2;
latchVar1.setMayCreate(true);
_numInternalProcessing++;
synchronized (latchVar1) {
latchVar1.notify();
}
} else {
break;
}
}
}"
18964,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2829,"} catch (Exception e2) {
","public synchronized void addObject(Object key) throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
Object obj = _factory.makeObject(key);
try {
if (!_factory.validateObject(key, obj)) {
return;
}
} catch (Exception e) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e2) {
}
return;
}
_factory.passivateObject(key, obj);
Stack stack = (Stack) _pools.get(key);
if (null == stack) {
stack = new Stack();
stack.ensureCapacity(_initSleepingCapacity > _maxSleeping ? _maxSleeping : _initSleepingCapacity);
_pools.put(key, stack);
}
final int stackSize = stack.size();
if (stackSize >= _maxSleeping) {
final Object staleObj;
if (stackSize > 0) {
staleObj = stack.remove(0);
_totIdle--;
} else {
staleObj = obj;
}
try {
_factory.destroyObject(key, staleObj);
} catch (Exception e) {
if (obj == staleObj) {
throw e;
}
}
} else {
stack.push(obj);
_totIdle++;
}
}","public synchronized void addObject(Object key) throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
Object objectVar1 = objectLiteral2;
try {
if (!_factory.validateObject(key, objectVar1)) {
return;
}
} catch (Exception e) {
try {
_factory.destroyObject(key, objectVar1);
} catch (Exception e2) {
}
return;
}
_factory.passivateObject(key, objectVar1);
Stack stackVar3 = stackLiteral4;
if (null == stackVar3) {
stackVar3 = new Stack();
stackVar3.ensureCapacity(_initSleepingCapacity > _maxSleeping ? _maxSleeping : _initSleepingCapacity);
_pools.put(key, stackVar3);
}
final int intVar5 = intLiteral6;
if (intVar5 >= _maxSleeping) {
final Object objectVar7;
if (intVar5 > 0) {
objectVar7 = stackVar3.remove(0);
_totIdle--;
} else {
objectVar7 = objectVar1;
}
try {
_factory.destroyObject(key, objectVar7);
} catch (Exception e) {
if (objectVar1 == objectVar7) {
throw e;
}
}
} else {
stackVar3.push(objectVar1);
_totIdle++;
}
}"
18969,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2834,"} catch(Exception e) {
","public synchronized void returnObject(Object obj) throws Exception {
boolean success = !isClosed();
if (null != _factory) {
if (!_factory.validateObject(obj)) {
success = false;
} else {
try {
_factory.passivateObject(obj);
} catch (Exception e) {
success = false;
}
}
}
boolean shouldDestroy = !success;
_numActive--;
if (success) {
Object toBeDestroyed = null;
if (_pool.size() >= _maxSleeping) {
shouldDestroy = true;
toBeDestroyed = _pool.remove(0);
}
_pool.push(obj);
obj = toBeDestroyed;
}
notifyAll();
if (shouldDestroy) {
try {
_factory.destroyObject(obj);
} catch (Exception e) {
}
}
}","public synchronized void returnObject(Object obj) throws Exception {
boolean booleanVar1 = booleanLiteral2;
if (null != _factory) {
if (!_factory.validateObject(obj)) {
booleanVar1 = false;
} else {
try {
_factory.passivateObject(obj);
} catch (Exception e) {
booleanVar1 = false;
}
}
}
boolean booleanVar3 = booleanLiteral4;
_numActive--;
if (booleanVar1) {
Object objectVar5 = objectLiteral6;
if (_pool.size() >= _maxSleeping) {
booleanVar3 = true;
objectVar5 = _pool.remove(0);
}
_pool.push(obj);
obj = objectVar5;
}
notifyAll();
if (booleanVar3) {
try {
_factory.destroyObject(obj);
} catch (Exception e) {
}
}
}"
18972,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2837,"} catch (Exception e) {
","public void close() {
try {
keyedPool.close();
} catch (Exception e) {
}
}","public void close() {
try {
keyedPool.close();
} catch (Exception e) {
}
}"
18976,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2841,"} catch (Exception e) {
","public void close() {
try {
pool.close();
} catch (Exception e) {
}
}","public void close() {
try {
pool.close();
} catch (Exception e) {
}
}"
18978,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2843,"} catch (Exception e) {
","public void close() {
try {
pool.close();
} catch (Exception e) {
}
}","public void close() {
try {
pool.close();
} catch (Exception e) {
}
}"
18983,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2848,"} catch (Exception e) {
","public void close() {
try {
keyedPool.close();
} catch (Exception e) {
}
}","public void close() {
try {
keyedPool.close();
} catch (Exception e) {
}
}"
18988,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2853,"} catch (Exception e) {
","public void invalidateObject(final Object key, final Object obj) {
try {
pool.invalidateObject(obj);
} catch (Exception e) {
}
}","public void invalidateObject(final Object key, final Object obj) {
try {
pool.invalidateObject(obj);
} catch (Exception e) {
}
}"
18992,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2857,"} catch (Exception e) {
","public void returnObject(final Object key, final Object obj) {
synchronized (lock) {
try {
keyedPool.returnObject(key, obj);
} catch (Exception e) {
}
}
}","public void returnObject(final Object key, final Object obj) {
synchronized (lock) {
try {
keyedPool.returnObject(key, obj);
} catch (Exception e) {
}
}
}"
18996,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2861,"} catch(Exception e) {
","public void run() {
try {
evict();
} catch (Exception e) {
} catch (OutOfMemoryError oome) {
oome.printStackTrace(System.err);
}
try {
ensureMinIdle();
} catch (Exception e) {
}
}","public void run() {
try {
evict();
} catch (Exception e) {
} catch (OutOfMemoryError oome) {
oome.printStackTrace(System.err);
}
try {
ensureMinIdle();
} catch (Exception e) {
}
}"
19002,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2867,"catch (Exception e) {
","public synchronized void preparePool(Object key, boolean populateImmediately) {
ObjectQueue pool = (ObjectQueue) (_poolMap.get(key));
if (null == pool) {
pool = new ObjectQueue();
_poolMap.put(key, pool);
_poolList.add(key);
}
if (populateImmediately) {
try {
ensureMinIdle(key);
} catch (Exception e) {
}
}
}","public synchronized void preparePool(Object key, boolean populateImmediately) {
ObjectQueue objectqueueVar1 = objectqueueLiteral2;
if (null == objectqueueVar1) {
objectqueueVar1 = new ObjectQueue();
_poolMap.put(key, objectqueueVar1);
_poolList.add(key);
}
if (populateImmediately) {
try {
ensureMinIdle(key);
} catch (Exception e) {
}
}
}"
19007,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2872,"} catch(Exception e) {
","private void addObjectToPool(Object key, Object obj, boolean decrementNumActive) throws Exception {
boolean success = true;
if (_testOnReturn && !_factory.validateObject(key, obj)) {
success = false;
} else {
_factory.passivateObject(key, obj);
}
boolean shouldDestroy = !success;
ObjectQueue pool;
synchronized (this) {
pool = (ObjectQueue) (_poolMap.get(key));
if (null == pool) {
pool = new ObjectQueue();
_poolMap.put(key, pool);
_poolList.add(key);
}
if (isClosed()) {
shouldDestroy = true;
} else {
if (_maxIdle >= 0 && (pool.queue.size() >= _maxIdle)) {
shouldDestroy = true;
} else if (success) {
if (_lifo) {
pool.queue.addFirst(new ObjectTimestampPair(obj));
} else {
pool.queue.addLast(new ObjectTimestampPair(obj));
}
_totalIdle++;
if (decrementNumActive) {
pool.decrementActiveCount();
}
allocate();
}
}
}
if (shouldDestroy) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e) {
}
if (decrementNumActive) {
synchronized (this) {
pool.decrementActiveCount();
allocate();
}
}
}
}","private void addObjectToPool(Object key, Object obj, boolean decrementNumActive) throws Exception {
boolean booleanVar1 = booleanLiteral2;
if (_testOnReturn && !_factory.validateObject(key, obj)) {
booleanVar1 = false;
} else {
_factory.passivateObject(key, obj);
}
boolean booleanVar3 = booleanLiteral4;
ObjectQueue objectqueueVar5;
synchronized (this) {
objectqueueVar5 = (ObjectQueue) (_poolMap.get(key));
if (null == objectqueueVar5) {
objectqueueVar5 = new ObjectQueue();
_poolMap.put(key, objectqueueVar5);
_poolList.add(key);
}
if (isClosed()) {
booleanVar3 = true;
} else {
if (_maxIdle >= 0 && (objectqueueVar5.queue.size() >= _maxIdle)) {
booleanVar3 = true;
} else if (booleanVar1) {
if (_lifo) {
objectqueueVar5.queue.addFirst(new ObjectTimestampPair(obj));
} else {
objectqueueVar5.queue.addLast(new ObjectTimestampPair(obj));
}
_totalIdle++;
if (decrementNumActive) {
objectqueueVar5.decrementActiveCount();
}
allocate();
}
}
}
if (booleanVar3) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e) {
}
if (decrementNumActive) {
synchronized (this) {
objectqueueVar5.decrementActiveCount();
allocate();
}
}
}
}"
19009,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2874,"} catch (Exception e2) {
","public void returnObject(Object obj) throws Exception {
try {
addObjectToPool(obj, true);
} catch (Exception e) {
if (_factory != null) {
try {
_factory.destroyObject(obj);
} catch (Exception e2) {
}
// TODO: Correctness here depends on control in addObjectToPool.
synchronized (this) {
_numActive--;
allocate();
}
}
}
}","public void returnObject(Object obj) throws Exception {
try {
addObjectToPool(obj, true);
} catch (Exception e) {
if (_factory != null) {
try {
_factory.destroyObject(obj);
} catch (Exception e2) {
}
// TODO: Correctness here depends on control in addObjectToPool.
synchronized (this) {
_numActive--;
allocate();
}
}
}
}"
19013,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2878,"} catch(Exception e) {
","private void addObjectToPool(Object obj, boolean decrementNumActive) throws Exception {
boolean success = true;
if (_testOnReturn && !(_factory.validateObject(obj))) {
success = false;
} else {
_factory.passivateObject(obj);
}
boolean shouldDestroy = !success;
synchronized (this) {
if (isClosed()) {
shouldDestroy = true;
} else {
if ((_maxIdle >= 0) && (_pool.size() >= _maxIdle)) {
shouldDestroy = true;
} else if (success) {
if (_lifo) {
_pool.addFirst(new ObjectTimestampPair(obj));
} else {
_pool.addLast(new ObjectTimestampPair(obj));
}
if (decrementNumActive) {
_numActive--;
}
allocate();
}
}
}
if (shouldDestroy) {
try {
_factory.destroyObject(obj);
} catch (Exception e) {
}
if (decrementNumActive) {
synchronized (this) {
_numActive--;
allocate();
}
}
}
}","private void addObjectToPool(Object obj, boolean decrementNumActive) throws Exception {
boolean booleanVar1 = booleanLiteral2;
if (_testOnReturn && !(_factory.validateObject(obj))) {
booleanVar1 = false;
} else {
_factory.passivateObject(obj);
}
boolean booleanVar3 = booleanLiteral4;
synchronized (this) {
if (isClosed()) {
booleanVar3 = true;
} else {
if ((_maxIdle >= 0) && (_pool.size() >= _maxIdle)) {
booleanVar3 = true;
} else if (booleanVar1) {
if (_lifo) {
_pool.addFirst(new ObjectTimestampPair(obj));
} else {
_pool.addLast(new ObjectTimestampPair(obj));
}
if (decrementNumActive) {
_numActive--;
}
allocate();
}
}
}
if (booleanVar3) {
try {
_factory.destroyObject(obj);
} catch (Exception e) {
}
if (decrementNumActive) {
synchronized (this) {
_numActive--;
allocate();
}
}
}
}"
19028,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,2893,"} catch(Exception e) {
","public synchronized void addObject() throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
Object obj = _factory.makeObject();
boolean success = true;
if (!_factory.validateObject(obj)) {
success = false;
} else {
_factory.passivateObject(obj);
}
boolean shouldDestroy = !success;
if (success) {
Object toBeDestroyed = null;
if (_pool.size() >= _maxSleeping) {
shouldDestroy = true;
toBeDestroyed = _pool.remove(0);
}
_pool.push(obj);
obj = toBeDestroyed;
}
notifyAll();
if (shouldDestroy) {
try {
_factory.destroyObject(obj);
} catch (Exception e) {
}
}
}","public synchronized void addObject() throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
Object objectVar1 = objectLiteral2;
boolean booleanVar3 = booleanLiteral4;
if (!_factory.validateObject(objectVar1)) {
booleanVar3 = false;
} else {
_factory.passivateObject(objectVar1);
}
boolean booleanVar5 = booleanLiteral6;
if (booleanVar3) {
Object objectVar7 = objectLiteral8;
if (_pool.size() >= _maxSleeping) {
booleanVar5 = true;
objectVar7 = _pool.remove(0);
}
_pool.push(objectVar1);
objectVar1 = objectVar7;
}
notifyAll();
if (booleanVar5) {
try {
_factory.destroyObject(objectVar1);
} catch (Exception e) {
}
}
}"
19094,PERFORMANCE,WMI_WRONG_MAP_ITERATOR,FP,pool,2959,"ObjectDeque<T> queue = poolMap.get(key);
","@Override
public Map<String, Integer> getNumWaitersByKey() {
Map<String, Integer> result = new HashMap<String, Integer>();
for (K key : poolMap.keySet()) {
ObjectDeque<T> queue = poolMap.get(key);
if (queue != null) {
if (getBlockWhenExhausted()) {
result.put(key.toString(), Integer.valueOf(queue.getIdleObjects().getTakeQueueLength()));
} else {
result.put(key.toString(), Integer.valueOf(0));
}
}
}
return result;
}","@Override
public Map<String, Integer> getNumWaitersByKey() {
Map<String, Integer> map<string,integer>Var1 = map<string,integer>Literal2;
for (K kVar3 : poolMap.keySet()) {
ObjectDeque<T> objectdeque<t>Var4 = objectdeque<t>Literal5;
if (objectdeque<t>Var4 != null) {
if (getBlockWhenExhausted()) {
map<string,integer>Var1.put(kVar3.toString(), Integer.valueOf(objectdeque<t>Var4.getIdleObjects().getTakeQueueLength()));
} else {
map<string,integer>Var1.put(kVar3.toString(), Integer.valueOf(0));
}
}
}
return map<string,integer>Var1;
}"
19096,PERFORMANCE,WMI_WRONG_MAP_ITERATOR,FP,pool,2961,"ObjectDeque<T> queue = poolMap.get(key);
","@Override
public Map<String, List<DefaultPooledObjectInfo>> listAllObjects() {
Map<String, List<DefaultPooledObjectInfo>> result = new HashMap<String, List<DefaultPooledObjectInfo>>();
for (K key : poolMap.keySet()) {
ObjectDeque<T> queue = poolMap.get(key);
if (queue != null) {
List<DefaultPooledObjectInfo> list = new ArrayList<DefaultPooledObjectInfo>();
result.put(key.toString(), list);
for (PooledObject<T> p : queue.getAllObjects().values()) {
list.add(new DefaultPooledObjectInfo(p));
}
}
}
return result;
}","@Override
public Map<String, List<DefaultPooledObjectInfo>> listAllObjects() {
Map<String, List<DefaultPooledObjectInfo>> map<string,list<defaultpooledobjectinfo>>Var1 = map<string,list<defaultpooledobjectinfo>>Literal2;
for (K kVar3 : poolMap.keySet()) {
ObjectDeque<T> objectdeque<t>Var4 = objectdeque<t>Literal5;
if (objectdeque<t>Var4 != null) {
List<DefaultPooledObjectInfo> list<defaultpooledobjectinfo>Var6 = list<defaultpooledobjectinfo>Literal7;
map<string,list<defaultpooledobjectinfo>>Var1.put(kVar3.toString(), list<defaultpooledobjectinfo>Var6);
for (PooledObject<T> pooledobject<t>Var8 : objectdeque<t>Var4.getAllObjects().values()) {
list<defaultpooledobjectinfo>Var6.add(new DefaultPooledObjectInfo(pooledobject<t>Var8));
}
}
}
return map<string,list<defaultpooledobjectinfo>>Var1;
}"
19164,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,3029,"} catch (Exception e) {
","@Override
public void invalidateObject(final K key, final V obj) {
try {
keyedPool.invalidateObject(key, obj);
} catch (Exception e) {
}
}","@Override
public void invalidateObject(final K key, final V obj) {
try {
keyedPool.invalidateObject(key, obj);
} catch (Exception e) {
}
}"
19173,PERFORMANCE,WMI_WRONG_MAP_ITERATOR,FP,pool,3038,"final ObjectDeque<T> deque = poolMap.get(k);
","private boolean hasBorrowWaiters() {
for (K k : poolMap.keySet()) {
final ObjectDeque<T> deque = poolMap.get(k);
if (deque != null) {
final LinkedBlockingDeque<PooledObject<T>> pool = deque.getIdleObjects();
if (pool.hasTakeWaiters()) {
return true;
}
}
}
return false;
}","private boolean hasBorrowWaiters() {
for (K kVar1 : poolMap.keySet()) {
final ObjectDeque<T> objectdeque<t>Var2 = objectdeque<t>Literal3;
if (objectdeque<t>Var2 != null) {
final LinkedBlockingDeque<PooledObject<T>> linkedblockingdeque<pooledobject<t>>Var4 = linkedblockingdeque<pooledobject<t>>Literal5;
if (linkedblockingdeque<pooledobject<t>>Var4.hasTakeWaiters()) {
return true;
}
}
}
return false;
}"
19180,DODGY_CODE,UCF_USELESS_CONTROL_FLOW,FP,pool,3045,"if (!underTest.endEvictionTest(idleObjects)) {
","@Override
public void evict() throws Exception {
assertOpen();
if (idleObjects.size() > 0) {
PooledObject<T> underTest = null;
EvictionPolicy<T> evictionPolicy = getEvictionPolicy();
synchronized (evictionLock) {
EvictionConfig evictionConfig = new EvictionConfig(getMinEvictableIdleTimeMillis(), getSoftMinEvictableIdleTimeMillis(), getMinIdle());
boolean testWhileIdle = getTestWhileIdle();
for (int i = 0, m = getNumTests(); i < m; i++) {
if (evictionIterator == null || !evictionIterator.hasNext()) {
if (getLifo()) {
evictionIterator = idleObjects.descendingIterator();
} else {
evictionIterator = idleObjects.iterator();
}
}
if (!evictionIterator.hasNext()) {
return;
}
try {
underTest = evictionIterator.next();
} catch (NoSuchElementException nsee) {
i--;
evictionIterator = null;
continue;
}
if (!underTest.startEvictionTest()) {
i--;
continue;
}
if (evictionPolicy.evict(evictionConfig, underTest, idleObjects.size())) {
destroy(underTest);
destroyedByEvictorCount.incrementAndGet();
} else {
if (testWhileIdle) {
boolean active = false;
try {
factory.activateObject(underTest);
active = true;
} catch (Exception e) {
destroy(underTest);
destroyedByEvictorCount.incrementAndGet();
}
if (active) {
if (!factory.validateObject(underTest)) {
destroy(underTest);
destroyedByEvictorCount.incrementAndGet();
} else {
try {
factory.passivateObject(underTest);
} catch (Exception e) {
destroy(underTest);
destroyedByEvictorCount.incrementAndGet();
}
}
}
}
if (!underTest.endEvictionTest(idleObjects)) {
}
}
}
}
}
AbandonedConfig ac = this.abandonedConfig;
if (ac != null && ac.getRemoveAbandonedOnMaintenance()) {
removeAbandoned(ac);
}
}","@Override
public void evict() throws Exception {
assertOpen();
if (idleObjects.size() > 0) {
PooledObject<T> pooledobject<t>Var1 = pooledobject<t>Literal2;
EvictionPolicy<T> evictionpolicy<t>Var3 = evictionpolicy<t>Literal4;
synchronized (evictionLock) {
EvictionConfig evictionconfigVar5 = evictionconfigLiteral6;
boolean booleanVar7 = booleanLiteral8;
for (int intVar17 = intLiteral18, intVar19 = intLiteral20; intVar9 < intLiteral1; intVar9++) {
if (evictionIterator == null || !evictionIterator.hasNext()) {
if (getLifo()) {
evictionIterator = idleObjects.descendingIterator();
} else {
evictionIterator = idleObjects.iterator();
}
}
if (!evictionIterator.hasNext()) {
return;
}
try {
pooledobject<t>Var1 = evictionIterator.next();
} catch (NoSuchElementException nsee) {
intVar9--;
evictionIterator = null;
continue;
}
if (!pooledobject<t>Var1.startEvictionTest()) {
intVar9--;
continue;
}
if (evictionpolicy<t>Var3.evict(evictionconfigVar5, pooledobject<t>Var1, idleObjects.size())) {
destroy(pooledobject<t>Var1);
destroyedByEvictorCount.incrementAndGet();
} else {
if (booleanVar7) {
boolean booleanVar13 = booleanLiteral14;
try {
factory.activateObject(pooledobject<t>Var1);
booleanVar13 = true;
} catch (Exception e) {
destroy(pooledobject<t>Var1);
destroyedByEvictorCount.incrementAndGet();
}
if (booleanVar13) {
if (!factory.validateObject(pooledobject<t>Var1)) {
destroy(pooledobject<t>Var1);
destroyedByEvictorCount.incrementAndGet();
} else {
try {
factory.passivateObject(pooledobject<t>Var1);
} catch (Exception e) {
destroy(pooledobject<t>Var1);
destroyedByEvictorCount.incrementAndGet();
}
}
}
}
if (!pooledobject<t>Var1.endEvictionTest(idleObjects)) {
}
}
}
}
}
AbandonedConfig abandonedconfigVar15 = abandonedconfigLiteral16;
if (abandonedconfigVar15 != null && abandonedconfigVar15.getRemoveAbandonedOnMaintenance()) {
removeAbandoned(abandonedconfigVar15);
}
}"
19183,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,3048,"} catch (Exception e) {
","@Override
public synchronized void addObject() throws Exception {
assertOpen();
if (factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
T obj = factory.makeObject().getObject();
createCount++;
PooledSoftReference<T> ref = new PooledSoftReference<T>(new SoftReference<T>(obj, refQueue));
allReferences.add(ref);
boolean success = true;
if (!factory.validateObject(ref)) {
success = false;
} else {
factory.passivateObject(ref);
}
boolean shouldDestroy = !success;
if (success) {
idleReferences.add(ref);
notifyAll();
}
if (shouldDestroy) {
try {
destroy(ref);
} catch (Exception e) {
}
}
}","@Override
public synchronized void addObject() throws Exception {
assertOpen();
if (factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
T tVar1 = tLiteral2;
createCount++;
PooledSoftReference<T> pooledsoftreference<t>Var3 = pooledsoftreference<t>Literal4;
allReferences.add(pooledsoftreference<t>Var3);
boolean booleanVar5 = booleanLiteral6;
if (!factory.validateObject(pooledsoftreference<t>Var3)) {
booleanVar5 = false;
} else {
factory.passivateObject(pooledsoftreference<t>Var3);
}
boolean booleanVar7 = booleanLiteral8;
if (booleanVar5) {
idleReferences.add(pooledsoftreference<t>Var3);
notifyAll();
}
if (booleanVar7) {
try {
destroy(pooledsoftreference<t>Var3);
} catch (Exception e) {
}
}
}"
19212,DODGY_CODE,BC_UNCONFIRMED_CAST,FP,pool,3077,"return (E) throwable;
","@SuppressWarnings(""unchecked"")
protected E cast(final Throwable throwable) {
return (E) throwable;
}","@SuppressWarnings(""unchecked"")
protected E cast(final Throwable throwable) {
return (E) throwable;
}"
19218,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,3083,"} catch (final Exception e1) {
","public T borrowObject(final K key, final long borrowMaxWaitMillis) throws E {
assertOpen();
final AbandonedConfig ac = this.abandonedConfig;
if (ac != null && ac.getRemoveAbandonedOnBorrow() && (getNumIdle() < 2) && (getNumActive() > getMaxTotal() - 3)) {
removeAbandoned(ac);
}
PooledObject<T> p = null;
final boolean blockWhenExhausted = getBlockWhenExhausted();
boolean create;
final long waitTimeMillis = System.currentTimeMillis();
final ObjectDeque<T> objectDeque = register(key);
try {
while (p == null) {
create = false;
p = objectDeque.getIdleObjects().pollFirst();
if (p == null) {
p = create(key);
if (p != null) {
create = true;
}
}
if (blockWhenExhausted) {
if (p == null) {
try {
p = borrowMaxWaitMillis < 0 ? objectDeque.getIdleObjects().takeFirst() : objectDeque.getIdleObjects().pollFirst(borrowMaxWaitMillis, TimeUnit.MILLISECONDS);
} catch (InterruptedException e) {
throw cast(e);
}
}
if (p == null) {
throw new NoSuchElementException(appendStats(""Timeout waiting for idle object, borrowMaxWaitMillis="" + borrowMaxWaitMillis));
}
} else if (p == null) {
throw new NoSuchElementException(appendStats(""Pool exhausted""));
}
if (!p.allocate()) {
p = null;
}
if (p != null) {
try {
factory.activateObject(key, p);
} catch (final Exception e) {
try {
destroy(key, p, true, DestroyMode.NORMAL);
} catch (final Exception e1) {
}
p = null;
if (create) {
final NoSuchElementException nsee = new NoSuchElementException(appendStats(""Unable to activate object""));
nsee.initCause(e);
throw nsee;
}
}
if (p != null && getTestOnBorrow()) {
boolean validate = false;
Throwable validationThrowable = null;
try {
validate = factory.validateObject(key, p);
} catch (final Throwable t) {
PoolUtils.checkRethrow(t);
validationThrowable = t;
}
if (!validate) {
try {
destroy(key, p, true, DestroyMode.NORMAL);
destroyedByBorrowValidationCount.incrementAndGet();
} catch (final Exception e) {
}
p = null;
if (create) {
final NoSuchElementException nsee = new NoSuchElementException(appendStats(""Unable to validate object""));
nsee.initCause(validationThrowable);
throw nsee;
}
}
}
}
}
} finally {
deregister(key);
}
updateStatsBorrow(p, Duration.ofMillis(System.currentTimeMillis() - waitTimeMillis));
return p.getObject();
}","public T borrowObject(final K key, final long borrowMaxWaitMillis) throws E {
assertOpen();
final AbandonedConfig abandonedconfigVar1 = abandonedconfigLiteral2;
if (abandonedconfigVar1 != null && abandonedconfigVar1.getRemoveAbandonedOnBorrow() && (getNumIdle() < 2) && (getNumActive() > getMaxTotal() - 3)) {
removeAbandoned(abandonedconfigVar1);
}
PooledObject<T> pooledobject<t>Var3 = pooledobject<t>Literal4;
final boolean booleanVar5 = booleanLiteral6;
boolean booleanVar7;
final long longVar8 = longLiteral9;
final ObjectDeque<T> objectdeque<t>Var10 = objectdeque<t>Literal11;
try {
while (pooledobject<t>Var3 == null) {
booleanVar7 = false;
pooledobject<t>Var3 = objectdeque<t>Var10.getIdleObjects().pollFirst();
if (pooledobject<t>Var3 == null) {
pooledobject<t>Var3 = create(key);
if (pooledobject<t>Var3 != null) {
booleanVar7 = true;
}
}
if (booleanVar5) {
if (pooledobject<t>Var3 == null) {
try {
pooledobject<t>Var3 = borrowMaxWaitMillis < 0 ? objectdeque<t>Var10.getIdleObjects().takeFirst() : objectdeque<t>Var10.getIdleObjects().pollFirst(borrowMaxWaitMillis, TimeUnit.MILLISECONDS);
} catch (InterruptedException e) {
throw cast(e);
}
}
if (pooledobject<t>Var3 == null) {
throw new NoSuchElementException(appendStats(""Timeout waiting for idle object, borrowMaxWaitMillis="" + borrowMaxWaitMillis));
}
} else if (pooledobject<t>Var3 == null) {
throw new NoSuchElementException(appendStats(""Pool exhausted""));
}
if (!pooledobject<t>Var3.allocate()) {
pooledobject<t>Var3 = null;
}
if (pooledobject<t>Var3 != null) {
try {
factory.activateObject(key, pooledobject<t>Var3);
} catch (final Exception e) {
try {
destroy(key, pooledobject<t>Var3, true, DestroyMode.NORMAL);
} catch (final Exception e1) {
}
pooledobject<t>Var3 = null;
if (booleanVar7) {
final NoSuchElementException nosuchelementexceptionVar12 = nosuchelementexceptionLiteral13;
nosuchelementexceptionVar12.initCause(e);
throw nosuchelementexceptionVar12;
}
}
if (pooledobject<t>Var3 != null && getTestOnBorrow()) {
boolean booleanVar14 = booleanLiteral15;
Throwable throwableVar16 = pooledobject<t>Literal4;
try {
booleanVar14 = factory.validateObject(key, pooledobject<t>Var3);
} catch (final Throwable t) {
PoolUtils.checkRethrow(t);
throwableVar16 = t;
}
if (!booleanVar14) {
try {
destroy(key, pooledobject<t>Var3, true, DestroyMode.NORMAL);
destroyedByBorrowValidationCount.incrementAndGet();
} catch (final Exception e) {
}
pooledobject<t>Var3 = null;
if (booleanVar7) {
final NoSuchElementException nosuchelementexceptionVar12 = nosuchelementexceptionLiteral17;
nosuchelementexceptionVar12.initCause(throwableVar16);
throw nosuchelementexceptionVar12;
}
}
}
}
}
} finally {
deregister(key);
}
updateStatsBorrow(pooledobject<t>Var3, Duration.ofMillis(System.currentTimeMillis() - longVar8));
return pooledobject<t>Var3.getObject();
}"
19268,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,3133,"} catch (Exception ex2) {
","public synchronized void addObject() throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
Object obj = _factory.makeObject();
try {
assertOpen();
addObjectToPool(obj, false);
} catch (IllegalStateException ex) {
try {
_factory.destroyObject(obj);
} catch (Exception ex2) {
}
throw ex;
}
}","public synchronized void addObject() throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
Object objectVar1 = objectLiteral2;
try {
assertOpen();
addObjectToPool(objectVar1, false);
} catch (IllegalStateException ex) {
try {
_factory.destroyObject(objectVar1);
} catch (Exception ex2) {
}
throw ex;
}
}"
19272,DODGY_CODE,RI_REDUNDANT_INTERFACES,FP,pool,3137,"public SoftReferenceObjectPool() {
_pool = new ArrayList();
_factory = null;
}
public SoftReferenceObjectPool(PoolableObjectFactory factory) {
_pool = new ArrayList();
_factory = factory;
}
public SoftReferenceObjectPool(PoolableObjectFactory factory, int initSize) throws Exception, IllegalArgumentException {
if (factory == null) {
throw new IllegalArgumentException(""factory required to prefill the pool."");
}
_pool = new ArrayList(initSize);
_factory = factory;
PoolUtils.prefill(this, initSize);
}
public synchronized Object borrowObject() throws Exception {
assertOpen();
Object obj = null;
boolean newlyCreated = false;
while(null == obj) {
if(_pool.isEmpty()) {
if(null == _factory) {
throw new NoSuchElementException();
} else {
newlyCreated = true;
obj = _factory.makeObject();
}
} else {
SoftReference ref = (SoftReference)(_pool.remove(_pool.size() - 1));
obj = ref.get();
ref.clear(); 
}
if (null != _factory && null != obj) {
try {
_factory.activateObject(obj);
if (!_factory.validateObject(obj)) {
throw new Exception(""ValidateObject failed"");
}
} catch (Throwable t) {
try {
_factory.destroyObject(obj);
} catch (Throwable t2) {
} finally {
obj = null;
}
if (newlyCreated) {
throw new NoSuchElementException(
""Could not create a validated object, cause: "" +
t.getMessage());
}
}
}
}
_numActive++;
return obj;
}
public synchronized void returnObject(Object obj) throws Exception {
boolean success = !isClosed();
if (_factory != null) {
if(!_factory.validateObject(obj)) {
success = false;
} else {
try {
_factory.passivateObject(obj);
} catch(Exception e) {
success = false;
}
}
}
boolean shouldDestroy = !success;
_numActive--;
if(success) {
_pool.add(new SoftReference(obj, refQueue));
}
notifyAll(); 
if (shouldDestroy && _factory != null) {
try {
_factory.destroyObject(obj);
} catch(Exception e) {
}
}
}
public synchronized void invalidateObject(Object obj) throws Exception {
_numActive--;
if (_factory != null) {
_factory.destroyObject(obj);
}
notifyAll(); 
}
public synchronized void addObject() throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
Object obj = _factory.makeObject();
boolean success = true;
if(!_factory.validateObject(obj)) {
success = false;
} else {
_factory.passivateObject(obj);
}
boolean shouldDestroy = !success;
if(success) {
_pool.add(new SoftReference(obj, refQueue));
notifyAll(); 
}
if(shouldDestroy) {
try {
_factory.destroyObject(obj);
} catch(Exception e) {
}
}
}
public synchronized int getNumIdle() {
pruneClearedReferences();
return _pool.size();
}
public synchronized int getNumActive() {
return _numActive;
}
public synchronized void clear() {
if(null != _factory) {
Iterator iter = _pool.iterator();
while(iter.hasNext()) {
try {
Object obj = ((SoftReference)iter.next()).get();
if(null != obj) {
_factory.destroyObject(obj);
}
} catch(Exception e) {
}
}
}
_pool.clear();
pruneClearedReferences();
}
public void close() throws Exception {
super.close();
clear();
}
public synchronized void setFactory(PoolableObjectFactory factory) throws IllegalStateException {
assertOpen();
if(0 < getNumActive()) {
throw new IllegalStateException(""Objects are already active"");
} else {
clear();
_factory = factory;
}
}
private void pruneClearedReferences() {
Reference ref;
while ((ref = refQueue.poll()) != null) {
try {
_pool.remove(ref);
} catch (UnsupportedOperationException uoe) {
}
}
}
private List _pool = null;
private PoolableObjectFactory _factory = null;
private final ReferenceQueue refQueue = new ReferenceQueue();
private int _numActive = 0;
","public synchronized void returnObject(Object obj) throws Exception {
boolean success = !isClosed();
if (_factory != null) {
if (!_factory.validateObject(obj)) {
success = false;
} else {
try {
_factory.passivateObject(obj);
} catch (Exception e) {
success = false;
}
}
}
boolean shouldDestroy = !success;
_numActive--;
if (success) {
_pool.add(new SoftReference(obj, refQueue));
}
notifyAll();
if (shouldDestroy && _factory != null) {
try {
_factory.destroyObject(obj);
} catch (Exception e) {
}
}
}","public synchronized void returnObject(Object obj) throws Exception {
boolean booleanVar1 = booleanLiteral2;
if (_factory != null) {
if (!_factory.validateObject(obj)) {
booleanVar1 = false;
} else {
try {
_factory.passivateObject(obj);
} catch (Exception e) {
booleanVar1 = false;
}
}
}
boolean booleanVar3 = booleanLiteral4;
_numActive--;
if (booleanVar1) {
_pool.add(new SoftReference(obj, refQueue));
}
notifyAll();
if (booleanVar3 && _factory != null) {
try {
_factory.destroyObject(obj);
} catch (Exception e) {
}
}
}"
19406,BAD_PRACTICE,DE_MIGHT_IGNORE,FP,pool,3271,"} catch (Exception e) {
","@Override
public void close() {
try {
pool.close();
} catch (Exception e) {
}
}","@Override
public void close() {
try {
pool.close();
} catch (Exception e) {
}
}"
19420,DODGY_CODE,UCF_USELESS_CONTROL_FLOW,FP,pool,3285,"if (!underTest.endEvictionTest(idleObjects)) {
","@Override
public void evict() throws Exception {
assertOpen();
if (getNumIdle() == 0) {
return;
}
PooledObject<T> underTest = null;
EvictionPolicy<T> evictionPolicy = getEvictionPolicy();
synchronized (evictionLock) {
EvictionConfig evictionConfig = new EvictionConfig(getMinEvictableIdleTimeMillis(), getSoftMinEvictableIdleTimeMillis(), getMinIdlePerKey());
boolean testWhileIdle = getTestWhileIdle();
for (int i = 0, m = getNumTests(); i < m; i++) {
if (evictionIterator == null || !evictionIterator.hasNext()) {
if (evictionKeyIterator == null || !evictionKeyIterator.hasNext()) {
List<K> keyCopy = new ArrayList<K>();
Lock readLock = keyLock.readLock();
readLock.lock();
try {
keyCopy.addAll(poolKeyList);
} finally {
readLock.unlock();
}
evictionKeyIterator = keyCopy.iterator();
}
while (evictionKeyIterator.hasNext()) {
evictionKey = evictionKeyIterator.next();
ObjectDeque<T> objectDeque = poolMap.get(evictionKey);
if (objectDeque == null) {
continue;
}
final Deque<PooledObject<T>> idleObjects = objectDeque.getIdleObjects();
evictionIterator = new EvictionIterator(idleObjects);
if (evictionIterator.hasNext()) {
break;
}
evictionIterator = null;
}
}
if (evictionIterator == null) {
return;
}
final Deque<PooledObject<T>> idleObjects;
try {
underTest = evictionIterator.next();
idleObjects = evictionIterator.getIdleObjects();
} catch (NoSuchElementException nsee) {
i--;
evictionIterator = null;
continue;
}
if (!underTest.startEvictionTest()) {
i--;
continue;
}
boolean evict;
try {
evict = evictionPolicy.evict(evictionConfig, underTest, poolMap.get(evictionKey).getIdleObjects().size());
} catch (Throwable t) {
PoolUtils.checkRethrow(t);
swallowException(new Exception(t));
evict = false;
}
if (evict) {
destroy(evictionKey, underTest, true);
destroyedByEvictorCount.incrementAndGet();
} else {
if (testWhileIdle) {
boolean active = false;
try {
factory.activateObject(evictionKey, underTest);
active = true;
} catch (Exception e) {
destroy(evictionKey, underTest, true);
destroyedByEvictorCount.incrementAndGet();
}
if (active) {
if (!factory.validateObject(evictionKey, underTest)) {
destroy(evictionKey, underTest, true);
destroyedByEvictorCount.incrementAndGet();
} else {
try {
factory.passivateObject(evictionKey, underTest);
} catch (Exception e) {
destroy(evictionKey, underTest, true);
destroyedByEvictorCount.incrementAndGet();
}
}
}
}
if (!underTest.endEvictionTest(idleObjects)) {
}
}
}
}
}","@Override
public void evict() throws Exception {
assertOpen();
if (getNumIdle() == 0) {
return;
}
PooledObject<T> pooledobject<t>Var1 = pooledobject<t>Literal2;
EvictionPolicy<T> evictionpolicy<t>Var3 = evictionpolicy<t>Literal4;
synchronized (evictionLock) {
EvictionConfig evictionconfigVar5 = evictionconfigLiteral6;
boolean booleanVar7 = booleanLiteral8;
for (int intVar24 = intLiteral25, intVar26 = intLiteral27; intVar9 < intLiteral1; intVar9++) {
if (evictionIterator == null || !evictionIterator.hasNext()) {
if (evictionKeyIterator == null || !evictionKeyIterator.hasNext()) {
List<K> list<k>Var13 = list<k>Literal14;
Lock lockVar15 = lockLiteral16;
lockVar15.lock();
try {
list<k>Var13.addAll(poolKeyList);
} finally {
lockVar15.unlock();
}
evictionKeyIterator = list<k>Var13.iterator();
}
while (evictionKeyIterator.hasNext()) {
evictionKey = evictionKeyIterator.next();
ObjectDeque<T> objectdeque<t>Var17 = objectdeque<t>Literal18;
if (objectdeque<t>Var17 == null) {
continue;
}
final Deque<PooledObject<T>> deque<pooledobject<t>>Var19 = deque<pooledobject<t>>Literal20;
evictionIterator = new EvictionIterator(deque<pooledobject<t>>Var19);
if (evictionIterator.hasNext()) {
break;
}
evictionIterator = null;
}
}
if (evictionIterator == null) {
return;
}
final Deque<PooledObject<T>> deque<pooledobject<t>>Var19;
try {
pooledobject<t>Var1 = evictionIterator.next();
deque<pooledobject<t>>Var19 = evictionIterator.getIdleObjects();
} catch (NoSuchElementException nsee) {
intVar9--;
evictionIterator = null;
continue;
}
if (!pooledobject<t>Var1.startEvictionTest()) {
intVar9--;
continue;
}
boolean booleanVar21;
try {
booleanVar21 = evictionpolicy<t>Var3.evict(evictionconfigVar5, pooledobject<t>Var1, poolMap.get(evictionKey).getIdleObjects().size());
} catch (Throwable t) {
PoolUtils.checkRethrow(t);
swallowException(new Exception(t));
booleanVar21 = false;
}
if (booleanVar21) {
destroy(evictionKey, pooledobject<t>Var1, true);
destroyedByEvictorCount.incrementAndGet();
} else {
if (booleanVar7) {
boolean booleanVar22 = booleanLiteral23;
try {
factory.activateObject(evictionKey, pooledobject<t>Var1);
booleanVar22 = true;
} catch (Exception e) {
destroy(evictionKey, pooledobject<t>Var1, true);
destroyedByEvictorCount.incrementAndGet();
}
if (booleanVar22) {
if (!factory.validateObject(evictionKey, pooledobject<t>Var1)) {
destroy(evictionKey, pooledobject<t>Var1, true);
destroyedByEvictorCount.incrementAndGet();
} else {
try {
factory.passivateObject(evictionKey, pooledobject<t>Var1);
} catch (Exception e) {
destroy(evictionKey, pooledobject<t>Var1, true);
destroyedByEvictorCount.incrementAndGet();
}
}
}
}
if (!pooledobject<t>Var1.endEvictionTest(deque<pooledobject<t>>Var19)) {
}
}
}
}
}"
