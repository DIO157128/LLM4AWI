source,target
"@Deprecated
public static final String[] stringArrayVar1 = stringArrayLiteral2;",0
"@Deprecated
public static final String[] stringArrayVar1 = stringArrayLiteral2;",1
"@Deprecated
public static final String[] stringArrayVar1 = stringArrayLiteral2;",0
"@Deprecated
public static final String[] stringArrayVar1 = stringArrayLiteral2;",1
"public JavaClass parse() throws IOException, ClassFormatException {
ZipFile zipfileVar1 = zipfileLiteral2;
try {
if (fileOwned) {
if (is_zip) {
zipfileVar1 = new ZipFile(zip_file);
ZipEntry zipentryVar3 = zipentryLiteral4;
if (zipentryVar3 == null) {
throw new IOException(""File "" + file_name + "" not found"");
}
dataInputStream = new DataInputStream(new BufferedInputStream(zipfileVar1.getInputStream(zipentryVar3), BUFSIZE));
} else {
dataInputStream = new DataInputStream(new BufferedInputStream(new FileInputStream(file_name), BUFSIZE));
}
}
readID();
readVersion();
readConstantPool();
readClassInfo();
readInterfaces();
readFields();
readMethods();
readAttributes();
// System.err.println(""WARNING: "" + u[i]);
// System.err.println(""WARNING: Trailing garbage at end of "" + file_name);
// System.err.println(bytes + "" extra bytes: "" + Utility.toHexString(buf));
} finally {
if (fileOwned) {
try {
if (dataInputStream != null) {
dataInputStream.close();
}
if (zipfileVar1 != null) {
zipfileVar1.close();
}
} catch (IOException ioe) {
}
}
}
return new JavaClass(class_name_index, superclass_name_index, file_name, major, minor, access_flags, constant_pool, interfaces, fields, methods, attributes, is_zip ? JavaClass.ZIP : JavaClass.FILE);
}",0
"public ConstantPool(final Constant[] constant_pool) {
this.constant_pool = constant_pool;
}",0
"public final LocalVariable[] getLocalVariableTypeTable() {
return local_variable_type_table;
}",0
"public final void setLocalVariableTable(final LocalVariable[] local_variable_table) {
this.local_variable_type_table = local_variable_table;
}",0
"public final void setParameterAnnotationTable(final ParameterAnnotationEntry[] parameter_annotation_table) {
this.parameter_annotation_table = parameter_annotation_table;
}",0
"@Deprecated
public static final String[] stringArrayVar1 = stringArrayLiteral2;",0
"public void setBootstrapArguments(int[] bootstrap_arguments) {
this.bootstrap_arguments = bootstrap_arguments;
}",0
"@Override
public Object getConstantValue(ConstantPool cp) {
return new Float(bytes);
}",0
"public AnnotationEntry[] getAnnotationEntries() {
if (annotationEntries == null) {
annotationEntries = AnnotationEntry.createAnnotationEntries(getAttributes());
}
return annotationEntries;
}",0
"public ParameterAnnotationEntry[] getParameterAnnotationEntries() {
if (parameterAnnotationEntries == null) {
parameterAnnotationEntries = ParameterAnnotationEntry.createParameterAnnotationEntries(getAttributes());
}
return parameterAnnotationEntries;
}",0
"private static void matchIdent(MyByteArrayInputStream in, StringBuilder buf) {
int intVar1;
if ((intVar1 = in.read()) == -1) {
throw new RuntimeException(""Illegal signature: "" + in.getData() + "" no ident, reaching EOF"");
}
// System.out.println(""return from ident:"" + (char)ch);
if (!identStart(intVar1)) {
StringBuilder stringbuilderVar2 = stringbuilderLiteral3;
int intVar4 = intLiteral5;
while (Character.isJavaIdentifierPart((char) intVar1)) {
stringbuilderVar2.append((char) intVar1);
intVar4++;
intVar1 = in.read();
}
if (intVar1 == ':') {
in.skip(""Ljava/lang/Object"".length());
buf.append(stringbuilderVar2);
intVar1 = in.read();
in.unread();
// System.out.println(""so far:"" + buf2 + "":next:"" +(char)ch);
} else {
for (int intVar8 = intLiteral9; intVar6 < intLiteral1; intVar6++) {
in.unread();
}
}
return;
}
StringBuilder stringbuilderVar2 = stringbuilderLiteral3;
intVar1 = in.read();
do {
stringbuilderVar2.append((char) intVar1);
intVar1 = in.read();
// System.out.println(""within ident:""+ (char)ch);
} while ((intVar1 != -1) && (Character.isJavaIdentifierPart((char) intVar1) || (intVar1 == '/')));
buf.append(stringbuilderVar2.toString().replace('/', '.'));
// System.out.println(""regular return ident:""+ (char)ch + "":"" + buf2);
if (intVar1 != -1) {
in.unread();
}
}",0
"public Object getValue(ConstantPoolGen cpg) {
org.apache.commons.bcel6.classfile.Constant org.apache.commons.bcel6.classfile.constantVar1 = org.apache.commons.bcel6.classfile.constantLiteral2;
switch(org.apache.commons.bcel6.classfile.constantVar1.getTag()) {
case org.apache.commons.bcel6.Const.CONSTANT_String:
int intVar3 = intLiteral4;
org.apache.commons.bcel6.classfile.constantVar1 = cpg.getConstantPool().getConstant(intVar3);
return ((org.apache.commons.bcel6.classfile.ConstantUtf8) org.apache.commons.bcel6.classfile.constantVar1).getBytes();
case org.apache.commons.bcel6.Const.CONSTANT_Float:
return new Float(((org.apache.commons.bcel6.classfile.ConstantFloat) org.apache.commons.bcel6.classfile.constantVar1).getBytes());
case org.apache.commons.bcel6.Const.CONSTANT_Integer:
return Integer.valueOf(((org.apache.commons.bcel6.classfile.ConstantInteger) org.apache.commons.bcel6.classfile.constantVar1).getBytes());
case org.apache.commons.bcel6.Const.CONSTANT_Class:
int intVar5 = intLiteral6;
org.apache.commons.bcel6.classfile.constantVar1 = cpg.getConstantPool().getConstant(intVar5);
return new ObjectType(((org.apache.commons.bcel6.classfile.ConstantUtf8) org.apache.commons.bcel6.classfile.constantVar1).getBytes());
default:
// Never reached
throw new RuntimeException(""Unknown or invalid constant type at "" + super.getIndex());
}
}",0
"private void updateBranchTargets() {
for (BranchInstruction branchinstructionVar1 : branches) {
BranchHandle branchhandleVar2 = branchhandleLiteral3;
int intVar4 = intLiteral5;
String stringVar6 = stringLiteral7;
int intVar8 = intLiteral9;
_out.println(""    "" + stringVar6 + "".setTarget(ih_"" + intVar8 + "");"");
if (branchinstructionVar1 instanceof Select) {
InstructionHandle[] instructionhandleArrayVar10 = instructionhandleArrayLiteral11;
for (int intVar14 = intLiteral15; intVar12 < intLiteral1; intVar12++) {
intVar8 = instructionhandleArrayVar10[intVar12].getPosition();
_out.println(""    "" + stringVar6 + "".setTarget("" + intVar12 + "", ih_"" + intVar8 + "");"");
}
}
}
}",0
"private void jbInit() throws Exception {
contentPane = (JPanel) this.getContentPane();
contentPane.setLayout(cardLayout1);
this.setJMenuBar(jMenuBar1);
this.setSize(new Dimension(708, 451));
this.setTitle(""JustIce"");
jPanel1.setMinimumSize(new Dimension(100, 100));
jPanel1.setPreferredSize(new Dimension(100, 100));
jPanel1.setLayout(gridLayout1);
jSplitPane2.setOrientation(JSplitPane.VERTICAL_SPLIT);
jPanel2.setLayout(gridLayout2);
jPanel3.setMinimumSize(new Dimension(200, 100));
jPanel3.setPreferredSize(new Dimension(400, 400));
jPanel3.setLayout(gridLayout4);
messagesPanel.setMinimumSize(new Dimension(100, 100));
messagesPanel.setLayout(gridLayout3);
jPanel2.setMinimumSize(new Dimension(200, 100));
jMenu1.setText(""File"");
jScrollPane1.getViewport().setBackground(Color.red);
messagesScrollPane.getViewport().setBackground(Color.red);
messagesScrollPane.setPreferredSize(new Dimension(10, 10));
classNamesJList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
@Override
public void valueChanged(ListSelectionEvent e) {
classNamesJList_valueChanged(e);
}
});
classNamesJList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
jScrollPane3.setBorder(BorderFactory.createLineBorder(Color.black));
jScrollPane3.setPreferredSize(new Dimension(100, 100));
gridLayout4.setRows(4);
gridLayout4.setColumns(1);
gridLayout4.setHgap(1);
jScrollPane4.setBorder(BorderFactory.createLineBorder(Color.black));
jScrollPane4.setPreferredSize(new Dimension(100, 100));
pass1TextPane.setBorder(BorderFactory.createRaisedBevelBorder());
pass1TextPane.setToolTipText("""");
pass1TextPane.setEditable(false);
pass2TextPane.setBorder(BorderFactory.createRaisedBevelBorder());
pass2TextPane.setEditable(false);
messagesTextPane.setBorder(BorderFactory.createRaisedBevelBorder());
messagesTextPane.setEditable(false);
newFileMenuItem.setText(""New..."");
newFileMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(78, InputEvent.CTRL_MASK, true));
newFileMenuItem.addActionListener(new java.awt.event.ActionListener() {
@Override
public void actionPerformed(ActionEvent e) {
newFileMenuItem_actionPerformed(e);
}
});
pass3aTextPane.setEditable(false);
pass3bTextPane.setEditable(false);
pass3aJList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
@Override
public void valueChanged(ListSelectionEvent e) {
pass3aJList_valueChanged(e);
}
});
pass3bJList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
@Override
public void valueChanged(ListSelectionEvent e) {
pass3bJList_valueChanged(e);
}
});
jMenu2.setText(""Help"");
whatisMenuItem.setText(""What is..."");
whatisMenuItem.addActionListener(new java.awt.event.ActionListener() {
@Override
public void actionPerformed(ActionEvent e) {
whatisMenuItem_actionPerformed(e);
}
});
aboutMenuItem.setText(""About"");
aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
@Override
public void actionPerformed(ActionEvent e) {
aboutMenuItem_actionPerformed(e);
}
});
jSplitPane2.add(messagesPanel, JSplitPane.BOTTOM);
messagesPanel.add(messagesScrollPane, null);
messagesScrollPane.getViewport().add(messagesTextPane, null);
jSplitPane2.add(jPanel3, JSplitPane.TOP);
jPanel3.add(jScrollPane3, null);
jScrollPane3.getViewport().add(pass1TextPane, null);
jPanel3.add(jScrollPane4, null);
jPanel3.add(jSplitPane3, null);
jSplitPane3.add(jScrollPane2, JSplitPane.LEFT);
jScrollPane2.getViewport().add(pass3aJList, null);
jSplitPane3.add(jScrollPane5, JSplitPane.RIGHT);
jScrollPane5.getViewport().add(pass3aTextPane, null);
jPanel3.add(jSplitPane4, null);
jSplitPane4.add(jScrollPane6, JSplitPane.LEFT);
jScrollPane6.getViewport().add(pass3bJList, null);
jSplitPane4.add(jScrollPane7, JSplitPane.RIGHT);
jScrollPane7.getViewport().add(pass3bTextPane, null);
jScrollPane4.getViewport().add(pass2TextPane, null);
jSplitPane1.add(jPanel2, JSplitPane.TOP);
jPanel2.add(jScrollPane1, null);
jSplitPane1.add(jPanel1, JSplitPane.BOTTOM);
jPanel1.add(jSplitPane2, null);
jScrollPane1.getViewport().add(classNamesJList, null);
jMenuBar1.add(jMenu1);
jMenuBar1.add(jMenu2);
contentPane.add(jSplitPane1, ""jSplitPane1"");
jMenu1.add(newFileMenuItem);
jMenu2.add(whatisMenuItem);
jMenu2.add(aboutMenuItem);
jSplitPane2.setDividerLocation(300);
jSplitPane3.setDividerLocation(150);
jSplitPane4.setDividerLocation(150);
}",0
"public LocalVariablesInfo getLocalVariablesInfo(int method_nr) {
if (this.verify() != VerificationResult.VR_OK) {
return null;
}
if (method_nr < 0 || method_nr >= localVariablesInfos.length) {
throw new AssertionViolatedException(""Method number out of range."");
}
return localVariablesInfos[method_nr];
}",0
"// TODO: mutable public array!!
String[] stringArrayVar1 = stringArrayLiteral2;",0
int[] intArrayVar1 = intArrayLiteral2;,0
"public AnnotationEntry[] getAnnotationEntries() {
return annotationTable;
}",0
"public final BootstrapMethod[] getBootstrapMethods() {
return bootstrapMethods;
}",0
"public byte[] getCode() {
return code;
}",0
"public Constant[] getConstantPool() {
return constantPool;
}",0
"public String constantToString(Constant c) throws ClassFormatException {
String stringVar1;
int intVar2;
final byte byteVar3 = byteLiteral4;
switch(byteVar3) {
case Const.CONSTANT_Class:
intVar2 = ((ConstantClass) c).getNameIndex();
c = getConstant(intVar2, Const.CONSTANT_Utf8);
stringVar1 = Utility.compactClassName(((ConstantUtf8) c).getBytes(), false);
break;
case Const.CONSTANT_String:
intVar2 = ((ConstantString) c).getStringIndex();
c = getConstant(intVar2, Const.CONSTANT_Utf8);
stringVar1 = ""\"""" + escape(((ConstantUtf8) c).getBytes()) + ""\"""";
break;
case Const.CONSTANT_Utf8:
stringVar1 = ((ConstantUtf8) c).getBytes();
break;
case Const.CONSTANT_Double:
stringVar1 = String.valueOf(((ConstantDouble) c).getBytes());
break;
case Const.CONSTANT_Float:
stringVar1 = String.valueOf(((ConstantFloat) c).getBytes());
break;
case Const.CONSTANT_Long:
stringVar1 = String.valueOf(((ConstantLong) c).getBytes());
break;
case Const.CONSTANT_Integer:
stringVar1 = String.valueOf(((ConstantInteger) c).getBytes());
break;
case Const.CONSTANT_NameAndType:
stringVar1 = constantToString(((ConstantNameAndType) c).getNameIndex(), Const.CONSTANT_Utf8) + "" "" + constantToString(((ConstantNameAndType) c).getSignatureIndex(), Const.CONSTANT_Utf8);
break;
case Const.CONSTANT_InterfaceMethodref:
case Const.CONSTANT_Methodref:
case Const.CONSTANT_Fieldref:
stringVar1 = constantToString(((ConstantCP) c).getClassIndex(), Const.CONSTANT_Class) + ""."" + constantToString(((ConstantCP) c).getNameAndTypeIndex(), Const.CONSTANT_NameAndType);
break;
case Const.CONSTANT_MethodHandle:
final ConstantMethodHandle constantmethodhandleVar5 = constantmethodhandleLiteral6;
stringVar1 = Const.getMethodHandleName(constantmethodhandleVar5.getReferenceKind()) + "" "" + constantToString(constantmethodhandleVar5.getReferenceIndex(), getConstant(constantmethodhandleVar5.getReferenceIndex()).getTag());
break;
case Const.CONSTANT_MethodType:
final ConstantMethodType constantmethodtypeVar7 = constantmethodtypeLiteral8;
stringVar1 = constantToString(constantmethodtypeVar7.getDescriptorIndex(), Const.CONSTANT_Utf8);
break;
case Const.CONSTANT_InvokeDynamic:
final ConstantInvokeDynamic constantinvokedynamicVar9 = constantinvokedynamicLiteral10;
stringVar1 = constantinvokedynamicVar9.getBootstrapMethodAttrIndex() + "":"" + constantToString(constantinvokedynamicVar9.getNameAndTypeIndex(), Const.CONSTANT_NameAndType);
break;
case Const.CONSTANT_Module:
intVar2 = ((ConstantModule) c).getNameIndex();
c = getConstant(intVar2, Const.CONSTANT_Utf8);
stringVar1 = Utility.compactClassName(((ConstantUtf8) c).getBytes(), false);
break;
case Const.CONSTANT_Package:
intVar2 = ((ConstantPackage) c).getNameIndex();
c = getConstant(intVar2, Const.CONSTANT_Utf8);
stringVar1 = Utility.compactClassName(((ConstantUtf8) c).getBytes(), false);
break;
default:
// Never reached
throw new IllegalArgumentException(""Unknown constant type "" + byteVar3);
}
return stringVar1;
}",0
"public String constantToString(Constant c) throws ClassFormatException {
String stringVar1;
int intVar2;
final byte byteVar3 = byteLiteral4;
switch(byteVar3) {
case Const.CONSTANT_Class:
intVar2 = ((ConstantClass) c).getNameIndex();
c = getConstant(intVar2, Const.CONSTANT_Utf8);
stringVar1 = Utility.compactClassName(((ConstantUtf8) c).getBytes(), false);
break;
case Const.CONSTANT_String:
intVar2 = ((ConstantString) c).getStringIndex();
c = getConstant(intVar2, Const.CONSTANT_Utf8);
stringVar1 = ""\"""" + escape(((ConstantUtf8) c).getBytes()) + ""\"""";
break;
case Const.CONSTANT_Utf8:
stringVar1 = ((ConstantUtf8) c).getBytes();
break;
case Const.CONSTANT_Double:
stringVar1 = String.valueOf(((ConstantDouble) c).getBytes());
break;
case Const.CONSTANT_Float:
stringVar1 = String.valueOf(((ConstantFloat) c).getBytes());
break;
case Const.CONSTANT_Long:
stringVar1 = String.valueOf(((ConstantLong) c).getBytes());
break;
case Const.CONSTANT_Integer:
stringVar1 = String.valueOf(((ConstantInteger) c).getBytes());
break;
case Const.CONSTANT_NameAndType:
stringVar1 = constantToString(((ConstantNameAndType) c).getNameIndex(), Const.CONSTANT_Utf8) + "" "" + constantToString(((ConstantNameAndType) c).getSignatureIndex(), Const.CONSTANT_Utf8);
break;
case Const.CONSTANT_InterfaceMethodref:
case Const.CONSTANT_Methodref:
case Const.CONSTANT_Fieldref:
stringVar1 = constantToString(((ConstantCP) c).getClassIndex(), Const.CONSTANT_Class) + ""."" + constantToString(((ConstantCP) c).getNameAndTypeIndex(), Const.CONSTANT_NameAndType);
break;
case Const.CONSTANT_MethodHandle:
final ConstantMethodHandle constantmethodhandleVar5 = constantmethodhandleLiteral6;
stringVar1 = Const.getMethodHandleName(constantmethodhandleVar5.getReferenceKind()) + "" "" + constantToString(constantmethodhandleVar5.getReferenceIndex(), getConstant(constantmethodhandleVar5.getReferenceIndex()).getTag());
break;
case Const.CONSTANT_MethodType:
final ConstantMethodType constantmethodtypeVar7 = constantmethodtypeLiteral8;
stringVar1 = constantToString(constantmethodtypeVar7.getDescriptorIndex(), Const.CONSTANT_Utf8);
break;
case Const.CONSTANT_InvokeDynamic:
final ConstantInvokeDynamic constantinvokedynamicVar9 = constantinvokedynamicLiteral10;
stringVar1 = constantinvokedynamicVar9.getBootstrapMethodAttrIndex() + "":"" + constantToString(constantinvokedynamicVar9.getNameAndTypeIndex(), Const.CONSTANT_NameAndType);
break;
case Const.CONSTANT_Module:
intVar2 = ((ConstantModule) c).getNameIndex();
c = getConstant(intVar2, Const.CONSTANT_Utf8);
stringVar1 = Utility.compactClassName(((ConstantUtf8) c).getBytes(), false);
break;
case Const.CONSTANT_Package:
intVar2 = ((ConstantPackage) c).getNameIndex();
c = getConstant(intVar2, Const.CONSTANT_Utf8);
stringVar1 = Utility.compactClassName(((ConstantUtf8) c).getBytes(), false);
break;
default:
// Never reached
throw new IllegalArgumentException(""Unknown constant type "" + byteVar3);
}
return stringVar1;
}",0
"public ConstantUtf8(final String value) {
super(Const.CONSTANT_Utf8);
if (value == null) {
throw new IllegalArgumentException(""Value must not be null."");
}
this.value = value;
created++;
}",0
"public AnnotationEntry[] getAnnotationEntries() {
if (annotations == null) {
annotations = AnnotationEntry.createAnnotationEntries(getAttributes());
}
return annotations;
}",0
"public String[] getInterfaceNames() {
return interfaceNames;
}",0
"public final void setLocalVariableTable(final LocalVariable[] local_variable_table) {
this.localVariableTypeTable = local_variable_table;
}",0
"public StackMap(final int name_index, final int length, final StackMapEntry[] map, final ConstantPool constant_pool) {
super(Const.ATTR_STACK_MAP, name_index, length, constant_pool);
this.map = map;
}",0
"public ArrayType(final Type type, final int dimensions) {
super(Const.T_ARRAY, ""<dummy>"");
if ((dimensions < 1) || (dimensions > Const.MAX_BYTE)) {
throw new ClassGenException(""Invalid number of dimensions: "" + dimensions);
}
switch(type.getType()) {
case Const.T_ARRAY:
final ArrayType arraytypeVar1 = arraytypeLiteral2;
this.dimensions = dimensions + arraytypeVar1.dimensions;
basicType = arraytypeVar1.basicType;
break;
case Const.T_VOID:
throw new ClassGenException(""Invalid type: void[]"");
default:
// Basic type or reference
this.dimensions = dimensions;
basicType = type;
break;
}
final StringBuilder stringbuilderVar3 = stringbuilderLiteral4;
for (int intVar7 = intLiteral8; intVar5 < intLiteral1; intVar5++) {
stringbuilderVar3.append('[');
}
stringbuilderVar3.append(basicType.getSignature());
super.setSignature(stringbuilderVar3.toString());
}",0
"public int addConstant(final Constant c, final ConstantPoolGen cp) {
final Constant[] constantArrayVar1 = constantArrayLiteral2;
switch(c.getTag()) {
case Const.CONSTANT_String:
{
final ConstantString constantstringVar3 = constantstringLiteral4;
final ConstantUtf8 constantutf8Var5 = constantutf8Literal6;
return addString(constantutf8Var5.getBytes());
}
case Const.CONSTANT_Class:
{
final ConstantClass constantstringVar3 = constantclassLiteral7;
final ConstantUtf8 constantutf8Var5 = constantutf8Literal8;
return addClass(constantutf8Var5.getBytes());
}
case Const.CONSTANT_NameAndType:
{
final ConstantNameAndType constantnameandtypeVar9 = constantnameandtypeLiteral10;
final ConstantUtf8 constantutf8Var5 = constantutf8Literal11;
final ConstantUtf8 constantutf8Var12 = constantutf8Literal13;
return addNameAndType(constantutf8Var5.getBytes(), constantutf8Var12.getBytes());
}
case Const.CONSTANT_Utf8:
return addUtf8(((ConstantUtf8) c).getBytes());
case Const.CONSTANT_Double:
return addDouble(((ConstantDouble) c).getBytes());
case Const.CONSTANT_Float:
return addFloat(((ConstantFloat) c).getBytes());
case Const.CONSTANT_Long:
return addLong(((ConstantLong) c).getBytes());
case Const.CONSTANT_Integer:
return addInteger(((ConstantInteger) c).getBytes());
case Const.CONSTANT_InterfaceMethodref:
case Const.CONSTANT_Methodref:
case Const.CONSTANT_Fieldref:
{
final ConstantCP constantcpVar14 = constantcpLiteral15;
final ConstantClass constantclassVar16 = constantclassLiteral17;
final ConstantNameAndType constantnameandtypeVar9 = constantnameandtypeLiteral18;
ConstantUtf8 constantutf8Var5 = constantutf8Literal19;
final String stringVar20 = stringLiteral21;
constantutf8Var5 = (ConstantUtf8) constantArrayVar1[constantnameandtypeVar9.getNameIndex()];
final String stringVar22 = stringLiteral23;
constantutf8Var5 = (ConstantUtf8) constantArrayVar1[constantnameandtypeVar9.getSignatureIndex()];
final String stringVar24 = stringLiteral23;
switch(c.getTag()) {
case Const.CONSTANT_InterfaceMethodref:
return addInterfaceMethodref(stringVar20, stringVar22, stringVar24);
case Const.CONSTANT_Methodref:
return addMethodref(stringVar20, stringVar22, stringVar24);
case Const.CONSTANT_Fieldref:
return addFieldref(stringVar20, stringVar22, stringVar24);
default:
// Never reached
throw new IllegalArgumentException(""Unknown constant type "" + c);
}
}
default:
// Never reached
throw new IllegalArgumentException(""Unknown constant type "" + c);
}
}",0
"public int addConstant(final Constant c, final ConstantPoolGen cp) {
final Constant[] constantArrayVar1 = constantArrayLiteral2;
switch(c.getTag()) {
case Const.CONSTANT_String:
{
final ConstantString constantstringVar3 = constantstringLiteral4;
final ConstantUtf8 constantutf8Var5 = constantutf8Literal6;
return addString(constantutf8Var5.getBytes());
}
case Const.CONSTANT_Class:
{
final ConstantClass constantstringVar3 = constantclassLiteral7;
final ConstantUtf8 constantutf8Var5 = constantutf8Literal8;
return addClass(constantutf8Var5.getBytes());
}
case Const.CONSTANT_NameAndType:
{
final ConstantNameAndType constantnameandtypeVar9 = constantnameandtypeLiteral10;
final ConstantUtf8 constantutf8Var5 = constantutf8Literal11;
final ConstantUtf8 constantutf8Var12 = constantutf8Literal13;
return addNameAndType(constantutf8Var5.getBytes(), constantutf8Var12.getBytes());
}
case Const.CONSTANT_Utf8:
return addUtf8(((ConstantUtf8) c).getBytes());
case Const.CONSTANT_Double:
return addDouble(((ConstantDouble) c).getBytes());
case Const.CONSTANT_Float:
return addFloat(((ConstantFloat) c).getBytes());
case Const.CONSTANT_Long:
return addLong(((ConstantLong) c).getBytes());
case Const.CONSTANT_Integer:
return addInteger(((ConstantInteger) c).getBytes());
case Const.CONSTANT_InterfaceMethodref:
case Const.CONSTANT_Methodref:
case Const.CONSTANT_Fieldref:
{
final ConstantCP constantcpVar14 = constantcpLiteral15;
final ConstantClass constantclassVar16 = constantclassLiteral17;
final ConstantNameAndType constantnameandtypeVar9 = constantnameandtypeLiteral18;
ConstantUtf8 constantutf8Var5 = constantutf8Literal19;
final String stringVar20 = stringLiteral21;
constantutf8Var5 = (ConstantUtf8) constantArrayVar1[constantnameandtypeVar9.getNameIndex()];
final String stringVar22 = stringLiteral23;
constantutf8Var5 = (ConstantUtf8) constantArrayVar1[constantnameandtypeVar9.getSignatureIndex()];
final String stringVar24 = stringLiteral23;
switch(c.getTag()) {
case Const.CONSTANT_InterfaceMethodref:
return addInterfaceMethodref(stringVar20, stringVar22, stringVar24);
case Const.CONSTANT_Methodref:
return addMethodref(stringVar20, stringVar22, stringVar24);
case Const.CONSTANT_Fieldref:
return addFieldref(stringVar20, stringVar22, stringVar24);
default:
// Never reached
throw new IllegalArgumentException(""Unknown constant type "" + c);
}
}
default:
// Never reached
throw new IllegalArgumentException(""Unknown constant type "" + c);
}
}",0
"public static ElementValueGen copy(final ElementValue value, final ConstantPoolGen cpool, final boolean copyPoolEntries) {
switch(value.getElementValueType()) {
case 'B':
case 'C':
case 'D':
case 'F':
case 'I':
case 'J':
case 'S':
case 'Z':
case 's':
return new SimpleElementValueGen((SimpleElementValue) value, cpool, copyPoolEntries);
case 'e':
return new EnumElementValueGen((EnumElementValue) value, cpool, copyPoolEntries);
case '@':
return new AnnotationElementValueGen((AnnotationElementValue) value, cpool, copyPoolEntries);
case '[':
return new ArrayElementValueGen((ArrayElementValue) value, cpool, copyPoolEntries);
case 'c':
return new ClassElementValueGen((ClassElementValue) value, cpool, copyPoolEntries);
default:
throw new UnsupportedOperationException(""Not implemented yet! ("" + value.getElementValueType() + "")"");
}
}",0
"AttributeHTML(final String dir, final String class_name, final ConstantPool constant_pool, final ConstantHTML constant_html) throws IOException {
this.class_name = class_name;
this.constant_pool = constant_pool;
this.constant_html = constant_html;
file = new PrintWriter(new FileOutputStream(dir + class_name + ""_attributes.html""));
file.println(""<HTML><BODY BGCOLOR=\""#C0C0C0\""><TABLE BORDER=0>"");
}",0
"@Override
public void visitAllocationInstruction(final AllocationInstruction i) {
Type typeVar1;
if (i instanceof CPInstruction) {
typeVar1 = ((CPInstruction) i).getType(_cp);
} else {
typeVar1 = ((NEWARRAY) i).getType();
}
final short shortVar2 = shortLiteral3;
int intVar4 = intLiteral5;
switch(shortVar2) {
case Const.NEW:
_out.println(""il.append(_factory.createNew(\"""" + ((ObjectType) typeVar1).getClassName() + ""\""));"");
break;
case Const.MULTIANEWARRAY:
intVar4 = ((MULTIANEWARRAY) i).getDimensions();
case Const.ANEWARRAY:
case Const.NEWARRAY:
if (typeVar1 instanceof ArrayType) {
typeVar1 = ((ArrayType) typeVar1).getBasicType();
}
_out.println(""il.append(_factory.createNewArray("" + BCELifier.printType(typeVar1) + "", (short) "" + intVar4 + ""));"");
break;
default:
throw new IllegalArgumentException(""Unhandled opcode: "" + shortVar2);
}
}",0
"@Override
public void visitBranchInstruction(final BranchInstruction bi) {
final BranchHandle branchhandleVar1 = branchhandleLiteral2;
final int intVar3 = intLiteral4;
final String stringVar5 = stringLiteral6;
if (bi instanceof Select) {
final Select selectVar7 = selectLiteral8;
branches.add(bi);
final StringBuilder stringbuilderVar9 = stringbuilderLiteral10;
final int[] intArrayVar11 = intArrayLiteral12;
for (int intVar18 = intLiteral19; intVar13 < intLiteral1; intVar13++) {
stringbuilderVar9.append(intArrayVar11[intVar13]);
if (intVar13 < intArrayVar11.length - 1) {
stringbuilderVar9.append("", "");
}
}
stringbuilderVar9.append("" }"");
_out.print(""Select "" + stringVar5 + "" = new "" + bi.getName().toUpperCase(Locale.ENGLISH) + ""("" + stringbuilderVar9 + "", new InstructionHandle[] { "");
for (int intVar18 = intLiteral19; intVar13 < intArrayVar11.length; intVar13++) {
_out.print(""null"");
if (intVar13 < intArrayVar11.length - 1) {
_out.print("", "");
}
}
_out.println("" }, null);"");
} else {
final int intVar15 = intLiteral16;
String stringVar17;
if (intVar3 > intVar15) {
stringVar17 = ""ih_"" + intVar15;
} else {
branches.add(bi);
stringVar17 = ""null"";
}
_out.println(""    BranchInstruction "" + stringVar5 + "" = _factory.createBranchInstruction("" + CONSTANT_PREFIX + bi.getName().toUpperCase(Locale.ENGLISH) + "", "" + stringVar17 + "");"");
}
if (branchhandleVar1.hasTargeters()) {
_out.println(""    ih_"" + intVar3 + "" = il.append("" + stringVar5 + "");"");
} else {
_out.println(""    il.append("" + stringVar5 + "");"");
}
}",0
"public InputStream getInputStream(final String name, final String suffix) throws IOException {
InputStream inputstreamVar1 = inputstreamLiteral2;
try {
inputstreamVar1 = getClass().getClassLoader().getResourceAsStream(name + suffix);
} catch (final Exception e) {
}
if (inputstreamVar1 != null) {
return inputstreamVar1;
}
return getClassFile(name, suffix).getInputStream();
}",0
private final boolean booleanVar1 = booleanLiteral2;,0
"public LocalVariablesInfo getLocalVariablesInfo(final int methodNr) {
if (this.verify() != VerificationResult.VR_OK) {
return null;
}
if (methodNr < 0 || methodNr >= localVariablesInfos.length) {
throw new AssertionViolatedException(""Method number out of range."");
}
return localVariablesInfos[methodNr];
}",0
public static final String[] stringArrayVar1 = stringArrayLiteral2;,0
"public LineNumberTable(final int name_index, final int length, final LineNumber[] line_number_table, final ConstantPool constant_pool) {
super(Const.ATTR_LINE_NUMBER_TABLE, name_index, length, constant_pool);
this.line_number_table = line_number_table;
}",0
"public MethodParameter[] getParameters() {
return parameters;
}",0
"private static void matchIdent(final MyByteArrayInputStream in, final StringBuilder buf) {
int intVar1;
if ((intVar1 = in.read()) == -1) {
throw new RuntimeException(""Illegal signature: "" + in.getData() + "" no ident, reaching EOF"");
}
// System.out.println(""return from ident:"" + (char)ch);
if (!identStart(intVar1)) {
StringBuilder stringbuilderVar2 = stringbuilderLiteral3;
int intVar4 = intLiteral5;
while (Character.isJavaIdentifierPart((char) intVar1)) {
stringbuilderVar2.append((char) intVar1);
intVar4++;
intVar1 = in.read();
}
if (intVar1 == ':') {
in.skip(""Ljava/lang/Object"".length());
buf.append(stringbuilderVar2);
intVar1 = in.read();
in.unread();
// System.out.println(""so far:"" + buf2 + "":next:"" +(char)ch);
} else {
for (int intVar8 = intLiteral9; intVar6 < intLiteral1; intVar6++) {
in.unread();
}
}
return;
}
StringBuilder stringbuilderVar2 = stringbuilderLiteral3;
intVar1 = in.read();
do {
stringbuilderVar2.append((char) intVar1);
intVar1 = in.read();
// System.out.println(""within ident:""+ (char)ch);
} while ((intVar1 != -1) && (Character.isJavaIdentifierPart((char) intVar1) || (intVar1 == '/')));
buf.append(stringbuilderVar2.toString().replace('/', '.'));
// System.out.println(""regular return ident:""+ (char)ch + "":"" + buf2);
if (intVar1 != -1) {
in.unread();
}
}",0
"public StackMap(final int name_index, final int length, final StackMapEntry[] map, final ConstantPool constant_pool) {
super(Const.ATTR_STACK_MAP, name_index, length, constant_pool);
this.map = map;
}",0
"public ArrayType(final Type type, final int dimensions) {
super(Const.T_ARRAY, ""<dummy>"");
if ((dimensions < 1) || (dimensions > Const.MAX_BYTE)) {
throw new ClassGenException(""Invalid number of dimensions: "" + dimensions);
}
switch(type.getType()) {
case Const.T_ARRAY:
ArrayType arraytypeVar1 = arraytypeLiteral2;
this.dimensions = dimensions + arraytypeVar1.dimensions;
basic_type = arraytypeVar1.basic_type;
break;
case Const.T_VOID:
throw new ClassGenException(""Invalid type: void[]"");
default:
// Basic type or reference
this.dimensions = dimensions;
basic_type = type;
break;
}
StringBuilder stringbuilderVar3 = stringbuilderLiteral4;
for (int intVar7 = intLiteral8; intVar5 < intLiteral1; intVar5++) {
stringbuilderVar3.append('[');
}
stringbuilderVar3.append(basic_type.getSignature());
super.setSignature(stringbuilderVar3.toString());
}",0
"public int addConstant(final Constant c, final ConstantPoolGen cp) {
Constant[] constantArrayVar1 = constantArrayLiteral2;
switch(c.getTag()) {
case Const.CONSTANT_String:
{
ConstantString constantstringVar3 = constantstringLiteral4;
ConstantUtf8 constantutf8Var5 = constantutf8Literal6;
return addString(constantutf8Var5.getBytes());
}
case Const.CONSTANT_Class:
{
ConstantClass constantstringVar3 = constantclassLiteral7;
ConstantUtf8 constantutf8Var5 = constantutf8Literal8;
return addClass(constantutf8Var5.getBytes());
}
case Const.CONSTANT_NameAndType:
{
ConstantNameAndType constantnameandtypeVar9 = constantnameandtypeLiteral10;
ConstantUtf8 constantutf8Var5 = constantutf8Literal11;
ConstantUtf8 constantutf8Var12 = constantutf8Literal13;
return addNameAndType(constantutf8Var5.getBytes(), constantutf8Var12.getBytes());
}
case Const.CONSTANT_Utf8:
return addUtf8(((ConstantUtf8) c).getBytes());
case Const.CONSTANT_Double:
return addDouble(((ConstantDouble) c).getBytes());
case Const.CONSTANT_Float:
return addFloat(((ConstantFloat) c).getBytes());
case Const.CONSTANT_Long:
return addLong(((ConstantLong) c).getBytes());
case Const.CONSTANT_Integer:
return addInteger(((ConstantInteger) c).getBytes());
case Const.CONSTANT_InterfaceMethodref:
case Const.CONSTANT_Methodref:
case Const.CONSTANT_Fieldref:
{
ConstantCP constantcpVar14 = constantcpLiteral15;
ConstantClass constantclassVar16 = constantclassLiteral17;
ConstantNameAndType constantnameandtypeVar9 = constantnameandtypeLiteral18;
ConstantUtf8 constantutf8Var5 = constantutf8Literal19;
String stringVar20 = stringLiteral21;
constantutf8Var5 = (ConstantUtf8) constantArrayVar1[constantnameandtypeVar9.getNameIndex()];
String stringVar22 = stringLiteral23;
constantutf8Var5 = (ConstantUtf8) constantArrayVar1[constantnameandtypeVar9.getSignatureIndex()];
String stringVar24 = stringLiteral23;
switch(c.getTag()) {
case Const.CONSTANT_InterfaceMethodref:
return addInterfaceMethodref(stringVar20, stringVar22, stringVar24);
case Const.CONSTANT_Methodref:
return addMethodref(stringVar20, stringVar22, stringVar24);
case Const.CONSTANT_Fieldref:
return addFieldref(stringVar20, stringVar22, stringVar24);
default:
// Never reached
throw new RuntimeException(""Unknown constant type "" + c);
}
}
default:
// Never reached
throw new RuntimeException(""Unknown constant type "" + c);
}
}",0
"public INSTANCEOF createInstanceOf(final ReferenceType t) {
if (t instanceof ArrayType) {
return new INSTANCEOF(cp.addArrayClass((ArrayType) t));
}
return new INSTANCEOF(cp.addClass((ObjectType) t));
}",0
"public InstructionHandle[] getTargets() {
return targets;
}",0
"private String codeToHTML(final ByteSequence bytes, final int method_number) throws IOException {
short shortVar1 = shortLiteral2;
String stringVar3;
String stringVar4;
int intVar5 = intLiteral6;
int intVar7;
int intVar8;
int intVar9;
int intVar10;
int intVar11;
int intVar12;
int[] intArrayVar13;
int intVar14 = intLiteral6;
int intVar15;
StringBuilder stringbuilderVar16 = stringbuilderLiteral17;
stringbuilderVar16.append(""<TT>"").append(Const.getOpcodeName(shortVar1)).append(""</TT></TD><TD>"");
if ((shortVar1 == Const.TABLESWITCH) || (shortVar1 == Const.LOOKUPSWITCH)) {
int intVar18 = intLiteral19;
intVar14 = (intVar18 == 0) ? 0 : 4 - intVar18;
for (int intVar46 = intLiteral47; intVar20 < intLiteral1; intVar20++) {
bytes.readByte();
}
intVar5 = bytes.readInt();
}
switch(shortVar1) {
case Const.TABLESWITCH:
intVar7 = bytes.readInt();
intVar8 = bytes.readInt();
intVar15 = bytes.getIndex() - 12 - intVar14 - 1;
intVar5 += intVar15;
stringbuilderVar16.append(""<TABLE BORDER=1><TR>"");
intArrayVar13 = new int[intVar8 - intVar7 + 1];
for (int intVar46 = intLiteral47; intVar20 < intLiteral2; intVar20++) {
intArrayVar13[intVar20] = intVar15 + bytes.readInt();
stringbuilderVar16.append(""<TH>"").append(intVar7 + intVar20).append(""</TH>"");
}
stringbuilderVar16.append(""<TH>default</TH></TR>\n<TR>"");
for (int intVar21 : intArrayVar13) {
stringbuilderVar16.append(""<TD><A HREF=\""#code"").append(method_number).append(""@"").append(intVar21).append(""\"">"").append(intVar21).append(""</A></TD>"");
}
stringbuilderVar16.append(""<TD><A HREF=\""#code"").append(method_number).append(""@"").append(intVar5).append(""\"">"").append(intVar5).append(""</A></TD></TR>\n</TABLE>\n"");
break;
case Const.LOOKUPSWITCH:
int intVar22 = intLiteral23;
intVar15 = bytes.getIndex() - 8 - intVar14 - 1;
intArrayVar13 = new int[intVar22];
intVar5 += intVar15;
stringbuilderVar16.append(""<TABLE BORDER=1><TR>"");
for (int intVar46 = intLiteral47; intVar20 < intLiteral3; intVar20++) {
int intVar24 = intLiteral23;
intArrayVar13[intVar20] = intVar15 + bytes.readInt();
stringbuilderVar16.append(""<TH>"").append(intVar24).append(""</TH>"");
}
stringbuilderVar16.append(""<TH>default</TH></TR>\n<TR>"");
for (int intVar46 = intLiteral47; intVar20 < intVar22; intVar20++) {
stringbuilderVar16.append(""<TD><A HREF=\""#code"").append(method_number).append(""@"").append(intArrayVar13[intVar20]).append(""\"">"").append(intArrayVar13[intVar20]).append(""</A></TD>"");
}
stringbuilderVar16.append(""<TD><A HREF=\""#code"").append(method_number).append(""@"").append(intVar5).append(""\"">"").append(intVar5).append(""</A></TD></TR>\n</TABLE>\n"");
break;
case Const.GOTO:
case Const.IFEQ:
case Const.IFGE:
case Const.IFGT:
case Const.IFLE:
case Const.IFLT:
case Const.IFNE:
case Const.IFNONNULL:
case Const.IFNULL:
case Const.IF_ACMPEQ:
case Const.IF_ACMPNE:
case Const.IF_ICMPEQ:
case Const.IF_ICMPGE:
case Const.IF_ICMPGT:
case Const.IF_ICMPLE:
case Const.IF_ICMPLT:
case Const.IF_ICMPNE:
case Const.JSR:
intVar9 = bytes.getIndex() + bytes.readShort() - 1;
stringbuilderVar16.append(""<A HREF=\""#code"").append(method_number).append(""@"").append(intVar9).append(""\"">"").append(intVar9).append(""</A>"");
break;
case Const.GOTO_W:
case Const.JSR_W:
int intVar25 = intLiteral26;
stringbuilderVar16.append(""<A HREF=\""#code"").append(method_number).append(""@"").append(intVar25).append(""\"">"").append(intVar25).append(""</A>"");
break;
case Const.ALOAD:
case Const.ASTORE:
case Const.DLOAD:
case Const.DSTORE:
case Const.FLOAD:
case Const.FSTORE:
case Const.ILOAD:
case Const.ISTORE:
case Const.LLOAD:
case Const.LSTORE:
case Const.RET:
if (wide) {
intVar11 = bytes.readShort();
wide = false;
} else {
intVar11 = bytes.readUnsignedByte();
}
stringbuilderVar16.append(""%"").append(intVar11);
break;
case Const.WIDE:
wide = true;
stringbuilderVar16.append(""(wide)"");
break;
case Const.NEWARRAY:
stringbuilderVar16.append(""<FONT COLOR=\""#00FF00\"">"").append(Const.getTypeName(bytes.readByte())).append(""</FONT>"");
break;
case Const.GETFIELD:
case Const.GETSTATIC:
case Const.PUTFIELD:
case Const.PUTSTATIC:
intVar9 = bytes.readShort();
ConstantFieldref constantfieldrefVar27 = constantfieldrefLiteral28;
intVar10 = constantfieldrefVar27.getClassIndex();
stringVar3 = constant_pool.getConstantString(intVar10, Const.CONSTANT_Class);
stringVar3 = Utility.compactClassName(stringVar3, false);
intVar9 = constantfieldrefVar27.getNameAndTypeIndex();
String stringVar29 = stringLiteral30;
if (stringVar3.equals(class_name)) {
stringbuilderVar16.append(""<A HREF=\"""").append(class_name).append(""_methods.html#field"").append(stringVar29).append(""\"" TARGET=Methods>"").append(stringVar29).append(""</A>\n"");
} else {
stringbuilderVar16.append(constant_html.referenceConstant(intVar10)).append(""."").append(stringVar29);
}
break;
case Const.CHECKCAST:
case Const.INSTANCEOF:
case Const.NEW:
intVar9 = bytes.readShort();
stringbuilderVar16.append(constant_html.referenceConstant(intVar9));
break;
case Const.INVOKESPECIAL:
case Const.INVOKESTATIC:
case Const.INVOKEVIRTUAL:
case Const.INVOKEINTERFACE:
case Const.INVOKEDYNAMIC:
int intVar31 = intLiteral32;
String stringVar33;
if (shortVar1 == Const.INVOKEINTERFACE) {
bytes.readUnsignedByte();
bytes.readUnsignedByte();
ConstantInterfaceMethodref constantinterfacemethodrefVar34 = constantinterfacemethodrefLiteral35;
intVar10 = constantinterfacemethodrefVar34.getClassIndex();
intVar9 = constantinterfacemethodrefVar34.getNameAndTypeIndex();
stringVar3 = Class2HTML.referenceClass(intVar10);
} else if (shortVar1 == Const.INVOKEDYNAMIC) {
bytes.readUnsignedByte();
bytes.readUnsignedByte();
ConstantInvokeDynamic constantinterfacemethodrefVar34 = constantinvokedynamicLiteral36;
intVar9 = constantinterfacemethodrefVar34.getNameAndTypeIndex();
stringVar3 = ""#"" + constantinterfacemethodrefVar34.getBootstrapMethodAttrIndex();
} else {
// UNDONE: Java8 now allows INVOKESPECIAL and INVOKESTATIC to
ConstantMethodref constantinterfacemethodrefVar34 = constantmethodrefLiteral37;
intVar10 = constantinterfacemethodrefVar34.getClassIndex();
intVar9 = constantinterfacemethodrefVar34.getNameAndTypeIndex();
stringVar3 = Class2HTML.referenceClass(intVar10);
}
stringVar33 = Class2HTML.toHTML(constant_pool.constantToString(constant_pool.getConstant(intVar9, Const.CONSTANT_NameAndType)));
ConstantNameAndType constantnameandtypeVar38 = constantnameandtypeLiteral39;
stringVar4 = constant_pool.constantToString(constantnameandtypeVar38.getSignatureIndex(), Const.CONSTANT_Utf8);
String[] stringArrayVar40 = stringArrayLiteral41;
String stringVar42 = stringLiteral43;
stringbuilderVar16.append(stringVar3).append("".<A HREF=\"""").append(class_name).append(""_cp.html#cp"").append(intVar31).append(""\"" TARGET=ConstantPool>"").append(stringVar33).append(""</A>"").append(""("");
for (int intVar46 = intLiteral47; intVar20 < intLiteral4; intVar20++) {
stringbuilderVar16.append(Class2HTML.referenceType(stringArrayVar40[intVar20]));
if (intVar20 < stringArrayVar40.length - 1) {
stringbuilderVar16.append("", "");
}
}
stringbuilderVar16.append(""):"").append(Class2HTML.referenceType(stringVar42));
break;
case Const.LDC_W:
case Const.LDC2_W:
intVar9 = bytes.readShort();
stringbuilderVar16.append(""<A HREF=\"""").append(class_name).append(""_cp.html#cp"").append(intVar9).append(""\"" TARGET=\""ConstantPool\"">"").append(Class2HTML.toHTML(constant_pool.constantToString(intVar9, constant_pool.getConstant(intVar9).getTag()))).append(""</a>"");
break;
case Const.LDC:
intVar9 = bytes.readUnsignedByte();
stringbuilderVar16.append(""<A HREF=\"""").append(class_name).append(""_cp.html#cp"").append(intVar9).append(""\"" TARGET=\""ConstantPool\"">"").append(Class2HTML.toHTML(constant_pool.constantToString(intVar9, constant_pool.getConstant(intVar9).getTag()))).append(""</a>"");
break;
case Const.ANEWARRAY:
intVar9 = bytes.readShort();
stringbuilderVar16.append(constant_html.referenceConstant(intVar9));
break;
case Const.MULTIANEWARRAY:
intVar9 = bytes.readShort();
int intVar44 = intLiteral45;
stringbuilderVar16.append(constant_html.referenceConstant(intVar9)).append("":"").append(intVar44).append(""-dimensional"");
break;
case Const.IINC:
if (wide) {
intVar11 = bytes.readShort();
intVar12 = bytes.readShort();
wide = false;
} else {
intVar11 = bytes.readUnsignedByte();
intVar12 = bytes.readByte();
}
stringbuilderVar16.append(""%"").append(intVar11).append("" "").append(intVar12);
break;
default:
if (Const.getNoOfOperands(shortVar1) > 0) {
for (int intVar46 = intLiteral47; intVar20 < intLiteral5; intVar20++) {
switch(Const.getOperandType(shortVar1, intVar20)) {
case Const.T_BYTE:
stringbuilderVar16.append(bytes.readUnsignedByte());
break;
case // Either branch or index
Const.T_SHORT:
stringbuilderVar16.append(bytes.readShort());
break;
case Const.T_INT:
stringbuilderVar16.append(bytes.readInt());
break;
default:
// Never reached
throw new IllegalStateException(""Unreachable default case reached! "" + Const.getOperandType(shortVar1, intVar20));
}
stringbuilderVar16.append(""&nbsp;"");
}
}
}
stringbuilderVar16.append(""</TD>"");
return stringbuilderVar16.toString();
}",0
"public static final byte[] decodeQuotedPrintable(byte[] bytes) throws DecoderException {
if (bytes == null) {
return null;
}
ByteArrayOutputStream bytearrayoutputstreamVar1 = bytearrayoutputstreamLiteral2;
for (int intVar10 = intLiteral11; intVar3 < intLiteral1; intVar3++) {
int intVar5 = intLiteral6;
if (intVar5 == ESCAPE_CHAR) {
try {
int intVar7 = intLiteral8;
int intVar9 = intLiteral8;
bytearrayoutputstreamVar1.write((char) ((intVar7 << 4) + intVar9));
} catch (ArrayIndexOutOfBoundsException e) {
throw new DecoderException(""Invalid quoted-printable encoding"", e);
}
} else {
bytearrayoutputstreamVar1.write(intVar5);
}
}
return bytearrayoutputstreamVar1.toByteArray();
}",0
"void decode(byte[] in, int inPos, int inAvail) {
if (eof) {
return;
}
if (inAvail < 0) {
eof = true;
}
for (int intVar7 = intLiteral8; intVar1 < intLiteral1; intVar1++) {
if (buffer == null || buffer.length - pos < decodeSize) {
resizeBuffer();
}
byte byteVar3 = byteLiteral4;
if (byteVar3 == PAD) {
eof = true;
break;
} else {
if (byteVar3 >= 0 && byteVar3 < DECODE_TABLE.length) {
int intVar5 = intLiteral6;
if (intVar5 >= 0) {
modulus = (++modulus) % 4;
x = (x << 6) + intVar5;
if (modulus == 0) {
buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
buffer[pos++] = (byte) (x & MASK_8BITS);
}
}
}
}
}
// Two forms of EOF as far as base64 decoder is concerned: actual
if (eof && modulus != 0) {
x = x << 6;
switch(modulus) {
case 2:
x = x << 6;
buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
break;
case 3:
buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
break;
}
}
}",0
"public Object encode(Object object) throws EncoderException {
try {
byte[] byteArrayVar1 = byteArrayLiteral2;
return encodeHex(byteArrayVar1);
} catch (ClassCastException e) {
throw new EncoderException(e.getMessage());
}
}",0
"public static final byte[] decodeQuotedPrintable(byte[] bytes) throws DecoderException {
if (bytes == null) {
return null;
}
ByteArrayOutputStream bytearrayoutputstreamVar1 = bytearrayoutputstreamLiteral2;
for (int intVar10 = intLiteral11; intVar3 < intLiteral1; intVar3++) {
int intVar5 = intLiteral6;
if (intVar5 == ESCAPE_CHAR) {
try {
int intVar7 = intLiteral8;
int intVar9 = intLiteral8;
if (intVar7 == -1 || intVar9 == -1) {
throw new DecoderException(""Invalid quoted-printable encoding"");
}
bytearrayoutputstreamVar1.write((char) ((intVar7 << 4) + intVar9));
} catch (ArrayIndexOutOfBoundsException e) {
throw new DecoderException(""Invalid quoted-printable encoding"");
}
} else {
bytearrayoutputstreamVar1.write(intVar5);
}
}
return bytearrayoutputstreamVar1.toByteArray();
}",0
"void encode(byte[] in, int inPos, int inAvail) {
if (eof) {
return;
}
if (inAvail < 0) {
eof = true;
if (0 == modulus && lineLength == 0) {
return;
}
ensureBufferSize(encodeSize);
int intVar1 = intLiteral2;
switch(modulus) {
case 1:
buffer[pos++] = encodeTable[(bitWorkArea >> 2) & MASK_6BITS];
buffer[pos++] = encodeTable[(bitWorkArea << 4) & MASK_6BITS];
if (encodeTable == STANDARD_ENCODE_TABLE) {
buffer[pos++] = PAD;
buffer[pos++] = PAD;
}
break;
case 2:
buffer[pos++] = encodeTable[(bitWorkArea >> 10) & MASK_6BITS];
buffer[pos++] = encodeTable[(bitWorkArea >> 4) & MASK_6BITS];
buffer[pos++] = encodeTable[(bitWorkArea << 2) & MASK_6BITS];
if (encodeTable == STANDARD_ENCODE_TABLE) {
buffer[pos++] = PAD;
}
break;
}
currentLinePos += pos - intVar1;
if (lineLength > 0 && currentLinePos > 0) {
System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
pos += lineSeparator.length;
}
} else {
for (int intVar7 = intLiteral8; intVar3 < intLiteral1; intVar3++) {
ensureBufferSize(encodeSize);
modulus = (modulus + 1) % BYTES_PER_UNENCODED_BLOCK;
int intVar5 = intLiteral6;
if (intVar5 < 0) {
intVar5 += 256;
}
bitWorkArea = (bitWorkArea << 8) + intVar5;
if (0 == modulus) {
buffer[pos++] = encodeTable[(bitWorkArea >> 18) & MASK_6BITS];
buffer[pos++] = encodeTable[(bitWorkArea >> 12) & MASK_6BITS];
buffer[pos++] = encodeTable[(bitWorkArea >> 6) & MASK_6BITS];
buffer[pos++] = encodeTable[bitWorkArea & MASK_6BITS];
currentLinePos += BYTES_PER_ENCODED_BLOCK;
if (lineLength > 0 && lineLength <= currentLinePos) {
System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
pos += lineSeparator.length;
currentLinePos = 0;
}
}
}
}
}",0
"protected byte[] doEncoding(byte[] bytes) {
if (bytes == null) {
return null;
}
return Base64.encodeBase64(bytes);
}",0
"public static final byte[] encodeQuotedPrintable(BitSet printable, byte[] bytes) {
if (bytes == null) {
return null;
}
if (printable == null) {
printable = PRINTABLE_CHARS;
}
ByteArrayOutputStream bytearrayoutputstreamVar1 = bytearrayoutputstreamLiteral2;
for (int intVar7 = intLiteral8; intVar3 < intLiteral1; intVar3++) {
int intVar5 = intLiteral6;
if (intVar5 < 0) {
intVar5 = 256 + intVar5;
}
if (printable.get(intVar5)) {
bytearrayoutputstreamVar1.write(intVar5);
} else {
encodeQuotedPrintable(intVar5, bytearrayoutputstreamVar1);
}
}
return bytearrayoutputstreamVar1.toByteArray();
}",0
"public static String md5Crypt(final byte[] keyBytes, final String salt, final String prefix) {
final int intVar1 = intLiteral2;
String stringVar3;
if (salt == null) {
stringVar3 = B64.getRandomSalt(8);
} else {
final Pattern patternVar4 = patternLiteral5;
final Matcher matcherVar6 = matcherLiteral7;
if (matcherVar6 == null || !matcherVar6.find()) {
throw new IllegalArgumentException(""Invalid salt value: "" + salt);
}
stringVar3 = matcherVar6.group(1);
}
final byte[] byteArrayVar8 = byteArrayLiteral9;
final MessageDigest messagedigestVar10 = messagedigestLiteral11;
messagedigestVar10.update(keyBytes);
messagedigestVar10.update(prefix.getBytes(Charsets.UTF_8));
messagedigestVar10.update(byteArrayVar8);
MessageDigest messagedigestVar12 = messagedigestLiteral11;
messagedigestVar12.update(keyBytes);
messagedigestVar12.update(byteArrayVar8);
messagedigestVar12.update(keyBytes);
byte[] byteArrayVar13 = byteArrayLiteral14;
int intVar15 = intLiteral16;
while (intVar15 > 0) {
messagedigestVar10.update(byteArrayVar13, 0, intVar15 > 16 ? 16 : intVar15);
intVar15 -= 16;
}
Arrays.fill(byteArrayVar13, (byte) 0);
intVar15 = intVar1;
final int intVar17 = intLiteral18;
while (intVar15 > 0) {
if ((intVar15 & 1) == 1) {
messagedigestVar10.update(byteArrayVar13[intVar17]);
} else {
messagedigestVar10.update(keyBytes[intVar17]);
}
intVar15 >>= 1;
}
final StringBuilder stringbuilderVar19 = stringbuilderLiteral20;
byteArrayVar13 = messagedigestVar10.digest();
for (int intVar22 = intLiteral23; intVar21 < intLiteral1; intVar21++) {
messagedigestVar12 = DigestUtils.getMd5Digest();
if ((intVar21 & 1) != 0) {
messagedigestVar12.update(keyBytes);
} else {
messagedigestVar12.update(byteArrayVar13, 0, BLOCKSIZE);
}
if (intVar21 % 3 != 0) {
messagedigestVar12.update(byteArrayVar8);
}
if (intVar21 % 7 != 0) {
messagedigestVar12.update(keyBytes);
}
if ((intVar21 & 1) != 0) {
messagedigestVar12.update(byteArrayVar13, 0, BLOCKSIZE);
} else {
messagedigestVar12.update(keyBytes);
}
byteArrayVar13 = messagedigestVar12.digest();
}
B64.b64from24bit(byteArrayVar13[0], byteArrayVar13[6], byteArrayVar13[12], 4, stringbuilderVar19);
B64.b64from24bit(byteArrayVar13[1], byteArrayVar13[7], byteArrayVar13[13], 4, stringbuilderVar19);
B64.b64from24bit(byteArrayVar13[2], byteArrayVar13[8], byteArrayVar13[14], 4, stringbuilderVar19);
B64.b64from24bit(byteArrayVar13[3], byteArrayVar13[9], byteArrayVar13[15], 4, stringbuilderVar19);
B64.b64from24bit(byteArrayVar13[4], byteArrayVar13[10], byteArrayVar13[5], 4, stringbuilderVar19);
B64.b64from24bit((byte) 0, (byte) 0, byteArrayVar13[11], 2, stringbuilderVar19);
messagedigestVar10.reset();
messagedigestVar12.reset();
Arrays.fill(keyBytes, (byte) 0);
Arrays.fill(byteArrayVar8, (byte) 0);
Arrays.fill(byteArrayVar13, (byte) 0);
return stringbuilderVar19.toString();
}",0
"int getMinRating(final int sumLength) {
int intVar1 = intLiteral2;
if (sumLength <= FOUR) {
intVar1 = FIVE;
} else if (sumLength >= FIVE && sumLength <= SEVEN) {
intVar1 = FOUR;
} else if (sumLength >= EIGHT && sumLength <= ELEVEN) {
intVar1 = THREE;
} else if (sumLength == TWELVE) {
intVar1 = TWO;
} else {
intVar1 = ONE;
}
return intVar1;
}",0
"@Override
public LanguageSet restrictTo(final LanguageSet other) {
if (other == NO_LANGUAGES) {
return other;
} else if (other == ANY_LANGUAGE) {
return this;
} else {
final SomeLanguages somelanguagesVar1 = somelanguagesLiteral2;
final Set<String> set<string>Var3 = set<string>Literal4;
for (String stringVar5 : languages) {
if (somelanguagesVar1.languages.contains(stringVar5)) {
set<string>Var3.add(stringVar5);
}
}
return from(set<string>Var3);
}
}",0
"@Override
protected byte[] doEncoding(final byte[] bytes) {
if (bytes == null) {
return null;
}
final byte[] byteArrayVar1 = byteArrayLiteral2;
if (this.encodeBlanks) {
for (int intVar5 = intLiteral6; intVar3 < intLiteral1; intVar3++) {
if (byteArrayVar1[intVar3] == BLANK) {
byteArrayVar1[intVar3] = UNDERSCORE;
}
}
}
return byteArrayVar1;
}",0
"private static byte[] getBytes(final String string, final Charset charset) {
if (string == null) {
return null;
}
return string.getBytes(charset);
}",0
protected final byte byteVar1 = byteLiteral2;,0
"@Override
protected byte[] doEncoding(byte[] bytes) {
if (bytes == null) {
return null;
}
return Base64.encodeBase64(bytes);
}",0
"public static final byte[] encodeQuotedPrintable(BitSet printable, byte[] bytes) {
if (bytes == null) {
return null;
}
if (printable == null) {
printable = PRINTABLE_CHARS;
}
ByteArrayOutputStream bytearrayoutputstreamVar1 = bytearrayoutputstreamLiteral2;
for (byte byteVar3 : bytes) {
int intVar4 = intLiteral5;
if (intVar4 < 0) {
intVar4 = 256 + intVar4;
}
if (printable.get(intVar4)) {
bytearrayoutputstreamVar1.write(intVar4);
} else {
encodeQuotedPrintable(intVar4, bytearrayoutputstreamVar1);
}
}
return bytearrayoutputstreamVar1.toByteArray();
}",0
"private static String sha2Crypt(final byte[] keyBytes, final String salt, final String saltPrefix, final int blocksize, final String algorithm) {
final int intVar1 = intLiteral2;
int intVar3 = intLiteral4;
boolean booleanVar5 = booleanLiteral6;
if (salt == null) {
throw new IllegalArgumentException(""Salt must not be null"");
}
final Matcher matcherVar7 = matcherLiteral8;
if (matcherVar7 == null || !matcherVar7.find()) {
throw new IllegalArgumentException(""Invalid salt value: "" + salt);
}
if (matcherVar7.group(3) != null) {
intVar3 = Integer.parseInt(matcherVar7.group(3));
intVar3 = Math.max(ROUNDS_MIN, Math.min(ROUNDS_MAX, intVar3));
booleanVar5 = true;
}
final String stringVar9 = stringLiteral10;
final byte[] byteArrayVar11 = byteArrayLiteral12;
final int intVar13 = intLiteral14;
MessageDigest messagedigestVar15 = messagedigestLiteral16;
messagedigestVar15.update(keyBytes);
// NB: the MD5 algorithm did add the $1$ salt_prefix. This is not deemed
messagedigestVar15.update(byteArrayVar11);
MessageDigest messagedigestVar17 = messagedigestLiteral16;
messagedigestVar17.update(keyBytes);
messagedigestVar17.update(byteArrayVar11);
messagedigestVar17.update(keyBytes);
byte[] byteArrayVar18 = byteArrayLiteral19;
int intVar20 = intLiteral2;
while (intVar20 > blocksize) {
messagedigestVar15.update(byteArrayVar18, 0, blocksize);
intVar20 -= blocksize;
}
messagedigestVar15.update(byteArrayVar18, 0, intVar20);
// NB: this step differs significantly from the MD5 algorithm. It
intVar20 = keyBytes.length;
while (intVar20 > 0) {
if ((intVar20 & 1) != 0) {
messagedigestVar15.update(byteArrayVar18, 0, blocksize);
} else {
messagedigestVar15.update(keyBytes);
}
intVar20 >>= 1;
}
byteArrayVar18 = messagedigestVar15.digest();
messagedigestVar17 = DigestUtils.getDigest(algorithm);
for (int intVar32 = intLiteral33; intVar21 <= intLiteral1; intVar21++) {
messagedigestVar17.update(keyBytes);
}
byte[] byteArrayVar23 = byteArrayLiteral19;
final byte[] byteArrayVar24 = byteArrayLiteral25;
int intVar26 = intLiteral27;
while (intVar26 < intVar1 - blocksize) {
System.arraycopy(byteArrayVar23, 0, byteArrayVar24, intVar26, blocksize);
intVar26 += blocksize;
}
System.arraycopy(byteArrayVar23, 0, byteArrayVar24, intVar26, intVar1 - intVar26);
messagedigestVar17 = DigestUtils.getDigest(algorithm);
for (int intVar32 = intLiteral33; intVar21 <= intLiteral2; intVar21++) {
messagedigestVar17.update(byteArrayVar11);
}
byteArrayVar23 = messagedigestVar17.digest();
// Remark: The salt is limited to 16 chars, how does this make sense?
final byte[] byteArrayVar28 = byteArrayLiteral29;
intVar26 = 0;
while (intVar26 < intVar13 - blocksize) {
System.arraycopy(byteArrayVar23, 0, byteArrayVar28, intVar26, blocksize);
intVar26 += blocksize;
}
System.arraycopy(byteArrayVar23, 0, byteArrayVar28, intVar26, intVar13 - intVar26);
for (int intVar32 = intLiteral34; intVar21 <= intLiteral3; intVar21++) {
messagedigestVar15 = DigestUtils.getDigest(algorithm);
if ((intVar21 & 1) != 0) {
messagedigestVar15.update(byteArrayVar24, 0, intVar1);
} else {
messagedigestVar15.update(byteArrayVar18, 0, blocksize);
}
if (intVar21 % 3 != 0) {
messagedigestVar15.update(byteArrayVar28, 0, intVar13);
}
if (intVar21 % 7 != 0) {
messagedigestVar15.update(byteArrayVar24, 0, intVar1);
}
if ((intVar21 & 1) != 0) {
messagedigestVar15.update(byteArrayVar18, 0, blocksize);
} else {
messagedigestVar15.update(byteArrayVar24, 0, intVar1);
}
byteArrayVar18 = messagedigestVar15.digest();
}
// size specified above, consisting of multiple pieces:
final StringBuilder stringbuilderVar30 = stringbuilderLiteral31;
if (booleanVar5) {
stringbuilderVar30.append(ROUNDS_PREFIX);
stringbuilderVar30.append(intVar3);
stringbuilderVar30.append(""$"");
}
stringbuilderVar30.append(stringVar9);
stringbuilderVar30.append(""$"");
// follows:
// characters as output:
// 1. character: the six low bits of the first byte
// 2. character: the two high bits of the first byte and the
// 3. character: the four high bytes from the second byte and
// 4. character: the six high bits from the third byte
// This was just a safeguard in the C implementation:
if (blocksize == 32) {
B64.b64from24bit(byteArrayVar18[0], byteArrayVar18[10], byteArrayVar18[20], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[21], byteArrayVar18[1], byteArrayVar18[11], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[12], byteArrayVar18[22], byteArrayVar18[2], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[3], byteArrayVar18[13], byteArrayVar18[23], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[24], byteArrayVar18[4], byteArrayVar18[14], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[15], byteArrayVar18[25], byteArrayVar18[5], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[6], byteArrayVar18[16], byteArrayVar18[26], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[27], byteArrayVar18[7], byteArrayVar18[17], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[18], byteArrayVar18[28], byteArrayVar18[8], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[9], byteArrayVar18[19], byteArrayVar18[29], 4, stringbuilderVar30);
B64.b64from24bit((byte) 0, byteArrayVar18[31], byteArrayVar18[30], 3, stringbuilderVar30);
} else {
B64.b64from24bit(byteArrayVar18[0], byteArrayVar18[21], byteArrayVar18[42], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[22], byteArrayVar18[43], byteArrayVar18[1], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[44], byteArrayVar18[2], byteArrayVar18[23], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[3], byteArrayVar18[24], byteArrayVar18[45], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[25], byteArrayVar18[46], byteArrayVar18[4], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[47], byteArrayVar18[5], byteArrayVar18[26], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[6], byteArrayVar18[27], byteArrayVar18[48], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[28], byteArrayVar18[49], byteArrayVar18[7], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[50], byteArrayVar18[8], byteArrayVar18[29], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[9], byteArrayVar18[30], byteArrayVar18[51], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[31], byteArrayVar18[52], byteArrayVar18[10], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[53], byteArrayVar18[11], byteArrayVar18[32], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[12], byteArrayVar18[33], byteArrayVar18[54], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[34], byteArrayVar18[55], byteArrayVar18[13], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[56], byteArrayVar18[14], byteArrayVar18[35], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[15], byteArrayVar18[36], byteArrayVar18[57], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[37], byteArrayVar18[58], byteArrayVar18[16], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[59], byteArrayVar18[17], byteArrayVar18[38], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[18], byteArrayVar18[39], byteArrayVar18[60], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[40], byteArrayVar18[61], byteArrayVar18[19], 4, stringbuilderVar30);
B64.b64from24bit(byteArrayVar18[62], byteArrayVar18[20], byteArrayVar18[41], 4, stringbuilderVar30);
B64.b64from24bit((byte) 0, (byte) 0, byteArrayVar18[63], 2, stringbuilderVar30);
}
Arrays.fill(byteArrayVar23, (byte) 0);
Arrays.fill(byteArrayVar24, (byte) 0);
Arrays.fill(byteArrayVar28, (byte) 0);
messagedigestVar15.reset();
messagedigestVar17.reset();
Arrays.fill(keyBytes, (byte) 0);
Arrays.fill(byteArrayVar11, (byte) 0);
return stringbuilderVar30.toString();
}",0
"@Override
protected byte[] doEncoding(final byte[] bytes) {
if (bytes == null) {
return null;
}
return Base64.encodeBase64(bytes);
}",0
"@Deprecated
protected final byte byteVar1 = byteLiteral2;",0
"@Override
protected byte[] doEncoding(final byte[] bytes) {
if (bytes == null) {
return null;
}
final byte[] byteArrayVar1 = byteArrayLiteral2;
if (this.encodeBlanks) {
for (int intVar5 = intLiteral6; intVar3 < intLiteral1; intVar3++) {
if (byteArrayVar1[intVar3] == BLANK) {
byteArrayVar1[intVar3] = UNDERSCORE;
}
}
}
return byteArrayVar1;
}",0
"private static byte[] getBytes(final String string, final Charset charset) {
if (string == null) {
return null;
}
return string.getBytes(charset);
}",0
"String removeDoubleConsonants(final String name) {
String stringVar1 = stringLiteral2;
for (final String stringVar3 : DOUBLE_CONSONANT) {
if (stringVar1.contains(stringVar3)) {
final String stringVar4 = stringLiteral5;
stringVar1 = stringVar1.replace(stringVar3, stringVar4);
}
}
return stringVar1;
}",0
"int getMinRating(final int sumLength) {
int intVar1 = intLiteral2;
if (sumLength <= FOUR) {
intVar1 = FIVE;
} else if (sumLength >= FIVE && sumLength <= SEVEN) {
intVar1 = FOUR;
} else if (sumLength >= EIGHT && sumLength <= ELEVEN) {
intVar1 = THREE;
} else if (sumLength == TWELVE) {
intVar1 = TWO;
} else {
intVar1 = ONE;
}
return intVar1;
}",0
"public static int hash32(final byte[] data, final int length, final int seed) {
int intVar1 = intLiteral2;
final int intVar3 = intLiteral4;
for (int intVar12 = intLiteral13; intVar5 < intLiteral1; intVar5++) {
final int intVar7 = intLiteral8;
int intVar9 = intLiteral10;
intVar9 *= M32;
intVar9 ^= intVar9 >>> R32;
intVar9 *= M32;
intVar1 *= M32;
intVar1 ^= intVar9;
}
final int intVar7 = intLiteral11;
switch(length - intVar7) {
case 3:
intVar1 ^= (data[intVar7 + 2] & 0xff) << 16;
case 2:
intVar1 ^= (data[intVar7 + 1] & 0xff) << 8;
case 1:
intVar1 ^= (data[intVar7] & 0xff);
intVar1 *= M32;
}
intVar1 ^= intVar1 >>> 13;
intVar1 *= M32;
intVar1 ^= intVar1 >>> 15;
return intVar1;
}",0
"int finalise(final int hash, final int unprocessedLength, final byte[] unprocessed, final int totalLen) {
int intVar1 = intLiteral2;
int intVar3 = intLiteral4;
switch(unprocessedLength) {
case 3:
intVar3 ^= (unprocessed[2] & 0xff) << 16;
case 2:
intVar3 ^= (unprocessed[1] & 0xff) << 8;
case 1:
intVar3 ^= (unprocessed[0] & 0xff);
intVar3 *= C1_32;
intVar3 = Integer.rotateLeft(intVar3, R1_32);
intVar3 *= C2_32;
intVar1 ^= intVar3;
}
intVar1 ^= totalLen;
return fmix32(intVar1);
}",0
"@Override
public LanguageSet merge(final LanguageSet other) {
if (other == NO_LANGUAGES) {
return this;
}
if (other == ANY_LANGUAGE) {
return other;
}
final SomeLanguages somelanguagesVar1 = somelanguagesLiteral2;
final Set<String> set<string>Var3 = set<string>Literal4;
set<string>Var3.addAll(somelanguagesVar1.languages);
return from(set<string>Var3);
}",0
protected static byte byteVar1 = byteLiteral2;,0
"public static byte[] getBytesUnchecked(final String string, final String charsetName) {
if (string == null) {
return null;
}
try {
return string.getBytes(charsetName);
} catch (final UnsupportedEncodingException e) {
throw StringUtils.newIllegalStateException(charsetName, e);
}
}",0
"public static int hash32x86(final byte[] data, final int offset, final int length, final int seed) {
int intVar1 = intLiteral2;
final int intVar3 = intLiteral4;
for (int intVar13 = intLiteral14; intVar5 < intLiteral1; intVar5++) {
final int intVar7 = intLiteral8;
final int intVar9 = intLiteral10;
intVar1 = mix32(intVar9, intVar1);
}
final int intVar7 = intLiteral11;
int intVar12 = intLiteral6;
switch(offset + length - intVar7) {
case 3:
intVar12 ^= (data[intVar7 + 2] & 0xff) << 16;
case 2:
intVar12 ^= (data[intVar7 + 1] & 0xff) << 8;
case 1:
intVar12 ^= (data[intVar7] & 0xff);
intVar12 *= C1_32;
intVar12 = Integer.rotateLeft(intVar12, R1_32);
intVar12 *= C2_32;
intVar1 ^= intVar12;
}
intVar1 ^= length;
return fmix32(intVar1);
}",0
"@Deprecated
public static int hash32(final byte[] data, final int offset, final int length, final int seed) {
int intVar1 = intLiteral2;
final int intVar3 = intLiteral4;
for (int intVar13 = intLiteral14; intVar5 < intLiteral1; intVar5++) {
final int intVar7 = intLiteral8;
final int intVar9 = intLiteral10;
intVar1 = mix32(intVar9, intVar1);
}
// Note: This fails to apply masking using 0xff to the 3 remaining bytes.
final int intVar7 = intLiteral11;
int intVar12 = intLiteral6;
switch(offset + length - intVar7) {
case 3:
intVar12 ^= data[intVar7 + 2] << 16;
case 2:
intVar12 ^= data[intVar7 + 1] << 8;
case 1:
intVar12 ^= data[intVar7];
intVar12 *= C1_32;
intVar12 = Integer.rotateLeft(intVar12, R1_32);
intVar12 *= C2_32;
intVar1 ^= intVar12;
}
intVar1 ^= length;
return fmix32(intVar1);
}",0
"@Override
protected byte[] doDecoding(final byte[] bytes) throws DecoderException {
if (bytes == null) {
return null;
}
boolean booleanVar1 = booleanLiteral2;
for (final byte byteVar3 : bytes) {
if (byteVar3 == UNDERSCORE) {
booleanVar1 = true;
break;
}
}
if (booleanVar1) {
final byte[] byteArrayVar4 = byteArrayLiteral5;
for (int intVar9 = intLiteral10; intVar6 < intLiteral1; intVar6++) {
final byte byteVar3 = byteLiteral8;
if (byteVar3 != UNDERSCORE) {
byteArrayVar4[intVar6] = byteVar3;
} else {
byteArrayVar4[intVar6] = SPACE;
}
}
return QuotedPrintableCodec.decodeQuotedPrintable(byteArrayVar4);
}
return QuotedPrintableCodec.decodeQuotedPrintable(bytes);
}",0
"public static final byte[] decodeQuotedPrintable(final byte[] bytes) throws DecoderException {
if (bytes == null) {
return null;
}
final ByteArrayOutputStream bytearrayoutputstreamVar1 = bytearrayoutputstreamLiteral2;
for (int intVar11 = intLiteral12; intVar3 < intLiteral1; intVar3++) {
final int intVar5 = intLiteral6;
if (intVar5 == ESCAPE_CHAR) {
try {
if (bytes[++intVar3] == CR) {
continue;
}
final int intVar7 = intLiteral8;
final int intVar9 = intLiteral10;
bytearrayoutputstreamVar1.write((char) ((intVar7 << 4) + intVar9));
} catch (final ArrayIndexOutOfBoundsException e) {
throw new DecoderException(""Invalid quoted-printable encoding"", e);
}
} else if (intVar5 != CR && intVar5 != LF) {
bytearrayoutputstreamVar1.write(intVar5);
}
}
return bytearrayoutputstreamVar1.toByteArray();
}",0
"public static byte[] md5(String data) {
return md5(data.getBytes());
}",0
"public static final byte[] decodeUrl(byte[] bytes) throws DecoderException {
if (bytes == null) {
return null;
}
ByteArrayOutputStream bytearrayoutputstreamVar1 = bytearrayoutputstreamLiteral2;
for (int intVar10 = intLiteral11; intVar3 < intLiteral1; intVar3++) {
int intVar5 = intLiteral6;
if (intVar5 == '+') {
bytearrayoutputstreamVar1.write(' ');
} else if (intVar5 == '%') {
try {
int intVar7 = intLiteral8;
int intVar9 = intLiteral8;
if (intVar7 == -1 || intVar9 == -1) {
throw new DecoderException(""Invalid URL encoding"");
}
bytearrayoutputstreamVar1.write((char) ((intVar7 << 4) + intVar9));
} catch (ArrayIndexOutOfBoundsException e) {
throw new DecoderException(""Invalid URL encoding"");
}
} else {
bytearrayoutputstreamVar1.write(intVar5);
}
}
return bytearrayoutputstreamVar1.toByteArray();
}",0
"public static final byte[] encodeUrl(BitSet urlsafe, byte[] bytes) {
if (bytes == null) {
return null;
}
if (urlsafe == null) {
urlsafe = WWW_FORM_URL;
}
ByteArrayOutputStream bytearrayoutputstreamVar1 = bytearrayoutputstreamLiteral2;
for (int intVar11 = intLiteral12; intVar3 < intLiteral1; intVar3++) {
int intVar5 = intLiteral6;
if (intVar5 < 0) {
intVar5 = 256 + intVar5;
}
if (urlsafe.get(intVar5)) {
if (intVar5 == ' ') {
intVar5 = '+';
}
bytearrayoutputstreamVar1.write(intVar5);
} else {
bytearrayoutputstreamVar1.write('%');
char charVar7 = charLiteral8;
char charVar9 = charLiteral10;
bytearrayoutputstreamVar1.write(charVar7);
bytearrayoutputstreamVar1.write(charVar9);
}
}
return bytearrayoutputstreamVar1.toByteArray();
}",0
"@Deprecated
protected final byte byteVar1 = byteLiteral2;",0
"public static byte[] getBytesUnchecked(final String string, final String charsetName) {
if (string == null) {
return null;
}
try {
return string.getBytes(charsetName);
} catch (final UnsupportedEncodingException e) {
throw StringUtils.newIllegalStateException(charsetName, e);
}
}",0
"private static long[] hash128x64(final byte[] data, final int offset, final int length, final long seed) {
long longVar1 = longLiteral2;
long longVar3 = longLiteral2;
final int intVar4 = intLiteral5;
for (int intVar15 = intLiteral16; intVar6 < intLiteral1; intVar6++) {
final int intVar8 = intLiteral9;
long longVar10 = longLiteral11;
long longVar12 = longLiteral13;
longVar10 *= C1;
longVar10 = Long.rotateLeft(longVar10, R1);
longVar10 *= C2;
longVar1 ^= longVar10;
longVar1 = Long.rotateLeft(longVar1, R2);
longVar1 += longVar3;
longVar1 = longVar1 * M + N1;
longVar12 *= C2;
longVar12 = Long.rotateLeft(longVar12, R3);
longVar12 *= C1;
longVar3 ^= longVar12;
longVar3 = Long.rotateLeft(longVar3, R1);
longVar3 += longVar1;
longVar3 = longVar3 * M + N2;
}
long longVar10 = intLiteral7;
long longVar12 = intLiteral7;
final int intVar8 = intLiteral14;
switch(offset + length - intVar8) {
case 15:
longVar12 ^= ((long) data[intVar8 + 14] & 0xff) << 48;
case 14:
longVar12 ^= ((long) data[intVar8 + 13] & 0xff) << 40;
case 13:
longVar12 ^= ((long) data[intVar8 + 12] & 0xff) << 32;
case 12:
longVar12 ^= ((long) data[intVar8 + 11] & 0xff) << 24;
case 11:
longVar12 ^= ((long) data[intVar8 + 10] & 0xff) << 16;
case 10:
longVar12 ^= ((long) data[intVar8 + 9] & 0xff) << 8;
case 9:
longVar12 ^= data[intVar8 + 8] & 0xff;
longVar12 *= C2;
longVar12 = Long.rotateLeft(longVar12, R3);
longVar12 *= C1;
longVar3 ^= longVar12;
case 8:
longVar10 ^= ((long) data[intVar8 + 7] & 0xff) << 56;
case 7:
longVar10 ^= ((long) data[intVar8 + 6] & 0xff) << 48;
case 6:
longVar10 ^= ((long) data[intVar8 + 5] & 0xff) << 40;
case 5:
longVar10 ^= ((long) data[intVar8 + 4] & 0xff) << 32;
case 4:
longVar10 ^= ((long) data[intVar8 + 3] & 0xff) << 24;
case 3:
longVar10 ^= ((long) data[intVar8 + 2] & 0xff) << 16;
case 2:
longVar10 ^= ((long) data[intVar8 + 1] & 0xff) << 8;
case 1:
longVar10 ^= data[intVar8] & 0xff;
longVar10 *= C1;
longVar10 = Long.rotateLeft(longVar10, R1);
longVar10 *= C2;
longVar1 ^= longVar10;
}
longVar1 ^= length;
longVar3 ^= length;
longVar1 += longVar3;
longVar3 += longVar1;
longVar1 = fmix64(longVar1);
longVar3 = fmix64(longVar3);
longVar1 += longVar3;
longVar3 += longVar1;
return new long[] { longVar1, longVar3 };
}",0
"public static long hash64(final byte[] data, final int offset, final int length, final int seed) {
// Note: This fails to apply masking using 0xffffffffL to the seed.
long longVar1 = longLiteral2;
final int intVar3 = intLiteral4;
for (int intVar13 = intLiteral14; intVar5 < intLiteral1; intVar5++) {
final int intVar7 = intLiteral8;
long longVar9 = longLiteral10;
longVar9 *= C1;
longVar9 = Long.rotateLeft(longVar9, R1);
longVar9 *= C2;
longVar1 ^= longVar9;
longVar1 = Long.rotateLeft(longVar1, R2) * M + N1;
}
long longVar11 = intLiteral6;
final int intVar7 = intLiteral12;
switch(offset + length - intVar7) {
case 7:
longVar11 ^= ((long) data[intVar7 + 6] & 0xff) << 48;
case 6:
longVar11 ^= ((long) data[intVar7 + 5] & 0xff) << 40;
case 5:
longVar11 ^= ((long) data[intVar7 + 4] & 0xff) << 32;
case 4:
longVar11 ^= ((long) data[intVar7 + 3] & 0xff) << 24;
case 3:
longVar11 ^= ((long) data[intVar7 + 2] & 0xff) << 16;
case 2:
longVar11 ^= ((long) data[intVar7 + 1] & 0xff) << 8;
case 1:
longVar11 ^= ((long) data[intVar7] & 0xff);
longVar11 *= C1;
longVar11 = Long.rotateLeft(longVar11, R1);
longVar11 *= C2;
longVar1 ^= longVar11;
}
longVar1 ^= length;
longVar1 = fmix64(longVar1);
return longVar1;
}",0
"@Override
protected byte[] doDecoding(final byte[] bytes) {
if (bytes == null) {
return null;
}
return Base64.decodeBase64(bytes);
}",0
"protected byte[] doEncoding(byte[] bytes) {
if (bytes == null) {
return null;
}
byte[] byteArrayVar1 = byteArrayLiteral2;
if (this.encodeBlanks) {
for (int intVar5 = intLiteral6; intVar3 < intLiteral1; intVar3++) {
if (byteArrayVar1[intVar3] == BLANK) {
byteArrayVar1[intVar3] = UNDERSCORE;
}
}
}
return byteArrayVar1;
}",0
"public static final byte[] decodeQuotedPrintable(byte[] bytes) throws DecoderException {
if (bytes == null) {
return null;
}
ByteArrayOutputStream bytearrayoutputstreamVar1 = bytearrayoutputstreamLiteral2;
for (int intVar10 = intLiteral11; intVar3 < intLiteral1; intVar3++) {
int intVar5 = intLiteral6;
if (intVar5 == ESCAPE_CHAR) {
try {
int intVar7 = intLiteral8;
int intVar9 = intLiteral8;
bytearrayoutputstreamVar1.write((char) ((intVar7 << 4) + intVar9));
} catch (ArrayIndexOutOfBoundsException e) {
throw new DecoderException(""Invalid quoted-printable encoding"", e);
}
} else {
bytearrayoutputstreamVar1.write(intVar5);
}
}
return bytearrayoutputstreamVar1.toByteArray();
}",0
"public static final byte[] encodeUrl(BitSet urlsafe, byte[] bytes) {
if (bytes == null) {
return null;
}
if (urlsafe == null) {
urlsafe = WWW_FORM_URL;
}
ByteArrayOutputStream bytearrayoutputstreamVar1 = bytearrayoutputstreamLiteral2;
for (int intVar11 = intLiteral12; intVar3 < intLiteral1; intVar3++) {
int intVar5 = intLiteral6;
if (intVar5 < 0) {
intVar5 = 256 + intVar5;
}
if (urlsafe.get(intVar5)) {
if (intVar5 == ' ') {
intVar5 = '+';
}
bytearrayoutputstreamVar1.write(intVar5);
} else {
bytearrayoutputstreamVar1.write(ESCAPE_CHAR);
char charVar7 = charLiteral8;
char charVar9 = charLiteral10;
bytearrayoutputstreamVar1.write(charVar7);
bytearrayoutputstreamVar1.write(charVar9);
}
}
return bytearrayoutputstreamVar1.toByteArray();
}",0
"public static byte[] getBytesUnchecked(final String string, final String charsetName) {
if (string == null) {
return null;
}
try {
return string.getBytes(charsetName);
} catch (final UnsupportedEncodingException e) {
throw StringUtils.newIllegalStateException(charsetName, e);
}
}",0
"@Deprecated
public static long hash64(final byte[] data, final int offset, final int length, final int seed) {
// Note: This fails to apply masking using 0xffffffffL to the seed.
long longVar1 = longLiteral2;
final int intVar3 = intLiteral4;
for (int intVar13 = intLiteral14; intVar5 < intLiteral1; intVar5++) {
final int intVar7 = intLiteral8;
long longVar9 = longLiteral10;
longVar9 *= C1;
longVar9 = Long.rotateLeft(longVar9, R1);
longVar9 *= C2;
longVar1 ^= longVar9;
longVar1 = Long.rotateLeft(longVar1, R2) * M + N1;
}
long longVar11 = intLiteral6;
final int intVar7 = intLiteral12;
switch(offset + length - intVar7) {
case 7:
longVar11 ^= ((long) data[intVar7 + 6] & 0xff) << 48;
case 6:
longVar11 ^= ((long) data[intVar7 + 5] & 0xff) << 40;
case 5:
longVar11 ^= ((long) data[intVar7 + 4] & 0xff) << 32;
case 4:
longVar11 ^= ((long) data[intVar7 + 3] & 0xff) << 24;
case 3:
longVar11 ^= ((long) data[intVar7 + 2] & 0xff) << 16;
case 2:
longVar11 ^= ((long) data[intVar7 + 1] & 0xff) << 8;
case 1:
longVar11 ^= ((long) data[intVar7] & 0xff);
longVar11 *= C1;
longVar11 = Long.rotateLeft(longVar11, R1);
longVar11 *= C2;
longVar1 ^= longVar11;
}
longVar1 ^= length;
longVar1 = fmix64(longVar1);
return longVar1;
}",0
"public static final byte[] decodeQuotedPrintable(final byte[] bytes) throws DecoderException {
if (bytes == null) {
return null;
}
final ByteArrayOutputStream bytearrayoutputstreamVar1 = bytearrayoutputstreamLiteral2;
for (int intVar11 = intLiteral12; intVar3 < intLiteral1; intVar3++) {
final int intVar5 = intLiteral6;
if (intVar5 == ESCAPE_CHAR) {
try {
if (bytes[++intVar3] == CR) {
continue;
}
final int intVar7 = intLiteral8;
final int intVar9 = intLiteral10;
bytearrayoutputstreamVar1.write((char) ((intVar7 << 4) + intVar9));
} catch (final ArrayIndexOutOfBoundsException e) {
throw new DecoderException(""Invalid quoted-printable encoding"", e);
}
} else if (intVar5 != CR && intVar5 != LF) {
bytearrayoutputstreamVar1.write(intVar5);
}
}
return bytearrayoutputstreamVar1.toByteArray();
}",0
"@Override
public void update(final byte[] b, int off, int len) {
int intVar1 = intLiteral2;
while (len > 7) {
final int intVar3 = intLiteral4;
final int intVar5 = intLiteral6;
final int intVar7 = intLiteral8;
final int intVar9 = intLiteral10;
intVar1 = (T[T8_7_start + intVar3] ^ T[T8_6_start + intVar5]) ^ (T[T8_5_start + intVar7] ^ T[T8_4_start + intVar9]);
final int intVar11 = intLiteral12;
final int intVar13 = intLiteral14;
final int intVar15 = intLiteral16;
final int intVar17 = intLiteral18;
intVar1 ^= (T[T8_3_start + intVar11] ^ T[T8_2_start + intVar13]) ^ (T[T8_1_start + intVar15] ^ T[T8_0_start + intVar17]);
off += 8;
len -= 8;
}
switch(len) {
case 7:
intVar1 = (intVar1 >>> 8) ^ T[T8_0_start + ((intVar1 ^ b[off++]) & 0xff)];
case 6:
intVar1 = (intVar1 >>> 8) ^ T[T8_0_start + ((intVar1 ^ b[off++]) & 0xff)];
case 5:
intVar1 = (intVar1 >>> 8) ^ T[T8_0_start + ((intVar1 ^ b[off++]) & 0xff)];
case 4:
intVar1 = (intVar1 >>> 8) ^ T[T8_0_start + ((intVar1 ^ b[off++]) & 0xff)];
case 3:
intVar1 = (intVar1 >>> 8) ^ T[T8_0_start + ((intVar1 ^ b[off++]) & 0xff)];
case 2:
intVar1 = (intVar1 >>> 8) ^ T[T8_0_start + ((intVar1 ^ b[off++]) & 0xff)];
case 1:
intVar1 = (intVar1 >>> 8) ^ T[T8_0_start + ((intVar1 ^ b[off++]) & 0xff)];
default:
break;
}
crc = intVar1;
}",0
"int getMinRating(final int sumLength) {
int intVar1 = intLiteral2;
if (sumLength <= FOUR) {
intVar1 = FIVE;
} else if (sumLength >= FIVE && sumLength <= SEVEN) {
intVar1 = FOUR;
} else if (sumLength >= EIGHT && sumLength <= ELEVEN) {
intVar1 = THREE;
} else if (sumLength == TWELVE) {
intVar1 = TWO;
} else {
intVar1 = ONE;
}
return intVar1;
}",0
protected final byte byteVar1 = byteLiteral2;,0
"public static byte[] getBytesUnchecked(final String string, final String charsetName) {
if (string == null) {
return null;
}
try {
return string.getBytes(charsetName);
} catch (final UnsupportedEncodingException e) {
throw StringUtils.newIllegalStateException(charsetName, e);
}
}",0
"public static final byte[] decodeQuotedPrintable(final byte[] bytes) throws DecoderException {
if (bytes == null) {
return null;
}
final ByteArrayOutputStream bytearrayoutputstreamVar1 = bytearrayoutputstreamLiteral2;
for (int intVar10 = intLiteral11; intVar3 < intLiteral1; intVar3++) {
final int intVar5 = intLiteral6;
if (intVar5 == ESCAPE_CHAR) {
try {
final int intVar7 = intLiteral8;
final int intVar9 = intLiteral8;
bytearrayoutputstreamVar1.write((char) ((intVar7 << 4) + intVar9));
} catch (final ArrayIndexOutOfBoundsException e) {
throw new DecoderException(""Invalid quoted-printable encoding"", e);
}
} else {
bytearrayoutputstreamVar1.write(intVar5);
}
}
return bytearrayoutputstreamVar1.toByteArray();
}",0
"@Override
protected byte[] doEncoding(final byte[] bytes) {
if (bytes == null) {
return null;
}
final byte[] byteArrayVar1 = byteArrayLiteral2;
if (this.encodeBlanks) {
for (int intVar5 = intLiteral6; intVar3 < intLiteral1; intVar3++) {
if (byteArrayVar1[intVar3] == SPACE) {
byteArrayVar1[intVar3] = UNDERSCORE;
}
}
}
return byteArrayVar1;
}",0
"void decode(byte[] in, int inPos, int inAvail) {
if (eof) {
return;
}
if (inAvail < 0) {
eof = true;
}
for (int intVar7 = intLiteral8; intVar1 < intLiteral1; intVar1++) {
byte byteVar3 = byteLiteral4;
if (byteVar3 == PAD) {
eof = true;
break;
} else {
ensureBufferSize(decodeSize);
if (byteVar3 >= 0 && byteVar3 < this.decodeTable.length) {
int intVar5 = intLiteral6;
if (intVar5 >= 0) {
modulus = (modulus + 1) % BYTES_PER_ENCODED_BLOCK;
bitWorkArea = (bitWorkArea << BITS_PER_ENCODED_BYTE) + intVar5;
if (modulus == 0) {
buffer[pos++] = (byte) ((bitWorkArea >> 32) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea >> 24) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea >> 16) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea >> 8) & MASK_8BITS);
buffer[pos++] = (byte) (bitWorkArea & MASK_8BITS);
}
}
}
}
}
// Two forms of EOF as far as Base32 decoder is concerned: actual
if (eof && modulus >= 2) {
ensureBufferSize(decodeSize);
switch(modulus) {
case 2:
buffer[pos++] = (byte) ((bitWorkArea >> 2) & MASK_8BITS);
break;
case 3:
buffer[pos++] = (byte) ((bitWorkArea >> 7) & MASK_8BITS);
break;
case 4:
bitWorkArea = bitWorkArea >> 4;
buffer[pos++] = (byte) ((bitWorkArea >> 8) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea) & MASK_8BITS);
break;
case 5:
bitWorkArea = bitWorkArea >> 1;
buffer[pos++] = (byte) ((bitWorkArea >> 16) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea >> 8) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea) & MASK_8BITS);
break;
case 6:
bitWorkArea = bitWorkArea >> 6;
buffer[pos++] = (byte) ((bitWorkArea >> 16) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea >> 8) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea) & MASK_8BITS);
break;
case 7:
bitWorkArea = bitWorkArea >> 3;
buffer[pos++] = (byte) ((bitWorkArea >> 24) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea >> 16) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea >> 8) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea) & MASK_8BITS);
break;
}
}
}",0
"public static final byte[] encodeQuotedPrintable(BitSet printable, byte[] bytes) {
if (bytes == null) {
return null;
}
if (printable == null) {
printable = PRINTABLE_CHARS;
}
ByteArrayOutputStream bytearrayoutputstreamVar1 = bytearrayoutputstreamLiteral2;
for (int intVar7 = intLiteral8; intVar3 < intLiteral1; intVar3++) {
int intVar5 = intLiteral6;
if (intVar5 < 0) {
intVar5 = 256 + intVar5;
}
if (printable.get(intVar5)) {
bytearrayoutputstreamVar1.write(intVar5);
} else {
encodeQuotedPrintable(intVar5, bytearrayoutputstreamVar1);
}
}
return bytearrayoutputstreamVar1.toByteArray();
}",0
"@Override
void encode(byte[] in, int inPos, int inAvail) {
if (eof) {
return;
}
if (inAvail < 0) {
eof = true;
if (0 == modulus && lineLength == 0) {
return;
}
ensureBufferSize(encodeSize);
int intVar1 = intLiteral2;
switch(modulus) {
case 1:
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 3) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea << 2) & MASK_5BITS];
buffer[pos++] = PAD;
buffer[pos++] = PAD;
buffer[pos++] = PAD;
buffer[pos++] = PAD;
buffer[pos++] = PAD;
buffer[pos++] = PAD;
break;
case 2:
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 11) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 6) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 1) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea << 4) & MASK_5BITS];
buffer[pos++] = PAD;
buffer[pos++] = PAD;
buffer[pos++] = PAD;
buffer[pos++] = PAD;
break;
case 3:
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 19) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 14) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 9) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 4) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea << 1) & MASK_5BITS];
buffer[pos++] = PAD;
buffer[pos++] = PAD;
buffer[pos++] = PAD;
break;
case 4:
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 27) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 22) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 17) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 12) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 7) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 2) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea << 3) & MASK_5BITS];
buffer[pos++] = PAD;
break;
}
currentLinePos += pos - intVar1;
if (lineLength > 0 && currentLinePos > 0) {
System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
pos += lineSeparator.length;
}
} else {
for (int intVar7 = intLiteral8; intVar3 < intLiteral1; intVar3++) {
ensureBufferSize(encodeSize);
modulus = (modulus + 1) % BYTES_PER_UNENCODED_BLOCK;
int intVar5 = intLiteral6;
if (intVar5 < 0) {
intVar5 += 256;
}
bitWorkArea = (bitWorkArea << 8) + intVar5;
if (0 == modulus) {
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 35) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 30) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 25) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 20) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 15) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 10) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 5) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) bitWorkArea & MASK_5BITS];
currentLinePos += BYTES_PER_ENCODED_BLOCK;
if (lineLength > 0 && lineLength <= currentLinePos) {
System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
pos += lineSeparator.length;
currentLinePos = 0;
}
}
}
}
}",0
"@Override
void decode(byte[] in, int inPos, int inAvail) {
if (eof) {
return;
}
if (inAvail < 0) {
eof = true;
}
for (int intVar7 = intLiteral8; intVar1 < intLiteral1; intVar1++) {
ensureBufferSize(decodeSize);
byte byteVar3 = byteLiteral4;
if (byteVar3 == PAD) {
eof = true;
break;
} else {
if (byteVar3 >= 0 && byteVar3 < DECODE_TABLE.length) {
int intVar5 = intLiteral6;
if (intVar5 >= 0) {
modulus = (modulus + 1) % BYTES_PER_ENCODED_BLOCK;
bitWorkArea = (bitWorkArea << BITS_PER_ENCODED_BYTE) + intVar5;
if (modulus == 0) {
buffer[pos++] = (byte) ((bitWorkArea >> 16) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea >> 8) & MASK_8BITS);
buffer[pos++] = (byte) (bitWorkArea & MASK_8BITS);
}
}
}
}
}
// Two forms of EOF as far as base64 decoder is concerned: actual
if (eof && modulus != 0) {
ensureBufferSize(decodeSize);
switch(modulus) {
case 2:
bitWorkArea = bitWorkArea >> 4;
buffer[pos++] = (byte) ((bitWorkArea) & MASK_8BITS);
break;
case 3:
bitWorkArea = bitWorkArea >> 2;
buffer[pos++] = (byte) ((bitWorkArea >> 8) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea) & MASK_8BITS);
break;
}
}
}",0
"@Override
void encode(byte[] in, int inPos, int inAvail, Context context) {
if (context.eof) {
return;
}
if (inAvail < 0) {
context.eof = true;
if (0 == context.modulus && lineLength == 0) {
return;
}
final byte[] byteArrayVar1 = byteArrayLiteral2;
int intVar3 = intLiteral4;
switch(context.modulus) {
case 1:
// top 6 bits:
context.buffer[context.pos++] = encodeTable[(context.ibitWorkArea >> 2) & MASK_6BITS];
context.buffer[context.pos++] = encodeTable[(context.ibitWorkArea << 4) & MASK_6BITS];
if (encodeTable == STANDARD_ENCODE_TABLE) {
context.buffer[context.pos++] = PAD;
context.buffer[context.pos++] = PAD;
}
break;
case 2:
context.buffer[context.pos++] = encodeTable[(context.ibitWorkArea >> 10) & MASK_6BITS];
context.buffer[context.pos++] = encodeTable[(context.ibitWorkArea >> 4) & MASK_6BITS];
context.buffer[context.pos++] = encodeTable[(context.ibitWorkArea << 2) & MASK_6BITS];
if (encodeTable == STANDARD_ENCODE_TABLE) {
context.buffer[context.pos++] = PAD;
}
break;
}
context.currentLinePos += context.pos - intVar3;
if (lineLength > 0 && context.currentLinePos > 0) {
System.arraycopy(lineSeparator, 0, context.buffer, context.pos, lineSeparator.length);
context.pos += lineSeparator.length;
}
} else {
for (int intVar9 = intLiteral10; intVar5 < intLiteral1; intVar5++) {
final byte[] byteArrayVar1 = byteArrayLiteral2;
context.modulus = (context.modulus + 1) % BYTES_PER_UNENCODED_BLOCK;
int intVar7 = intLiteral8;
if (intVar7 < 0) {
intVar7 += 256;
}
context.ibitWorkArea = (context.ibitWorkArea << 8) + intVar7;
if (0 == context.modulus) {
context.buffer[context.pos++] = encodeTable[(context.ibitWorkArea >> 18) & MASK_6BITS];
context.buffer[context.pos++] = encodeTable[(context.ibitWorkArea >> 12) & MASK_6BITS];
context.buffer[context.pos++] = encodeTable[(context.ibitWorkArea >> 6) & MASK_6BITS];
context.buffer[context.pos++] = encodeTable[context.ibitWorkArea & MASK_6BITS];
context.currentLinePos += BYTES_PER_ENCODED_BLOCK;
if (lineLength > 0 && lineLength <= context.currentLinePos) {
System.arraycopy(lineSeparator, 0, context.buffer, context.pos, lineSeparator.length);
context.pos += lineSeparator.length;
context.currentLinePos = 0;
}
}
}
}
}",0
"public Languages.LanguageSet guessLanguages(String input) {
// todo: locale?
String stringVar1 = stringLiteral2;
// System.out.println(""Testing text: '"" + text + ""'"");
Set<String> set<string>Var3 = set<string>Literal4;
for (LangRule langruleVar5 : this.rules) {
if (langruleVar5.matches(stringVar1)) {
if (langruleVar5.acceptOnMatch) {
set<string>Var3.retainAll(langruleVar5.languages);
} else {
set<string>Var3.removeAll(langruleVar5.languages);
}
// System.out.println(""Current languages: "" + langs);
} else {
}
}
Languages.LanguageSet languages.languagesetVar6 = languages.languagesetLiteral7;
return languages.languagesetVar6.equals(Languages.NO_LANGUAGES) ? Languages.ANY_LANGUAGE : languages.languagesetVar6;
}",1
"public Object encode(Object object) throws EncoderException {
try {
byte[] byteArrayVar1 = byteArrayLiteral2;
return encodeHex(byteArrayVar1);
} catch (ClassCastException e) {
throw new EncoderException(e.getMessage(), e);
}
}",1
"void encode(byte[] in, int inPos, int inAvail) {
if (eof) {
return;
}
if (inAvail < 0) {
eof = true;
if (0 == modulus) {
return;
}
ensureBufferSize(encodeSize);
switch(modulus) {
case 1:
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 3) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea << 2) & MASK_5BITS];
buffer[pos++] = PAD;
buffer[pos++] = PAD;
buffer[pos++] = PAD;
buffer[pos++] = PAD;
buffer[pos++] = PAD;
buffer[pos++] = PAD;
break;
case 2:
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 11) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 6) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 1) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea << 4) & MASK_5BITS];
buffer[pos++] = PAD;
buffer[pos++] = PAD;
buffer[pos++] = PAD;
buffer[pos++] = PAD;
break;
case 3:
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 19) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 14) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 9) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 4) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea << 1) & MASK_5BITS];
buffer[pos++] = PAD;
buffer[pos++] = PAD;
buffer[pos++] = PAD;
break;
case 4:
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 27) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 22) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 17) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 12) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 7) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 2) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea << 3) & MASK_5BITS];
buffer[pos++] = PAD;
break;
}
if (lineLength > 0) {
System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
pos += lineSeparator.length;
}
} else {
for (int intVar5 = intLiteral6; intVar1 < intLiteral1; intVar1++) {
ensureBufferSize(encodeSize);
modulus = (++modulus) % BITS_PER_ENCODED_BYTE;
int intVar3 = intLiteral4;
if (intVar3 < 0) {
intVar3 += 256;
}
bitWorkArea = (bitWorkArea << 8) + intVar3;
if (0 == modulus) {
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 35) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 30) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 25) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 20) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 15) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 10) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 5) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) bitWorkArea & MASK_5BITS];
currentLinePos += BYTES_PER_ENCODED_BLOCK;
if (lineLength > 0 && lineLength <= currentLinePos) {
System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
pos += lineSeparator.length;
currentLinePos = 0;
}
}
}
}
}",0
"void encode(byte[] in, int inPos, int inAvail) {
if (eof) {
return;
}
if (inAvail < 0) {
eof = true;
if (0 == modulus) {
return;
}
ensureBufferSize(encodeSize);
switch(modulus) {
case 1:
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 3) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea << 2) & MASK_5BITS];
buffer[pos++] = PAD;
buffer[pos++] = PAD;
buffer[pos++] = PAD;
buffer[pos++] = PAD;
buffer[pos++] = PAD;
buffer[pos++] = PAD;
break;
case 2:
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 11) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 6) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 1) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea << 4) & MASK_5BITS];
buffer[pos++] = PAD;
buffer[pos++] = PAD;
buffer[pos++] = PAD;
buffer[pos++] = PAD;
break;
case 3:
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 19) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 14) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 9) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 4) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea << 1) & MASK_5BITS];
buffer[pos++] = PAD;
buffer[pos++] = PAD;
buffer[pos++] = PAD;
break;
case 4:
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 27) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 22) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 17) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 12) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 7) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 2) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea << 3) & MASK_5BITS];
buffer[pos++] = PAD;
break;
}
if (lineLength > 0) {
System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
pos += lineSeparator.length;
}
} else {
for (int intVar5 = intLiteral6; intVar1 < intLiteral1; intVar1++) {
ensureBufferSize(encodeSize);
modulus = (++modulus) % BITS_PER_ENCODED_CHAR;
int intVar3 = intLiteral4;
if (intVar3 < 0) {
intVar3 += 256;
}
bitWorkArea = (bitWorkArea << 8) + intVar3;
if (0 == modulus) {
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 35) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 30) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 25) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 20) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 15) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 10) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) (bitWorkArea >> 5) & MASK_5BITS];
buffer[pos++] = encodeTable[(int) bitWorkArea & MASK_5BITS];
currentLinePos += BYTES_PER_ENCODED_BLOCK;
if (lineLength > 0 && lineLength <= currentLinePos) {
System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
pos += lineSeparator.length;
currentLinePos = 0;
}
}
}
}
}",0
"void decode(byte[] in, int inPos, int inAvail) {
if (eof) {
return;
}
if (inAvail < 0) {
eof = true;
}
for (int intVar7 = intLiteral8; intVar1 < intLiteral1; intVar1++) {
ensureBufferSize(decodeSize);
byte byteVar3 = byteLiteral4;
if (byteVar3 == PAD) {
eof = true;
break;
} else {
if (byteVar3 >= 0 && byteVar3 < DECODE_TABLE.length) {
int intVar5 = intLiteral6;
if (intVar5 >= 0) {
modulus = (++modulus) % BYTES_PER_ENCODED_BLOCK;
bitWorkArea = (bitWorkArea << BITS_PER_ENCODED_BYTE) + intVar5;
if (modulus == 0) {
buffer[pos++] = (byte) ((bitWorkArea >> 16) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea >> 8) & MASK_8BITS);
buffer[pos++] = (byte) (bitWorkArea & MASK_8BITS);
}
}
}
}
}
// Two forms of EOF as far as base64 decoder is concerned: actual
if (eof && modulus != 0) {
ensureBufferSize(decodeSize);
switch(modulus) {
case 2:
bitWorkArea = bitWorkArea >> 4;
buffer[pos++] = (byte) ((bitWorkArea) & MASK_8BITS);
break;
case 3:
bitWorkArea = bitWorkArea >> 2;
buffer[pos++] = (byte) ((bitWorkArea >> 8) & MASK_8BITS);
buffer[pos++] = (byte) ((bitWorkArea) & MASK_8BITS);
break;
}
}
}",1
"public static byte[] sha384(String data) {
return sha384(data.getBytes());
}",1
"public String metaphone(String txt) {
boolean booleanVar1 = booleanLiteral2;
if ((txt == null) || (txt.length() == 0)) {
return """";
}
if (txt.length() == 1) {
return txt.toUpperCase();
}
char[] charArrayVar3 = charArrayLiteral4;
StringBuffer stringbufferVar5 = stringbufferLiteral6;
StringBuffer stringbufferVar7 = stringbufferLiteral8;
switch(charArrayVar3[0]) {
case 'K':
case 'G':
case 'P':
if (charArrayVar3[1] == 'N') {
stringbufferVar5.append(charArrayVar3, 1, charArrayVar3.length - 1);
} else {
stringbufferVar5.append(charArrayVar3);
}
break;
case 'A':
if (charArrayVar3[1] == 'E') {
stringbufferVar5.append(charArrayVar3, 1, charArrayVar3.length - 1);
} else {
stringbufferVar5.append(charArrayVar3);
}
break;
case 'W':
if (charArrayVar3[1] == 'R') {
stringbufferVar5.append(charArrayVar3, 1, charArrayVar3.length - 1);
break;
}
if (charArrayVar3[1] == 'H') {
stringbufferVar5.append(charArrayVar3, 1, charArrayVar3.length - 1);
stringbufferVar5.setCharAt(0, 'W');
} else {
stringbufferVar5.append(charArrayVar3);
}
break;
case 'X':
charArrayVar3[0] = 'S';
stringbufferVar5.append(charArrayVar3);
break;
default:
stringbufferVar5.append(charArrayVar3);
}
int intVar9 = intLiteral10;
int intVar11 = intLiteral12;
while ((stringbufferVar7.length() < this.getMaxCodeLen()) && (intVar11 < intVar9)) {
char charVar13 = charLiteral14;
if ((charVar13 != 'C') && (isPreviousChar(stringbufferVar5, intVar11, charVar13))) {
intVar11++;
} else {
switch(charVar13) {
case 'A':
case 'E':
case 'I':
case 'O':
case 'U':
if (intVar11 == 0) {
stringbufferVar7.append(charVar13);
}
break;
case 'B':
if (isPreviousChar(stringbufferVar5, intVar11, 'M') && isLastChar(intVar9, intVar11)) {
break;
}
stringbufferVar7.append(charVar13);
break;
case 'C':
if (isPreviousChar(stringbufferVar5, intVar11, 'S') && !isLastChar(intVar9, intVar11) && (FRONTV.indexOf(stringbufferVar5.charAt(intVar11 + 1)) >= 0)) {
break;
}
if (regionMatch(stringbufferVar5, intVar11, ""CIA"")) {
stringbufferVar7.append('X');
break;
}
if (!isLastChar(intVar9, intVar11) && (FRONTV.indexOf(stringbufferVar5.charAt(intVar11 + 1)) >= 0)) {
stringbufferVar7.append('S');
break;
}
if (isPreviousChar(stringbufferVar5, intVar11, 'S') && isNextChar(stringbufferVar5, intVar11, 'H')) {
stringbufferVar7.append('K');
break;
}
if (isNextChar(stringbufferVar5, intVar11, 'H')) {
if ((intVar11 == 0) && (intVar9 >= 3) && isVowel(stringbufferVar5, 2)) {
stringbufferVar7.append('K');
} else {
stringbufferVar7.append('X');
}
} else {
stringbufferVar7.append('K');
}
break;
case 'D':
if (!isLastChar(intVar9, intVar11 + 1) && isNextChar(stringbufferVar5, intVar11, 'G') && (FRONTV.indexOf(stringbufferVar5.charAt(intVar11 + 2)) >= 0)) {
stringbufferVar7.append('J');
intVar11 += 2;
} else {
stringbufferVar7.append('T');
}
break;
case 'G':
if (isLastChar(intVar9, intVar11 + 1) && isNextChar(stringbufferVar5, intVar11, 'H')) {
break;
}
if (!isLastChar(intVar9, intVar11 + 1) && isNextChar(stringbufferVar5, intVar11, 'H') && !isVowel(stringbufferVar5, intVar11 + 2)) {
break;
}
if ((intVar11 > 0) && (regionMatch(stringbufferVar5, intVar11, ""GN"") || regionMatch(stringbufferVar5, intVar11, ""GNED""))) {
break;
}
if (isPreviousChar(stringbufferVar5, intVar11, 'G')) {
booleanVar1 = true;
} else {
booleanVar1 = false;
}
if (!isLastChar(intVar9, intVar11) && (FRONTV.indexOf(stringbufferVar5.charAt(intVar11 + 1)) >= 0) && (!booleanVar1)) {
stringbufferVar7.append('J');
} else {
stringbufferVar7.append('K');
}
break;
case 'H':
if (isLastChar(intVar9, intVar11)) {
break;
}
if ((intVar11 > 0) && (VARSON.indexOf(stringbufferVar5.charAt(intVar11 - 1)) >= 0)) {
break;
}
if (isVowel(stringbufferVar5, intVar11 + 1)) {
stringbufferVar7.append('H');
}
break;
case 'F':
case 'J':
case 'L':
case 'M':
case 'N':
case 'R':
stringbufferVar7.append(charVar13);
break;
case 'K':
if (intVar11 > 0) {
if (!isPreviousChar(stringbufferVar5, intVar11, 'C')) {
stringbufferVar7.append(charVar13);
}
} else {
stringbufferVar7.append(charVar13);
}
break;
case 'P':
if (isNextChar(stringbufferVar5, intVar11, 'H')) {
stringbufferVar7.append('F');
} else {
stringbufferVar7.append(charVar13);
}
break;
case 'Q':
stringbufferVar7.append('K');
break;
case 'S':
if (regionMatch(stringbufferVar5, intVar11, ""SH"") || regionMatch(stringbufferVar5, intVar11, ""SIO"") || regionMatch(stringbufferVar5, intVar11, ""SIA"")) {
stringbufferVar7.append('X');
} else {
stringbufferVar7.append('S');
}
break;
case 'T':
if (regionMatch(stringbufferVar5, intVar11, ""TIA"") || regionMatch(stringbufferVar5, intVar11, ""TIO"")) {
stringbufferVar7.append('X');
break;
}
if (regionMatch(stringbufferVar5, intVar11, ""TCH"")) {
break;
}
if (regionMatch(stringbufferVar5, intVar11, ""TH"")) {
stringbufferVar7.append('0');
} else {
stringbufferVar7.append('T');
}
break;
case 'V':
stringbufferVar7.append('F');
break;
case 'W':
case 'Y':
if (!isLastChar(intVar9, intVar11) && isVowel(stringbufferVar5, intVar11 + 1)) {
stringbufferVar7.append(charVar13);
}
break;
case 'X':
stringbufferVar7.append('K');
stringbufferVar7.append('S');
break;
case 'Z':
stringbufferVar7.append('S');
break;
}
intVar11++;
}
if (stringbufferVar7.length() > this.getMaxCodeLen()) {
stringbufferVar7.setLength(this.getMaxCodeLen());
}
}
return stringbufferVar7.toString();
}",1
"void decode(byte[] in, int inPos, int inAvail) {
if (eof) {
return;
}
if (inAvail < 0) {
eof = true;
}
for (int intVar7 = intLiteral8; intVar1 < intLiteral1; intVar1++) {
if (buf == null || buf.length - pos < decodeSize) {
resizeBuf();
}
byte byteVar3 = byteLiteral4;
if (byteVar3 == PAD) {
modulus = (++modulus) % 4;
x = x << 6;
switch(modulus) {
case 3:
x = x << 6;
case 0:
buf[pos++] = (byte) ((x >> 16) & MASK_8BITS);
if (modulus == 0) {
buf[pos++] = (byte) ((x >> 8) & MASK_8BITS);
}
default:
eof = true;
return;
}
} else {
if (byteVar3 >= 0 && byteVar3 < base64ToInt.length) {
int intVar5 = intLiteral6;
if (intVar5 >= 0) {
modulus = (++modulus) % 4;
x = (x << 6) + intVar5;
if (modulus == 0) {
buf[pos++] = (byte) ((x >> 16) & MASK_8BITS);
buf[pos++] = (byte) ((x >> 8) & MASK_8BITS);
buf[pos++] = (byte) (x & MASK_8BITS);
}
}
}
}
}
}",1
"public static Mac getInitializedMac(final HmacAlgorithms algorithm, final byte[] key) {
return getInitializedMac(algorithm, key);
}",0
"public static byte[] sha256(String data) {
return sha256(data.getBytes());
}",1
"@Deprecated
public static long[] hash128(final String data) {
final byte[] byteArrayVar1 = byteArrayLiteral2;
return hash128(byteArrayVar1, 0, byteArrayVar1.length, DEFAULT_SEED);
}",1
"@Override
void encode(byte[] in, int inPos, int inAvail, Context context) {
if (context.eof) {
return;
}
if (inAvail < 0) {
context.eof = true;
if (0 == context.modulus && lineLength == 0) {
return;
}
final byte[] byteArrayVar1 = byteArrayLiteral2;
final int intVar3 = intLiteral4;
switch(context.modulus) {
case 1:
byteArrayVar1[context.pos++] = encodeTable[(int) (context.lbitWorkArea >> 3) & MASK_5BITS];
byteArrayVar1[context.pos++] = encodeTable[(int) (context.lbitWorkArea << 2) & MASK_5BITS];
byteArrayVar1[context.pos++] = PAD;
byteArrayVar1[context.pos++] = PAD;
byteArrayVar1[context.pos++] = PAD;
byteArrayVar1[context.pos++] = PAD;
byteArrayVar1[context.pos++] = PAD;
byteArrayVar1[context.pos++] = PAD;
break;
case 2:
byteArrayVar1[context.pos++] = encodeTable[(int) (context.lbitWorkArea >> 11) & MASK_5BITS];
byteArrayVar1[context.pos++] = encodeTable[(int) (context.lbitWorkArea >> 6) & MASK_5BITS];
byteArrayVar1[context.pos++] = encodeTable[(int) (context.lbitWorkArea >> 1) & MASK_5BITS];
byteArrayVar1[context.pos++] = encodeTable[(int) (context.lbitWorkArea << 4) & MASK_5BITS];
byteArrayVar1[context.pos++] = PAD;
byteArrayVar1[context.pos++] = PAD;
byteArrayVar1[context.pos++] = PAD;
byteArrayVar1[context.pos++] = PAD;
break;
case 3:
byteArrayVar1[context.pos++] = encodeTable[(int) (context.lbitWorkArea >> 19) & MASK_5BITS];
byteArrayVar1[context.pos++] = encodeTable[(int) (context.lbitWorkArea >> 14) & MASK_5BITS];
byteArrayVar1[context.pos++] = encodeTable[(int) (context.lbitWorkArea >> 9) & MASK_5BITS];
byteArrayVar1[context.pos++] = encodeTable[(int) (context.lbitWorkArea >> 4) & MASK_5BITS];
byteArrayVar1[context.pos++] = encodeTable[(int) (context.lbitWorkArea << 1) & MASK_5BITS];
byteArrayVar1[context.pos++] = PAD;
byteArrayVar1[context.pos++] = PAD;
byteArrayVar1[context.pos++] = PAD;
break;
case 4:
byteArrayVar1[context.pos++] = encodeTable[(int) (context.lbitWorkArea >> 27) & MASK_5BITS];
byteArrayVar1[context.pos++] = encodeTable[(int) (context.lbitWorkArea >> 22) & MASK_5BITS];
byteArrayVar1[context.pos++] = encodeTable[(int) (context.lbitWorkArea >> 17) & MASK_5BITS];
byteArrayVar1[context.pos++] = encodeTable[(int) (context.lbitWorkArea >> 12) & MASK_5BITS];
byteArrayVar1[context.pos++] = encodeTable[(int) (context.lbitWorkArea >> 7) & MASK_5BITS];
byteArrayVar1[context.pos++] = encodeTable[(int) (context.lbitWorkArea >> 2) & MASK_5BITS];
byteArrayVar1[context.pos++] = encodeTable[(int) (context.lbitWorkArea << 3) & MASK_5BITS];
byteArrayVar1[context.pos++] = PAD;
break;
}
context.currentLinePos += context.pos - intVar3;
if (lineLength > 0 && context.currentLinePos > 0) {
System.arraycopy(lineSeparator, 0, byteArrayVar1, context.pos, lineSeparator.length);
context.pos += lineSeparator.length;
}
} else {
for (int intVar9 = intLiteral10; intVar5 < intLiteral1; intVar5++) {
final byte[] byteArrayVar1 = byteArrayLiteral2;
context.modulus = (context.modulus + 1) % BYTES_PER_UNENCODED_BLOCK;
int intVar7 = intLiteral8;
if (intVar7 < 0) {
intVar7 += 256;
}
context.lbitWorkArea = (context.lbitWorkArea << 8) + intVar7;
if (0 == context.modulus) {
byteArrayVar1[context.pos++] = encodeTable[(int) (context.lbitWorkArea >> 35) & MASK_5BITS];
byteArrayVar1[context.pos++] = encodeTable[(int) (context.lbitWorkArea >> 30) & MASK_5BITS];
byteArrayVar1[context.pos++] = encodeTable[(int) (context.lbitWorkArea >> 25) & MASK_5BITS];
byteArrayVar1[context.pos++] = encodeTable[(int) (context.lbitWorkArea >> 20) & MASK_5BITS];
byteArrayVar1[context.pos++] = encodeTable[(int) (context.lbitWorkArea >> 15) & MASK_5BITS];
byteArrayVar1[context.pos++] = encodeTable[(int) (context.lbitWorkArea >> 10) & MASK_5BITS];
byteArrayVar1[context.pos++] = encodeTable[(int) (context.lbitWorkArea >> 5) & MASK_5BITS];
byteArrayVar1[context.pos++] = encodeTable[(int) context.lbitWorkArea & MASK_5BITS];
context.currentLinePos += BYTES_PER_ENCODED_BLOCK;
if (lineLength > 0 && lineLength <= context.currentLinePos) {
System.arraycopy(lineSeparator, 0, byteArrayVar1, context.pos, lineSeparator.length);
context.pos += lineSeparator.length;
context.currentLinePos = 0;
}
}
}
}
}",1
"public static <K> Boolean getBoolean(final Map<? super K, ?> map, final K key) {
if (map != null) {
final Object objectVar1 = objectLiteral2;
if (objectVar1 != null) {
if (objectVar1 instanceof Boolean) {
return (Boolean) objectVar1;
}
if (objectVar1 instanceof String) {
return Boolean.valueOf((String) objectVar1);
}
if (objectVar1 instanceof Number) {
final Number numberVar3 = numberLiteral4;
return numberVar3.intValue() != 0 ? Boolean.TRUE : Boolean.FALSE;
}
}
}
return null;
}",0
"private final Transformer<C, K> transformer<c,k>Var1;",0
private final Predicate<? super E> predicate<? super e>Var1;,0
private final Closure<? super E>[] closure<? super e>ArrayVar1;,0
"private final Transformer<? super T, ? extends T>[] transformer<? super t,? extends t>ArrayVar1;",0
"private final Transformer<? super E, ?> transformer<? super e,?>Var1;",0
"private final Transformer<? super T, Boolean> transformer<? super t,boolean>Var1;",0
"@Override
protected List<E> decorated() {
return (List<E>) super.decorated();
}",0
"@Override
public int hashCode() {
return hash;
}",0
"@Override
public String toString() {
if (delegateMap != null) {
return delegateMap.toString();
}
if (size == 0) {
return ""{}"";
}
final StringBuilder stringbuilderVar1 = stringbuilderLiteral2;
stringbuilderVar1.append('{');
switch(size) {
case 3:
stringbuilderVar1.append(key3 == this ? ""(this Map)"" : key3);
stringbuilderVar1.append('=');
stringbuilderVar1.append(value3 == this ? ""(this Map)"" : value3);
stringbuilderVar1.append(',');
case 2:
stringbuilderVar1.append(key2 == this ? ""(this Map)"" : key2);
stringbuilderVar1.append('=');
stringbuilderVar1.append(value2 == this ? ""(this Map)"" : value2);
stringbuilderVar1.append(',');
case 1:
stringbuilderVar1.append(key1 == this ? ""(this Map)"" : key1);
stringbuilderVar1.append('=');
stringbuilderVar1.append(value1 == this ? ""(this Map)"" : value1);
break;
default:
throw new IllegalStateException(""Invalid map index: "" + size);
}
stringbuilderVar1.append('}');
return stringbuilderVar1.toString();
}",0
"@SuppressWarnings(""unchecked"")
public static <K, V> UnmodifiableMultiValuedMap<K, V> unmodifiableMultiValuedMap(MultiValuedMap<? extends K, ? extends V> map) {
if (map instanceof Unmodifiable) {
return (UnmodifiableMultiValuedMap<K, V>) map;
}
return new UnmodifiableMultiValuedMap<K, V>(map);
}",0
"@Override
public void clear() {
Iterator<Map.Entry<K, V>> iterator<map.entry<k,v>>Var1 = iterator<map.entry<k,v>>Literal2;
Set<K> set<k>Var3 = set<k>Literal4;
while (iterator<map.entry<k,v>>Var1.hasNext()) {
if (set<k>Var3.contains(iterator<map.entry<k,v>>Var1.next().getKey())) {
iterator<map.entry<k,v>>Var1.remove();
}
}
}",0
"private void writeObject(final ObjectOutputStream out) throws IOException {
out.defaultWriteObject();
out.writeObject(comparator());
super.doWriteObject(out);
}",0
"protected List<E> getList() {
return (List<E>) decorated();
}",0
"@Override
public int hashCode() {
if (delegateMap != null) {
return delegateMap.hashCode();
}
int intVar1 = intLiteral2;
switch(size) {
case 3:
intVar1 += hash3 ^ (value3 == null ? 0 : value3.hashCode());
case 2:
intVar1 += hash2 ^ (value2 == null ? 0 : value2.hashCode());
case 1:
intVar1 += hash1 ^ (value1 == null ? 0 : value1.hashCode());
case 0:
break;
default:
throw new IllegalStateException(""Invalid map index: "" + size);
}
return intVar1;
}",0
"@Override
public boolean equals(final Object other) {
final Set<V> set<v>Var1 = set<v>Literal2;
if (set<v>Var1 == null) {
return Collections.emptySet().equals(other);
}
if (!(other instanceof Set)) {
return false;
}
final Set<?> set<?>Var3 = set<?>Literal4;
return SetUtils.isEqualSet(set<v>Var1, set<?>Var3);
}",0
"@Override
protected Set<E> decorated() {
return (Set<E>) super.decorated();
}",0
"@SuppressWarnings(""unchecked"")
public static <K, V> Map<K, V> putAll(final Map<K, V> map, final Object[] array) {
map.size();
if (array == null || array.length == 0) {
return map;
}
final Object objectVar1 = objectLiteral2;
if (objectVar1 instanceof Map.Entry) {
for (final Object objectVar3 : array) {
final Map.Entry<K, V> map.entry<k,v>Var4 = map.entry<k,v>Literal5;
map.put(map.entry<k,v>Var4.getKey(), map.entry<k,v>Var4.getValue());
}
} else if (objectVar1 instanceof KeyValue) {
for (final Object objectVar3 : array) {
final KeyValue<K, V> keyvalue<k,v>Var6 = keyvalue<k,v>Literal7;
map.put(keyvalue<k,v>Var6.getKey(), keyvalue<k,v>Var6.getValue());
}
} else if (objectVar1 instanceof Object[]) {
for (int intVar12 = intLiteral13; intVar8 < intLiteral1; intVar8++) {
final Object[] objectArrayVar10 = objectArrayLiteral11;
if (objectArrayVar10 == null || objectArrayVar10.length < 2) {
throw new IllegalArgumentException(""Invalid array element: "" + intVar8);
}
map.put((K) objectArrayVar10[0], (V) objectArrayVar10[1]);
}
} else {
for (int intVar12 = intLiteral13; intVar8 < intLiteral2; ) {
map.put((K) array[intVar8++], (V) array[intVar8++]);
}
}
return map;
}",0
private final List<Comparator<E>> list<comparator<e>>Var1;,0
private final Comparator<E> comparator<e>Var1;,0
"@SuppressWarnings(""unchecked"")
static <I, O> Transformer<I, O>[] copy(final Transformer<? super I, ? extends O>... transformers) {
if (transformers == null) {
return null;
}
return (Transformer<I, O>[]) transformers.clone();
}",0
"private final Transformer<? super I, ? extends O> transformer<? super i,? extends o>Var1;",0
"public E[] getArray() {
return this.array;
}",0
"@Override
protected List<E> decorated() {
return (List<E>) super.decorated();
}",0
"protected void purge(final Reference<?> ref) {
final int intVar1 = intLiteral2;
final int intVar3 = intLiteral4;
HashEntry<K, V> hashentry<k,v>Var5 = hashentry<k,v>Literal6;
HashEntry<K, V> hashentry<k,v>Var7 = hashentry<k,v>Literal8;
while (hashentry<k,v>Var7 != null) {
if (((ReferenceEntry<K, V>) hashentry<k,v>Var7).purge(ref)) {
if (hashentry<k,v>Var5 == null) {
data[intVar3] = hashentry<k,v>Var7.next;
} else {
hashentry<k,v>Var5.next = hashentry<k,v>Var7.next;
}
this.size--;
return;
}
hashentry<k,v>Var5 = hashentry<k,v>Var7;
hashentry<k,v>Var7 = hashentry<k,v>Var7.next;
}
}",0
"@Override
public String toString() {
if (delegateMap != null) {
return delegateMap.toString();
}
if (size == 0) {
return ""{}"";
}
final StringBuilder stringbuilderVar1 = stringbuilderLiteral2;
stringbuilderVar1.append('{');
switch(size) {
case 3:
stringbuilderVar1.append(key3 == this ? ""(this Map)"" : key3);
stringbuilderVar1.append('=');
stringbuilderVar1.append(value3 == this ? ""(this Map)"" : value3);
stringbuilderVar1.append(',');
case 2:
stringbuilderVar1.append(key2 == this ? ""(this Map)"" : key2);
stringbuilderVar1.append('=');
stringbuilderVar1.append(value2 == this ? ""(this Map)"" : value2);
stringbuilderVar1.append(',');
case 1:
stringbuilderVar1.append(key1 == this ? ""(this Map)"" : key1);
stringbuilderVar1.append('=');
stringbuilderVar1.append(value1 == this ? ""(this Map)"" : value1);
break;
default:
throw new IllegalStateException(""Invalid map index: "" + size);
}
stringbuilderVar1.append('}');
return stringbuilderVar1.toString();
}",0
"private void convertToMap() {
delegateMap = createDelegateMap();
switch(size) {
case 3:
delegateMap.put(key3, value3);
case 2:
delegateMap.put(key2, value2);
case 1:
delegateMap.put(key1, value1);
case 0:
break;
default:
throw new IllegalStateException(""Invalid map index: "" + size);
}
size = 0;
hash1 = hash2 = hash3 = 0;
key1 = key2 = key3 = null;
value1 = value2 = value3 = null;
}",0
"@Override
public int hashCode() {
if (delegateMap != null) {
return delegateMap.hashCode();
}
int intVar1 = intLiteral2;
switch(size) {
case 3:
intVar1 += hash3 ^ (value3 == null ? 0 : value3.hashCode());
case 2:
intVar1 += hash2 ^ (value2 == null ? 0 : value2.hashCode());
case 1:
intVar1 += hash1 ^ (value1 == null ? 0 : value1.hashCode());
case 0:
break;
default:
throw new IllegalStateException(""Invalid map index: "" + size);
}
return intVar1;
}",0
"private final Transformer<? super T, ? extends T>[] transformer<? super t,? extends t>ArrayVar1;",0
private final Predicate<? super T> predicate<? super t>Var1;,0
private final Predicate<? super I>[] predicate<? super i>ArrayVar1;,0
"private AVLNode<E> removeSelf() {
if (getRightSubTree() == null && getLeftSubTree() == null) {
return null;
}
if (getRightSubTree() == null) {
if (relativePosition > 0) {
left.relativePosition += relativePosition + (relativePosition > 0 ? 0 : 1);
}
left.max().setRight(null, right);
return left;
}
if (getLeftSubTree() == null) {
right.relativePosition += relativePosition - (relativePosition < 0 ? 0 : 1);
right.min().setLeft(null, left);
return right;
}
if (heightRightMinusLeft() > 0) {
final AVLNode<E> avlnode<e>Var1 = avlnode<e>Literal2;
value = avlnode<e>Var1.value;
if (leftIsPrevious) {
left = avlnode<e>Var1.left;
}
right = right.removeMin();
if (relativePosition < 0) {
relativePosition++;
}
} else {
final AVLNode<E> avlnode<e>Var3 = avlnode<e>Literal4;
value = avlnode<e>Var3.value;
if (rightIsNext) {
right = avlnode<e>Var3.right;
}
final AVLNode<E> avlnode<e>Var5 = avlnode<e>Literal6;
left = left.removeMax();
if (left == null) {
left = avlnode<e>Var5;
leftIsPrevious = true;
}
if (relativePosition > 0) {
relativePosition--;
}
}
recalcHeight();
return this;
}",0
"@Override
public int hashCode() {
return hash;
}",0
"@Override
public int hashCode() {
return hash;
}",0
"@Override
public List<T> get(final int index) {
final int intVar1 = intLiteral2;
if (intVar1 < 0) {
throw new IllegalArgumentException(""negative size: "" + intVar1);
}
if (index < 0) {
throw new IndexOutOfBoundsException(""Index "" + index + "" must not be negative"");
}
if (index >= intVar1) {
throw new IndexOutOfBoundsException(""Index "" + index + "" must be less than size "" + intVar1);
}
final int intVar3 = intLiteral4;
final int intVar5 = intLiteral6;
return list.subList(intVar3, intVar5);
}",0
"private final Transformer<? super T, ? extends T>[] transformer<? super t,? extends t>ArrayVar1;",0
"private final Transformer<? super I, ? extends O> transformer<? super i,? extends o>Var1;",0
"public MultiKey(final K[] keys, final boolean makeClone) {
super();
if (keys == null) {
throw new IllegalArgumentException(""The array of keys must not be null"");
}
if (makeClone) {
this.keys = keys.clone();
} else {
this.keys = keys;
}
calculateHashCode(keys);
}",0
"@Override
public boolean equals(Object other) {
final List<V> list<v>Var1 = list<v>Literal2;
if (list<v>Var1 == null) {
return Collections.emptyList().equals(other);
}
if (other == null) {
return false;
}
if (!(other instanceof List)) {
return false;
}
List<?> list<?>Var3 = list<?>Literal4;
if (ListUtils.isEqualList(list<v>Var1, list<?>Var3) == false) {
return false;
}
return true;
}",0
"public List<V> subList(int fromIndex, int toIndex) {
final List<V> list<v>Var1 = list<v>Literal2;
return list<v>Var1.subList(fromIndex, toIndex);
}",0
"@Override
public int hashCode() {
final List<V> list<v>Var1 = list<v>Literal2;
if (list<v>Var1 == null) {
return Collections.emptyList().hashCode();
}
return ListUtils.hashCodeForList(list<v>Var1);
}",0
"@Override
protected Set<E> decorated() {
return (Set<E>) super.decorated();
}",0
"private void writeObject(final ObjectOutputStream out) throws IOException {
out.defaultWriteObject();
out.writeObject(comparator());
super.doWriteObject(out);
}",0
"protected ReferenceEntry<K, V> nextEntry() {
checkMod();
if (nextNull() && !hasNext()) {
throw new NoSuchElementException();
}
previous = entry;
entry = entry.next();
currentKey = nextKey;
currentValue = nextValue;
nextKey = null;
nextValue = null;
return previous;
}",0
"@Override
public boolean equals(final Object obj) {
return this.doEquals(obj, KEY);
}",0
private final Predicate<? super E> predicate<? super e>Var1;,0
"private final Transformer<? super T, ? extends T>[] transformer<? super t,? extends t>ArrayVar1;",0
"@SuppressWarnings(""unchecked"")
static <E> Closure<E>[] copy(final Closure<? super E>... closures) {
if (closures == null) {
return null;
}
return (Closure<E>[]) closures.clone();
}",0
"@SuppressWarnings(""unchecked"")
static <I, O> Transformer<I, O>[] copy(final Transformer<? super I, ? extends O>... transformers) {
if (transformers == null) {
return null;
}
return (Transformer<I, O>[]) transformers.clone();
}",0
"@Override
public int hashCode() {
final Set<V> set<v>Var1 = set<v>Literal2;
return SetUtils.hashCodeForSet(set<v>Var1);
}",0
"@Override
protected Set<E> decorated() {
return (Set<E>) super.decorated();
}",0
"private UnmodifiableBidiMap<V, K> unmodifiablebidimap<v,k>Var1;",0
"private final Transformer<? super T, Boolean> transformer<? super t,boolean>Var1;",0
"V vVar1, vVar2;",0
"protected void purge(final Reference<?> ref) {
final int intVar1 = intLiteral2;
final int intVar3 = intLiteral4;
HashEntry<K, V> hashentry<k,v>Var5 = hashentry<k,v>Literal6;
HashEntry<K, V> hashentry<k,v>Var7 = hashentry<k,v>Literal8;
while (hashentry<k,v>Var7 != null) {
if (((ReferenceEntry<K, V>) hashentry<k,v>Var7).purge(ref)) {
if (hashentry<k,v>Var5 == null) {
data[intVar3] = hashentry<k,v>Var7.next;
} else {
hashentry<k,v>Var5.next = hashentry<k,v>Var7.next;
}
this.size--;
return;
}
hashentry<k,v>Var5 = hashentry<k,v>Var7;
hashentry<k,v>Var7 = hashentry<k,v>Var7.next;
}
}",0
"public int indexOf(Object o) {
final List<V> list<v>Var1 = list<v>Literal2;
return list<v>Var1.indexOf(o);
}",0
"@Override
public int hashCode() {
int intVar1 = intLiteral2;
Iterator<Entry<K, Collection<V>>> iterator<entry<k,collection<v>>>Var3 = iterator<entry<k,collection<v>>>Literal4;
while (iterator<entry<k,collection<v>>>Var3.hasNext()) {
Entry<K, Collection<V>> entry<k,collection<v>>Var5 = entry<k,collection<v>>Literal6;
K kVar7 = kLiteral8;
List<V> list<v>Var9 = list<v>Literal10;
intVar1 += (kVar7 == null ? 0 : kVar7.hashCode()) ^ ListUtils.hashCodeForList(list<v>Var9);
}
return intVar1;
}",0
"@Override
public boolean equals(Object other) {
final Set<V> set<v>Var1 = set<v>Literal2;
if (set<v>Var1 == null) {
return Collections.emptySet().equals(other);
}
if (other == null) {
return false;
}
if (!(other instanceof Set)) {
return false;
}
Set<?> set<?>Var3 = set<?>Literal4;
if (SetUtils.isEqualSet(set<v>Var1, set<?>Var3) == false) {
return false;
}
return true;
}",0
"@Override
public boolean equals(final Object object) {
if (object == this) {
return true;
}
synchronized (lock) {
return getBag().equals(object);
}
}",0
"@Override
public boolean equals(final Object obj) {
return TreeBidiMap.this.doEquals(obj, DataElement.VALUE);
}",0
"@Override
public boolean equals(final Object obj) {
return this.doEquals(obj, KEY);
}",0
"private final Transformer<? super T, Boolean> transformer<? super t,boolean>Var1;",0
"public ObjectArrayIterator(final E[] array, final int start, final int end) {
super();
if (start < 0) {
throw new ArrayIndexOutOfBoundsException(""Start index must not be less than zero"");
}
if (end > array.length) {
throw new ArrayIndexOutOfBoundsException(""End index must not be greater than the array length"");
}
if (start > array.length) {
throw new ArrayIndexOutOfBoundsException(""Start index must not be greater than the array length"");
}
if (end < start) {
throw new IllegalArgumentException(""End index must not be less than start index"");
}
this.array = array;
this.startIndex = start;
this.endIndex = end;
this.index = start;
}",0
"@Override
public String toString() {
if (delegateMap != null) {
return delegateMap.toString();
}
if (size == 0) {
return ""{}"";
}
final StringBuilder stringbuilderVar1 = stringbuilderLiteral2;
stringbuilderVar1.append('{');
switch(size) {
case 3:
stringbuilderVar1.append(key3 == this ? ""(this Map)"" : key3);
stringbuilderVar1.append('=');
stringbuilderVar1.append(value3 == this ? ""(this Map)"" : value3);
stringbuilderVar1.append(',');
case 2:
stringbuilderVar1.append(key2 == this ? ""(this Map)"" : key2);
stringbuilderVar1.append('=');
stringbuilderVar1.append(value2 == this ? ""(this Map)"" : value2);
stringbuilderVar1.append(',');
case 1:
stringbuilderVar1.append(key1 == this ? ""(this Map)"" : key1);
stringbuilderVar1.append('=');
stringbuilderVar1.append(value1 == this ? ""(this Map)"" : value1);
break;
default:
throw new IllegalStateException(""Invalid map index: "" + size);
}
stringbuilderVar1.append('}');
return stringbuilderVar1.toString();
}",0
private transient KeysBag keysbagVar1;,0
"@Override
public int hashCode() {
final Set<V> set<v>Var1 = set<v>Literal2;
if (set<v>Var1 == null) {
return Collections.emptySet().hashCode();
}
return SetUtils.hashCodeForSet(set<v>Var1);
}",0
"@SuppressWarnings(""unchecked"")
public static <K, V> UnmodifiableMultiValuedMap<K, V> unmodifiableMultiValuedMap(MultiValuedMap<? extends K, ? extends V> map) {
if (map instanceof Unmodifiable) {
return (UnmodifiableMultiValuedMap<K, V>) map;
}
return new UnmodifiableMultiValuedMap<K, V>(map);
}",0
"@Override
protected Set<E> decorated() {
return (Set<E>) super.decorated();
}",0
"@Override
public boolean equals(final Object obj) {
return this.doEquals(obj, KEY);
}",0
"@SuppressWarnings(""unchecked"")
static <T> Predicate<T>[] copy(final Predicate<? super T>... predicates) {
if (predicates == null) {
return null;
}
return (Predicate<T>[]) predicates.clone();
}",0
"@SuppressWarnings(""unchecked"")
static <E> Closure<E>[] copy(final Closure<? super E>... closures) {
if (closures == null) {
return null;
}
return (Closure<E>[]) closures.clone();
}",0
"private final Transformer<? super I, ? extends O> transformer<? super i,? extends o>Var1;",0
"V vVar1, vVar2;",0
"@Override
public int hashCode() {
if (delegateMap != null) {
return delegateMap.hashCode();
}
int intVar1 = intLiteral2;
switch(size) {
case 3:
intVar1 += hash3 ^ (value3 == null ? 0 : value3.hashCode());
case 2:
intVar1 += hash2 ^ (value2 == null ? 0 : value2.hashCode());
case 1:
intVar1 += hash1 ^ (value1 == null ? 0 : value1.hashCode());
case 0:
break;
default:
throw new IllegalStateException(""Invalid map index: "" + size);
}
return intVar1;
}",0
"@Override
protected Set<E> decorated() {
return (Set<E>) super.decorated();
}",0
"@Override
public List<T> get(final int index) {
final int intVar1 = intLiteral2;
if (intVar1 < 0) {
throw new IllegalArgumentException(""negative size: "" + intVar1);
}
if (index < 0) {
throw new IndexOutOfBoundsException(""Index "" + index + "" must not be negative"");
}
if (index >= intVar1) {
throw new IndexOutOfBoundsException(""Index "" + index + "" must be less than size "" + intVar1);
}
final int intVar3 = intLiteral4;
final int intVar5 = intLiteral6;
return list.subList(intVar3, intVar5);
}",0
"@Override
public boolean equals(final Object obj) {
return this.doEquals(obj, KEY);
}",0
private final Comparator<E> comparator<e>Var1;,0
"@SuppressWarnings(""unchecked"")
static <E> Closure<E>[] copy(final Closure<? super E>... closures) {
if (closures == null) {
return null;
}
return (Closure<E>[]) closures.clone();
}",0
"private final Transformer<? super I, ? extends O> transformer<? super i,? extends o>Var1;",0
"public MultiKey(final K[] keys, final boolean makeClone) {
super();
if (keys == null) {
throw new IllegalArgumentException(""The array of keys must not be null"");
}
if (makeClone) {
this.keys = keys.clone();
} else {
this.keys = keys;
}
calculateHashCode(keys);
}",0
"@Override
protected List<E> decorated() {
return (List<E>) super.decorated();
}",0
"protected void purge(final Reference<?> ref) {
final int intVar1 = intLiteral2;
final int intVar3 = intLiteral4;
HashEntry<K, V> hashentry<k,v>Var5 = hashentry<k,v>Literal6;
HashEntry<K, V> hashentry<k,v>Var7 = hashentry<k,v>Literal8;
while (hashentry<k,v>Var7 != null) {
if (((ReferenceEntry<K, V>) hashentry<k,v>Var7).purge(ref)) {
if (hashentry<k,v>Var5 == null) {
data[intVar3] = hashentry<k,v>Var7.next;
} else {
hashentry<k,v>Var5.next = hashentry<k,v>Var7.next;
}
this.size--;
return;
}
hashentry<k,v>Var5 = hashentry<k,v>Var7;
hashentry<k,v>Var7 = hashentry<k,v>Var7.next;
}
}",0
"private void convertToMap() {
delegateMap = createDelegateMap();
switch(size) {
case 3:
delegateMap.put(key3, value3);
case 2:
delegateMap.put(key2, value2);
case 1:
delegateMap.put(key1, value1);
case 0:
break;
default:
throw new IllegalStateException(""Invalid map index: "" + size);
}
size = 0;
hash1 = hash2 = hash3 = 0;
key1 = key2 = key3 = null;
value1 = value2 = value3 = null;
}",0
"private String sourceURLAsString() {
return sourceURL != null ? sourceURL.toExternalForm() : StringUtils.EMPTY;
}",0
"private FileSystemOptions getOptions(final String scheme) {
if (scheme == null) {
return null;
}
final FileSystemOptions filesystemoptionsVar1 = filesystemoptionsLiteral2;
FileSystemConfigBuilder filesystemconfigbuilderVar3;
try {
filesystemconfigbuilderVar3 = getManager().getFileSystemConfigBuilder(scheme);
} catch (final Exception ex) {
return null;
}
final FileOptionsProvider fileoptionsproviderVar4 = fileoptionsproviderLiteral5;
if (fileoptionsproviderVar4 != null) {
final Map<String, Object> map<string,object>Var6 = map<string,object>Literal7;
if (map<string,object>Var6 == null) {
return null;
}
int intVar8 = intLiteral9;
for (final Map.Entry<String, Object> map.entry<string,object>Var10 : map<string,object>Var6.entrySet()) {
try {
String stringVar11 = stringLiteral12;
if (FileOptionsProvider.CURRENT_USER.equals(stringVar11)) {
stringVar11 = ""creatorName"";
}
setProperty(filesystemconfigbuilderVar3, filesystemoptionsVar1, stringVar11, map.entry<string,object>Var10.getValue());
++intVar8;
} catch (final Exception ex) {
continue;
}
}
if (intVar8 > 0) {
return filesystemoptionsVar1;
}
}
return null;
}",0
"static File constructFile(String basePath, String fileName) {
File fileVar1 = fileLiteral2;
File fileVar3 = fileLiteral2;
if (fileName != null) {
fileVar3 = new File(fileName);
}
if (StringUtils.isEmpty(basePath) || (fileVar3 != null && fileVar3.isAbsolute())) {
fileVar1 = new File(fileName);
} else {
StringBuffer stringbufferVar4 = stringbufferLiteral5;
stringbufferVar4.append(basePath);
if (!basePath.endsWith(File.separator)) {
stringbufferVar4.append(File.separator);
}
if (fileName.startsWith(""."" + File.separator)) {
stringbufferVar4.append(fileName.substring(2));
} else {
stringbufferVar4.append(fileName);
}
fileVar1 = new File(stringbufferVar4.toString());
}
return fileVar1;
}",0
"public void setConfigurations(Configuration[] configurations) {
this.configurations = configurations;
}",1
"@Override
public void write(Writer out) throws ConfigurationException {
PrintWriter printwriterVar1 = printwriterLiteral2;
if (locator.getEncoding() != null) {
printwriterVar1.println(""<?xml version=\""1.0\"" encoding=\"""" + locator.getEncoding() + ""\""?>"");
} else {
printwriterVar1.println(""<?xml version=\""1.0\""?>"");
}
printwriterVar1.println(""<!DOCTYPE plist SYSTEM \""file://localhost/System/Library/DTDs/PropertyList.dtd\"">"");
printwriterVar1.println(""<plist version=\""1.0\"">"");
printNode(printwriterVar1, 1, getNodeModel().getNodeHandler().getRootNode());
printwriterVar1.println(""</plist>"");
printwriterVar1.flush();
}",0
private final Configuration configurationVar1;,0
"static File constructFile(String basePath, String fileName) {
File fileVar1;
File fileVar2 = fileLiteral3;
if (fileName != null) {
fileVar2 = new File(fileName);
}
if (StringUtils.isEmpty(basePath) || (fileVar2 != null && fileVar2.isAbsolute())) {
fileVar1 = new File(fileName);
} else {
StringBuilder stringbuilderVar4 = stringbuilderLiteral5;
stringbuilderVar4.append(basePath);
if (!basePath.endsWith(File.separator)) {
stringbuilderVar4.append(File.separator);
}
if (fileName.startsWith(""."" + File.separator)) {
stringbuilderVar4.append(fileName.substring(2));
} else {
stringbuilderVar4.append(fileName);
}
fileVar1 = new File(stringbuilderVar4.toString());
}
return fileVar1;
}",0
"public static Byte toByte(Object value) throws ConversionException {
Number numberVar1 = numberLiteral2;
if (numberVar1 instanceof Byte) {
return (Byte) numberVar1;
} else {
return new Byte(numberVar1.byteValue());
}
}",1
"static File constructFile(String basePath, String fileName) {
File fileVar1;
File fileVar2 = fileLiteral3;
if (fileName != null) {
fileVar2 = new File(fileName);
}
if (StringUtils.isEmpty(basePath) || (fileVar2 != null && fileVar2.isAbsolute())) {
fileVar1 = new File(fileName);
} else {
StringBuilder stringbuilderVar4 = stringbuilderLiteral5;
stringbuilderVar4.append(basePath);
if (!basePath.endsWith(File.separator)) {
stringbuilderVar4.append(File.separator);
}
if (fileName.startsWith(""."" + File.separator)) {
stringbuilderVar4.append(fileName.substring(2));
} else {
stringbuilderVar4.append(fileName);
}
fileVar1 = new File(stringbuilderVar4.toString());
}
return fileVar1;
}",0
"private void createPath(File file) {
if (file != null) {
if (!file.exists()) {
File fileVar1 = fileLiteral2;
if (fileVar1 != null && !fileVar1.exists()) {
fileVar1.mkdirs();
}
}
}
}",1
"public void set(String name, Object value) {
if (log.isTraceEnabled()) {
log.trace(""set("" + name + "","" + value + "")"");
}
if (value == null) {
throw new NullPointerException(""Error trying to set property to null."");
}
if (value instanceof List) {
List listVar1 = listLiteral2;
Iterator iteratorVar3 = iteratorLiteral4;
while (iteratorVar3.hasNext()) {
getConfiguration().addProperty(name, iteratorVar3.next());
}
} else if (value instanceof int[]) {
int[] intArrayVar5 = intArrayLiteral6;
for (int intVar17 = intLiteral18; intVar7 < intLiteral1; intVar7++) {
getConfiguration().addProperty(name, new Integer(intArrayVar5[intVar7]));
}
} else if (value instanceof boolean[]) {
boolean[] intArrayVar5 = booleanArrayLiteral9;
for (int intVar17 = intLiteral18; intVar7 < intArrayVar5.length; intVar7++) {
getConfiguration().addProperty(name, BooleanUtils.toBooleanObject(intArrayVar5[intVar7]));
}
} else if (value instanceof char[]) {
char[] intArrayVar5 = charArrayLiteral10;
for (int intVar17 = intLiteral18; intVar7 < intArrayVar5.length; intVar7++) {
getConfiguration().addProperty(name, new Character(intArrayVar5[intVar7]));
}
} else if (value instanceof byte[]) {
byte[] intArrayVar5 = byteArrayLiteral11;
for (int intVar17 = intLiteral18; intVar7 < intArrayVar5.length; intVar7++) {
getConfiguration().addProperty(name, new Byte(intArrayVar5[intVar7]));
}
} else if (value instanceof short[]) {
short[] intArrayVar5 = shortArrayLiteral12;
for (int intVar17 = intLiteral18; intVar7 < intArrayVar5.length; intVar7++) {
getConfiguration().addProperty(name, new Short(intArrayVar5[intVar7]));
}
} else if (value instanceof long[]) {
long[] intArrayVar5 = longArrayLiteral13;
for (int intVar17 = intLiteral18; intVar7 < intArrayVar5.length; intVar7++) {
getConfiguration().addProperty(name, new Long(intArrayVar5[intVar7]));
}
} else if (value instanceof float[]) {
float[] intArrayVar5 = floatArrayLiteral14;
for (int intVar17 = intLiteral18; intVar7 < intArrayVar5.length; intVar7++) {
getConfiguration().addProperty(name, new Float(intArrayVar5[intVar7]));
}
} else if (value instanceof double[]) {
double[] intArrayVar5 = doubleArrayLiteral15;
for (int intVar17 = intLiteral18; intVar7 < intArrayVar5.length; intVar7++) {
getConfiguration().addProperty(name, new Double(intArrayVar5[intVar7]));
}
} else if (value instanceof Object[]) {
Object[] intArrayVar5 = objectArrayLiteral16;
for (int intVar17 = intLiteral18; intVar7 < intArrayVar5.length; intVar7++) {
getConfiguration().addProperty(name, intArrayVar5[intVar7]);
}
} else {
getConfiguration().setProperty(name, value);
}
}",1
"private ImmutableNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
} else {
Iterator<ConfigData> iterator<configdata>Var1 = iterator<configdata>Literal2;
ImmutableNode immutablenodeVar3 = immutablenodeLiteral4;
while (iterator<configdata>Var1.hasNext()) {
immutablenodeVar3 = nodeCombiner.combine(immutablenodeVar3, iterator<configdata>Var1.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream bytearrayoutputstreamVar5 = bytearrayoutputstreamLiteral6;
PrintStream printstreamVar7 = printstreamLiteral8;
TreeUtils.printTree(printstreamVar7, immutablenodeVar3);
getLogger().debug(bytearrayoutputstreamVar5.toString());
}
return immutablenodeVar3;
}
}",0
"private FileSystemOptions getOptions(String scheme) {
FileSystemOptions filesystemoptionsVar1 = filesystemoptionsLiteral2;
FileSystemConfigBuilder filesystemconfigbuilderVar3;
try {
filesystemconfigbuilderVar3 = VFS.getManager().getFileSystemConfigBuilder(scheme);
} catch (Exception ex) {
return null;
}
FileOptionsProvider fileoptionsproviderVar4 = fileoptionsproviderLiteral5;
if (fileoptionsproviderVar4 != null) {
Map<String, Object> map<string,object>Var6 = map<string,object>Literal7;
if (map<string,object>Var6 == null) {
return null;
}
int intVar8 = intLiteral9;
for (Map.Entry<String, Object> map.entry<string,object>Var10 : map<string,object>Var6.entrySet()) {
try {
String stringVar11 = stringLiteral12;
if (FileOptionsProvider.CURRENT_USER.equals(stringVar11)) {
stringVar11 = ""creatorName"";
}
setProperty(filesystemconfigbuilderVar3, filesystemoptionsVar1, stringVar11, map.entry<string,object>Var10.getValue());
++intVar8;
} catch (Exception ex) {
continue;
}
}
if (intVar8 > 0) {
return filesystemoptionsVar1;
}
}
return null;
}",0
private final String stringVar1;,0
private final NodeHandler<T> nodehandler<t>Var1;,0
"@Override
@SuppressWarnings(""unchecked"")
public NodePointer createNodePointer(NodePointer parent, QName name, Object bean) {
if (bean instanceof NodeWrapper) {
NodeWrapper<?> nodewrapper<?>Var1 = nodewrapper<?>Literal2;
return new ConfigurationNodePointer((ConfigurationNodePointer) parent, nodewrapper<?>Var1.getNode(), nodewrapper<?>Var1.getNodeHandler());
}
return null;
}",0
"public void load(InputStream in, String encoding) throws ConfigurationException {
Reader readerVar1 = readerLiteral2;
if (encoding != null) {
try {
readerVar1 = new InputStreamReader(in, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (readerVar1 == null) {
readerVar1 = new InputStreamReader(in);
}
load(readerVar1);
}",0
"private ConfigurationNode constructCombinedNode() {
if (getNumberOfConfigurations() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return new ViewNode();
} else {
Iterator<ConfigData> iterator<configdata>Var1 = iterator<configdata>Literal2;
ConfigurationNode configurationnodeVar3 = configurationnodeLiteral4;
while (iterator<configdata>Var1.hasNext()) {
configurationnodeVar3 = getNodeCombiner().combine(configurationnodeVar3, iterator<configdata>Var1.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream bytearrayoutputstreamVar5 = bytearrayoutputstreamLiteral6;
PrintStream printstreamVar7 = printstreamLiteral8;
TreeUtils.printTree(printstreamVar7, configurationnodeVar3);
getLogger().debug(bytearrayoutputstreamVar5.toString());
}
return configurationnodeVar3;
}
}",0
"@Override
protected FileConfiguration createConfiguration(Attributes attributes) throws Exception {
String stringVar1 = stringLiteral2;
if (stringVar1 != null && stringVar1.toLowerCase().trim().endsWith("".xml"")) {
return new XMLPropertyListConfiguration();
} else {
return new PropertyListConfiguration();
}
}",0
"public Object createBean(Class<?> beanClass, BeanDeclaration data, Object param) throws Exception {
ConfigurationDeclaration configurationdeclarationVar1 = configurationdeclarationLiteral2;
String stringVar3 = stringLiteral4;
ConfigurationProvider configurationproviderVar5 = configurationproviderLiteral6;
if (configurationproviderVar5 == null) {
throw new ConfigurationRuntimeException(""No ConfigurationProvider registered for tag "" + stringVar3);
}
try {
AbstractConfiguration abstractconfigurationVar7 = abstractconfigurationLiteral8;
installInterpolator(configurationdeclarationVar1, abstractconfigurationVar7);
return abstractconfigurationVar7;
} catch (Exception ex) {
if (!configurationdeclarationVar1.isOptional()) {
throw ex;
} else {
if (logger.isDebugEnabled()) {
logger.debug(""Load failed for optional configuration "" + stringVar3 + "": "" + ex.getMessage());
}
configurationdeclarationVar1.getConfigurationBuilder().fireError(EVENT_ERR_LOAD_OPTIONAL, configurationdeclarationVar1.getConfiguration().getString(ATTR_NAME), null, ex);
if (configurationdeclarationVar1.isForceCreate()) {
try {
return configurationproviderVar5.getEmptyConfiguration(configurationdeclarationVar1);
} catch (Exception ex2) {
logger.warn(""Could not create instance of optional configuration "" + stringVar3, ex2);
}
}
return null;
}
}
}",0
"public static Long toLong(Object value) throws ConversionException {
Number numberVar1 = numberLiteral2;
if (numberVar1 instanceof Long) {
return (Long) numberVar1;
} else {
return new Long(numberVar1.longValue());
}
}",0
"public void addDataValue(String value) {
addValue(Base64.decodeBase64(value.getBytes()));
}",0
"@Override
public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
String stringVar1 = stringLiteral2;
@SuppressWarnings(""unchecked"")
Vector<String> vector<string>Var3 = vector<string>Literal4;
if (vector<string>Var3 != null) {
for (int intVar16 = intLiteral17; intVar5 < intLiteral1; intVar5++) {
String stringVar7 = stringLiteral8;
URL urlVar9 = urlLiteral10;
InputStream inputstreamVar11 = urlLiteral10;
try {
urlVar9 = ConfigurationUtils.locate(fs, stringVar1, stringVar7);
if (urlVar9 != null) {
inputstreamVar11 = fs.getInputStream(urlVar9);
}
} catch (ConfigurationException ce) {
String stringVar12 = stringLiteral13;
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + stringVar12 + "". "" + ce.getMessage());
}
if (inputstreamVar11 != null) {
String stringVar14 = stringLiteral15;
try {
if (stringVar14 != null) {
parseCatalog(stringVar14, inputstreamVar11);
continue;
}
} catch (Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + stringVar7 + "". "" + ex.getMessage());
} finally {
inputstreamVar11.close();
}
}
parseCatalog(stringVar1, stringVar7);
}
}
}",0
private AutoSaveListener autosavelistenerVar1;,0
"private String sourceURLAsString() {
return sourceURL != null ? sourceURL.toExternalForm() : StringUtils.EMPTY;
}",0
private final String stringVar1;,0
"private void setProperty(final FileSystemConfigBuilder builder, final FileSystemOptions options, final String key, final Object value) {
final String stringVar1 = stringLiteral2;
final Class<?>[] class<?>ArrayVar3 = class<?>ArrayLiteral4;
class<?>ArrayVar3[0] = FileSystemOptions.class;
class<?>ArrayVar3[1] = value.getClass();
try {
final Method methodVar5 = methodLiteral6;
final Object[] objectArrayVar7 = objectArrayLiteral8;
objectArrayVar7[0] = options;
objectArrayVar7[1] = value;
methodVar5.invoke(builder, objectArrayVar7);
} catch (final Exception ex) {
log.warn(""Cannot access property '"" + key + ""'! Ignoring."", ex);
}
}",0
"@Override
public void read(final Reader in) throws ConfigurationException {
final EntityResolver entityresolverVar1 = entityresolverLiteral2;
final XMLPropertyListHandler xmlpropertylisthandlerVar3 = xmlpropertylisthandlerLiteral4;
try {
final SAXParserFactory saxparserfactoryVar5 = saxparserfactoryLiteral6;
saxparserfactoryVar5.setValidating(true);
final SAXParser saxparserVar7 = saxparserLiteral8;
saxparserVar7.getXMLReader().setEntityResolver(entityresolverVar1);
saxparserVar7.getXMLReader().setContentHandler(xmlpropertylisthandlerVar3);
saxparserVar7.getXMLReader().parse(new InputSource(in));
getNodeModel().mergeRoot(xmlpropertylisthandlerVar3.getResultBuilder().createNode(), null, null, null, this);
} catch (final Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}",0
"public double getDouble(String key, double defaultValue) {
return getDouble(key, new Double(defaultValue)).doubleValue();
}",0
"public Object createBean(Class<?> beanClass, BeanDeclaration data, Object param) throws Exception {
ConfigurationDeclaration configurationdeclarationVar1 = configurationdeclarationLiteral2;
String stringVar3 = stringLiteral4;
ConfigurationProvider configurationproviderVar5 = configurationproviderLiteral6;
if (configurationproviderVar5 == null) {
throw new ConfigurationRuntimeException(""No ConfigurationProvider registered for tag "" + stringVar3);
}
try {
return configurationproviderVar5.getConfiguration(configurationdeclarationVar1);
} catch (Exception ex) {
if (!configurationdeclarationVar1.isOptional()) {
throw ex;
} else {
if (logger.isDebugEnabled()) {
logger.debug(""Load failed for optional configuration "" + stringVar3 + "": "" + ex.getMessage());
}
configurationdeclarationVar1.getConfigurationBuilder().fireError(EVENT_ERR_LOAD_OPTIONAL, configurationdeclarationVar1.getConfiguration().getString(ATTR_NAME), null, ex);
if (configurationdeclarationVar1.isForceCreate()) {
try {
return configurationproviderVar5.getEmptyConfiguration(configurationdeclarationVar1);
} catch (Exception ex2) {
;
}
}
return null;
}
}
}",0
"@Override
public void setRootNode(ConfigurationNode rootNode) {
if (init) {
this.getConfiguration().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}",0
"private AbstractHierarchicalFileConfiguration getConfiguration() {
if (pattern == null) {
throw new ConfigurationRuntimeException(""File pattern must be defined"");
}
String stringVar1 = stringLiteral2;
if (configurationsMap.containsKey(stringVar1)) {
return configurationsMap.get(stringVar1);
}
if (stringVar1.equals(pattern)) {
XMLConfiguration xmlconfigurationVar3 = xmlconfigurationLiteral4;
configurationsMap.putIfAbsent(pattern, xmlconfigurationVar3);
return xmlconfigurationVar3;
}
XMLConfiguration xmlconfigurationVar3 = xmlconfigurationLiteral5;
if (loggerName != null) {
Log logVar6 = logLiteral7;
if (logVar6 != null) {
xmlconfigurationVar3.setLogger(logVar6);
}
}
xmlconfigurationVar3.setBasePath(getBasePath());
xmlconfigurationVar3.setFileName(stringVar1);
xmlconfigurationVar3.setFileSystem(getFileSystem());
xmlconfigurationVar3.setExpressionEngine(getExpressionEngine());
ReloadingStrategy reloadingstrategyVar8 = reloadingstrategyLiteral9;
if (reloadingstrategyVar8 != null) {
xmlconfigurationVar3.setReloadingStrategy(reloadingstrategyVar8);
}
xmlconfigurationVar3.setDelimiterParsingDisabled(isDelimiterParsingDisabled());
xmlconfigurationVar3.setAttributeSplittingDisabled(isAttributeSplittingDisabled());
xmlconfigurationVar3.setValidating(validating);
xmlconfigurationVar3.setSchemaValidation(schemaValidation);
xmlconfigurationVar3.setEntityResolver(entityResolver);
xmlconfigurationVar3.setListDelimiter(getListDelimiter());
xmlconfigurationVar3.addConfigurationListener(this);
xmlconfigurationVar3.addErrorListener(this);
try {
xmlconfigurationVar3.load();
} catch (ConfigurationException ce) {
if (isThrowable(ce)) {
throw new ConfigurationRuntimeException(ce);
}
}
configurationsMap.putIfAbsent(stringVar1, xmlconfigurationVar3);
return configurationsMap.get(stringVar1);
}",0
"public void addDataValue(String value) {
addValue(Base64.decodeBase64(value.getBytes()));
}",0
"public void init() {
if (configuration.getURL() == null && configuration.getFileName() == null) {
return;
}
if (this.configuration == null) {
throw new IllegalStateException(""No configuration has been set for this strategy"");
}
updateLastModified();
}",0
"@Override
public org.apache.xml.resolver.Catalog getPrivateCatalog() {
org.apache.xml.resolver.Catalog org.apache.xml.resolver.catalogVar1 = org.apache.xml.resolver.catalogLiteral2;
if (org.apache.xml.resolver.catalogVar1 == null || !getUseStaticCatalog()) {
try {
org.apache.xml.resolver.catalogVar1 = new Catalog();
org.apache.xml.resolver.catalogVar1.setCatalogManager(this);
org.apache.xml.resolver.catalogVar1.setupReaders();
org.apache.xml.resolver.catalogVar1.loadSystemCatalogs();
} catch (Exception ex) {
ex.printStackTrace();
}
if (getUseStaticCatalog()) {
staticCatalog = org.apache.xml.resolver.catalogVar1;
}
}
return org.apache.xml.resolver.catalogVar1;
}",0
"private ConfigurationNode constructCombinedNode() {
if (getNumberOfConfigurations() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return new ViewNode();
} else {
Iterator<ConfigData> iterator<configdata>Var1 = iterator<configdata>Literal2;
ConfigurationNode configurationnodeVar3 = configurationnodeLiteral4;
while (iterator<configdata>Var1.hasNext()) {
configurationnodeVar3 = getNodeCombiner().combine(configurationnodeVar3, iterator<configdata>Var1.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream bytearrayoutputstreamVar5 = bytearrayoutputstreamLiteral6;
PrintStream printstreamVar7 = printstreamLiteral8;
TreeUtils.printTree(printstreamVar7, configurationnodeVar3);
getLogger().debug(bytearrayoutputstreamVar5.toString());
}
return configurationnodeVar3;
}
}",0
"public static void dump(Configuration configuration, PrintStream out) {
dump(configuration, new PrintWriter(out));
}",0
protected Configuration configurationVar1;,0
"@Override
public void setRootNode(ConfigurationNode rootNode) {
if (configs != null) {
this.getCurrentConfig().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}",0
"private void printValue(PrintWriter out, int indentLevel, Object value) {
String stringVar1 = stringLiteral2;
if (value instanceof Date) {
synchronized (PListNode.FORMAT) {
out.println(stringVar1 + ""<date>"" + PListNode.FORMAT.format((Date) value) + ""</date>"");
}
} else if (value instanceof Calendar) {
printValue(out, indentLevel, ((Calendar) value).getTime());
} else if (value instanceof Number) {
if (value instanceof Double || value instanceof Float || value instanceof BigDecimal) {
out.println(stringVar1 + ""<real>"" + value.toString() + ""</real>"");
} else {
out.println(stringVar1 + ""<integer>"" + value.toString() + ""</integer>"");
}
} else if (value instanceof Boolean) {
if (((Boolean) value).booleanValue()) {
out.println(stringVar1 + ""<true/>"");
} else {
out.println(stringVar1 + ""<false/>"");
}
} else if (value instanceof List) {
out.println(stringVar1 + ""<array>"");
Iterator<?> iterator<?>Var3 = iterator<?>Literal4;
while (iterator<?>Var3.hasNext()) {
printValue(out, indentLevel + 1, iterator<?>Var3.next());
}
out.println(stringVar1 + ""</array>"");
} else if (value instanceof HierarchicalConfiguration) {
printNode(out, indentLevel, ((HierarchicalConfiguration) value).getRoot());
} else if (value instanceof Configuration) {
out.println(stringVar1 + ""<dict>"");
Configuration configurationVar5 = configurationLiteral6;
Iterator<String> iterator<?>Var3 = iterator<string>Literal7;
while (iterator<?>Var3.hasNext()) {
String stringVar8 = stringLiteral9;
Node nodeVar10 = nodeLiteral11;
nodeVar10.setValue(configurationVar5.getProperty(stringVar8));
printNode(out, indentLevel + 1, nodeVar10);
if (iterator<?>Var3.hasNext()) {
out.println();
}
}
out.println(stringVar1 + ""</dict>"");
} else if (value instanceof Map) {
Map<String, Object> map<string,object>Var12 = map<string,object>Literal13;
printValue(out, indentLevel, new MapConfiguration(map<string,object>Var12));
} else if (value instanceof byte[]) {
String stringVar14 = stringLiteral15;
out.println(stringVar1 + ""<data>"" + StringEscapeUtils.escapeXml(stringVar14) + ""</data>"");
} else if (value != null) {
out.println(stringVar1 + ""<string>"" + StringEscapeUtils.escapeXml(String.valueOf(value)) + ""</string>"");
} else {
out.println(stringVar1 + ""<string/>"");
}
}",0
"public NodePointer getNodePointer() {
if (getPosition() < 1 && !setPosition(1)) {
return null;
}
return createNodePointer(subNodes.get(positionToIndex(getPosition())));
}",0
"public static Double toDouble(Object value) throws ConversionException {
Number numberVar1 = numberLiteral2;
if (numberVar1 instanceof Double) {
return (Double) numberVar1;
} else {
return new Double(numberVar1.doubleValue());
}
}",0
private final String stringVar1;,0
"private FileSystemOptions getOptions(String scheme) {
FileSystemOptions filesystemoptionsVar1 = filesystemoptionsLiteral2;
FileSystemConfigBuilder filesystemconfigbuilderVar3;
try {
filesystemconfigbuilderVar3 = VFS.getManager().getFileSystemConfigBuilder(scheme);
} catch (Exception ex) {
return null;
}
FileOptionsProvider fileoptionsproviderVar4 = fileoptionsproviderLiteral5;
if (fileoptionsproviderVar4 != null) {
Map<String, Object> map<string,object>Var6 = map<string,object>Literal7;
if (map<string,object>Var6 == null) {
return null;
}
int intVar8 = intLiteral9;
for (Map.Entry<String, Object> map.entry<string,object>Var10 : map<string,object>Var6.entrySet()) {
try {
String stringVar11 = stringLiteral12;
if (FileOptionsProvider.CURRENT_USER.equals(stringVar11)) {
stringVar11 = ""creatorName"";
}
setProperty(filesystemconfigbuilderVar3, filesystemoptionsVar1, stringVar11, map.entry<string,object>Var10.getValue());
++intVar8;
} catch (Exception ex) {
continue;
}
}
if (intVar8 > 0) {
return filesystemoptionsVar1;
}
}
return null;
}",0
"@Override
public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
String stringVar1 = stringLiteral2;
@SuppressWarnings(""unchecked"")
Vector<String> vector<string>Var3 = vector<string>Literal4;
if (vector<string>Var3 != null) {
for (int intVar16 = intLiteral17; intVar5 < intLiteral1; intVar5++) {
String stringVar7 = stringLiteral8;
URL urlVar9 = urlLiteral10;
InputStream inputstreamVar11 = urlLiteral10;
try {
urlVar9 = locate(fs, stringVar1, stringVar7);
if (urlVar9 != null) {
inputstreamVar11 = fs.getInputStream(urlVar9);
}
} catch (ConfigurationException ce) {
String stringVar12 = stringLiteral13;
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + stringVar12 + "". "" + ce.getMessage());
}
if (inputstreamVar11 != null) {
String stringVar14 = stringLiteral15;
try {
if (stringVar14 != null) {
parseCatalog(stringVar14, inputstreamVar11);
continue;
}
} catch (Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + stringVar7 + "". "" + ex.getMessage());
} finally {
inputstreamVar11.close();
}
}
parseCatalog(stringVar1, stringVar7);
}
}
}",0
"protected FileConfiguration createConfiguration(Attributes attributes) throws Exception {
String stringVar1 = stringLiteral2;
if (stringVar1 != null && stringVar1.toLowerCase().trim().endsWith("".xml"")) {
return new XMLPropertyListConfiguration();
} else {
return new PropertyListConfiguration();
}
}",0
"public boolean isEmpty() {
boolean booleanVar1 = booleanLiteral2;
StringBuffer stringbufferVar3 = stringbufferLiteral4;
if (nameColumn != null) {
stringbufferVar3.append("" WHERE "" + nameColumn + ""=?"");
}
Connection connectionVar5 = connectionLiteral6;
PreparedStatement preparedstatementVar7 = connectionLiteral6;
try {
connectionVar5 = getConnection();
preparedstatementVar7 = connectionVar5.prepareStatement(stringbufferVar3.toString());
if (nameColumn != null) {
preparedstatementVar7.setString(1, name);
}
ResultSet resultsetVar8 = resultsetLiteral9;
if (resultsetVar8.next()) {
booleanVar1 = resultsetVar8.getInt(1) == 0;
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(connectionVar5, preparedstatementVar7);
}
return booleanVar1;
}",0
"protected void addPropertyDirect(String key, Object obj) {
StringBuffer stringbufferVar1 = stringbufferLiteral2;
if (nameColumn != null) {
stringbufferVar1.append("" ("" + nameColumn + "", "" + keyColumn + "", "" + valueColumn + "") VALUES (?, ?, ?)"");
} else {
stringbufferVar1.append("" ("" + keyColumn + "", "" + valueColumn + "") VALUES (?, ?)"");
}
Connection connectionVar3 = connectionLiteral4;
PreparedStatement preparedstatementVar5 = connectionLiteral4;
try {
connectionVar3 = getConnection();
preparedstatementVar5 = connectionVar3.prepareStatement(stringbufferVar1.toString());
int intVar6 = intLiteral7;
if (nameColumn != null) {
preparedstatementVar5.setString(intVar6++, name);
}
preparedstatementVar5.setString(intVar6++, key);
preparedstatementVar5.setString(intVar6++, String.valueOf(obj));
preparedstatementVar5.executeUpdate();
commitIfRequired(connectionVar3);
} catch (SQLException e) {
fireError(EVENT_ADD_PROPERTY, key, obj, e);
} finally {
close(connectionVar3, preparedstatementVar5);
}
}",0
private final Object objectVar1;,0
"public void setRootNode(ConfigurationNode rootNode) {
if (init) {
this.getConfiguration().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}",0
"public void ReInit(java.io.InputStream stream) {
jj_input_stream.ReInit(stream, 1, 1);
token_source.ReInit(jj_input_stream);
token = new Token();
jj_ntk = -1;
jj_gen = 0;
for (int intVar3 = intLiteral4; intVar1 < intLiteral1; intVar1++) jj_la1[intVar1] = -1;
for (int intVar3 = intLiteral4; intVar1 < intLiteral2; intVar1++) jj_2_rtns[intVar1] = new JJCalls();
}",0
"final public PropertyListConfiguration Dictionary() throws ParseException {
PropertyListConfiguration propertylistconfigurationVar1 = propertylistconfigurationLiteral2;
List listVar3 = listLiteral4;
Node nodeVar5 = nodeLiteral6;
jj_consume_token(DICT_BEGIN);
label_1: while (true) {
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case STRING:
case QUOTED_STRING:
;
break;
default:
jj_la1[0] = jj_gen;
break label_1;
}
nodeVar5 = Property();
if (nodeVar5.getValue() instanceof HierarchicalConfiguration) {
HierarchicalConfiguration hierarchicalconfigurationVar7 = hierarchicalconfigurationLiteral8;
Node nodeVar9 = nodeLiteral10;
nodeVar9.setName(nodeVar5.getName());
listVar3.add(nodeVar9);
} else {
listVar3.add(nodeVar5);
}
}
jj_consume_token(DICT_END);
for (int intVar13 = intLiteral14; intVar11 < intLiteral1; intVar11++) {
nodeVar5 = (Node) listVar3.get(intVar11);
propertylistconfigurationVar1.getRoot().addChild(nodeVar5);
}
{
if (true)
return propertylistconfigurationVar1;
}
throw new Error(""Missing return statement in function"");
}",0
"final public Date Date() throws ParseException {
Token tokenVar1;
tokenVar1 = jj_consume_token(DATE);
{
if (true)
return parseDate(tokenVar1.image);
}
throw new Error(""Missing return statement in function"");
}",0
"private final void jjAddStates(int start, int end) {
do {
jjstateSet[jjnewStateCnt++] = jjnextStates[start];
} while (start++ != end);
}",0
public java.io.PrintStream java.io.printstreamVar1 = java.io.printstreamLiteral2;,0
"public void ReInit(java.io.InputStream dstream, int startline, int startcolumn, int buffersize) {
ReInit(new java.io.InputStreamReader(dstream), startline, startcolumn, 4096);
}",0
"public void ReInit(java.io.Reader dstream, int startline, int startcolumn) {
ReInit(dstream, startline, startcolumn, 4096);
}",0
"public byte getByte(String key, byte defaultValue) {
return getByte(key, new Byte(defaultValue)).byteValue();
}",0
"public static URL locate(String base, String name) {
if (log.isDebugEnabled()) {
StringBuffer stringbufferVar1 = stringbufferLiteral2;
stringbufferVar1.append(""ConfigurationUtils.locate(): base is "").append(base);
stringbufferVar1.append("", name is "").append(name);
log.debug(stringbufferVar1.toString());
}
if (name == null) {
return null;
}
URL urlVar3 = urlLiteral4;
try {
if (base == null) {
urlVar3 = new URL(name);
} else {
URL urlVar5 = urlLiteral6;
urlVar3 = new URL(urlVar5, name);
InputStream inputstreamVar7 = urlLiteral4;
try {
inputstreamVar7 = urlVar3.openStream();
} finally {
if (inputstreamVar7 != null) {
inputstreamVar7.close();
}
}
}
log.debug(""Loading configuration from the URL "" + urlVar3);
} catch (IOException e) {
urlVar3 = null;
}
if (urlVar3 == null) {
File fileVar8 = fileLiteral9;
if (fileVar8.isAbsolute() && fileVar8.exists()) {
try {
urlVar3 = fileVar8.toURL();
log.debug(""Loading configuration from the absolute path "" + name);
} catch (MalformedURLException e) {
log.warn(""Could not obtain URL from file"", e);
}
}
}
if (urlVar3 == null) {
try {
File fileVar8 = fileLiteral10;
if (fileVar8 != null && fileVar8.exists()) {
urlVar3 = fileVar8.toURL();
}
if (urlVar3 != null) {
log.debug(""Loading configuration from the path "" + fileVar8);
}
} catch (MalformedURLException e) {
log.warn(""Could not obtain URL from file"", e);
}
}
if (urlVar3 == null) {
try {
File fileVar8 = fileLiteral11;
if (fileVar8 != null && fileVar8.exists()) {
urlVar3 = fileVar8.toURL();
}
if (urlVar3 != null) {
log.debug(""Loading configuration from the home path "" + fileVar8);
}
} catch (MalformedURLException e) {
log.warn(""Could not obtain URL from file"", e);
}
}
if (urlVar3 == null) {
urlVar3 = locateFromClasspath(name);
}
return urlVar3;
}",0
"public Object createBean(Class beanClass, BeanDeclaration data, Object param) throws Exception {
ConfigurationDeclaration configurationdeclarationVar1 = configurationdeclarationLiteral2;
String stringVar3 = stringLiteral4;
ConfigurationProvider configurationproviderVar5 = configurationproviderLiteral6;
if (configurationproviderVar5 == null) {
throw new ConfigurationRuntimeException(""No ConfigurationProvider registered for tag "" + stringVar3);
}
try {
return configurationproviderVar5.getConfiguration(configurationdeclarationVar1);
} catch (Exception ex) {
if (!configurationdeclarationVar1.isOptional()) {
throw ex;
} else {
configurationdeclarationVar1.getConfigurationBuilder().fireError(EVENT_ERR_LOAD_OPTIONAL, configurationdeclarationVar1.getConfiguration().getString(ATTR_NAME), null, ex);
if (configurationdeclarationVar1.isForceCreate()) {
try {
return configurationproviderVar5.getEmptyConfiguration(configurationdeclarationVar1);
} catch (Exception ex2) {
;
}
}
return null;
}
}
}",0
private ExpressionEngine expressionengineVar1;,0
"public static Short toShort(Object value) throws ConversionException {
Number numberVar1 = numberLiteral2;
if (numberVar1 instanceof Short) {
return (Short) numberVar1;
} else {
return new Short(numberVar1.shortValue());
}
}",0
"public static Long toLong(Object value) throws ConversionException {
Number numberVar1 = numberLiteral2;
if (numberVar1 instanceof Long) {
return (Long) numberVar1;
} else {
return new Long(numberVar1.longValue());
}
}",0
"final public List Array() throws ParseException {
List listVar1 = listLiteral2;
Object objectVar3 = objectLiteral4;
jj_consume_token(ARRAY_BEGIN);
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case ARRAY_BEGIN:
case DICT_BEGIN:
case DATA:
case DATE:
case STRING:
case QUOTED_STRING:
objectVar3 = Element();
listVar1.add(objectVar3);
label_2: while (true) {
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case ARRAY_SEPARATOR:
;
break;
default:
jj_la1[3] = jj_gen;
break label_2;
}
jj_consume_token(ARRAY_SEPARATOR);
objectVar3 = Element();
listVar1.add(objectVar3);
}
break;
default:
jj_la1[4] = jj_gen;
;
}
jj_consume_token(ARRAY_END);
{
if (true)
return listVar1;
}
throw new Error(""Missing return statement in function"");
}",0
"public void ReInit(SimpleCharStream stream) {
jjmatchedPos = jjnewStateCnt = 0;
curLexState = defaultLexState;
input_stream = stream;
ReInitRounds();
}",0
"protected void FillBuff() throws java.io.IOException {
if (maxNextCharInd == available) {
if (available == bufsize) {
if (tokenBegin > 2048) {
bufpos = maxNextCharInd = 0;
available = tokenBegin;
} else if (tokenBegin < 0)
bufpos = maxNextCharInd = 0;
else
ExpandBuff(false);
} else if (available > tokenBegin)
available = bufsize;
else if ((tokenBegin - available) < 2048)
ExpandBuff(true);
else
available = tokenBegin;
}
int intVar1;
try {
if ((intVar1 = inputStream.read(buffer, maxNextCharInd, available - maxNextCharInd)) == -1) {
inputStream.close();
throw new java.io.IOException();
} else
maxNextCharInd += intVar1;
return;
} catch (java.io.IOException e) {
--bufpos;
backup(0);
if (tokenBegin == -1)
tokenBegin = bufpos;
throw e;
}
}",0
"protected void ExpandBuff(boolean wrapAround) {
char[] charArrayVar1 = charArrayLiteral2;
int[] intArrayVar3 = intArrayLiteral4;
int[] intArrayVar5 = intArrayLiteral4;
try {
if (wrapAround) {
System.arraycopy(buffer, tokenBegin, charArrayVar1, 0, bufsize - tokenBegin);
System.arraycopy(buffer, 0, charArrayVar1, bufsize - tokenBegin, bufpos);
buffer = charArrayVar1;
System.arraycopy(bufline, tokenBegin, intArrayVar3, 0, bufsize - tokenBegin);
System.arraycopy(bufline, 0, intArrayVar3, bufsize - tokenBegin, bufpos);
bufline = intArrayVar3;
System.arraycopy(bufcolumn, tokenBegin, intArrayVar5, 0, bufsize - tokenBegin);
System.arraycopy(bufcolumn, 0, intArrayVar5, bufsize - tokenBegin, bufpos);
bufcolumn = intArrayVar5;
maxNextCharInd = (bufpos += (bufsize - tokenBegin));
} else {
System.arraycopy(buffer, tokenBegin, charArrayVar1, 0, bufsize - tokenBegin);
buffer = charArrayVar1;
System.arraycopy(bufline, tokenBegin, intArrayVar3, 0, bufsize - tokenBegin);
bufline = intArrayVar3;
System.arraycopy(bufcolumn, tokenBegin, intArrayVar5, 0, bufsize - tokenBegin);
bufcolumn = intArrayVar5;
maxNextCharInd = (bufpos -= tokenBegin);
}
} catch (Throwable t) {
throw new Error(t.getMessage());
}
bufsize += 2048;
available = bufsize;
tokenBegin = 0;
}",0
"protected File getFile() {
return (configuration.getURL() != null) ? fileFromURL(configuration.getURL()) : configuration.getFile();
}",0
"@Override
protected List<ConfigurationNode> fetchNodeList(String key) {
if (isForceReloadCheck()) {
performReloadCheck();
}
return super.fetchNodeList(key);
}",0
"private CombinedConfiguration getCurrentConfig() {
String stringVar1 = stringLiteral2;
CombinedConfiguration combinedconfigurationVar3 = combinedconfigurationLiteral4;
if (combinedconfigurationVar3 == null) {
synchronized (configs) {
combinedconfigurationVar3 = configs.get(stringVar1);
if (combinedconfigurationVar3 == null) {
combinedconfigurationVar3 = new CombinedConfiguration(getNodeCombiner());
if (loggerName != null) {
Log logVar5 = logLiteral6;
if (logVar5 != null) {
combinedconfigurationVar3.setLogger(logVar5);
}
}
combinedconfigurationVar3.setIgnoreReloadExceptions(isIgnoreReloadExceptions());
combinedconfigurationVar3.setExpressionEngine(this.getExpressionEngine());
combinedconfigurationVar3.setDelimiterParsingDisabled(isDelimiterParsingDisabled());
combinedconfigurationVar3.setConversionExpressionEngine(getConversionExpressionEngine());
combinedconfigurationVar3.setListDelimiter(getListDelimiter());
for (ConfigurationErrorListener configurationerrorlistenerVar7 : getErrorListeners()) {
combinedconfigurationVar3.addErrorListener(configurationerrorlistenerVar7);
}
for (ConfigurationListener configurationerrorlistenerVar7 : getConfigurationListeners()) {
combinedconfigurationVar3.addConfigurationListener(configurationerrorlistenerVar7);
}
combinedconfigurationVar3.setForceReloadCheck(isForceReloadCheck());
for (ConfigData configdataVar8 : configurations) {
combinedconfigurationVar3.addConfiguration(configdataVar8.getConfiguration(), configdataVar8.getName(), configdataVar8.getAt());
}
configs.put(stringVar1, combinedconfigurationVar3);
}
}
}
if (getLogger().isDebugEnabled()) {
getLogger().debug(""Returning config for "" + stringVar1 + "": "" + combinedconfigurationVar3);
}
return combinedconfigurationVar3;
}",0
"private static Class<?> getDefaultClass(Object bean, String propName) {
try {
PropertyDescriptor propertydescriptorVar1 = propertydescriptorLiteral2;
if (propertydescriptorVar1 == null) {
return null;
}
return propertydescriptorVar1.getPropertyType();
} catch (Exception ex) {
return null;
}
}",0
"public void load(Reader in) throws ConfigurationException {
if (!(getRootNode() instanceof PListNode)) {
initRoot();
}
EntityResolver entityresolverVar1 = entityresolverLiteral2;
XMLPropertyListHandler xmlpropertylisthandlerVar3 = xmlpropertylisthandlerLiteral4;
try {
SAXParserFactory saxparserfactoryVar5 = saxparserfactoryLiteral6;
saxparserfactoryVar5.setValidating(true);
SAXParser saxparserVar7 = saxparserLiteral8;
saxparserVar7.getXMLReader().setEntityResolver(entityresolverVar1);
saxparserVar7.getXMLReader().setContentHandler(xmlpropertylisthandlerVar3);
saxparserVar7.getXMLReader().parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}",0
private ConfigurationNode configurationnodeVar1;,0
private ConfigurationNode configurationnodeVar1;,0
"protected PreparedStatement createStatement(String sql, boolean nameCol) throws SQLException {
String stringVar1;
if (nameCol && configurationNameColumn != null) {
StringBuilder stringbuilderVar2 = stringbuilderLiteral3;
stringbuilderVar2.append("" AND "").append(configurationNameColumn).append(""=?"");
stringVar1 = stringbuilderVar2.toString();
} else {
stringVar1 = sql;
}
pstmt = getConnection().prepareStatement(stringVar1);
return pstmt;
}",0
private ConfigurationSourceData configurationsourcedataVar1;,0
"public static Short toShort(Object value) throws ConversionException {
Number numberVar1 = numberLiteral2;
if (numberVar1 instanceof Short) {
return (Short) numberVar1;
} else {
return new Short(numberVar1.shortValue());
}
}",0
private final String stringVar1;,0
"public void read(Reader in) throws ConfigurationException {
if (!(getRootNode() instanceof PListNode)) {
initRoot();
}
EntityResolver entityresolverVar1 = entityresolverLiteral2;
XMLPropertyListHandler xmlpropertylisthandlerVar3 = xmlpropertylisthandlerLiteral4;
try {
SAXParserFactory saxparserfactoryVar5 = saxparserfactoryLiteral6;
saxparserfactoryVar5.setValidating(true);
SAXParser saxparserVar7 = saxparserLiteral8;
saxparserVar7.getXMLReader().setEntityResolver(entityresolverVar1);
saxparserVar7.getXMLReader().setContentHandler(xmlpropertylisthandlerVar3);
saxparserVar7.getXMLReader().parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}",0
"@Override
public org.apache.xml.resolver.Catalog getPrivateCatalog() {
org.apache.xml.resolver.Catalog org.apache.xml.resolver.catalogVar1 = org.apache.xml.resolver.catalogLiteral2;
if (org.apache.xml.resolver.catalogVar1 == null || !getUseStaticCatalog()) {
try {
org.apache.xml.resolver.catalogVar1 = new Catalog();
org.apache.xml.resolver.catalogVar1.setCatalogManager(this);
org.apache.xml.resolver.catalogVar1.setupReaders();
org.apache.xml.resolver.catalogVar1.loadSystemCatalogs();
} catch (Exception ex) {
ex.printStackTrace();
}
if (getUseStaticCatalog()) {
staticCatalog = org.apache.xml.resolver.catalogVar1;
}
}
return org.apache.xml.resolver.catalogVar1;
}",0
"public static void dump(Configuration configuration, PrintStream out) {
dump(configuration, new PrintWriter(out));
}",0
"private static Class<?> getDefaultClass(Object bean, String propName) {
try {
PropertyDescriptor propertydescriptorVar1 = propertydescriptorLiteral2;
if (propertydescriptorVar1 == null) {
return null;
}
return propertydescriptorVar1.getPropertyType();
} catch (Exception ex) {
return null;
}
}",0
"@Override
public void read(Reader in) throws ConfigurationException {
EntityResolver entityresolverVar1 = entityresolverLiteral2;
XMLPropertyListHandler xmlpropertylisthandlerVar3 = xmlpropertylisthandlerLiteral4;
try {
SAXParserFactory saxparserfactoryVar5 = saxparserfactoryLiteral6;
saxparserfactoryVar5.setValidating(true);
SAXParser saxparserVar7 = saxparserLiteral8;
saxparserVar7.getXMLReader().setEntityResolver(entityresolverVar1);
saxparserVar7.getXMLReader().setContentHandler(xmlpropertylisthandlerVar3);
saxparserVar7.getXMLReader().parse(new InputSource(in));
getNodeModel().mergeRoot(xmlpropertylisthandlerVar3.getResultBuilder().createNode(), null, null, null, this);
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}",0
"public void save(OutputStream out, String encoding) throws ConfigurationException {
Writer writerVar1 = writerLiteral2;
if (encoding != null) {
try {
writerVar1 = new OutputStreamWriter(out, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (writerVar1 == null) {
writerVar1 = new OutputStreamWriter(out);
}
save(writerVar1);
}",0
"public static void dump(Configuration configuration, PrintStream out) {
dump(configuration, new PrintWriter(out));
}",0
protected Configuration configurationVar1;,0
"public boolean isEmpty() {
boolean booleanVar1 = booleanLiteral2;
StringBuffer stringbufferVar3 = stringbufferLiteral4;
if (nameColumn != null) {
stringbufferVar3.append("" WHERE "" + nameColumn + ""=?"");
}
Connection connectionVar5 = connectionLiteral6;
PreparedStatement preparedstatementVar7 = connectionLiteral6;
try {
connectionVar5 = getConnection();
preparedstatementVar7 = connectionVar5.prepareStatement(stringbufferVar3.toString());
if (nameColumn != null) {
preparedstatementVar7.setString(1, name);
}
ResultSet resultsetVar8 = resultsetLiteral9;
if (resultsetVar8.next()) {
booleanVar1 = resultsetVar8.getInt(1) == 0;
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(connectionVar5, preparedstatementVar7);
}
return booleanVar1;
}",0
"public Iterator getKeys() {
Collection collectionVar1 = collectionLiteral2;
StringBuffer stringbufferVar3 = stringbufferLiteral4;
if (nameColumn != null) {
stringbufferVar3.append("" WHERE "" + nameColumn + ""=?"");
}
Connection connectionVar5 = connectionLiteral6;
PreparedStatement preparedstatementVar7 = connectionLiteral6;
try {
connectionVar5 = getConnection();
preparedstatementVar7 = connectionVar5.prepareStatement(stringbufferVar3.toString());
if (nameColumn != null) {
preparedstatementVar7.setString(1, name);
}
ResultSet resultsetVar8 = resultsetLiteral9;
while (resultsetVar8.next()) {
collectionVar1.add(resultsetVar8.getString(1));
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(connectionVar5, preparedstatementVar7);
}
return collectionVar1.iterator();
}",0
"protected void clearPropertyDirect(String key) {
StringBuffer stringbufferVar1 = stringbufferLiteral2;
if (nameColumn != null) {
stringbufferVar1.append("" AND "" + nameColumn + ""=?"");
}
Connection connectionVar3 = connectionLiteral4;
PreparedStatement preparedstatementVar5 = connectionLiteral4;
try {
connectionVar3 = getConnection();
preparedstatementVar5 = connectionVar3.prepareStatement(stringbufferVar1.toString());
preparedstatementVar5.setString(1, key);
if (nameColumn != null) {
preparedstatementVar5.setString(2, name);
}
preparedstatementVar5.executeUpdate();
commitIfRequired(connectionVar3);
} catch (SQLException e) {
fireError(EVENT_CLEAR_PROPERTY, key, null, e);
} finally {
close(connectionVar3, preparedstatementVar5);
}
}",0
private final Object objectVar1;,0
"public void setRootNode(ConfigurationNode rootNode) {
if (init) {
getConfig().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}",0
private EntityResolver entityresolverVar1 = entityresolverLiteral2;,0
"private XMLNode convertToXMLNode(ConfigurationNode node) {
if (node instanceof XMLNode) {
return (XMLNode) node;
}
XMLNode xmlnodeVar1 = xmlnodeLiteral2;
xmlnodeVar1.setValue(node.getValue());
xmlnodeVar1.setAttribute(node.isAttribute());
for (Iterator iteratorVar6 = iteratorLiteral7; iteratorVar3.hasNext(); ) {
xmlnodeVar1.addChild(convertToXMLNode((ConfigurationNode) iteratorVar3.next()));
}
for (Iterator iteratorVar6 = iteratorLiteral8; iteratorVar3.hasNext(); ) {
xmlnodeVar1.addAttribute(convertToXMLNode((ConfigurationNode) iteratorVar3.next()));
}
return xmlnodeVar1;
}",0
"public void startElement(String uri, String localName, String qName, Attributes attrs) {
if (""comment"".equals(qName)) {
inCommentElement = true;
}
if (""entry"".equals(qName)) {
key = attrs.getValue(""key"");
inEntryElement = true;
}
}",0
"public void setValue(Object value) throws ConfigurationRuntimeException {
try {
if (!(value instanceof String)) {
this.value = value;
return;
}
String stringVar1 = stringLiteral2;
String stringVar3 = stringLiteral4;
Class classVar5 = classLiteral6;
if (stringVar3.length() == stringVar1.length()) {
this.value = classVar5.newInstance();
} else {
this.value = classVar5;
}
} catch (Exception e) {
throw new ConfigurationRuntimeException(""Unable to create "" + value, e);
}
}",0
"public void setValue(Object value) throws ConfigurationRuntimeException {
try {
if (!(value instanceof String)) {
this.value = value;
return;
}
String stringVar1 = stringLiteral2;
String stringVar3 = stringLiteral4;
Class classVar5 = classLiteral6;
if (stringVar3.length() == stringVar1.length()) {
this.value = classVar5.newInstance();
} else {
this.value = classVar5;
}
} catch (Exception e) {
throw new ConfigurationRuntimeException(""Unable to create "" + value, e);
}
}",0
"public List getSubNodes(String name) {
if (name == null) {
return getSubNodes();
}
List listVar1;
if (nodes == null) {
listVar1 = null;
} else {
listVar1 = (List) namedNodes.get(name);
}
return (listVar1 == null) ? Collections.EMPTY_LIST : Collections.unmodifiableList(listVar1);
}",0
"public short getShort(String key, short defaultValue) {
return getShort(key, new Short(defaultValue)).shortValue();
}",0
"public double getDouble(String key, double defaultValue) {
return getDouble(key, new Double(defaultValue)).doubleValue();
}",0
protected Configuration configurationVar1;,0
"public static Float toFloat(Object value) throws ConversionException {
Number numberVar1 = numberLiteral2;
if (numberVar1 instanceof Float) {
return (Float) numberVar1;
} else {
return new Float(numberVar1.floatValue());
}
}",0
"@Override
public ConfigurationNode getRootNode() {
if (getSubnodeKey() != null) {
try {
List<ConfigurationNode> list<configurationnode>Var1 = list<configurationnode>Literal2;
if (list<configurationnode>Var1.size() != 1) {
setSubnodeKey(null);
} else {
ConfigurationNode configurationnodeVar3 = configurationnodeLiteral4;
if (configurationnodeVar3 != super.getRootNode()) {
fireEvent(EVENT_SUBNODE_CHANGED, null, null, true);
setRootNode(configurationnodeVar3);
fireEvent(EVENT_SUBNODE_CHANGED, null, null, false);
}
return configurationnodeVar3;
}
} catch (Exception ex) {
setSubnodeKey(null);
}
}
return super.getRootNode();
}",0
"@Override
public void load(Reader in) throws ConfigurationException {
SAXParserFactory saxparserfactoryVar1 = saxparserfactoryLiteral2;
saxparserfactoryVar1.setNamespaceAware(false);
saxparserfactoryVar1.setValidating(true);
try {
SAXParser saxparserVar3 = saxparserLiteral4;
XMLReader xmlreaderVar5 = xmlreaderLiteral6;
xmlreaderVar5.setEntityResolver(new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlreaderVar5.setContentHandler(new XMLPropertiesHandler());
xmlreaderVar5.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}",0
"static Object toInternetAddress(final Object value) throws ConversionException {
if (value.getClass().getName().equals(INTERNET_ADDRESS_CLASSNAME)) {
return value;
} else if (value instanceof String) {
try {
final Constructor<?> constructor<?>Var1 = constructor<?>Literal2;
return constructor<?>Var1.newInstance(value);
} catch (final Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"", e);
}
} else {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"");
}
}",0
"public static void dump(Configuration configuration, PrintStream out) {
dump(configuration, new PrintWriter(out));
}",0
"public void load(Reader in) throws ConfigurationException {
SAXParserFactory saxparserfactoryVar1 = saxparserfactoryLiteral2;
saxparserfactoryVar1.setNamespaceAware(false);
saxparserfactoryVar1.setValidating(true);
try {
SAXParser saxparserVar3 = saxparserLiteral4;
XMLReader xmlreaderVar5 = xmlreaderLiteral6;
xmlreaderVar5.setEntityResolver(new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlreaderVar5.setContentHandler(new XMLPropertiesHandler());
xmlreaderVar5.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
// todo: support included properties ?
}",0
"public SimpleCharStream(java.io.InputStream dstream, String encoding, int startline, int startcolumn, int buffersize) throws java.io.UnsupportedEncodingException {
this(encoding == null ? new java.io.InputStreamReader(dstream) : new java.io.InputStreamReader(dstream, encoding), startline, startcolumn, buffersize);
}",0
"public static void stopMonitor() {
synchronized (INIT_GATE) {
if (fm != null) {
fm.stop();
fm = null;
}
for (Map.Entry<FileObject, VFSFileMonitorReloadingStrategy> map.entry<fileobject,vfsfilemonitorreloadingstrategy>Var1 : strategies.entrySet()) {
FileObject fileobjectVar2 = fileobjectLiteral3;
fileobjectVar2.getFileSystem().removeListener(fileobjectVar2, map.entry<fileobject,vfsfilemonitorreloadingstrategy>Var1.getValue());
}
strategies.clear();
}
}",0
private ConfigurationNode configurationnodeVar1;,0
"public static URL locate(String base, String name) {
if (log.isDebugEnabled()) {
StringBuffer stringbufferVar1 = stringbufferLiteral2;
stringbufferVar1.append(""ConfigurationUtils.locate(): base is "").append(base);
stringbufferVar1.append("", name is "").append(name);
log.debug(stringbufferVar1.toString());
}
if (name == null) {
return null;
}
URL urlVar3 = urlLiteral4;
try {
if (base == null) {
urlVar3 = new URL(name);
} else {
URL urlVar5 = urlLiteral6;
urlVar3 = new URL(urlVar5, name);
InputStream inputstreamVar7 = urlLiteral4;
try {
inputstreamVar7 = urlVar3.openStream();
} finally {
if (inputstreamVar7 != null) {
inputstreamVar7.close();
}
}
}
log.debug(""Loading configuration from the URL "" + urlVar3);
} catch (IOException e) {
urlVar3 = null;
}
if (urlVar3 == null) {
File fileVar8 = fileLiteral9;
if (fileVar8.isAbsolute() && fileVar8.exists()) {
try {
urlVar3 = toURL(fileVar8);
log.debug(""Loading configuration from the absolute path "" + name);
} catch (MalformedURLException e) {
log.warn(""Could not obtain URL from file"", e);
}
}
}
if (urlVar3 == null) {
try {
File fileVar8 = fileLiteral10;
if (fileVar8 != null && fileVar8.exists()) {
urlVar3 = toURL(fileVar8);
}
if (urlVar3 != null) {
log.debug(""Loading configuration from the path "" + fileVar8);
}
} catch (MalformedURLException e) {
log.warn(""Could not obtain URL from file"", e);
}
}
if (urlVar3 == null) {
try {
File fileVar8 = fileLiteral11;
if (fileVar8 != null && fileVar8.exists()) {
urlVar3 = toURL(fileVar8);
}
if (urlVar3 != null) {
log.debug(""Loading configuration from the home path "" + fileVar8);
}
} catch (MalformedURLException e) {
log.warn(""Could not obtain URL from file"", e);
}
}
if (urlVar3 == null) {
urlVar3 = locateFromClasspath(name);
}
return urlVar3;
}",0
"static URL toURL(File file) throws MalformedURLException {
if (SystemUtils.isJavaVersionAtLeast(JAVA_1_4)) {
try {
Method methodVar1 = methodLiteral2;
Object objectVar3 = objectLiteral4;
Method methodVar5 = methodLiteral6;
URL urlVar7 = urlLiteral8;
return urlVar7;
} catch (Exception e) {
throw new MalformedURLException(e.getMessage());
}
} else {
return file.toURL();
}
}",0
protected Configuration configurationVar1;,0
"public boolean containsKey(String key) {
boolean booleanVar1 = booleanLiteral2;
StringBuffer stringbufferVar3 = stringbufferLiteral4;
if (nameColumn != null) {
stringbufferVar3.append("" AND "" + nameColumn + ""=?"");
}
Connection connectionVar5 = connectionLiteral6;
PreparedStatement preparedstatementVar7 = connectionLiteral6;
try {
connectionVar5 = getConnection();
preparedstatementVar7 = connectionVar5.prepareStatement(stringbufferVar3.toString());
preparedstatementVar7.setString(1, key);
if (nameColumn != null) {
preparedstatementVar7.setString(2, name);
}
ResultSet resultsetVar8 = resultsetLiteral9;
booleanVar1 = resultsetVar8.next();
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
close(connectionVar5, preparedstatementVar7);
}
return booleanVar1;
}",0
"static Object toEnum(Object value, Class cls) throws ConversionException {
if (value.getClass().equals(cls)) {
return value;
} else if (value instanceof String) {
try {
Method methodVar1 = methodLiteral2;
return methodVar1.invoke(null, new Object[] { value });
} catch (Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a "" + cls.getName());
}
} else if (value instanceof Number) {
try {
Method methodVar3 = methodLiteral4;
Object objectVar5 = objectLiteral6;
return Array.get(objectVar5, ((Number) value).intValue());
} catch (Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a "" + cls.getName());
}
} else {
throw new ConversionException(""The value "" + value + "" can't be converted to a "" + cls.getName());
}
}",0
"final public Object Element() throws ParseException {
Object objectVar1 = objectLiteral2;
if (jj_2_1(2)) {
objectVar1 = Array();
{
if (true)
return objectVar1;
}
} else {
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case DICT_BEGIN:
objectVar1 = Dictionary();
{
if (true)
return objectVar1;
}
break;
case STRING:
case QUOTED_STRING:
objectVar1 = String();
{
if (true)
return objectVar1;
}
break;
case DATA:
objectVar1 = Data();
{
if (true)
return objectVar1;
}
break;
case DATE:
objectVar1 = Date();
{
if (true)
return objectVar1;
}
break;
default:
jj_la1[2] = jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
}
throw new Error(""Missing return statement in function"");
}",0
"final public String String() throws ParseException {
Token tokenVar1 = tokenLiteral2;
String stringVar3 = tokenLiteral2;
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case QUOTED_STRING:
tokenVar1 = jj_consume_token(QUOTED_STRING);
{
if (true)
return unescapeQuotes(removeQuotes(tokenVar1.image));
}
break;
case STRING:
tokenVar1 = jj_consume_token(STRING);
{
if (true)
return tokenVar1.image;
}
break;
default:
jj_la1[5] = jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
throw new Error(""Missing return statement in function"");
}",0
"private final void jjCheckNAddStates(int start) {
jjCheckNAdd(jjnextStates[start]);
jjCheckNAdd(jjnextStates[start + 1]);
}",0
"public void ReInit(java.io.InputStream dstream, int startline, int startcolumn) {
ReInit(dstream, startline, startcolumn, 4096);
}",0
"public char BeginToken() throws java.io.IOException {
tokenBegin = -1;
char charVar1 = charLiteral2;
tokenBegin = bufpos;
return charVar1;
}",0
"protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {
return (""Lexical error at line "" + errorLine + "", column "" + errorColumn + "".  Encountered: "" + (EOFSeen ? ""<EOF> "" : (""\"""" + addEscapes(String.valueOf(curChar)) + ""\"""") + "" ("" + (int) curChar + ""), "") + ""after : \"""" + addEscapes(errorAfter) + ""\"""");
}",0
"protected File getFile() {
return (configuration.getURL() != null) ? fileFromURL(configuration.getURL()) : configuration.getFile();
}",0
private ConfigurationNode configurationnodeVar1;,0
"private ImmutableNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
} else {
Iterator<ConfigData> iterator<configdata>Var1 = iterator<configdata>Literal2;
ImmutableNode immutablenodeVar3 = immutablenodeLiteral4;
while (iterator<configdata>Var1.hasNext()) {
immutablenodeVar3 = nodeCombiner.combine(immutablenodeVar3, iterator<configdata>Var1.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream bytearrayoutputstreamVar5 = bytearrayoutputstreamLiteral6;
PrintStream printstreamVar7 = printstreamLiteral8;
TreeUtils.printTree(printstreamVar7, immutablenodeVar3);
getLogger().debug(bytearrayoutputstreamVar5.toString());
}
return immutablenodeVar3;
}
}",0
"private ImmutableNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
} else {
Iterator<ConfigData> iterator<configdata>Var1 = iterator<configdata>Literal2;
ImmutableNode immutablenodeVar3 = immutablenodeLiteral4;
while (iterator<configdata>Var1.hasNext()) {
immutablenodeVar3 = nodeCombiner.combine(immutablenodeVar3, iterator<configdata>Var1.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream bytearrayoutputstreamVar5 = bytearrayoutputstreamLiteral6;
PrintStream printstreamVar7 = printstreamLiteral8;
TreeUtils.printTree(printstreamVar7, immutablenodeVar3);
getLogger().debug(bytearrayoutputstreamVar5.toString());
}
return immutablenodeVar3;
}
}",0
"public static Float toFloat(Object value) throws ConversionException {
Number numberVar1 = numberLiteral2;
if (numberVar1 instanceof Float) {
return (Float) numberVar1;
} else {
return new Float(numberVar1.floatValue());
}
}",0
"public static Double toDouble(Object value) throws ConversionException {
Number numberVar1 = numberLiteral2;
if (numberVar1 instanceof Double) {
return (Double) numberVar1;
} else {
return new Double(numberVar1.doubleValue());
}
}",0
"private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String stringVar1 = stringLiteral2;
Class<?>[] class<?>ArrayVar3 = class<?>ArrayLiteral4;
class<?>ArrayVar3[0] = FileSystemOptions.class;
class<?>ArrayVar3[1] = value.getClass();
try {
Method methodVar5 = methodLiteral6;
Object[] objectArrayVar7 = objectArrayLiteral8;
objectArrayVar7[0] = options;
objectArrayVar7[1] = value;
methodVar5.invoke(builder, objectArrayVar7);
} catch (Exception ex) {
log.warn(""Cannot access property '"" + key + ""'! Ignoring."", ex);
}
}",0
"private ImmutableNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
} else {
Iterator<ConfigData> iterator<configdata>Var1 = iterator<configdata>Literal2;
ImmutableNode immutablenodeVar3 = immutablenodeLiteral4;
while (iterator<configdata>Var1.hasNext()) {
immutablenodeVar3 = nodeCombiner.combine(immutablenodeVar3, iterator<configdata>Var1.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream bytearrayoutputstreamVar5 = bytearrayoutputstreamLiteral6;
PrintStream printstreamVar7 = printstreamLiteral8;
TreeUtils.printTree(printstreamVar7, immutablenodeVar3);
getLogger().debug(bytearrayoutputstreamVar5.toString());
}
return immutablenodeVar3;
}
}",0
"@Override
public void read(Reader in) throws ConfigurationException {
SAXParserFactory saxparserfactoryVar1 = saxparserfactoryLiteral2;
saxparserfactoryVar1.setNamespaceAware(false);
saxparserfactoryVar1.setValidating(true);
try {
SAXParser saxparserVar3 = saxparserLiteral4;
XMLReader xmlreaderVar5 = xmlreaderLiteral6;
xmlreaderVar5.setEntityResolver(new EntityResolver() {
@Override
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlreaderVar5.setContentHandler(new XMLPropertiesHandler());
xmlreaderVar5.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}",0
"static Object toInternetAddress(Object value) throws ConversionException {
if (value.getClass().getName().equals(INTERNET_ADDRESS_CLASSNAME)) {
return value;
} else if (value instanceof String) {
try {
Constructor<?> constructor<?>Var1 = constructor<?>Literal2;
return constructor<?>Var1.newInstance(new Object[] { value });
} catch (Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"", e);
}
} else {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"");
}
}",0
"private void createPath(File file) {
if (file != null) {
if (!file.exists()) {
File fileVar1 = fileLiteral2;
if (fileVar1 != null && !fileVar1.exists()) {
fileVar1.mkdirs();
}
}
}
}",0
"@Override
public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
String stringVar1 = stringLiteral2;
@SuppressWarnings(""unchecked"")
Vector<String> vector<string>Var3 = vector<string>Literal4;
if (vector<string>Var3 != null) {
for (int intVar16 = intLiteral17; intVar5 < intLiteral1; intVar5++) {
String stringVar7 = stringLiteral8;
URL urlVar9 = urlLiteral10;
InputStream inputstreamVar11 = urlLiteral10;
try {
urlVar9 = locate(fs, stringVar1, stringVar7);
if (urlVar9 != null) {
inputstreamVar11 = fs.getInputStream(urlVar9);
}
} catch (ConfigurationException ce) {
String stringVar12 = stringLiteral13;
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + stringVar12 + "". "" + ce.getMessage());
}
if (inputstreamVar11 != null) {
String stringVar14 = stringLiteral15;
try {
if (stringVar14 != null) {
parseCatalog(stringVar14, inputstreamVar11);
continue;
}
} catch (Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + stringVar7 + "". "" + ex.getMessage());
} finally {
inputstreamVar11.close();
}
}
parseCatalog(stringVar1, stringVar7);
}
}
}",0
private final NodeHandler<T> nodehandler<t>Var1;,0
"public void save(OutputStream out, String encoding) throws ConfigurationException {
Writer writerVar1 = writerLiteral2;
if (encoding != null) {
try {
writerVar1 = new OutputStreamWriter(out, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (writerVar1 == null) {
writerVar1 = new OutputStreamWriter(out);
}
save(writerVar1);
}",0
"@Override
protected FileConfiguration createConfiguration(Attributes attributes) throws Exception {
String stringVar1 = stringLiteral2;
if (stringVar1 != null && stringVar1.toLowerCase().trim().endsWith("".xml"")) {
return new XMLPropertyListConfiguration();
} else {
return new PropertyListConfiguration();
}
}",0
"public Iterator<String> getKeys() {
Collection<String> collection<string>Var1 = collection<string>Literal2;
StringBuilder stringbuilderVar3 = stringbuilderLiteral4;
if (nameColumn != null) {
stringbuilderVar3.append("" WHERE "" + nameColumn + ""=?"");
}
Connection connectionVar5 = connectionLiteral6;
PreparedStatement preparedstatementVar7 = connectionLiteral6;
try {
connectionVar5 = getConnection();
preparedstatementVar7 = connectionVar5.prepareStatement(stringbuilderVar3.toString());
if (nameColumn != null) {
preparedstatementVar7.setString(1, name);
}
ResultSet resultsetVar8 = resultsetLiteral9;
while (resultsetVar8.next()) {
collection<string>Var1.add(resultsetVar8.getString(1));
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(connectionVar5, preparedstatementVar7);
}
return collection<string>Var1.iterator();
}",0
"@Override
public void clear() {
fireEvent(EVENT_CLEAR, null, null, true);
StringBuilder stringbuilderVar1 = stringbuilderLiteral2;
if (nameColumn != null) {
stringbuilderVar1.append("" WHERE "" + nameColumn + ""=?"");
}
Connection connectionVar3 = connectionLiteral4;
PreparedStatement preparedstatementVar5 = connectionLiteral4;
try {
connectionVar3 = getConnection();
preparedstatementVar5 = connectionVar3.prepareStatement(stringbuilderVar1.toString());
if (nameColumn != null) {
preparedstatementVar5.setString(1, name);
}
preparedstatementVar5.executeUpdate();
commitIfRequired(connectionVar3);
} catch (SQLException e) {
fireError(EVENT_CLEAR, null, null, e);
} finally {
close(connectionVar3, preparedstatementVar5);
}
fireEvent(EVENT_CLEAR, null, null, false);
}",0
"public Iterator<String> getKeys() {
Collection<String> collection<string>Var1 = collection<string>Literal2;
StringBuilder stringbuilderVar3 = stringbuilderLiteral4;
if (nameColumn != null) {
stringbuilderVar3.append("" WHERE "" + nameColumn + ""=?"");
}
Connection connectionVar5 = connectionLiteral6;
PreparedStatement preparedstatementVar7 = connectionLiteral6;
try {
connectionVar5 = getConnection();
preparedstatementVar7 = connectionVar5.prepareStatement(stringbuilderVar3.toString());
if (nameColumn != null) {
preparedstatementVar7.setString(1, name);
}
ResultSet resultsetVar8 = resultsetLiteral9;
while (resultsetVar8.next()) {
collection<string>Var1.add(resultsetVar8.getString(1));
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, null, null, e);
} finally {
close(connectionVar5, preparedstatementVar7);
}
return collection<string>Var1.iterator();
}",0
"public Object createBean(Class<?> beanClass, BeanDeclaration data, Object param) throws Exception {
ConfigurationDeclaration configurationdeclarationVar1 = configurationdeclarationLiteral2;
String stringVar3 = stringLiteral4;
ConfigurationProvider configurationproviderVar5 = configurationproviderLiteral6;
if (configurationproviderVar5 == null) {
throw new ConfigurationRuntimeException(""No ConfigurationProvider registered for tag "" + stringVar3);
}
try {
return configurationproviderVar5.getConfiguration(configurationdeclarationVar1);
} catch (Exception ex) {
if (!configurationdeclarationVar1.isOptional()) {
throw ex;
} else {
if (logger.isDebugEnabled()) {
logger.debug(""Load failed for optional configuration "" + stringVar3 + "": "" + ex.getMessage());
}
configurationdeclarationVar1.getConfigurationBuilder().fireError(EVENT_ERR_LOAD_OPTIONAL, configurationdeclarationVar1.getConfiguration().getString(ATTR_NAME), null, ex);
if (configurationdeclarationVar1.isForceCreate()) {
try {
return configurationproviderVar5.getEmptyConfiguration(configurationdeclarationVar1);
} catch (Exception ex2) {
;
}
}
return null;
}
}
}",0
"public static Byte toByte(Object value) throws ConversionException {
Number numberVar1 = numberLiteral2;
if (numberVar1 instanceof Byte) {
return (Byte) numberVar1;
} else {
return new Byte(numberVar1.byteValue());
}
}",0
"static Object toInternetAddress(Object value) throws ConversionException {
if (value.getClass().getName().equals(INTERNET_ADDRESS_CLASSNAME)) {
return value;
} else if (value instanceof String) {
try {
Constructor<?> constructor<?>Var1 = constructor<?>Literal2;
return constructor<?>Var1.newInstance(new Object[] { value });
} catch (Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"", e);
}
} else {
throw new ConversionException(""The value "" + value + "" can't be converted to a InternetAddress"");
}
}",0
"private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String stringVar1 = stringLiteral2;
Class<?>[] class<?>ArrayVar3 = class<?>ArrayLiteral4;
class<?>ArrayVar3[0] = FileSystemOptions.class;
class<?>ArrayVar3[1] = value.getClass();
try {
Method methodVar5 = methodLiteral6;
Object[] objectArrayVar7 = objectArrayLiteral8;
objectArrayVar7[0] = options;
objectArrayVar7[1] = value;
methodVar5.invoke(builder, objectArrayVar7);
} catch (Exception ex) {
return;
}
}",0
private final String stringVar1;,0
"public void init() {
if (configuration.getURL() == null && configuration.getFileName() == null) {
return;
}
if (this.configuration == null) {
throw new IllegalStateException(""No configuration has been set for this strategy"");
}
updateLastModified();
}",0
"public boolean removeNodes(String name) {
if (nodes != null && name != null) {
List<ConfigurationNode> list<configurationnode>Var1 = list<configurationnode>Literal2;
if (list<configurationnode>Var1 != null) {
detachNodes(list<configurationnode>Var1);
nodes.removeAll(list<configurationnode>Var1);
return true;
}
}
return false;
}",0
private ConfigurationNode configurationnodeVar1;,0
private ReloadingController reloadingcontrollerVar1;,0
"private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String stringVar1 = stringLiteral2;
Class<?>[] class<?>ArrayVar3 = class<?>ArrayLiteral4;
class<?>ArrayVar3[0] = FileSystemOptions.class;
class<?>ArrayVar3[1] = value.getClass();
try {
Method methodVar5 = methodLiteral6;
Object[] objectArrayVar7 = objectArrayLiteral8;
objectArrayVar7[0] = options;
objectArrayVar7[1] = value;
methodVar5.invoke(builder, objectArrayVar7);
} catch (Exception ex) {
log.warn(""Cannot access property '"" + key + ""'! Ignoring."", ex);
}
}",0
"@Override
public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
String stringVar1 = stringLiteral2;
@SuppressWarnings(""unchecked"")
Vector<String> vector<string>Var3 = vector<string>Literal4;
if (vector<string>Var3 != null) {
for (int intVar16 = intLiteral17; intVar5 < intLiteral1; intVar5++) {
String stringVar7 = stringLiteral8;
URL urlVar9 = urlLiteral10;
InputStream inputstreamVar11 = urlLiteral10;
try {
urlVar9 = locate(fs, stringVar1, stringVar7);
if (urlVar9 != null) {
inputstreamVar11 = fs.getInputStream(urlVar9);
}
} catch (ConfigurationException ce) {
String stringVar12 = stringLiteral13;
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + stringVar12 + "". "" + ce.getMessage());
}
if (inputstreamVar11 != null) {
String stringVar14 = stringLiteral15;
try {
if (stringVar14 != null) {
parseCatalog(stringVar14, inputstreamVar11);
continue;
}
} catch (Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + stringVar7 + "". "" + ex.getMessage());
} finally {
inputstreamVar11.close();
}
}
parseCatalog(stringVar1, stringVar7);
}
}
}",0
"protected Object resolveContainerStore(String key) {
Object objectVar1 = objectLiteral2;
if (objectVar1 != null) {
if (objectVar1 instanceof List) {
List listVar3 = listLiteral4;
objectVar1 = listVar3.isEmpty() ? null : listVar3.get(0);
} else if (objectVar1 instanceof Object[]) {
Object[] objectArrayVar5 = objectArrayLiteral6;
objectVar1 = objectArrayVar5.length == 0 ? null : objectArrayVar5[0];
} else if (objectVar1 instanceof boolean[]) {
boolean[] objectArrayVar5 = booleanArrayLiteral7;
objectVar1 = objectArrayVar5.length == 0 ? null : objectArrayVar5[0] ? Boolean.TRUE : Boolean.FALSE;
} else if (objectVar1 instanceof byte[]) {
byte[] objectArrayVar5 = byteArrayLiteral8;
objectVar1 = objectArrayVar5.length == 0 ? null : new Byte(objectArrayVar5[0]);
} else if (objectVar1 instanceof short[]) {
short[] objectArrayVar5 = shortArrayLiteral9;
objectVar1 = objectArrayVar5.length == 0 ? null : new Short(objectArrayVar5[0]);
} else if (objectVar1 instanceof int[]) {
int[] objectArrayVar5 = intArrayLiteral10;
objectVar1 = objectArrayVar5.length == 0 ? null : new Integer(objectArrayVar5[0]);
} else if (objectVar1 instanceof long[]) {
long[] objectArrayVar5 = longArrayLiteral11;
objectVar1 = objectArrayVar5.length == 0 ? null : new Long(objectArrayVar5[0]);
} else if (objectVar1 instanceof float[]) {
float[] objectArrayVar5 = floatArrayLiteral12;
objectVar1 = objectArrayVar5.length == 0 ? null : new Float(objectArrayVar5[0]);
} else if (objectVar1 instanceof double[]) {
double[] objectArrayVar5 = doubleArrayLiteral13;
objectVar1 = objectArrayVar5.length == 0 ? null : new Double(objectArrayVar5[0]);
}
}
return objectVar1;
}",0
"protected Object resolveContainerStore(String key) {
Object objectVar1 = objectLiteral2;
if (objectVar1 != null) {
if (objectVar1 instanceof List) {
List listVar3 = listLiteral4;
objectVar1 = listVar3.isEmpty() ? null : listVar3.get(0);
} else if (objectVar1 instanceof Object[]) {
Object[] objectArrayVar5 = objectArrayLiteral6;
objectVar1 = objectArrayVar5.length == 0 ? null : objectArrayVar5[0];
} else if (objectVar1 instanceof boolean[]) {
boolean[] objectArrayVar5 = booleanArrayLiteral7;
objectVar1 = objectArrayVar5.length == 0 ? null : objectArrayVar5[0] ? Boolean.TRUE : Boolean.FALSE;
} else if (objectVar1 instanceof byte[]) {
byte[] objectArrayVar5 = byteArrayLiteral8;
objectVar1 = objectArrayVar5.length == 0 ? null : new Byte(objectArrayVar5[0]);
} else if (objectVar1 instanceof short[]) {
short[] objectArrayVar5 = shortArrayLiteral9;
objectVar1 = objectArrayVar5.length == 0 ? null : new Short(objectArrayVar5[0]);
} else if (objectVar1 instanceof int[]) {
int[] objectArrayVar5 = intArrayLiteral10;
objectVar1 = objectArrayVar5.length == 0 ? null : new Integer(objectArrayVar5[0]);
} else if (objectVar1 instanceof long[]) {
long[] objectArrayVar5 = longArrayLiteral11;
objectVar1 = objectArrayVar5.length == 0 ? null : new Long(objectArrayVar5[0]);
} else if (objectVar1 instanceof float[]) {
float[] objectArrayVar5 = floatArrayLiteral12;
objectVar1 = objectArrayVar5.length == 0 ? null : new Float(objectArrayVar5[0]);
} else if (objectVar1 instanceof double[]) {
double[] objectArrayVar5 = doubleArrayLiteral13;
objectVar1 = objectArrayVar5.length == 0 ? null : new Double(objectArrayVar5[0]);
}
}
return objectVar1;
}",0
"public Object getProperty(String key) {
Object objectVar1 = objectLiteral2;
StringBuffer stringbufferVar3 = stringbufferLiteral4;
stringbufferVar3.append(table).append("" WHERE "");
stringbufferVar3.append(keyColumn).append(""=?"");
if (nameColumn != null) {
stringbufferVar3.append("" AND "" + nameColumn + ""=?"");
}
Connection connectionVar5 = objectLiteral2;
PreparedStatement preparedstatementVar6 = objectLiteral2;
try {
connectionVar5 = getConnection();
preparedstatementVar6 = connectionVar5.prepareStatement(stringbufferVar3.toString());
preparedstatementVar6.setString(1, key);
if (nameColumn != null) {
preparedstatementVar6.setString(2, name);
}
ResultSet resultsetVar7 = resultsetLiteral8;
List listVar9 = listLiteral10;
while (resultsetVar7.next()) {
Object objectVar11 = objectLiteral12;
if (isDelimiterParsingDisabled()) {
listVar9.add(objectVar11);
} else {
CollectionUtils.addAll(listVar9, PropertyConverter.toIterator(objectVar11, getListDelimiter()));
}
}
if (!listVar9.isEmpty()) {
objectVar1 = (listVar9.size() > 1) ? listVar9 : listVar9.get(0);
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
closeQuietly(connectionVar5, preparedstatementVar6);
}
return objectVar1;
}",0
"protected void addPropertyDirect(String key, Object obj) {
StringBuffer stringbufferVar1 = stringbufferLiteral2;
if (nameColumn != null) {
stringbufferVar1.append("" ("" + nameColumn + "", "" + keyColumn + "", "" + valueColumn + "") VALUES (?, ?, ?)"");
} else {
stringbufferVar1.append("" ("" + keyColumn + "", "" + valueColumn + "") VALUES (?, ?)"");
}
Connection connectionVar3 = connectionLiteral4;
PreparedStatement preparedstatementVar5 = connectionLiteral4;
try {
connectionVar3 = getConnection();
preparedstatementVar5 = connectionVar3.prepareStatement(stringbufferVar1.toString());
int intVar6 = intLiteral7;
if (nameColumn != null) {
preparedstatementVar5.setString(intVar6++, name);
}
preparedstatementVar5.setString(intVar6++, key);
preparedstatementVar5.setString(intVar6++, String.valueOf(obj));
preparedstatementVar5.executeUpdate();
} catch (SQLException e) {
fireError(EVENT_ADD_PROPERTY, key, obj, e);
} finally {
closeQuietly(connectionVar3, preparedstatementVar5);
}
}",0
"public static Integer toInteger(Object value) throws ConversionException {
Number numberVar1 = numberLiteral2;
if (numberVar1 instanceof Integer) {
return (Integer) numberVar1;
} else {
return new Integer(numberVar1.intValue());
}
}",0
"public static Double toDouble(Object value) throws ConversionException {
Number numberVar1 = numberLiteral2;
if (numberVar1 instanceof Double) {
return (Double) numberVar1;
} else {
return new Double(numberVar1.doubleValue());
}
}",0
public Token tokenVar1;,0
"public List getSubNodes(String name) {
if (name == null) {
return getSubNodes();
}
List listVar1;
if (nodes == null) {
listVar1 = null;
} else {
listVar1 = (List) namedNodes.get(name);
}
return (listVar1 == null) ? Collections.EMPTY_LIST : Collections.unmodifiableList(listVar1);
}",0
"public DataSource getDataSource() {
return dataSource;
}",0
"public static void dump(Configuration configuration, PrintStream out) {
dump(configuration, new PrintWriter(out));
}",0
"public Object createBean(Class<?> beanClass, BeanDeclaration data, Object param) throws Exception {
ConfigurationDeclaration configurationdeclarationVar1 = configurationdeclarationLiteral2;
String stringVar3 = stringLiteral4;
ConfigurationProvider configurationproviderVar5 = configurationproviderLiteral6;
if (configurationproviderVar5 == null) {
throw new ConfigurationRuntimeException(""No ConfigurationProvider registered for tag "" + stringVar3);
}
try {
return configurationproviderVar5.getConfiguration(configurationdeclarationVar1);
} catch (Exception ex) {
if (!configurationdeclarationVar1.isOptional()) {
throw ex;
} else {
if (logger.isDebugEnabled()) {
logger.debug(""Load failed for optional configuration "" + stringVar3 + "": "" + ex.getMessage());
}
configurationdeclarationVar1.getConfigurationBuilder().fireError(EVENT_ERR_LOAD_OPTIONAL, configurationdeclarationVar1.getConfiguration().getString(ATTR_NAME), null, ex);
if (configurationdeclarationVar1.isForceCreate()) {
try {
return configurationproviderVar5.getEmptyConfiguration(configurationdeclarationVar1);
} catch (Exception ex2) {
;
}
}
return null;
}
}
}",0
"private CombinedNode constructCombinedNode() {
initSubHandlers();
if (getNumberOfConfigurations() < 1) {
return new CombinedNode();
} else {
Iterator<ConfigData> iterator<configdata>Var1 = iterator<configdata>Literal2;
CombinedNode combinednodeVar3 = combinednodeLiteral4;
while (iterator<configdata>Var1.hasNext()) {
combinednodeVar3 = getNodeCombiner().combine(combinednodeVar3, getNodeHandler(), iterator<configdata>Var1.next().getTransformedRoot(), getNodeHandler());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream bytearrayoutputstreamVar5 = bytearrayoutputstreamLiteral6;
PrintStream printstreamVar7 = printstreamLiteral8;
TreeUtils.printTree(printstreamVar7, combinednodeVar3, getNodeHandler());
getLogger().debug(bytearrayoutputstreamVar5.toString());
}
return combinednodeVar3;
}
}",0
"protected void performReloadCheck() {
for (ConfigData configdataVar1 : configurations) {
try {
configdataVar1.getConfiguration().getProperty(PROP_RELOAD_CHECK);
} catch (Exception ex) {
;
}
}
}",0
"@SuppressWarnings(""unchecked"")
@Override
public NodeIterator childIterator(NodeTest test, boolean reverse, NodePointer startWith) {
return new ConfigurationNodeIteratorChildren<T>(this, test, reverse, (ConfigurationNodePointer<T>) startWith);
}",0
"private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String stringVar1 = stringLiteral2;
Class[] classArrayVar3 = classArrayLiteral4;
classArrayVar3[0] = FileSystemOptions.class;
classArrayVar3[1] = value.getClass();
try {
Method methodVar5 = methodLiteral6;
Object[] objectArrayVar7 = objectArrayLiteral8;
objectArrayVar7[0] = options;
objectArrayVar7[1] = value;
methodVar5.invoke(builder, objectArrayVar7);
} catch (Exception ex) {
return;
}
}",0
private final String stringVar1;,0
"final public Object Value() throws ParseException {
Object objectVar1 = objectLiteral2;
Token tokenVar3;
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case ARRAY_BEGIN:
objectVar1 = Array();
{
if (true)
return objectVar1;
}
break;
case OBJECT_BEGIN:
objectVar1 = Object();
{
if (true)
return objectVar1;
}
break;
case STRING:
objectVar1 = String();
{
if (true)
return objectVar1;
}
break;
case INTEGER:
tokenVar3 = jj_consume_token(INTEGER);
{
if (true)
return new BigInteger(tokenVar3.image);
}
break;
case REAL:
tokenVar3 = jj_consume_token(REAL);
{
if (true)
return new BigDecimal(tokenVar3.image);
}
break;
case TRUE:
tokenVar3 = jj_consume_token(TRUE);
{
if (true)
return Boolean.TRUE;
}
break;
case FALSE:
tokenVar3 = jj_consume_token(FALSE);
{
if (true)
return Boolean.FALSE;
}
break;
case NULL:
tokenVar3 = jj_consume_token(NULL);
{
if (true)
return null;
}
break;
default:
jj_la1[2] = jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
throw new Error(""Missing return statement in function"");
}",0
"public void ReInit(JSONParserTokenManager tm) {
token_source = tm;
token = new Token();
jj_ntk = -1;
jj_gen = 0;
for (int intVar3 = intLiteral4; intVar1 < intLiteral1; intVar1++) jj_la1[intVar1] = -1;
}",0
"private void ReInitRounds() {
int intVar1;
jjround = 0x80000001;
for (intVar1 = 31; intVar1-- > intLiteral1; ) jjrounds[intVar1] = 0x80000000;
}",0
"public void ReInit(java.io.Reader dstream, int startline, int startcolumn, int buffersize) {
inputStream = dstream;
line = startline;
column = startcolumn - 1;
if (buffer == null || buffersize != buffer.length) {
available = bufsize = buffersize;
buffer = new char[buffersize];
bufline = new int[buffersize];
bufcolumn = new int[buffersize];
}
prevCharIsLF = prevCharIsCR = false;
tokenBegin = inBuf = maxNextCharInd = 0;
bufpos = -1;
}",0
"protected void ExpandBuff(boolean wrapAround) {
char[] charArrayVar1 = charArrayLiteral2;
int[] intArrayVar3 = intArrayLiteral4;
int[] intArrayVar5 = intArrayLiteral4;
try {
if (wrapAround) {
System.arraycopy(buffer, tokenBegin, charArrayVar1, 0, bufsize - tokenBegin);
System.arraycopy(buffer, 0, charArrayVar1, bufsize - tokenBegin, bufpos);
buffer = charArrayVar1;
System.arraycopy(bufline, tokenBegin, intArrayVar3, 0, bufsize - tokenBegin);
System.arraycopy(bufline, 0, intArrayVar3, bufsize - tokenBegin, bufpos);
bufline = intArrayVar3;
System.arraycopy(bufcolumn, tokenBegin, intArrayVar5, 0, bufsize - tokenBegin);
System.arraycopy(bufcolumn, 0, intArrayVar5, bufsize - tokenBegin, bufpos);
bufcolumn = intArrayVar5;
maxNextCharInd = (bufpos += (bufsize - tokenBegin));
} else {
System.arraycopy(buffer, tokenBegin, charArrayVar1, 0, bufsize - tokenBegin);
buffer = charArrayVar1;
System.arraycopy(bufline, tokenBegin, intArrayVar3, 0, bufsize - tokenBegin);
bufline = intArrayVar3;
System.arraycopy(bufcolumn, tokenBegin, intArrayVar5, 0, bufsize - tokenBegin);
bufcolumn = intArrayVar5;
maxNextCharInd = (bufpos -= tokenBegin);
}
} catch (Throwable t) {
throw new Error(t.getMessage());
}
bufsize += 2048;
available = bufsize;
tokenBegin = 0;
}",0
"public SimpleCharStream(java.io.InputStream dstream, int startline, int startcolumn, int buffersize) {
this(new java.io.InputStreamReader(dstream), startline, startcolumn, buffersize);
}",0
"public String getMessage() {
if (!specialConstructor) {
return super.getMessage();
}
StringBuffer stringbufferVar1 = stringbufferLiteral2;
int intVar3 = intLiteral4;
for (int intVar11 = intLiteral12; intVar5 < intLiteral1; intVar5++) {
if (intVar3 < expectedTokenSequences[intVar5].length) {
intVar3 = expectedTokenSequences[intVar5].length;
}
for (int intVar13 = intLiteral12; intVar6 < intLiteral2; intVar6++) {
stringbufferVar1.append(tokenImage[expectedTokenSequences[intVar5][intVar6]]).append(' ');
}
if (expectedTokenSequences[intVar5][expectedTokenSequences[intVar5].length - 1] != 0) {
stringbufferVar1.append(""..."");
}
stringbufferVar1.append(eol).append(""    "");
}
String stringVar7 = stringLiteral8;
Token tokenVar9 = tokenLiteral10;
for (int intVar11 = intLiteral12; intVar5 < intLiteral3; intVar5++) {
if (intVar5 != 0)
stringVar7 += "" "";
if (tokenVar9.kind == 0) {
stringVar7 += tokenImage[0];
break;
}
stringVar7 += "" "" + tokenImage[tokenVar9.kind];
stringVar7 += "" \"""";
stringVar7 += add_escapes(tokenVar9.image);
stringVar7 += "" \"""";
tokenVar9 = tokenVar9.next;
}
stringVar7 += ""\"" at line "" + currentToken.next.beginLine + "", column "" + currentToken.next.beginColumn;
stringVar7 += ""."" + eol;
if (expectedTokenSequences.length == 1) {
stringVar7 += ""Was expecting:"" + eol + ""    "";
} else {
stringVar7 += ""Was expecting one of:"" + eol + ""    "";
}
stringVar7 += stringbufferVar1.toString();
return stringVar7;
}",0
"final public ConfigurationNode Property() throws ParseException {
String stringVar1 = stringLiteral2;
Object objectVar3 = stringLiteral2;
ConfigurationNode configurationnodeVar4 = configurationnodeLiteral5;
stringVar1 = String();
configurationnodeVar4.setName(stringVar1);
jj_consume_token(EQUAL);
objectVar3 = Element();
configurationnodeVar4.setValue(objectVar3);
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case DICT_SEPARATOR:
jj_consume_token(DICT_SEPARATOR);
break;
default:
jj_la1[1] = jj_gen;
;
}
{
if (true)
return configurationnodeVar4;
}
throw new Error(""Missing return statement in function"");
}",0
"final public Date Date() throws ParseException {
Token tokenVar1;
tokenVar1 = jj_consume_token(DATE);
{
if (true)
return parseDate(tokenVar1.image);
}
throw new Error(""Missing return statement in function"");
}",0
"public void SwitchTo(int lexState) {
if (lexState >= 1 || lexState < 0) {
throw new TokenMgrError(""Error: Ignoring invalid lexical state : "" + lexState + "". State unchanged."", TokenMgrError.INVALID_LEXICAL_STATE);
} else {
curLexState = lexState;
}
}",0
"private int jjMoveNfa_0(int startState, int curPos) {
int intVar1 = intLiteral2;
jjnewStateCnt = 14;
int intVar3 = intLiteral4;
jjstateSet[0] = startState;
int intVar5 = intLiteral6;
for (; ; ) {
if (++jjround == 0x7fffffff) {
ReInitRounds();
}
if (curChar < 64) {
long longVar7 = longLiteral8;
do {
switch(jjstateSet[--intVar3]) {
case 15:
if ((0xd7ffecfaffffd9ffL & longVar7) != 0L) {
if (intVar5 > 21) {
intVar5 = 21;
}
jjCheckNAdd(8);
}
if ((0x7ff280100000000L & longVar7) != 0L) {
jjCheckNAddTwoStates(4, 5);
} else if (curChar == 62) {
if (intVar5 > 20) {
intVar5 = 20;
}
}
break;
case 6:
if ((0xd7ffecfaffffd9ffL & longVar7) != 0L) {
if (intVar5 > 21) {
intVar5 = 21;
}
jjCheckNAdd(8);
}
if ((0x3ff000100002600L & longVar7) != 0L) {
jjCheckNAddTwoStates(1, 2);
} else if (curChar == 42) {
jjstateSet[jjnewStateCnt++] = 3;
} else if (curChar == 62) {
if (intVar5 > 19) {
intVar5 = 19;
}
}
break;
case 14:
if ((0xfffffffbffffffffL & longVar7) != 0L) {
jjCheckNAddStates(0, 2);
} else if (curChar == 34) {
if (intVar5 > 22) {
intVar5 = 22;
}
}
break;
case 3:
case 8:
if ((0xd7ffecfaffffd9ffL & longVar7) == 0L) {
break;
}
if (intVar5 > 21) {
intVar5 = 21;
}
jjCheckNAdd(8);
break;
case 0:
if ((0xd7ffecfaffffd9ffL & longVar7) != 0L) {
if (intVar5 > 21) {
intVar5 = 21;
}
jjCheckNAdd(8);
} else if (curChar == 34) {
jjCheckNAddStates(0, 2);
}
if (curChar == 60) {
jjstateSet[jjnewStateCnt++] = 6;
}
if (curChar == 60) {
jjCheckNAddTwoStates(1, 2);
}
break;
case 1:
if ((0x3ff000100002600L & longVar7) != 0L) {
jjCheckNAddTwoStates(1, 2);
}
break;
case 2:
if (curChar == 62 && intVar5 > 19) {
intVar5 = 19;
}
break;
case 4:
if ((0x7ff280100000000L & longVar7) != 0L) {
jjCheckNAddTwoStates(4, 5);
}
break;
case 5:
if (curChar == 62 && intVar5 > 20) {
intVar5 = 20;
}
break;
case 7:
if (curChar == 60) {
jjstateSet[jjnewStateCnt++] = 6;
}
break;
case 9:
case 11:
if (curChar == 34) {
jjCheckNAddStates(0, 2);
}
break;
case 10:
if ((0xfffffffbffffffffL & longVar7) != 0L) {
jjCheckNAddStates(0, 2);
}
break;
case 13:
if (curChar == 34 && intVar5 > 22) {
intVar5 = 22;
}
break;
default:
break;
}
} while (intVar3 != intVar1);
} else if (curChar < 128) {
long longVar7 = longLiteral9;
do {
switch(jjstateSet[--intVar3]) {
case 15:
if ((0xd7ffffffffffffffL & longVar7) != 0L) {
if (intVar5 > 21) {
intVar5 = 21;
}
jjCheckNAdd(8);
}
if (curChar == 90) {
jjCheckNAddTwoStates(4, 5);
}
break;
case 6:
if ((0xd7ffffffffffffffL & longVar7) != 0L) {
if (intVar5 > 21) {
intVar5 = 21;
}
jjCheckNAdd(8);
}
if ((0x7e0000007eL & longVar7) != 0L) {
jjCheckNAddTwoStates(1, 2);
}
break;
case 14:
jjCheckNAddStates(0, 2);
if (curChar == 92) {
jjstateSet[jjnewStateCnt++] = 11;
}
break;
case 3:
if ((0xd7ffffffffffffffL & longVar7) != 0L) {
if (intVar5 > 21) {
intVar5 = 21;
}
jjCheckNAdd(8);
}
if (curChar == 68) {
jjCheckNAddTwoStates(4, 5);
}
break;
case 0:
case 8:
if ((0xd7ffffffffffffffL & longVar7) == 0L) {
break;
}
if (intVar5 > 21) {
intVar5 = 21;
}
jjCheckNAdd(8);
break;
case 1:
if ((0x7e0000007eL & longVar7) != 0L) {
jjCheckNAddTwoStates(1, 2);
}
break;
case 4:
if (curChar == 90) {
jjCheckNAddTwoStates(4, 5);
}
break;
case 10:
jjCheckNAddStates(0, 2);
break;
case 12:
if (curChar == 92) {
jjstateSet[jjnewStateCnt++] = 11;
}
break;
default:
break;
}
} while (intVar3 != intVar1);
} else {
int intVar10 = intLiteral11;
long longVar12 = longLiteral9;
do {
switch(jjstateSet[--intVar3]) {
case 15:
case 8:
if ((jjbitVec0[intVar10] & longVar12) == 0L) {
break;
}
if (intVar5 > 21) {
intVar5 = 21;
}
jjCheckNAdd(8);
break;
case 6:
if ((jjbitVec0[intVar10] & longVar12) == 0L) {
break;
}
if (intVar5 > 21) {
intVar5 = 21;
}
jjCheckNAdd(8);
break;
case 14:
case 10:
if ((jjbitVec0[intVar10] & longVar12) != 0L) {
jjCheckNAddStates(0, 2);
}
break;
case 3:
if ((jjbitVec0[intVar10] & longVar12) == 0L) {
break;
}
if (intVar5 > 21) {
intVar5 = 21;
}
jjCheckNAdd(8);
break;
case 0:
if ((jjbitVec0[intVar10] & longVar12) == 0L) {
break;
}
if (intVar5 > 21) {
intVar5 = 21;
}
jjCheckNAdd(8);
break;
default:
break;
}
} while (intVar3 != intVar1);
}
if (intVar5 != 0x7fffffff) {
jjmatchedKind = intVar5;
jjmatchedPos = curPos;
intVar5 = 0x7fffffff;
}
++curPos;
if ((intVar3 = jjnewStateCnt) == (intVar1 = 14 - (jjnewStateCnt = intVar1))) {
return curPos;
}
try {
curChar = input_stream.readChar();
} catch (java.io.IOException e) {
return curPos;
}
}
}",0
"protected void FillBuff() throws java.io.IOException {
if (maxNextCharInd == available) {
if (available == bufsize) {
if (tokenBegin > 2048) {
bufpos = maxNextCharInd = 0;
available = tokenBegin;
} else if (tokenBegin < 0)
bufpos = maxNextCharInd = 0;
else
ExpandBuff(false);
} else if (available > tokenBegin)
available = bufsize;
else if ((tokenBegin - available) < 2048)
ExpandBuff(true);
else
available = tokenBegin;
}
int intVar1;
try {
if ((intVar1 = inputStream.read(buffer, maxNextCharInd, available - maxNextCharInd)) == -1) {
inputStream.close();
throw new java.io.IOException();
} else
maxNextCharInd += intVar1;
return;
} catch (java.io.IOException e) {
--bufpos;
backup(0);
if (tokenBegin == -1)
tokenBegin = bufpos;
throw e;
}
}",0
"public void ReInit(java.io.InputStream dstream, String encoding, int startline, int startcolumn, int buffersize) throws java.io.UnsupportedEncodingException {
ReInit(encoding == null ? new java.io.InputStreamReader(dstream) : new java.io.InputStreamReader(dstream, encoding), startline, startcolumn, buffersize);
}",0
"public void ReInit(java.io.InputStream dstream, int startline, int startcolumn, int buffersize) {
ReInit(new java.io.InputStreamReader(dstream), startline, startcolumn, buffersize);
}",0
"public void load(Reader in) throws ConfigurationException {
if (!(getRootNode() instanceof PListNode)) {
initRoot();
}
EntityResolver entityresolverVar1 = entityresolverLiteral2;
XMLPropertyListHandler xmlpropertylisthandlerVar3 = xmlpropertylisthandlerLiteral4;
try {
SAXParserFactory saxparserfactoryVar5 = saxparserfactoryLiteral6;
saxparserfactoryVar5.setValidating(true);
SAXParser saxparserVar7 = saxparserLiteral8;
saxparserVar7.getXMLReader().setEntityResolver(entityresolverVar1);
saxparserVar7.getXMLReader().setContentHandler(xmlpropertylisthandlerVar3);
saxparserVar7.getXMLReader().parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}",0
"public byte getByte(String key, byte defaultValue) {
return getByte(key, new Byte(defaultValue)).byteValue();
}",0
private List<ConfigData> list<configdata>Var1;,0
"public Object getProperty(String key) {
Object objectVar1 = objectLiteral2;
StringBuilder stringbuilderVar3 = stringbuilderLiteral4;
stringbuilderVar3.append(table).append("" WHERE "");
stringbuilderVar3.append(keyColumn).append(""=?"");
if (nameColumn != null) {
stringbuilderVar3.append("" AND "" + nameColumn + ""=?"");
}
Connection connectionVar5 = objectLiteral2;
PreparedStatement preparedstatementVar6 = objectLiteral2;
try {
connectionVar5 = getConnection();
preparedstatementVar6 = connectionVar5.prepareStatement(stringbuilderVar3.toString());
preparedstatementVar6.setString(1, key);
if (nameColumn != null) {
preparedstatementVar6.setString(2, name);
}
ResultSet resultsetVar7 = resultsetLiteral8;
List<Object> list<object>Var9 = list<object>Literal10;
while (resultsetVar7.next()) {
Object objectVar11 = objectLiteral12;
if (isDelimiterParsingDisabled()) {
list<object>Var9.add(objectVar11);
} else {
Iterator<?> iterator<?>Var13 = iterator<?>Literal14;
while (iterator<?>Var13.hasNext()) {
list<object>Var9.add(iterator<?>Var13.next());
}
}
}
if (!list<object>Var9.isEmpty()) {
objectVar1 = (list<object>Var9.size() > 1) ? list<object>Var9 : list<object>Var9.get(0);
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
close(connectionVar5, preparedstatementVar6);
}
return objectVar1;
}",0
"public boolean containsKey(String key) {
boolean booleanVar1 = booleanLiteral2;
StringBuilder stringbuilderVar3 = stringbuilderLiteral4;
if (nameColumn != null) {
stringbuilderVar3.append("" AND "" + nameColumn + ""=?"");
}
Connection connectionVar5 = connectionLiteral6;
PreparedStatement preparedstatementVar7 = connectionLiteral6;
try {
connectionVar5 = getConnection();
preparedstatementVar7 = connectionVar5.prepareStatement(stringbuilderVar3.toString());
preparedstatementVar7.setString(1, key);
if (nameColumn != null) {
preparedstatementVar7.setString(2, name);
}
ResultSet resultsetVar8 = resultsetLiteral9;
booleanVar1 = resultsetVar8.next();
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
close(connectionVar5, preparedstatementVar7);
}
return booleanVar1;
}",0
"private Map<String, ConfigurationProvider> map<string,configurationprovider>Var1;",0
private StrSubstitutor strsubstitutorVar1 = strsubstitutorLiteral2;,0
"public Lock(String name) {
this.name = name;
synchronized (counterLock) {
instanceId = ++counter;
}
}",0
"@Override
public void setRootNode(ConfigurationNode rootNode) {
if (init) {
getConfig().setRootNode(rootNode);
} else {
super.setRootNode(rootNode);
}
}",0
private final String stringVar1;,0
"private FileSystemOptions getOptions(String scheme) {
FileSystemOptions filesystemoptionsVar1 = filesystemoptionsLiteral2;
FileSystemConfigBuilder filesystemconfigbuilderVar3;
try {
filesystemconfigbuilderVar3 = VFS.getManager().getFileSystemConfigBuilder(scheme);
} catch (Exception ex) {
return null;
}
FileOptionsProvider fileoptionsproviderVar4 = fileoptionsproviderLiteral5;
if (fileoptionsproviderVar4 != null) {
Map<String, Object> map<string,object>Var6 = map<string,object>Literal7;
if (map<string,object>Var6 == null) {
return null;
}
int intVar8 = intLiteral9;
for (Map.Entry<String, Object> map.entry<string,object>Var10 : map<string,object>Var6.entrySet()) {
try {
String stringVar11 = stringLiteral12;
if (FileOptionsProvider.CURRENT_USER.equals(stringVar11)) {
stringVar11 = ""creatorName"";
}
setProperty(filesystemconfigbuilderVar3, filesystemoptionsVar1, stringVar11, map.entry<string,object>Var10.getValue());
++intVar8;
} catch (Exception ex) {
continue;
}
}
if (intVar8 > 0) {
return filesystemoptionsVar1;
}
}
return null;
}",0
"@Override
public void save(Writer out) throws ConfigurationException {
PrintWriter printwriterVar1 = printwriterLiteral2;
String stringVar3 = stringLiteral4;
printwriterVar1.println(""<?xml version=\""1.0\"" encoding=\"""" + stringVar3 + ""\""?>"");
printwriterVar1.println(""<!DOCTYPE properties SYSTEM \""http://java.sun.com/dtd/properties.dtd\"">"");
printwriterVar1.println(""<properties>"");
if (getHeader() != null) {
printwriterVar1.println(""  <comment>"" + StringEscapeUtils.escapeXml(getHeader()) + ""</comment>"");
}
Iterator<String> iterator<string>Var5 = iterator<string>Literal6;
while (iterator<string>Var5.hasNext()) {
String stringVar7 = stringLiteral8;
Object objectVar9 = objectLiteral10;
if (objectVar9 instanceof List) {
writeProperty(printwriterVar1, stringVar7, (List<?>) objectVar9);
} else {
writeProperty(printwriterVar1, stringVar7, objectVar9);
}
}
printwriterVar1.println(""</properties>"");
printwriterVar1.flush();
}",0
"public boolean removeNode(ConfigurationNode node) {
if (nodes != null && node != null && nodes.contains(node)) {
detachNode(node);
nodes.remove(node);
List<ConfigurationNode> list<configurationnode>Var1 = list<configurationnode>Literal2;
if (list<configurationnode>Var1 != null) {
list<configurationnode>Var1.remove(node);
if (list<configurationnode>Var1.isEmpty()) {
namedNodes.remove(node.getName());
}
}
return true;
} else {
return false;
}
}",0
"public void reload() {
synchronized (reloadLock) {
if (noReload == 0) {
try {
enterNoReload();
if (strategy.reloadingRequired()) {
if (getLogger().isInfoEnabled()) {
getLogger().info(""Reloading configuration. URL is "" + getURL());
}
fireEvent(EVENT_RELOAD, null, getURL(), true);
setDetailEvents(false);
boolean booleanVar1 = booleanLiteral2;
this.setAutoSave(false);
try {
clear();
load();
} finally {
this.setAutoSave(booleanVar1);
setDetailEvents(true);
}
fireEvent(EVENT_RELOAD, null, getURL(), false);
strategy.reloadingPerformed();
}
} catch (Exception e) {
fireError(EVENT_RELOAD, null, null, e);
} finally {
exitNoReload();
}
}
}
}",0
"public static void dump(Configuration configuration, PrintStream out) {
dump(configuration, new PrintWriter(out));
}",0
"public Object createBean(Class beanClass, BeanDeclaration data, Object param) throws Exception {
ConfigurationDeclaration configurationdeclarationVar1 = configurationdeclarationLiteral2;
String stringVar3 = stringLiteral4;
ConfigurationProvider configurationproviderVar5 = configurationproviderLiteral6;
if (configurationproviderVar5 == null) {
throw new ConfigurationRuntimeException(""No ConfigurationProvider registered for tag "" + stringVar3);
}
try {
return configurationproviderVar5.getConfiguration(configurationdeclarationVar1);
} catch (Exception ex) {
if (!configurationdeclarationVar1.isOptional()) {
throw ex;
} else {
configurationdeclarationVar1.getConfigurationBuilder().fireError(EVENT_ERR_LOAD_OPTIONAL, configurationdeclarationVar1.getConfiguration().getString(ATTR_NAME), null, ex);
if (configurationdeclarationVar1.isForceCreate()) {
try {
return configurationproviderVar5.getEmptyConfiguration(configurationdeclarationVar1);
} catch (Exception ex2) {
;
}
}
return null;
}
}
}",0
"public void ReInit(java.io.Reader stream) {
jj_input_stream.ReInit(stream, 1, 1);
token_source.ReInit(jj_input_stream);
token = new Token();
jj_ntk = -1;
jj_gen = 0;
for (int intVar3 = intLiteral4; intVar1 < intLiteral1; intVar1++) jj_la1[intVar1] = -1;
for (int intVar3 = intLiteral4; intVar1 < intLiteral2; intVar1++) jj_2_rtns[intVar1] = new JJCalls();
}",0
"public void ReInit(SimpleCharStream stream, int lexState) {
ReInit(stream);
SwitchTo(lexState);
}",0
"public void ReInit(java.io.InputStream dstream, int startline, int startcolumn, int buffersize) {
ReInit(new java.io.InputStreamReader(dstream), startline, startcolumn, 4096);
}",0
"private void printValue(PrintWriter out, int indentLevel, Object value) {
String stringVar1 = stringLiteral2;
if (value instanceof Date) {
synchronized (PListNode.format) {
out.println(stringVar1 + ""<date>"" + PListNode.format.format((Date) value) + ""</date>"");
}
} else if (value instanceof Calendar) {
printValue(out, indentLevel, ((Calendar) value).getTime());
} else if (value instanceof Number) {
if (value instanceof Double || value instanceof Float || value instanceof BigDecimal) {
out.println(stringVar1 + ""<real>"" + value.toString() + ""</real>"");
} else {
out.println(stringVar1 + ""<integer>"" + value.toString() + ""</integer>"");
}
} else if (value instanceof Boolean) {
if (((Boolean) value).booleanValue()) {
out.println(stringVar1 + ""<true/>"");
} else {
out.println(stringVar1 + ""<false/>"");
}
} else if (value instanceof List) {
out.println(stringVar1 + ""<array>"");
Iterator iteratorVar3 = iteratorLiteral4;
while (iteratorVar3.hasNext()) {
printValue(out, indentLevel + 1, iteratorVar3.next());
}
out.println(stringVar1 + ""</array>"");
} else if (value instanceof HierarchicalConfiguration) {
printNode(out, indentLevel, ((HierarchicalConfiguration) value).getRoot());
} else if (value instanceof Configuration) {
out.println(stringVar1 + ""<dict>"");
Configuration configurationVar5 = configurationLiteral6;
Iterator iteratorVar3 = iteratorLiteral7;
while (iteratorVar3.hasNext()) {
String stringVar8 = stringLiteral9;
Node nodeVar10 = nodeLiteral11;
nodeVar10.setValue(configurationVar5.getProperty(stringVar8));
printNode(out, indentLevel + 1, nodeVar10);
if (iteratorVar3.hasNext()) {
out.println();
}
}
out.println(stringVar1 + ""</dict>"");
} else if (value instanceof Map) {
Map mapVar12 = mapLiteral13;
printValue(out, indentLevel, new MapConfiguration(mapVar12));
} else if (value instanceof byte[]) {
String stringVar14 = stringLiteral15;
out.println(stringVar1 + ""<data>"" + StringEscapeUtils.escapeXml(stringVar14) + ""</data>"");
} else {
out.println(stringVar1 + ""<string>"" + StringEscapeUtils.escapeXml(String.valueOf(value)) + ""</string>"");
}
}",0
"public void addDataValue(String value) {
addValue(Base64.decodeBase64(value.getBytes()));
}",0
"protected int getMaxPosition() {
return reverse ? getStartOffset() + 1 : subNodes.size() - getStartOffset();
}",0
"@Override
protected String normalizeURI(final String uriref) {
final ConfigurationInterpolator configurationinterpolatorVar1 = configurationinterpolatorLiteral2;
final String stringVar3 = stringLiteral4;
return super.normalizeURI(stringVar3);
}",0
"public static void dump(Configuration configuration, PrintStream out) {
dump(configuration, new PrintWriter(out));
}",0
"public Object getProperty(String key) {
Object objectVar1 = objectLiteral2;
StringBuffer stringbufferVar3 = stringbufferLiteral4;
stringbufferVar3.append(table).append("" WHERE "");
stringbufferVar3.append(keyColumn).append(""=?"");
if (nameColumn != null) {
stringbufferVar3.append("" AND "" + nameColumn + ""=?"");
}
Connection connectionVar5 = objectLiteral2;
PreparedStatement preparedstatementVar6 = objectLiteral2;
try {
connectionVar5 = getConnection();
preparedstatementVar6 = connectionVar5.prepareStatement(stringbufferVar3.toString());
preparedstatementVar6.setString(1, key);
if (nameColumn != null) {
preparedstatementVar6.setString(2, name);
}
ResultSet resultsetVar7 = resultsetLiteral8;
List listVar9 = listLiteral10;
while (resultsetVar7.next()) {
Object objectVar11 = objectLiteral12;
if (isDelimiterParsingDisabled()) {
listVar9.add(objectVar11);
} else {
CollectionUtils.addAll(listVar9, PropertyConverter.toIterator(objectVar11, getListDelimiter()));
}
}
if (!listVar9.isEmpty()) {
objectVar1 = (listVar9.size() > 1) ? listVar9 : listVar9.get(0);
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
closeQuietly(connectionVar5, preparedstatementVar6);
}
return objectVar1;
}",0
"public Object createBean(Class beanClass, BeanDeclaration data, Object param) throws Exception {
ConfigurationDeclaration configurationdeclarationVar1 = configurationdeclarationLiteral2;
String stringVar3 = stringLiteral4;
ConfigurationProvider configurationproviderVar5 = configurationproviderLiteral6;
if (configurationproviderVar5 == null) {
throw new ConfigurationRuntimeException(""No ConfigurationProvider registered for tag "" + stringVar3);
}
try {
return configurationproviderVar5.getConfiguration(configurationdeclarationVar1);
} catch (Exception ex) {
if (!configurationdeclarationVar1.isOptional()) {
throw ex;
} else {
if (configurationdeclarationVar1.isForceCreate()) {
try {
return configurationproviderVar5.getEmptyConfiguration(configurationdeclarationVar1);
} catch (Exception ex2) {
;
}
}
return null;
}
}
}",0
"private void load(InputSource source) throws ConfigurationException {
try {
URL urlVar1 = urlLiteral2;
if (urlVar1 != null) {
source.setSystemId(urlVar1.toString());
}
DocumentBuilder documentbuilderVar3 = documentbuilderLiteral4;
Document documentVar5 = documentLiteral6;
Document documentVar7 = documentLiteral8;
document = null;
initProperties(documentVar5, documentVar7 == null);
document = (documentVar7 == null) ? documentVar5 : documentVar7;
} catch (Exception e) {
throw new ConfigurationException(e.getMessage(), e);
}
}",0
"public void set(String name, Object value) {
if (log.isTraceEnabled()) {
log.trace(""set("" + name + "","" + value + "")"");
}
if (value == null) {
throw new NullPointerException(""Error trying to set property to null."");
}
if (value instanceof List) {
List listVar1 = listLiteral2;
Iterator iteratorVar3 = iteratorLiteral4;
while (iteratorVar3.hasNext()) {
getConfiguration().addProperty(name, iteratorVar3.next());
}
} else if (value instanceof int[]) {
int[] intArrayVar5 = intArrayLiteral6;
for (int intVar17 = intLiteral18; intVar7 < intLiteral1; intVar7++) {
getConfiguration().addProperty(name, new Integer(intArrayVar5[intVar7]));
}
} else if (value instanceof boolean[]) {
boolean[] intArrayVar5 = booleanArrayLiteral9;
for (int intVar17 = intLiteral18; intVar7 < intArrayVar5.length; intVar7++) {
getConfiguration().addProperty(name, BooleanUtils.toBooleanObject(intArrayVar5[intVar7]));
}
} else if (value instanceof char[]) {
char[] intArrayVar5 = charArrayLiteral10;
for (int intVar17 = intLiteral18; intVar7 < intArrayVar5.length; intVar7++) {
getConfiguration().addProperty(name, new Character(intArrayVar5[intVar7]));
}
} else if (value instanceof byte[]) {
byte[] intArrayVar5 = byteArrayLiteral11;
for (int intVar17 = intLiteral18; intVar7 < intArrayVar5.length; intVar7++) {
getConfiguration().addProperty(name, new Byte(intArrayVar5[intVar7]));
}
} else if (value instanceof short[]) {
short[] intArrayVar5 = shortArrayLiteral12;
for (int intVar17 = intLiteral18; intVar7 < intArrayVar5.length; intVar7++) {
getConfiguration().addProperty(name, new Short(intArrayVar5[intVar7]));
}
} else if (value instanceof long[]) {
long[] intArrayVar5 = longArrayLiteral13;
for (int intVar17 = intLiteral18; intVar7 < intArrayVar5.length; intVar7++) {
getConfiguration().addProperty(name, new Long(intArrayVar5[intVar7]));
}
} else if (value instanceof float[]) {
float[] intArrayVar5 = floatArrayLiteral14;
for (int intVar17 = intLiteral18; intVar7 < intArrayVar5.length; intVar7++) {
getConfiguration().addProperty(name, new Float(intArrayVar5[intVar7]));
}
} else if (value instanceof double[]) {
double[] intArrayVar5 = doubleArrayLiteral15;
for (int intVar17 = intLiteral18; intVar7 < intArrayVar5.length; intVar7++) {
getConfiguration().addProperty(name, new Double(intArrayVar5[intVar7]));
}
} else if (value instanceof Object[]) {
Object[] intArrayVar5 = objectArrayLiteral16;
for (int intVar17 = intLiteral18; intVar7 < intArrayVar5.length; intVar7++) {
getConfiguration().addProperty(name, intArrayVar5[intVar7]);
}
} else {
getConfiguration().setProperty(name, value);
}
}",0
"public DynaProperty getDynaProperty(String name) {
if (log.isTraceEnabled()) {
log.trace(""getDynaProperty("" + name + "")"");
}
if (name == null) {
throw new IllegalArgumentException(""No such property name=["" + name + ""]"");
}
Object objectVar1 = objectLiteral2;
if (objectVar1 == null) {
return null;
} else {
Class classVar3 = classLiteral4;
if (classVar3 == Byte.class) {
classVar3 = Byte.TYPE;
}
if (classVar3 == Character.class) {
classVar3 = Character.TYPE;
} else if (classVar3 == Boolean.class) {
classVar3 = Boolean.TYPE;
} else if (classVar3 == Double.class) {
classVar3 = Double.TYPE;
} else if (classVar3 == Float.class) {
classVar3 = Float.TYPE;
} else if (classVar3 == Integer.class) {
classVar3 = Integer.TYPE;
} else if (classVar3 == Long.class) {
classVar3 = Long.TYPE;
} else if (classVar3 == Short.class) {
classVar3 = Short.TYPE;
}
return new DynaProperty(name, classVar3);
}
}",0
public Token tokenVar1;,0
"private void printValue(PrintWriter out, int indentLevel, Object value) {
String stringVar1 = stringLiteral2;
if (value instanceof Date) {
out.println(stringVar1 + ""<date>"" + PListNode.format.format((Date) value) + ""</date>"");
} else if (value instanceof Calendar) {
printValue(out, indentLevel, ((Calendar) value).getTime());
} else if (value instanceof Number) {
if (value instanceof Double || value instanceof Float || value instanceof BigDecimal) {
out.println(stringVar1 + ""<real>"" + value.toString() + ""</real>"");
} else {
out.println(stringVar1 + ""<integer>"" + value.toString() + ""</integer>"");
}
} else if (value instanceof Boolean) {
if (((Boolean) value).booleanValue()) {
out.println(stringVar1 + ""<true/>"");
} else {
out.println(stringVar1 + ""<false/>"");
}
} else if (value instanceof List) {
out.println(stringVar1 + ""<array>"");
Iterator iteratorVar3 = iteratorLiteral4;
while (iteratorVar3.hasNext()) {
printValue(out, indentLevel + 1, iteratorVar3.next());
}
out.println(stringVar1 + ""</array>"");
} else if (value instanceof HierarchicalConfiguration) {
printNode(out, indentLevel, ((HierarchicalConfiguration) value).getRoot());
} else if (value instanceof Configuration) {
out.println(stringVar1 + ""<dict>"");
Configuration configurationVar5 = configurationLiteral6;
Iterator iteratorVar3 = iteratorLiteral7;
while (iteratorVar3.hasNext()) {
String stringVar8 = stringLiteral9;
Node nodeVar10 = nodeLiteral11;
nodeVar10.setValue(configurationVar5.getProperty(stringVar8));
printNode(out, indentLevel + 1, nodeVar10);
if (iteratorVar3.hasNext()) {
out.println();
}
}
out.println(stringVar1 + ""</dict>"");
} else if (value instanceof Map) {
Map mapVar12 = mapLiteral13;
printValue(out, indentLevel, new MapConfiguration(mapVar12));
} else if (value instanceof byte[]) {
String stringVar14 = stringLiteral15;
out.println(stringVar1 + ""<data>"" + StringEscapeUtils.escapeXml(stringVar14) + ""</data>"");
} else {
out.println(stringVar1 + ""<string>"" + StringEscapeUtils.escapeXml(String.valueOf(value)) + ""</string>"");
}
}",0
private ConfigurationNode configurationnodeVar1;,0
"private ImmutableNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
} else {
Iterator<ConfigData> iterator<configdata>Var1 = iterator<configdata>Literal2;
ImmutableNode immutablenodeVar3 = immutablenodeLiteral4;
while (iterator<configdata>Var1.hasNext()) {
immutablenodeVar3 = nodeCombiner.combine(immutablenodeVar3, iterator<configdata>Var1.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream bytearrayoutputstreamVar5 = bytearrayoutputstreamLiteral6;
PrintStream printstreamVar7 = printstreamLiteral8;
TreeUtils.printTree(printstreamVar7, immutablenodeVar3);
getLogger().debug(bytearrayoutputstreamVar5.toString());
}
return immutablenodeVar3;
}
}",0
"public static void dump(Configuration configuration, PrintStream out) {
dump(configuration, new PrintWriter(out));
}",0
"protected PreparedStatement createStatement(String sql, boolean nameCol) throws SQLException {
String stringVar1;
if (nameCol && configurationNameColumn != null) {
StringBuilder stringbuilderVar2 = stringbuilderLiteral3;
stringbuilderVar2.append("" AND "").append(configurationNameColumn).append(""=?"");
stringVar1 = stringbuilderVar2.toString();
} else {
stringVar1 = sql;
}
pstmt = getConnection().prepareStatement(stringVar1);
return pstmt;
}",0
"public void save(Document document, Node parent) {
Element elementVar1 = elementLiteral2;
parent.appendChild(elementVar1);
if (getHeader() != null) {
Element elementVar3 = elementLiteral4;
elementVar1.appendChild(elementVar3);
elementVar3.setTextContent(StringEscapeUtils.escapeXml(getHeader()));
}
Iterator<String> iterator<string>Var5 = iterator<string>Literal6;
while (iterator<string>Var5.hasNext()) {
String stringVar7 = stringLiteral8;
Object objectVar9 = objectLiteral10;
if (objectVar9 instanceof List) {
writeProperty(document, elementVar1, stringVar7, (List<?>) objectVar9);
} else {
writeProperty(document, elementVar1, stringVar7, objectVar9);
}
}
}",0
"private ConfigurationBuilderEvent createEventWithChangedSource(ConfigurationBuilderEvent event) {
if (ConfigurationBuilderResultCreatedEvent.RESULT_CREATED.equals(event.getEventType())) {
return new ConfigurationBuilderResultCreatedEvent(this, ConfigurationBuilderResultCreatedEvent.RESULT_CREATED, ((ConfigurationBuilderResultCreatedEvent) event).getConfiguration());
}
@SuppressWarnings(""unchecked"")
EventType<? extends ConfigurationBuilderEvent> eventtype<? extends configurationbuilderevent>Var1 = eventtype<? extends configurationbuilderevent>Literal2;
return new ConfigurationBuilderEvent(this, eventtype<? extends configurationbuilderevent>Var1);
}",0
"@Override
public void loadSystemCatalogs() throws IOException {
fs = ((CatalogManager) catalogManager).getFileSystem();
String stringVar1 = stringLiteral2;
@SuppressWarnings(""unchecked"")
Vector<String> vector<string>Var3 = vector<string>Literal4;
if (vector<string>Var3 != null) {
for (int intVar16 = intLiteral17; intVar5 < intLiteral1; intVar5++) {
String stringVar7 = stringLiteral8;
URL urlVar9 = urlLiteral10;
InputStream inputstreamVar11 = urlLiteral10;
try {
urlVar9 = locate(fs, stringVar1, stringVar7);
if (urlVar9 != null) {
inputstreamVar11 = fs.getInputStream(urlVar9);
}
} catch (ConfigurationException ce) {
String stringVar12 = stringLiteral13;
catalogManager.debug.message(DEBUG_ALL, ""Unable to get input stream for "" + stringVar12 + "". "" + ce.getMessage());
}
if (inputstreamVar11 != null) {
String stringVar14 = stringLiteral15;
try {
if (stringVar14 != null) {
parseCatalog(stringVar14, inputstreamVar11);
continue;
}
} catch (Exception ex) {
catalogManager.debug.message(DEBUG_ALL, ""Exception caught parsing input stream for "" + stringVar7 + "". "" + ex.getMessage());
} finally {
inputstreamVar11.close();
}
}
parseCatalog(stringVar1, stringVar7);
}
}
}",0
"private ConfigurationNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return new ViewNode();
} else {
Iterator<ConfigData> iterator<configdata>Var1 = iterator<configdata>Literal2;
ConfigurationNode configurationnodeVar3 = configurationnodeLiteral4;
while (iterator<configdata>Var1.hasNext()) {
configurationnodeVar3 = nodeCombiner.combine(configurationnodeVar3, iterator<configdata>Var1.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream bytearrayoutputstreamVar5 = bytearrayoutputstreamLiteral6;
PrintStream printstreamVar7 = printstreamLiteral8;
TreeUtils.printTree(printstreamVar7, configurationnodeVar3);
getLogger().debug(bytearrayoutputstreamVar5.toString());
}
return configurationnodeVar3;
}
}",0
"public static Byte toByte(Object value) throws ConversionException {
Number numberVar1 = numberLiteral2;
if (numberVar1 instanceof Byte) {
return (Byte) numberVar1;
} else {
return new Byte(numberVar1.byteValue());
}
}",0
"@Override
protected String normalizeURI(String uriref) {
ConfigurationInterpolator configurationinterpolatorVar1 = configurationinterpolatorLiteral2;
String stringVar3 = stringLiteral4;
return super.normalizeURI(stringVar3);
}",0
"private ImmutableNode constructCombinedNode() {
if (getNumberOfConfigurationsInternal() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return EMPTY_ROOT;
} else {
Iterator<ConfigData> iterator<configdata>Var1 = iterator<configdata>Literal2;
ImmutableNode immutablenodeVar3 = immutablenodeLiteral4;
while (iterator<configdata>Var1.hasNext()) {
immutablenodeVar3 = nodeCombiner.combine(immutablenodeVar3, iterator<configdata>Var1.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream bytearrayoutputstreamVar5 = bytearrayoutputstreamLiteral6;
PrintStream printstreamVar7 = printstreamLiteral8;
TreeUtils.printTree(printstreamVar7, immutablenodeVar3);
getLogger().debug(bytearrayoutputstreamVar5.toString());
}
return immutablenodeVar3;
}
}",0
"@Override
public void read(Reader in) throws ConfigurationException {
SAXParserFactory saxparserfactoryVar1 = saxparserfactoryLiteral2;
saxparserfactoryVar1.setNamespaceAware(false);
saxparserfactoryVar1.setValidating(true);
try {
SAXParser saxparserVar3 = saxparserLiteral4;
XMLReader xmlreaderVar5 = xmlreaderLiteral6;
xmlreaderVar5.setEntityResolver(new EntityResolver() {
@Override
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlreaderVar5.setContentHandler(new XMLPropertiesHandler());
xmlreaderVar5.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}",0
private ConfigurationSourceData configurationsourcedataVar1;,0
"public void setValue(Object value) throws ConfigurationRuntimeException {
try {
if (!(value instanceof String)) {
this.value = value;
return;
}
String stringVar1 = stringLiteral2;
String stringVar3 = stringLiteral4;
Class<?> class<?>Var5 = class<?>Literal6;
if (stringVar3.length() == stringVar1.length()) {
this.value = class<?>Var5.newInstance();
} else {
this.value = class<?>Var5;
}
} catch (Exception e) {
throw new ConfigurationRuntimeException(""Unable to create "" + value, e);
}
}",0
"@Override
protected String normalizeURI(String uriref) {
ConfigurationInterpolator configurationinterpolatorVar1 = configurationinterpolatorLiteral2;
String stringVar3 = stringLiteral4;
return super.normalizeURI(stringVar3);
}",0
private final QueryResult<T> queryresult<t>Var1;,0
private final NodeHandler<T> nodehandler<t>Var1;,0
"public static void dump(Configuration configuration, PrintStream out) {
dump(configuration, new PrintWriter(out));
}",0
"@Override
protected Boolean performOperation() throws SQLException {
PreparedStatement preparedstatementVar1 = preparedstatementLiteral2;
ResultSet resultsetVar3 = resultsetLiteral4;
return resultsetVar3.next();
}",0
"@Override
public void read(Reader in) throws ConfigurationException {
SAXParserFactory saxparserfactoryVar1 = saxparserfactoryLiteral2;
saxparserfactoryVar1.setNamespaceAware(false);
saxparserfactoryVar1.setValidating(true);
try {
SAXParser saxparserVar3 = saxparserLiteral4;
XMLReader xmlreaderVar5 = xmlreaderLiteral6;
xmlreaderVar5.setEntityResolver(new EntityResolver() {
@Override
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlreaderVar5.setContentHandler(new XMLPropertiesHandler());
xmlreaderVar5.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
// todo: support included properties ?
}",0
"private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String stringVar1 = stringLiteral2;
Class<?>[] class<?>ArrayVar3 = class<?>ArrayLiteral4;
class<?>ArrayVar3[0] = FileSystemOptions.class;
class<?>ArrayVar3[1] = value.getClass();
try {
Method methodVar5 = methodLiteral6;
Object[] objectArrayVar7 = objectArrayLiteral8;
objectArrayVar7[0] = options;
objectArrayVar7[1] = value;
methodVar5.invoke(builder, objectArrayVar7);
} catch (Exception ex) {
return;
}
}",0
"@Override
public void write(Writer out) throws ConfigurationException {
PrintWriter printwriterVar1 = printwriterLiteral2;
if (locator.getEncoding() != null) {
printwriterVar1.println(""<?xml version=\""1.0\"" encoding=\"""" + locator.getEncoding() + ""\""?>"");
} else {
printwriterVar1.println(""<?xml version=\""1.0\""?>"");
}
printwriterVar1.println(""<!DOCTYPE plist SYSTEM \""file://localhost/System/Library/DTDs/PropertyList.dtd\"">"");
printwriterVar1.println(""<plist version=\""1.0\"">"");
printNode(printwriterVar1, 1, getNodeModel().getNodeHandler().getRootNode());
printwriterVar1.println(""</plist>"");
printwriterVar1.flush();
}",0
"public DataSource getDataSource() {
return dataSource;
}",0
"private static Class<?> getDefaultClass(final Object bean, final String propName) {
try {
final PropertyDescriptor propertydescriptorVar1 = propertydescriptorLiteral2;
if (propertydescriptorVar1 == null) {
return null;
}
return propertydescriptorVar1.getPropertyType();
} catch (final Exception ex) {
return null;
}
}",0
"private String sourceURLAsString() {
return sourceURL != null ? sourceURL.toExternalForm() : StringUtils.EMPTY;
}",0
private final String stringVar1;,0
private ConfigurationListener configurationlistenerVar1;,0
"public static void dump(Configuration configuration, PrintStream out) {
dump(configuration, new PrintWriter(out));
}",0
private final ConfigurationInterpolator configurationinterpolatorVar1;,0
"public void read(Reader in) throws ConfigurationException {
if (!(getRootNode() instanceof PListNode)) {
initRoot();
}
EntityResolver entityresolverVar1 = entityresolverLiteral2;
XMLPropertyListHandler xmlpropertylisthandlerVar3 = xmlpropertylisthandlerLiteral4;
try {
SAXParserFactory saxparserfactoryVar5 = saxparserfactoryLiteral6;
saxparserfactoryVar5.setValidating(true);
SAXParser saxparserVar7 = saxparserLiteral8;
saxparserVar7.getXMLReader().setEntityResolver(entityresolverVar1);
saxparserVar7.getXMLReader().setContentHandler(xmlpropertylisthandlerVar3);
saxparserVar7.getXMLReader().parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}",0
"public NodePointer getNodePointer() {
if (getPosition() < 1 && !setPosition(1)) {
return null;
}
return createNodePointer(subNodes.get(positionToIndex(getPosition())));
}",0
"void extractProperties15() {
try {
Method methodVar1 = methodLiteral2;
environment = (Map) methodVar1.invoke(null, null);
} catch (Exception ex) {
throw new ConfigurationRuntimeException(""Error when accessing environment properties"", ex);
}
}",0
"static Object toEnum(Object value, Class cls) throws ConversionException {
if (value.getClass().equals(cls)) {
return value;
} else if (value instanceof String) {
try {
Method methodVar1 = methodLiteral2;
return methodVar1.invoke(null, new Object[] { value });
} catch (Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a "" + cls.getName());
}
} else if (value instanceof Number) {
try {
Method methodVar3 = methodLiteral4;
Object objectVar5 = objectLiteral6;
return Array.get(objectVar5, ((Number) value).intValue());
} catch (Exception e) {
throw new ConversionException(""The value "" + value + "" can't be converted to a "" + cls.getName());
}
} else {
throw new ConversionException(""The value "" + value + "" can't be converted to a "" + cls.getName());
}
}",0
"private void load(InputSource source) throws ConfigurationException {
try {
URL urlVar1 = urlLiteral2;
if (urlVar1 != null) {
source.setSystemId(urlVar1.toString());
}
DocumentBuilder documentbuilderVar3 = documentbuilderLiteral4;
Document documentVar5 = documentLiteral6;
Document documentVar7 = documentLiteral8;
document = null;
initProperties(documentVar5, documentVar7 == null);
document = (documentVar7 == null) ? documentVar5 : documentVar7;
} catch (Exception e) {
throw new ConfigurationException(""Unable to load the configuration"", e);
}
}",0
"public void Done() {
buffer = null;
bufline = null;
bufcolumn = null;
}",0
"public String GetImage() {
if (bufpos >= tokenBegin)
return new String(buffer, tokenBegin, bufpos - tokenBegin + 1);
else
return new String(buffer, tokenBegin, bufsize - tokenBegin) + new String(buffer, 0, bufpos + 1);
}",0
"public void load(Reader in) throws ConfigurationException {
EntityResolver entityresolverVar1 = entityresolverLiteral2;
XMLPropertyListHandler xmlpropertylisthandlerVar3 = xmlpropertylisthandlerLiteral4;
try {
SAXParserFactory saxparserfactoryVar5 = saxparserfactoryLiteral6;
saxparserfactoryVar5.setValidating(true);
SAXParser saxparserVar7 = saxparserLiteral8;
saxparserVar7.getXMLReader().setEntityResolver(entityresolverVar1);
saxparserVar7.getXMLReader().setContentHandler(xmlpropertylisthandlerVar3);
saxparserVar7.getXMLReader().parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}",0
"public void load(Reader in) throws ConfigurationException {
EntityResolver entityresolverVar1 = entityresolverLiteral2;
XMLPropertyListHandler xmlpropertylisthandlerVar3 = xmlpropertylisthandlerLiteral4;
try {
SAXParserFactory saxparserfactoryVar5 = saxparserfactoryLiteral6;
saxparserfactoryVar5.setValidating(true);
SAXParser saxparserVar7 = saxparserLiteral8;
saxparserVar7.getXMLReader().setEntityResolver(entityresolverVar1);
saxparserVar7.getXMLReader().setContentHandler(xmlpropertylisthandlerVar3);
saxparserVar7.getXMLReader().parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}",0
"public boolean removeNodes(String name) {
if (nodes != null && name != null) {
List listVar1 = listLiteral2;
if (listVar1 != null) {
detachNodes(listVar1);
nodes.removeAll(listVar1);
return true;
}
}
return false;
}",0
private ConfigurationNode configurationnodeVar1;,0
"public double getDouble(String key, double defaultValue) {
return getDouble(key, new Double(defaultValue)).doubleValue();
}",0
"public void load(InputStream in, String encoding) throws ConfigurationException {
Reader readerVar1 = readerLiteral2;
if (encoding != null) {
try {
readerVar1 = new InputStreamReader(in, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (readerVar1 == null) {
readerVar1 = new InputStreamReader(in);
}
load(readerVar1);
}",0
"public Object getProperty(String key) {
Object objectVar1 = objectLiteral2;
StringBuffer stringbufferVar3 = stringbufferLiteral4;
stringbufferVar3.append(table).append("" WHERE "");
stringbufferVar3.append(keyColumn).append(""=?"");
if (nameColumn != null) {
stringbufferVar3.append("" AND "" + nameColumn + ""=?"");
}
Connection connectionVar5 = objectLiteral2;
PreparedStatement preparedstatementVar6 = objectLiteral2;
try {
connectionVar5 = getConnection();
preparedstatementVar6 = connectionVar5.prepareStatement(stringbufferVar3.toString());
preparedstatementVar6.setString(1, key);
if (nameColumn != null) {
preparedstatementVar6.setString(2, name);
}
ResultSet resultsetVar7 = resultsetLiteral8;
List listVar9 = listLiteral10;
while (resultsetVar7.next()) {
Object objectVar11 = objectLiteral12;
if (isDelimiterParsingDisabled()) {
listVar9.add(objectVar11);
} else {
CollectionUtils.addAll(listVar9, PropertyConverter.toIterator(objectVar11, getListDelimiter()));
}
}
if (!listVar9.isEmpty()) {
objectVar1 = (listVar9.size() > 1) ? listVar9 : listVar9.get(0);
}
} catch (SQLException e) {
fireError(EVENT_READ_PROPERTY, key, null, e);
} finally {
closeQuietly(connectionVar5, preparedstatementVar6);
}
return objectVar1;
}",0
private ExpressionEngine expressionengineVar1;,0
"public static Byte toByte(Object value) throws ConversionException {
Number numberVar1 = numberLiteral2;
if (numberVar1 instanceof Byte) {
return (Byte) numberVar1;
} else {
return new Byte(numberVar1.byteValue());
}
}",0
"final public PropertyListConfiguration Dictionary() throws ParseException {
PropertyListConfiguration propertylistconfigurationVar1 = propertylistconfigurationLiteral2;
List listVar3 = listLiteral4;
Node nodeVar5 = nodeLiteral6;
jj_consume_token(DICT_BEGIN);
label_1: while (true) {
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case STRING:
case QUOTED_STRING:
;
break;
default:
jj_la1[0] = jj_gen;
break label_1;
}
nodeVar5 = Property();
if (nodeVar5.getValue() instanceof HierarchicalConfiguration) {
HierarchicalConfiguration hierarchicalconfigurationVar7 = hierarchicalconfigurationLiteral8;
Node nodeVar9 = nodeLiteral10;
nodeVar9.setName(nodeVar5.getName());
listVar3.add(nodeVar9);
} else {
listVar3.add(nodeVar5);
}
}
jj_consume_token(DICT_END);
for (int intVar13 = intLiteral14; intVar11 < intLiteral1; intVar11++) {
nodeVar5 = (Node) listVar3.get(intVar11);
propertylistconfigurationVar1.getRoot().addChild(nodeVar5);
}
return propertylistconfigurationVar1;
}",0
"private final void ReInitRounds() {
int intVar1;
jjround = 0x80000001;
for (intVar1 = 9; intVar1-- > intLiteral1; ) jjrounds[intVar1] = 0x80000000;
}",0
"public void addRealValue(String value) {
addValue(new Double(value));
}",0
private ConfigurationNode configurationnodeVar1;,0
"private static Class<?> getDefaultClass(Object bean, String propName) {
try {
PropertyDescriptor propertydescriptorVar1 = propertydescriptorLiteral2;
if (propertydescriptorVar1 == null) {
return null;
}
return propertydescriptorVar1.getPropertyType();
} catch (Exception ex) {
return null;
}
}",0
"public static Float toFloat(Object value) throws ConversionException {
Number numberVar1 = numberLiteral2;
if (numberVar1 instanceof Float) {
return (Float) numberVar1;
} else {
return new Float(numberVar1.floatValue());
}
}",0
"private ConfigurationNode constructCombinedNode() {
if (getNumberOfConfigurations() < 1) {
if (getLogger().isDebugEnabled()) {
getLogger().debug(""No configurations defined for "" + this);
}
return new ViewNode();
} else {
Iterator<ConfigData> iterator<configdata>Var1 = iterator<configdata>Literal2;
ConfigurationNode configurationnodeVar3 = configurationnodeLiteral4;
while (iterator<configdata>Var1.hasNext()) {
configurationnodeVar3 = getNodeCombiner().combine(configurationnodeVar3, iterator<configdata>Var1.next().getTransformedRoot());
}
if (getLogger().isDebugEnabled()) {
ByteArrayOutputStream bytearrayoutputstreamVar5 = bytearrayoutputstreamLiteral6;
PrintStream printstreamVar7 = printstreamLiteral8;
TreeUtils.printTree(printstreamVar7, configurationnodeVar3);
getLogger().debug(bytearrayoutputstreamVar5.toString());
}
return configurationnodeVar3;
}
}",0
protected Configuration configurationVar1;,0
"public Object createBean(Class<?> beanClass, BeanDeclaration data, Object param) throws Exception {
ConfigurationDeclaration configurationdeclarationVar1 = configurationdeclarationLiteral2;
String stringVar3 = stringLiteral4;
ConfigurationProvider configurationproviderVar5 = configurationproviderLiteral6;
if (configurationproviderVar5 == null) {
throw new ConfigurationRuntimeException(""No ConfigurationProvider registered for tag "" + stringVar3);
}
try {
AbstractConfiguration abstractconfigurationVar7 = abstractconfigurationLiteral8;
installInterpolator(configurationdeclarationVar1, abstractconfigurationVar7);
return abstractconfigurationVar7;
} catch (Exception ex) {
if (!configurationdeclarationVar1.isOptional()) {
throw ex;
} else {
if (logger.isDebugEnabled()) {
logger.debug(""Load failed for optional configuration "" + stringVar3 + "": "" + ex.getMessage());
}
configurationdeclarationVar1.getConfigurationBuilder().fireError(EVENT_ERR_LOAD_OPTIONAL, configurationdeclarationVar1.getConfiguration().getString(ATTR_NAME), null, ex);
if (configurationdeclarationVar1.isForceCreate()) {
try {
return configurationproviderVar5.getEmptyConfiguration(configurationdeclarationVar1);
} catch (Exception ex2) {
logger.warn(""Could not create instance of optional configuration "" + stringVar3, ex2);
}
}
return null;
}
}
}",0
private final Object objectVar1;,0
"public Lock(String name) {
this.name = name;
synchronized (counterLock) {
instanceId = ++counter;
}
}",0
"private FileSystemOptions getOptions(String scheme) {
FileSystemOptions filesystemoptionsVar1 = filesystemoptionsLiteral2;
FileSystemConfigBuilder filesystemconfigbuilderVar3;
try {
filesystemconfigbuilderVar3 = VFS.getManager().getFileSystemConfigBuilder(scheme);
} catch (Exception ex) {
return null;
}
FileOptionsProvider fileoptionsproviderVar4 = fileoptionsproviderLiteral5;
if (fileoptionsproviderVar4 != null) {
Map<String, Object> map<string,object>Var6 = map<string,object>Literal7;
if (map<string,object>Var6 == null) {
return null;
}
int intVar8 = intLiteral9;
for (Map.Entry<String, Object> map.entry<string,object>Var10 : map<string,object>Var6.entrySet()) {
try {
String stringVar11 = stringLiteral12;
if (FileOptionsProvider.CURRENT_USER.equals(stringVar11)) {
stringVar11 = ""creatorName"";
}
setProperty(filesystemconfigbuilderVar3, filesystemoptionsVar1, stringVar11, map.entry<string,object>Var10.getValue());
++intVar8;
} catch (Exception ex) {
continue;
}
}
if (intVar8 > 0) {
return filesystemoptionsVar1;
}
}
return null;
}",0
private EntityResolver entityresolverVar1 = entityresolverLiteral2;,0
"public NodePointer getNodePointer() {
if (getPosition() < 1 && !setPosition(1)) {
return null;
}
return createNodePointer(subNodes.get(positionToIndex(getPosition())));
}",0
"@Override
public void visitBeforeChildren(final ImmutableNode node, final NodeHandler<ImmutableNode> handler) {
final ReferenceNodeHandler referencenodehandlerVar1 = referencenodehandlerLiteral2;
updateNode(node, referencenodehandlerVar1);
insertNewChildNodes(node, referencenodehandlerVar1);
}",0
"private ConfigurationBuilderEvent createEventWithChangedSource(final ConfigurationBuilderEvent event) {
if (ConfigurationBuilderResultCreatedEvent.RESULT_CREATED.equals(event.getEventType())) {
return new ConfigurationBuilderResultCreatedEvent(this, ConfigurationBuilderResultCreatedEvent.RESULT_CREATED, ((ConfigurationBuilderResultCreatedEvent) event).getConfiguration());
}
@SuppressWarnings(""unchecked"")
final EventType<? extends ConfigurationBuilderEvent> eventtype<? extends configurationbuilderevent>Var1 = eventtype<? extends configurationbuilderevent>Literal2;
return new ConfigurationBuilderEvent(this, eventtype<? extends configurationbuilderevent>Var1);
}",0
"public static Float toFloat(final Object value) throws ConversionException {
final Number numberVar1 = numberLiteral2;
if (numberVar1 instanceof Float) {
return (Float) numberVar1;
}
return new Float(numberVar1.floatValue());
}",0
"@Override
protected String normalizeURI(final String uriref) {
final ConfigurationInterpolator configurationinterpolatorVar1 = configurationinterpolatorLiteral2;
final String stringVar3 = stringLiteral4;
return super.normalizeURI(stringVar3);
}",0
"public void save(OutputStream out, String encoding) throws ConfigurationException {
Writer writerVar1 = writerLiteral2;
if (encoding != null) {
try {
writerVar1 = new OutputStreamWriter(out, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (writerVar1 == null) {
writerVar1 = new OutputStreamWriter(out);
}
save(writerVar1);
}",0
"protected PreparedStatement createStatement(String sql, boolean nameCol) throws SQLException {
String stringVar1;
if (nameCol && nameColumn != null) {
StringBuilder stringbuilderVar2 = stringbuilderLiteral3;
stringbuilderVar2.append("" AND "").append(nameColumn).append(""=?"");
stringVar1 = stringbuilderVar2.toString();
} else {
stringVar1 = sql;
}
pstmt = getConnection().prepareStatement(stringVar1);
return pstmt;
}",0
"public Object createBean(Class<?> beanClass, BeanDeclaration data, Object param) throws Exception {
ConfigurationDeclaration configurationdeclarationVar1 = configurationdeclarationLiteral2;
String stringVar3 = stringLiteral4;
ConfigurationProvider configurationproviderVar5 = configurationproviderLiteral6;
if (configurationproviderVar5 == null) {
throw new ConfigurationRuntimeException(""No ConfigurationProvider registered for tag "" + stringVar3);
}
try {
return configurationproviderVar5.getConfiguration(configurationdeclarationVar1);
} catch (Exception ex) {
if (!configurationdeclarationVar1.isOptional()) {
throw ex;
} else {
if (logger.isDebugEnabled()) {
logger.debug(""Load failed for optional configuration "" + stringVar3 + "": "" + ex.getMessage());
}
configurationdeclarationVar1.getConfigurationBuilder().fireError(EVENT_ERR_LOAD_OPTIONAL, configurationdeclarationVar1.getConfiguration().getString(ATTR_NAME), null, ex);
if (configurationdeclarationVar1.isForceCreate()) {
try {
return configurationproviderVar5.getEmptyConfiguration(configurationdeclarationVar1);
} catch (Exception ex2) {
;
}
}
return null;
}
}
}",0
"private AbstractHierarchicalFileConfiguration getConfiguration() {
if (pattern == null) {
throw new ConfigurationRuntimeException(""File pattern must be defined"");
}
String stringVar1 = stringLiteral2;
if (configurationsMap.containsKey(stringVar1)) {
return configurationsMap.get(stringVar1);
}
if (stringVar1.equals(pattern)) {
XMLConfiguration xmlconfigurationVar3 = xmlconfigurationLiteral4;
configurationsMap.putIfAbsent(pattern, xmlconfigurationVar3);
return xmlconfigurationVar3;
}
XMLConfiguration xmlconfigurationVar3 = xmlconfigurationLiteral5;
if (loggerName != null) {
Log logVar6 = logLiteral7;
if (logVar6 != null) {
xmlconfigurationVar3.setLogger(logVar6);
}
}
xmlconfigurationVar3.setBasePath(getBasePath());
xmlconfigurationVar3.setFileName(stringVar1);
xmlconfigurationVar3.setFileSystem(getFileSystem());
xmlconfigurationVar3.setExpressionEngine(getExpressionEngine());
ReloadingStrategy reloadingstrategyVar8 = reloadingstrategyLiteral9;
if (reloadingstrategyVar8 != null) {
xmlconfigurationVar3.setReloadingStrategy(reloadingstrategyVar8);
}
xmlconfigurationVar3.setDelimiterParsingDisabled(isDelimiterParsingDisabled());
xmlconfigurationVar3.setAttributeSplittingDisabled(isAttributeSplittingDisabled());
xmlconfigurationVar3.setValidating(validating);
xmlconfigurationVar3.setSchemaValidation(schemaValidation);
xmlconfigurationVar3.setEntityResolver(entityResolver);
xmlconfigurationVar3.setListDelimiter(getListDelimiter());
xmlconfigurationVar3.addConfigurationListener(this);
xmlconfigurationVar3.addErrorListener(this);
try {
xmlconfigurationVar3.load();
} catch (ConfigurationException ce) {
if (isThrowable(ce)) {
throw new ConfigurationRuntimeException(ce);
}
}
configurationsMap.putIfAbsent(stringVar1, xmlconfigurationVar3);
return configurationsMap.get(stringVar1);
}",0
"public void load(InputStream in, String encoding) throws ConfigurationException {
Reader readerVar1 = readerLiteral2;
if (encoding != null) {
try {
readerVar1 = new InputStreamReader(in, encoding);
} catch (UnsupportedEncodingException e) {
throw new ConfigurationException(""The requested encoding is not supported, try the default encoding."", e);
}
}
if (readerVar1 == null) {
readerVar1 = new InputStreamReader(in);
}
load(readerVar1);
}",0
"@Override
public int compareChildNodePointers(NodePointer pointer1, NodePointer pointer2) {
T TVar1 = ((ConfigurationNodePointer<T>) pointer1).getConfigurationNode();
T TVar2 = ((ConfigurationNodePointer<T>) pointer2).getConfigurationNode();
for (T TVar3 : getNodeHandler().getChildren(getConfigurationNode())) {
if (TVar3 == TVar1) {
return -1;
} else if (TVar3 == TVar2) {
return 1;
}
}
return 0;",0
"public static File constructFile(String basePath, String fileName) {
File fileVar1;
File fileVar2 = fileLiteral3;
if (fileName != null) {
fileVar2 = new File(fileName);
}
if (StringUtils.isEmpty(basePath) || (fileVar2 != null && fileVar2.isAbsolute())) {
fileVar1 = new File(fileName);
} else {
StringBuilder stringbuilderVar4 = stringbuilderLiteral5;
stringbuilderVar4.append(basePath);
if (!basePath.endsWith(File.separator)) {
stringbuilderVar4.append(File.separator);
}
if (fileName.startsWith(""."" + File.separator)) {
stringbuilderVar4.append(fileName.substring(2));
} else {
stringbuilderVar4.append(fileName);
}
fileVar1 = new File(stringbuilderVar4.toString());
}
return fileVar1;
}",0
"private void setProperty(FileSystemConfigBuilder builder, FileSystemOptions options, String key, Object value) {
String stringVar1 = stringLiteral2;
Class[] classArrayVar3 = classArrayLiteral4;
classArrayVar3[0] = FileSystemOptions.class;
classArrayVar3[1] = value.getClass();
try {
Method methodVar5 = methodLiteral6;
Object[] objectArrayVar7 = objectArrayLiteral8;
objectArrayVar7[0] = options;
objectArrayVar7[1] = value;
methodVar5.invoke(builder, objectArrayVar7);
} catch (Exception ex) {
return;
}
}",0
"final public List Array() throws ParseException {
List listVar1 = listLiteral2;
Object objectVar3 = objectLiteral4;
jj_consume_token(ARRAY_BEGIN);
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case ARRAY_BEGIN:
case OBJECT_BEGIN:
case STRING:
case INTEGER:
case REAL:
case TRUE:
case FALSE:
case NULL:
objectVar3 = Value();
listVar1.add(objectVar3);
label_2: while (true) {
switch((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case LIST_SEPARATOR:
;
break;
default:
jj_la1[3] = jj_gen;
break label_2;
}
jj_consume_token(LIST_SEPARATOR);
objectVar3 = Value();
listVar1.add(objectVar3);
}
break;
default:
jj_la1[4] = jj_gen;
;
}
jj_consume_token(ARRAY_END);
{
if (true)
return listVar1;
}
throw new Error(""Missing return statement in function"");
}",0
"public void ReInit(java.io.InputStream stream, String encoding) {
try {
jj_input_stream.ReInit(stream, encoding, 1, 1);
} catch (java.io.UnsupportedEncodingException e) {
throw new RuntimeException(e);
}
token_source.ReInit(jj_input_stream);
token = new Token();
jj_ntk = -1;
jj_gen = 0;
for (int intVar3 = intLiteral4; intVar1 < intLiteral1; intVar1++) jj_la1[intVar1] = -1;
}",0
"public String getMessage() {
if (!specialConstructor) {
return super.getMessage();
}
StringBuffer stringbufferVar1 = stringbufferLiteral2;
int intVar3 = intLiteral4;
for (int intVar11 = intLiteral12; intVar5 < intLiteral1; intVar5++) {
if (intVar3 < expectedTokenSequences[intVar5].length) {
intVar3 = expectedTokenSequences[intVar5].length;
}
for (int intVar13 = intLiteral12; intVar6 < intLiteral2; intVar6++) {
stringbufferVar1.append(tokenImage[expectedTokenSequences[intVar5][intVar6]]).append(' ');
}
if (expectedTokenSequences[intVar5][expectedTokenSequences[intVar5].length - 1] != 0) {
stringbufferVar1.append(""..."");
}
stringbufferVar1.append(eol).append(""    "");
}
String stringVar7 = stringLiteral8;
Token tokenVar9 = tokenLiteral10;
for (int intVar11 = intLiteral12; intVar5 < intLiteral3; intVar5++) {
if (intVar5 != 0)
stringVar7 += "" "";
if (tokenVar9.kind == 0) {
stringVar7 += tokenImage[0];
break;
}
stringVar7 += "" "" + tokenImage[tokenVar9.kind];
stringVar7 += "" \"""";
stringVar7 += add_escapes(tokenVar9.image);
stringVar7 += "" \"""";
tokenVar9 = tokenVar9.next;
}
stringVar7 += ""\"" at line "" + currentToken.next.beginLine + "", column "" + currentToken.next.beginColumn;
stringVar7 += ""."" + eol;
if (expectedTokenSequences.length == 1) {
stringVar7 += ""Was expecting:"" + eol + ""    "";
} else {
stringVar7 += ""Was expecting one of:"" + eol + ""    "";
}
stringVar7 += stringbufferVar1.toString();
return stringVar7;
}",0
"public void ReInit(java.io.InputStream dstream, String encoding, int startline, int startcolumn, int buffersize) throws java.io.UnsupportedEncodingException {
ReInit(encoding == null ? new java.io.InputStreamReader(dstream) : new java.io.InputStreamReader(dstream, encoding), startline, startcolumn, buffersize);
}",0
"public void ReInit(java.io.InputStream dstream, String encoding) throws java.io.UnsupportedEncodingException {
ReInit(dstream, encoding, 1, 1, 4096);
}",0
"public void ReInit(java.io.Reader dstream, int startline, int startcolumn, int buffersize) {
inputStream = dstream;
line = startline;
column = startcolumn - 1;
if (buffer == null || buffersize != buffer.length) {
available = bufsize = buffersize;
buffer = new char[buffersize];
bufline = new int[buffersize];
bufcolumn = new int[buffersize];
}
prevCharIsLF = prevCharIsCR = false;
tokenBegin = inBuf = maxNextCharInd = 0;
bufpos = -1;
}",0
"final public byte[] Data() throws ParseException {
Token tokenVar1;
tokenVar1 = jj_consume_token(DATA);
{
if (true)
return filterData(tokenVar1.image);
}
throw new Error(""Missing return statement in function"");
}",0
"private int jjMoveNfa_0(int startState, int curPos) {
int intVar1 = intLiteral2;
jjnewStateCnt = 14;
int intVar3 = intLiteral4;
jjstateSet[0] = startState;
int intVar5 = intLiteral6;
for (; ; ) {
if (++jjround == 0x7fffffff) {
ReInitRounds();
}
if (curChar < 64) {
long longVar7 = longLiteral8;
do {
switch(jjstateSet[--intVar3]) {
case 15:
if ((0xd7ffecfaffffd9ffL & longVar7) != 0L) {
if (intVar5 > 21) {
intVar5 = 21;
}
jjCheckNAdd(8);
}
if ((0x7ff280100000000L & longVar7) != 0L) {
jjCheckNAddTwoStates(4, 5);
} else if (curChar == 62) {
if (intVar5 > 20) {
intVar5 = 20;
}
}
break;
case 6:
if ((0xd7ffecfaffffd9ffL & longVar7) != 0L) {
if (intVar5 > 21) {
intVar5 = 21;
}
jjCheckNAdd(8);
}
if ((0x3ff000100002600L & longVar7) != 0L) {
jjCheckNAddTwoStates(1, 2);
} else if (curChar == 42) {
jjstateSet[jjnewStateCnt++] = 3;
} else if (curChar == 62) {
if (intVar5 > 19) {
intVar5 = 19;
}
}
break;
case 14:
if ((0xfffffffbffffffffL & longVar7) != 0L) {
jjCheckNAddStates(0, 2);
} else if (curChar == 34) {
if (intVar5 > 22) {
intVar5 = 22;
}
}
break;
case 3:
case 8:
if ((0xd7ffecfaffffd9ffL & longVar7) == 0L) {
break;
}
if (intVar5 > 21) {
intVar5 = 21;
}
jjCheckNAdd(8);
break;
case 0:
if ((0xd7ffecfaffffd9ffL & longVar7) != 0L) {
if (intVar5 > 21) {
intVar5 = 21;
}
jjCheckNAdd(8);
} else if (curChar == 34) {
jjCheckNAddStates(0, 2);
}
if (curChar == 60) {
jjstateSet[jjnewStateCnt++] = 6;
}
if (curChar == 60) {
jjCheckNAddTwoStates(1, 2);
}
break;
case 1:
if ((0x3ff000100002600L & longVar7) != 0L) {
jjCheckNAddTwoStates(1, 2);
}
break;
case 2:
if (curChar == 62 && intVar5 > 19) {
intVar5 = 19;
}
break;
case 4:
if ((0x7ff280100000000L & longVar7) != 0L) {
jjCheckNAddTwoStates(4, 5);
}
break;
case 5:
if (curChar == 62 && intVar5 > 20) {
intVar5 = 20;
}
break;
case 7:
if (curChar == 60) {
jjstateSet[jjnewStateCnt++] = 6;
}
break;
case 9:
case 11:
if (curChar == 34) {
jjCheckNAddStates(0, 2);
}
break;
case 10:
if ((0xfffffffbffffffffL & longVar7) != 0L) {
jjCheckNAddStates(0, 2);
}
break;
case 13:
if (curChar == 34 && intVar5 > 22) {
intVar5 = 22;
}
break;
default:
break;
}
} while (intVar3 != intVar1);
} else if (curChar < 128) {
long longVar7 = longLiteral9;
do {
switch(jjstateSet[--intVar3]) {
case 15:
if ((0xd7ffffffffffffffL & longVar7) != 0L) {
if (intVar5 > 21) {
intVar5 = 21;
}
jjCheckNAdd(8);
}
if (curChar == 90) {
jjCheckNAddTwoStates(4, 5);
}
break;
case 6:
if ((0xd7ffffffffffffffL & longVar7) != 0L) {
if (intVar5 > 21) {
intVar5 = 21;
}
jjCheckNAdd(8);
}
if ((0x7e0000007eL & longVar7) != 0L) {
jjCheckNAddTwoStates(1, 2);
}
break;
case 14:
jjCheckNAddStates(0, 2);
if (curChar == 92) {
jjstateSet[jjnewStateCnt++] = 11;
}
break;
case 3:
if ((0xd7ffffffffffffffL & longVar7) != 0L) {
if (intVar5 > 21) {
intVar5 = 21;
}
jjCheckNAdd(8);
}
if (curChar == 68) {
jjCheckNAddTwoStates(4, 5);
}
break;
case 0:
case 8:
if ((0xd7ffffffffffffffL & longVar7) == 0L) {
break;
}
if (intVar5 > 21) {
intVar5 = 21;
}
jjCheckNAdd(8);
break;
case 1:
if ((0x7e0000007eL & longVar7) != 0L) {
jjCheckNAddTwoStates(1, 2);
}
break;
case 4:
if (curChar == 90) {
jjCheckNAddTwoStates(4, 5);
}
break;
case 10:
jjCheckNAddStates(0, 2);
break;
case 12:
if (curChar == 92) {
jjstateSet[jjnewStateCnt++] = 11;
}
break;
default:
break;
}
} while (intVar3 != intVar1);
} else {
int intVar10 = intLiteral11;
long longVar12 = longLiteral9;
do {
switch(jjstateSet[--intVar3]) {
case 15:
case 8:
if ((jjbitVec0[intVar10] & longVar12) == 0L) {
break;
}
if (intVar5 > 21) {
intVar5 = 21;
}
jjCheckNAdd(8);
break;
case 6:
if ((jjbitVec0[intVar10] & longVar12) == 0L) {
break;
}
if (intVar5 > 21) {
intVar5 = 21;
}
jjCheckNAdd(8);
break;
case 14:
case 10:
if ((jjbitVec0[intVar10] & longVar12) != 0L) {
jjCheckNAddStates(0, 2);
}
break;
case 3:
if ((jjbitVec0[intVar10] & longVar12) == 0L) {
break;
}
if (intVar5 > 21) {
intVar5 = 21;
}
jjCheckNAdd(8);
break;
case 0:
if ((jjbitVec0[intVar10] & longVar12) == 0L) {
break;
}
if (intVar5 > 21) {
intVar5 = 21;
}
jjCheckNAdd(8);
break;
default:
break;
}
} while (intVar3 != intVar1);
}
if (intVar5 != 0x7fffffff) {
jjmatchedKind = intVar5;
jjmatchedPos = curPos;
intVar5 = 0x7fffffff;
}
++curPos;
if ((intVar3 = jjnewStateCnt) == (intVar1 = 14 - (jjnewStateCnt = intVar1))) {
return curPos;
}
try {
curChar = input_stream.readChar();
} catch (java.io.IOException e) {
return curPos;
}
}
}",0
"public void SwitchTo(int lexState) {
if (lexState >= 1 || lexState < 0) {
throw new TokenMgrError(""Error: Ignoring invalid lexical state : "" + lexState + "". State unchanged."", TokenMgrError.INVALID_LEXICAL_STATE);
} else {
curLexState = lexState;
}
}",0
"public void ReInit(java.io.InputStream dstream, String encoding, int startline, int startcolumn) throws java.io.UnsupportedEncodingException {
ReInit(dstream, encoding, startline, startcolumn, 4096);
}",0
"protected void UpdateLineColumn(char c) {
column++;
if (prevCharIsLF) {
prevCharIsLF = false;
line += (column = 1);
} else if (prevCharIsCR) {
prevCharIsCR = false;
if (c == '\n') {
prevCharIsLF = true;
} else
line += (column = 1);
}
switch(c) {
case '\r':
prevCharIsCR = true;
break;
case '\n':
prevCharIsLF = true;
break;
case '\t':
column--;
column += (tabSize - (column % tabSize));
break;
default:
break;
}
bufline[bufpos] = line;
bufcolumn[bufpos] = column;
}",0
"protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {
return (""Lexical error at line "" + errorLine + "", column "" + errorColumn + "".  Encountered: "" + (EOFSeen ? ""<EOF> "" : (""\"""" + addEscapes(String.valueOf(curChar)) + ""\"""") + "" ("" + (int) curChar + ""), "") + ""after : \"""" + addEscapes(errorAfter) + ""\"""");
}",0
"public void load(Reader in) throws ConfigurationException {
if (!(getRootNode() instanceof PListNode)) {
initRoot();
}
EntityResolver entityresolverVar1 = entityresolverLiteral2;
XMLPropertyListHandler xmlpropertylisthandlerVar3 = xmlpropertylisthandlerLiteral4;
try {
SAXParserFactory saxparserfactoryVar5 = saxparserfactoryLiteral6;
saxparserfactoryVar5.setValidating(true);
SAXParser saxparserVar7 = saxparserLiteral8;
saxparserVar7.getXMLReader().setEntityResolver(entityresolverVar1);
saxparserVar7.getXMLReader().setContentHandler(xmlpropertylisthandlerVar3);
saxparserVar7.getXMLReader().parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}",0
"private String getName(File file) {
String stringVar1 = stringLiteral2;
if (stringVar1 == null) {
if (file != null) {
stringVar1 = file.getAbsolutePath();
} else {
stringVar1 = ""base: "" + configuration.getBasePath() + ""file: "" + configuration.getFileName();
}
}
return stringVar1;
}",0
"public static void dump(ImmutableConfiguration configuration, PrintStream out) {
dump(configuration, new PrintWriter(out));
}",0
"@Override
public void read(Reader in) throws ConfigurationException {
EntityResolver entityresolverVar1 = entityresolverLiteral2;
XMLPropertyListHandler xmlpropertylisthandlerVar3 = xmlpropertylisthandlerLiteral4;
try {
SAXParserFactory saxparserfactoryVar5 = saxparserfactoryLiteral6;
saxparserfactoryVar5.setValidating(true);
SAXParser saxparserVar7 = saxparserLiteral8;
saxparserVar7.getXMLReader().setEntityResolver(entityresolverVar1);
saxparserVar7.getXMLReader().setContentHandler(xmlpropertylisthandlerVar3);
saxparserVar7.getXMLReader().parse(new InputSource(in));
getNodeModel().mergeRoot(xmlpropertylisthandlerVar3.getResultBuilder().createNode(), null, null, null, this);
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
}",0
"private static <T> T[] defensiveCopy(T[] src) {
return (src != null) ? src.clone() : null;
}",0
private final QueryResult<T> queryresult<t>Var1;,0
"@Override
public void read(Reader in) throws ConfigurationException {
SAXParserFactory saxparserfactoryVar1 = saxparserfactoryLiteral2;
saxparserfactoryVar1.setNamespaceAware(false);
saxparserfactoryVar1.setValidating(true);
try {
SAXParser saxparserVar3 = saxparserLiteral4;
XMLReader xmlreaderVar5 = xmlreaderLiteral6;
xmlreaderVar5.setEntityResolver(new EntityResolver() {
@Override
public InputSource resolveEntity(String publicId, String systemId) {
return new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd""));
}
});
xmlreaderVar5.setContentHandler(new XMLPropertiesHandler());
xmlreaderVar5.parse(new InputSource(in));
} catch (Exception e) {
throw new ConfigurationException(""Unable to parse the configuration file"", e);
}
// todo: support included properties ?
}",0
"public void save(Document document, Node parent) {
Element elementVar1 = elementLiteral2;
parent.appendChild(elementVar1);
if (getHeader() != null) {
Element elementVar3 = elementLiteral4;
elementVar1.appendChild(elementVar3);
elementVar3.setTextContent(StringEscapeUtils.escapeXml(getHeader()));
}
Iterator<String> iterator<string>Var5 = iterator<string>Literal6;
while (iterator<string>Var5.hasNext()) {
String stringVar7 = stringLiteral8;
Object objectVar9 = objectLiteral10;
if (objectVar9 instanceof List) {
writeProperty(document, elementVar1, stringVar7, (List<?>) objectVar9);
} else {
writeProperty(document, elementVar1, stringVar7, objectVar9);
}
}
}",0
private final NodeHandler<T> nodehandler<t>Var1;,0
"@Override
public int executeUpdate(final String sql, final String[] columnNames) throws SQLException {
checkOpen();
setLastUsedInParent();
try {
return statement.executeUpdate(sql, columnNames);
} catch (final SQLException e) {
handleException(e);
return 0;
}
}",0
"@Override
public boolean execute(final String sql, final String[] columnNames) throws SQLException {
checkOpen();
setLastUsedInParent();
try {
return statement.execute(sql, columnNames);
} catch (final SQLException e) {
handleException(e);
return false;
}
}",0
"public void validate(final String sql, Duration timeoutDuration) throws SQLException {
if (fastFailValidation && fatalSqlExceptionThrown) {
throw new SQLException(Utils.getMessage(""poolableConnection.validate.fastFail""));
}
if (sql == null || sql.isEmpty()) {
if (timeoutDuration.isNegative()) {
timeoutDuration = Duration.ZERO;
}
if (!isValid(timeoutDuration)) {
throw new SQLException(""isValid() returned false"");
}
return;
}
if (!sql.equals(lastValidationSql)) {
lastValidationSql = sql;
validationPreparedStatement = getInnermostDelegateInternal().prepareStatement(sql);
}
if (timeoutDuration.compareTo(Duration.ZERO) > 0) {
validationPreparedStatement.setQueryTimeout((int) timeoutDuration.getSeconds());
}
try (ResultSet resultsetVar1 = resultsetLiteral2) {
if (!resultsetVar1.next()) {
throw new SQLException(""validationQuery didn't return a row"");
}
} catch (final SQLException sqle) {
throw sqle;
}
}",0
"@Override
public boolean validateObject(final PooledObject<PooledConnectionAndInfo> p) {
try {
validateLifetime(p);
} catch (final Exception e) {
return false;
}
boolean booleanVar1 = booleanLiteral2;
final PooledConnection pooledconnectionVar3 = pooledconnectionLiteral4;
Connection connectionVar5 = connectionLiteral6;
validatingSet.add(pooledconnectionVar3);
if (null == validationQuery) {
Duration durationVar7 = durationLiteral8;
if (durationVar7.isNegative()) {
durationVar7 = Duration.ZERO;
}
try {
connectionVar5 = pooledconnectionVar3.getConnection();
booleanVar1 = connectionVar5.isValid((int) durationVar7.getSeconds());
} catch (final SQLException e) {
booleanVar1 = false;
} finally {
Utils.closeQuietly((AutoCloseable) connectionVar5);
validatingSet.remove(pooledconnectionVar3);
}
} else {
Statement statementVar9 = connectionLiteral6;
ResultSet resultsetVar10 = connectionLiteral6;
validatingSet.add(pooledconnectionVar3);
try {
connectionVar5 = pooledconnectionVar3.getConnection();
statementVar9 = connectionVar5.createStatement();
resultsetVar10 = statementVar9.executeQuery(validationQuery);
booleanVar1 = resultsetVar10.next();
if (rollbackAfterValidation) {
connectionVar5.rollback();
}
} catch (final Exception e) {
booleanVar1 = false;
} finally {
Utils.closeQuietly((AutoCloseable) resultsetVar10);
Utils.closeQuietly((AutoCloseable) statementVar9);
Utils.closeQuietly((AutoCloseable) connectionVar5);
validatingSet.remove(pooledconnectionVar3);
}
}
return booleanVar1;
}",0
"public void validateConnection(final PoolableConnection conn) throws SQLException {
if (conn.isClosed()) {
throw new SQLException(""validateConnection: connection closed"");
}
conn.validate(validationQuery, validationQueryTimeoutSeconds);
}",0
"public synchronized void setPool(final ObjectPool<PoolableConnection> pool) {
if (null != this.pool && pool != this.pool) {
try {
this.pool.close();
} catch (final Exception e) {
}
}
this.pool = pool;
}",0
"protected static final HashMap<String, ObjectPool<? extends Connection>> hashmap<string,objectpool<? extends connection>>Var1 = hashmap<string,objectpool<? extends connection>>Literal2;",0
"@Override
public long executeLargeUpdate(final String sql) throws SQLException {
checkOpen();
setLastUsedInParent();
try {
return statement.executeLargeUpdate(sql);
} catch (final SQLException e) {
handleException(e);
return 0;
}
}",0
private String stringVar1 = stringLiteral2;,0
"@Override
public void end(String namespace, String name) throws Exception {
Object[] objectArrayVar1 = objectArrayLiteral2;
if (paramCount > 0) {
objectArrayVar1 = getDigester().popParams();
if (getDigester().getLogger().isTraceEnabled()) {
for (int intVar14 = intLiteral15, intVar16 = intLiteral17; intVar3 < intLiteral1; intVar3++) {
getDigester().getLogger().trace(""[CallMethodRule]("" + intVar3 + "")"" + objectArrayVar1[intVar3]);
}
}
if (paramCount == 1 && objectArrayVar1[0] == null) {
return;
}
} else if (paramTypes != null && paramTypes.length != 0) {
if (bodyText == null) {
return;
}
objectArrayVar1 = new Object[1];
objectArrayVar1[0] = bodyText;
if (paramTypes.length == 0) {
paramTypes = new Class[1];
paramTypes[0] = String.class;
}
} else {
}
Object[] objectArrayVar7 = objectArrayLiteral8;
for (int intVar14 = intLiteral15; intVar3 < intLiteral2; intVar3++) {
if (objectArrayVar1[intVar3] == null || (objectArrayVar1[intVar3] instanceof String && !String.class.isAssignableFrom(paramTypes[intVar3]))) {
objectArrayVar7[intVar3] = ConvertUtils.convert((String) objectArrayVar1[intVar3], paramTypes[intVar3]);
} else {
objectArrayVar7[intVar3] = objectArrayVar1[intVar3];
}
}
Object objectVar9;
if (targetOffset >= 0) {
objectVar9 = getDigester().peek(targetOffset);
} else {
objectVar9 = getDigester().peek(getDigester().getCount() + targetOffset);
}
if (objectVar9 == null) {
StringBuilder stringbuilderVar10 = stringbuilderLiteral11;
stringbuilderVar10.append(""[CallMethodRule]{"");
stringbuilderVar10.append(getDigester().getMatch());
stringbuilderVar10.append(""} Call target is null ("");
stringbuilderVar10.append(""targetOffset="");
stringbuilderVar10.append(targetOffset);
stringbuilderVar10.append("",stackdepth="");
stringbuilderVar10.append(getDigester().getCount());
stringbuilderVar10.append("")"");
throw new org.xml.sax.SAXException(stringbuilderVar10.toString());
}
if (getDigester().getLogger().isDebugEnabled()) {
StringBuilder stringbuilderVar10 = stringbuilderLiteral12;
stringbuilderVar10.append(getDigester().getMatch());
stringbuilderVar10.append(""} Call "");
stringbuilderVar10.append(objectVar9.getClass().getName());
stringbuilderVar10.append(""."");
stringbuilderVar10.append(methodName);
stringbuilderVar10.append(""("");
for (int intVar14 = intLiteral15; intVar3 < intLiteral3; intVar3++) {
if (intVar3 > 0) {
stringbuilderVar10.append("","");
}
if (objectArrayVar7[intVar3] == null) {
stringbuilderVar10.append(""null"");
} else {
stringbuilderVar10.append(objectArrayVar7[intVar3].toString());
}
stringbuilderVar10.append(""/"");
if (paramTypes[intVar3] == null) {
stringbuilderVar10.append(""null"");
} else {
stringbuilderVar10.append(paramTypes[intVar3].getName());
}
}
stringbuilderVar10.append("")"");
getDigester().getLogger().debug(stringbuilderVar10.toString());
}
Object objectVar13 = objectArrayLiteral2;
if (useExactMatch) {
objectVar13 = MethodUtils.invokeExactMethod(objectVar9, methodName, objectArrayVar7, paramTypes);
} else {
objectVar13 = MethodUtils.invokeMethod(objectVar9, methodName, objectArrayVar7, paramTypes);
}
processMethodCallResult(objectVar13);
}",0
public static String stringVar1 = stringLiteral2;,0
"public void end() throws Exception {
Object[] objectArrayVar1 = objectArrayLiteral2;
if (paramCount > 0) {
objectArrayVar1 = (Object[]) digester.popParams();
if (digester.log.isTraceEnabled()) {
for (int intVar14 = intLiteral15, intVar16 = intLiteral17; intVar3 < intLiteral1; intVar3++) {
digester.log.trace(""[CallMethodRule]("" + intVar3 + "")"" + objectArrayVar1[intVar3]);
}
}
if (paramCount == 1 && objectArrayVar1[0] == null) {
return;
}
} else if (paramTypes != null && paramTypes.length != 0) {
if (bodyText == null) {
return;
}
objectArrayVar1 = new Object[1];
objectArrayVar1[0] = bodyText;
if (paramTypes.length == 0) {
paramTypes = new Class[1];
paramTypes[0] = String.class;
}
} else {
;
}
Object[] objectArrayVar7 = objectArrayLiteral8;
for (int intVar14 = intLiteral15; intVar3 < intLiteral2; intVar3++) {
if (objectArrayVar1[intVar3] == null || (objectArrayVar1[intVar3] instanceof String && !String.class.isAssignableFrom(paramTypes[intVar3]))) {
objectArrayVar7[intVar3] = ConvertUtils.convert((String) objectArrayVar1[intVar3], paramTypes[intVar3]);
} else {
objectArrayVar7[intVar3] = objectArrayVar1[intVar3];
}
}
Object objectVar9;
if (targetOffset >= 0) {
objectVar9 = digester.peek(targetOffset);
} else {
objectVar9 = digester.peek(digester.getCount() + targetOffset);
}
if (objectVar9 == null) {
StringBuffer stringbufferVar10 = stringbufferLiteral11;
stringbufferVar10.append(""[CallMethodRule]{"");
stringbufferVar10.append(digester.match);
stringbufferVar10.append(""} Call target is null ("");
stringbufferVar10.append(""targetOffset="");
stringbufferVar10.append(targetOffset);
stringbufferVar10.append("",stackdepth="");
stringbufferVar10.append(digester.getCount());
stringbufferVar10.append("")"");
throw new org.xml.sax.SAXException(stringbufferVar10.toString());
}
if (digester.log.isDebugEnabled()) {
StringBuffer stringbufferVar10 = stringbufferLiteral12;
stringbufferVar10.append(digester.match);
stringbufferVar10.append(""} Call "");
stringbufferVar10.append(objectVar9.getClass().getName());
stringbufferVar10.append(""."");
stringbufferVar10.append(methodName);
stringbufferVar10.append(""("");
for (int intVar14 = intLiteral15; intVar3 < intLiteral3; intVar3++) {
if (intVar3 > 0) {
stringbufferVar10.append("","");
}
if (objectArrayVar7[intVar3] == null) {
stringbufferVar10.append(""null"");
} else {
stringbufferVar10.append(objectArrayVar7[intVar3].toString());
}
stringbufferVar10.append(""/"");
if (paramTypes[intVar3] == null) {
stringbufferVar10.append(""null"");
} else {
stringbufferVar10.append(paramTypes[intVar3].getName());
}
}
stringbufferVar10.append("")"");
digester.log.debug(stringbufferVar10.toString());
}
Object objectVar13 = objectArrayLiteral2;
if (useExactMatch) {
objectVar13 = MethodUtils.invokeExactMethod(objectVar9, methodName, objectArrayVar7, paramTypes);
} else {
objectVar13 = MethodUtils.invokeMethod(objectVar9, methodName, objectArrayVar7, paramTypes);
}
processMethodCallResult(objectVar13);
}",0
"public SAXParser getParser() {
if (parser != null) {
return (parser);
}
try {
if (validating && (schemaLocation != null)) {
Properties propertiesVar1 = propertiesLiteral2;
propertiesVar1.put(""SAXParserFactory"", getFactory());
if (schemaLocation != null) {
propertiesVar1.put(""schemaLocation"", schemaLocation);
propertiesVar1.put(""schemaLanguage"", schemaLanguage);
}
parser = ParserFeatureSetterFactory.newSAXParser(propertiesVar1);
} else {
parser = getFactory().newSAXParser();
}
} catch (Exception e) {
log.error(""Digester.getParser: "", e);
return (null);
}
return (parser);
}",0
public final String stringVar1 = stringLiteral2;,0
public static String stringVar1 = stringLiteral2;,0
public static String stringVar1 = stringLiteral2;,0
public static String stringVar1 = stringLiteral2;,0
"@Override
public void end(String namespace, String name) throws Exception {
Object[] objectArrayVar1;
if (paramCount > 0) {
objectArrayVar1 = getDigester().popParams();
if (getDigester().getLogger().isTraceEnabled()) {
for (int intVar13 = intLiteral14, intVar15 = intLiteral16; intVar2 < intLiteral1; intVar2++) {
getDigester().getLogger().trace(format(""[CallMethodRule]{%s} parameters[%s]=%s"", getDigester().getMatch(), intVar2, objectArrayVar1[intVar2]));
}
}
if (paramCount == 1 && objectArrayVar1[0] == null) {
return;
}
} else if (paramTypes != null && paramTypes.length != 0) {
if (bodyText == null) {
return;
}
objectArrayVar1 = new Object[] { bodyText };
if (paramTypes.length == 0) {
paramTypes = new Class[] { String.class };
}
} else {
objectArrayVar1 = new Object[0];
paramTypes = new Class<?>[0];
}
Object[] objectArrayVar6 = objectArrayLiteral7;
for (int intVar13 = intLiteral14; intVar2 < intLiteral2; intVar2++) {
if (objectArrayVar1[intVar2] == null || (objectArrayVar1[intVar2] instanceof String && !String.class.isAssignableFrom(paramTypes[intVar2]))) {
objectArrayVar6[intVar2] = convert((String) objectArrayVar1[intVar2], paramTypes[intVar2]);
} else {
objectArrayVar6[intVar2] = objectArrayVar1[intVar2];
}
}
Object objectVar8;
if (targetOffset >= 0) {
objectVar8 = getDigester().peek(targetOffset);
} else {
objectVar8 = getDigester().peek(getDigester().getCount() + targetOffset);
}
if (objectVar8 == null) {
throw new SAXException(format(""[CallMethodRule]{%s} Call target is null (targetOffset=%s, stackdepth=%s)"", getDigester().getMatch(), targetOffset, getDigester().getCount()));
}
if (getDigester().getLogger().isDebugEnabled()) {
Formatter formatterVar9 = formatterLiteral10;
for (int intVar13 = intLiteral14; intVar2 < intLiteral3; intVar2++) {
formatterVar9.format(""%s%s/%s"", (intVar2 > 0 ? "", "" : """"), objectArrayVar6[intVar2], paramTypes[intVar2].getName());
}
formatterVar9.format("")"");
getDigester().getLogger().debug(formatterVar9.toString());
}
Object objectVar11 = objectLiteral12;
if (useExactMatch) {
objectVar11 = invokeExactMethod(objectVar8, methodName, objectArrayVar6, paramTypes);
} else {
objectVar11 = invokeMethod(objectVar8, methodName, objectArrayVar6, paramTypes);
}
processMethodCallResult(objectVar11);
}",0
"private final Map<Class<?>, FromAnnotationsRuleSet> map<class<?>,fromannotationsruleset>Var1 = map<class<?>,fromannotationsruleset>Literal2;",0
private final float floatVar1 = floatLiteral2;,0
public final String stringVar1 = stringLiteral2;,0
public static String stringVar1 = stringLiteral2;,0
protected static float floatVar1;,0
"public static SAXParser newSAXParser(Properties properties) throws ParserConfigurationException, SAXException, SAXNotSupportedException {
SAXParserFactory saxparserfactoryVar1 = saxparserfactoryLiteral2;
if (versionNumber == null) {
versionNumber = getXercesVersion();
version = new Float(versionNumber).floatValue();
}
// Note: 2.2 is completely broken (with XML Schema).
if (version > 2.1) {
configureXerces(saxparserfactoryVar1);
return saxparserfactoryVar1.newSAXParser();
} else {
SAXParser saxparserVar3 = saxparserLiteral4;
configureOldXerces(saxparserVar3, properties);
return saxparserVar3;
}
}",0
protected static Log logVar1 = logLiteral2;,0
protected static String stringVar1 = stringLiteral2;,0
public final String stringVar1 = stringLiteral2;,0
public final String stringVar1 = stringLiteral2;,0
public static String stringVar1 = stringLiteral2;,0
"@Override
public void begin(String namespace, String name, Attributes attributes) throws Exception {
String stringVar1 = stringLiteral2;
if (stringVar1 != null && stringVar1.length() > 0) {
final URL urlVar3;
if (stringVar1.startsWith(CLASSPATH_URL_PREFIX)) {
String stringVar4 = stringLiteral5;
if ('/' == stringVar4.charAt(0)) {
stringVar4 = stringVar4.substring(1);
}
urlVar3 = this.targetRulesBinder.getContextClassLoader().getResource(stringVar4);
if (urlVar3 == null) {
targetRulesBinder.addError(""Resource '%s' not found, please make sure it is in the classpath"", stringVar4);
return;
}
} else {
try {
urlVar3 = new URL(stringVar1);
} catch (MalformedURLException e) {
targetRulesBinder.addError(""An error occurred while inculing file from '%s': %s"", stringVar1, e.getMessage());
return;
}
}
if (memoryRulesBinder.getIncludedFiles().add(urlVar3.toString())) {
install(new FromXmlRulesModule() {
@Override
protected void loadRules() {
loadXMLRules(urlVar3);
}
});
} else {
targetRulesBinder.addError(""Circular file inclusion detected for XML rules: %s"", urlVar3);
}
}
String stringVar6 = stringLiteral7;
if (stringVar6 != null && stringVar6.length() > 0) {
try {
Class<?> class<?>Var8 = class<?>Literal9;
if (!RulesModule.class.isAssignableFrom(class<?>Var8)) {
targetRulesBinder.addError(""Class '%s' if not a '%s' implementation"", stringVar6, RulesModule.class.getName());
return;
}
RulesModule rulesmoduleVar10 = rulesmoduleLiteral11;
install(rulesmoduleVar10);
} catch (Exception e) {
targetRulesBinder.addError(""Impossible to include programmatic rules from class '%s': %s"", stringVar6, e.getMessage());
}
}
}",0
"protected LinkedRuleBuilder forPattern(String pattern) {
return memoryRulesBinder.forPattern(pattern);
}",0
"@Override
public void end() throws Exception {
Object[] objectArrayVar1 = objectArrayLiteral2;
if (paramCount > 0) {
objectArrayVar1 = (Object[]) digester.popParams();
if (digester.log.isTraceEnabled()) {
for (int intVar14 = intLiteral15, intVar16 = intLiteral17; intVar3 < intLiteral1; intVar3++) {
digester.log.trace(""[CallMethodRule]("" + intVar3 + "")"" + objectArrayVar1[intVar3]);
}
}
if (paramCount == 1 && objectArrayVar1[0] == null) {
return;
}
} else if (paramTypes != null && paramTypes.length != 0) {
if (bodyText == null) {
return;
}
objectArrayVar1 = new Object[1];
objectArrayVar1[0] = bodyText;
if (paramTypes.length == 0) {
paramTypes = new Class[1];
paramTypes[0] = String.class;
}
} else {
}
Object[] objectArrayVar7 = objectArrayLiteral8;
for (int intVar14 = intLiteral15; intVar3 < intLiteral2; intVar3++) {
if (objectArrayVar1[intVar3] == null || (objectArrayVar1[intVar3] instanceof String && !String.class.isAssignableFrom(paramTypes[intVar3]))) {
objectArrayVar7[intVar3] = ConvertUtils.convert((String) objectArrayVar1[intVar3], paramTypes[intVar3]);
} else {
objectArrayVar7[intVar3] = objectArrayVar1[intVar3];
}
}
Object objectVar9;
if (targetOffset >= 0) {
objectVar9 = digester.peek(targetOffset);
} else {
objectVar9 = digester.peek(digester.getCount() + targetOffset);
}
if (objectVar9 == null) {
StringBuffer stringbufferVar10 = stringbufferLiteral11;
stringbufferVar10.append(""[CallMethodRule]{"");
stringbufferVar10.append(digester.match);
stringbufferVar10.append(""} Call target is null ("");
stringbufferVar10.append(""targetOffset="");
stringbufferVar10.append(targetOffset);
stringbufferVar10.append("",stackdepth="");
stringbufferVar10.append(digester.getCount());
stringbufferVar10.append("")"");
throw new org.xml.sax.SAXException(stringbufferVar10.toString());
}
if (digester.log.isDebugEnabled()) {
StringBuffer stringbufferVar10 = stringbufferLiteral12;
stringbufferVar10.append(digester.match);
stringbufferVar10.append(""} Call "");
stringbufferVar10.append(objectVar9.getClass().getName());
stringbufferVar10.append(""."");
stringbufferVar10.append(methodName);
stringbufferVar10.append(""("");
for (int intVar14 = intLiteral15; intVar3 < intLiteral3; intVar3++) {
if (intVar3 > 0) {
stringbufferVar10.append("","");
}
if (objectArrayVar7[intVar3] == null) {
stringbufferVar10.append(""null"");
} else {
stringbufferVar10.append(objectArrayVar7[intVar3].toString());
}
stringbufferVar10.append(""/"");
if (paramTypes[intVar3] == null) {
stringbufferVar10.append(""null"");
} else {
stringbufferVar10.append(paramTypes[intVar3].getName());
}
}
stringbufferVar10.append("")"");
digester.log.debug(stringbufferVar10.toString());
}
Object objectVar13 = objectArrayLiteral2;
if (useExactMatch) {
objectVar13 = MethodUtils.invokeExactMethod(objectVar9, methodName, objectArrayVar7, paramTypes);
} else {
objectVar13 = MethodUtils.invokeMethod(objectVar9, methodName, objectArrayVar7, paramTypes);
}
processMethodCallResult(objectVar13);
}",0
"@Override
public void end() throws Exception {
Object[] objectArrayVar1 = objectArrayLiteral2;
if (paramCount > 0) {
objectArrayVar1 = (Object[]) digester.popParams();
if (digester.log.isTraceEnabled()) {
for (int intVar14 = intLiteral15, intVar16 = intLiteral17; intVar3 < intLiteral1; intVar3++) {
digester.log.trace(""[CallMethodRule]("" + intVar3 + "")"" + objectArrayVar1[intVar3]);
}
}
if (paramCount == 1 && objectArrayVar1[0] == null) {
return;
}
} else if (paramTypes != null && paramTypes.length != 0) {
if (bodyText == null) {
return;
}
objectArrayVar1 = new Object[1];
objectArrayVar1[0] = bodyText;
if (paramTypes.length == 0) {
paramTypes = new Class[1];
paramTypes[0] = String.class;
}
} else {
}
Object[] objectArrayVar7 = objectArrayLiteral8;
for (int intVar14 = intLiteral15; intVar3 < intLiteral2; intVar3++) {
if (objectArrayVar1[intVar3] == null || (objectArrayVar1[intVar3] instanceof String && !String.class.isAssignableFrom(paramTypes[intVar3]))) {
objectArrayVar7[intVar3] = ConvertUtils.convert((String) objectArrayVar1[intVar3], paramTypes[intVar3]);
} else {
objectArrayVar7[intVar3] = objectArrayVar1[intVar3];
}
}
Object objectVar9;
if (targetOffset >= 0) {
objectVar9 = digester.peek(targetOffset);
} else {
objectVar9 = digester.peek(digester.getCount() + targetOffset);
}
if (objectVar9 == null) {
StringBuffer stringbufferVar10 = stringbufferLiteral11;
stringbufferVar10.append(""[CallMethodRule]{"");
stringbufferVar10.append(digester.match);
stringbufferVar10.append(""} Call target is null ("");
stringbufferVar10.append(""targetOffset="");
stringbufferVar10.append(targetOffset);
stringbufferVar10.append("",stackdepth="");
stringbufferVar10.append(digester.getCount());
stringbufferVar10.append("")"");
throw new org.xml.sax.SAXException(stringbufferVar10.toString());
}
if (digester.log.isDebugEnabled()) {
StringBuffer stringbufferVar10 = stringbufferLiteral12;
stringbufferVar10.append(digester.match);
stringbufferVar10.append(""} Call "");
stringbufferVar10.append(objectVar9.getClass().getName());
stringbufferVar10.append(""."");
stringbufferVar10.append(methodName);
stringbufferVar10.append(""("");
for (int intVar14 = intLiteral15; intVar3 < intLiteral3; intVar3++) {
if (intVar3 > 0) {
stringbufferVar10.append("","");
}
if (objectArrayVar7[intVar3] == null) {
stringbufferVar10.append(""null"");
} else {
stringbufferVar10.append(objectArrayVar7[intVar3].toString());
}
stringbufferVar10.append(""/"");
if (paramTypes[intVar3] == null) {
stringbufferVar10.append(""null"");
} else {
stringbufferVar10.append(paramTypes[intVar3].getName());
}
}
stringbufferVar10.append("")"");
digester.log.debug(stringbufferVar10.toString());
}
Object objectVar13 = objectArrayLiteral2;
if (useExactMatch) {
objectVar13 = MethodUtils.invokeExactMethod(objectVar9, methodName, objectArrayVar7, paramTypes);
} else {
objectVar13 = MethodUtils.invokeMethod(objectVar9, methodName, objectArrayVar7, paramTypes);
}
processMethodCallResult(objectVar13);
}",0
public static String stringVar1 = stringLiteral2;,0
"private final Map<Class<?>, FromAnnotationsRuleSet> map<class<?>,fromannotationsruleset>Var1 = map<class<?>,fromannotationsruleset>Literal2;",0
"public static SAXParser newSAXParser(Properties properties) throws ParserConfigurationException, SAXException, SAXNotSupportedException {
SAXParserFactory saxparserfactoryVar1 = saxparserfactoryLiteral2;
if (versionNumber == null) {
versionNumber = getXercesVersion();
version = new Float(versionNumber).floatValue();
}
// Note: 2.2 is completely broken (with XML Schema).
if (version > 2.1) {
configureXerces(saxparserfactoryVar1);
return saxparserfactoryVar1.newSAXParser();
} else {
SAXParser saxparserVar3 = saxparserLiteral4;
configureOldXerces(saxparserVar3, properties);
return saxparserVar3;
}
}",0
public static String stringVar1 = stringLiteral2;,0
"public static Annotation[] getAnnotationsArrayValue(Annotation annotation) {
Object objectVar1 = objectLiteral2;
if (objectVar1 != null && objectVar1.getClass().isArray() && Annotation.class.isAssignableFrom(objectVar1.getClass().getComponentType())) {
return (Annotation[]) objectVar1;
}
return null;
}",0
"public static Annotation[] getAnnotationsArrayValue(Annotation annotation) {
Object objectVar1 = objectLiteral2;
if (objectVar1 != null && objectVar1.getClass().isArray() && Annotation.class.isAssignableFrom(objectVar1.getClass().getComponentType())) {
return (Annotation[]) objectVar1;
}
return null;
}",0
public static String stringVar1 = stringLiteral2;,0
"@Override
public void end(String namespace, String name) throws Exception {
Object[] objectArrayVar1 = objectArrayLiteral2;
if (this.paramCount > 0) {
objectArrayVar1 = (Object[]) this.getDigester().popParams();
if (this.getDigester().getLog().isTraceEnabled()) {
Formatter formatterVar3 = formatterLiteral4;
for (int intVar14 = intLiteral15, intVar16 = intLiteral17; intVar5 < intLiteral1; intVar5++) {
if (intVar5 > 0) {
formatterVar3.format("", "");
}
formatterVar3.format(""(%s) %s"", intVar5, objectArrayVar1[intVar5]);
}
this.getDigester().getLog().trace(formatterVar3.toString());
}
if (this.paramCount == 1 && objectArrayVar1[0] == null) {
return;
}
} else if (this.paramTypes != null && this.paramTypes.length != 0) {
if (this.bodyText == null) {
return;
}
objectArrayVar1 = new Object[] { this.bodyText };
} else {
}
Object[] objectArrayVar9 = objectArrayLiteral10;
for (int intVar14 = intLiteral15; intVar5 < intLiteral2; intVar5++) {
if (objectArrayVar1[intVar5] == null || (objectArrayVar1[intVar5] instanceof String && !String.class.isAssignableFrom(this.paramTypes[intVar5]))) {
objectArrayVar9[intVar5] = ConvertUtils.convert((String) objectArrayVar1[intVar5], paramTypes[intVar5]);
} else {
objectArrayVar9[intVar5] = objectArrayVar1[intVar5];
}
}
Object objectVar11;
if (this.targetOffset >= 0) {
objectVar11 = this.getDigester().peek(this.targetOffset);
} else {
objectVar11 = this.getDigester().peek(this.getDigester().getCount() + this.targetOffset);
}
if (objectVar11 == null) {
throw this.getDigester().createSAXException(String.format(""[CallMethodRule]{%s} Call target is null (targetOffset=%s, stackdepth=%s)"", this.getDigester().getMatch(), this.targetOffset, this.getDigester().getCount()));
}
if (this.getDigester().getLog().isDebugEnabled()) {
Formatter formatterVar3 = formatterLiteral12;
for (int intVar14 = intLiteral15; intVar5 < intLiteral3; intVar5++) {
if (intVar5 > 0) {
formatterVar3.format("", "");
}
formatterVar3.format(""%s/%s"", (objectArrayVar9[intVar5] == null ? ""null"" : objectArrayVar9[intVar5].toString()), (this.paramTypes[intVar5] == null ? ""null"" : this.paramTypes[intVar5].getName()));
}
formatterVar3.format("")"");
this.getDigester().getLog().debug(formatterVar3.toString());
}
Object objectVar13 = objectArrayLiteral2;
if (this.useExactMatch) {
objectVar13 = MethodUtils.invokeExactMethod(objectVar11, this.methodName, objectArrayVar9, this.paramTypes);
} else {
objectVar13 = MethodUtils.invokeMethod(objectVar11, this.methodName, objectArrayVar9, this.paramTypes);
}
processMethodCallResult(objectVar13);
}",0
protected static Log logVar1 = logLiteral2;,0
protected static String stringVar1 = stringLiteral2;,0
protected static String stringVar1 = stringLiteral2;,0
protected static float floatVar1;,0
public final String stringVar1 = stringLiteral2;,0
private FromXmlRuleSet fromxmlrulesetVar1;,0
"public SAXParser getParser() {
if (parser != null) {
return (parser);
}
try {
if (validating && (schemaLocation != null)) {
Properties propertiesVar1 = propertiesLiteral2;
propertiesVar1.put(""SAXParserFactory"", getFactory());
if (schemaLocation != null) {
propertiesVar1.put(""schemaLocation"", schemaLocation);
propertiesVar1.put(""schemaLanguage"", schemaLanguage);
}
parser = ParserFeatureSetterFactory.newSAXParser(propertiesVar1);
} else {
parser = getFactory().newSAXParser();
}
} catch (Exception e) {
log.error(""Digester.getParser: "", e);
return (null);
}
return (parser);
}",0
private String stringVar1 = stringLiteral2;,0
public static String stringVar1 = stringLiteral2;,0
"protected final void bindRulesFrom(final Class<?> type) {
if (type == null || type.getPackage().getName().startsWith(JAVA_PACKAGE) || rulesBinder.isAlreadyBound(type)) {
return;
}
visitElements(type);
if (!type.isInterface()) {
visitElements(new PrivilegedAction<Constructor<?>[]>() {
@Override
public Constructor<?>[] run() {
return type.getDeclaredConstructors();
}
});
visitElements(new PrivilegedAction<Field[]>() {
@Override
public Field[] run() {
return type.getDeclaredFields();
}
});
}
visitElements(new PrivilegedAction<Method[]>() {
@Override
public Method[] run() {
return type.getDeclaredMethods();
}
});
rulesBinder.markAsBound(type);
bindRulesFrom(type.getSuperclass());
}",0
"public Date getUpdated() {
return updated;
}",0
"public void setUpdated(final Date updated) {
this.updated = updated;
}",0
"public static void main(final String[] args) {
try {
System.out.println(""RSSDigester Test Program"");
System.out.println(""Opening input stream ..."");
final InputStream inputstreamVar1 = inputstreamLiteral2;
System.out.println(""Creating new digester ..."");
final RSSDigester rssdigesterVar3 = rssdigesterLiteral4;
if ((args.length > 0) && (args[0].equals(""-debug""))) {
rssdigesterVar3.setLogger(LogFactory.getLog(""RSSDigester""));
}
System.out.println(""Parsing input stream ..."");
final Channel channelVar5 = channelLiteral6;
System.out.println(""Closing input stream ..."");
inputstreamVar1.close();
System.out.println(""Dumping channel info ..."");
channelVar5.render(System.out);
} catch (final Exception e) {
System.out.println(""-->Exception"");
e.printStackTrace(System.out);
}
}",0
"@Override
public void end(String namespace, String name) throws Exception {
Object[] objectArrayVar1;
if (paramCount > 0) {
objectArrayVar1 = getDigester().popParams();
if (getDigester().getLogger().isTraceEnabled()) {
for (int intVar13 = intLiteral14, intVar15 = intLiteral16; intVar2 < intLiteral1; intVar2++) {
getDigester().getLogger().trace(format(""[CallMethodRule]{%s} parameters[%s]=%s"", getDigester().getMatch(), intVar2, objectArrayVar1[intVar2]));
}
}
if (paramCount == 1 && objectArrayVar1[0] == null) {
return;
}
} else if (paramTypes != null && paramTypes.length != 0) {
if (bodyText == null) {
return;
}
objectArrayVar1 = new Object[] { bodyText };
if (paramTypes.length == 0) {
paramTypes = new Class[] { String.class };
}
} else {
objectArrayVar1 = new Object[0];
paramTypes = new Class<?>[0];
}
Object[] objectArrayVar6 = objectArrayLiteral7;
for (int intVar13 = intLiteral14; intVar2 < intLiteral2; intVar2++) {
if (objectArrayVar1[intVar2] == null || (objectArrayVar1[intVar2] instanceof String && !String.class.isAssignableFrom(paramTypes[intVar2]))) {
objectArrayVar6[intVar2] = convert((String) objectArrayVar1[intVar2], paramTypes[intVar2]);
} else {
objectArrayVar6[intVar2] = objectArrayVar1[intVar2];
}
}
Object objectVar8;
if (targetOffset >= 0) {
objectVar8 = getDigester().peek(targetOffset);
} else {
objectVar8 = getDigester().peek(getDigester().getCount() + targetOffset);
}
if (objectVar8 == null) {
throw new SAXException(format(""[CallMethodRule]{%s} Call target is null (targetOffset=%s, stackdepth=%s)"", getDigester().getMatch(), targetOffset, getDigester().getCount()));
}
if (getDigester().getLogger().isDebugEnabled()) {
Formatter formatterVar9 = formatterLiteral10;
for (int intVar13 = intLiteral14; intVar2 < intLiteral3; intVar2++) {
formatterVar9.format(""%s%s/%s"", (intVar2 > 0 ? "", "" : """"), objectArrayVar6[intVar2], paramTypes[intVar2].getName());
}
formatterVar9.format("")"");
getDigester().getLogger().debug(formatterVar9.toString());
}
Object objectVar11 = objectLiteral12;
if (useExactMatch) {
objectVar11 = invokeExactMethod(objectVar8, methodName, objectArrayVar6, paramTypes);
} else {
objectVar11 = invokeMethod(objectVar8, methodName, objectArrayVar6, paramTypes);
}
processMethodCallResult(objectVar11);
}",0
"public Date getUpdated() {
return updated;
}",0
private Connection connectionVar1;,0
"public Date getUpdated() {
return updated;
}",0
"private void execute() throws IOException {
FileReader filereaderVar1 = filereaderLiteral2;
FileWriter filewriterVar3 = filewriterLiteral4;
BufferedReader bufferedreaderVar5 = bufferedreaderLiteral6;
while (true) {
String stringVar7 = stringLiteral8;
if (stringVar7 == null)
break;
String stringVar9 = stringLiteral10;
filewriterVar3.write(stringVar9);
filewriterVar3.write('\n');
}
filereaderVar1.close();
filewriterVar3.close();
System.out.println(""Contents of file "" + source + "" have been transformed, and"" + "" written to file "" + dest + ""."");
}",0
"public static void main(String[] args) {
try {
System.out.println(""RSSDigester Test Program"");
System.out.println(""Opening input stream ..."");
InputStream inputstreamVar1 = inputstreamLiteral2;
System.out.println(""Creating new digester ..."");
RSSDigester rssdigesterVar3 = rssdigesterLiteral4;
if ((args.length > 0) && (args[0].equals(""-debug""))) {
rssdigesterVar3.setLogger(LogFactory.getLog(""RSSDigester""));
}
System.out.println(""Parsing input stream ..."");
Channel channelVar5 = channelLiteral6;
System.out.println(""Closing input stream ..."");
inputstreamVar1.close();
System.out.println(""Dumping channel info ..."");
channelVar5.render(System.out);
} catch (Exception e) {
System.out.println(""-->Exception"");
e.printStackTrace(System.out);
}
}",0
protected static String stringVar1 = stringLiteral2;,0
public static String stringVar1 = stringLiteral2;,0
public final String stringVar1 = stringLiteral2;,0
public static String stringVar1 = stringLiteral2;,0
"public Object[] peekParams() {
try {
return (params.peek());
} catch (EmptyStackException e) {
log.warn(""Empty stack (returning null)"");
return (null);
}
}",0
"public Object[] peekParams(int n) {
int intVar1 = intLiteral2;
if (intVar1 < 0) {
log.warn(""Empty stack (returning null)"");
return (null);
}
try {
return (params.get(intVar1));
} catch (EmptyStackException e) {
log.warn(""Empty stack (returning null)"");
return (null);
}
}",0
"protected final void bindRulesFrom(final Class<?> type) {
if (type == null || type.getPackage().getName().startsWith(JAVA_PACKAGE) || rulesBinder.isAlreadyBound(type)) {
return;
}
visitElements(type);
if (!type.isInterface()) {
visitElements(new PrivilegedAction<Constructor<?>[]>() {
public Constructor<?>[] run() {
return type.getDeclaredConstructors();
}
});
visitElements(new PrivilegedAction<Field[]>() {
public Field[] run() {
return type.getDeclaredFields();
}
});
}
visitElements(new PrivilegedAction<Method[]>() {
public Method[] run() {
return type.getDeclaredMethods();
}
});
rulesBinder.markAsBound(type);
bindRulesFrom(type.getSuperclass());
}",0
"protected LinkedRuleBuilder forPattern(String pattern) {
return memoryRulesBinder.forPattern(pattern);
}",0
"public static Annotation[] getAnnotationsArrayValue(Annotation annotation) {
Object objectVar1 = objectLiteral2;
if (objectVar1 != null && objectVar1.getClass().isArray() && Annotation.class.isAssignableFrom(objectVar1.getClass().getComponentType())) {
return (Annotation[]) objectVar1;
}
return null;
}",0
"@Override
protected FactoryCreateRule createRule() {
if (type == null && attributeName == null && creationFactory == null) {
reportError(""factoryCreate()"", ""at least one between 'className', 'attributeName' or 'creationFactory' has to be specified"");
}
if (type != null || attributeName != null) {
return new FactoryCreateRule(type, attributeName, ignoreCreateExceptions);
}
return new FactoryCreateRule(creationFactory, ignoreCreateExceptions);
}",0
public static String stringVar1 = stringLiteral2;,0
public static String stringVar1 = stringLiteral2;,0
"public Object[] peekParams() {
try {
return (params.peek());
} catch (EmptyStackException e) {
log.warn(""Empty stack (returning null)"");
return (null);
}
}",0
"public Object[] popParams() {
try {
if (log.isTraceEnabled()) {
log.trace(""Popping params"");
}
return (params.pop());
} catch (EmptyStackException e) {
log.warn(""Empty stack (returning null)"");
return (null);
}
}",0
"@Override
public void begin(String namespace, String name, Attributes attributes) throws Exception {
Class<?> class<?>Var1 = class<?>Literal2;
if (class<?>Var1 == null) {
String stringVar3 = stringLiteral4;
if (attributeName != null) {
String stringVar5 = stringLiteral6;
if (stringVar5 != null) {
stringVar3 = stringVar5;
}
}
if (getDigester().getLogger().isDebugEnabled()) {
getDigester().getLogger().debug(format(""[ObjectCreateRule]{%s} New '%s'"", getDigester().getMatch(), stringVar3));
}
class<?>Var1 = getDigester().getClassLoader().loadClass(stringVar3);
}
Object objectVar7;
if (constructorArgumentTypes == null || constructorArgumentTypes.length == 0) {
if (getDigester().getLogger().isDebugEnabled()) {
getDigester().getLogger().debug(format(""[ObjectCreateRule]{%s} New '%s' using default empty constructor"", getDigester().getMatch(), class<?>Var1.getName()));
}
objectVar7 = class<?>Var1.newInstance();
} else {
if (proxyManager == null) {
synchronized (this) {
if (proxyManager == null) {
Constructor<?> constructor<?>Var8 = constructor<?>Literal9;
if (constructor<?>Var8 == null) {
throw new SAXException(format(""[ObjectCreateRule]{%s} Class '%s' does not have a construcor with types"", getDigester().getMatch(), class<?>Var1.getName(), Arrays.toString(constructorArgumentTypes)));
}
proxyManager = new ProxyManager(class<?>Var1, constructor<?>Var8, defaultConstructorArguments, getDigester());
}
}
}
objectVar7 = proxyManager.createProxy();
}
getDigester().push(objectVar7);
}",1
"@Override
public void end(String namespace, String name) throws Exception {
Object[] objectArrayVar1 = objectArrayLiteral2;
if (this.paramTypes.length > 0) {
objectArrayVar1 = (Object[]) this.getDigester().popParams();
if (this.getDigester().getLog().isTraceEnabled()) {
Formatter formatterVar3 = formatterLiteral4;
for (int intVar14 = intLiteral15, intVar16 = intLiteral17; intVar5 < intLiteral1; intVar5++) {
if (intVar5 > 0) {
formatterVar3.format("", "");
}
formatterVar3.format(""(%s) %s"", intVar5, objectArrayVar1[intVar5]);
}
this.getDigester().getLog().trace(formatterVar3.toString());
}
if (this.paramTypes.length == 1 && objectArrayVar1[0] == null) {
return;
}
} else if (this.paramTypes != null && this.paramTypes.length != 0) {
if (this.bodyText == null) {
return;
}
objectArrayVar1 = new Object[] { this.bodyText };
} else {
}
Object[] objectArrayVar9 = objectArrayLiteral10;
for (int intVar14 = intLiteral15; intVar5 < intLiteral2; intVar5++) {
if (objectArrayVar1[intVar5] == null || (objectArrayVar1[intVar5] instanceof String && !String.class.isAssignableFrom(this.paramTypes[intVar5]))) {
objectArrayVar9[intVar5] = ConvertUtils.convert((String) objectArrayVar1[intVar5], paramTypes[intVar5]);
} else {
objectArrayVar9[intVar5] = objectArrayVar1[intVar5];
}
}
Object objectVar11;
if (this.targetOffset >= 0) {
objectVar11 = this.getDigester().peek(this.targetOffset);
} else {
objectVar11 = this.getDigester().peek(this.getDigester().getCount() + this.targetOffset);
}
if (objectVar11 == null) {
throw this.getDigester().createSAXException(String.format(""[CallMethodRule]{%s} Call target is null (targetOffset=%s, stackdepth=%s)"", this.getDigester().getMatch(), this.targetOffset, this.getDigester().getCount()));
}
if (this.getDigester().getLog().isDebugEnabled()) {
Formatter formatterVar3 = formatterLiteral12;
for (int intVar14 = intLiteral15; intVar5 < intLiteral3; intVar5++) {
if (intVar5 > 0) {
formatterVar3.format("", "");
}
formatterVar3.format(""%s/%s"", (objectArrayVar9[intVar5] == null ? ""null"" : objectArrayVar9[intVar5].toString()), (this.paramTypes[intVar5] == null ? ""null"" : this.paramTypes[intVar5].getName()));
}
formatterVar3.format("")"");
this.getDigester().getLog().debug(formatterVar3.toString());
}
Object objectVar13 = objectArrayLiteral2;
if (this.useExactMatch) {
objectVar13 = MethodUtils.invokeExactMethod(objectVar11, this.methodName, objectArrayVar9, this.paramTypes);
} else {
objectVar13 = MethodUtils.invokeMethod(objectVar11, this.methodName, objectArrayVar9, this.paramTypes);
}
processMethodCallResult(objectVar13);
}",0
Object objectVar1;,1
"@Override
public String getString() {
try {
final byte[] byteArrayVar1 = byteArrayLiteral2;
String stringVar3 = stringLiteral4;
if (stringVar3 == null) {
stringVar3 = defaultCharset;
}
return new String(byteArrayVar1, stringVar3);
} catch (final IOException e) {
return new String(new byte[0]);
}
}",1
"public byte[] getBoundary(final String contentType) {
final ParameterParser parameterparserVar1 = parameterparserLiteral2;
parameterparserVar1.setLowerCaseNames(true);
final Map<String, String> map<string,string>Var3 = map<string,string>Literal4;
final String stringVar5 = stringLiteral6;
if (stringVar5 == null) {
return null;
}
byte[] byteArrayVar7;
try {
byteArrayVar7 = stringVar5.getBytes(""ISO-8859-1"");
} catch (final UnsupportedEncodingException e) {
byteArrayVar7 = stringVar5.getBytes();
}
return byteArrayVar7;
}",1
"private boolean findNextItem() throws IOException {
if (eof) {
return false;
}
if (currentItem != null) {
currentItem.close();
currentItem = null;
}
for (; ; ) {
boolean booleanVar1;
if (skipPreamble) {
booleanVar1 = multi.skipPreamble();
} else {
booleanVar1 = multi.readBoundary();
}
if (!booleanVar1) {
if (currentFieldName == null) {
eof = true;
return false;
}
multi.setBoundary(boundary);
currentFieldName = null;
continue;
}
Map mapVar2 = mapLiteral3;
if (currentFieldName == null) {
String stringVar4 = stringLiteral5;
if (stringVar4 != null) {
String stringVar6 = stringLiteral7;
if (stringVar6 != null && stringVar6.toLowerCase().startsWith(MULTIPART_MIXED)) {
currentFieldName = stringVar4;
byte[] byteArrayVar8 = byteArrayLiteral9;
multi.setBoundary(byteArrayVar8);
skipPreamble = true;
continue;
}
String stringVar10 = stringLiteral11;
currentItem = new FileItemStreamImpl(stringVar10, stringVar4, getHeader(mapVar2, CONTENT_TYPE), stringVar10 == null);
notifier.noteItem();
itemValid = true;
return true;
}
} else {
String stringVar10 = stringLiteral11;
if (stringVar10 != null) {
currentItem = new FileItemStreamImpl(stringVar10, currentFieldName, getHeader(mapVar2, CONTENT_TYPE), false);
notifier.noteItem();
itemValid = true;
return true;
}
}
multi.discardBodyData();
}
}",0
"public List parseRequest(RequestContext ctx) throws FileUploadException {
List listVar1 = listLiteral2;
boolean booleanVar3 = booleanLiteral4;
try {
FileItemIterator fileitemiteratorVar5 = fileitemiteratorLiteral6;
FileItemFactory fileitemfactoryVar7 = fileitemfactoryLiteral8;
if (fileitemfactoryVar7 == null) {
throw new NullPointerException(""No FileItemFactory has been set."");
}
while (fileitemiteratorVar5.hasNext()) {
final FileItemStream fileitemstreamVar9 = fileitemstreamLiteral10;
final String stringVar11 = stringLiteral12;
FileItem fileitemVar13 = fileitemLiteral14;
listVar1.add(fileitemVar13);
try {
Streams.copy(fileitemstreamVar9.openStream(), fileitemVar13.getOutputStream(), true);
} catch (FileUploadIOException e) {
throw (FileUploadException) e.getCause();
} catch (IOException e) {
throw new IOFileUploadException(""Processing of "" + MULTIPART_FORM_DATA + "" request failed. "" + e.getMessage(), e);
}
if (fileitemVar13 instanceof FileItemHeadersSupport) {
final FileItemHeaders fileitemheadersVar15 = fileitemheadersLiteral16;
fileitemVar13.setHeaders(fileitemheadersVar15);
}
}
booleanVar3 = true;
return listVar1;
} catch (FileUploadIOException e) {
throw (FileUploadException) e.getCause();
} catch (IOException e) {
throw new FileUploadException(e.getMessage(), e);
} finally {
if (!booleanVar3) {
for (Iterator iteratorVar20 = iteratorLiteral21; iteratorVar17.hasNext(); ) {
FileItem fileitemVar13 = fileitemLiteral19;
try {
fileitemVar13.delete();
} catch (Throwable e) {
}
}
}
}
}",0
"public List parseRequest(RequestContext ctx) throws FileUploadException {
try {
FileItemIterator fileitemiteratorVar1 = fileitemiteratorLiteral2;
List listVar3 = listLiteral4;
FileItemFactory fileitemfactoryVar5 = fileitemfactoryLiteral6;
final byte[] byteArrayVar7 = byteArrayLiteral8;
while (fileitemiteratorVar1.hasNext()) {
FileItemStream fileitemstreamVar9 = fileitemstreamLiteral10;
FileItem fileitemVar11 = fileitemLiteral12;
try {
Streams.copy(fileitemstreamVar9.openStream(), fileitemVar11.getOutputStream(), true, byteArrayVar7);
} catch (FileUploadIOException e) {
throw (FileUploadException) e.getCause();
} catch (IOException e) {
throw new IOFileUploadException(""Processing of "" + MULTIPART_FORM_DATA + "" request failed. "" + e.getMessage(), e);
}
listVar3.add(fileitemVar11);
}
return listVar3;
} catch (FileUploadIOException e) {
throw (FileUploadException) e.getCause();
} catch (IOException e) {
throw new FileUploadException(e.getMessage(), e);
}
}",0
"public void close(boolean pCloseUnderlying) throws IOException {
if (closed) {
return;
}
if (pCloseUnderlying) {
closed = true;
input.close();
} else {
for (; ; ) {
int intVar1 = intLiteral2;
if (intVar1 == 0) {
intVar1 = makeAvailable();
if (intVar1 == 0) {
break;
}
}
skip(intVar1);
}
}
closed = true;
}",0
protected static final byte[] byteArrayVar1 = byteArrayLiteral2;,0
"public byte[] get() {
if (isInMemory()) {
if (cachedContent == null) {
cachedContent = dfos.getData();
}
return cachedContent;
}
byte[] byteArrayVar1 = byteArrayLiteral2;
InputStream inputstreamVar3 = inputstreamLiteral4;
try {
inputstreamVar3 = new BufferedInputStream(new FileInputStream(dfos.getFile()));
inputstreamVar3.read(byteArrayVar1);
} catch (IOException e) {
byteArrayVar1 = null;
} finally {
if (inputstreamVar3 != null) {
try {
inputstreamVar3.close();
} catch (IOException e) {
}
}
}
return byteArrayVar1;
}",0
"@Override
@Deprecated
public void setFileItemFactory(FileItemFactory factory) {
this.fileItemFactory = (DefaultFileItemFactory) factory;
}",0
"public List<FileItem> parseRequest(RequestContext ctx) throws FileUploadException {
List<FileItem> list<fileitem>Var1 = list<fileitem>Literal2;
boolean booleanVar3 = booleanLiteral4;
try {
FileItemIterator fileitemiteratorVar5 = fileitemiteratorLiteral6;
FileItemFactory fileitemfactoryVar7 = fileitemfactoryLiteral8;
if (fileitemfactoryVar7 == null) {
throw new NullPointerException(""No FileItemFactory has been set."");
}
while (fileitemiteratorVar5.hasNext()) {
final FileItemStream fileitemstreamVar9 = fileitemstreamLiteral10;
final String stringVar11 = stringLiteral12;
FileItem fileitemVar13 = fileitemLiteral14;
list<fileitem>Var1.add(fileitemVar13);
try {
Streams.copy(fileitemstreamVar9.openStream(), fileitemVar13.getOutputStream(), true);
} catch (FileUploadIOException e) {
throw (FileUploadException) e.getCause();
} catch (IOException e) {
throw new IOFileUploadException(format(""Processing of %s request failed. "", MULTIPART_FORM_DATA, e.getMessage()), e);
}
if (fileitemVar13 instanceof FileItemHeadersSupport) {
final FileItemHeaders fileitemheadersVar15 = fileitemheadersLiteral16;
fileitemVar13.setHeaders(fileitemheadersVar15);
}
}
booleanVar3 = true;
return list<fileitem>Var1;
} catch (FileUploadIOException e) {
throw (FileUploadException) e.getCause();
} catch (IOException e) {
throw new FileUploadException(e.getMessage(), e);
} finally {
if (!booleanVar3) {
for (FileItem fileitemVar13 : list<fileitem>Var1) {
try {
fileitemVar13.delete();
} catch (Throwable e) {
}
}
}
}
}",0
"private boolean findNextItem() throws IOException {
if (eof) {
return false;
}
if (currentItem != null) {
currentItem.close();
currentItem = null;
}
for (; ; ) {
boolean booleanVar1;
if (skipPreamble) {
booleanVar1 = multi.skipPreamble();
} else {
booleanVar1 = multi.readBoundary();
}
if (!booleanVar1) {
if (currentFieldName == null) {
eof = true;
return false;
}
multi.setBoundary(boundary);
currentFieldName = null;
continue;
}
FileItemHeaders fileitemheadersVar2 = fileitemheadersLiteral3;
if (currentFieldName == null) {
String stringVar4 = stringLiteral5;
if (stringVar4 != null) {
String stringVar6 = stringLiteral7;
if (stringVar6 != null && stringVar6.toLowerCase().startsWith(MULTIPART_MIXED)) {
currentFieldName = stringVar4;
byte[] byteArrayVar8 = byteArrayLiteral9;
multi.setBoundary(byteArrayVar8);
skipPreamble = true;
continue;
}
String stringVar10 = stringLiteral11;
currentItem = new FileItemStreamImpl(stringVar10, stringVar4, fileitemheadersVar2.getHeader(CONTENT_TYPE), stringVar10 == null, getContentLength(fileitemheadersVar2));
currentItem.setHeaders(fileitemheadersVar2);
notifier.noteItem();
itemValid = true;
return true;
}
} else {
String stringVar10 = stringLiteral11;
if (stringVar10 != null) {
currentItem = new FileItemStreamImpl(stringVar10, currentFieldName, fileitemheadersVar2.getHeader(CONTENT_TYPE), false, getContentLength(fileitemheadersVar2));
currentItem.setHeaders(fileitemheadersVar2);
notifier.noteItem();
itemValid = true;
return true;
}
}
multi.discardBodyData();
}
}",0
"public String readHeaders() throws MalformedStreamException {
int intVar1 = intLiteral2;
byte byteVar3;
ByteArrayOutputStream bytearrayoutputstreamVar4 = bytearrayoutputstreamLiteral5;
int intVar6 = intLiteral2;
while (intVar1 < HEADER_SEPARATOR.length) {
try {
byteVar3 = readByte();
} catch (IOException e) {
throw new MalformedStreamException(""Stream ended unexpectedly"");
}
if (++intVar6 > HEADER_PART_SIZE_MAX) {
throw new MalformedStreamException(format(""Header section has more than %s bytes (maybe it is not properly terminated)"", HEADER_PART_SIZE_MAX));
}
if (byteVar3 == HEADER_SEPARATOR[intVar1]) {
intVar1++;
} else {
intVar1 = 0;
}
bytearrayoutputstreamVar4.write(byteVar3);
}
String stringVar7 = stringLiteral8;
if (headerEncoding != null) {
try {
stringVar7 = bytearrayoutputstreamVar4.toString(headerEncoding);
} catch (UnsupportedEncodingException e) {
stringVar7 = bytearrayoutputstreamVar4.toString();
}
} else {
stringVar7 = bytearrayoutputstreamVar4.toString();
}
return stringVar7;
}",0
"@Deprecated
public MultipartStream() {
this(null, null, null);
}",0
"public String getHeader(String name) {
String stringVar1 = stringLiteral2;
List<String> list<string>Var3 = list<string>Literal4;
if (null == list<string>Var3) {
return null;
}
return list<string>Var3.get(0);
}",0
"protected byte[] getBoundary(String contentType) {
ParameterParser parameterparserVar1 = parameterparserLiteral2;
parameterparserVar1.setLowerCaseNames(true);
Map mapVar3 = mapLiteral4;
String stringVar5 = stringLiteral6;
if (stringVar5 == null) {
return null;
}
byte[] byteArrayVar7;
try {
byteArrayVar7 = stringVar5.getBytes(""ISO-8859-1"");
} catch (UnsupportedEncodingException e) {
byteArrayVar7 = stringVar5.getBytes();
}
return byteArrayVar7;
}",0
"public Map parse(final char[] chars, int offset, int length, char separator) {
if (chars == null) {
return new HashMap();
}
HashMap hashmapVar1 = hashmapLiteral2;
this.chars = chars;
this.pos = offset;
this.len = length;
String stringVar3 = stringLiteral4;
String stringVar5 = stringLiteral4;
while (hasChar()) {
stringVar3 = parseToken(new char[] { '=', separator });
stringVar5 = null;
if (hasChar() && (chars[pos] == '=')) {
pos++;
stringVar5 = parseQuotedToken(new char[] { separator });
}
if (hasChar() && (chars[pos] == separator)) {
pos++;
}
if ((stringVar3 != null) && (stringVar3.length() > 0)) {
if (this.lowerCaseNames) {
stringVar3 = stringVar3.toLowerCase();
}
hashmapVar1.put(stringVar3, stringVar5);
}
}
return hashmapVar1;
}",0
"public static final boolean isMultipartContent(HttpServletRequest request) {
if (!""post"".equals(request.getMethod().toLowerCase())) {
return false;
}
String stringVar1 = stringLiteral2;
if (stringVar1 == null) {
return false;
}
if (stringVar1.toLowerCase().startsWith(MULTIPART)) {
return true;
}
return false;
}",0
"public static final boolean isMultipartContent(RequestContext ctx) {
String stringVar1 = stringLiteral2;
if (stringVar1 == null) {
return false;
}
if (stringVar1.toLowerCase().startsWith(MULTIPART)) {
return true;
}
return false;
}",0
"protected final String getHeader(Map headers, String name) {
return (String) headers.get(name.toLowerCase());
}",0
"public MultipartStream() {
this(null, null, null);
}",0
protected static final byte[] byteArrayVar1 = byteArrayLiteral2;,0
"public Map parse(final char[] chars, int offset, int length, char separator) {
if (chars == null) {
return new HashMap();
}
HashMap hashmapVar1 = hashmapLiteral2;
this.chars = chars;
this.pos = offset;
this.len = length;
String stringVar3 = stringLiteral4;
String stringVar5 = stringLiteral4;
while (hasChar()) {
stringVar3 = parseToken(new char[] { '=', separator });
stringVar5 = null;
if (hasChar() && (chars[pos] == '=')) {
pos++;
stringVar5 = parseQuotedToken(new char[] { separator });
}
if (hasChar() && (chars[pos] == separator)) {
pos++;
}
if ((stringVar3 != null) && (stringVar3.length() > 0)) {
if (this.lowerCaseNames) {
stringVar3 = stringVar3.toLowerCase();
}
hashmapVar1.put(stringVar3, stringVar5);
}
}
return hashmapVar1;
}",0
"public void delete() {
cachedContent = null;
File fileVar1 = fileLiteral2;
if (fileVar1 != null && fileVar1.exists()) {
fileVar1.delete();
}
}",0
"protected FileItemHeaders getParsedHeaders(String headerPart) {
final int intVar1 = intLiteral2;
FileItemHeadersImpl fileitemheadersimplVar3 = fileitemheadersimplLiteral4;
int intVar5 = intLiteral6;
for (; ; ) {
int intVar7 = intLiteral8;
if (intVar5 == intVar7) {
break;
}
String stringVar9 = stringLiteral10;
intVar5 = intVar7 + 2;
while (intVar5 < intVar1) {
int intVar11 = intLiteral12;
while (intVar11 < intVar1) {
char charVar13 = charLiteral14;
if (charVar13 != ' ' && charVar13 != '\t') {
break;
}
++intVar11;
}
if (intVar11 == intVar5) {
break;
}
intVar7 = parseEndOfLine(headerPart, intVar11);
stringVar9 += "" "" + headerPart.substring(intVar11, intVar7);
intVar5 = intVar7 + 2;
}
parseHeaderLine(fileitemheadersimplVar3, stringVar9);
}
return fileitemheadersimplVar3;
}",0
"protected Map parseHeaders(String headerPart) {
FileItemHeaders fileitemheadersVar1 = fileitemheadersLiteral2;
Map mapVar3 = mapLiteral4;
for (Iterator iteratorVar13 = iteratorLiteral14; iteratorVar5.hasNext(); ) {
String stringVar7 = stringLiteral8;
Iterator iteratorVar9 = iteratorLiteral10;
String stringVar11 = stringLiteral12;
while (iteratorVar9.hasNext()) {
stringVar11 += "","" + iteratorVar9.next();
}
mapVar3.put(stringVar7, stringVar11);
}
return mapVar3;
}",0
protected static final byte[] byteArrayVar1 = byteArrayLiteral2;,0
"public Map parse(final char[] chars, int offset, int length, char separator) {
if (chars == null) {
return new HashMap();
}
HashMap hashmapVar1 = hashmapLiteral2;
this.chars = chars;
this.pos = offset;
this.len = length;
String stringVar3 = stringLiteral4;
String stringVar5 = stringLiteral4;
while (hasChar()) {
stringVar3 = parseToken(new char[] { '=', separator });
stringVar5 = null;
if (hasChar() && (chars[pos] == '=')) {
pos++;
stringVar5 = parseQuotedToken(new char[] { separator });
}
if (hasChar() && (chars[pos] == separator)) {
pos++;
}
if ((stringVar3 != null) && (stringVar3.length() > 0)) {
if (this.lowerCaseNames) {
stringVar3 = stringVar3.toLowerCase();
}
hashmapVar1.put(stringVar3, stringVar5);
}
}
return hashmapVar1;
}",0
"public synchronized void addHeader(String name, String value) {
String stringVar1 = stringLiteral2;
List listVar3 = listLiteral4;
if (null == listVar3) {
listVar3 = new ArrayList();
headerNameToValueListMap.put(stringVar1, listVar3);
headerNameList.add(stringVar1);
}
listVar3.add(value);
}",0
"public static String asString(InputStream pStream) throws IOException {
ByteArrayOutputStream bytearrayoutputstreamVar1 = bytearrayoutputstreamLiteral2;
copy(pStream, bytearrayoutputstreamVar1, true);
return bytearrayoutputstreamVar1.toString();
}",0
"protected String getFileName(Map headers) {
String stringVar1 = stringLiteral2;
String stringVar3 = stringLiteral4;
if (stringVar3 != null) {
String stringVar5 = stringLiteral6;
if (stringVar5.startsWith(FORM_DATA) || stringVar5.startsWith(ATTACHMENT)) {
ParameterParser parameterparserVar7 = parameterparserLiteral8;
parameterparserVar7.setLowerCaseNames(true);
Map mapVar9 = mapLiteral10;
if (mapVar9.containsKey(""filename"")) {
stringVar1 = (String) mapVar9.get(""filename"");
if (stringVar1 != null) {
stringVar1 = stringVar1.trim();
} else {
stringVar1 = """";
}
}
}
}
return stringVar1;
}",0
"public List parseRequest(RequestContext ctx) throws FileUploadException {
try {
FileItemIterator fileitemiteratorVar1 = fileitemiteratorLiteral2;
List listVar3 = listLiteral4;
FileItemFactory fileitemfactoryVar5 = fileitemfactoryLiteral6;
if (fileitemfactoryVar5 == null) {
throw new NullPointerException(""No FileItemFactory has been set."");
}
while (fileitemiteratorVar1.hasNext()) {
FileItemStream fileitemstreamVar7 = fileitemstreamLiteral8;
FileItem fileitemVar9 = fileitemLiteral10;
try {
Streams.copy(fileitemstreamVar7.openStream(), fileitemVar9.getOutputStream(), true);
} catch (FileUploadIOException e) {
throw (FileUploadException) e.getCause();
} catch (IOException e) {
throw new IOFileUploadException(""Processing of "" + MULTIPART_FORM_DATA + "" request failed. "" + e.getMessage(), e);
}
listVar3.add(fileitemVar9);
}
return listVar3;
} catch (FileUploadIOException e) {
throw (FileUploadException) e.getCause();
} catch (IOException e) {
throw new FileUploadException(e.getMessage(), e);
}
}",0
protected static final byte[] byteArrayVar1 = byteArrayLiteral2;,0
protected static final byte[] byteArrayVar1 = byteArrayLiteral2;,0
"public byte[] get() {
if (isInMemory()) {
if (cachedContent == null) {
cachedContent = dfos.getData();
}
return cachedContent;
}
byte[] byteArrayVar1 = byteArrayLiteral2;
FileInputStream fileinputstreamVar3 = fileinputstreamLiteral4;
try {
fileinputstreamVar3 = new FileInputStream(dfos.getFile());
fileinputstreamVar3.read(byteArrayVar1);
} catch (IOException e) {
byteArrayVar1 = null;
} finally {
if (fileinputstreamVar3 != null) {
try {
fileinputstreamVar3.close();
} catch (IOException e) {
}
}
}
return byteArrayVar1;
}",0
"public static final boolean isMultipartContent(RequestContext ctx) {
String stringVar1 = stringLiteral2;
if (stringVar1 == null) {
return false;
}
if (stringVar1.toLowerCase().startsWith(MULTIPART)) {
return true;
}
return false;
}",0
"public List parseRequest(RequestContext ctx) throws FileUploadException {
try {
FileItemIterator fileitemiteratorVar1 = fileitemiteratorLiteral2;
List listVar3 = listLiteral4;
FileItemFactory fileitemfactoryVar5 = fileitemfactoryLiteral6;
if (fileitemfactoryVar5 == null) {
throw new NullPointerException(""No FileItemFactory has been set."");
}
while (fileitemiteratorVar1.hasNext()) {
FileItemStream fileitemstreamVar7 = fileitemstreamLiteral8;
FileItem fileitemVar9 = fileitemLiteral10;
try {
Streams.copy(fileitemstreamVar7.openStream(), fileitemVar9.getOutputStream(), true);
} catch (FileUploadIOException e) {
throw (FileUploadException) e.getCause();
} catch (IOException e) {
throw new IOFileUploadException(""Processing of "" + MULTIPART_FORM_DATA + "" request failed. "" + e.getMessage(), e);
}
if (fileitemVar9 instanceof FileItemHeadersSupport) {
final FileItemHeaders fileitemheadersVar11 = fileitemheadersLiteral12;
((FileItemHeadersSupport) fileitemVar9).setHeaders(fileitemheadersVar11);
}
listVar3.add(fileitemVar9);
}
return listVar3;
} catch (FileUploadIOException e) {
throw (FileUploadException) e.getCause();
} catch (IOException e) {
throw new FileUploadException(e.getMessage(), e);
}
}",0
protected static final byte[] byteArrayVar1 = byteArrayLiteral2;,0
protected static final byte[] byteArrayVar1 = byteArrayLiteral2;,0
"protected void finalize() {
File fileVar1 = fileLiteral2;
if (fileVar1 != null && fileVar1.exists()) {
fileVar1.delete();
}
}",0
"public Iterator getHeaders(String name) {
String stringVar1 = stringLiteral2;
List listVar3 = listLiteral4;
if (null == listVar3) {
return Collections.EMPTY_LIST.iterator();
}
return listVar3.iterator();
}",0
"public Map parse(final char[] chars, int offset, int length, char separator) {
if (chars == null) {
return new HashMap();
}
HashMap hashmapVar1 = hashmapLiteral2;
this.chars = chars;
this.pos = offset;
this.len = length;
String stringVar3 = stringLiteral4;
String stringVar5 = stringLiteral4;
while (hasChar()) {
stringVar3 = parseToken(new char[] { '=', separator });
stringVar5 = null;
if (hasChar() && (chars[pos] == '=')) {
pos++;
stringVar5 = parseQuotedToken(new char[] { separator });
}
if (hasChar() && (chars[pos] == separator)) {
pos++;
}
if ((stringVar3 != null) && (stringVar3.length() > 0)) {
if (this.lowerCaseNames) {
stringVar3 = stringVar3.toLowerCase();
}
hashmapVar1.put(stringVar3, stringVar5);
}
}
return hashmapVar1;
}",0
"public synchronized void addHeader(String name, String value) {
String stringVar1 = stringLiteral2;
List listVar3 = listLiteral4;
if (null == listVar3) {
listVar3 = new ArrayList();
headerNameToValueListMap.put(stringVar1, listVar3);
headerNameList.add(stringVar1);
}
listVar3.add(value);
}",0
"public String readHeaders() throws MalformedStreamException {
int intVar1 = intLiteral2;
byte byteVar3;
ByteArrayOutputStream bytearrayoutputstreamVar4 = bytearrayoutputstreamLiteral5;
int intVar6 = intLiteral2;
while (intVar1 < HEADER_SEPARATOR.length) {
try {
byteVar3 = readByte();
} catch (IOException e) {
throw new MalformedStreamException(""Stream ended unexpectedly"");
}
if (++intVar6 > HEADER_PART_SIZE_MAX) {
throw new MalformedStreamException(""Header section has more than "" + HEADER_PART_SIZE_MAX + "" bytes (maybe it is not properly terminated)"");
}
if (byteVar3 == HEADER_SEPARATOR[intVar1]) {
intVar1++;
} else {
intVar1 = 0;
}
bytearrayoutputstreamVar4.write(byteVar3);
}
String stringVar7 = stringLiteral8;
if (headerEncoding != null) {
try {
stringVar7 = bytearrayoutputstreamVar4.toString(headerEncoding);
} catch (UnsupportedEncodingException e) {
stringVar7 = bytearrayoutputstreamVar4.toString();
}
} else {
stringVar7 = bytearrayoutputstreamVar4.toString();
}
return stringVar7;
}",0
"public Map parse(final char[] chars, int offset, int length, char separator) {
if (chars == null) {
return new HashMap();
}
HashMap hashmapVar1 = hashmapLiteral2;
this.chars = chars;
this.pos = offset;
this.len = length;
String stringVar3 = stringLiteral4;
String stringVar5 = stringLiteral4;
while (hasChar()) {
stringVar3 = parseToken(new char[] { '=', separator });
stringVar5 = null;
if (hasChar() && (chars[pos] == '=')) {
pos++;
stringVar5 = parseQuotedToken(new char[] { separator });
}
if (hasChar() && (chars[pos] == separator)) {
pos++;
}
if ((stringVar3 != null) && (stringVar3.length() > 0)) {
if (this.lowerCaseNames) {
stringVar3 = stringVar3.toLowerCase();
}
hashmapVar1.put(stringVar3, stringVar5);
}
}
return hashmapVar1;
}",0
"public static final boolean isMultipartContent(HttpServletRequest request) {
if (!""post"".equals(request.getMethod().toLowerCase())) {
return false;
}
String stringVar1 = stringLiteral2;
if (stringVar1 == null) {
return false;
}
if (stringVar1.toLowerCase().startsWith(MULTIPART)) {
return true;
}
return false;
}",0
"public static String asString(InputStream pStream) throws IOException {
ByteArrayOutputStream bytearrayoutputstreamVar1 = bytearrayoutputstreamLiteral2;
copy(pStream, bytearrayoutputstreamVar1, true);
return bytearrayoutputstreamVar1.toString();
}",0
"public void close(boolean pCloseUnderlying) throws IOException {
if (closed) {
return;
}
if (pCloseUnderlying) {
closed = true;
input.close();
} else {
for (; ; ) {
int intVar1 = intLiteral2;
if (intVar1 == 0) {
intVar1 = makeAvailable();
if (intVar1 == 0) {
break;
}
}
skip(intVar1);
}
}
closed = true;
}",0
protected static final byte[] byteArrayVar1 = byteArrayLiteral2;,0
protected static final byte[] byteArrayVar1 = byteArrayLiteral2;,0
"public String readHeaders() throws FileUploadIOException, MalformedStreamException {
int intVar1 = intLiteral2;
byte byteVar3;
ByteArrayOutputStream bytearrayoutputstreamVar4 = bytearrayoutputstreamLiteral5;
int intVar6 = intLiteral2;
while (intVar1 < HEADER_SEPARATOR.length) {
try {
byteVar3 = readByte();
} catch (FileUploadIOException e) {
throw e;
} catch (IOException e) {
throw new MalformedStreamException(""Stream ended unexpectedly"");
}
if (++intVar6 > HEADER_PART_SIZE_MAX) {
throw new MalformedStreamException(format(""Header section has more than %s bytes (maybe it is not properly terminated)"", Integer.valueOf(HEADER_PART_SIZE_MAX)));
}
if (byteVar3 == HEADER_SEPARATOR[intVar1]) {
intVar1++;
} else {
intVar1 = 0;
}
bytearrayoutputstreamVar4.write(byteVar3);
}
String stringVar7 = stringLiteral8;
if (headerEncoding != null) {
try {
stringVar7 = bytearrayoutputstreamVar4.toString(headerEncoding);
} catch (UnsupportedEncodingException e) {
stringVar7 = bytearrayoutputstreamVar4.toString();
}
} else {
stringVar7 = bytearrayoutputstreamVar4.toString();
}
return stringVar7;
}",0
"public void close(boolean pCloseUnderlying) throws IOException {
if (closed) {
return;
}
if (pCloseUnderlying) {
closed = true;
input.close();
} else {
for (; ; ) {
int intVar1 = intLiteral2;
if (intVar1 == 0) {
intVar1 = makeAvailable();
if (intVar1 == 0) {
break;
}
}
skip(intVar1);
}
}
closed = true;
}",0
"public static String asString(InputStream inputStream) throws IOException {
ByteArrayOutputStream bytearrayoutputstreamVar1 = bytearrayoutputstreamLiteral2;
copy(inputStream, bytearrayoutputstreamVar1, true);
return bytearrayoutputstreamVar1.toString();
}",0
"private boolean checkDependencyManagement() throws MojoExecutionException {
boolean booleanVar1 = booleanLiteral2;
getLog().info(""Found Resolved Dependency / DependencyManagement mismatches:"");
List listVar3 = listLiteral4;
DependencyManagement dependencymanagementVar5 = dependencymanagementLiteral6;
if (dependencymanagementVar5 != null) {
listVar3 = dependencymanagementVar5.getDependencies();
}
if (listVar3 != null && !listVar3.isEmpty()) {
Map mapVar7 = mapLiteral8;
Map mapVar9 = mapLiteral8;
Iterator iteratorVar10 = iteratorLiteral11;
while (iteratorVar10.hasNext()) {
Dependency dependencyVar12 = dependencyLiteral13;
mapVar7.put(dependencyVar12.getManagementKey(), dependencyVar12);
mapVar9.putAll(addExclusions(dependencyVar12.getExclusions()));
}
Set setVar14 = setLiteral15;
if (this.ignoreDirect) {
getLog().info(""\tIgnoring Direct Dependencies."");
Set setVar16 = setLiteral17;
setVar14.removeAll(setVar16);
}
List listVar18 = listLiteral19;
Iterator iteratorVar20 = iteratorLiteral21;
while (iteratorVar20.hasNext()) {
Artifact artifactVar22 = artifactLiteral23;
getLog().info(StringUtils.stripEnd(getArtifactManagementKey(artifactVar22), "":"") + "" was excluded in DepMgt, but version "" + artifactVar22.getVersion() + "" has been found in the dependency tree."");
booleanVar1 = true;
}
Map mapVar24 = mapLiteral25;
Iterator iteratorVar26 = iteratorLiteral27;
while (iteratorVar26.hasNext()) {
Artifact artifactVar28 = artifactLiteral29;
Dependency dependencyVar12 = dependencyLiteral30;
logMismatch(artifactVar28, dependencyVar12);
}
if (!booleanVar1) {
getLog().info(""   None"");
}
} else {
getLog().info(""   Nothing in DepMgt."");
}
return booleanVar1;
}",0
"public void executeReport(Locale locale) throws MavenReportException {
if (""pom"".equals(project.getPackaging())) {
getLog().info(""Skipping pom project"");
return;
}
if (outputDirectory == null || !outputDirectory.exists()) {
getLog().info(""Skipping project with no Target directory"");
return;
}
ProjectDependencyAnalysis projectdependencyanalysisVar1 = projectdependencyanalysisLiteral2;
try {
projectdependencyanalysisVar1 = analyzer.analyze(project);
} catch (ProjectDependencyAnalyzerException exception) {
throw new MavenReportException(""Cannot analyze dependencies"", exception);
}
Sink sinkVar3 = sinkLiteral4;
ResourceBundle resourcebundleVar5 = resourcebundleLiteral6;
AnalyzeReportView analyzereportviewVar7 = analyzereportviewLiteral8;
analyzereportviewVar7.generateReport(projectdependencyanalysisVar1, sinkVar3, resourcebundleVar5);
}",0
"public int compare(Object arg1, Object arg2) {
if (arg1 instanceof Artifact && arg2 instanceof Artifact) {
if (arg1 == arg2) {
return 0;
} else if (arg1 == null) {
return -1;
} else if (arg2 == null) {
return +1;
}
Artifact artifactVar1 = artifactLiteral2;
Artifact artifactVar3 = artifactLiteral4;
String stringVar5 = stringLiteral6;
String stringVar7 = stringLiteral8;
return stringVar5.compareTo(stringVar7);
} else {
return 0;
}
}",0
"private void refreshDependenciesForProject(MavenProject project, List exclusionPatterns) throws ArtifactResolutionException, MojoFailureException {
Map mapVar1 = mapLiteral2;
if (mapVar1.isEmpty()) {
getLog().info(""Nothing to do for project: "" + project.getId());
return;
}
if (!exclusionPatterns.isEmpty()) {
for (Iterator iteratorVar22 = iteratorLiteral23; iteratorVar3.hasNext(); ) {
String stringVar5 = stringLiteral6;
verbose(""Excluding: "" + stringVar5 + "" from refresh operation for project: "" + project.getId());
mapVar1.remove(stringVar5);
}
}
verbose(""Processing dependencies for project: "" + project.getId());
List listVar7 = listLiteral8;
for (Iterator iteratorVar22 = iteratorLiteral24; iteratorVar3.hasNext(); ) {
Map.Entry map.entryVar10 = map.entryLiteral11;
Artifact artifactVar12 = artifactLiteral13;
verbose(""Processing artifact: "" + artifactVar12.getId());
File fileVar14 = fileLiteral15;
verbose(""Deleting: "" + fileVar14);
if (fileVar14.isDirectory()) {
try {
FileUtils.deleteDirectory(fileVar14);
} catch (IOException e) {
throw new MojoFailureException(this, ""Cannot delete dependency from the local repository: "" + artifactVar12.getId(), ""Failed to delete: "" + fileVar14);
}
} else {
fileVar14.delete();
}
if (reResolve) {
verbose(""Re-resolving."");
artifactVar12.setResolved(false);
try {
resolver.resolveAlways(artifactVar12, project.getRemoteArtifactRepositories(), localRepository);
} catch (ArtifactResolutionException e) {
getLog().debug(e.getMessage());
listVar7.add(artifactVar12);
} catch (ArtifactNotFoundException e) {
getLog().debug(e.getMessage());
listVar7.add(artifactVar12);
}
}
}
if (listVar7.size() > 0) {
String stringVar16 = stringLiteral17;
for (Iterator iteratorVar25 = iteratorLiteral26; iteratorVar18.hasNext(); ) {
Artifact artifactVar20 = artifactLiteral21;
stringVar16 += ""  "" + artifactVar20.getId() + ""\n"";
}
stringVar16 += ""\nfor the artifact:"";
throw new ArtifactResolutionException(stringVar16, project.getArtifact(), project.getRemoteArtifactRepositories());
}
}",0
private ArtifactRepositoryFactory artifactrepositoryfactoryVar1;,0
"public synchronized static void write(String string, File file, Log log) throws IOException {
file.getParentFile().mkdirs();
FileWriter filewriterVar1 = filewriterLiteral2;
try {
filewriterVar1 = new FileWriter(file);
filewriterVar1.write(string);
} finally {
if (filewriterVar1 != null) {
try {
filewriterVar1.close();
} catch (IOException exception) {
log.error(""Cannot close file"", exception);
}
}
}
}",0
"public void setMarker() throws MojoExecutionException {
File fileVar1 = fileLiteral2;
File fileVar3 = fileLiteral4;
try {
fileVar1.getParentFile().mkdirs();
} catch (NullPointerException e) {
}
try {
fileVar1.createNewFile();
if (fileVar3.exists()) {
fileVar3.delete();
}
} catch (IOException e) {
throw new MojoExecutionException(""Unable to create Marker: "" + fileVar1.getAbsolutePath(), e);
}
}",0
private boolean booleanVar1;,0
protected boolean booleanVar1;,0
"protected Set resolveArtifactDependencies(Artifact artifact) throws ArtifactResolutionException, ArtifactNotFoundException, ProjectBuildingException, InvalidDependencyVersionException {
Artifact artifactVar1 = artifactLiteral2;
MavenProject mavenprojectVar3 = mavenprojectLiteral4;
return resolveDependencyArtifacts(mavenprojectVar3);
}",0
"public void setMarker() throws MojoExecutionException {
File fileVar1 = fileLiteral2;
File fileVar3 = fileLiteral4;
try {
fileVar1.getParentFile().mkdirs();
} catch (NullPointerException e) {
}
try {
fileVar1.createNewFile();
if (fileVar3.exists()) {
fileVar3.delete();
}
} catch (IOException e) {
throw new MojoExecutionException(""Unable to create Marker: "" + fileVar1.getAbsolutePath(), e);
}
}",0
"protected void unpack(Artifact artifact, File location, String includes, String excludes) throws MojoExecutionException {
File fileVar1 = fileLiteral2;
try {
logUnpack(fileVar1, location, includes, excludes);
location.mkdirs();
if (fileVar1.isDirectory()) {
// usual case is a future jar packaging, but there are special cases: classifier and other packaging
throw new MojoExecutionException(""Artifact has not been packaged yet. When used on reactor artifact, "" + ""unpack should be executed after packaging: see MDEP-98."");
}
UnArchiver unarchiverVar3;
try {
unarchiverVar3 = archiverManager.getUnArchiver(artifact.getType());
getLog().debug(""Found unArchiver by type: "" + unarchiverVar3);
} catch (NoSuchArchiverException e) {
unarchiverVar3 = archiverManager.getUnArchiver(fileVar1);
getLog().debug(""Found unArchiver by extension: "" + unarchiverVar3);
}
unarchiverVar3.setUseJvmChmod(useJvmChmod);
unarchiverVar3.setIgnorePermissions(ignorePermissions);
unarchiverVar3.setSourceFile(fileVar1);
unarchiverVar3.setDestDirectory(location);
if (StringUtils.isNotEmpty(excludes) || StringUtils.isNotEmpty(includes)) {
IncludeExcludeFileSelector[] includeexcludefileselectorArrayVar4 = includeexcludefileselectorArrayLiteral5;
if (StringUtils.isNotEmpty(excludes)) {
includeexcludefileselectorArrayVar4[0].setExcludes(excludes.split("",""));
}
if (StringUtils.isNotEmpty(includes)) {
includeexcludefileselectorArrayVar4[0].setIncludes(includes.split("",""));
}
unarchiverVar3.setFileSelectors(includeexcludefileselectorArrayVar4);
}
if (this.silent) {
silenceUnarchiver(unarchiverVar3);
}
unarchiverVar3.extract();
} catch (NoSuchArchiverException e) {
throw new MojoExecutionException(""Unknown archiver type"", e);
} catch (ArchiverException e) {
throw new MojoExecutionException(""Error unpacking file: "" + fileVar1 + "" to: "" + location + ""\r\n"" + e.toString(), e);
}
}",0
"public boolean include(Artifact artifact) {
if (artifactsGAMatch(artifact, projectArtifact)) {
return true;
}
for (Artifact artifactVar1 : directDependencyArtifacts) {
if (this.artifactsGAMatch(artifact, artifactVar1)) {
return true;
}
}
return false;
}",0
"public String getOutput(boolean outputAbsoluteArtifactFilename, boolean theOutputScope, boolean theSort) {
StringBuilder stringbuilderVar1 = stringbuilderLiteral2;
stringbuilderVar1.append(System.lineSeparator());
stringbuilderVar1.append(""The following files have been resolved:"");
stringbuilderVar1.append(System.lineSeparator());
if (results.getResolvedDependencies() == null || results.getResolvedDependencies().isEmpty()) {
stringbuilderVar1.append(""   none"");
stringbuilderVar1.append(System.lineSeparator());
} else {
stringbuilderVar1.append(buildArtifactListOutput(results.getResolvedDependencies(), outputAbsoluteArtifactFilename, theOutputScope, theSort));
}
if (results.getSkippedDependencies() != null && !results.getSkippedDependencies().isEmpty()) {
stringbuilderVar1.append(System.lineSeparator());
stringbuilderVar1.append(""The following files were skipped:"");
stringbuilderVar1.append(System.lineSeparator());
Set<Artifact> set<artifact>Var3 = set<artifact>Literal4;
set<artifact>Var3.addAll(results.getSkippedDependencies());
stringbuilderVar1.append(buildArtifactListOutput(set<artifact>Var3, outputAbsoluteArtifactFilename, theOutputScope, theSort));
}
if (results.getUnResolvedDependencies() != null && !results.getUnResolvedDependencies().isEmpty()) {
stringbuilderVar1.append(System.lineSeparator());
stringbuilderVar1.append(""The following files have NOT been resolved:"");
stringbuilderVar1.append(System.lineSeparator());
Set<Artifact> set<artifact>Var5 = set<artifact>Literal4;
set<artifact>Var5.addAll(results.getUnResolvedDependencies());
stringbuilderVar1.append(buildArtifactListOutput(set<artifact>Var5, outputAbsoluteArtifactFilename, theOutputScope, theSort));
}
stringbuilderVar1.append(System.lineSeparator());
return stringbuilderVar1.toString();
}",0
"private void applyDependencyManagementDfs(Map<String, org.apache.maven.model.Dependency> dependencyManagementMap, DependencyNode node) {
if (dependencyManagementMap.containsKey(getDependencyManagementCoordinate(node.getArtifact()))) {
org.apache.maven.model.Dependency org.apache.maven.model.dependencyVar1 = org.apache.maven.model.dependencyLiteral2;
Map<String, String> map<string,string>Var3 = map<string,string>Literal4;
for (Map.Entry<String, String> map.entry<string,string>Var5 : node.getArtifact().getProperties().entrySet()) {
map<string,string>Var3.put(map.entry<string,string>Var5.getKey(), map.entry<string,string>Var5.getValue());
}
if (!org.apache.maven.model.dependencyVar1.getVersion().equals(node.getArtifact().getVersion())) {
map<string,string>Var3.put(PRE_MANAGED_VERSION, node.getArtifact().getVersion());
node.setArtifact(node.getArtifact().setVersion(org.apache.maven.model.dependencyVar1.getVersion()));
}
String stringVar6 = stringLiteral7;
Dependency dependencyVar8 = dependencyLiteral9;
String stringVar10 = stringLiteral11;
if (!stringVar6.equals(stringVar10)) {
map<string,string>Var3.put(PRE_MANAGED_SCOPE, stringVar10);
map<string,string>Var3.put(MANAGED_SCOPE, stringVar6);
}
node.setArtifact(node.getArtifact().setProperties(map<string,string>Var3));
dependencyVar8.setArtifact(dependencyVar8.getArtifact().setProperties(map<string,string>Var3));
}
for (DependencyNode dependencynodeVar12 : node.getChildren()) {
applyDependencyManagementDfs(dependencyManagementMap, dependencynodeVar12);
}
}",0
"@Override
public void setMarker() throws MojoExecutionException {
File fileVar1 = fileLiteral2;
File fileVar3 = fileLiteral4;
try {
fileVar1.getParentFile().mkdirs();
} catch (NullPointerException e) {
}
try {
fileVar1.createNewFile();
if (fileVar3.exists()) {
if (!fileVar3.delete()) {
fileVar3.deleteOnExit();
}
}
} catch (IOException e) {
throw new MojoExecutionException(""Unable to create Marker: "" + fileVar1.getAbsolutePath(), e);
}
}",0
"public void setFileMappers(FileMapper[] fileMappers) {
this.fileMappers = fileMappers;
}",0
"private void storeClasspathFile(String cpString, File out) throws MojoExecutionException {
out.getParentFile().mkdirs();
String stringVar1 = stringLiteral2;
try (Writer writerVar3 = writerLiteral4) {
writerVar3.write(cpString);
getLog().info(""Wrote classpath file '"" + out + ""'."");
} catch (IOException ex) {
throw new MojoExecutionException(""Error while writing to classpath file '"" + out, ex);
}
}",0
"@Override
public void setMarker() throws MojoExecutionException {
File fileVar1 = fileLiteral2;
File fileVar3 = fileLiteral4;
try {
fileVar1.getParentFile().mkdirs();
} catch (NullPointerException e) {
}
try {
fileVar1.createNewFile();
if (fileVar3.exists()) {
if (!fileVar3.delete()) {
fileVar3.deleteOnExit();
}
}
} catch (IOException e) {
throw new MojoExecutionException(""Unable to create Marker: "" + fileVar1.getAbsolutePath(), e);
}
}",0
"public FileMapper[] getFileMappers() {
return this.fileMappers;
}",0
"public void setFileMappers(FileMapper[] fileMappers) {
this.fileMappers = fileMappers;
}",0
"private DependencyNode buildTree(DependencyNode parent, org.eclipse.aether.graph.DependencyNode child) {
List<org.apache.maven.model.Exclusion> list<org.apache.maven.model.exclusion>Var1 = list<org.apache.maven.model.exclusion>Literal2;
for (org.eclipse.aether.graph.Exclusion org.eclipse.aether.graph.exclusionVar3 : child.getDependency().getExclusions()) {
list<org.apache.maven.model.exclusion>Var1.add(convertAetherExclusionToMavenExclusion(org.eclipse.aether.graph.exclusionVar3));
}
DefaultDependencyNode defaultdependencynodeVar4 = defaultdependencynodeLiteral5;
defaultdependencynodeVar4.setChildren(new ArrayList<DependencyNode>());
for (org.eclipse.aether.graph.DependencyNode org.eclipse.aether.graph.dependencynodeVar6 : child.getChildren()) {
defaultdependencynodeVar4.getChildren().add(buildTree(defaultdependencynodeVar4, org.eclipse.aether.graph.dependencynodeVar6));
}
return defaultdependencynodeVar4;
}",0
"@Override
public void setMarker() throws MojoExecutionException {
File fileVar1 = fileLiteral2;
try {
fileVar1.getParentFile().mkdirs();
} catch (NullPointerException e) {
}
try {
fileVar1.createNewFile();
} catch (IOException e) {
throw new MojoExecutionException(""Unable to create Marker: "" + fileVar1.getAbsolutePath(), e);
}
try {
long longVar3;
if (this.artifact != null && this.artifact.getFile() != null) {
longVar3 = this.artifact.getFile().lastModified();
} else {
longVar3 = System.currentTimeMillis();
}
if (!fileVar1.setLastModified(longVar3)) {
throw new MojoExecutionException(""Unable to update last modified timestamp on marker file "" + fileVar1.getAbsolutePath());
}
} catch (Exception e) {
throw new MojoExecutionException(""Unable to update Marker timestamp: "" + fileVar1.getAbsolutePath(), e);
}
}",0
"private void silenceUnarchiver(UnArchiver unArchiver) {
try {
Field fieldVar1 = fieldLiteral2;
fieldVar1.setAccessible(true);
fieldVar1.set(unArchiver, this.getLog());
} catch (Exception e) {
}
}",0
"public FileMapper[] getFileMappers() {
return this.fileMappers;
}",0
"@Parameter
protected boolean booleanVar1 = booleanLiteral2;",0
"public void setFileMappers(FileMapper[] fileMappers) {
this.fileMappers = fileMappers;
}",0
"@Parameter
protected boolean booleanVar1 = booleanLiteral2;",0
"public void setFileMappers(FileMapper[] fileMappers) {
this.fileMappers = fileMappers;
}",0
"private DependencyNode buildTree(DependencyNode parent, org.eclipse.aether.graph.DependencyNode child) {
List<org.apache.maven.model.Exclusion> list<org.apache.maven.model.exclusion>Var1 = list<org.apache.maven.model.exclusion>Literal2;
for (org.eclipse.aether.graph.Exclusion org.eclipse.aether.graph.exclusionVar3 : child.getDependency().getExclusions()) {
list<org.apache.maven.model.exclusion>Var1.add(convertAetherExclusionToMavenExclusion(org.eclipse.aether.graph.exclusionVar3));
}
DefaultDependencyNode defaultdependencynodeVar4 = defaultdependencynodeLiteral5;
defaultdependencynodeVar4.setChildren(new ArrayList<DependencyNode>());
for (org.eclipse.aether.graph.DependencyNode org.eclipse.aether.graph.dependencynodeVar6 : child.getChildren()) {
defaultdependencynodeVar4.getChildren().add(buildTree(defaultdependencynodeVar4, org.eclipse.aether.graph.dependencynodeVar6));
}
return defaultdependencynodeVar4;
}",0
"@Override
public void setMarker() throws MojoExecutionException {
File fileVar1 = fileLiteral2;
try {
fileVar1.getParentFile().mkdirs();
} catch (NullPointerException e) {
}
try {
fileVar1.createNewFile();
} catch (IOException e) {
throw new MojoExecutionException(""Unable to create Marker: "" + fileVar1.getAbsolutePath(), e);
}
try {
long longVar3;
if (this.artifact != null && this.artifact.getFile() != null) {
longVar3 = this.artifact.getFile().lastModified();
} else {
longVar3 = System.currentTimeMillis();
}
if (!fileVar1.setLastModified(longVar3)) {
throw new MojoExecutionException(""Unable to update last modified timestamp on marker file "" + fileVar1.getAbsolutePath());
}
} catch (Exception e) {
throw new MojoExecutionException(""Unable to update Marker timestamp: "" + fileVar1.getAbsolutePath(), e);
}
}",0
"protected void unpack(File file, File location) throws MojoExecutionException {
try {
location.mkdirs();
UnArchiver unarchiverVar1;
unarchiverVar1 = archiverManager.getUnArchiver(file);
unarchiverVar1.setSourceFile(file);
unarchiverVar1.setDestDirectory(location);
if (this.silent) {
silenceUnarchiver(unarchiverVar1);
}
unarchiverVar1.extract();
} catch (NoSuchArchiverException e) {
throw new MojoExecutionException(""Unknown archiver type"", e);
} catch (IOException e) {
e.printStackTrace();
throw new MojoExecutionException(""Error unpacking file: "" + (this.outputAbsoluteArtifactFilename ? file.getAbsolutePath() : file.getName()) + "" to: "" + location + ""\r\n"" + e.toString(), e);
} catch (ArchiverException e) {
e.printStackTrace();
throw new MojoExecutionException(""Error unpacking file: "" + file + "" to: "" + location + ""\r\n"" + e.toString(), e);
}
}",0
"private boolean checkDependencies() throws MojoExecutionException {
boolean booleanVar1 = booleanLiteral2;
try {
ProjectDependencyAnalysis projectdependencyanalysisVar3 = projectdependencyanalysisLiteral4;
if (this.displayUsed) {
getLog().info(""Used declared dependencies:"");
logArtifacts(projectdependencyanalysisVar3.getUsedDeclaredArtifacts(), false);
}
getLog().info(""Used undeclared dependencies:"");
Set setVar5 = setLiteral6;
logArtifacts(setVar5, true);
getLog().info(""Unused declared dependencies:"");
Set setVar7 = setLiteral8;
if (ignoreNonCompile) {
Iterator iteratorVar9 = iteratorLiteral10;
while (iteratorVar9.hasNext()) {
Artifact artifactVar11 = artifactLiteral12;
if (!artifactVar11.getScope().equals(Artifact.SCOPE_COMPILE)) {
iteratorVar9.remove();
}
}
}
logArtifacts(setVar7, false);
if (outputXML) {
writeDependencyXML(setVar5);
}
if (scriptableOutput) {
writeScriptableOutput(setVar5);
}
if ((setVar5 != null && !setVar5.isEmpty()) || setVar7 != null && !setVar7.isEmpty()) {
getLog().warn(""Potential problems discovered."");
booleanVar1 = true;
}
} catch (ProjectDependencyAnalyzerException exception) {
throw new MojoExecutionException(""Cannot analyze dependencies"", exception);
}
return booleanVar1;
}",0
"public void execute() throws MojoExecutionException {
Set setVar1 = setLiteral2;
if (setVar1 == null || setVar1.isEmpty()) {
getLog().info(""No dependencies found."");
}
List listVar3 = listLiteral4;
StringBuffer stringbufferVar5 = stringbufferLiteral6;
Iterator iteratorVar7 = iteratorLiteral8;
if (iteratorVar7.hasNext()) {
appendArtifactPath((Artifact) iteratorVar7.next(), stringbufferVar5);
while (iteratorVar7.hasNext()) {
stringbufferVar5.append(File.pathSeparatorChar);
appendArtifactPath((Artifact) iteratorVar7.next(), stringbufferVar5);
}
}
String stringVar9 = stringLiteral10;
if (cpFile == null) {
getLog().info(""Dependencies classpath:\n"" + stringVar9);
} else {
if (regenerateFile || !isUpdToDate(stringVar9)) {
storeClasspathFile(stringVar9);
} else {
this.getLog().info(""Skipped writting classpath file '"" + cpFile + ""'.  No changes found."");
}
}
}",0
"private String readClasspathFile() throws IOException {
if (!cpFile.isFile()) {
return null;
}
StringBuffer stringbufferVar1 = stringbufferLiteral2;
BufferedReader bufferedreaderVar3 = bufferedreaderLiteral4;
try {
String stringVar5;
while ((stringVar5 = bufferedreaderVar3.readLine()) != null) {
stringbufferVar1.append(stringVar5);
}
return stringbufferVar1.toString();
} finally {
bufferedreaderVar3.close();
}
}",0
"public int compare(Object arg1, Object arg2) {
if (arg1 instanceof Artifact && arg2 instanceof Artifact) {
if (arg1 == arg2) {
return 0;
} else if (arg1 == null) {
return -1;
} else if (arg2 == null) {
return +1;
}
Artifact artifactVar1 = artifactLiteral2;
Artifact artifactVar3 = artifactLiteral4;
String stringVar5 = stringLiteral6;
String stringVar7 = stringLiteral8;
return stringVar5.compareTo(stringVar7);
} else {
return 0;
}
}",0
private boolean booleanVar1;,0
"private boolean checkDependencyManagement() throws MojoExecutionException {
boolean booleanVar1 = booleanLiteral2;
getLog().info(""Found Resolved Dependency/DependencyManagement mismatches:"");
List<Dependency> list<dependency>Var3 = list<dependency>Literal4;
DependencyManagement dependencymanagementVar5 = dependencymanagementLiteral6;
if (dependencymanagementVar5 != null) {
list<dependency>Var3 = dependencymanagementVar5.getDependencies();
}
if (list<dependency>Var3 != null && !list<dependency>Var3.isEmpty()) {
Map<String, Dependency> map<string,dependency>Var7 = map<string,dependency>Literal8;
Map<String, Exclusion> map<string,exclusion>Var9 = map<string,dependency>Literal8;
for (Dependency dependencyVar10 : list<dependency>Var3) {
map<string,dependency>Var7.put(dependencyVar10.getManagementKey(), dependencyVar10);
map<string,exclusion>Var9.putAll(addExclusions(dependencyVar10.getExclusions()));
}
Set<Artifact> set<artifact>Var11 = set<artifact>Literal12;
if (this.ignoreDirect) {
getLog().info(""\tIgnoring Direct Dependencies."");
Set<Artifact> set<artifact>Var13 = set<artifact>Literal14;
set<artifact>Var11.removeAll(set<artifact>Var13);
}
List<Artifact> list<artifact>Var15 = list<artifact>Literal16;
for (Artifact artifactVar17 : list<artifact>Var15) {
getLog().info(StringUtils.stripEnd(getArtifactManagementKey(artifactVar17), "":"") + "" was excluded in DepMgt, but version "" + artifactVar17.getVersion() + "" has been found in the dependency tree."");
booleanVar1 = true;
}
Map<Artifact, Dependency> map<artifact,dependency>Var18 = map<artifact,dependency>Literal19;
for (Map.Entry<Artifact, Dependency> map.entry<artifact,dependency>Var20 : map<artifact,dependency>Var18.entrySet()) {
logMismatch(map.entry<artifact,dependency>Var20.getKey(), map.entry<artifact,dependency>Var20.getValue());
booleanVar1 = true;
}
if (!booleanVar1) {
getLog().info(""\tNone"");
}
} else {
getLog().info(""\tNothing in DepMgt."");
}
return booleanVar1;
}",0
"public FileMapper[] getFileMappers() {
return this.fileMappers;
}",0
"@Override
public void setMarker() throws MojoExecutionException {
File fileVar1 = fileLiteral2;
File fileVar3 = fileLiteral4;
try {
fileVar1.getParentFile().mkdirs();
} catch (NullPointerException e) {
}
try {
fileVar1.createNewFile();
if (fileVar3.exists()) {
if (!fileVar3.delete()) {
fileVar3.deleteOnExit();
}
}
} catch (IOException e) {
throw new MojoExecutionException(""Unable to create Marker: "" + fileVar1.getAbsolutePath(), e);
}
}",0
"protected Set resolveArtifactDependencies(Artifact artifact) throws ArtifactResolutionException, ArtifactNotFoundException, ProjectBuildingException, InvalidDependencyVersionException {
Artifact artifactVar1 = artifactLiteral2;
MavenProject mavenprojectVar3 = mavenprojectLiteral4;
return resolveDependencyArtifacts(mavenprojectVar3);
}",0
"public void setMarker() throws MojoExecutionException {
File fileVar1 = fileLiteral2;
try {
fileVar1.getParentFile().mkdirs();
} catch (NullPointerException e) {
}
try {
fileVar1.createNewFile();
} catch (IOException e) {
throw new MojoExecutionException(""Unable to create Marker: "" + fileVar1.getAbsolutePath(), e);
}
}",0
"@Override
public void setMarker() throws MojoExecutionException {
File fileVar1 = fileLiteral2;
File fileVar3 = fileLiteral4;
try {
fileVar1.getParentFile().mkdirs();
} catch (NullPointerException e) {
}
try {
fileVar1.createNewFile();
if (fileVar3.exists()) {
if (!fileVar3.delete()) {
fileVar3.deleteOnExit();
}
}
} catch (IOException e) {
throw new MojoExecutionException(""Unable to create Marker: "" + fileVar1.getAbsolutePath(), e);
}
}",0
protected boolean booleanVar1;,0
boolean booleanVar1;,0
"protected void attachFile(String cpString) throws MojoExecutionException {
File fileVar1 = fileLiteral2;
storeClasspathFile(cpString, fileVar1);
projectHelper.attachArtifact(project, fileVar1, ""classpath"");
}",0
"private Map<String, ArtifactRepositoryLayout> map<string,artifactrepositorylayout>Var1;",0
"protected ArtifactRepository getLocal() {
if (this.overrideLocalRepository != null) {
return this.overrideLocalRepository;
}
ArtifactRepository artifactrepositoryVar1 = artifactrepositoryLiteral2;
if (this.localRepositoryDirectory != null) {
String stringVar3 = stringLiteral4;
this.overrideLocalRepository = artifactRepositoryManager.createArtifactRepository(artifactrepositoryVar1.getId(), stringVar3, artifactrepositoryVar1.getLayout(), artifactrepositoryVar1.getSnapshots(), artifactrepositoryVar1.getReleases());
this.getLog().debug(""Execution local repository is at: "" + this.overrideLocalRepository.getBasedir());
} else {
this.overrideLocalRepository = artifactrepositoryVar1;
}
return this.overrideLocalRepository;
}",0
"protected List<ArtifactItem> getProcessedArtifactItems(boolean removeVersion) throws MojoExecutionException {
if (artifactItems == null || artifactItems.size() < 1) {
throw new MojoExecutionException(""There are no artifactItems configured."");
}
for (ArtifactItem artifactitemVar1 : artifactItems) {
this.getLog().info(""Configured Artifact: "" + artifactitemVar1.toString());
if (artifactitemVar1.getOutputDirectory() == null) {
artifactitemVar1.setOutputDirectory(this.outputDirectory);
}
artifactitemVar1.getOutputDirectory().mkdirs();
if (StringUtils.isEmpty(artifactitemVar1.getVersion())) {
fillMissingArtifactVersion(artifactitemVar1);
}
artifactitemVar1.setArtifact(this.getArtifact(artifactitemVar1));
if (StringUtils.isEmpty(artifactitemVar1.getDestFileName())) {
artifactitemVar1.setDestFileName(DependencyUtil.getFormattedFileName(artifactitemVar1.getArtifact(), removeVersion));
}
try {
artifactitemVar1.setNeedsProcessing(checkIfProcessingNeeded(artifactitemVar1));
} catch (ArtifactFilterException e) {
throw new MojoExecutionException(e.getMessage(), e);
}
}
return artifactItems;
}",0
private ArtifactRepositoryFactory artifactrepositoryfactoryVar1;,0
"public static void unpackFile(Artifact artifact, File unpackDirectory, File markersDirectory, ArchiverManager archiverManager, Log log, boolean overWrite) throws MojoExecutionException {
markersDirectory.mkdirs();
File fileVar1 = fileLiteral2;
if (!fileVar1.exists() || overWrite) {
try {
unpackDirectory.mkdirs();
unpack(artifact.getFile(), unpackDirectory, archiverManager, log);
fileVar1.getParentFile().mkdirs();
fileVar1.createNewFile();
} catch (IOException e) {
throw new MojoExecutionException(""Error creating marker file: "" + fileVar1);
}
} else {
log.info(artifact.getFile().getName() + "" already unpacked."");
}
}",0
"public void setMarker() throws MojoExecutionException {
File fileVar1 = fileLiteral2;
fileVar1.getParentFile().mkdirs();
try {
fileVar1.createNewFile();
} catch (IOException e) {
throw new MojoExecutionException(""Unable to create Marker: "" + fileVar1.getAbsolutePath(), e);
}
}",0
"protected void unpack(Artifact artifact, String type, File location, String includes, String excludes, String encoding, FileMapper[] fileMappers) throws MojoExecutionException {
File fileVar1 = fileLiteral2;
try {
logUnpack(fileVar1, location, includes, excludes);
location.mkdirs();
if (!location.exists()) {
throw new MojoExecutionException(""Location to write unpacked files to could not be created: "" + location);
}
if (fileVar1.isDirectory()) {
// usual case is a future jar packaging, but there are special cases: classifier and other packaging
throw new MojoExecutionException(""Artifact has not been packaged yet. When used on reactor artifact, "" + ""unpack should be executed after packaging: see MDEP-98."");
}
UnArchiver unarchiverVar3;
try {
unarchiverVar3 = archiverManager.getUnArchiver(type);
getLog().debug(""Found unArchiver by type: "" + unarchiverVar3);
} catch (NoSuchArchiverException e) {
unarchiverVar3 = archiverManager.getUnArchiver(fileVar1);
getLog().debug(""Found unArchiver by extension: "" + unarchiverVar3);
}
if (encoding != null && unarchiverVar3 instanceof ZipUnArchiver) {
((ZipUnArchiver) unarchiverVar3).setEncoding(encoding);
getLog().info(""Unpacks '"" + type + ""' with encoding '"" + encoding + ""'."");
}
unarchiverVar3.setIgnorePermissions(ignorePermissions);
unarchiverVar3.setSourceFile(fileVar1);
unarchiverVar3.setDestDirectory(location);
if (StringUtils.isNotEmpty(excludes) || StringUtils.isNotEmpty(includes)) {
IncludeExcludeFileSelector[] includeexcludefileselectorArrayVar4 = includeexcludefileselectorArrayLiteral5;
if (StringUtils.isNotEmpty(excludes)) {
includeexcludefileselectorArrayVar4[0].setExcludes(excludes.split("",""));
}
if (StringUtils.isNotEmpty(includes)) {
includeexcludefileselectorArrayVar4[0].setIncludes(includes.split("",""));
}
unarchiverVar3.setFileSelectors(includeexcludefileselectorArrayVar4);
}
if (this.silent) {
silenceUnarchiver(unarchiverVar3);
}
unarchiverVar3.setFileMappers(fileMappers);
unarchiverVar3.extract();
} catch (NoSuchArchiverException e) {
throw new MojoExecutionException(""Unknown archiver type"", e);
} catch (ArchiverException e) {
throw new MojoExecutionException(""Error unpacking file: "" + fileVar1 + "" to: "" + location + System.lineSeparator() + e.toString(), e);
}
}",0
"private ProjectBuildingRequest makeBuildingRequest() throws MojoExecutionException, MojoFailureException {
if (artifact == null) {
throw new MojoFailureException(""You must specify an artifact, "" + ""e.g. -Dartifact=org.apache.maven.plugins:maven-downloader-plugin:1.0"");
}
if (artifact != null) {
String[] stringArrayVar1 = stringArrayLiteral2;
if (stringArrayVar1.length < 3 || stringArrayVar1.length > 5) {
throw new MojoFailureException(""Invalid artifact, you must specify "" + ""groupId:artifactId:version[:packaging[:classifier]] "" + artifact);
}
coordinate.setGroupId(stringArrayVar1[0]);
coordinate.setArtifactId(stringArrayVar1[1]);
coordinate.setVersion(stringArrayVar1[2]);
if (stringArrayVar1.length >= 4) {
coordinate.setType(stringArrayVar1[3]);
}
if (stringArrayVar1.length == 5) {
coordinate.setClassifier(stringArrayVar1[4]);
}
}
ArtifactRepositoryPolicy artifactrepositorypolicyVar3 = artifactrepositorypolicyLiteral4;
List<ArtifactRepository> list<artifactrepository>Var5 = list<artifactrepository>Literal6;
if (pomRemoteRepositories != null) {
list<artifactrepository>Var5.addAll(pomRemoteRepositories);
}
if (remoteRepositories != null) {
// Use the same format as in the deploy plugin id::layout::url
String[] stringArrayVar7 = stringArrayLiteral8;
for (String stringVar9 : stringArrayVar7) {
list<artifactrepository>Var5.add(parseRepository(stringVar9, artifactrepositorypolicyVar3));
}
}
ProjectBuildingRequest projectbuildingrequestVar10 = projectbuildingrequestLiteral11;
Settings settingsVar12 = settingsLiteral13;
repositorySystem.injectMirror(list<artifactrepository>Var5, settingsVar12.getMirrors());
repositorySystem.injectProxy(list<artifactrepository>Var5, settingsVar12.getProxies());
repositorySystem.injectAuthentication(list<artifactrepository>Var5, settingsVar12.getServers());
projectbuildingrequestVar10.setRemoteRepositories(list<artifactrepository>Var5);
return projectbuildingrequestVar10;
}",0
"public String getOutput(boolean outputAbsoluteArtifactFilename, boolean theOutputScope, boolean theSort) {
StringBuilder stringbuilderVar1 = stringbuilderLiteral2;
stringbuilderVar1.append(System.lineSeparator());
stringbuilderVar1.append(""The following files have been resolved:"");
stringbuilderVar1.append(System.lineSeparator());
if (results.getResolvedDependencies() == null || results.getResolvedDependencies().isEmpty()) {
stringbuilderVar1.append(""   none"");
stringbuilderVar1.append(System.lineSeparator());
} else {
stringbuilderVar1.append(buildArtifactListOutput(results.getResolvedDependencies(), outputAbsoluteArtifactFilename, theOutputScope, theSort));
}
if (results.getSkippedDependencies() != null && !results.getSkippedDependencies().isEmpty()) {
stringbuilderVar1.append(System.lineSeparator());
stringbuilderVar1.append(""The following files were skipped:"");
stringbuilderVar1.append(System.lineSeparator());
Set<Artifact> set<artifact>Var3 = set<artifact>Literal4;
set<artifact>Var3.addAll(results.getSkippedDependencies());
stringbuilderVar1.append(buildArtifactListOutput(set<artifact>Var3, outputAbsoluteArtifactFilename, theOutputScope, theSort));
}
if (results.getUnResolvedDependencies() != null && !results.getUnResolvedDependencies().isEmpty()) {
stringbuilderVar1.append(System.lineSeparator());
stringbuilderVar1.append(""The following files have NOT been resolved:"");
stringbuilderVar1.append(System.lineSeparator());
Set<Artifact> set<artifact>Var5 = set<artifact>Literal4;
set<artifact>Var5.addAll(results.getUnResolvedDependencies());
stringbuilderVar1.append(buildArtifactListOutput(set<artifact>Var5, outputAbsoluteArtifactFilename, theOutputScope, theSort));
}
stringbuilderVar1.append(System.lineSeparator());
return stringbuilderVar1.toString();
}",0
"protected void unpack(Artifact artifact, String type, File location, String includes, String excludes, String encoding, FileMapper[] fileMappers) throws MojoExecutionException {
File fileVar1 = fileLiteral2;
try {
logUnpack(fileVar1, location, includes, excludes);
location.mkdirs();
if (!location.exists()) {
throw new MojoExecutionException(""Location to write unpacked files to could not be created: "" + location);
}
if (fileVar1.isDirectory()) {
// usual case is a future jar packaging, but there are special cases: classifier and other packaging
throw new MojoExecutionException(""Artifact has not been packaged yet. When used on reactor artifact, "" + ""unpack should be executed after packaging: see MDEP-98."");
}
UnArchiver unarchiverVar3;
try {
unarchiverVar3 = archiverManager.getUnArchiver(type);
getLog().debug(""Found unArchiver by type: "" + unarchiverVar3);
} catch (NoSuchArchiverException e) {
unarchiverVar3 = archiverManager.getUnArchiver(fileVar1);
getLog().debug(""Found unArchiver by extension: "" + unarchiverVar3);
}
if (encoding != null && unarchiverVar3 instanceof ZipUnArchiver) {
((ZipUnArchiver) unarchiverVar3).setEncoding(encoding);
getLog().info(""Unpacks '"" + type + ""' with encoding '"" + encoding + ""'."");
}
unarchiverVar3.setIgnorePermissions(ignorePermissions);
unarchiverVar3.setSourceFile(fileVar1);
unarchiverVar3.setDestDirectory(location);
if (StringUtils.isNotEmpty(excludes) || StringUtils.isNotEmpty(includes)) {
IncludeExcludeFileSelector[] includeexcludefileselectorArrayVar4 = includeexcludefileselectorArrayLiteral5;
if (StringUtils.isNotEmpty(excludes)) {
includeexcludefileselectorArrayVar4[0].setExcludes(excludes.split("",""));
}
if (StringUtils.isNotEmpty(includes)) {
includeexcludefileselectorArrayVar4[0].setIncludes(includes.split("",""));
}
unarchiverVar3.setFileSelectors(includeexcludefileselectorArrayVar4);
}
if (this.silent) {
silenceUnarchiver(unarchiverVar3);
}
unarchiverVar3.setFileMappers(fileMappers);
unarchiverVar3.extract();
} catch (NoSuchArchiverException e) {
throw new MojoExecutionException(""Unknown archiver type"", e);
} catch (ArchiverException e) {
throw new MojoExecutionException(""Error unpacking file: "" + fileVar1 + "" to: "" + location + System.lineSeparator() + e.toString(), e);
}
}",0
"protected void unpack(Artifact artifact, String type, File location, String includes, String excludes, String encoding, FileMapper[] fileMappers) throws MojoExecutionException {
File fileVar1 = fileLiteral2;
try {
logUnpack(fileVar1, location, includes, excludes);
location.mkdirs();
if (!location.exists()) {
throw new MojoExecutionException(""Location to write unpacked files to could not be created: "" + location);
}
if (fileVar1.isDirectory()) {
// usual case is a future jar packaging, but there are special cases: classifier and other packaging
throw new MojoExecutionException(""Artifact has not been packaged yet. When used on reactor artifact, "" + ""unpack should be executed after packaging: see MDEP-98."");
}
UnArchiver unarchiverVar3;
try {
unarchiverVar3 = archiverManager.getUnArchiver(type);
getLog().debug(""Found unArchiver by type: "" + unarchiverVar3);
} catch (NoSuchArchiverException e) {
unarchiverVar3 = archiverManager.getUnArchiver(fileVar1);
getLog().debug(""Found unArchiver by extension: "" + unarchiverVar3);
}
if (encoding != null && unarchiverVar3 instanceof ZipUnArchiver) {
((ZipUnArchiver) unarchiverVar3).setEncoding(encoding);
getLog().info(""Unpacks '"" + type + ""' with encoding '"" + encoding + ""'."");
}
unarchiverVar3.setIgnorePermissions(ignorePermissions);
unarchiverVar3.setSourceFile(fileVar1);
unarchiverVar3.setDestDirectory(location);
if (StringUtils.isNotEmpty(excludes) || StringUtils.isNotEmpty(includes)) {
IncludeExcludeFileSelector[] includeexcludefileselectorArrayVar4 = includeexcludefileselectorArrayLiteral5;
if (StringUtils.isNotEmpty(excludes)) {
includeexcludefileselectorArrayVar4[0].setExcludes(excludes.split("",""));
}
if (StringUtils.isNotEmpty(includes)) {
includeexcludefileselectorArrayVar4[0].setIncludes(includes.split("",""));
}
unarchiverVar3.setFileSelectors(includeexcludefileselectorArrayVar4);
}
if (this.silent) {
silenceUnarchiver(unarchiverVar3);
}
unarchiverVar3.setFileMappers(fileMappers);
unarchiverVar3.extract();
} catch (NoSuchArchiverException e) {
throw new MojoExecutionException(""Unknown archiver type"", e);
} catch (ArchiverException e) {
throw new MojoExecutionException(""Error unpacking file: "" + fileVar1 + "" to: "" + location + System.lineSeparator() + e.toString(), e);
}
}",0
"public FileMapper[] getFileMappers() {
return this.fileMappers;
}",0
"public void setFileMappers(FileMapper[] fileMappers) {
this.fileMappers = fileMappers;
}",0
"public FileMapper[] getFileMappers() {
return this.fileMappers;
}",0
"@Override
protected void doExecute() throws MojoExecutionException {
try {
final Set<Artifact> set<artifact>Var1 = set<artifact>Literal2;
StringBuilder stringbuilderVar3 = stringbuilderLiteral4;
stringbuilderVar3.append(System.lineSeparator());
stringbuilderVar3.append(""The following plugins have been resolved:"");
stringbuilderVar3.append(System.lineSeparator());
if (set<artifact>Var1 == null || set<artifact>Var1.isEmpty()) {
stringbuilderVar3.append(""   none"");
stringbuilderVar3.append(System.lineSeparator());
} else {
for (Artifact artifactVar5 : set<artifact>Var1) {
String stringVar6 = stringLiteral7;
if (outputAbsoluteArtifactFilename) {
try {
stringVar6 = artifactVar5.getFile().getAbsoluteFile().getPath();
} catch (NullPointerException e) {
stringVar6 = null;
}
}
String stringVar8 = stringLiteral9;
stringbuilderVar3.append(""   "").append(stringVar8).append(outputAbsoluteArtifactFilename ? "":"" + stringVar6 : """").append(System.lineSeparator());
if (!excludeTransitive) {
DefaultDependableCoordinate defaultdependablecoordinateVar10 = defaultdependablecoordinateLiteral11;
defaultdependablecoordinateVar10.setGroupId(artifactVar5.getGroupId());
defaultdependablecoordinateVar10.setArtifactId(artifactVar5.getArtifactId());
defaultdependablecoordinateVar10.setVersion(artifactVar5.getVersion());
for (final Artifact artifactVar12 : resolveArtifactDependencies(defaultdependablecoordinateVar10)) {
stringVar6 = null;
if (outputAbsoluteArtifactFilename) {
try {
stringVar6 = artifactVar12.getFile().getAbsoluteFile().getPath();
} catch (NullPointerException e) {
stringVar6 = null;
}
}
stringVar8 = artifactVar12.toString();
stringbuilderVar3.append(""      "").append(stringVar8).append(outputAbsoluteArtifactFilename ? "":"" + stringVar6 : """").append(System.lineSeparator());
}
}
}
stringbuilderVar3.append(System.lineSeparator());
String stringVar13 = stringLiteral14;
if (outputFile == null) {
DependencyUtil.log(stringVar13, getLog());
} else {
String stringVar15 = stringLiteral16;
DependencyUtil.write(stringVar13, outputFile, appendOutput, stringVar15);
}
}
} catch (IOException | ArtifactFilterException | ArtifactResolverException | DependencyResolverException e) {
throw new MojoExecutionException(e.getMessage(), e);
}
}",0
"protected Set resolveArtifactDependencies(Artifact artifact) throws ArtifactResolutionException, ArtifactNotFoundException, ProjectBuildingException, InvalidDependencyVersionException {
Artifact artifactVar1 = artifactLiteral2;
MavenProject mavenprojectVar3 = mavenprojectLiteral4;
return resolveDependencyArtifacts(mavenprojectVar3);
}",0
"protected void attachFile(String cpString) throws MojoExecutionException {
File fileVar1 = fileLiteral2;
storeClasspathFile(cpString, fileVar1);
projectHelper.attachArtifact(project, fileVar1, ""classpath"");
}",0
"private void refreshDependenciesForProject(MavenProject project, List exclusionPatterns) throws ArtifactResolutionException, MojoFailureException {
Map mapVar1 = mapLiteral2;
if (mapVar1.isEmpty()) {
getLog().info(""Nothing to do for project: "" + project.getId());
return;
}
if (!exclusionPatterns.isEmpty()) {
for (Iterator iteratorVar22 = iteratorLiteral23; iteratorVar3.hasNext(); ) {
String stringVar5 = stringLiteral6;
verbose(""Excluding: "" + stringVar5 + "" from refresh operation for project: "" + project.getId());
mapVar1.remove(stringVar5);
}
}
verbose(""Processing dependencies for project: "" + project.getId());
List listVar7 = listLiteral8;
for (Iterator iteratorVar22 = iteratorLiteral24; iteratorVar3.hasNext(); ) {
Map.Entry map.entryVar10 = map.entryLiteral11;
Artifact artifactVar12 = artifactLiteral13;
verbose(""Processing artifact: "" + artifactVar12.getId());
File fileVar14 = fileLiteral15;
verbose(""Deleting: "" + fileVar14);
if (fileVar14.isDirectory()) {
try {
FileUtils.deleteDirectory(fileVar14);
} catch (IOException e) {
throw new MojoFailureException(this, ""Cannot delete dependency from the local repository: "" + artifactVar12.getId(), ""Failed to delete: "" + fileVar14);
}
} else {
fileVar14.delete();
}
if (reResolve) {
verbose(""Re-resolving."");
artifactVar12.setResolved(false);
try {
resolver.resolveAlways(artifactVar12, project.getRemoteArtifactRepositories(), localRepository);
} catch (ArtifactResolutionException e) {
getLog().debug(e.getMessage());
listVar7.add(artifactVar12);
} catch (ArtifactNotFoundException e) {
getLog().debug(e.getMessage());
listVar7.add(artifactVar12);
}
}
}
if (listVar7.size() > 0) {
String stringVar16 = stringLiteral17;
for (Iterator iteratorVar25 = iteratorLiteral26; iteratorVar18.hasNext(); ) {
Artifact artifactVar20 = artifactLiteral21;
stringVar16 += ""  "" + artifactVar20.getId() + ""\n"";
}
stringVar16 += ""\nfor the artifact:"";
throw new ArtifactResolutionException(stringVar16, project.getArtifact(), project.getRemoteArtifactRepositories());
}
}",0
"public synchronized static void write(String string, File file, Log log) throws IOException {
file.getParentFile().mkdirs();
FileWriter filewriterVar1 = filewriterLiteral2;
try {
filewriterVar1 = new FileWriter(file);
filewriterVar1.write(string);
} finally {
if (filewriterVar1 != null) {
try {
filewriterVar1.close();
} catch (IOException exception) {
log.error(""Cannot close file"", exception);
}
}
}
}",0
"public void setMarker() throws MojoExecutionException {
File fileVar1 = fileLiteral2;
try {
fileVar1.getParentFile().mkdirs();
} catch (NullPointerException e) {
}
try {
fileVar1.createNewFile();
} catch (IOException e) {
throw new MojoExecutionException(""Unable to create Marker: "" + fileVar1.getAbsolutePath(), e);
}
}",0
"public Set translate(Set artifacts, Log log) {
Set setVar1 = setLiteral2;
log.debug(""Translating Artifacts using Classifier: "" + this.classifier + "" and Type: "" + this.type);
setVar1 = new HashSet();
for (Iterator iteratorVar12 = iteratorLiteral13; iteratorVar3.hasNext(); ) {
Artifact artifactVar5 = artifactLiteral6;
String stringVar7 = stringLiteral8;
if (StringUtils.isNotEmpty(this.type)) {
stringVar7 = this.type;
} else {
stringVar7 = artifactVar5.getType();
}
String stringVar9 = stringLiteral8;
if (StringUtils.isNotEmpty(this.classifier)) {
stringVar9 = this.classifier;
} else {
stringVar9 = artifactVar5.getClassifier();
}
Artifact artifactVar10 = artifactLiteral11;
artifactVar10.setScope(artifactVar5.getScope());
setVar1.add(artifactVar10);
}
return setVar1;
}",0
"private void silenceUnarchiver(UnArchiver unArchiver) {
try {
Field fieldVar1 = fieldLiteral2;
fieldVar1.setAccessible(true);
fieldVar1.set(unArchiver, this.getLog());
} catch (Exception e) {
}
}",0
"protected void unpack(Artifact artifact, String type, File location, String includes, String excludes, String encoding, FileMapper[] fileMappers) throws MojoExecutionException {
File fileVar1 = fileLiteral2;
try {
logUnpack(fileVar1, location, includes, excludes);
location.mkdirs();
if (!location.exists()) {
throw new MojoExecutionException(""Location to write unpacked files to could not be created: "" + location);
}
if (fileVar1.isDirectory()) {
// usual case is a future jar packaging, but there are special cases: classifier and other packaging
throw new MojoExecutionException(""Artifact has not been packaged yet. When used on reactor artifact, "" + ""unpack should be executed after packaging: see MDEP-98."");
}
UnArchiver unarchiverVar3;
try {
unarchiverVar3 = archiverManager.getUnArchiver(type);
getLog().debug(""Found unArchiver by type: "" + unarchiverVar3);
} catch (NoSuchArchiverException e) {
unarchiverVar3 = archiverManager.getUnArchiver(fileVar1);
getLog().debug(""Found unArchiver by extension: "" + unarchiverVar3);
}
if (encoding != null && unarchiverVar3 instanceof ZipUnArchiver) {
((ZipUnArchiver) unarchiverVar3).setEncoding(encoding);
getLog().info(""Unpacks '"" + type + ""' with encoding '"" + encoding + ""'."");
}
unarchiverVar3.setIgnorePermissions(ignorePermissions);
unarchiverVar3.setSourceFile(fileVar1);
unarchiverVar3.setDestDirectory(location);
if (StringUtils.isNotEmpty(excludes) || StringUtils.isNotEmpty(includes)) {
IncludeExcludeFileSelector[] includeexcludefileselectorArrayVar4 = includeexcludefileselectorArrayLiteral5;
if (StringUtils.isNotEmpty(excludes)) {
includeexcludefileselectorArrayVar4[0].setExcludes(excludes.split("",""));
}
if (StringUtils.isNotEmpty(includes)) {
includeexcludefileselectorArrayVar4[0].setIncludes(includes.split("",""));
}
unarchiverVar3.setFileSelectors(includeexcludefileselectorArrayVar4);
}
if (this.silent) {
silenceUnarchiver(unarchiverVar3);
}
unarchiverVar3.setFileMappers(fileMappers);
unarchiverVar3.extract();
} catch (NoSuchArchiverException e) {
throw new MojoExecutionException(""Unknown archiver type"", e);
} catch (ArchiverException e) {
throw new MojoExecutionException(""Error unpacking file: "" + fileVar1 + "" to: "" + location, e);
}
}",0
"@Parameter
protected boolean booleanVar1 = booleanLiteral2;",0
"private StringBuilder buildArtifactListOutput(Set<Artifact> artifacts, boolean outputAbsoluteArtifactFilename, boolean theOutputScope, boolean theSort) {
StringBuilder stringbuilderVar1 = stringbuilderLiteral2;
List<String> list<string>Var3 = list<string>Literal4;
for (Artifact artifactVar5 : artifacts) {
MessageBuilder messagebuilderVar6 = messagebuilderLiteral7;
messagebuilderVar6.a(""   "");
if (theOutputScope) {
messagebuilderVar6.a(artifactVar5.toString());
} else {
messagebuilderVar6.a(artifactVar5.getId());
}
if (outputAbsoluteArtifactFilename) {
try {
String stringVar8 = stringLiteral9;
messagebuilderVar6.a(':').a(stringVar8);
} catch (NullPointerException e) {
}
}
if (theOutputScope && artifactVar5.isOptional()) {
messagebuilderVar6.a("" (optional)"");
}
if (artifactVar5.getFile() != null) {
ModuleDescriptor moduledescriptorVar10 = moduledescriptorLiteral11;
if (moduledescriptorVar10 != null) {
messagebuilderVar6.project("" -- module "" + moduledescriptorVar10.name);
if (moduledescriptorVar10.automatic) {
if (""MANIFEST"".equals(moduledescriptorVar10.moduleNameSource)) {
messagebuilderVar6.strong("" [auto]"");
} else {
messagebuilderVar6.warning("" (auto)"");
}
}
}
}
list<string>Var3.add(messagebuilderVar6 + System.lineSeparator());
}
if (theSort) {
Collections.sort(list<string>Var3);
}
for (String stringVar12 : list<string>Var3) {
stringbuilderVar1.append(stringVar12);
}
return stringbuilderVar1;
}",0
"protected String readClasspathFile() throws IOException {
if (outputFile == null) {
throw new IllegalArgumentException(""The outputFile parameter cannot be null if the file is intended to be read."");
}
if (!outputFile.isFile()) {
return null;
}
StringBuilder stringbuilderVar1 = stringbuilderLiteral2;
BufferedReader bufferedreaderVar3 = bufferedreaderLiteral4;
try {
bufferedreaderVar3 = new BufferedReader(new FileReader(outputFile));
String stringVar5;
while ((stringVar5 = bufferedreaderVar3.readLine()) != null) {
stringbuilderVar1.append(stringVar5);
}
return stringbuilderVar1.toString();
} finally {
IOUtil.close(bufferedreaderVar3);
}
}",0
"public static boolean containsVersion(VersionRange allowedRange, ArtifactVersion theVersion) {
ArtifactVersion artifactversionVar1 = artifactversionLiteral2;
if (artifactversionVar1 == null) {
@SuppressWarnings(""unchecked"")
List<Restriction> list<restriction>Var3 = list<restriction>Literal4;
for (Restriction restrictionVar5 : list<restriction>Var3) {
if (restrictionVar5.containsVersion(theVersion)) {
return true;
}
}
}
return artifactversionVar1.compareTo(theVersion) <= 0;
}",0
"private void silenceUnarchiver(UnArchiver unArchiver) {
try {
Field fieldVar1 = fieldLiteral2;
fieldVar1.setAccessible(true);
fieldVar1.set(unArchiver, this.getLog());
} catch (Exception e) {
}
}",0
"@Parameter
protected boolean booleanVar1 = booleanLiteral2;",0
"public String getOutput(boolean outputAbsoluteArtifactFilename, boolean theOutputScope, boolean theSort) {
StringBuilder stringbuilderVar1 = stringbuilderLiteral2;
stringbuilderVar1.append(System.lineSeparator());
stringbuilderVar1.append(""The following files have been resolved:"");
stringbuilderVar1.append(System.lineSeparator());
if (results.getResolvedDependencies() == null || results.getResolvedDependencies().isEmpty()) {
stringbuilderVar1.append(""   none"");
stringbuilderVar1.append(System.lineSeparator());
} else {
stringbuilderVar1.append(buildArtifactListOutput(results.getResolvedDependencies(), outputAbsoluteArtifactFilename, theOutputScope, theSort));
}
if (results.getSkippedDependencies() != null && !results.getSkippedDependencies().isEmpty()) {
stringbuilderVar1.append(System.lineSeparator());
stringbuilderVar1.append(""The following files were skipped:"");
stringbuilderVar1.append(System.lineSeparator());
Set<Artifact> set<artifact>Var3 = set<artifact>Literal4;
set<artifact>Var3.addAll(results.getSkippedDependencies());
stringbuilderVar1.append(buildArtifactListOutput(set<artifact>Var3, outputAbsoluteArtifactFilename, theOutputScope, theSort));
}
if (results.getUnResolvedDependencies() != null && !results.getUnResolvedDependencies().isEmpty()) {
stringbuilderVar1.append(System.lineSeparator());
stringbuilderVar1.append(""The following files have NOT been resolved:"");
stringbuilderVar1.append(System.lineSeparator());
Set<Artifact> set<artifact>Var5 = set<artifact>Literal4;
set<artifact>Var5.addAll(results.getUnResolvedDependencies());
stringbuilderVar1.append(buildArtifactListOutput(set<artifact>Var5, outputAbsoluteArtifactFilename, theOutputScope, theSort));
}
stringbuilderVar1.append(System.lineSeparator());
return stringbuilderVar1.toString();
}",0
"private void refreshDependenciesForProject(MavenProject project, List exclusionPatterns) throws ArtifactResolutionException, MojoFailureException {
Map mapVar1 = mapLiteral2;
if (mapVar1.isEmpty()) {
getLog().info(""Nothing to do for project: "" + project.getId());
return;
}
if (!exclusionPatterns.isEmpty()) {
for (Iterator iteratorVar22 = iteratorLiteral23; iteratorVar3.hasNext(); ) {
String stringVar5 = stringLiteral6;
verbose(""Excluding: "" + stringVar5 + "" from refresh operation for project: "" + project.getId());
mapVar1.remove(stringVar5);
}
}
verbose(""Processing dependencies for project: "" + project.getId());
List listVar7 = listLiteral8;
for (Iterator iteratorVar22 = iteratorLiteral24; iteratorVar3.hasNext(); ) {
Map.Entry map.entryVar10 = map.entryLiteral11;
Artifact artifactVar12 = artifactLiteral13;
verbose(""Processing artifact: "" + artifactVar12.getId());
File fileVar14 = fileLiteral15;
verbose(""Deleting: "" + fileVar14);
if (fileVar14.isDirectory()) {
try {
FileUtils.deleteDirectory(fileVar14);
} catch (IOException e) {
throw new MojoFailureException(this, ""Cannot delete dependency from the local repository: "" + artifactVar12.getId(), ""Failed to delete: "" + fileVar14);
}
} else {
fileVar14.delete();
}
if (reResolve) {
verbose(""Re-resolving."");
artifactVar12.setResolved(false);
try {
resolver.resolveAlways(artifactVar12, project.getRemoteArtifactRepositories(), localRepository);
} catch (ArtifactResolutionException e) {
getLog().debug(e.getMessage());
listVar7.add(artifactVar12);
} catch (ArtifactNotFoundException e) {
getLog().debug(e.getMessage());
listVar7.add(artifactVar12);
}
}
}
if (listVar7.size() > 0) {
String stringVar16 = stringLiteral17;
for (Iterator iteratorVar25 = iteratorLiteral26; iteratorVar18.hasNext(); ) {
Artifact artifactVar20 = artifactLiteral21;
stringVar16 += ""  "" + artifactVar20.getId() + ""\n"";
}
stringVar16 += ""\nfor the artifact:"";
throw new ArtifactResolutionException(stringVar16, project.getArtifact(), project.getRemoteArtifactRepositories());
}
}",0
"private File findDeleteTarget(Artifact artifact) {
File fileVar1 = fileLiteral2;
if (GROUP_ID_FUZZINESS.equals(resolutionFuzziness)) {
fileVar1 = fileVar1.getParentFile().getParentFile();
fileVar1 = fileVar1.getParentFile();
String[] stringArrayVar3 = stringArrayLiteral4;
int intVar5 = intLiteral6;
File fileVar7 = fileLiteral8;
int intVar9 = intLiteral10;
while (intVar9++ < intVar5) {
if (fileVar7.list().length < 2) {
fileVar1 = fileVar7;
fileVar7 = fileVar1.getParentFile();
} else {
break;
}
}
} else if (ARTIFACT_ID_FUZZINESS.equals(resolutionFuzziness)) {
fileVar1 = fileVar1.getParentFile().getParentFile();
} else if (VERSION_FUZZINESS.equals(resolutionFuzziness)) {
fileVar1 = fileVar1.getParentFile();
}
return fileVar1;
}",0
"protected void unpack(Artifact artifact, String type, File location, String includes, String excludes, String encoding, FileMapper[] fileMappers) throws MojoExecutionException {
File fileVar1 = fileLiteral2;
try {
logUnpack(fileVar1, location, includes, excludes);
location.mkdirs();
if (!location.exists()) {
throw new MojoExecutionException(""Location to write unpacked files to could not be created: "" + location);
}
if (fileVar1.isDirectory()) {
// usual case is a future jar packaging, but there are special cases: classifier and other packaging
throw new MojoExecutionException(""Artifact has not been packaged yet. When used on reactor artifact, "" + ""unpack should be executed after packaging: see MDEP-98."");
}
UnArchiver unarchiverVar3;
try {
unarchiverVar3 = archiverManager.getUnArchiver(type);
getLog().debug(""Found unArchiver by type: "" + unarchiverVar3);
} catch (NoSuchArchiverException e) {
unarchiverVar3 = archiverManager.getUnArchiver(fileVar1);
getLog().debug(""Found unArchiver by extension: "" + unarchiverVar3);
}
if (encoding != null && unarchiverVar3 instanceof ZipUnArchiver) {
((ZipUnArchiver) unarchiverVar3).setEncoding(encoding);
getLog().info(""Unpacks '"" + type + ""' with encoding '"" + encoding + ""'."");
}
unarchiverVar3.setIgnorePermissions(ignorePermissions);
unarchiverVar3.setSourceFile(fileVar1);
unarchiverVar3.setDestDirectory(location);
if (StringUtils.isNotEmpty(excludes) || StringUtils.isNotEmpty(includes)) {
IncludeExcludeFileSelector[] includeexcludefileselectorArrayVar4 = includeexcludefileselectorArrayLiteral5;
if (StringUtils.isNotEmpty(excludes)) {
includeexcludefileselectorArrayVar4[0].setExcludes(excludes.split("",""));
}
if (StringUtils.isNotEmpty(includes)) {
includeexcludefileselectorArrayVar4[0].setIncludes(includes.split("",""));
}
unarchiverVar3.setFileSelectors(includeexcludefileselectorArrayVar4);
}
if (this.silent) {
silenceUnarchiver(unarchiverVar3);
}
unarchiverVar3.setFileMappers(fileMappers);
unarchiverVar3.extract();
} catch (NoSuchArchiverException e) {
throw new MojoExecutionException(""Unknown archiver type"", e);
} catch (ArchiverException e) {
throw new MojoExecutionException(""Error unpacking file: "" + fileVar1 + "" to: "" + location + System.lineSeparator() + e.toString(), e);
}
}",0
"@Parameter(property = ""packaging"", defaultValue = ""jar"")
private String stringVar1 = stringLiteral2;",0
"@Parameter
protected boolean booleanVar1 = booleanLiteral2;",0
"protected ProjectDependencyAnalyzer createProjectDependencyAnalyzer() throws MojoExecutionException {
final String stringVar1 = stringLiteral2;
final String stringVar3 = stringLiteral4;
try {
final PlexusContainer plexuscontainerVar5 = plexuscontainerLiteral6;
return (ProjectDependencyAnalyzer) plexuscontainerVar5.lookup(stringVar1, stringVar3);
} catch (Exception exception) {
throw new MojoExecutionException(""Failed to instantiate ProjectDependencyAnalyser with role "" + stringVar1 + "" / role-hint "" + stringVar3, exception);
}
}",0
"@Parameter
protected boolean booleanVar1 = booleanLiteral2;",0
"protected void doExecute() throws MojoExecutionException {
if (cpFile != null) {
getLog().warn(""The parameter cpFile is deprecated. Use outputFile instead."");
this.outputFile = cpFile;
}
isFileSepSet = StringUtils.isNotEmpty(fileSeparator);
isPathSepSet = StringUtils.isNotEmpty(pathSeparator);
if (attach && StringUtils.isEmpty(localRepoProperty)) {
localRepoProperty = ""${M2_REPO}"";
}
Set<Artifact> set<artifact>Var1 = set<artifact>Literal2;
if (set<artifact>Var1 == null || set<artifact>Var1.isEmpty()) {
getLog().info(""No dependencies found."");
}
List<Artifact> list<artifact>Var3 = list<artifact>Literal4;
StringBuilder stringbuilderVar5 = stringbuilderLiteral6;
Iterator<Artifact> iterator<artifact>Var7 = iterator<artifact>Literal8;
if (iterator<artifact>Var7.hasNext()) {
appendArtifactPath(iterator<artifact>Var7.next(), stringbuilderVar5);
while (iterator<artifact>Var7.hasNext()) {
stringbuilderVar5.append(isPathSepSet ? this.pathSeparator : File.pathSeparator);
appendArtifactPath(iterator<artifact>Var7.next(), stringbuilderVar5);
}
}
String stringVar9 = stringLiteral10;
if (isFileSepSet) {
final String stringVar11 = stringLiteral12;
final String stringVar13 = stringLiteral14;
stringVar9 = stringVar9.replaceAll(stringVar11, stringVar13);
}
if (outputFilterFile) {
stringVar9 = ""classpath="" + stringVar9;
}
if (outputProperty != null) {
project.getProperties().setProperty(outputProperty, stringVar9);
if (getLog().isDebugEnabled()) {
getLog().debug(outputProperty + "" = "" + stringVar9);
}
} else if (outputFile == null) {
getLog().info(""Dependencies classpath:\n"" + stringVar9);
} else {
if (regenerateFile || !isUpdToDate(stringVar9)) {
storeClasspathFile(stringVar9, outputFile);
} else {
this.getLog().info(""Skipped writing classpath file '"" + outputFile + ""'.  No changes found."");
}
}
if (attach) {
attachFile(stringVar9);
}
}",0
"protected void doExecute() throws MojoExecutionException {
Writer writerVar1 = writerLiteral2;
try {
final Set<Artifact> set<artifact>Var3 = set<artifact>Literal4;
if (this.outputFile != null) {
outputFile.getParentFile().mkdirs();
writerVar1 = new FileWriter(outputFile);
}
for (final Artifact artifactVar5 : set<artifact>Var3) {
String stringVar6 = stringLiteral7;
if (!silent) {
this.getLog().info(stringVar6);
}
if (writerVar1 != null) {
writerVar1.write(stringVar6);
writerVar1.write(""\n"");
}
if (!excludeTransitive) {
for (final Artifact artifactVar8 : resolveArtifactDependencies(artifactVar5)) {
stringVar6 = ""    Plugin Dependency Resolved: "" + DependencyUtil.getFormattedFileName(artifactVar8, false);
if (!silent) {
this.getLog().info(stringVar6);
}
if (writerVar1 != null) {
writerVar1.write(stringVar6);
writerVar1.write(""\n"");
}
}
}
}
} catch (final IOException e) {
throw new MojoExecutionException(""Nested:"", e);
} catch (final ArtifactResolutionException e) {
throw new MojoExecutionException(""Nested:"", e);
} catch (final ArtifactNotFoundException e) {
throw new MojoExecutionException(""Nested:"", e);
} catch (final ProjectBuildingException e) {
throw new MojoExecutionException(""Nested:"", e);
} catch (final InvalidDependencyVersionException e) {
throw new MojoExecutionException(""Nested:"", e);
} catch (final ArtifactFilterException e) {
throw new MojoExecutionException(""Nested:"", e);
} finally {
IOUtil.close(writerVar1);
}
}",0
"public void setMarker() throws MojoExecutionException {
File fileVar1 = fileLiteral2;
File fileVar3 = fileLiteral4;
try {
fileVar1.getParentFile().mkdirs();
} catch (NullPointerException e) {
}
try {
fileVar1.createNewFile();
if (fileVar3.exists()) {
fileVar3.delete();
}
} catch (IOException e) {
throw new MojoExecutionException(""Unable to create Marker: "" + fileVar1.getAbsolutePath(), e);
}
}",0
protected List listVar1;,0
private List listVar1;,0
"public static void unpackFile(Artifact artifact, File unpackDirectory, File markersDirectory, ArchiverManager archiverManager, Log log, boolean overWrite) throws MojoExecutionException {
markersDirectory.mkdirs();
File fileVar1 = fileLiteral2;
if (!fileVar1.exists() || overWrite) {
try {
unpackDirectory.mkdirs();
unpack(artifact.getFile(), unpackDirectory, archiverManager, log);
fileVar1.getParentFile().mkdirs();
fileVar1.createNewFile();
} catch (IOException e) {
throw new MojoExecutionException(""Error creating marker file: "" + fileVar1);
}
} else {
log.info(artifact.getFile().getName() + "" already unpacked."");
}
}",0
"private boolean checkDependencyManagement() throws MojoExecutionException {
boolean booleanVar1 = booleanLiteral2;
getLog().info(""Found Resolved Dependency/DependencyManagement mismatches:"");
List<Dependency> list<dependency>Var3 = list<dependency>Literal4;
DependencyManagement dependencymanagementVar5 = dependencymanagementLiteral6;
if (dependencymanagementVar5 != null) {
list<dependency>Var3 = dependencymanagementVar5.getDependencies();
}
if (list<dependency>Var3 != null && !list<dependency>Var3.isEmpty()) {
Map<String, Dependency> map<string,dependency>Var7 = map<string,dependency>Literal8;
Map<String, Exclusion> map<string,exclusion>Var9 = map<string,dependency>Literal8;
for (Dependency dependencyVar10 : list<dependency>Var3) {
map<string,dependency>Var7.put(dependencyVar10.getManagementKey(), dependencyVar10);
map<string,exclusion>Var9.putAll(addExclusions(dependencyVar10.getExclusions()));
}
Set<Artifact> set<artifact>Var11 = set<artifact>Literal12;
if (this.ignoreDirect) {
getLog().info(""\tIgnoring Direct Dependencies."");
Set<Artifact> set<artifact>Var13 = set<artifact>Literal14;
set<artifact>Var11.removeAll(set<artifact>Var13);
}
List<Artifact> list<artifact>Var15 = list<artifact>Literal16;
for (Artifact artifactVar17 : list<artifact>Var15) {
getLog().info(StringUtils.stripEnd(getArtifactManagementKey(artifactVar17), "":"") + "" was excluded in DepMgt, but version "" + artifactVar17.getVersion() + "" has been found in the dependency tree."");
booleanVar1 = true;
}
Map<Artifact, Dependency> map<artifact,dependency>Var18 = map<artifact,dependency>Literal19;
for (Map.Entry<Artifact, Dependency> map.entry<artifact,dependency>Var20 : map<artifact,dependency>Var18.entrySet()) {
logMismatch(map.entry<artifact,dependency>Var20.getKey(), map.entry<artifact,dependency>Var20.getValue());
booleanVar1 = true;
}
if (!booleanVar1) {
getLog().info(""\tNone"");
}
} else {
getLog().info(""\tNothing in DepMgt."");
}
return booleanVar1;
}",0
"protected List<ArtifactItem> getProcessedArtifactItems(ProcessArtifactItemsRequest processArtifactItemsRequest) throws MojoExecutionException {
boolean booleanVar1 = booleanLiteral2, booleanVar3 = booleanLiteral4, booleanVar5 = booleanLiteral6;
boolean booleanVar7 = booleanLiteral8;
if (artifactItems == null || artifactItems.size() < 1) {
throw new MojoExecutionException(""There are no artifactItems configured."");
}
for (ArtifactItem artifactitemVar9 : artifactItems) {
this.getLog().info(""Configured Artifact: "" + artifactitemVar9.toString());
if (artifactitemVar9.getOutputDirectory() == null) {
artifactitemVar9.setOutputDirectory(this.outputDirectory);
}
artifactitemVar9.getOutputDirectory().mkdirs();
if (StringUtils.isEmpty(artifactitemVar9.getVersion())) {
fillMissingArtifactVersion(artifactitemVar9);
}
artifactitemVar9.setArtifact(this.getArtifact(artifactitemVar9));
if (StringUtils.isEmpty(artifactitemVar9.getDestFileName())) {
artifactitemVar9.setDestFileName(DependencyUtil.getFormattedFileName(artifactitemVar9.getArtifact(), booleanVar1, booleanVar3, booleanVar5, booleanVar7));
}
try {
artifactitemVar9.setNeedsProcessing(checkIfProcessingNeeded(artifactitemVar9));
} catch (ArtifactFilterException e) {
throw new MojoExecutionException(e.getMessage(), e);
}
}
return artifactItems;
}",0
"public void setFileMappers(FileMapper[] fileMappers) {
this.fileMappers = fileMappers;
}",0
"public String getOutput(boolean outputAbsoluteArtifactFilename, boolean theOutputScope, boolean theSort) {
StringBuilder stringbuilderVar1 = stringbuilderLiteral2;
stringbuilderVar1.append(System.lineSeparator());
stringbuilderVar1.append(""The following files have been resolved:"");
stringbuilderVar1.append(System.lineSeparator());
if (results.getResolvedDependencies() == null || results.getResolvedDependencies().isEmpty()) {
stringbuilderVar1.append(""   none"");
stringbuilderVar1.append(System.lineSeparator());
} else {
stringbuilderVar1.append(buildArtifactListOutput(results.getResolvedDependencies(), outputAbsoluteArtifactFilename, theOutputScope, theSort));
}
if (results.getSkippedDependencies() != null && !results.getSkippedDependencies().isEmpty()) {
stringbuilderVar1.append(System.lineSeparator());
stringbuilderVar1.append(""The following files were skipped:"");
stringbuilderVar1.append(System.lineSeparator());
Set<Artifact> set<artifact>Var3 = set<artifact>Literal4;
set<artifact>Var3.addAll(results.getSkippedDependencies());
stringbuilderVar1.append(buildArtifactListOutput(set<artifact>Var3, outputAbsoluteArtifactFilename, theOutputScope, theSort));
}
if (results.getUnResolvedDependencies() != null && !results.getUnResolvedDependencies().isEmpty()) {
stringbuilderVar1.append(System.lineSeparator());
stringbuilderVar1.append(""The following files have NOT been resolved:"");
stringbuilderVar1.append(System.lineSeparator());
Set<Artifact> set<artifact>Var5 = set<artifact>Literal4;
set<artifact>Var5.addAll(results.getUnResolvedDependencies());
stringbuilderVar1.append(buildArtifactListOutput(set<artifact>Var5, outputAbsoluteArtifactFilename, theOutputScope, theSort));
}
stringbuilderVar1.append(System.lineSeparator());
return stringbuilderVar1.toString();
}",0
"private StringBuilder buildArtifactListOutput(Set<Artifact> artifacts, boolean outputAbsoluteArtifactFilename, boolean theOutputScope, boolean theSort) {
StringBuilder stringbuilderVar1 = stringbuilderLiteral2;
List<String> list<string>Var3 = list<string>Literal4;
for (Artifact artifactVar5 : artifacts) {
MessageBuilder messagebuilderVar6 = messagebuilderLiteral7;
messagebuilderVar6.a(""   "");
if (theOutputScope) {
messagebuilderVar6.a(artifactVar5.toString());
} else {
messagebuilderVar6.a(artifactVar5.getId());
}
if (outputAbsoluteArtifactFilename) {
try {
String stringVar8 = stringLiteral9;
messagebuilderVar6.a(':').a(stringVar8);
} catch (NullPointerException e) {
}
}
if (theOutputScope && artifactVar5.isOptional()) {
messagebuilderVar6.a("" (optional)"");
}
if (artifactVar5.getFile() != null) {
ModuleDescriptor moduledescriptorVar10 = moduledescriptorLiteral11;
if (moduledescriptorVar10 != null) {
messagebuilderVar6.project("" -- module "" + moduledescriptorVar10.name);
if (moduledescriptorVar10.automatic) {
if (""MANIFEST"".equals(moduledescriptorVar10.moduleNameSource)) {
messagebuilderVar6.strong("" [auto]"");
} else {
messagebuilderVar6.warning("" (auto)"");
}
}
}
}
list<string>Var3.add(messagebuilderVar6.toString() + System.lineSeparator());
}
if (theSort) {
Collections.sort(list<string>Var3);
}
for (String stringVar12 : list<string>Var3) {
stringbuilderVar1.append(stringVar12);
}
return stringbuilderVar1;
}",0
"@Override
protected void doExecute() throws MojoExecutionException {
try {
final Set<Artifact> set<artifact>Var1 = set<artifact>Literal2;
StringBuilder stringbuilderVar3 = stringbuilderLiteral4;
stringbuilderVar3.append(System.lineSeparator());
stringbuilderVar3.append(""The following plugins have been resolved:"");
stringbuilderVar3.append(System.lineSeparator());
if (set<artifact>Var1 == null || set<artifact>Var1.isEmpty()) {
stringbuilderVar3.append(""   none"");
stringbuilderVar3.append(System.lineSeparator());
} else {
for (Artifact artifactVar5 : set<artifact>Var1) {
String stringVar6 = stringLiteral7;
if (outputAbsoluteArtifactFilename) {
try {
stringVar6 = artifactVar5.getFile().getAbsoluteFile().getPath();
} catch (NullPointerException e) {
stringVar6 = null;
}
}
String stringVar8 = stringLiteral9;
stringbuilderVar3.append(""   "").append(stringVar8).append(outputAbsoluteArtifactFilename ? "":"" + stringVar6 : """").append(System.lineSeparator());
if (!excludeTransitive) {
DefaultDependableCoordinate defaultdependablecoordinateVar10 = defaultdependablecoordinateLiteral11;
defaultdependablecoordinateVar10.setGroupId(artifactVar5.getGroupId());
defaultdependablecoordinateVar10.setArtifactId(artifactVar5.getArtifactId());
defaultdependablecoordinateVar10.setVersion(artifactVar5.getVersion());
for (final Artifact artifactVar12 : resolveArtifactDependencies(defaultdependablecoordinateVar10)) {
stringVar6 = null;
if (outputAbsoluteArtifactFilename) {
try {
stringVar6 = artifactVar12.getFile().getAbsoluteFile().getPath();
} catch (NullPointerException e) {
stringVar6 = null;
}
}
stringVar8 = artifactVar12.toString();
stringbuilderVar3.append(""      "").append(stringVar8).append(outputAbsoluteArtifactFilename ? "":"" + stringVar6 : """").append(System.lineSeparator());
}
}
}
stringbuilderVar3.append(System.lineSeparator());
String stringVar13 = stringLiteral14;
if (outputFile == null) {
DependencyUtil.log(stringVar13, getLog());
} else {
String stringVar15 = stringLiteral16;
DependencyUtil.write(stringVar13, outputFile, appendOutput, stringVar15);
}
}
} catch (IOException | ArtifactFilterException | ArtifactResolverException | DependencyResolverException e) {
throw new MojoExecutionException(e.getMessage(), e);
}
}",0
"private DependencyNode buildTree(DependencyNode parent, org.eclipse.aether.graph.DependencyNode child) {
List<org.apache.maven.model.Exclusion> list<org.apache.maven.model.exclusion>Var1 = list<org.apache.maven.model.exclusion>Literal2;
for (org.eclipse.aether.graph.Exclusion org.eclipse.aether.graph.exclusionVar3 : child.getDependency().getExclusions()) {
list<org.apache.maven.model.exclusion>Var1.add(convertAetherExclusionToMavenExclusion(org.eclipse.aether.graph.exclusionVar3));
}
DefaultDependencyNode defaultdependencynodeVar4 = defaultdependencynodeLiteral5;
defaultdependencynodeVar4.setChildren(new ArrayList<DependencyNode>());
for (org.eclipse.aether.graph.DependencyNode org.eclipse.aether.graph.dependencynodeVar6 : child.getChildren()) {
defaultdependencynodeVar4.getChildren().add(buildTree(defaultdependencynodeVar4, org.eclipse.aether.graph.dependencynodeVar6));
}
return defaultdependencynodeVar4;
}",0
"@Override
public void setMarker() throws MojoExecutionException {
File fileVar1 = fileLiteral2;
try {
fileVar1.getParentFile().mkdirs();
} catch (NullPointerException e) {
}
try {
fileVar1.createNewFile();
} catch (IOException e) {
throw new MojoExecutionException(""Unable to create Marker: "" + fileVar1.getAbsolutePath(), e);
}
try {
long longVar3;
if (this.artifact != null && this.artifact.getFile() != null) {
longVar3 = this.artifact.getFile().lastModified();
} else {
longVar3 = System.currentTimeMillis();
}
if (!fileVar1.setLastModified(longVar3)) {
throw new MojoExecutionException(""Unable to update last modified timestamp on marker file "" + fileVar1.getAbsolutePath());
}
} catch (Exception e) {
throw new MojoExecutionException(""Unable to update Marker timestamp: "" + fileVar1.getAbsolutePath(), e);
}
}",0
"@Override
public void setMarker() throws MojoExecutionException {
File fileVar1 = fileLiteral2;
File fileVar3 = fileLiteral4;
try {
fileVar1.getParentFile().mkdirs();
} catch (NullPointerException e) {
}
try {
fileVar1.createNewFile();
if (fileVar3.exists()) {
fileVar3.delete();
}
} catch (IOException e) {
throw new MojoExecutionException(""Unable to create Marker: "" + fileVar1.getAbsolutePath(), e);
}
}",1
"private DependencyNode buildTree(DependencyNode parent, org.eclipse.aether.graph.DependencyNode child) {
List<org.apache.maven.model.Exclusion> list<org.apache.maven.model.exclusion>Var1 = list<org.apache.maven.model.exclusion>Literal2;
for (org.eclipse.aether.graph.Exclusion org.eclipse.aether.graph.exclusionVar3 : child.getDependency().getExclusions()) {
list<org.apache.maven.model.exclusion>Var1.add(convertAetherExclusionToMavenExclusion(org.eclipse.aether.graph.exclusionVar3));
}
DefaultDependencyNode defaultdependencynodeVar4 = defaultdependencynodeLiteral5;
defaultdependencynodeVar4.setChildren(new ArrayList<>());
for (org.eclipse.aether.graph.DependencyNode org.eclipse.aether.graph.dependencynodeVar6 : child.getChildren()) {
defaultdependencynodeVar4.getChildren().add(buildTree(defaultdependencynodeVar4, org.eclipse.aether.graph.dependencynodeVar6));
}
return defaultdependencynodeVar4;
}",0
"public String[] featureValues(String feature) throws IOException {
if (!initFeatureMap()) {
return null;
}
Set<String> set<string>Var1 = set<string>Literal2;
if (set<string>Var1 != null) {
return set<string>Var1.toArray(new String[set<string>Var1.size()]);
}
return null;
}",0
"public String[] listNames(String pathname) throws IOException {
Socket socketVar1 = socketLiteral2;
if (socketVar1 == null) {
return null;
}
BufferedReader bufferedreaderVar3 = bufferedreaderLiteral4;
ArrayList<String> arraylist<string>Var5 = arraylist<string>Literal6;
String stringVar7;
while ((stringVar7 = bufferedreaderVar3.readLine()) != null) {
arraylist<string>Var5.add(stringVar7);
}
bufferedreaderVar3.close();
socketVar1.close();
if (completePendingCommand()) {
String[] stringArrayVar8 = stringArrayLiteral9;
return arraylist<string>Var5.toArray(stringArrayVar8);
}
return null;
}",0
"public byte[] parseADATReply(String reply) {
if (reply == null) {
return null;
} else {
return Base64.decodeBase64(extractPrefixedData(""ADAT="", reply));
}
}",0
"private boolean parseUnixList(FTPFile file, String entry) {
file = unixFTPEntryParser.parseFTPEntry(entry);
if (file == null) {
return false;
}
return true;
}",0
"public String[] listNewNews(NewGroupsOrNewsQuery query) throws IOException {
if (!NNTPReply.isPositiveCompletion(newnews(query.getNewsgroups(), query.getDate(), query.getTime(), query.isGMT(), query.getDistributions()))) {
return null;
}
Vector<String> vector<string>Var1 = vector<string>Literal2;
BufferedReader bufferedreaderVar3 = bufferedreaderLiteral4;
String stringVar5;
try {
while ((stringVar5 = bufferedreaderVar3.readLine()) != null) {
vector<string>Var1.addElement(stringVar5);
}
} finally {
bufferedreaderVar3.close();
}
int intVar6 = intLiteral7;
if (intVar6 < 1) {
return new String[0];
}
String[] stringArrayVar8 = stringArrayLiteral9;
vector<string>Var1.copyInto(stringArrayVar8);
return stringArrayVar8;
}",0
"private void __parseArticlePointer(String reply, ArticleInfo pointer) throws MalformedServerReplyException {
String[] stringArrayVar1 = stringArrayLiteral2;
if (stringArrayVar1.length >= 3) {
int intVar3 = intLiteral4;
try {
pointer.articleNumber = Long.parseLong(stringArrayVar1[intVar3++]);
pointer.articleId = stringArrayVar1[intVar3++];
return;
} catch (NumberFormatException e) {
}
}
throw new MalformedServerReplyException(""Could not parse article pointer.\nServer reply: "" + reply);
}",0
"public String[] getEnabledProtocols() {
if (_socket_ instanceof SSLSocket) {
return ((SSLSocket) _socket_).getEnabledProtocols();
}
return null;
}",0
"private void buildContainer(Threadable threadable) {
String stringVar1 = stringLiteral2;
ThreadContainer threadcontainerVar3 = threadcontainerLiteral4;
if (threadcontainerVar3 != null) {
if (threadcontainerVar3.threadable != null) {
stringVar1 = ""<Bogus-id:"" + (bogusIdCount++) + "">"";
threadcontainerVar3 = null;
} else {
threadcontainerVar3.threadable = threadable;
}
}
if (threadcontainerVar3 == null) {
threadcontainerVar3 = new ThreadContainer();
threadcontainerVar3.threadable = threadable;
idTable.put(stringVar1, threadcontainerVar3);
}
ThreadContainer threadcontainerVar5 = threadcontainerLiteral6;
{
String[] stringArrayVar7 = stringArrayLiteral8;
for (int intVar17 = intLiteral18; intVar9 < intLiteral1; ++intVar9) {
String stringVar11 = stringLiteral12;
ThreadContainer threadcontainerVar13 = threadcontainerLiteral14;
if (threadcontainerVar13 == null) {
threadcontainerVar13 = new ThreadContainer();
idTable.put(stringVar11, threadcontainerVar13);
}
// Link references together in the order they appear in the References: header,
if ((threadcontainerVar5 != null) && (threadcontainerVar13.parent == null) && (threadcontainerVar5 != threadcontainerVar13) && !(threadcontainerVar13.findChild(threadcontainerVar5))) {
threadcontainerVar13.parent = threadcontainerVar5;
threadcontainerVar13.next = threadcontainerVar5.child;
threadcontainerVar5.child = threadcontainerVar13;
}
threadcontainerVar5 = threadcontainerVar13;
}
}
if (threadcontainerVar5 != null && (threadcontainerVar5 == threadcontainerVar3 || threadcontainerVar3.findChild(threadcontainerVar5))) {
threadcontainerVar5 = null;
}
// if it has a parent already, its because we saw this message in a References: field, and presumed
if (threadcontainerVar3.parent != null) {
ThreadContainer threadcontainerVar15, threadcontainerVar16;
for (threadcontainerVar16 = null, threadcontainerVar15 = threadcontainerVar3.parent.child; threadcontainerVar15 != null; threadcontainerVar16 = threadcontainerVar15, threadcontainerVar15 = threadcontainerVar15.next) {
if (threadcontainerVar15 == threadcontainerVar3) {
break;
}
}
if (threadcontainerVar15 == null) {
throw new RuntimeException(""Didnt find "" + threadcontainerVar3 + "" in parent"" + threadcontainerVar3.parent);
}
if (threadcontainerVar16 == null) {
threadcontainerVar3.parent.child = threadcontainerVar3.next;
} else {
threadcontainerVar16.next = threadcontainerVar3.next;
}
threadcontainerVar3.next = null;
threadcontainerVar3.parent = null;
}
if (threadcontainerVar5 != null) {
threadcontainerVar3.parent = threadcontainerVar5;
threadcontainerVar3.next = threadcontainerVar5.child;
threadcontainerVar5.child = threadcontainerVar3;
}
}",0
"public String[] getServerAliases(String keyType, Principal[] issuers) {
return null;
}",0
private final CopyOnWriteArrayList<EventListener> copyonwritearraylist<eventlistener>Var1;,0
"public PrintCommandListener(PrintStream stream, boolean suppressLogin) {
this(new PrintWriter(stream), suppressLogin);
}",0
"public String[] getEnabledProtocols() {
if (_socket_ instanceof SSLSocket) {
return ((SSLSocket) _socket_).getEnabledProtocols();
}
return null;
}",0
"private void __parseArticlePointer(String reply, ArticleInfo pointer) throws MalformedServerReplyException {
String[] stringArrayVar1 = stringArrayLiteral2;
if (stringArrayVar1.length >= 3) {
int intVar3 = intLiteral4;
try {
pointer.articleNumber = Long.parseLong(stringArrayVar1[intVar3++]);
pointer.articleId = stringArrayVar1[intVar3++];
return;
} catch (NumberFormatException e) {
}
}
throw new MalformedServerReplyException(""Could not parse article pointer.\nServer reply: "" + reply);
}",0
public int intVar1;,0
"public String[] getEnabledProtocols() {
if (_socket_ instanceof SSLSocket) {
return ((SSLSocket) _socket_).getEnabledProtocols();
}
return null;
}",0
"public String[] getEnabledCipherSuites() {
if (_socket_ instanceof SSLSocket) {
return ((SSLSocket) _socket_).getEnabledCipherSuites();
}
return null;
}",0
"public int[] startSubnegotiationRemote() {
return null;
}",0
"@Override
final DatagramPacket _newDatagram(DatagramPacket datagram, byte[] data) {
int intVar1, intVar2;
intVar1 = _filename.length();
intVar2 = _modeBytes[_mode].length;
data[0] = 0;
data[1] = (byte) _type;
System.arraycopy(_filename.getBytes(), 0, data, 2, intVar1);
data[intVar1 + 2] = 0;
System.arraycopy(_modeBytes[_mode], 0, data, intVar1 + 3, intVar2);
datagram.setAddress(_address);
datagram.setPort(_port);
datagram.setData(data);
datagram.setLength(intVar1 + intVar2 + 3);
return datagram;
}",0
"private void doUnixPerms(FTPFile file, String valueLowerCase) {
for (char charVar1 : valueLowerCase.toCharArray()) {
switch(charVar1) {
case 'a':
file.setPermission(FTPFile.USER_ACCESS, FTPFile.WRITE_PERMISSION, true);
break;
case 'c':
file.setPermission(FTPFile.USER_ACCESS, FTPFile.WRITE_PERMISSION, true);
break;
case 'd':
file.setPermission(FTPFile.USER_ACCESS, FTPFile.WRITE_PERMISSION, true);
break;
case 'e':
file.setPermission(FTPFile.USER_ACCESS, FTPFile.READ_PERMISSION, true);
break;
case 'f':
break;
case 'l':
file.setPermission(FTPFile.USER_ACCESS, FTPFile.EXECUTE_PERMISSION, true);
break;
case 'm':
file.setPermission(FTPFile.USER_ACCESS, FTPFile.WRITE_PERMISSION, true);
break;
case 'p':
file.setPermission(FTPFile.USER_ACCESS, FTPFile.WRITE_PERMISSION, true);
break;
case 'r':
file.setPermission(FTPFile.USER_ACCESS, FTPFile.READ_PERMISSION, true);
break;
case 'w':
file.setPermission(FTPFile.USER_ACCESS, FTPFile.WRITE_PERMISSION, true);
break;
default:
break;
}
}
}",0
"public POP3MessageInfo[] listUniqueIdentifiers() throws IOException {
if (getState() != TRANSACTION_STATE) {
return null;
}
if (sendCommand(POP3Command.UIDL) != POP3Reply.OK) {
return null;
}
getAdditionalReply();
POP3MessageInfo[] pop3messageinfoArrayVar1 = pop3messageinfoArrayLiteral2;
ListIterator<String> listiterator<string>Var3 = listiterator<string>Literal4;
for (int intVar7 = intLiteral8; intVar5 < intLiteral1; intVar5++) {
pop3messageinfoArrayVar1[intVar5] = __parseUID(listiterator<string>Var3.next());
}
return pop3messageinfoArrayVar1;
}",0
"public POP3MessageInfo[] listMessages() throws IOException {
if (getState() != TRANSACTION_STATE) {
return null;
}
if (sendCommand(POP3Command.LIST) != POP3Reply.OK) {
return null;
}
getAdditionalReply();
POP3MessageInfo[] pop3messageinfoArrayVar1 = pop3messageinfoArrayLiteral2;
ListIterator<String> listiterator<string>Var3 = listiterator<string>Literal4;
for (int intVar7 = intLiteral8; intVar5 < intLiteral1; intVar5++) {
pop3messageinfoArrayVar1[intVar5] = __parseStatus(listiterator<string>Var3.next());
}
return pop3messageinfoArrayVar1;
}",0
"@Override
public void run() {
int intVar1;
try {
_outerLoop: while (!__isClosed) {
try {
if ((intVar1 = __read(true)) < 0) {
break;
}
} catch (InterruptedIOException e) {
synchronized (__queue) {
__ioException = e;
__queue.notifyAll();
try {
__queue.wait(100);
} catch (InterruptedException interrupted) {
if (__isClosed) {
break _outerLoop;
}
}
continue;
}
} catch (RuntimeException re) {
super.close();
break _outerLoop;
}
boolean booleanVar2 = booleanLiteral3;
try {
booleanVar2 = __processChar(intVar1);
} catch (InterruptedException e) {
if (__isClosed) {
break _outerLoop;
}
}
if (booleanVar2) {
__client.notifyInputListener();
}
}
} catch (IOException ioe) {
synchronized (__queue) {
__ioException = ioe;
}
__client.notifyInputListener();
}
synchronized (__queue) {
__isClosed = true;
__hasReachedEOF = true;
__queue.notify();
}
__threaded = false;
}",0
"@Override
DatagramPacket _newDatagram(DatagramPacket datagram, byte[] data) {
int intVar1;
intVar1 = _message.length();
data[0] = 0;
data[1] = (byte) _type;
data[2] = (byte) ((_error & 0xffff) >> 8);
data[3] = (byte) (_error & 0xff);
System.arraycopy(_message.getBytes(), 0, data, 4, intVar1);
data[intVar1 + 4] = 0;
datagram.setAddress(_address);
datagram.setPort(_port);
datagram.setData(data);
datagram.setLength(intVar1 + 4);
return datagram;
}",0
"void encode(byte[] in, int inPos, int inAvail) {
if (eof) {
return;
}
if (inAvail < 0) {
eof = true;
if (buffer == null || buffer.length - pos < encodeSize) {
resizeBuffer();
}
switch(modulus) {
case 1:
buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
if (encodeTable == STANDARD_ENCODE_TABLE) {
buffer[pos++] = PAD;
buffer[pos++] = PAD;
}
break;
case 2:
buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
if (encodeTable == STANDARD_ENCODE_TABLE) {
buffer[pos++] = PAD;
}
break;
default:
break;
}
if (lineLength > 0 && pos > 0) {
System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
pos += lineSeparator.length;
}
} else {
for (int intVar5 = intLiteral6; intVar1 < intLiteral1; intVar1++) {
if (buffer == null || buffer.length - pos < encodeSize) {
resizeBuffer();
}
modulus = (++modulus) % 3;
int intVar3 = intLiteral4;
if (intVar3 < 0) {
intVar3 += 256;
}
x = (x << 8) + intVar3;
if (0 == modulus) {
buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
buffer[pos++] = encodeTable[(x >> 12) & MASK_6BITS];
buffer[pos++] = encodeTable[(x >> 6) & MASK_6BITS];
buffer[pos++] = encodeTable[x & MASK_6BITS];
currentLinePos += 4;
if (lineLength > 0 && lineLength <= currentLinePos) {
System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
pos += lineSeparator.length;
currentLinePos = 0;
}
}
}
}
}",0
"public static void main(String[] args) throws Throwable {
final Properties propertiesVar1 = propertiesLiteral2;
final InputStream inputstreamVar3 = inputstreamLiteral4;
if (inputstreamVar3 != null) {
propertiesVar1.load(inputstreamVar3);
} else {
System.err.println(""[Cannot find examples.properties file, so aliases cannot be used]"");
}
if (args.length == 0) {
if (Thread.currentThread().getStackTrace().length > 2) {
System.out.println(""Usage: mvn -q exec:java  -Dexec.arguments=<alias or"" + "" exampleClass>,<exampleClass parameters> (comma-separated, no spaces)"");
System.out.println(""Or   : mvn -q exec:java  -Dexec.args=\""<alias"" + "" or exampleClass> <exampleClass parameters>\"" (space separated)"");
} else {
if (fromJar()) {
System.out.println(""Usage: java -jar commons-net-examples-m.n.jar <alias or exampleClass> <exampleClass parameters>"");
} else {
System.out.println(""Usage: java -cp target/classes examples/Main <alias or exampleClass> <exampleClass parameters>"");
}
}
@SuppressWarnings(""unchecked"")
List<String> list<string>Var5 = list<string>Literal6;
if (list<string>Var5.isEmpty()) {
return;
}
Collections.sort(list<string>Var5);
System.out.println(""\nAliases and their classes:"");
for (String stringVar7 : list<string>Var5) {
System.out.printf(""%-25s %s%n"", stringVar7, propertiesVar1.getProperty(stringVar7));
}
return;
}
String stringVar8 = stringLiteral9;
String stringVar10 = stringLiteral11;
if (stringVar10 == null) {
stringVar10 = stringVar8;
}
stringVar10 = stringVar10.replace('/', '.');
try {
Class<?> class<?>Var12 = class<?>Literal13;
Method methodVar14 = methodLiteral15;
String[] stringArrayVar16 = stringArrayLiteral17;
System.arraycopy(args, 1, stringArrayVar16, 0, stringArrayVar16.length);
try {
methodVar14.invoke(null, (Object) stringArrayVar16);
} catch (InvocationTargetException ite) {
Throwable throwableVar18 = throwableLiteral19;
if (throwableVar18 != null) {
throw throwableVar18;
} else {
throw ite;
}
}
} catch (ClassNotFoundException e) {
System.out.println(e);
}
}",0
"@Override
public FTPFile parseFTPEntry(String entry) {
FTPFile ftpfileVar1 = ftpfileLiteral2;
ftpfileVar1.setRawListing(entry);
int intVar3;
boolean booleanVar4 = booleanLiteral5;
if (matches(entry)) {
String stringVar6 = stringLiteral7;
String stringVar8 = stringLiteral9;
String stringVar10 = stringLiteral11;
String stringVar12 = stringLiteral11;
String stringVar13 = stringLiteral14;
String stringVar15 = stringLiteral16;
String stringVar17 = stringLiteral18;
String stringVar19 = stringLiteral20;
try {
ftpfileVar1.setTimestamp(super.parseTimestamp(stringVar15));
} catch (ParseException e) {
}
switch(stringVar6.charAt(0)) {
case 'd':
intVar3 = FTPFile.DIRECTORY_TYPE;
break;
case 'e':
intVar3 = FTPFile.SYMBOLIC_LINK_TYPE;
break;
case 'l':
intVar3 = FTPFile.SYMBOLIC_LINK_TYPE;
break;
case 'b':
case 'c':
booleanVar4 = true;
intVar3 = FTPFile.FILE_TYPE;
break;
case 'f':
case '-':
intVar3 = FTPFile.FILE_TYPE;
break;
default:
// e.g. ? and w = whiteout
intVar3 = FTPFile.UNKNOWN_TYPE;
}
ftpfileVar1.setType(intVar3);
int intVar21 = intLiteral22;
for (int intVar29 = intLiteral30; intVar23 < intLiteral1; intVar23++, intVar21 += 4) {
ftpfileVar1.setPermission(intVar23, FTPFile.READ_PERMISSION, (!group(intVar21).equals(""-"")));
ftpfileVar1.setPermission(intVar23, FTPFile.WRITE_PERMISSION, (!group(intVar21 + 1).equals(""-"")));
String stringVar25 = stringLiteral26;
if (!stringVar25.equals(""-"") && !Character.isUpperCase(stringVar25.charAt(0))) {
ftpfileVar1.setPermission(intVar23, FTPFile.EXECUTE_PERMISSION, true);
} else {
ftpfileVar1.setPermission(intVar23, FTPFile.EXECUTE_PERMISSION, false);
}
}
if (!booleanVar4) {
try {
ftpfileVar1.setHardLinkCount(Integer.parseInt(stringVar8));
} catch (NumberFormatException e) {
}
}
ftpfileVar1.setUser(stringVar10);
ftpfileVar1.setGroup(stringVar12);
try {
ftpfileVar1.setSize(Long.parseLong(stringVar13));
} catch (NumberFormatException e) {
}
if (null == stringVar19) {
ftpfileVar1.setName(stringVar17);
} else {
stringVar17 += stringVar19;
if (intVar3 == FTPFile.SYMBOLIC_LINK_TYPE) {
int intVar27 = intLiteral28;
if (intVar27 == -1) {
ftpfileVar1.setName(stringVar17);
} else {
ftpfileVar1.setName(stringVar17.substring(0, intVar27));
ftpfileVar1.setLink(stringVar17.substring(intVar27 + 4));
}
} else {
ftpfileVar1.setName(stringVar17);
}
}
return ftpfileVar1;
}
return null;
}",0
"void flush() {
if (parent != null && threadable == null) {
throw new RuntimeException(""no threadable in "" + this.toString());
}
parent = null;
if (threadable != null) {
threadable.setChild(child == null ? null : child.threadable);
}
if (child != null) {
child.flush();
child = null;
}
if (threadable != null) {
threadable.setNext(next == null ? null : next.threadable);
}
if (next != null) {
next.flush();
next = null;
}
threadable = null;
}",0
"@Override
public int[] answerSubnegotiation(int[] suboptionData, int suboptionLength) {
if ((suboptionData != null) && (suboptionLength > 1) && (termType != null)) {
if ((suboptionData[0] == TERMINAL_TYPE) && (suboptionData[1] == TERMINAL_TYPE_SEND)) {
int[] intArrayVar1 = intArrayLiteral2;
intArrayVar1[0] = TERMINAL_TYPE;
intArrayVar1[1] = TERMINAL_TYPE_IS;
for (int intVar5 = intLiteral6; intVar3 < intLiteral1; intVar3++) {
intArrayVar1[intVar3 + 2] = termType.charAt(intVar3);
}
return intArrayVar1;
}
}
return null;
}",0
"@Deprecated
public static String stringVar1;",0
"private ThreadContainer findRootSet() {
ThreadContainer threadcontainerVar1 = threadcontainerLiteral2;
Iterator<String> iterator<string>Var3 = iterator<string>Literal4;
while (iterator<string>Var3.hasNext()) {
Object objectVar5 = objectLiteral6;
ThreadContainer threadcontainerVar7 = threadcontainerLiteral8;
if (threadcontainerVar7.parent == null) {
if (threadcontainerVar7.next != null) {
throw new RuntimeException(""c.next is "" + threadcontainerVar7.next.toString());
}
threadcontainerVar7.next = threadcontainerVar1.child;
threadcontainerVar1.child = threadcontainerVar7;
}
}
return threadcontainerVar1;
}",0
"public TimeInfo(NtpV3Packet message, long returnTime, List<String> comments, boolean doComputeDetails) {
if (message == null) {
throw new IllegalArgumentException(""message cannot be null"");
}
this._returnTime = returnTime;
this._message = message;
this._comments = comments;
if (doComputeDetails) {
computeDetails();
}
}",0
"public POP3MessageInfo[] listMessages() throws IOException {
if (getState() != TRANSACTION_STATE) {
return null;
}
if (sendCommand(POP3Command.LIST) != POP3Reply.OK) {
return null;
}
getAdditionalReply();
POP3MessageInfo[] pop3messageinfoArrayVar1 = pop3messageinfoArrayLiteral2;
ListIterator<String> listiterator<string>Var3 = listiterator<string>Literal4;
for (int intVar7 = intLiteral8; intVar5 < intLiteral1; intVar5++) {
pop3messageinfoArrayVar1[intVar5] = __parseStatus(listiterator<string>Var3.next());
}
return pop3messageinfoArrayVar1;
}",0
"private void performSSLNegotiation() throws IOException {
initSSLContext();
SSLSocketFactory sslsocketfactoryVar1 = sslsocketfactoryLiteral2;
String stringVar3 = stringLiteral4;
int intVar5 = intLiteral6;
SSLSocket sslsocketVar7 = sslsocketLiteral8;
sslsocketVar7.setEnableSessionCreation(true);
sslsocketVar7.setUseClientMode(true);
if (protocols != null) {
sslsocketVar7.setEnabledProtocols(protocols);
}
if (suites != null) {
sslsocketVar7.setEnabledCipherSuites(suites);
}
sslsocketVar7.startHandshake();
_socket_ = sslsocketVar7;
_input_ = sslsocketVar7.getInputStream();
_output_ = sslsocketVar7.getOutputStream();
_reader = new CRLFLineReader(new InputStreamReader(_input_, _DEFAULT_ENCODING));
_writer = new BufferedWriter(new OutputStreamWriter(_output_, _DEFAULT_ENCODING));
}",0
"public String[] getEnabledProtocols() {
if (_socket_ instanceof SSLSocket) {
return ((SSLSocket) _socket_).getEnabledProtocols();
}
return null;
}",0
"public PrintCommandListener(PrintStream stream, boolean suppressLogin, char eolMarker, boolean showDirection) {
this(new PrintWriter(stream), suppressLogin, eolMarker, showDirection);
}",0
"public PrintCommandListener(PrintStream stream, boolean suppressLogin) {
this(new PrintWriter(stream), suppressLogin);
}",0
"private void __parseArticlePointer(String reply, ArticleInfo pointer) throws MalformedServerReplyException {
String[] stringArrayVar1 = stringArrayLiteral2;
if (stringArrayVar1.length >= 3) {
int intVar3 = intLiteral4;
try {
pointer.articleNumber = Long.parseLong(stringArrayVar1[intVar3++]);
pointer.articleId = stringArrayVar1[intVar3++];
return;
} catch (NumberFormatException e) {
}
}
throw new MalformedServerReplyException(""Could not parse article pointer.\nServer reply: "" + reply);
}",0
"public String[] listNewNews(NewGroupsOrNewsQuery query) throws IOException {
if (!NNTPReply.isPositiveCompletion(newnews(query.getNewsgroups(), query.getDate(), query.getTime(), query.isGMT(), query.getDistributions()))) {
return null;
}
Vector<String> vector<string>Var1 = vector<string>Literal2;
BufferedReader bufferedreaderVar3 = bufferedreaderLiteral4;
String stringVar5;
try {
while ((stringVar5 = bufferedreaderVar3.readLine()) != null) {
vector<string>Var1.addElement(stringVar5);
}
} finally {
bufferedreaderVar3.close();
}
int intVar6 = intLiteral7;
if (intVar6 < 1) {
return new String[0];
}
String[] stringArrayVar8 = stringArrayLiteral9;
vector<string>Var1.copyInto(stringArrayVar8);
return stringArrayVar8;
}",0
"@Override
public int[] answerSubnegotiation(int[] suboptionData, int suboptionLength) {
if ((suboptionData != null) && (suboptionLength > 1) && (termType != null)) {
if ((suboptionData[0] == TERMINAL_TYPE) && (suboptionData[1] == TERMINAL_TYPE_SEND)) {
int[] intArrayVar1 = intArrayLiteral2;
intArrayVar1[0] = TERMINAL_TYPE;
intArrayVar1[1] = TERMINAL_TYPE_IS;
for (int intVar5 = intLiteral6; intVar3 < intLiteral1; intVar3++) {
intArrayVar1[intVar3 + 2] = termType.charAt(intVar3);
}
return intArrayVar1;
}
}
return null;
}",0
"@Override
public final DatagramPacket newDatagram() {
int intVar1, intVar2;
byte[] byteArrayVar3;
intVar1 = _fileName.length();
intVar2 = _modeBytes[_mode].length;
byteArrayVar3 = new byte[intVar1 + intVar2 + 4];
byteArrayVar3[0] = 0;
byteArrayVar3[1] = (byte) _type;
System.arraycopy(_fileName.getBytes(), 0, byteArrayVar3, 2, intVar1);
byteArrayVar3[intVar1 + 2] = 0;
System.arraycopy(_modeBytes[_mode], 0, byteArrayVar3, intVar1 + 3, intVar2);
return new DatagramPacket(byteArrayVar3, byteArrayVar3.length, _address, _port);
}",0
"public String[] getEnabledCipherSuites() {
if (_socket_ instanceof SSLSocket) {
return ((SSLSocket) _socket_).getEnabledCipherSuites();
}
return null;
}",0
"private boolean parseUnixList(FTPFile file, String entry) {
file = unixFTPEntryParser.parseFTPEntry(entry);
if (file == null) {
return false;
}
return true;
}",0
"public Threadable thread(Iterable<? extends Threadable> messages) {
if (messages == null) {
return null;
}
HashMap<String, ThreadContainer> hashmap<string,threadcontainer>Var1 = hashmap<string,threadcontainer>Literal2;
for (Threadable threadableVar3 : messages) {
if (!threadableVar3.isDummy()) {
buildContainer(threadableVar3, hashmap<string,threadcontainer>Var1);
}
}
if (hashmap<string,threadcontainer>Var1.isEmpty()) {
return null;
}
ThreadContainer threadcontainerVar4 = threadcontainerLiteral5;
hashmap<string,threadcontainer>Var1.clear();
hashmap<string,threadcontainer>Var1 = null;
pruneEmptyContainers(threadcontainerVar4);
threadcontainerVar4.reverseChildren();
gatherSubjects(threadcontainerVar4);
if (threadcontainerVar4.next != null) {
throw new RuntimeException(""root node has a next:"" + threadcontainerVar4);
}
for (ThreadContainer threadcontainerVar10 = threadcontainerLiteral11; threadcontainerVar6 != intLiteral1; threadcontainerVar6 = threadcontainerVar6.next) {
if (threadcontainerVar6.threadable == null) {
threadcontainerVar6.threadable = threadcontainerVar6.child.threadable.makeDummy();
}
}
Threadable threadableVar8 = threadableLiteral9;
threadcontainerVar4.flush();
return threadableVar8;
}",0
"public TimeInfo(NtpV3Packet message, long returnTime, List<String> comments, boolean doComputeDetails) {
if (message == null) {
throw new IllegalArgumentException(""message cannot be null"");
}
this._returnTime = returnTime;
this._message = message;
this._comments = comments;
if (doComputeDetails) {
computeDetails();
}
}",0
"private static POP3MessageInfo __parseStatus(String line) {
int intVar1, intVar2;
StringTokenizer stringtokenizerVar3;
stringtokenizerVar3 = new StringTokenizer(line);
if (!stringtokenizerVar3.hasMoreElements()) {
return null;
}
intVar1 = intVar2 = 0;
try {
intVar1 = Integer.parseInt(stringtokenizerVar3.nextToken());
if (!stringtokenizerVar3.hasMoreElements()) {
return null;
}
intVar2 = Integer.parseInt(stringtokenizerVar3.nextToken());
} catch (NumberFormatException e) {
return null;
}
return new POP3MessageInfo(intVar1, intVar2);
}",0
"public POP3MessageInfo[] listMessages() throws IOException {
if (getState() != TRANSACTION_STATE) {
return null;
}
if (sendCommand(POP3Command.LIST) != POP3Reply.OK) {
return null;
}
getAdditionalReply();
POP3MessageInfo[] pop3messageinfoArrayVar1 = pop3messageinfoArrayLiteral2;
ListIterator<String> listiterator<string>Var3 = listiterator<string>Literal4;
for (int intVar7 = intLiteral8; intVar5 < intLiteral1; intVar5++) {
pop3messageinfoArrayVar1[intVar5] = __parseStatus(listiterator<string>Var3.next());
}
return pop3messageinfoArrayVar1;
}",0
"@Override
public void run() {
int intVar1;
try {
_outerLoop: while (!__isClosed) {
try {
if ((intVar1 = __read(true)) < 0) {
break;
}
} catch (InterruptedIOException e) {
synchronized (__queue) {
__ioException = e;
__queue.notifyAll();
try {
__queue.wait(100);
} catch (InterruptedException interrupted) {
if (__isClosed) {
break _outerLoop;
}
}
continue;
}
} catch (RuntimeException re) {
super.close();
break _outerLoop;
}
boolean booleanVar2 = booleanLiteral3;
try {
booleanVar2 = __processChar(intVar1);
} catch (InterruptedException e) {
if (__isClosed) {
break _outerLoop;
}
}
if (booleanVar2) {
__client.notifyInputListener();
}
}
} catch (IOException ioe) {
synchronized (__queue) {
__ioException = ioe;
}
__client.notifyInputListener();
}
synchronized (__queue) {
__isClosed = true;
__hasReachedEOF = true;
__queue.notify();
}
__threaded = false;
}",0
"@Override
public int read() throws IOException {
synchronized (__queue) {
while (true) {
if (__ioException != null) {
IOException ioexceptionVar1;
ioexceptionVar1 = __ioException;
__ioException = null;
throw ioexceptionVar1;
}
if (__bytesAvailable == 0) {
if (__hasReachedEOF) {
return EOF;
}
if (__threaded) {
__queue.notify();
try {
__readIsWaiting = true;
__queue.wait();
__readIsWaiting = false;
} catch (InterruptedException e) {
throw new InterruptedIOException(""Fatal thread interruption during read."");
}
} else {
__readIsWaiting = true;
int intVar2;
boolean booleanVar3 = booleanLiteral4;
do {
try {
if ((intVar2 = __read(booleanVar3)) < 0) {
if (intVar2 != WOULD_BLOCK) {
return (intVar2);
}
}
} catch (InterruptedIOException e) {
synchronized (__queue) {
__ioException = ioexceptionVar1;
__queue.notifyAll();
try {
__queue.wait(100);
} catch (InterruptedException interrupted) {
}
}
return EOF;
}
try {
if (intVar2 != WOULD_BLOCK) {
__processChar(intVar2);
}
} catch (InterruptedException e) {
if (__isClosed) {
return EOF;
}
}
booleanVar3 = false;
} while (super.available() > 0 && __bytesAvailable < __queue.length - 1);
__readIsWaiting = false;
}
continue;
} else {
int intVar2;
intVar2 = __queue[__queueHead];
if (++__queueHead >= __queue.length) {
__queueHead = 0;
}
--__bytesAvailable;
if (__bytesAvailable == 0 && __threaded) {
__queue.notify();
}
return intVar2;
}
}
}
}",0
"public String[] getEnabledProtocols() {
if (_socket_ instanceof SSLSocket) {
return ((SSLSocket) _socket_).getEnabledProtocols();
}
return null;
}",0
"protected void sslNegotiation() throws IOException {
plainSocket = _socket_;
initSslContext();
SSLSocketFactory sslsocketfactoryVar1 = sslsocketfactoryLiteral2;
String stringVar3 = stringLiteral4;
int intVar5 = intLiteral6;
SSLSocket sslsocketVar7 = sslsocketLiteral8;
sslsocketVar7.setEnableSessionCreation(isCreation);
sslsocketVar7.setUseClientMode(isClientMode);
if (!isClientMode) {
sslsocketVar7.setNeedClientAuth(isNeedClientAuth);
sslsocketVar7.setWantClientAuth(isWantClientAuth);
}
if (protocols != null) {
sslsocketVar7.setEnabledProtocols(protocols);
}
if (suites != null) {
sslsocketVar7.setEnabledCipherSuites(suites);
}
sslsocketVar7.startHandshake();
_socket_ = sslsocketVar7;
_controlInput_ = new BufferedReader(new InputStreamReader(sslsocketVar7.getInputStream(), getControlEncoding()));
_controlOutput_ = new BufferedWriter(new OutputStreamWriter(sslsocketVar7.getOutputStream(), getControlEncoding()));
}",0
"public String[] getEnabledCipherSuites() {
if (_socket_ instanceof SSLSocket) {
return ((SSLSocket) _socket_).getEnabledCipherSuites();
}
return null;
}",0
"public NewsgroupInfo[] listNewsgroups() throws IOException {
if (!NNTPReply.isPositiveCompletion(list())) {
return null;
}
return __readNewsgroupListing();
}",0
"public NewsgroupInfo[] listNewNewsgroups(NewGroupsOrNewsQuery query) throws IOException {
if (!NNTPReply.isPositiveCompletion(newgroups(query.getDate(), query.getTime(), query.isGMT(), query.getDistributions()))) {
return null;
}
return __readNewsgroupListing();
}",0
"private void performSSLNegotiation() throws IOException {
initSSLContext();
SSLSocketFactory sslsocketfactoryVar1 = sslsocketfactoryLiteral2;
String stringVar3 = stringLiteral4;
int intVar5 = intLiteral6;
SSLSocket sslsocketVar7 = sslsocketLiteral8;
sslsocketVar7.setEnableSessionCreation(true);
sslsocketVar7.setUseClientMode(true);
if (protocols != null) {
sslsocketVar7.setEnabledProtocols(protocols);
}
if (suites != null) {
sslsocketVar7.setEnabledCipherSuites(suites);
}
sslsocketVar7.startHandshake();
_socket_ = sslsocketVar7;
_input_ = sslsocketVar7.getInputStream();
_output_ = sslsocketVar7.getOutputStream();
_reader = new CRLFLineReader(new InputStreamReader(_input_, encoding));
_writer = new BufferedWriter(new OutputStreamWriter(_output_, encoding));
}",0
"@Override
public int[] answerSubnegotiation(int[] suboptionData, int suboptionLength) {
return null;
}",0
"public String[] getServerAliases(String keyType, Principal[] issuers) {
return null;
}",0
"public void sendFile(String filename, int mode, InputStream input, InetAddress host, int port) throws IOException {
int intVar1, intVar2, intVar3, intVar4, intVar5, intVar6, intVar7, intVar8;
TFTPPacket tftppacketVar9, tftppacketVar10 = tftppacketLiteral11;
TFTPErrorPacket tftperrorpacketVar12;
TFTPDataPacket tftpdatapacketVar13 = tftpdatapacketLiteral14;
TFTPAckPacket tftpackpacketVar15;
boolean booleanVar16 = booleanLiteral17;
beginBufferedOps();
intVar6 = intVar3 = intVar5 = intVar1 = intVar8 = 0;
intVar4 = 0;
boolean booleanVar18 = booleanLiteral19;
if (mode == TFTP.ASCII_MODE) {
input = new ToNetASCIIInputStream(input);
}
tftppacketVar9 = new TFTPWriteRequestPacket(host, port, filename, mode);
_sendPacket: do {
// first time: block is 0, lastBlock is 0, send a request packet.
// subsequent: block is integer starting at 1, send data packet.
bufferedSend(tftppacketVar9);
_receivePacket: while (true) {
intVar2 = 0;
do {
try {
tftppacketVar10 = bufferedReceive();
break;
} catch (SocketException e) {
if (++intVar2 >= __maxTimeouts) {
endBufferedOps();
throw new IOException(""Connection timed out."");
}
continue _sendPacket;
} catch (InterruptedIOException e) {
if (++intVar2 >= __maxTimeouts) {
endBufferedOps();
throw new IOException(""Connection timed out."");
}
continue _sendPacket;
} catch (TFTPPacketException e) {
endBufferedOps();
throw new IOException(""Bad packet: "" + e.getMessage());
}
} while (intVar2 < __maxTimeouts);
if (booleanVar16) {
booleanVar16 = false;
intVar5 = tftppacketVar10.getPort();
tftpdatapacketVar13.setPort(intVar5);
if (!host.equals(tftppacketVar10.getAddress())) {
host = tftppacketVar10.getAddress();
tftpdatapacketVar13.setAddress(host);
tftppacketVar9.setAddress(host);
}
}
if (host.equals(tftppacketVar10.getAddress()) && tftppacketVar10.getPort() == intVar5) {
switch(tftppacketVar10.getType()) {
case TFTPPacket.ERROR:
tftperrorpacketVar12 = (TFTPErrorPacket) tftppacketVar10;
endBufferedOps();
throw new IOException(""Error code "" + tftperrorpacketVar12.getError() + "" received: "" + tftperrorpacketVar12.getMessage());
case TFTPPacket.ACKNOWLEDGEMENT:
tftpackpacketVar15 = (TFTPAckPacket) tftppacketVar10;
intVar3 = tftpackpacketVar15.getBlockNumber();
if (intVar3 == intVar4) {
++intVar4;
if (intVar4 > 65535) {
intVar4 = 0;
}
if (booleanVar18) {
break _sendPacket;
} else {
break _receivePacket;
}
} else {
discardPackets();
continue _receivePacket;
}
default:
endBufferedOps();
throw new IOException(""Received unexpected packet type."");
}
} else {
tftperrorpacketVar12 = new TFTPErrorPacket(tftppacketVar10.getAddress(), tftppacketVar10.getPort(), TFTPErrorPacket.UNKNOWN_TID, ""Unexpected host or port."");
bufferedSend(tftperrorpacketVar12);
continue _sendPacket;
}
}
intVar6 = TFTPPacket.SEGMENT_SIZE;
intVar7 = 4;
intVar8 = 0;
while (intVar6 > 0 && (intVar1 = input.read(_sendBuffer, intVar7, intVar6)) > 0) {
intVar7 += intVar1;
intVar6 -= intVar1;
intVar8 += intVar1;
}
if (intVar8 < TFTPPacket.SEGMENT_SIZE) {
booleanVar18 = true;
}
tftpdatapacketVar13.setBlockNumber(intVar4);
tftpdatapacketVar13.setData(_sendBuffer, 4, intVar8);
tftppacketVar9 = tftpdatapacketVar13;
} while (intVar8 > 0 || booleanVar18);
// Note: this was looping while dataLength == 0 || lastAckWait,
endBufferedOps();
}",1
"@Deprecated
public static String stringVar1;",1
"private void tunnelHandshake(String host, int port, InputStream input, OutputStream output) throws IOException, UnsupportedEncodingException {
final String stringVar1 = stringLiteral2;
_output_.write(stringVar1.getBytes(getControlEncoding()));
_output_.write(CRLF);
if (proxyUsername != null && proxyPassword != null) {
final String stringVar3 = stringLiteral4;
_output_.write(stringVar3.getBytes(""UTF-8""));
_output_.write(CRLF);
List<String> list<string>Var5 = list<string>Literal6;
BufferedReader bufferedreaderVar7 = bufferedreaderLiteral8;
for (String stringVar19 = stringLiteral20; stringVar9 != null && intLiteral1; stringVar9 = bufferedreaderVar7.readLine()) {
list<string>Var5.add(stringVar9);
}
int intVar11 = intLiteral12;
if (intVar11 == 0) {
throw new IOException(""No response from proxy"");
}
String stringVar13 = stringLiteral14;
String stringVar15 = stringLiteral16;
if (stringVar15.startsWith(""HTTP/"") && stringVar15.length() >= 12) {
stringVar13 = stringVar15.substring(9, 12);
} else {
throw new IOException(""Invalid response from proxy: "" + stringVar15);
}
if (!""200"".equals(stringVar13)) {
StringBuilder stringbuilderVar17 = stringbuilderLiteral18;
stringbuilderVar17.append(""HTTPTunnelConnector: connection failed\r\n"");
stringbuilderVar17.append(""Response received from the proxy:\r\n"");
for (String stringVar9 : list<string>Var5) {
stringbuilderVar17.append(stringVar9);
stringbuilderVar17.append(""\r\n"");
}
throw new IOException(stringbuilderVar17.toString());
}
}
}",0
"final boolean _sendAYT(long timeout) throws IOException, IllegalArgumentException, InterruptedException {
boolean booleanVar1 = booleanLiteral2;
synchronized (aytMonitor) {
synchronized (this) {
aytFlag = false;
_output_.write(_COMMAND_AYT);
_output_.flush();
}
try {
aytMonitor.wait(timeout);
if (aytFlag == false) {
booleanVar1 = false;
aytFlag = true;
} else {
booleanVar1 = true;
}
} catch (IllegalMonitorStateException e) {
System.err.println(""Exception processing AYT:"" + e.getMessage());
}
}
return (booleanVar1);
}",1
"public static void main(String[] args) throws Exception {
if (args.length == 0) {
System.out.println(""Usage: java -jar commons-net-examples-m.n.jar <exampleClass> <exampleClass parameters>"");
}
CodeSource codesourceVar1 = codesourceLiteral2;
Map<String, String> map<string,string>Var3 = map<string,string>Literal4;
if (codesourceVar1 != null) {
final String stringVar5 = stringLiteral6;
if (stringVar5.endsWith("".jar"")) {
if (args.length == 0) {
System.out.println(""\nClasses found in the jar:"");
}
JarFile jarfileVar7 = jarfileLiteral8;
Enumeration<JarEntry> enumeration<jarentry>Var9 = enumeration<jarentry>Literal10;
while (enumeration<jarentry>Var9.hasMoreElements()) {
JarEntry jarentryVar11 = jarentryLiteral12;
String stringVar13 = stringLiteral14;
if (!stringVar13.endsWith("".class"") || stringVar13.contains(""$"") || stringVar13.equals(""examples/nntp/NNTPUtils.class"") || stringVar13.equals(""examples/util/IOUtil.class"") || stringVar13.equals(""examples/mail/IMAPUtils.class"") || stringVar13.equals(""examples/Main.class"")) {
continue;
}
stringVar13 = stringVar13.replace("".class"", """");
int intVar15 = intLiteral16;
String stringVar17 = stringLiteral18;
if (args.length == 0) {
System.out.printf(""%-25s %s%n"", stringVar17, stringVar13);
}
map<string,string>Var3.put(stringVar17, stringVar13);
}
jarfileVar7.close();
}
}
if (args.length == 0) {
return;
}
String stringVar19 = stringLiteral20;
String stringVar21 = stringLiteral22;
if (stringVar21 == null) {
stringVar21 = stringVar19;
}
stringVar21 = stringVar21.replace('/', '.');
Class<?> class<?>Var23 = class<?>Literal24;
Method methodVar25 = methodLiteral26;
String[] stringArrayVar27 = stringArrayLiteral28;
System.arraycopy(args, 1, stringArrayVar27, 0, stringArrayVar27.length);
methodVar25.invoke(null, (Object) stringArrayVar27);
}",1
"protected void sslNegotiation() throws IOException {
plainSocket = _socket_;
initSslContext();
SSLSocketFactory sslsocketfactoryVar1 = sslsocketfactoryLiteral2;
String stringVar3 = stringLiteral4;
int intVar5 = intLiteral6;
SSLSocket sslsocketVar7 = sslsocketLiteral8;
sslsocketVar7.setEnableSessionCreation(isCreation);
sslsocketVar7.setUseClientMode(isClientMode);
if (isClientMode) {
if (tlsEndpointChecking) {
SSLSocketUtils.enableEndpointNameVerification(sslsocketVar7);
}
} else {
sslsocketVar7.setNeedClientAuth(isNeedClientAuth);
sslsocketVar7.setWantClientAuth(isWantClientAuth);
}
if (protocols != null) {
sslsocketVar7.setEnabledProtocols(protocols);
}
if (suites != null) {
sslsocketVar7.setEnabledCipherSuites(suites);
}
sslsocketVar7.startHandshake();
_socket_ = sslsocketVar7;
_controlInput_ = new BufferedReader(new InputStreamReader(sslsocketVar7.getInputStream(), getControlEncoding()));
_controlOutput_ = new BufferedWriter(new OutputStreamWriter(sslsocketVar7.getOutputStream(), getControlEncoding()));
if (isClientMode) {
if (hostnameVerifier != null && !hostnameVerifier.verify(stringVar3, sslsocketVar7.getSession())) {
throw new SSLHandshakeException(""Hostname doesn't match certificate"");
}
}
}",1
"public void sendFile(String filename, int mode, InputStream input, InetAddress host, int port) throws IOException {
int intVar1, intVar2, intVar3, intVar4, intVar5, intVar6, intVar7, intVar8;
TFTPPacket tftppacketVar9, tftppacketVar10 = tftppacketLiteral11;
TFTPErrorPacket tftperrorpacketVar12;
TFTPDataPacket tftpdatapacketVar13 = tftpdatapacketLiteral14;
TFTPAckPacket tftpackpacketVar15;
boolean booleanVar16 = booleanLiteral17;
beginBufferedOps();
intVar6 = intVar3 = intVar5 = intVar1 = intVar8 = 0;
totalBytesSent = 0L;
intVar4 = 0;
boolean booleanVar18 = booleanLiteral19;
if (mode == TFTP.ASCII_MODE) {
input = new ToNetASCIIInputStream(input);
}
tftppacketVar9 = new TFTPWriteRequestPacket(host, port, filename, mode);
_sendPacket: do {
// first time: block is 0, lastBlock is 0, send a request packet.
// subsequent: block is integer starting at 1, send data packet.
bufferedSend(tftppacketVar9);
_receivePacket: while (true) {
intVar2 = 0;
do {
try {
tftppacketVar10 = bufferedReceive();
break;
} catch (SocketException e) {
if (++intVar2 >= __maxTimeouts) {
endBufferedOps();
throw new IOException(""Connection timed out."");
}
continue _sendPacket;
} catch (InterruptedIOException e) {
if (++intVar2 >= __maxTimeouts) {
endBufferedOps();
throw new IOException(""Connection timed out."");
}
continue _sendPacket;
} catch (TFTPPacketException e) {
endBufferedOps();
throw new IOException(""Bad packet: "" + e.getMessage());
}
} while (intVar2 < __maxTimeouts);
if (booleanVar16) {
booleanVar16 = false;
intVar5 = tftppacketVar10.getPort();
tftpdatapacketVar13.setPort(intVar5);
if (!host.equals(tftppacketVar10.getAddress())) {
host = tftppacketVar10.getAddress();
tftpdatapacketVar13.setAddress(host);
tftppacketVar9.setAddress(host);
}
}
if (host.equals(tftppacketVar10.getAddress()) && tftppacketVar10.getPort() == intVar5) {
switch(tftppacketVar10.getType()) {
case TFTPPacket.ERROR:
tftperrorpacketVar12 = (TFTPErrorPacket) tftppacketVar10;
endBufferedOps();
throw new IOException(""Error code "" + tftperrorpacketVar12.getError() + "" received: "" + tftperrorpacketVar12.getMessage());
case TFTPPacket.ACKNOWLEDGEMENT:
tftpackpacketVar15 = (TFTPAckPacket) tftppacketVar10;
intVar3 = tftpackpacketVar15.getBlockNumber();
if (intVar3 == intVar4) {
++intVar4;
if (intVar4 > 65535) {
intVar4 = 0;
}
if (booleanVar18) {
break _sendPacket;
} else {
break _receivePacket;
}
} else {
discardPackets();
continue _receivePacket;
}
default:
endBufferedOps();
throw new IOException(""Received unexpected packet type."");
}
} else {
tftperrorpacketVar12 = new TFTPErrorPacket(tftppacketVar10.getAddress(), tftppacketVar10.getPort(), TFTPErrorPacket.UNKNOWN_TID, ""Unexpected host or port."");
bufferedSend(tftperrorpacketVar12);
continue _sendPacket;
}
}
intVar6 = TFTPPacket.SEGMENT_SIZE;
intVar7 = 4;
intVar8 = 0;
while (intVar6 > 0 && (intVar1 = input.read(_sendBuffer, intVar7, intVar6)) > 0) {
intVar7 += intVar1;
intVar6 -= intVar1;
intVar8 += intVar1;
}
if (intVar8 < TFTPPacket.SEGMENT_SIZE) {
booleanVar18 = true;
}
tftpdatapacketVar13.setBlockNumber(intVar4);
tftpdatapacketVar13.setData(_sendBuffer, 4, intVar8);
tftppacketVar9 = tftpdatapacketVar13;
totalBytesSent += intVar8;
} while (intVar8 > 0 || booleanVar18);
// Note: this was looping while dataLength == 0 || lastAckWait,
endBufferedOps();
}",1
"@Override
public void returnObject(final K key, final V obj) {
WriteLock writelockVar1 = writelockLiteral2;
writelockVar1.tryLock();
try {
keyedPool.returnObject(key, obj);
} catch (Exception e) {
} finally {
writelockVar1.unlock();
}
}",0
"public void close() {
try {
keyedPool.close();
} catch (Exception e) {
}
}",0
"@Override
public void addObject() throws Exception, IllegalStateException, UnsupportedOperationException {
WriteLock writelockVar1 = writelockLiteral2;
writelockVar1.tryLock();
try {
pool.addObject();
} finally {
writelockVar1.unlock();
}
}",0
"@Override
public synchronized void returnObject(T obj) throws Exception {
boolean booleanVar1 = booleanLiteral2;
if (_factory != null) {
if (!_factory.validateObject(obj)) {
booleanVar1 = false;
} else {
try {
_factory.passivateObject(obj);
} catch (Exception e) {
booleanVar1 = false;
}
}
}
boolean booleanVar3 = booleanLiteral4;
_numActive--;
if (booleanVar1) {
_pool.add(new SoftReference<T>(obj, refQueue));
}
notifyAll();
if (booleanVar3 && _factory != null) {
try {
_factory.destroyObject(obj);
} catch (Exception e) {
}
}
}",0
"public void invalidateObject(final K key, final V obj) {
synchronized (lock) {
try {
keyedPool.invalidateObject(key, obj);
} catch (Exception e) {
}
}
}",0
"public void returnObject(final V obj) {
try {
keyedPool.returnObject(key, obj);
} catch (Exception e) {
}
}",0
"public void evict() throws Exception {
assertOpen();
if (getNumIdle() == 0) {
return;
}
boolean booleanVar1 = booleanLiteral2;
long longVar3 = longLiteral4;
if (getMinEvictableIdleTimeMillis() > 0) {
longVar3 = getMinEvictableIdleTimeMillis();
}
PooledObject<T> pooledobject<t>Var5 = pooledobject<t>Literal6;
LinkedBlockingDeque<PooledObject<T>> linkedblockingdeque<pooledobject<t>>Var7 = pooledobject<t>Literal6;
for (int intVar18 = intLiteral19, intVar20 = intLiteral21; intVar8 < intLiteral1; intVar8++) {
if (evictionIterator == null || !evictionIterator.hasNext()) {
if (evictionKeyIterator == null || !evictionKeyIterator.hasNext()) {
List<K> list<k>Var12 = list<k>Literal13;
list<k>Var12.addAll(poolKeyList);
evictionKeyIterator = list<k>Var12.iterator();
}
while (evictionKeyIterator.hasNext()) {
evictionKey = evictionKeyIterator.next();
ObjectDeque<T> objectdeque<t>Var14 = objectdeque<t>Literal15;
if (objectdeque<t>Var14 == null) {
continue;
}
linkedblockingdeque<pooledobject<t>>Var7 = objectdeque<t>Var14.getIdleObjects();
if (getLifo()) {
evictionIterator = linkedblockingdeque<pooledobject<t>>Var7.descendingIterator();
} else {
evictionIterator = linkedblockingdeque<pooledobject<t>>Var7.iterator();
}
if (evictionIterator.hasNext()) {
break;
}
evictionIterator = null;
}
}
if (evictionIterator == null) {
return;
}
try {
pooledobject<t>Var5 = evictionIterator.next();
} catch (NoSuchElementException nsee) {
intVar8--;
evictionIterator = null;
continue;
}
if (!pooledobject<t>Var5.startEvictionTest()) {
intVar8--;
continue;
}
if (longVar3 < pooledobject<t>Var5.getIdleTimeMillis()) {
destroy(evictionKey, pooledobject<t>Var5, true);
destroyedByEvictorCount.incrementAndGet();
} else {
if (booleanVar1) {
boolean booleanVar16 = booleanLiteral17;
try {
factory.activateObject(evictionKey, pooledobject<t>Var5.getObject());
booleanVar16 = true;
} catch (Exception e) {
destroy(evictionKey, pooledobject<t>Var5, true);
destroyedByEvictorCount.incrementAndGet();
}
if (booleanVar16) {
if (!factory.validateObject(evictionKey, pooledobject<t>Var5.getObject())) {
destroy(evictionKey, pooledobject<t>Var5, true);
destroyedByEvictorCount.incrementAndGet();
} else {
try {
factory.passivateObject(evictionKey, pooledobject<t>Var5.getObject());
} catch (Exception e) {
destroy(evictionKey, pooledobject<t>Var5, true);
destroyedByEvictorCount.incrementAndGet();
}
}
}
}
if (!pooledobject<t>Var5.endEvictionTest(linkedblockingdeque<pooledobject<t>>Var7)) {
}
}
}
}",0
"private void allocate() {
boolean booleanVar1 = booleanLiteral2;
synchronized (this) {
if (isClosed())
return;
for (; ; ) {
if (!_allocationQueue.isEmpty()) {
Latch latchVar3 = latchLiteral4;
ObjectQueue objectqueueVar5 = objectqueueLiteral6;
if (null == objectqueueVar5) {
objectqueueVar5 = new ObjectQueue();
_poolMap.put(latchVar3.getkey(), objectqueueVar5);
_poolList.add(latchVar3.getkey());
}
latchVar3.setPool(objectqueueVar5);
if (!objectqueueVar5.queue.isEmpty()) {
_allocationQueue.removeFirst();
latchVar3.setPair((ObjectTimestampPair) objectqueueVar5.queue.removeFirst());
objectqueueVar5.incrementInternalProcessingCount();
_totalIdle--;
synchronized (latchVar3) {
latchVar3.notify();
}
continue;
}
if ((_maxTotal > 0) && (_totalActive + _totalIdle + _totalInternalProcessing >= _maxTotal)) {
booleanVar1 = true;
break;
}
if ((_maxActive < 0 || objectqueueVar5.activeCount + objectqueueVar5.internalProcessingCount < _maxActive) && (_maxTotal < 0 || _totalActive + _totalIdle + _totalInternalProcessing < _maxTotal)) {
_allocationQueue.removeFirst();
latchVar3.setMayCreate(true);
objectqueueVar5.incrementInternalProcessingCount();
synchronized (latchVar3) {
latchVar3.notify();
}
continue;
}
}
break;
}
}
if (booleanVar1) {
clearOldest();
}
}",0
"@Override
public void returnObject(T obj) throws Exception {
try {
addObjectToPool(obj, true);
} catch (Exception e) {
if (_factory != null) {
try {
_factory.destroyObject(obj);
} catch (Exception e2) {
}
// TODO: Correctness here depends on control in addObjectToPool.
synchronized (this) {
_numActiveOld--;
}
allocate();
}
}
}",0
"@Override
public void evict() throws E {
assertOpen();
if (getNumIdle() > 0) {
PooledObject<T> pooledobject<t>Var1 = pooledobject<t>Literal2;
final EvictionPolicy<T> evictionpolicy<t>Var3 = evictionpolicy<t>Literal4;
synchronized (evictionLock) {
final EvictionConfig evictionconfigVar5 = evictionconfigLiteral6;
final boolean booleanVar7 = booleanLiteral8;
for (int intVar28 = intLiteral29, intVar30 = intLiteral31; intVar9 < intLiteral1; intVar9++) {
if (evictionIterator == null || !evictionIterator.hasNext()) {
if (evictionKeyIterator == null || !evictionKeyIterator.hasNext()) {
final List<K> list<k>Var13 = list<k>Literal14;
final Lock lockVar15 = lockLiteral16;
lockVar15.lock();
try {
list<k>Var13.addAll(poolKeyList);
} finally {
lockVar15.unlock();
}
evictionKeyIterator = list<k>Var13.iterator();
}
while (evictionKeyIterator.hasNext()) {
evictionKey = evictionKeyIterator.next();
final ObjectDeque<T> objectdeque<t>Var17 = objectdeque<t>Literal18;
if (objectdeque<t>Var17 == null) {
continue;
}
final Deque<PooledObject<T>> deque<pooledobject<t>>Var19 = deque<pooledobject<t>>Literal20;
evictionIterator = new EvictionIterator(deque<pooledobject<t>>Var19);
if (evictionIterator.hasNext()) {
break;
}
evictionIterator = null;
}
}
if (evictionIterator == null) {
return;
}
final Deque<PooledObject<T>> deque<pooledobject<t>>Var19;
try {
pooledobject<t>Var1 = evictionIterator.next();
deque<pooledobject<t>>Var19 = evictionIterator.getIdleObjects();
} catch (final NoSuchElementException nsee) {
intVar9--;
evictionIterator = null;
continue;
}
if (!pooledobject<t>Var1.startEvictionTest()) {
intVar9--;
continue;
}
boolean booleanVar21;
try {
booleanVar21 = evictionpolicy<t>Var3.evict(evictionconfigVar5, pooledobject<t>Var1, poolMap.get(evictionKey).getIdleObjects().size());
} catch (final Throwable t) {
PoolUtils.checkRethrow(t);
swallowException(new Exception(t));
booleanVar21 = false;
}
if (booleanVar21) {
destroy(evictionKey, pooledobject<t>Var1, true, DestroyMode.NORMAL);
destroyedByEvictorCount.incrementAndGet();
} else {
if (booleanVar7) {
boolean booleanVar22 = booleanLiteral23;
try {
factory.activateObject(evictionKey, pooledobject<t>Var1);
booleanVar22 = true;
} catch (final Exception e) {
destroy(evictionKey, pooledobject<t>Var1, true, DestroyMode.NORMAL);
destroyedByEvictorCount.incrementAndGet();
}
if (booleanVar22) {
boolean booleanVar24 = booleanLiteral23;
Throwable throwableVar25 = pooledobject<t>Literal2;
try {
booleanVar24 = factory.validateObject(evictionKey, pooledobject<t>Var1);
} catch (final Throwable t) {
PoolUtils.checkRethrow(t);
throwableVar25 = t;
}
if (!booleanVar24) {
destroy(evictionKey, pooledobject<t>Var1, true, DestroyMode.NORMAL);
destroyedByEvictorCount.incrementAndGet();
if (throwableVar25 != null) {
if (throwableVar25 instanceof RuntimeException) {
throw (RuntimeException) throwableVar25;
}
throw (Error) throwableVar25;
}
} else {
try {
factory.passivateObject(evictionKey, pooledobject<t>Var1);
} catch (final Exception e) {
destroy(evictionKey, pooledobject<t>Var1, true, DestroyMode.NORMAL);
destroyedByEvictorCount.incrementAndGet();
}
}
}
}
if (!pooledobject<t>Var1.endEvictionTest(deque<pooledobject<t>>Var19)) {
}
}
}
}
}
final AbandonedConfig abandonedconfigVar26 = abandonedconfigLiteral27;
if (abandonedconfigVar26 != null && abandonedconfigVar26.getRemoveAbandonedOnMaintenance()) {
removeAbandoned(abandonedconfigVar26);
}
}",0
"@Override
public void run() {
boolean booleanVar1 = booleanLiteral2;
try {
if (keyedPool.getNumIdle(key) < minIdle) {
keyedPool.addObject(key);
}
booleanVar1 = true;
} catch (final Exception e) {
cancel();
} finally {
if (!booleanVar1) {
cancel();
}
}
}",0
"public void setFactory(KeyedPoolableObjectFactory<K, V> factory) throws IllegalStateException {
Map mapVar1 = mapLiteral2;
final KeyedPoolableObjectFactory<K, V> keyedpoolableobjectfactory<k,v>Var3 = keyedpoolableobjectfactory<k,v>Literal4;
synchronized (this) {
assertOpen();
if (0 < getNumActive()) {
throw new IllegalStateException(""Objects are already active"");
} else {
for (Iterator<K> iterator<k>Var13 = iterator<k>Literal14; iterator<k>Var5.hasNext(); ) {
K kVar7 = kLiteral8;
ObjectQueue objectqueueVar9 = objectqueueLiteral10;
if (objectqueueVar9 != null) {
List listVar11 = listLiteral12;
listVar11.addAll(objectqueueVar9.queue);
mapVar1.put(kVar7, listVar11);
iterator<k>Var5.remove();
_poolList.remove(kVar7);
_totalIdle = _totalIdle - objectqueueVar9.queue.size();
_totalInternalProcessing = _totalInternalProcessing + objectqueueVar9.queue.size();
objectqueueVar9.queue.clear();
}
}
_factory = factory;
}
}
destroy(mapVar1, keyedpoolableobjectfactory<k,v>Var3);
}",0
"public synchronized Object borrowObject() throws Exception {
assertOpen();
Object objectVar1 = objectLiteral2;
boolean booleanVar3 = booleanLiteral4;
while (null == objectVar1) {
if (!_pool.empty()) {
objectVar1 = _pool.pop();
} else {
if (null == _factory) {
throw new NoSuchElementException();
} else {
booleanVar3 = true;
objectVar1 = _factory.makeObject();
if (objectVar1 == null) {
throw new NoSuchElementException(""PoolableObjectFactory.makeObject() returned null."");
}
}
}
if (!booleanVar3 && null != _factory && null != objectVar1) {
try {
_factory.activateObject(objectVar1);
} catch (Exception e) {
try {
_factory.destroyObject(objectVar1);
} catch (Exception e2) {
} finally {
objectVar1 = null;
}
}
}
if (!booleanVar3 && null != _factory && null != objectVar1) {
boolean booleanVar5 = booleanLiteral4;
try {
booleanVar5 = _factory.validateObject(objectVar1);
} catch (Exception e) {
}
if (!booleanVar5) {
try {
_factory.destroyObject(objectVar1);
} catch (Exception e) {
} finally {
objectVar1 = null;
}
}
}
}
_numActive++;
return objectVar1;
}",0
"public void returnObject(final V obj) {
try {
keyedPool.returnObject(key, obj);
} catch (Exception e) {
}
}",0
"public synchronized void clearOldest() {
final Map mapVar1 = mapLiteral2;
for (Iterator iteratorVar23 = iteratorLiteral24; iteratorVar3.hasNext(); ) {
final Object objectVar5 = objectLiteral6;
final LinkedList linkedlistVar7 = linkedlistLiteral8;
for (Iterator iteratorVar25 = iteratorLiteral26; iteratorVar9.hasNext(); ) {
mapVar1.put(iteratorVar9.next(), objectVar5);
}
}
Set setVar11 = setLiteral12;
int intVar13 = intLiteral14;
Iterator iteratorVar15 = iteratorLiteral16;
while (iteratorVar15.hasNext() && intVar13 > 0) {
Map.Entry map.entryVar17 = map.entryLiteral18;
Object objectVar5 = objectLiteral19;
ObjectTimestampPair objecttimestamppairVar20 = objecttimestamppairLiteral21;
final LinkedList linkedlistVar7 = linkedlistLiteral22;
linkedlistVar7.remove(objecttimestamppairVar20);
try {
_factory.destroyObject(objectVar5, objecttimestamppairVar20.value);
} catch (Exception e) {
}
if (linkedlistVar7.isEmpty()) {
_poolMap.remove(objectVar5);
}
_totalIdle--;
intVar13--;
}
notifyAll();
}",0
"public void invalidateObject(final K key, final V obj) {
synchronized (lock) {
try {
keyedPool.invalidateObject(key, obj);
} catch (Exception e) {
}
}
}",0
"public T borrowObject(final long borrowMaxWaitMillis) throws Exception {
assertOpen();
final AbandonedConfig abandonedconfigVar1 = abandonedconfigLiteral2;
if (abandonedconfigVar1 != null && abandonedconfigVar1.getRemoveAbandonedOnBorrow() && (getNumIdle() < 2) && (getNumActive() > getMaxTotal() - 3)) {
removeAbandoned(abandonedconfigVar1);
}
PooledObject<T> pooledobject<t>Var3 = pooledobject<t>Literal4;
final boolean booleanVar5 = booleanLiteral6;
boolean booleanVar7;
final long longVar8 = longLiteral9;
while (pooledobject<t>Var3 == null) {
booleanVar7 = false;
pooledobject<t>Var3 = idleObjects.pollFirst();
if (pooledobject<t>Var3 == null) {
pooledobject<t>Var3 = create();
if (pooledobject<t>Var3 != null) {
booleanVar7 = true;
}
}
if (booleanVar5) {
if (pooledobject<t>Var3 == null) {
if (borrowMaxWaitMillis < 0) {
pooledobject<t>Var3 = idleObjects.takeFirst();
} else {
pooledobject<t>Var3 = idleObjects.pollFirst(borrowMaxWaitMillis, TimeUnit.MILLISECONDS);
}
}
if (pooledobject<t>Var3 == null) {
throw new NoSuchElementException(""Timeout waiting for idle object"");
}
} else {
if (pooledobject<t>Var3 == null) {
throw new NoSuchElementException(""Pool exhausted"");
}
}
if (!pooledobject<t>Var3.allocate()) {
pooledobject<t>Var3 = null;
}
if (pooledobject<t>Var3 != null) {
try {
factory.activateObject(pooledobject<t>Var3);
} catch (final Exception e) {
try {
destroy(pooledobject<t>Var3);
} catch (final Exception e1) {
}
pooledobject<t>Var3 = null;
if (booleanVar7) {
final NoSuchElementException nosuchelementexceptionVar10 = nosuchelementexceptionLiteral11;
nosuchelementexceptionVar10.initCause(e);
throw nosuchelementexceptionVar10;
}
}
if (pooledobject<t>Var3 != null && (getTestOnBorrow() || booleanVar7 && getTestOnCreate())) {
boolean booleanVar12 = booleanLiteral13;
Throwable throwableVar14 = pooledobject<t>Literal4;
try {
booleanVar12 = factory.validateObject(pooledobject<t>Var3);
} catch (final Throwable t) {
PoolUtils.checkRethrow(t);
throwableVar14 = t;
}
if (!booleanVar12) {
try {
destroy(pooledobject<t>Var3);
destroyedByBorrowValidationCount.incrementAndGet();
} catch (final Exception e) {
}
pooledobject<t>Var3 = null;
if (booleanVar7) {
final NoSuchElementException nosuchelementexceptionVar10 = nosuchelementexceptionLiteral15;
nosuchelementexceptionVar10.initCause(throwableVar14);
throw nosuchelementexceptionVar10;
}
}
}
}
}
updateStatsBorrow(pooledobject<t>Var3, System.currentTimeMillis() - longVar8);
return pooledobject<t>Var3.getObject();
}",0
private int intVar1;,0
"public T borrowObject(K key, long borrowMaxWaitMillis) throws Exception {
assertOpen();
PooledObject<T> pooledobject<t>Var1 = pooledobject<t>Literal2;
boolean booleanVar3 = booleanLiteral4;
boolean booleanVar5;
long longVar6 = longLiteral7;
ObjectDeque<T> objectdeque<t>Var8 = objectdeque<t>Literal9;
try {
while (pooledobject<t>Var1 == null) {
booleanVar5 = false;
if (booleanVar3) {
pooledobject<t>Var1 = objectdeque<t>Var8.getIdleObjects().pollFirst();
if (pooledobject<t>Var1 == null) {
pooledobject<t>Var1 = create(key);
if (pooledobject<t>Var1 != null) {
booleanVar5 = true;
}
}
if (pooledobject<t>Var1 == null) {
if (borrowMaxWaitMillis < 0) {
pooledobject<t>Var1 = objectdeque<t>Var8.getIdleObjects().takeFirst();
} else {
pooledobject<t>Var1 = objectdeque<t>Var8.getIdleObjects().pollFirst(borrowMaxWaitMillis, TimeUnit.MILLISECONDS);
}
}
if (pooledobject<t>Var1 == null) {
throw new NoSuchElementException(""Timeout waiting for idle object"");
}
if (!pooledobject<t>Var1.allocate()) {
pooledobject<t>Var1 = null;
}
} else {
pooledobject<t>Var1 = objectdeque<t>Var8.getIdleObjects().pollFirst();
if (pooledobject<t>Var1 == null) {
pooledobject<t>Var1 = create(key);
if (pooledobject<t>Var1 != null) {
booleanVar5 = true;
}
}
if (pooledobject<t>Var1 == null) {
throw new NoSuchElementException(""Pool exhausted"");
}
if (!pooledobject<t>Var1.allocate()) {
pooledobject<t>Var1 = null;
}
}
if (pooledobject<t>Var1 != null) {
try {
factory.activateObject(key, pooledobject<t>Var1);
} catch (Exception e) {
try {
destroy(key, pooledobject<t>Var1, true);
} catch (Exception e1) {
}
pooledobject<t>Var1 = null;
if (booleanVar5) {
NoSuchElementException nosuchelementexceptionVar10 = nosuchelementexceptionLiteral11;
nosuchelementexceptionVar10.initCause(e);
throw nosuchelementexceptionVar10;
}
}
if (pooledobject<t>Var1 != null && (getTestOnBorrow() || booleanVar5 && getTestOnCreate())) {
boolean booleanVar12 = booleanLiteral13;
Throwable throwableVar14 = pooledobject<t>Literal2;
try {
booleanVar12 = factory.validateObject(key, pooledobject<t>Var1);
} catch (Throwable t) {
PoolUtils.checkRethrow(t);
throwableVar14 = t;
}
if (!booleanVar12) {
try {
destroy(key, pooledobject<t>Var1, true);
destroyedByBorrowValidationCount.incrementAndGet();
} catch (Exception e) {
}
pooledobject<t>Var1 = null;
if (booleanVar5) {
NoSuchElementException nosuchelementexceptionVar10 = nosuchelementexceptionLiteral15;
nosuchelementexceptionVar10.initCause(throwableVar14);
throw nosuchelementexceptionVar10;
}
}
}
}
}
} finally {
deregister(key);
}
updateStatsBorrow(pooledobject<t>Var1, System.currentTimeMillis() - longVar6);
return pooledobject<t>Var1.getObject();
}",0
"@Override
public void close() {
WriteLock writelockVar1 = writelockLiteral2;
writelockVar1.tryLock();
try {
keyedPool.close();
} catch (Exception e) {
} finally {
writelockVar1.unlock();
}
}",0
"@Override
public void clear() throws Exception, UnsupportedOperationException {
WriteLock writelockVar1 = writelockLiteral2;
writelockVar1.tryLock();
try {
pool.clear();
} finally {
writelockVar1.unlock();
}
}",0
"@Override
public void run() {
try {
evict();
} catch (Exception e) {
} catch (OutOfMemoryError oome) {
oome.printStackTrace(System.err);
}
try {
ensureMinIdle();
} catch (Exception e) {
}
}",0
"public T borrowObject(K key, long borrowMaxWaitMillis) throws Exception {
assertOpen();
PooledObject<T> pooledobject<t>Var1 = pooledobject<t>Literal2;
boolean booleanVar3 = booleanLiteral4;
boolean booleanVar5;
long longVar6 = longLiteral7;
ObjectDeque<T> objectdeque<t>Var8 = objectdeque<t>Literal9;
try {
while (pooledobject<t>Var1 == null) {
booleanVar5 = false;
if (booleanVar3) {
if (objectdeque<t>Var8 != null) {
pooledobject<t>Var1 = objectdeque<t>Var8.getIdleObjects().pollFirst();
}
if (pooledobject<t>Var1 == null) {
booleanVar5 = true;
pooledobject<t>Var1 = create(key);
}
if (pooledobject<t>Var1 == null && objectdeque<t>Var8 != null) {
if (borrowMaxWaitMillis < 0) {
pooledobject<t>Var1 = objectdeque<t>Var8.getIdleObjects().takeFirst();
} else {
longVar6 = System.currentTimeMillis();
pooledobject<t>Var1 = objectdeque<t>Var8.getIdleObjects().pollFirst(borrowMaxWaitMillis, TimeUnit.MILLISECONDS);
longVar6 = System.currentTimeMillis() - longVar6;
}
}
if (pooledobject<t>Var1 == null) {
throw new NoSuchElementException(""Timeout waiting for idle object"");
}
if (!pooledobject<t>Var1.allocate()) {
pooledobject<t>Var1 = null;
}
} else {
if (objectdeque<t>Var8 != null) {
pooledobject<t>Var1 = objectdeque<t>Var8.getIdleObjects().pollFirst();
}
if (pooledobject<t>Var1 == null) {
booleanVar5 = true;
pooledobject<t>Var1 = create(key);
}
if (pooledobject<t>Var1 == null) {
throw new NoSuchElementException(""Pool exhausted"");
}
if (!pooledobject<t>Var1.allocate()) {
pooledobject<t>Var1 = null;
}
}
if (pooledobject<t>Var1 != null) {
try {
factory.activateObject(key, pooledobject<t>Var1.getObject());
} catch (Exception e) {
try {
destroy(key, pooledobject<t>Var1, true);
} catch (Exception e1) {
}
pooledobject<t>Var1 = null;
if (booleanVar5) {
NoSuchElementException nosuchelementexceptionVar10 = nosuchelementexceptionLiteral11;
nosuchelementexceptionVar10.initCause(e);
throw nosuchelementexceptionVar10;
}
}
if (pooledobject<t>Var1 != null && getTestOnBorrow()) {
boolean booleanVar12 = booleanLiteral13;
Throwable throwableVar14 = pooledobject<t>Literal2;
try {
booleanVar12 = factory.validateObject(key, pooledobject<t>Var1.getObject());
} catch (Throwable t) {
PoolUtils.checkRethrow(t);
}
if (!booleanVar12) {
try {
destroy(key, pooledobject<t>Var1, true);
destroyedByBorrowValidationCount.incrementAndGet();
} catch (Exception e) {
}
pooledobject<t>Var1 = null;
if (booleanVar5) {
NoSuchElementException nosuchelementexceptionVar10 = nosuchelementexceptionLiteral15;
nosuchelementexceptionVar10.initCause(throwableVar14);
throw nosuchelementexceptionVar10;
}
}
}
}
}
} finally {
deregister(key);
}
updateStatsBorrow(pooledobject<t>Var1, longVar6);
return pooledobject<t>Var1.getObject();
}",0
private int intVar1;,1
private int intVar1;,1
private boolean booleanVar1 = booleanLiteral2;,1
"@Override
public boolean validateObject(final K key, final V obj) {
writeLock.tryLock();
try {
return keyedFactory.validateObject(key, obj);
} finally {
writeLock.unlock();
}
}",1
"@Override
public void activateObject(final T obj) throws Exception {
writeLock.tryLock();
try {
factory.activateObject(obj);
} finally {
writeLock.unlock();
}
}",1
"@Override
public int getNumActive() {
ReadLock readlockVar1 = readlockLiteral2;
readlockVar1.tryLock();
try {
return keyedPool.getNumActive();
} finally {
readlockVar1.unlock();
}
}",1
"@Override
public synchronized T borrowObject() throws Exception {
assertOpen();
T tVar1 = tLiteral2;
boolean booleanVar3 = booleanLiteral4;
while (null == tVar1) {
if (!_pool.empty()) {
tVar1 = _pool.pop();
} else {
if (null == _factory) {
throw new NoSuchElementException();
} else {
tVar1 = _factory.makeObject();
booleanVar3 = true;
if (tVar1 == null) {
throw new NoSuchElementException(""PoolableObjectFactory.makeObject() returned null."");
}
}
}
if (null != _factory && null != tVar1) {
try {
_factory.activateObject(tVar1);
if (!_factory.validateObject(tVar1)) {
throw new Exception(""ValidateObject failed"");
}
} catch (Throwable t) {
PoolUtils.checkRethrow(t);
try {
_factory.destroyObject(tVar1);
} catch (Throwable t2) {
PoolUtils.checkRethrow(t2);
} finally {
tVar1 = null;
}
if (booleanVar3) {
throw new NoSuchElementException(""Could not create a validated object, cause: "" + t.getMessage());
}
}
}
}
_numActive++;
return tVar1;
}",1
"@Override
public void returnObject(final T obj) {
WriteLock writelockVar1 = writelockLiteral2;
writelockVar1.tryLock();
try {
pool.returnObject(obj);
} catch (Exception e) {
} finally {
writelockVar1.unlock();
}
}",1
private int intVar1;,1
"public void clearOldest() {
final Map<K, List<ObjectTimestampPair<V>>> map<k,list<objecttimestamppair<v>>>Var1 = map<k,list<objecttimestamppair<v>>>Literal2;
final Map<ObjectTimestampPair<V>, K> map<objecttimestamppair<v>,k>Var3 = map<objecttimestamppair<v>,k>Literal4;
synchronized (this) {
for (Iterator<K> iterator<k>Var29 = iterator<k>Literal30; iterator<k>Var5.hasNext(); ) {
final K kVar7 = kLiteral8;
final CursorableLinkedList<ObjectTimestampPair<V>> cursorablelinkedlist<objecttimestamppair<v>>Var9 = cursorablelinkedlist<objecttimestamppair<v>>Literal10;
for (Iterator<ObjectTimestampPair<V>> iterator<objecttimestamppair<v>>Var31 = iterator<objecttimestamppair<v>>Literal32; iterator<objecttimestamppair<v>>Var11.hasNext(); ) {
map<objecttimestamppair<v>,k>Var3.put(iterator<objecttimestamppair<v>>Var11.next(), kVar7);
}
}
Set<Map.Entry<ObjectTimestampPair<V>, K>> set<map.entry<objecttimestamppair<v>,k>>Var13 = set<map.entry<objecttimestamppair<v>,k>>Literal14;
int intVar15 = intLiteral16;
Iterator<Map.Entry<ObjectTimestampPair<V>, K>> iterator<map.entry<objecttimestamppair<v>,k>>Var17 = iterator<map.entry<objecttimestamppair<v>,k>>Literal18;
while (iterator<map.entry<objecttimestamppair<v>,k>>Var17.hasNext() && intVar15 > 0) {
Map.Entry<ObjectTimestampPair<V>, K> map.entry<objecttimestamppair<v>,k>Var19 = map.entry<objecttimestamppair<v>,k>Literal20;
K kVar7 = kLiteral21;
ObjectTimestampPair<V> objecttimestamppair<v>Var22 = objecttimestamppair<v>Literal23;
ObjectQueue objectqueueVar24 = objectqueueLiteral25;
final CursorableLinkedList<ObjectTimestampPair<V>> cursorablelinkedlist<objecttimestamppair<v>>Var9 = cursorablelinkedlist<objecttimestamppair<v>>Literal26;
cursorablelinkedlist<objecttimestamppair<v>>Var9.remove(objecttimestamppair<v>Var22);
if (map<k,list<objecttimestamppair<v>>>Var1.containsKey(kVar7)) {
map<k,list<objecttimestamppair<v>>>Var1.get(kVar7).add(objecttimestamppair<v>Var22);
} else {
List<ObjectTimestampPair<V>> list<objecttimestamppair<v>>Var27 = list<objecttimestamppair<v>>Literal28;
list<objecttimestamppair<v>>Var27.add(objecttimestamppair<v>Var22);
map<k,list<objecttimestamppair<v>>>Var1.put(kVar7, list<objecttimestamppair<v>>Var27);
}
objectqueueVar24.incrementInternalProcessingCount();
_totalIdle--;
intVar15--;
}
}
destroy(map<k,list<objecttimestamppair<v>>>Var1, _factory);
}",1
"private boolean hasBorrowWaiters() {
for (final K kVar1 : poolMap.keySet()) {
final ObjectDeque<T> objectdeque<t>Var2 = objectdeque<t>Literal3;
if (objectdeque<t>Var2 != null) {
final LinkedBlockingDeque<PooledObject<T>> linkedblockingdeque<pooledobject<t>>Var4 = linkedblockingdeque<pooledobject<t>>Literal5;
if (linkedblockingdeque<pooledobject<t>>Var4.hasTakeWaiters()) {
return true;
}
}
}
return false;
}",1
private boolean booleanVar1 = booleanLiteral2;,1
private boolean booleanVar1 = booleanLiteral2;,1
private PoolableObjectFactory poolableobjectfactoryVar1 = poolableobjectfactoryLiteral2;,1
"@Override
public boolean validateObject(final T obj) {
writeLock.tryLock();
try {
return factory.validateObject(obj);
} finally {
writeLock.unlock();
}
}",1
"public T borrowObject(K key, long borrowMaxWaitMillis) throws Exception {
assertOpen();
PooledObject<T> pooledobject<t>Var1 = pooledobject<t>Literal2;
boolean booleanVar3 = booleanLiteral4;
boolean booleanVar5;
long longVar6 = longLiteral7;
ObjectDeque<T> objectdeque<t>Var8 = objectdeque<t>Literal9;
try {
while (pooledobject<t>Var1 == null) {
booleanVar5 = false;
if (booleanVar3) {
if (objectdeque<t>Var8 != null) {
pooledobject<t>Var1 = objectdeque<t>Var8.getIdleObjects().pollFirst();
}
if (pooledobject<t>Var1 == null) {
booleanVar5 = true;
pooledobject<t>Var1 = create(key);
}
if (pooledobject<t>Var1 == null && objectdeque<t>Var8 != null) {
if (borrowMaxWaitMillis < 0) {
pooledobject<t>Var1 = objectdeque<t>Var8.getIdleObjects().takeFirst();
} else {
longVar6 = System.currentTimeMillis();
pooledobject<t>Var1 = objectdeque<t>Var8.getIdleObjects().pollFirst(borrowMaxWaitMillis, TimeUnit.MILLISECONDS);
longVar6 = System.currentTimeMillis() - longVar6;
}
}
if (pooledobject<t>Var1 == null) {
throw new NoSuchElementException(""Timeout waiting for idle object"");
}
if (!pooledobject<t>Var1.allocate()) {
pooledobject<t>Var1 = null;
}
} else {
if (objectdeque<t>Var8 != null) {
pooledobject<t>Var1 = objectdeque<t>Var8.getIdleObjects().pollFirst();
}
if (pooledobject<t>Var1 == null) {
booleanVar5 = true;
pooledobject<t>Var1 = create(key);
}
if (pooledobject<t>Var1 == null) {
throw new NoSuchElementException(""Pool exhausted"");
}
if (!pooledobject<t>Var1.allocate()) {
pooledobject<t>Var1 = null;
}
}
if (pooledobject<t>Var1 != null) {
try {
factory.activateObject(key, pooledobject<t>Var1.getObject());
} catch (Exception e) {
try {
destroy(key, pooledobject<t>Var1, true);
} catch (Exception e1) {
}
pooledobject<t>Var1 = null;
if (booleanVar5) {
NoSuchElementException nosuchelementexceptionVar10 = nosuchelementexceptionLiteral11;
nosuchelementexceptionVar10.initCause(e);
throw nosuchelementexceptionVar10;
}
}
if (pooledobject<t>Var1 != null && getTestOnBorrow()) {
boolean booleanVar12 = booleanLiteral13;
Throwable throwableVar14 = pooledobject<t>Literal2;
try {
booleanVar12 = factory.validateObject(key, pooledobject<t>Var1.getObject());
} catch (Throwable t) {
PoolUtils.checkRethrow(t);
throwableVar14 = t;
}
if (!booleanVar12) {
try {
destroy(key, pooledobject<t>Var1, true);
destroyedByBorrowValidationCount.incrementAndGet();
} catch (Exception e) {
}
pooledobject<t>Var1 = null;
if (booleanVar5) {
NoSuchElementException nosuchelementexceptionVar10 = nosuchelementexceptionLiteral15;
nosuchelementexceptionVar10.initCause(throwableVar14);
throw nosuchelementexceptionVar10;
}
}
}
}
}
} finally {
deregister(key);
}
updateStatsBorrow(pooledobject<t>Var1, longVar6);
return pooledobject<t>Var1.getObject();
}",1
"@Override
public synchronized void invalidateObject(T obj) throws Exception {
_numActive--;
if (null != _factory) {
_factory.destroyObject(obj);
}
notifyAll();
}",1
"private void decrementActiveCount(K key) {
_totActive--;
Integer integerVar1 = integerLiteral2;
if (null == integerVar1) {
} else if (integerVar1.intValue() <= 1) {
_activeCount.remove(key);
} else {
_activeCount.put(key, new Integer(integerVar1.intValue() - 1));
}
}",1
private byte byteVar1 = byteLiteral2;,1
"synchronized String debugInfo() {
StringBuffer stringbufferVar1 = stringbufferLiteral2;
stringbufferVar1.append(""Active: "").append(getNumActive()).append(""\n"");
stringbufferVar1.append(""Idle: "").append(getNumIdle()).append(""\n"");
for (K kVar3 : _poolMap.keySet()) {
stringbufferVar1.append(""\t"").append(kVar3).append("" "").append(_poolMap.get(kVar3)).append(""\n"");
}
return stringbufferVar1.toString();
}",1
"@Override
public void addObject(K key) throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
V vVar1 = vLiteral2;
try {
assertOpen();
addObjectToPool(key, vVar1, false);
} catch (IllegalStateException ex) {
try {
_factory.destroyObject(key, vVar1);
} catch (Exception ex2) {
}
throw ex;
}
}",1
private boolean booleanVar1 = booleanLiteral2;,1
"@Override
public int compareTo(PooledObject<T> other) {
final long longVar1 = longLiteral2;
if (longVar1 == 0) {
return System.identityHashCode(this) - System.identityHashCode(other);
}
return (int) Math.min(Math.max(longVar1, Integer.MIN_VALUE), Integer.MAX_VALUE);
}",0
"@Override
public void invalidateObject(final K key, final V obj) {
try {
keyedPool.invalidateObject(key, obj);
} catch (Exception e) {
}
}",0
"@Override
public void close() {
try {
pool.close();
} catch (Exception e) {
}
}",0
"@Override
public Map<String, Integer> getNumWaitersByKey() {
Map<String, Integer> map<string,integer>Var1 = map<string,integer>Literal2;
for (K kVar3 : poolMap.keySet()) {
ObjectDeque<T> objectdeque<t>Var4 = objectdeque<t>Literal5;
if (objectdeque<t>Var4 != null) {
if (getBlockWhenExhausted()) {
map<string,integer>Var1.put(kVar3.toString(), Integer.valueOf(objectdeque<t>Var4.getIdleObjects().getTakeQueueLength()));
} else {
map<string,integer>Var1.put(kVar3.toString(), Integer.valueOf(0));
}
}
}
return map<string,integer>Var1;
}",0
"public void invalidateObject(final K key, final V obj) {
try {
pool.invalidateObject(obj);
} catch (Exception e) {
}
}",0
"@Override
public void run() {
boolean booleanVar1 = booleanLiteral2;
try {
if (keyedPool.getNumIdle(key) < minIdle) {
keyedPool.addObject(key);
}
booleanVar1 = true;
} catch (Exception e) {
cancel();
} finally {
if (!booleanVar1) {
cancel();
}
}
}",0
"public int compareTo(ObjectTimestampPair<T> other) {
final long longVar1 = longLiteral2;
if (longVar1 == 0) {
return System.identityHashCode(this) - System.identityHashCode(other);
} else {
return (int) Math.min(Math.max(longVar1, Integer.MIN_VALUE), Integer.MAX_VALUE);
}
}",0
"@Override
public void returnObject(T obj) throws Exception {
try {
addObjectToPool(obj, true);
} catch (Exception e) {
if (_factory != null) {
try {
_factory.destroyObject(obj);
} catch (Exception e2) {
}
// TODO: Correctness here depends on control in addObjectToPool.
synchronized (this) {
_numActive--;
}
allocate();
}
}
}",0
"@Override
public synchronized void addObject() throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
T tVar1 = tLiteral2;
boolean booleanVar3 = booleanLiteral4;
if (!_factory.validateObject(tVar1)) {
booleanVar3 = false;
} else {
_factory.passivateObject(tVar1);
}
boolean booleanVar5 = booleanLiteral6;
if (booleanVar3) {
_pool.add(new SoftReference<T>(tVar1, refQueue));
notifyAll();
}
if (booleanVar5) {
try {
_factory.destroyObject(tVar1);
} catch (Exception e) {
}
}
}",0
"@Override
public synchronized void returnObject(T obj) throws Exception {
boolean booleanVar1 = booleanLiteral2;
if (null != _factory) {
if (!_factory.validateObject(obj)) {
booleanVar1 = false;
} else {
try {
_factory.passivateObject(obj);
} catch (Exception e) {
booleanVar1 = false;
}
}
}
boolean booleanVar3 = booleanLiteral4;
_numActive--;
if (booleanVar1) {
T tVar5 = tLiteral6;
if (_pool.size() >= _maxSleeping) {
booleanVar3 = true;
tVar5 = _pool.remove(0);
}
_pool.push(obj);
obj = tVar5;
}
notifyAll();
if (booleanVar3) {
try {
_factory.destroyObject(obj);
} catch (Exception e) {
}
}
}",0
"public void returnObject(final Object key, final Object obj) {
try {
pool.returnObject(obj);
} catch (Exception e) {
}
}",0
"public void setFactory(KeyedPoolableObjectFactory factory) throws IllegalStateException {
Map mapVar1 = mapLiteral2;
synchronized (this) {
assertOpen();
if (0 < getNumActive()) {
throw new IllegalStateException(""Objects are already active"");
} else {
for (Iterator iteratorVar11 = iteratorLiteral12; iteratorVar3.hasNext(); ) {
Object objectVar5 = objectLiteral6;
ObjectQueue objectqueueVar7 = objectqueueLiteral8;
if (objectqueueVar7 != null) {
List listVar9 = listLiteral10;
listVar9.addAll(objectqueueVar7.queue);
mapVar1.put(objectVar5, listVar9);
iteratorVar3.remove();
_poolList.remove(objectVar5);
_totalIdle = _totalIdle - objectqueueVar7.queue.size();
_totalInternalProcessing = _totalInternalProcessing + objectqueueVar7.queue.size();
objectqueueVar7.queue.clear();
}
}
_factory = factory;
}
}
destroy(mapVar1);
}",0
"public synchronized void preparePool(Object key, boolean populateImmediately) {
ObjectQueue objectqueueVar1 = objectqueueLiteral2;
if (null == objectqueueVar1) {
objectqueueVar1 = new ObjectQueue();
_poolMap.put(key, objectqueueVar1);
_poolList.add(key);
}
if (populateImmediately) {
try {
ensureMinIdle(key);
} catch (Exception e) {
// Do nothing
}
}
}",0
"public void returnObject(Object obj) throws Exception {
try {
addObjectToPool(obj, true);
} catch (Exception e) {
if (_factory != null) {
try {
_factory.destroyObject(obj);
} catch (Exception e2) {
}
// TODO: Correctness here depends on control in addObjectToPool.
synchronized (this) {
_numActive--;
allocate();
}
}
}
}",0
"public void addObject() throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
Object objectVar1 = objectLiteral2;
try {
assertOpen();
addObjectToPool(objectVar1, false);
} catch (IllegalStateException ex) {
try {
_factory.destroyObject(objectVar1);
} catch (Exception ex2) {
}
throw ex;
}
}",0
"public synchronized void returnObject(Object obj) throws Exception {
boolean booleanVar1 = booleanLiteral2;
if (null != _factory) {
if (!_factory.validateObject(obj)) {
booleanVar1 = false;
} else {
try {
_factory.passivateObject(obj);
} catch (Exception e) {
booleanVar1 = false;
}
}
}
boolean booleanVar3 = booleanLiteral4;
_numActive--;
if (booleanVar1) {
Object objectVar5 = objectLiteral6;
if (_pool.size() >= _maxSleeping) {
booleanVar3 = true;
objectVar5 = _pool.remove(0);
}
_pool.push(obj);
obj = objectVar5;
}
notifyAll();
if (booleanVar3) {
try {
_factory.destroyObject(obj);
} catch (Exception e) {
}
}
}",0
"public void close() {
try {
pool.close();
} catch (Exception e) {
}
}",0
"public void returnObject(final Object obj) {
if (type.isInstance(obj)) {
try {
pool.returnObject(obj);
} catch (Exception e) {
}
} else {
throw new ClassCastException(""Returned object is not of type: "" + type.getName() + "" was: "" + obj);
}
}",0
"public void close() {
try {
pool.close();
} catch (Exception e) {
}
}",0
"public void invalidateObject(final Object obj) {
if (type.isInstance(obj)) {
try {
pool.invalidateObject(obj);
} catch (Exception e) {
}
} else {
throw new ClassCastException(""Invalidated object is not of type: "" + type.getName() + "" was: "" + obj);
}
}",0
"public void clear() {
Map mapVar1 = mapLiteral2;
synchronized (this) {
for (Iterator iteratorVar11 = iteratorLiteral12; iteratorVar3.hasNext(); ) {
Object objectVar5 = objectLiteral6;
ObjectQueue objectqueueVar7 = objectqueueLiteral8;
List listVar9 = listLiteral10;
listVar9.addAll(objectqueueVar7.queue);
mapVar1.put(objectVar5, listVar9);
iteratorVar3.remove();
_poolList.remove(objectVar5);
_totalIdle = _totalIdle - objectqueueVar7.queue.size();
_totalInternalProcessing = _totalInternalProcessing + objectqueueVar7.queue.size();
objectqueueVar7.queue.clear();
}
}
destroy(mapVar1, _factory);
}",0
"public void addObject(Object key) throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
Object objectVar1 = objectLiteral2;
try {
assertOpen();
addObjectToPool(key, objectVar1, false);
} catch (IllegalStateException ex) {
try {
_factory.destroyObject(key, objectVar1);
} catch (Exception ex2) {
}
throw ex;
}
}",0
"synchronized String debugInfo() {
StringBuffer stringbufferVar1 = stringbufferLiteral2;
stringbufferVar1.append(""Active: "").append(getNumActive()).append(""\n"");
stringbufferVar1.append(""Idle: "").append(getNumIdle()).append(""\n"");
Iterator iteratorVar3 = iteratorLiteral4;
while (iteratorVar3.hasNext()) {
Object objectVar5 = objectLiteral6;
stringbufferVar1.append(""\t"").append(objectVar5).append("" "").append(_poolMap.get(objectVar5)).append(""\n"");
}
return stringbufferVar1.toString();
}",0
"private synchronized void allocate() {
if (isClosed())
return;
for (; ; ) {
if (!_pool.isEmpty() && !_allocationQueue.isEmpty()) {
Latch latchVar1 = latchLiteral2;
latchVar1.setPair((ObjectTimestampPair) _pool.removeFirst());
_numInternalProcessing++;
synchronized (latchVar1) {
latchVar1.notify();
}
} else {
break;
}
}
for (; ; ) {
if ((!_allocationQueue.isEmpty()) && (_maxActive < 0 || (_numActive + _numInternalProcessing) < _maxActive)) {
Latch latchVar1 = latchLiteral2;
latchVar1.setMayCreate(true);
_numInternalProcessing++;
synchronized (latchVar1) {
latchVar1.notify();
}
} else {
break;
}
}
}",0
"public void close() throws Exception {
super.close();
synchronized (this) {
clear();
startEvictor(-1L);
while (_allocationQueue.size() > 0) {
Latch latchVar1 = latchLiteral2;
synchronized (latchVar1) {
latchVar1.notify();
}
}
}
}",0
protected int intVar1 = intLiteral2;,0
"private void addObjectToPool(Object key, Object obj, boolean decrementNumActive) throws Exception {
boolean booleanVar1 = booleanLiteral2;
if (_testOnReturn && !_factory.validateObject(key, obj)) {
booleanVar1 = false;
} else {
_factory.passivateObject(key, obj);
}
boolean booleanVar3 = booleanLiteral4;
ObjectQueue objectqueueVar5;
boolean booleanVar6 = booleanLiteral7;
synchronized (this) {
objectqueueVar5 = (ObjectQueue) (_poolMap.get(key));
if (null == objectqueueVar5) {
objectqueueVar5 = new ObjectQueue();
_poolMap.put(key, objectqueueVar5);
_poolList.add(key);
}
if (isClosed()) {
booleanVar3 = true;
} else {
if (_maxIdle >= 0 && (objectqueueVar5.queue.size() >= _maxIdle)) {
booleanVar3 = true;
} else if (booleanVar1) {
if (_lifo) {
objectqueueVar5.queue.addFirst(new ObjectTimestampPair(obj));
} else {
objectqueueVar5.queue.addLast(new ObjectTimestampPair(obj));
}
_totalIdle++;
if (decrementNumActive) {
objectqueueVar5.decrementActiveCount();
}
booleanVar6 = true;
}
}
}
if (booleanVar6) {
allocate();
}
if (booleanVar3) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e) {
}
if (decrementNumActive) {
synchronized (this) {
objectqueueVar5.decrementActiveCount();
if (objectqueueVar5.queue.isEmpty() && objectqueueVar5.activeCount == 0 && objectqueueVar5.internalProcessingCount == 0) {
_poolMap.remove(key);
_poolList.remove(key);
}
}
allocate();
}
}
}",0
"private void allocate() {
boolean booleanVar1 = booleanLiteral2;
synchronized (this) {
if (isClosed())
return;
Iterator iteratorVar3 = iteratorLiteral4;
while (iteratorVar3.hasNext()) {
Latch latchVar5 = latchLiteral6;
ObjectQueue objectqueueVar7 = objectqueueLiteral8;
if (null == objectqueueVar7) {
objectqueueVar7 = new ObjectQueue();
_poolMap.put(latchVar5.getkey(), objectqueueVar7);
_poolList.add(latchVar5.getkey());
}
latchVar5.setPool(objectqueueVar7);
if (!objectqueueVar7.queue.isEmpty()) {
iteratorVar3.remove();
latchVar5.setPair((ObjectTimestampPair) objectqueueVar7.queue.removeFirst());
objectqueueVar7.incrementInternalProcessingCount();
_totalIdle--;
synchronized (latchVar5) {
latchVar5.notify();
}
continue;
}
if ((_maxTotal > 0) && (_totalActive + _totalIdle + _totalInternalProcessing >= _maxTotal)) {
booleanVar1 = true;
break;
}
if ((_maxActive < 0 || objectqueueVar7.activeCount + objectqueueVar7.internalProcessingCount < _maxActive) && (_maxTotal < 0 || _totalActive + _totalIdle + _totalInternalProcessing < _maxTotal)) {
iteratorVar3.remove();
latchVar5.setMayCreate(true);
objectqueueVar7.incrementInternalProcessingCount();
synchronized (latchVar5) {
latchVar5.notify();
}
continue;
}
if (_maxActive < 0) {
break;
}
}
}
if (booleanVar1) {
clearOldest();
}
}",0
protected int intVar1 = intLiteral2;,0
protected int intVar1 = intLiteral2;,0
"public void close() {
try {
keyedPool.close();
} catch (Exception e) {
}
}",0
"public void returnObject(final T obj) {
synchronized (lock) {
try {
pool.returnObject(obj);
} catch (Exception e) {
}
}
}",0
"@Override
public void returnObject(K key, V obj) throws Exception {
try {
addObjectToPool(key, obj, true);
} catch (Exception e) {
if (_factory != null) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e2) {
}
// TODO: Correctness here depends on control in addObjectToPool.
ObjectQueue objectqueueVar1 = objectqueueLiteral2;
if (objectqueueVar1 != null) {
synchronized (this) {
objectqueueVar1.decrementActiveCount();
if (objectqueueVar1.queue.isEmpty() && objectqueueVar1.activeCount == 0 && objectqueueVar1.internalProcessingCount == 0) {
_poolMap.remove(key);
_poolList.remove(key);
}
}
allocate();
}
}
}
}",0
"public void evict() throws Exception {
K kVar1 = kLiteral2;
boolean booleanVar3;
long longVar4;
synchronized (this) {
booleanVar3 = _testWhileIdle;
longVar4 = _minEvictableIdleTimeMillis;
if (_evictionKeyCursor != null && _evictionKeyCursor._lastReturned != null) {
kVar1 = _evictionKeyCursor._lastReturned.value();
}
}
for (int intVar15 = intLiteral16, intVar17 = intLiteral18; intVar5 < intLiteral1; intVar5++) {
final ObjectTimestampPair<V> objecttimestamppair<v>Var9;
synchronized (this) {
if (_poolMap == null || _poolMap.size() == 0) {
continue;
}
if (null == _evictionKeyCursor) {
resetEvictionKeyCursor();
kVar1 = null;
}
if (null == _evictionCursor) {
if (_evictionKeyCursor.hasNext()) {
kVar1 = _evictionKeyCursor.next();
resetEvictionObjectCursor(kVar1);
} else {
resetEvictionKeyCursor();
if (_evictionKeyCursor != null) {
if (_evictionKeyCursor.hasNext()) {
kVar1 = _evictionKeyCursor.next();
resetEvictionObjectCursor(kVar1);
}
}
}
}
if (_evictionCursor == null) {
continue;
}
if ((_lifo && !_evictionCursor.hasPrevious()) || (!_lifo && !_evictionCursor.hasNext())) {
if (_evictionKeyCursor != null) {
if (_evictionKeyCursor.hasNext()) {
kVar1 = _evictionKeyCursor.next();
resetEvictionObjectCursor(kVar1);
} else {
resetEvictionKeyCursor();
if (_evictionKeyCursor != null) {
if (_evictionKeyCursor.hasNext()) {
kVar1 = _evictionKeyCursor.next();
resetEvictionObjectCursor(kVar1);
}
}
}
}
}
if ((_lifo && !_evictionCursor.hasPrevious()) || (!_lifo && !_evictionCursor.hasNext())) {
continue;
}
objecttimestamppair<v>Var9 = _lifo ? _evictionCursor.previous() : _evictionCursor.next();
_evictionCursor.remove();
ObjectQueue objectqueueVar10 = objectqueueLiteral11;
objectqueueVar10.incrementInternalProcessingCount();
_totalIdle--;
}
boolean booleanVar12 = booleanLiteral13;
if ((longVar4 > 0) && (System.currentTimeMillis() - objecttimestamppair<v>Var9.tstamp > longVar4)) {
booleanVar12 = true;
}
if (booleanVar3 && booleanVar12 == false) {
boolean booleanVar14 = booleanLiteral13;
try {
_factory.activateObject(kVar1, objecttimestamppair<v>Var9.value);
booleanVar14 = true;
} catch (Exception e) {
booleanVar12 = true;
}
if (booleanVar14) {
if (!_factory.validateObject(kVar1, objecttimestamppair<v>Var9.value)) {
booleanVar12 = true;
} else {
try {
_factory.passivateObject(kVar1, objecttimestamppair<v>Var9.value);
} catch (Exception e) {
booleanVar12 = true;
}
}
}
}
if (booleanVar12) {
try {
_factory.destroyObject(kVar1, objecttimestamppair<v>Var9.value);
} catch (Exception e) {
}
}
synchronized (this) {
ObjectQueue objectqueueVar10 = objectqueueLiteral11;
objectqueueVar10.decrementInternalProcessingCount();
if (booleanVar12) {
if (objectqueueVar10.queue.isEmpty() && objectqueueVar10.activeCount == 0 && objectqueueVar10.internalProcessingCount == 0) {
_poolMap.remove(kVar1);
_poolList.remove(kVar1);
}
} else {
_evictionCursor.add(objecttimestamppair<v>Var9);
_totalIdle++;
if (_lifo) {
_evictionCursor.previous();
}
}
}
}
allocate();
}",0
"@Override
public void run() {
try {
evict();
} catch (Exception e) {
} catch (OutOfMemoryError oome) {
oome.printStackTrace(System.err);
}
try {
ensureMinIdle();
} catch (Exception e) {
}
}",0
"public synchronized void returnObject(Object key, Object obj) throws Exception {
decrementActiveCount(key);
if (null != _factory) {
if (_factory.validateObject(key, obj)) {
try {
_factory.passivateObject(key, obj);
} catch (Exception ex) {
_factory.destroyObject(key, obj);
return;
}
} else {
return;
}
}
if (isClosed()) {
if (null != _factory) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e) {
}
}
return;
}
Stack stackVar1 = stackLiteral2;
if (null == stackVar1) {
stackVar1 = new Stack();
stackVar1.ensureCapacity(_initSleepingCapacity > _maxSleeping ? _maxSleeping : _initSleepingCapacity);
_pools.put(key, stackVar1);
}
final int intVar3 = intLiteral4;
if (intVar3 >= _maxSleeping) {
final Object objectVar5;
if (intVar3 > 0) {
objectVar5 = stackVar1.remove(0);
_totIdle--;
} else {
objectVar5 = obj;
}
if (null != _factory) {
try {
_factory.destroyObject(key, objectVar5);
} catch (Exception e) {
}
}
}
stackVar1.push(obj);
_totIdle++;
}",0
"public void run() {
boolean booleanVar1 = booleanLiteral2;
try {
if (keyedPool.getNumIdle(key) < minIdle) {
keyedPool.addObject(key);
}
booleanVar1 = true;
} catch (Exception e) {
cancel();
} finally {
if (!booleanVar1) {
cancel();
}
}
}",0
"public void returnObject(final Object obj) {
if (type.isInstance(obj)) {
try {
pool.returnObject(obj);
} catch (Exception e) {
}
} else {
throw new ClassCastException(""Returned object is not of type: "" + type.getName() + "" was: "" + obj);
}
}",0
"public void invalidateObject(final Object obj) {
synchronized (lock) {
try {
pool.invalidateObject(obj);
} catch (Exception e) {
}
}
}",0
"public synchronized void addObject() throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
Object objectVar1 = objectLiteral2;
boolean booleanVar3 = booleanLiteral4;
if (!_factory.validateObject(objectVar1)) {
booleanVar3 = false;
} else {
_factory.passivateObject(objectVar1);
}
boolean booleanVar5 = booleanLiteral6;
if (booleanVar3) {
_pool.add(new SoftReference(objectVar1, refQueue));
notifyAll();
}
if (booleanVar5) {
try {
_factory.destroyObject(objectVar1);
} catch (Exception e) {
}
}
}",0
"public synchronized void clear() {
if (null != _factory) {
Iterator iteratorVar1 = iteratorLiteral2;
while (iteratorVar1.hasNext()) {
try {
_factory.destroyObject(iteratorVar1.next());
} catch (Exception e) {
}
}
}
_pool.clear();
}",0
"private void addObjectToPool(Object key, Object obj, boolean decrementNumActive) throws Exception {
boolean booleanVar1 = booleanLiteral2;
if (_testOnReturn && !_factory.validateObject(key, obj)) {
booleanVar1 = false;
} else {
_factory.passivateObject(key, obj);
}
boolean booleanVar3 = booleanLiteral4;
ObjectQueue objectqueueVar5;
boolean booleanVar6 = booleanLiteral7;
synchronized (this) {
objectqueueVar5 = (ObjectQueue) (_poolMap.get(key));
if (null == objectqueueVar5) {
objectqueueVar5 = new ObjectQueue();
_poolMap.put(key, objectqueueVar5);
_poolList.add(key);
}
if (isClosed()) {
booleanVar3 = true;
} else {
if (_maxIdle >= 0 && (objectqueueVar5.queue.size() >= _maxIdle)) {
booleanVar3 = true;
} else if (booleanVar1) {
if (_lifo) {
objectqueueVar5.queue.addFirst(new ObjectTimestampPair(obj));
} else {
objectqueueVar5.queue.addLast(new ObjectTimestampPair(obj));
}
_totalIdle++;
if (decrementNumActive) {
objectqueueVar5.decrementActiveCount();
}
booleanVar6 = true;
}
}
}
if (booleanVar6) {
allocate();
}
if (booleanVar3) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e) {
}
if (decrementNumActive) {
synchronized (this) {
objectqueueVar5.decrementActiveCount();
if (objectqueueVar5.queue.isEmpty() && objectqueueVar5.activeCount == 0 && objectqueueVar5.internalProcessingCount == 0) {
_poolMap.remove(key);
_poolList.remove(key);
}
}
allocate();
}
}
}",0
"public void setFactory(KeyedPoolableObjectFactory factory) throws IllegalStateException {
Map mapVar1 = mapLiteral2;
final KeyedPoolableObjectFactory keyedpoolableobjectfactoryVar3 = keyedpoolableobjectfactoryLiteral4;
synchronized (this) {
assertOpen();
if (0 < getNumActive()) {
throw new IllegalStateException(""Objects are already active"");
} else {
for (Iterator iteratorVar13 = iteratorLiteral14; iteratorVar5.hasNext(); ) {
Object objectVar7 = objectLiteral8;
ObjectQueue objectqueueVar9 = objectqueueLiteral10;
if (objectqueueVar9 != null) {
List listVar11 = listLiteral12;
listVar11.addAll(objectqueueVar9.queue);
mapVar1.put(objectVar7, listVar11);
iteratorVar5.remove();
_poolList.remove(objectVar7);
_totalIdle = _totalIdle - objectqueueVar9.queue.size();
_totalInternalProcessing = _totalInternalProcessing + objectqueueVar9.queue.size();
objectqueueVar9.queue.clear();
}
}
_factory = factory;
}
}
destroy(mapVar1, keyedpoolableobjectfactoryVar3);
}",0
protected int intVar1 = intLiteral2;,0
"public synchronized void returnObject(T obj) throws Exception {
boolean booleanVar1 = booleanLiteral2;
if (null != _factory) {
if (!_factory.validateObject(obj)) {
booleanVar1 = false;
} else {
try {
_factory.passivateObject(obj);
} catch (Exception e) {
booleanVar1 = false;
}
}
}
boolean booleanVar3 = booleanLiteral4;
_numActive--;
if (booleanVar1) {
T tVar5 = tLiteral6;
if (_pool.size() >= _maxSleeping) {
booleanVar3 = true;
tVar5 = _pool.remove(0);
}
_pool.push(obj);
obj = tVar5;
}
notifyAll();
if (booleanVar3) {
try {
_factory.destroyObject(obj);
} catch (Exception e) {
}
}
}",0
"public synchronized void addObject() throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
T tVar1 = tLiteral2;
boolean booleanVar3 = booleanLiteral4;
if (!_factory.validateObject(tVar1)) {
booleanVar3 = false;
} else {
_factory.passivateObject(tVar1);
}
boolean booleanVar5 = booleanLiteral6;
if (booleanVar3) {
T tVar7 = tLiteral8;
if (_pool.size() >= _maxSleeping) {
booleanVar5 = true;
tVar7 = _pool.remove(0);
}
_pool.push(tVar1);
tVar1 = tVar7;
}
notifyAll();
if (booleanVar5) {
try {
_factory.destroyObject(tVar1);
} catch (Exception e) {
}
}
}",0
"public int compareTo(ObjectTimestampPair<T> other) {
final long longVar1 = longLiteral2;
if (longVar1 == 0) {
return System.identityHashCode(this) - System.identityHashCode(other);
} else {
return (int) Math.min(Math.max(longVar1, Integer.MIN_VALUE), Integer.MAX_VALUE);
}
}",0
"@Override
public void addObject() throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
T tVar1 = tLiteral2;
try {
assertOpen();
addObjectToPool(tVar1, false);
} catch (IllegalStateException ex) {
try {
_factory.destroyObject(tVar1);
} catch (Exception ex2) {
}
throw ex;
}
}",0
"@Override
public synchronized void addObject() throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
T tVar1 = tLiteral2;
boolean booleanVar3 = booleanLiteral4;
if (!_factory.validateObject(tVar1)) {
booleanVar3 = false;
} else {
_factory.passivateObject(tVar1);
}
boolean booleanVar5 = booleanLiteral6;
if (booleanVar3) {
_pool.add(new SoftReference<T>(tVar1, refQueue));
notifyAll();
}
if (booleanVar5) {
try {
_factory.destroyObject(tVar1);
} catch (Exception e) {
}
}
}",0
"public void close() {
try {
keyedPool.close();
} catch (Exception e) {
}
}",0
"public void addObject(Object key) throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
Object objectVar1 = objectLiteral2;
try {
assertOpen();
addObjectToPool(key, objectVar1, false);
} catch (IllegalStateException ex) {
try {
_factory.destroyObject(key, objectVar1);
} catch (Exception ex2) {
}
throw ex;
}
}",0
"synchronized String debugInfo() {
StringBuffer stringbufferVar1 = stringbufferLiteral2;
stringbufferVar1.append(""Active: "").append(getNumActive()).append(""\n"");
stringbufferVar1.append(""Idle: "").append(getNumIdle()).append(""\n"");
Iterator iteratorVar3 = iteratorLiteral4;
while (iteratorVar3.hasNext()) {
Object objectVar5 = objectLiteral6;
stringbufferVar1.append(""\t"").append(objectVar5).append("" "").append(_poolMap.get(objectVar5)).append(""\n"");
}
return stringbufferVar1.toString();
}",0
"public void addObject() throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
Object objectVar1 = objectLiteral2;
try {
assertOpen();
addObjectToPool(objectVar1, false);
} catch (IllegalStateException ex) {
try {
_factory.destroyObject(objectVar1);
} catch (Exception ex2) {
}
throw ex;
}
}",0
"public void returnObject(final Object key, final Object obj) {
try {
pool.returnObject(obj);
} catch (Exception e) {
}
}",0
"public void invalidateObject(final Object obj) {
if (type.isInstance(obj)) {
try {
pool.invalidateObject(obj);
} catch (Exception e) {
}
} else {
throw new ClassCastException(""Invalidated object is not of type: "" + type.getName() + "" was: "" + obj);
}
}",0
"public int compareTo(ObjectTimestampPair other) {
final long longVar1 = longLiteral2;
if (longVar1 == 0) {
return System.identityHashCode(this) - System.identityHashCode(other);
} else {
return (int) Math.min(Math.max(longVar1, Integer.MIN_VALUE), Integer.MAX_VALUE);
}
}",0
"private boolean hasBorrowWaiters() {
for (K kVar1 : poolMap.keySet()) {
final ObjectDeque<T> objectdeque<t>Var2 = objectdeque<t>Literal3;
if (objectdeque<t>Var2 != null) {
final LinkedBlockingDeque<PooledObject<T>> linkedblockingdeque<pooledobject<t>>Var4 = linkedblockingdeque<pooledobject<t>>Literal5;
if (linkedblockingdeque<pooledobject<t>>Var4.hasTakeWaiters()) {
return true;
}
}
}
return false;
}",0
"@Override
public synchronized boolean endEvictionTest(Deque<PooledObject<T>> idleQueue) {
if (state == PooledObjectState.EVICTION) {
state = PooledObjectState.IDLE;
return true;
} else if (state == PooledObjectState.EVICTION_RETURN_TO_HEAD) {
state = PooledObjectState.IDLE;
if (!idleQueue.offerFirst(this)) {
}
}
return false;
}",0
"public void invalidateObject(final Object obj) {
try {
keyedPool.invalidateObject(key, obj);
} catch (Exception e) {
}
}",0
"@Override
public void close() {
try {
pool.close();
} catch (Exception e) {
}
}",0
"@Override
public void evict() throws Exception {
assertOpen();
if (getNumIdle() == 0) {
return;
}
PooledObject<T> pooledobject<t>Var1 = pooledobject<t>Literal2;
EvictionPolicy<T> evictionpolicy<t>Var3 = evictionpolicy<t>Literal4;
synchronized (evictionLock) {
EvictionConfig evictionconfigVar5 = evictionconfigLiteral6;
boolean booleanVar7 = booleanLiteral8;
LinkedBlockingDeque<PooledObject<T>> linkedblockingdeque<pooledobject<t>>Var9 = pooledobject<t>Literal2;
for (int intVar22 = intLiteral23, intVar24 = intLiteral25; intVar10 < intLiteral1; intVar10++) {
if (evictionIterator == null || !evictionIterator.hasNext()) {
if (evictionKeyIterator == null || !evictionKeyIterator.hasNext()) {
List<K> list<k>Var14 = list<k>Literal15;
Lock lockVar16 = lockLiteral17;
lockVar16.lock();
try {
list<k>Var14.addAll(poolKeyList);
} finally {
lockVar16.unlock();
}
evictionKeyIterator = list<k>Var14.iterator();
}
while (evictionKeyIterator.hasNext()) {
evictionKey = evictionKeyIterator.next();
ObjectDeque<T> objectdeque<t>Var18 = objectdeque<t>Literal19;
if (objectdeque<t>Var18 == null) {
continue;
}
linkedblockingdeque<pooledobject<t>>Var9 = objectdeque<t>Var18.getIdleObjects();
if (getLifo()) {
evictionIterator = linkedblockingdeque<pooledobject<t>>Var9.descendingIterator();
} else {
evictionIterator = linkedblockingdeque<pooledobject<t>>Var9.iterator();
}
if (evictionIterator.hasNext()) {
break;
}
evictionIterator = null;
}
}
if (evictionIterator == null) {
return;
}
try {
pooledobject<t>Var1 = evictionIterator.next();
} catch (NoSuchElementException nsee) {
intVar10--;
evictionIterator = null;
continue;
}
if (!pooledobject<t>Var1.startEvictionTest()) {
intVar10--;
continue;
}
if (evictionpolicy<t>Var3.evict(evictionconfigVar5, pooledobject<t>Var1, poolMap.get(evictionKey).getIdleObjects().size())) {
destroy(evictionKey, pooledobject<t>Var1, true);
destroyedByEvictorCount.incrementAndGet();
} else {
if (booleanVar7) {
boolean booleanVar20 = booleanLiteral21;
try {
factory.activateObject(evictionKey, pooledobject<t>Var1);
booleanVar20 = true;
} catch (Exception e) {
destroy(evictionKey, pooledobject<t>Var1, true);
destroyedByEvictorCount.incrementAndGet();
}
if (booleanVar20) {
if (!factory.validateObject(evictionKey, pooledobject<t>Var1)) {
destroy(evictionKey, pooledobject<t>Var1, true);
destroyedByEvictorCount.incrementAndGet();
} else {
try {
factory.passivateObject(evictionKey, pooledobject<t>Var1);
} catch (Exception e) {
destroy(evictionKey, pooledobject<t>Var1, true);
destroyedByEvictorCount.incrementAndGet();
}
}
}
}
if (!pooledobject<t>Var1.endEvictionTest(linkedblockingdeque<pooledobject<t>>Var9)) {
}
}
}
}
}",0
"private boolean hasBorrowWaiters() {
for (K kVar1 : poolMap.keySet()) {
final ObjectDeque<T> objectdeque<t>Var2 = objectdeque<t>Literal3;
if (objectdeque<t>Var2 != null) {
final LinkedBlockingDeque<PooledObject<T>> linkedblockingdeque<pooledobject<t>>Var4 = linkedblockingdeque<pooledobject<t>>Literal5;
if (linkedblockingdeque<pooledobject<t>>Var4.hasTakeWaiters()) {
return true;
}
}
}
return false;
}",0
"@Override
public Map<String, Integer> getNumWaitersByKey() {
Map<String, Integer> map<string,integer>Var1 = map<string,integer>Literal2;
for (K kVar3 : poolMap.keySet()) {
ObjectDeque<T> objectdeque<t>Var4 = objectdeque<t>Literal5;
if (objectdeque<t>Var4 != null) {
if (getBlockWhenExhausted()) {
map<string,integer>Var1.put(kVar3.toString(), Integer.valueOf(objectdeque<t>Var4.getIdleObjects().getTakeQueueLength()));
} else {
map<string,integer>Var1.put(kVar3.toString(), Integer.valueOf(0));
}
}
}
return map<string,integer>Var1;
}",0
"public void invalidateObject(final Object obj) {
try {
keyedPool.invalidateObject(key, obj);
} catch (Exception e) {
}
}",0
"public void returnObject(final Object obj) {
if (type.isInstance(obj)) {
try {
pool.returnObject(obj);
} catch (Exception e) {
}
} else {
throw new ClassCastException(""Returned object is not of type: "" + type.getName() + "" was: "" + obj);
}
}",0
"public void run() {
boolean booleanVar1 = booleanLiteral2;
try {
if (keyedPool.getNumIdle(key) < minIdle) {
keyedPool.addObject(key);
}
booleanVar1 = true;
} catch (Exception e) {
cancel();
} finally {
if (!booleanVar1) {
cancel();
}
}
}",0
"public synchronized void preparePool(Object key, boolean populateImmediately) {
ObjectQueue objectqueueVar1 = objectqueueLiteral2;
if (null == objectqueueVar1) {
objectqueueVar1 = new ObjectQueue();
_poolMap.put(key, objectqueueVar1);
_poolList.add(key);
}
if (populateImmediately) {
try {
ensureMinIdle(key);
} catch (Exception e) {
}
}
}",0
"public void addObject() throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
Object objectVar1 = objectLiteral2;
try {
assertOpen();
addObjectToPool(objectVar1, false);
} catch (IllegalStateException ex) {
try {
_factory.destroyObject(objectVar1);
} catch (Exception ex2) {
}
throw ex;
}
}",0
"public synchronized void returnObject(Object obj) throws Exception {
boolean booleanVar1 = booleanLiteral2;
if (_factory != null) {
if (!_factory.validateObject(obj)) {
booleanVar1 = false;
} else {
try {
_factory.passivateObject(obj);
} catch (Exception e) {
booleanVar1 = false;
}
}
}
boolean booleanVar3 = booleanLiteral4;
_numActive--;
if (booleanVar1) {
_pool.add(new SoftReference(obj, refQueue));
}
notifyAll();
if (booleanVar3 && _factory != null) {
try {
_factory.destroyObject(obj);
} catch (Exception e) {
}
}
}",0
"public synchronized String toString() {
StringBuffer stringbufferVar1 = stringbufferLiteral2;
stringbufferVar1.append(getClass().getName());
stringbufferVar1.append("" contains "").append(_pools.size()).append("" distinct pools: "");
Iterator iteratorVar3 = iteratorLiteral4;
while (iteratorVar3.hasNext()) {
Object objectVar5 = objectLiteral6;
stringbufferVar1.append("" |"").append(objectVar5).append(""|="");
Stack stackVar7 = stackLiteral8;
stringbufferVar1.append(stackVar7.size());
}
return stringbufferVar1.toString();
}",0
"public void returnObject(final Object obj) {
if (type.isInstance(obj)) {
try {
pool.returnObject(obj);
} catch (Exception e) {
}
} else {
throw new ClassCastException(""Returned object is not of type: "" + type.getName() + "" was: "" + obj);
}
}",0
"public void clear() {
Map mapVar1 = mapLiteral2;
synchronized (this) {
for (Iterator iteratorVar11 = iteratorLiteral12; iteratorVar3.hasNext(); ) {
Object objectVar5 = objectLiteral6;
ObjectQueue objectqueueVar7 = objectqueueLiteral8;
List listVar9 = listLiteral10;
listVar9.addAll(objectqueueVar7.queue);
mapVar1.put(objectVar5, listVar9);
iteratorVar3.remove();
_poolList.remove(objectVar5);
_totalIdle = _totalIdle - objectqueueVar7.queue.size();
_totalInternalProcessing = _totalInternalProcessing + objectqueueVar7.queue.size();
objectqueueVar7.queue.clear();
}
}
destroy(mapVar1, _factory);
}",0
"public void run() {
try {
evict();
} catch (Exception e) {
} catch (OutOfMemoryError oome) {
oome.printStackTrace(System.err);
}
try {
ensureMinIdle();
} catch (Exception e) {
}
}",0
"public synchronized String toString() {
StringBuffer stringbufferVar1 = stringbufferLiteral2;
stringbufferVar1.append(getClass().getName());
stringbufferVar1.append("" contains "").append(_pools.size()).append("" distinct pools: "");
Iterator iteratorVar3 = iteratorLiteral4;
while (iteratorVar3.hasNext()) {
Object objectVar5 = objectLiteral6;
stringbufferVar1.append("" |"").append(objectVar5).append(""|="");
Stack stackVar7 = stackLiteral8;
stringbufferVar1.append(stackVar7.size());
}
return stringbufferVar1.toString();
}",0
"public void invalidateObject(final Object obj) {
if (type.isInstance(obj)) {
try {
pool.invalidateObject(obj);
} catch (Exception e) {
}
} else {
throw new ClassCastException(""Invalidated object is not of type: "" + type.getName() + "" was: "" + obj);
}
}",0
"public void invalidateObject(final Object obj) {
try {
keyedPool.invalidateObject(key, obj);
} catch (Exception e) {
}
}",0
"public void close() {
try {
keyedPool.close();
} catch (Exception e) {
}
}",0
"private void addObjectToPool(Object key, Object obj, boolean decrementNumActive) throws Exception {
boolean booleanVar1 = booleanLiteral2;
if (_testOnReturn && !_factory.validateObject(key, obj)) {
booleanVar1 = false;
} else {
_factory.passivateObject(key, obj);
}
boolean booleanVar3 = booleanLiteral4;
ObjectQueue objectqueueVar5;
boolean booleanVar6 = booleanLiteral7;
synchronized (this) {
objectqueueVar5 = (ObjectQueue) (_poolMap.get(key));
if (null == objectqueueVar5) {
objectqueueVar5 = new ObjectQueue();
_poolMap.put(key, objectqueueVar5);
_poolList.add(key);
}
if (isClosed()) {
booleanVar3 = true;
} else {
if (_maxIdle >= 0 && (objectqueueVar5.queue.size() >= _maxIdle)) {
booleanVar3 = true;
} else if (booleanVar1) {
if (_lifo) {
objectqueueVar5.queue.addFirst(new ObjectTimestampPair(obj));
} else {
objectqueueVar5.queue.addLast(new ObjectTimestampPair(obj));
}
_totalIdle++;
if (decrementNumActive) {
objectqueueVar5.decrementActiveCount();
}
booleanVar6 = true;
}
}
}
if (booleanVar6) {
allocate();
}
if (booleanVar3) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e) {
}
if (decrementNumActive) {
synchronized (this) {
objectqueueVar5.decrementActiveCount();
if (objectqueueVar5.queue.isEmpty() && objectqueueVar5.activeCount == 0 && objectqueueVar5.internalProcessingCount == 0) {
_poolMap.remove(key);
_poolList.remove(key);
}
}
allocate();
}
}
}",0
"private void addObjectToPool(Object obj, boolean decrementNumActive) throws Exception {
boolean booleanVar1 = booleanLiteral2;
if (_testOnReturn && !(_factory.validateObject(obj))) {
booleanVar1 = false;
} else {
_factory.passivateObject(obj);
}
boolean booleanVar3 = booleanLiteral4;
boolean booleanVar5 = booleanLiteral6;
synchronized (this) {
if (isClosed()) {
booleanVar3 = true;
} else {
if ((_maxIdle >= 0) && (_pool.size() >= _maxIdle)) {
booleanVar3 = true;
} else if (booleanVar1) {
if (_lifo) {
_pool.addFirst(new ObjectTimestampPair(obj));
} else {
_pool.addLast(new ObjectTimestampPair(obj));
}
if (decrementNumActive) {
_numActive--;
}
booleanVar5 = true;
}
}
}
if (booleanVar5) {
allocate();
}
if (booleanVar3) {
try {
_factory.destroyObject(obj);
} catch (Exception e) {
}
if (decrementNumActive) {
synchronized (this) {
_numActive--;
}
allocate();
}
}
}",0
"public synchronized void returnObject(Object obj) throws Exception {
boolean booleanVar1 = booleanLiteral2;
if (_factory != null) {
if (!_factory.validateObject(obj)) {
booleanVar1 = false;
} else {
try {
_factory.passivateObject(obj);
} catch (Exception e) {
booleanVar1 = false;
}
}
}
boolean booleanVar3 = booleanLiteral4;
_numActive--;
if (booleanVar1) {
_pool.add(new SoftReference(obj, refQueue));
}
notifyAll();
if (booleanVar3 && _factory != null) {
try {
_factory.destroyObject(obj);
} catch (Exception e) {
}
}
}",0
"public synchronized void addObject(Object key) throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
Object objectVar1 = objectLiteral2;
try {
if (!_factory.validateObject(key, objectVar1)) {
return;
}
} catch (Exception e) {
try {
_factory.destroyObject(key, objectVar1);
} catch (Exception e2) {
}
return;
}
_factory.passivateObject(key, objectVar1);
Stack stackVar3 = stackLiteral4;
if (null == stackVar3) {
stackVar3 = new Stack();
stackVar3.ensureCapacity(_initSleepingCapacity > _maxSleeping ? _maxSleeping : _initSleepingCapacity);
_pools.put(key, stackVar3);
}
final int intVar5 = intLiteral6;
if (intVar5 >= _maxSleeping) {
final Object objectVar7;
if (intVar5 > 0) {
objectVar7 = stackVar3.remove(0);
_totIdle--;
} else {
objectVar7 = objectVar1;
}
try {
_factory.destroyObject(key, objectVar7);
} catch (Exception e) {
if (objectVar1 == objectVar7) {
throw e;
}
}
} else {
stackVar3.push(objectVar1);
_totIdle++;
}
}",0
"public synchronized void returnObject(Object obj) throws Exception {
boolean booleanVar1 = booleanLiteral2;
if (null != _factory) {
if (!_factory.validateObject(obj)) {
booleanVar1 = false;
} else {
try {
_factory.passivateObject(obj);
} catch (Exception e) {
booleanVar1 = false;
}
}
}
boolean booleanVar3 = booleanLiteral4;
_numActive--;
if (booleanVar1) {
Object objectVar5 = objectLiteral6;
if (_pool.size() >= _maxSleeping) {
booleanVar3 = true;
objectVar5 = _pool.remove(0);
}
_pool.push(obj);
obj = objectVar5;
}
notifyAll();
if (booleanVar3) {
try {
_factory.destroyObject(obj);
} catch (Exception e) {
}
}
}",0
"@Override
public void close() {
try {
pool.close();
} catch (Exception e) {
}
}",0
"@Override
public Map<String, Integer> getNumWaitersByKey() {
Map<String, Integer> map<string,integer>Var1 = map<string,integer>Literal2;
for (K kVar3 : poolMap.keySet()) {
ObjectDeque<T> objectdeque<t>Var4 = objectdeque<t>Literal5;
if (objectdeque<t>Var4 != null) {
if (getBlockWhenExhausted()) {
map<string,integer>Var1.put(kVar3.toString(), Integer.valueOf(objectdeque<t>Var4.getIdleObjects().getTakeQueueLength()));
} else {
map<string,integer>Var1.put(kVar3.toString(), Integer.valueOf(0));
}
}
}
return map<string,integer>Var1;
}",0
"@Override
public Map<String, List<DefaultPooledObjectInfo>> listAllObjects() {
Map<String, List<DefaultPooledObjectInfo>> map<string,list<defaultpooledobjectinfo>>Var1 = map<string,list<defaultpooledobjectinfo>>Literal2;
for (K kVar3 : poolMap.keySet()) {
ObjectDeque<T> objectdeque<t>Var4 = objectdeque<t>Literal5;
if (objectdeque<t>Var4 != null) {
List<DefaultPooledObjectInfo> list<defaultpooledobjectinfo>Var6 = list<defaultpooledobjectinfo>Literal7;
map<string,list<defaultpooledobjectinfo>>Var1.put(kVar3.toString(), list<defaultpooledobjectinfo>Var6);
for (PooledObject<T> pooledobject<t>Var8 : objectdeque<t>Var4.getAllObjects().values()) {
list<defaultpooledobjectinfo>Var6.add(new DefaultPooledObjectInfo(pooledobject<t>Var8));
}
}
}
return map<string,list<defaultpooledobjectinfo>>Var1;
}",0
"public void invalidateObject(final T obj) {
if (type.isInstance(obj)) {
try {
pool.invalidateObject(obj);
} catch (Exception e) {
}
} else {
throw new ClassCastException(""Invalidated object is not of type: "" + type.getName() + "" was: "" + obj);
}
}",0
"public void close() {
try {
pool.close();
} catch (Exception e) {
}
}",0
"public void close() {
try {
keyedPool.close();
} catch (Exception e) {
}
}",0
"@Override
public void addObject(K key) throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
V vVar1 = vLiteral2;
try {
assertOpen();
addObjectToPool(key, vVar1, false);
} catch (IllegalStateException ex) {
try {
_factory.destroyObject(key, vVar1);
} catch (Exception ex2) {
}
throw ex;
}
}",0
"@Override
public void run() {
try {
evict();
} catch (Exception e) {
} catch (OutOfMemoryError oome) {
oome.printStackTrace(System.err);
}
try {
ensureMinIdle();
} catch (Exception e) {
}
}",0
"public void clearOldest() {
final Map<K, List<ObjectTimestampPair<V>>> map<k,list<objecttimestamppair<v>>>Var1 = map<k,list<objecttimestamppair<v>>>Literal2;
final Map<ObjectTimestampPair<V>, K> map<objecttimestamppair<v>,k>Var3 = map<objecttimestamppair<v>,k>Literal4;
synchronized (this) {
for (Iterator<K> iterator<k>Var29 = iterator<k>Literal30; iterator<k>Var5.hasNext(); ) {
final K kVar7 = kLiteral8;
final List<ObjectTimestampPair<V>> list<objecttimestamppair<v>>Var9 = list<objecttimestamppair<v>>Literal10;
for (Iterator<ObjectTimestampPair<V>> iterator<objecttimestamppair<v>>Var31 = iterator<objecttimestamppair<v>>Literal32; iterator<objecttimestamppair<v>>Var11.hasNext(); ) {
map<objecttimestamppair<v>,k>Var3.put(iterator<objecttimestamppair<v>>Var11.next(), kVar7);
}
}
Set<Entry<ObjectTimestampPair<V>, K>> set<entry<objecttimestamppair<v>,k>>Var13 = set<entry<objecttimestamppair<v>,k>>Literal14;
int intVar15 = intLiteral16;
Iterator<Entry<ObjectTimestampPair<V>, K>> iterator<entry<objecttimestamppair<v>,k>>Var17 = iterator<entry<objecttimestamppair<v>,k>>Literal18;
while (iterator<entry<objecttimestamppair<v>,k>>Var17.hasNext() && intVar15 > 0) {
Entry<ObjectTimestampPair<V>, K> entry<objecttimestamppair<v>,k>Var19 = entry<objecttimestamppair<v>,k>Literal20;
K kVar7 = kLiteral21;
ObjectTimestampPair<V> objecttimestamppair<v>Var22 = objecttimestamppair<v>Literal23;
ObjectQueue objectqueueVar24 = objectqueueLiteral25;
final List<ObjectTimestampPair<V>> list<objecttimestamppair<v>>Var9 = list<objecttimestamppair<v>>Literal26;
list<objecttimestamppair<v>>Var9.remove(objecttimestamppair<v>Var22);
if (map<k,list<objecttimestamppair<v>>>Var1.containsKey(kVar7)) {
map<k,list<objecttimestamppair<v>>>Var1.get(kVar7).add(objecttimestamppair<v>Var22);
} else {
List<ObjectTimestampPair<V>> list<objecttimestamppair<v>>Var27 = list<objecttimestamppair<v>>Literal28;
list<objecttimestamppair<v>>Var27.add(objecttimestamppair<v>Var22);
map<k,list<objecttimestamppair<v>>>Var1.put(kVar7, list<objecttimestamppair<v>>Var27);
}
objectqueueVar24.incrementInternalProcessingCount();
_totalIdle--;
intVar15--;
}
}
destroy(map<k,list<objecttimestamppair<v>>>Var1, _factory);
}",0
"@Override
public void close() throws Exception {
super.close();
synchronized (this) {
clear();
if (null != _evictionCursor) {
_evictionCursor.close();
_evictionCursor = null;
}
if (null != _evictionKeyCursor) {
_evictionKeyCursor.close();
_evictionKeyCursor = null;
}
startEvictor(-1L);
while (_allocationQueue.size() > 0) {
Latch<K, V> latch<k,v>Var1 = latch<k,v>Literal2;
synchronized (latch<k,v>Var1) {
latch<k,v>Var1.notify();
}
}
}
}",0
"public void evict() throws Exception {
K kVar1 = kLiteral2;
boolean booleanVar3;
long longVar4;
synchronized (this) {
booleanVar3 = _testWhileIdle;
longVar4 = _minEvictableIdleTimeMillis;
if (_evictionKeyCursor != null && _evictionKeyCursor._lastReturned != null) {
kVar1 = _evictionKeyCursor._lastReturned.value();
}
}
for (int intVar15 = intLiteral16, intVar17 = intLiteral18; intVar5 < intLiteral1; intVar5++) {
final ObjectTimestampPair<V> objecttimestamppair<v>Var9;
synchronized (this) {
if (_poolMap == null || _poolMap.size() == 0) {
continue;
}
if (null == _evictionKeyCursor) {
resetEvictionKeyCursor();
kVar1 = null;
}
if (null == _evictionCursor) {
if (_evictionKeyCursor.hasNext()) {
kVar1 = _evictionKeyCursor.next();
resetEvictionObjectCursor(kVar1);
} else {
resetEvictionKeyCursor();
if (_evictionKeyCursor != null) {
if (_evictionKeyCursor.hasNext()) {
kVar1 = _evictionKeyCursor.next();
resetEvictionObjectCursor(kVar1);
}
}
}
}
if (_evictionCursor == null) {
continue;
}
if ((_lifo && !_evictionCursor.hasPrevious()) || (!_lifo && !_evictionCursor.hasNext())) {
if (_evictionKeyCursor != null) {
if (_evictionKeyCursor.hasNext()) {
kVar1 = _evictionKeyCursor.next();
resetEvictionObjectCursor(kVar1);
} else {
resetEvictionKeyCursor();
if (_evictionKeyCursor != null) {
if (_evictionKeyCursor.hasNext()) {
kVar1 = _evictionKeyCursor.next();
resetEvictionObjectCursor(kVar1);
}
}
}
}
}
if ((_lifo && !_evictionCursor.hasPrevious()) || (!_lifo && !_evictionCursor.hasNext())) {
continue;
}
objecttimestamppair<v>Var9 = _lifo ? _evictionCursor.previous() : _evictionCursor.next();
_evictionCursor.remove();
ObjectQueue objectqueueVar10 = objectqueueLiteral11;
objectqueueVar10.incrementInternalProcessingCount();
_totalIdle--;
}
boolean booleanVar12 = booleanLiteral13;
if ((longVar4 > 0) && (System.currentTimeMillis() - objecttimestamppair<v>Var9.tstamp > longVar4)) {
booleanVar12 = true;
}
if (booleanVar3 && booleanVar12 == false) {
boolean booleanVar14 = booleanLiteral13;
try {
_factory.activateObject(kVar1, objecttimestamppair<v>Var9.value);
booleanVar14 = true;
} catch (Exception e) {
booleanVar12 = true;
}
if (booleanVar14) {
if (!_factory.validateObject(kVar1, objecttimestamppair<v>Var9.value)) {
booleanVar12 = true;
} else {
try {
_factory.passivateObject(kVar1, objecttimestamppair<v>Var9.value);
} catch (Exception e) {
booleanVar12 = true;
}
}
}
}
if (booleanVar12) {
try {
_factory.destroyObject(kVar1, objecttimestamppair<v>Var9.value);
} catch (Exception e) {
}
}
synchronized (this) {
ObjectQueue objectqueueVar10 = objectqueueLiteral11;
objectqueueVar10.decrementInternalProcessingCount();
if (booleanVar12) {
if (objectqueueVar10.queue.isEmpty() && objectqueueVar10.activeCount == 0 && objectqueueVar10.internalProcessingCount == 0) {
_poolMap.remove(kVar1);
_poolList.remove(kVar1);
}
} else {
_evictionCursor.add(objecttimestamppair<v>Var9);
_totalIdle++;
if (_lifo) {
_evictionCursor.previous();
}
}
}
}
allocate();
}",0
"private void decrementActiveCount(K key) {
_totActive--;
Integer integerVar1 = integerLiteral2;
if (null == integerVar1) {
} else if (integerVar1.intValue() <= 1) {
_activeCount.remove(key);
} else {
_activeCount.put(key, new Integer(integerVar1.intValue() - 1));
}
}",0
"public void invalidateObject(final Object key, final Object obj) {
try {
pool.invalidateObject(obj);
} catch (Exception e) {
}
}",0
"public void invalidateObject(final Object obj) {
if (type.isInstance(obj)) {
try {
pool.invalidateObject(obj);
} catch (Exception e) {
}
} else {
throw new ClassCastException(""Invalidated object is not of type: "" + type.getName() + "" was: "" + obj);
}
}",0
"public void addObject() throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
Object objectVar1 = objectLiteral2;
try {
assertOpen();
addObjectToPool(objectVar1, false);
} catch (IllegalStateException ex) {
try {
_factory.destroyObject(objectVar1);
} catch (Exception ex2) {
}
throw ex;
}
}",0
"private void allocate() {
boolean booleanVar1 = booleanLiteral2;
synchronized (this) {
if (isClosed())
return;
Iterator<Latch> iterator<latch>Var3 = iterator<latch>Literal4;
while (iterator<latch>Var3.hasNext()) {
Latch latchVar5 = latchLiteral6;
ObjectQueue objectqueueVar7 = objectqueueLiteral8;
if (null == objectqueueVar7) {
objectqueueVar7 = new ObjectQueue();
_poolMap.put(latchVar5.getkey(), objectqueueVar7);
_poolList.add(latchVar5.getkey());
}
latchVar5.setPool(objectqueueVar7);
if (!objectqueueVar7.queue.isEmpty()) {
iterator<latch>Var3.remove();
latchVar5.setPair(objectqueueVar7.queue.removeFirst());
objectqueueVar7.incrementInternalProcessingCount();
_totalIdle--;
synchronized (latchVar5) {
latchVar5.notify();
}
continue;
}
if ((this.maxTotal > 0) && (_totalActive + _totalIdle + _totalInternalProcessing >= this.maxTotal)) {
booleanVar1 = true;
break;
}
if ((this.maxTotalPerKey < 0 || objectqueueVar7.activeCount + objectqueueVar7.internalProcessingCount < this.maxTotalPerKey) && (this.maxTotal < 0 || _totalActive + _totalIdle + _totalInternalProcessing < this.maxTotal)) {
iterator<latch>Var3.remove();
latchVar5.setMayCreate(true);
objectqueueVar7.incrementInternalProcessingCount();
synchronized (latchVar5) {
latchVar5.notify();
}
continue;
}
if (this.maxTotalPerKey < 0) {
break;
}
}
}
if (booleanVar1) {
clearOldest();
}
}",0
private long longVar1;,0
private boolean booleanVar1;,0
private long longVar1;,0
"public void close() {
try {
keyedPool.close();
} catch (Exception e) {
}
}",0
"public void run() {
boolean booleanVar1 = booleanLiteral2;
try {
if (keyedPool.getNumIdle(key) < minIdle) {
keyedPool.addObject(key);
}
booleanVar1 = true;
} catch (Exception e) {
cancel();
} finally {
if (!booleanVar1) {
cancel();
}
}
}",0
"public void invalidateObject(final Object key, final Object obj) {
try {
pool.invalidateObject(obj);
} catch (Exception e) {
}
}",0
"public void addObject() throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
Object objectVar1 = objectLiteral2;
try {
assertOpen();
addObjectToPool(objectVar1, false);
} catch (IllegalStateException ex) {
try {
_factory.destroyObject(objectVar1);
} catch (Exception ex2) {
}
throw ex;
}
}",0
"public synchronized void returnObject(Object key, Object obj) throws Exception {
decrementActiveCount(key);
if (null != _factory) {
if (_factory.validateObject(key, obj)) {
try {
_factory.passivateObject(key, obj);
} catch (Exception ex) {
_factory.destroyObject(key, obj);
return;
}
} else {
return;
}
}
if (isClosed()) {
if (null != _factory) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e) {
}
}
return;
}
Stack stackVar1 = stackLiteral2;
if (null == stackVar1) {
stackVar1 = new Stack();
stackVar1.ensureCapacity(_initSleepingCapacity > _maxSleeping ? _maxSleeping : _initSleepingCapacity);
_pools.put(key, stackVar1);
}
final int intVar3 = intLiteral4;
if (intVar3 >= _maxSleeping) {
final Object objectVar5;
if (intVar3 > 0) {
objectVar5 = stackVar1.remove(0);
_totIdle--;
} else {
objectVar5 = obj;
}
if (null != _factory) {
try {
_factory.destroyObject(key, objectVar5);
} catch (Exception e) {
}
}
}
stackVar1.push(obj);
_totIdle++;
}",0
"public void close() {
try {
keyedPool.close();
} catch (Exception e) {
}
}",0
"public void clearOldest() {
final Map<K, List<ObjectTimestampPair<V>>> map<k,list<objecttimestamppair<v>>>Var1 = map<k,list<objecttimestamppair<v>>>Literal2;
final Map<ObjectTimestampPair<V>, K> map<objecttimestamppair<v>,k>Var3 = map<objecttimestamppair<v>,k>Literal4;
synchronized (this) {
for (K kVar5 : _poolMap.keySet()) {
final CursorableLinkedList<ObjectTimestampPair<V>> cursorablelinkedlist<objecttimestamppair<v>>Var6 = cursorablelinkedlist<objecttimestamppair<v>>Literal7;
for (ObjectTimestampPair<V> objecttimestamppair<v>Var8 : cursorablelinkedlist<objecttimestamppair<v>>Var6) {
map<objecttimestamppair<v>,k>Var3.put(objecttimestamppair<v>Var8, kVar5);
}
}
Set<Map.Entry<ObjectTimestampPair<V>, K>> set<map.entry<objecttimestamppair<v>,k>>Var9 = set<map.entry<objecttimestamppair<v>,k>>Literal10;
int intVar11 = intLiteral12;
Iterator<Map.Entry<ObjectTimestampPair<V>, K>> iterator<map.entry<objecttimestamppair<v>,k>>Var13 = iterator<map.entry<objecttimestamppair<v>,k>>Literal14;
while (iterator<map.entry<objecttimestamppair<v>,k>>Var13.hasNext() && intVar11 > 0) {
Map.Entry<ObjectTimestampPair<V>, K> map.entry<objecttimestamppair<v>,k>Var15 = map.entry<objecttimestamppair<v>,k>Literal16;
K kVar5 = kLiteral17;
ObjectTimestampPair<V> objecttimestamppair<v>Var18 = objecttimestamppair<v>Literal19;
final CursorableLinkedList<ObjectTimestampPair<V>> cursorablelinkedlist<objecttimestamppair<v>>Var6 = cursorablelinkedlist<objecttimestamppair<v>>Literal7;
cursorablelinkedlist<objecttimestamppair<v>>Var6.remove(objecttimestamppair<v>Var18);
if (map<k,list<objecttimestamppair<v>>>Var1.containsKey(kVar5)) {
map<k,list<objecttimestamppair<v>>>Var1.get(kVar5).add(objecttimestamppair<v>Var18);
} else {
List<ObjectTimestampPair<V>> list<objecttimestamppair<v>>Var20 = list<objecttimestamppair<v>>Literal21;
list<objecttimestamppair<v>>Var20.add(objecttimestamppair<v>Var18);
map<k,list<objecttimestamppair<v>>>Var1.put(kVar5, list<objecttimestamppair<v>>Var20);
}
if (cursorablelinkedlist<objecttimestamppair<v>>Var6.isEmpty()) {
_poolMap.remove(kVar5);
_poolList.remove(kVar5);
}
_totalIdle--;
_totalInternalProcessing++;
intVar11--;
}
}
destroy(map<k,list<objecttimestamppair<v>>>Var1, _factory);
}",0
"public int compareTo(ObjectTimestampPair<V> other) {
final long longVar1 = longLiteral2;
if (longVar1 == 0) {
return System.identityHashCode(this) - System.identityHashCode(other);
} else {
return (int) Math.min(Math.max(longVar1, Integer.MIN_VALUE), Integer.MAX_VALUE);
}
}",0
"@Override
public synchronized void returnObject(T obj) throws Exception {
boolean booleanVar1 = booleanLiteral2;
if (!_factory.validateObject(obj)) {
booleanVar1 = false;
} else {
try {
_factory.passivateObject(obj);
} catch (Exception e) {
booleanVar1 = false;
}
}
boolean booleanVar3 = booleanLiteral4;
_numActive--;
if (booleanVar1) {
_pool.add(new SoftReference<T>(obj, refQueue));
}
notifyAll();
if (booleanVar3) {
try {
_factory.destroyObject(obj);
} catch (Exception e) {
}
}
}",0
"public T borrowObject(K key, long borrowMaxWaitMillis) throws Exception {
assertOpen();
PooledObject<T> pooledobject<t>Var1 = pooledobject<t>Literal2;
boolean booleanVar3 = booleanLiteral4;
boolean booleanVar5;
long longVar6 = longLiteral7;
ObjectDeque<T> objectdeque<t>Var8 = objectdeque<t>Literal9;
try {
while (pooledobject<t>Var1 == null) {
booleanVar5 = false;
if (booleanVar3) {
pooledobject<t>Var1 = objectdeque<t>Var8.getIdleObjects().pollFirst();
if (pooledobject<t>Var1 == null) {
booleanVar5 = true;
pooledobject<t>Var1 = create(key);
}
if (pooledobject<t>Var1 == null) {
if (borrowMaxWaitMillis < 0) {
pooledobject<t>Var1 = objectdeque<t>Var8.getIdleObjects().takeFirst();
} else {
longVar6 = System.currentTimeMillis();
pooledobject<t>Var1 = objectdeque<t>Var8.getIdleObjects().pollFirst(borrowMaxWaitMillis, TimeUnit.MILLISECONDS);
longVar6 = System.currentTimeMillis() - longVar6;
}
}
if (pooledobject<t>Var1 == null) {
throw new NoSuchElementException(""Timeout waiting for idle object"");
}
if (!pooledobject<t>Var1.allocate()) {
pooledobject<t>Var1 = null;
}
} else {
pooledobject<t>Var1 = objectdeque<t>Var8.getIdleObjects().pollFirst();
if (pooledobject<t>Var1 == null) {
booleanVar5 = true;
pooledobject<t>Var1 = create(key);
}
if (pooledobject<t>Var1 == null) {
throw new NoSuchElementException(""Pool exhausted"");
}
if (!pooledobject<t>Var1.allocate()) {
pooledobject<t>Var1 = null;
}
}
if (pooledobject<t>Var1 != null) {
try {
factory.activateObject(key, pooledobject<t>Var1);
} catch (Exception e) {
try {
destroy(key, pooledobject<t>Var1, true);
} catch (Exception e1) {
}
pooledobject<t>Var1 = null;
if (booleanVar5) {
NoSuchElementException nosuchelementexceptionVar10 = nosuchelementexceptionLiteral11;
nosuchelementexceptionVar10.initCause(e);
throw nosuchelementexceptionVar10;
}
}
if (pooledobject<t>Var1 != null && getTestOnBorrow()) {
boolean booleanVar12 = booleanLiteral13;
Throwable throwableVar14 = pooledobject<t>Literal2;
try {
booleanVar12 = factory.validateObject(key, pooledobject<t>Var1);
} catch (Throwable t) {
PoolUtils.checkRethrow(t);
throwableVar14 = t;
}
if (!booleanVar12) {
try {
destroy(key, pooledobject<t>Var1, true);
destroyedByBorrowValidationCount.incrementAndGet();
} catch (Exception e) {
}
pooledobject<t>Var1 = null;
if (booleanVar5) {
NoSuchElementException nosuchelementexceptionVar10 = nosuchelementexceptionLiteral15;
nosuchelementexceptionVar10.initCause(throwableVar14);
throw nosuchelementexceptionVar10;
}
}
}
}
}
} finally {
deregister(key);
}
updateStatsBorrow(pooledobject<t>Var1, longVar6);
return pooledobject<t>Var1.getObject();
}",0
"@Override
public synchronized void returnObject(T obj) throws Exception {
boolean booleanVar1 = booleanLiteral2;
final PooledSoftReference<T> pooledsoftreference<t>Var3 = pooledsoftreference<t>Literal4;
if (pooledsoftreference<t>Var3 == null) {
throw new IllegalStateException(""Returned object not currently part of this pool"");
}
if (factory != null) {
if (!factory.validateObject(pooledsoftreference<t>Var3)) {
booleanVar1 = false;
} else {
try {
factory.passivateObject(pooledsoftreference<t>Var3);
} catch (Exception e) {
booleanVar1 = false;
}
}
}
boolean booleanVar5 = booleanLiteral6;
numActive--;
if (booleanVar1) {
pooledsoftreference<t>Var3.deallocate();
idleReferences.add(pooledsoftreference<t>Var3);
}
notifyAll();
if (booleanVar5 && factory != null) {
try {
destroy(pooledsoftreference<t>Var3);
} catch (Exception e) {
}
}
}",0
"@Override
public void run() {
boolean booleanVar1 = booleanLiteral2;
try {
if (keyedPool.getNumIdle(key) < minIdle) {
keyedPool.addObject(key);
}
booleanVar1 = true;
} catch (Exception e) {
cancel();
} finally {
if (!booleanVar1) {
cancel();
}
}
}",0
"private void reuseCapacity() {
final int intVar1 = intLiteral2;
int intVar3 = intLiteral4;
LinkedBlockingDeque<PooledObject<T>> linkedblockingdeque<pooledobject<t>>Var5 = linkedblockingdeque<pooledobject<t>>Literal6;
K kVar7 = linkedblockingdeque<pooledobject<t>>Literal6;
for (K kVar8 : poolMap.keySet()) {
final ObjectDeque<T> objectdeque<t>Var9 = objectdeque<t>Literal10;
if (objectdeque<t>Var9 != null) {
final LinkedBlockingDeque<PooledObject<T>> linkedblockingdeque<pooledobject<t>>Var11 = linkedblockingdeque<pooledobject<t>>Literal12;
final int intVar13 = intLiteral14;
if (getNumActive(kVar8) < intVar1 && intVar13 > intVar3) {
intVar3 = intVar13;
linkedblockingdeque<pooledobject<t>>Var5 = linkedblockingdeque<pooledobject<t>>Var11;
kVar7 = kVar8;
}
}
}
if (linkedblockingdeque<pooledobject<t>>Var5 != null) {
register(kVar7);
try {
PooledObject<T> pooledobject<t>Var15 = pooledobject<t>Literal16;
if (pooledobject<t>Var15 != null) {
addIdleObject(kVar7, pooledobject<t>Var15);
}
} catch (Exception e) {
swallowException(e);
} finally {
deregister(kVar7);
}
}
}",0
"public void invalidateObject(final Object key, final Object obj) {
try {
keyedPool.invalidateObject(key, obj);
} catch (Exception e) {
}
}",0
"public void run() {
try {
objectPool.getFactory().destroyObject(obj);
} catch (Exception e) {
}
}",0
"// XXX: Add better handling of when this instance is not Serializable
private final PoolableObjectFactory poolableobjectfactoryVar1;",0
"public synchronized void clear() {
for (Iterator iteratorVar11 = iteratorLiteral12; iteratorVar1.hasNext(); ) {
final Map.Entry map.entryVar3 = map.entryLiteral4;
final Object objectVar5 = objectLiteral6;
final CursorableLinkedList cursorablelinkedlistVar7 = cursorablelinkedlistLiteral8;
for (Iterator iteratorVar13 = iteratorLiteral14; iteratorVar9.hasNext(); ) {
try {
_factory.destroyObject(objectVar5, ((ObjectTimestampPair) (iteratorVar9.next())).value);
} catch (Exception e) {
}
iteratorVar9.remove();
}
}
_poolMap.clear();
_poolList.clear();
_totalIdle = 0;
notifyAll();
}",0
"public void returnObject(Object obj) throws Exception {
try {
addObjectToPool(obj, true);
} catch (Exception e) {
if (_factory != null) {
try {
_factory.destroyObject(obj);
} catch (Exception e2) {
}
}
}
}",0
"public void invalidateObject(final T obj) {
try {
pool.invalidateObject(obj);
} catch (Exception e) {
}
}",0
"private void allocate() {
boolean booleanVar1 = booleanLiteral2;
synchronized (this) {
if (isClosed())
return;
Iterator iteratorVar3 = iteratorLiteral4;
while (iteratorVar3.hasNext()) {
Latch latchVar5 = latchLiteral6;
ObjectQueue objectqueueVar7 = objectqueueLiteral8;
if (null == objectqueueVar7) {
objectqueueVar7 = new ObjectQueue();
_poolMap.put(latchVar5.getkey(), objectqueueVar7);
_poolList.add(latchVar5.getkey());
}
latchVar5.setPool(objectqueueVar7);
if (!objectqueueVar7.queue.isEmpty()) {
iteratorVar3.remove();
latchVar5.setPair((ObjectTimestampPair) objectqueueVar7.queue.removeFirst());
objectqueueVar7.incrementInternalProcessingCount();
_totalIdle--;
synchronized (latchVar5) {
latchVar5.notify();
}
continue;
}
if ((_maxTotal > 0) && (_totalActive + _totalIdle + _totalInternalProcessing >= _maxTotal)) {
booleanVar1 = true;
break;
}
if ((_maxActive < 0 || objectqueueVar7.activeCount + objectqueueVar7.internalProcessingCount < _maxActive) && (_maxTotal < 0 || _totalActive + _totalIdle + _totalInternalProcessing < _maxTotal)) {
iteratorVar3.remove();
latchVar5.setMayCreate(true);
objectqueueVar7.incrementInternalProcessingCount();
synchronized (latchVar5) {
latchVar5.notify();
}
continue;
}
if (_maxActive < 0) {
break;
}
}
}
if (booleanVar1) {
clearOldest();
}
}",0
"public void run() {
try {
evict();
} catch (Exception e) {
} catch (OutOfMemoryError oome) {
oome.printStackTrace(System.err);
}
try {
ensureMinIdle();
} catch (Exception e) {
}
}",0
"private synchronized void allocate() {
if (isClosed())
return;
for (; ; ) {
if (!_pool.isEmpty() && !_allocationQueue.isEmpty()) {
Latch latchVar1 = latchLiteral2;
latchVar1.setPair((ObjectTimestampPair) _pool.removeFirst());
_numInternalProcessing++;
synchronized (latchVar1) {
latchVar1.notify();
}
} else {
break;
}
}
for (; ; ) {
if ((!_allocationQueue.isEmpty()) && (_maxActive < 0 || (_numActive + _numInternalProcessing) < _maxActive)) {
Latch latchVar1 = latchLiteral2;
latchVar1.setMayCreate(true);
_numInternalProcessing++;
synchronized (latchVar1) {
latchVar1.notify();
}
} else {
break;
}
}
}",0
"public void addObject() throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
Object objectVar1 = objectLiteral2;
try {
assertOpen();
addObjectToPool(objectVar1, false);
} catch (IllegalStateException ex) {
try {
_factory.destroyObject(objectVar1);
} catch (Exception ex2) {
}
throw ex;
}
}",0
"public void run() {
try {
evict();
} catch (Exception e) {
} catch (OutOfMemoryError oome) {
oome.printStackTrace(System.err);
}
try {
ensureMinIdle();
} catch (Exception e) {
}
}",0
"private synchronized void allocate() {
if (isClosed())
return;
for (; ; ) {
if (!_pool.isEmpty() && !_allocationQueue.isEmpty()) {
Latch latchVar1 = latchLiteral2;
latchVar1.setPair((ObjectTimestampPair) _pool.removeFirst());
_numInternalProcessing++;
synchronized (latchVar1) {
latchVar1.notify();
}
} else {
break;
}
}
for (; ; ) {
if ((!_allocationQueue.isEmpty()) && (_maxActive < 0 || (_numActive + _numInternalProcessing) < _maxActive)) {
Latch latchVar1 = latchLiteral2;
latchVar1.setMayCreate(true);
_numInternalProcessing++;
synchronized (latchVar1) {
latchVar1.notify();
}
} else {
break;
}
}
}",0
"public synchronized void returnObject(Object key, Object obj) throws Exception {
decrementActiveCount(key);
if (null != _factory) {
if (_factory.validateObject(key, obj)) {
try {
_factory.passivateObject(key, obj);
} catch (Exception ex) {
_factory.destroyObject(key, obj);
return;
}
} else {
return;
}
}
if (isClosed()) {
if (null != _factory) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e) {
}
}
return;
}
Stack stackVar1 = stackLiteral2;
if (null == stackVar1) {
stackVar1 = new Stack();
stackVar1.ensureCapacity(_initSleepingCapacity > _maxSleeping ? _maxSleeping : _initSleepingCapacity);
_pools.put(key, stackVar1);
}
final int intVar3 = intLiteral4;
if (intVar3 >= _maxSleeping) {
final Object objectVar5;
if (intVar3 > 0) {
objectVar5 = stackVar1.remove(0);
_totIdle--;
} else {
objectVar5 = obj;
}
if (null != _factory) {
try {
_factory.destroyObject(key, objectVar5);
} catch (Exception e) {
}
}
}
stackVar1.push(obj);
_totIdle++;
}",0
"public synchronized String toString() {
StringBuffer stringbufferVar1 = stringbufferLiteral2;
stringbufferVar1.append(getClass().getName());
stringbufferVar1.append("" contains "").append(_pools.size()).append("" distinct pools: "");
Iterator iteratorVar3 = iteratorLiteral4;
while (iteratorVar3.hasNext()) {
Object objectVar5 = objectLiteral6;
stringbufferVar1.append("" |"").append(objectVar5).append(""|="");
Stack stackVar7 = stackLiteral8;
stringbufferVar1.append(stackVar7.size());
}
return stringbufferVar1.toString();
}",0
"private synchronized void allocate() {
if (isClosed())
return;
for (; ; ) {
if (!_pool.isEmpty() && !_allocationQueue.isEmpty()) {
Latch latchVar1 = latchLiteral2;
latchVar1.setPair((ObjectTimestampPair) _pool.removeFirst());
_numInternalProcessing++;
synchronized (latchVar1) {
latchVar1.notify();
}
} else {
break;
}
}
for (; ; ) {
if ((!_allocationQueue.isEmpty()) && (_maxActive < 0 || (_numActive + _numInternalProcessing) < _maxActive)) {
Latch latchVar1 = latchLiteral2;
latchVar1.setMayCreate(true);
_numInternalProcessing++;
synchronized (latchVar1) {
latchVar1.notify();
}
} else {
break;
}
}
}",0
protected int intVar1 = intLiteral2;,0
"public synchronized String toString() {
StringBuffer stringbufferVar1 = stringbufferLiteral2;
stringbufferVar1.append(getClass().getName());
stringbufferVar1.append("" contains "").append(_pools.size()).append("" distinct pools: "");
Iterator iteratorVar3 = iteratorLiteral4;
while (iteratorVar3.hasNext()) {
Object objectVar5 = objectLiteral6;
stringbufferVar1.append("" |"").append(objectVar5).append(""|="");
Stack stackVar7 = stackLiteral8;
stringbufferVar1.append(stackVar7.size());
}
return stringbufferVar1.toString();
}",0
"public synchronized void clear() {
if (null != _factory) {
Iterator iteratorVar1 = iteratorLiteral2;
while (iteratorVar1.hasNext()) {
try {
_factory.destroyObject(iteratorVar1.next());
} catch (Exception e) {
}
}
}
_pool.clear();
}",0
"private boolean hasBorrowWaiters() {
for (K kVar1 : poolMap.keySet()) {
final ObjectDeque<T> objectdeque<t>Var2 = objectdeque<t>Literal3;
if (objectdeque<t>Var2 != null) {
final LinkedBlockingDeque<PooledObject<T>> linkedblockingdeque<pooledobject<t>>Var4 = linkedblockingdeque<pooledobject<t>>Literal5;
if (linkedblockingdeque<pooledobject<t>>Var4.hasTakeWaiters()) {
return true;
}
}
}
return false;
}",0
"@Override
public Map<String, Integer> getNumWaitersByKey() {
Map<String, Integer> map<string,integer>Var1 = map<string,integer>Literal2;
for (K kVar3 : poolMap.keySet()) {
ObjectDeque<T> objectdeque<t>Var4 = objectdeque<t>Literal5;
if (objectdeque<t>Var4 != null) {
if (getBlockWhenExhausted()) {
map<string,integer>Var1.put(kVar3.toString(), Integer.valueOf(objectdeque<t>Var4.getIdleObjects().getTakeQueueLength()));
} else {
map<string,integer>Var1.put(kVar3.toString(), Integer.valueOf(0));
}
}
}
return map<string,integer>Var1;
}",0
"@Override
public void evict() throws Exception {
assertOpen();
if (idleObjects.size() > 0) {
PooledObject<T> pooledobject<t>Var1 = pooledobject<t>Literal2;
final EvictionPolicy<T> evictionpolicy<t>Var3 = evictionpolicy<t>Literal4;
synchronized (evictionLock) {
final EvictionConfig evictionconfigVar5 = evictionconfigLiteral6;
final boolean booleanVar7 = booleanLiteral8;
for (int intVar18 = intLiteral19, intVar20 = intLiteral21; intVar9 < intLiteral1; intVar9++) {
if (evictionIterator == null || !evictionIterator.hasNext()) {
evictionIterator = new EvictionIterator(idleObjects);
}
if (!evictionIterator.hasNext()) {
return;
}
try {
pooledobject<t>Var1 = evictionIterator.next();
} catch (final NoSuchElementException nsee) {
intVar9--;
evictionIterator = null;
continue;
}
if (!pooledobject<t>Var1.startEvictionTest()) {
intVar9--;
continue;
}
boolean booleanVar13;
try {
booleanVar13 = evictionpolicy<t>Var3.evict(evictionconfigVar5, pooledobject<t>Var1, idleObjects.size());
} catch (final Throwable t) {
PoolUtils.checkRethrow(t);
swallowException(new Exception(t));
booleanVar13 = false;
}
if (booleanVar13) {
destroy(pooledobject<t>Var1);
destroyedByEvictorCount.incrementAndGet();
} else {
if (booleanVar7) {
boolean booleanVar14 = booleanLiteral15;
try {
factory.activateObject(pooledobject<t>Var1);
booleanVar14 = true;
} catch (final Exception e) {
destroy(pooledobject<t>Var1);
destroyedByEvictorCount.incrementAndGet();
}
if (booleanVar14) {
if (!factory.validateObject(pooledobject<t>Var1)) {
destroy(pooledobject<t>Var1);
destroyedByEvictorCount.incrementAndGet();
} else {
try {
factory.passivateObject(pooledobject<t>Var1);
} catch (final Exception e) {
destroy(pooledobject<t>Var1);
destroyedByEvictorCount.incrementAndGet();
}
}
}
}
if (!pooledobject<t>Var1.endEvictionTest(idleObjects)) {
}
}
}
}
}
final AbandonedConfig abandonedconfigVar16 = abandonedconfigLiteral17;
if (abandonedconfigVar16 != null && abandonedconfigVar16.getRemoveAbandonedOnMaintenance()) {
removeAbandoned(abandonedconfigVar16);
}
}",0
"@Override
public void close() {
try {
pool.close();
} catch (final Exception ignored) {
}
}",0
"void cancel() {
scheduledFuture.cancel(false);
}",0
"@SuppressWarnings(""unchecked"")
protected E cast(final Throwable throwable) {
return (E) throwable;
}",0
"@Override
public void close() {
try {
keyedPool.close();
} catch (final Exception e) {
}
}",0
PooledObjectState getState();,0
"public void close() {
try {
keyedPool.close();
} catch (Exception e) {
}
}",0
"public void close() {
try {
pool.close();
} catch (Exception e) {
}
}",0
"public void invalidateObject(final Object key, final Object obj) {
try {
keyedPool.invalidateObject(key, obj);
} catch (Exception e) {
}
}",0
"public void returnObject(final Object obj) {
synchronized (lock) {
try {
pool.returnObject(obj);
} catch (Exception e) {
}
}
}",0
"private void destroy(Map m) {
for (Iterator iteratorVar9 = iteratorLiteral10; iteratorVar1.hasNext(); ) {
Object objectVar3 = objectLiteral4;
Collection collectionVar5 = collectionLiteral6;
for (Iterator iteratorVar11 = iteratorLiteral12; iteratorVar7.hasNext(); ) {
try {
_factory.destroyObject(objectVar3, ((ObjectTimestampPair) (iteratorVar7.next())).value);
} catch (Exception e) {
} finally {
synchronized (this) {
_totalInternalProcessing--;
allocate();
}
}
}
}
}",0
"private void addObjectToPool(Object key, Object obj, boolean decrementNumActive) throws Exception {
boolean booleanVar1 = booleanLiteral2;
if (_testOnReturn && !_factory.validateObject(key, obj)) {
booleanVar1 = false;
} else {
_factory.passivateObject(key, obj);
}
boolean booleanVar3 = booleanLiteral4;
ObjectQueue objectqueueVar5;
synchronized (this) {
objectqueueVar5 = (ObjectQueue) (_poolMap.get(key));
if (null == objectqueueVar5) {
objectqueueVar5 = new ObjectQueue();
_poolMap.put(key, objectqueueVar5);
_poolList.add(key);
}
if (isClosed()) {
booleanVar3 = true;
} else {
if (_maxIdle >= 0 && (objectqueueVar5.queue.size() >= _maxIdle)) {
booleanVar3 = true;
} else if (booleanVar1) {
if (_lifo) {
objectqueueVar5.queue.addFirst(new ObjectTimestampPair(obj));
} else {
objectqueueVar5.queue.addLast(new ObjectTimestampPair(obj));
}
_totalIdle++;
if (decrementNumActive) {
objectqueueVar5.decrementActiveCount();
}
allocate();
}
}
}
if (booleanVar3) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e) {
}
if (decrementNumActive) {
synchronized (this) {
objectqueueVar5.decrementActiveCount();
allocate();
}
}
}
}",0
"private synchronized void allocate() {
if (isClosed())
return;
for (; ; ) {
if (!_pool.isEmpty() && !_allocationQueue.isEmpty()) {
Latch latchVar1 = latchLiteral2;
latchVar1.setPair((ObjectTimestampPair) _pool.removeFirst());
_numInternalProcessing++;
synchronized (latchVar1) {
latchVar1.notify();
}
} else {
break;
}
}
for (; ; ) {
if ((!_allocationQueue.isEmpty()) && (_maxActive < 0 || (_numActive + _numInternalProcessing) < _maxActive)) {
Latch latchVar1 = latchLiteral2;
latchVar1.setMayCreate(true);
_numInternalProcessing++;
synchronized (latchVar1) {
latchVar1.notify();
}
} else {
break;
}
}
}",0
"public synchronized void addObject(Object key) throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
Object objectVar1 = objectLiteral2;
try {
if (!_factory.validateObject(key, objectVar1)) {
return;
}
} catch (Exception e) {
try {
_factory.destroyObject(key, objectVar1);
} catch (Exception e2) {
}
return;
}
_factory.passivateObject(key, objectVar1);
Stack stackVar3 = stackLiteral4;
if (null == stackVar3) {
stackVar3 = new Stack();
stackVar3.ensureCapacity(_initSleepingCapacity > _maxSleeping ? _maxSleeping : _initSleepingCapacity);
_pools.put(key, stackVar3);
}
final int intVar5 = intLiteral6;
if (intVar5 >= _maxSleeping) {
final Object objectVar7;
if (intVar5 > 0) {
objectVar7 = stackVar3.remove(0);
_totIdle--;
} else {
objectVar7 = objectVar1;
}
try {
_factory.destroyObject(key, objectVar7);
} catch (Exception e) {
if (objectVar1 == objectVar7) {
throw e;
}
}
} else {
stackVar3.push(objectVar1);
_totIdle++;
}
}",0
"public synchronized void returnObject(Object obj) throws Exception {
boolean booleanVar1 = booleanLiteral2;
if (null != _factory) {
if (!_factory.validateObject(obj)) {
booleanVar1 = false;
} else {
try {
_factory.passivateObject(obj);
} catch (Exception e) {
booleanVar1 = false;
}
}
}
boolean booleanVar3 = booleanLiteral4;
_numActive--;
if (booleanVar1) {
Object objectVar5 = objectLiteral6;
if (_pool.size() >= _maxSleeping) {
booleanVar3 = true;
objectVar5 = _pool.remove(0);
}
_pool.push(obj);
obj = objectVar5;
}
notifyAll();
if (booleanVar3) {
try {
_factory.destroyObject(obj);
} catch (Exception e) {
}
}
}",0
"public void close() {
try {
keyedPool.close();
} catch (Exception e) {
}
}",0
"public void close() {
try {
pool.close();
} catch (Exception e) {
}
}",0
"public void close() {
try {
pool.close();
} catch (Exception e) {
}
}",0
"public void close() {
try {
keyedPool.close();
} catch (Exception e) {
}
}",0
"public void invalidateObject(final Object key, final Object obj) {
try {
pool.invalidateObject(obj);
} catch (Exception e) {
}
}",0
"public void returnObject(final Object key, final Object obj) {
synchronized (lock) {
try {
keyedPool.returnObject(key, obj);
} catch (Exception e) {
}
}
}",0
"public void run() {
try {
evict();
} catch (Exception e) {
} catch (OutOfMemoryError oome) {
oome.printStackTrace(System.err);
}
try {
ensureMinIdle();
} catch (Exception e) {
}
}",0
"public synchronized void preparePool(Object key, boolean populateImmediately) {
ObjectQueue objectqueueVar1 = objectqueueLiteral2;
if (null == objectqueueVar1) {
objectqueueVar1 = new ObjectQueue();
_poolMap.put(key, objectqueueVar1);
_poolList.add(key);
}
if (populateImmediately) {
try {
ensureMinIdle(key);
} catch (Exception e) {
}
}
}",0
"private void addObjectToPool(Object key, Object obj, boolean decrementNumActive) throws Exception {
boolean booleanVar1 = booleanLiteral2;
if (_testOnReturn && !_factory.validateObject(key, obj)) {
booleanVar1 = false;
} else {
_factory.passivateObject(key, obj);
}
boolean booleanVar3 = booleanLiteral4;
ObjectQueue objectqueueVar5;
synchronized (this) {
objectqueueVar5 = (ObjectQueue) (_poolMap.get(key));
if (null == objectqueueVar5) {
objectqueueVar5 = new ObjectQueue();
_poolMap.put(key, objectqueueVar5);
_poolList.add(key);
}
if (isClosed()) {
booleanVar3 = true;
} else {
if (_maxIdle >= 0 && (objectqueueVar5.queue.size() >= _maxIdle)) {
booleanVar3 = true;
} else if (booleanVar1) {
if (_lifo) {
objectqueueVar5.queue.addFirst(new ObjectTimestampPair(obj));
} else {
objectqueueVar5.queue.addLast(new ObjectTimestampPair(obj));
}
_totalIdle++;
if (decrementNumActive) {
objectqueueVar5.decrementActiveCount();
}
allocate();
}
}
}
if (booleanVar3) {
try {
_factory.destroyObject(key, obj);
} catch (Exception e) {
}
if (decrementNumActive) {
synchronized (this) {
objectqueueVar5.decrementActiveCount();
allocate();
}
}
}
}",0
"public void returnObject(Object obj) throws Exception {
try {
addObjectToPool(obj, true);
} catch (Exception e) {
if (_factory != null) {
try {
_factory.destroyObject(obj);
} catch (Exception e2) {
}
// TODO: Correctness here depends on control in addObjectToPool.
synchronized (this) {
_numActive--;
allocate();
}
}
}
}",0
"private void addObjectToPool(Object obj, boolean decrementNumActive) throws Exception {
boolean booleanVar1 = booleanLiteral2;
if (_testOnReturn && !(_factory.validateObject(obj))) {
booleanVar1 = false;
} else {
_factory.passivateObject(obj);
}
boolean booleanVar3 = booleanLiteral4;
synchronized (this) {
if (isClosed()) {
booleanVar3 = true;
} else {
if ((_maxIdle >= 0) && (_pool.size() >= _maxIdle)) {
booleanVar3 = true;
} else if (booleanVar1) {
if (_lifo) {
_pool.addFirst(new ObjectTimestampPair(obj));
} else {
_pool.addLast(new ObjectTimestampPair(obj));
}
if (decrementNumActive) {
_numActive--;
}
allocate();
}
}
}
if (booleanVar3) {
try {
_factory.destroyObject(obj);
} catch (Exception e) {
}
if (decrementNumActive) {
synchronized (this) {
_numActive--;
allocate();
}
}
}
}",0
"public synchronized void addObject() throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
Object objectVar1 = objectLiteral2;
boolean booleanVar3 = booleanLiteral4;
if (!_factory.validateObject(objectVar1)) {
booleanVar3 = false;
} else {
_factory.passivateObject(objectVar1);
}
boolean booleanVar5 = booleanLiteral6;
if (booleanVar3) {
Object objectVar7 = objectLiteral8;
if (_pool.size() >= _maxSleeping) {
booleanVar5 = true;
objectVar7 = _pool.remove(0);
}
_pool.push(objectVar1);
objectVar1 = objectVar7;
}
notifyAll();
if (booleanVar5) {
try {
_factory.destroyObject(objectVar1);
} catch (Exception e) {
}
}
}",0
"@Override
public Map<String, Integer> getNumWaitersByKey() {
Map<String, Integer> map<string,integer>Var1 = map<string,integer>Literal2;
for (K kVar3 : poolMap.keySet()) {
ObjectDeque<T> objectdeque<t>Var4 = objectdeque<t>Literal5;
if (objectdeque<t>Var4 != null) {
if (getBlockWhenExhausted()) {
map<string,integer>Var1.put(kVar3.toString(), Integer.valueOf(objectdeque<t>Var4.getIdleObjects().getTakeQueueLength()));
} else {
map<string,integer>Var1.put(kVar3.toString(), Integer.valueOf(0));
}
}
}
return map<string,integer>Var1;
}",0
"@Override
public Map<String, List<DefaultPooledObjectInfo>> listAllObjects() {
Map<String, List<DefaultPooledObjectInfo>> map<string,list<defaultpooledobjectinfo>>Var1 = map<string,list<defaultpooledobjectinfo>>Literal2;
for (K kVar3 : poolMap.keySet()) {
ObjectDeque<T> objectdeque<t>Var4 = objectdeque<t>Literal5;
if (objectdeque<t>Var4 != null) {
List<DefaultPooledObjectInfo> list<defaultpooledobjectinfo>Var6 = list<defaultpooledobjectinfo>Literal7;
map<string,list<defaultpooledobjectinfo>>Var1.put(kVar3.toString(), list<defaultpooledobjectinfo>Var6);
for (PooledObject<T> pooledobject<t>Var8 : objectdeque<t>Var4.getAllObjects().values()) {
list<defaultpooledobjectinfo>Var6.add(new DefaultPooledObjectInfo(pooledobject<t>Var8));
}
}
}
return map<string,list<defaultpooledobjectinfo>>Var1;
}",0
"@Override
public void invalidateObject(final K key, final V obj) {
try {
keyedPool.invalidateObject(key, obj);
} catch (Exception e) {
}
}",0
"private boolean hasBorrowWaiters() {
for (K kVar1 : poolMap.keySet()) {
final ObjectDeque<T> objectdeque<t>Var2 = objectdeque<t>Literal3;
if (objectdeque<t>Var2 != null) {
final LinkedBlockingDeque<PooledObject<T>> linkedblockingdeque<pooledobject<t>>Var4 = linkedblockingdeque<pooledobject<t>>Literal5;
if (linkedblockingdeque<pooledobject<t>>Var4.hasTakeWaiters()) {
return true;
}
}
}
return false;
}",0
"@Override
public void evict() throws Exception {
assertOpen();
if (idleObjects.size() > 0) {
PooledObject<T> pooledobject<t>Var1 = pooledobject<t>Literal2;
EvictionPolicy<T> evictionpolicy<t>Var3 = evictionpolicy<t>Literal4;
synchronized (evictionLock) {
EvictionConfig evictionconfigVar5 = evictionconfigLiteral6;
boolean booleanVar7 = booleanLiteral8;
for (int intVar17 = intLiteral18, intVar19 = intLiteral20; intVar9 < intLiteral1; intVar9++) {
if (evictionIterator == null || !evictionIterator.hasNext()) {
if (getLifo()) {
evictionIterator = idleObjects.descendingIterator();
} else {
evictionIterator = idleObjects.iterator();
}
}
if (!evictionIterator.hasNext()) {
return;
}
try {
pooledobject<t>Var1 = evictionIterator.next();
} catch (NoSuchElementException nsee) {
intVar9--;
evictionIterator = null;
continue;
}
if (!pooledobject<t>Var1.startEvictionTest()) {
intVar9--;
continue;
}
if (evictionpolicy<t>Var3.evict(evictionconfigVar5, pooledobject<t>Var1, idleObjects.size())) {
destroy(pooledobject<t>Var1);
destroyedByEvictorCount.incrementAndGet();
} else {
if (booleanVar7) {
boolean booleanVar13 = booleanLiteral14;
try {
factory.activateObject(pooledobject<t>Var1);
booleanVar13 = true;
} catch (Exception e) {
destroy(pooledobject<t>Var1);
destroyedByEvictorCount.incrementAndGet();
}
if (booleanVar13) {
if (!factory.validateObject(pooledobject<t>Var1)) {
destroy(pooledobject<t>Var1);
destroyedByEvictorCount.incrementAndGet();
} else {
try {
factory.passivateObject(pooledobject<t>Var1);
} catch (Exception e) {
destroy(pooledobject<t>Var1);
destroyedByEvictorCount.incrementAndGet();
}
}
}
}
if (!pooledobject<t>Var1.endEvictionTest(idleObjects)) {
}
}
}
}
}
AbandonedConfig abandonedconfigVar15 = abandonedconfigLiteral16;
if (abandonedconfigVar15 != null && abandonedconfigVar15.getRemoveAbandonedOnMaintenance()) {
removeAbandoned(abandonedconfigVar15);
}
}",0
"@Override
public synchronized void addObject() throws Exception {
assertOpen();
if (factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
T tVar1 = tLiteral2;
createCount++;
PooledSoftReference<T> pooledsoftreference<t>Var3 = pooledsoftreference<t>Literal4;
allReferences.add(pooledsoftreference<t>Var3);
boolean booleanVar5 = booleanLiteral6;
if (!factory.validateObject(pooledsoftreference<t>Var3)) {
booleanVar5 = false;
} else {
factory.passivateObject(pooledsoftreference<t>Var3);
}
boolean booleanVar7 = booleanLiteral8;
if (booleanVar5) {
idleReferences.add(pooledsoftreference<t>Var3);
notifyAll();
}
if (booleanVar7) {
try {
destroy(pooledsoftreference<t>Var3);
} catch (Exception e) {
}
}
}",0
"@SuppressWarnings(""unchecked"")
protected E cast(final Throwable throwable) {
return (E) throwable;
}",0
"public T borrowObject(final K key, final long borrowMaxWaitMillis) throws E {
assertOpen();
final AbandonedConfig abandonedconfigVar1 = abandonedconfigLiteral2;
if (abandonedconfigVar1 != null && abandonedconfigVar1.getRemoveAbandonedOnBorrow() && (getNumIdle() < 2) && (getNumActive() > getMaxTotal() - 3)) {
removeAbandoned(abandonedconfigVar1);
}
PooledObject<T> pooledobject<t>Var3 = pooledobject<t>Literal4;
final boolean booleanVar5 = booleanLiteral6;
boolean booleanVar7;
final long longVar8 = longLiteral9;
final ObjectDeque<T> objectdeque<t>Var10 = objectdeque<t>Literal11;
try {
while (pooledobject<t>Var3 == null) {
booleanVar7 = false;
pooledobject<t>Var3 = objectdeque<t>Var10.getIdleObjects().pollFirst();
if (pooledobject<t>Var3 == null) {
pooledobject<t>Var3 = create(key);
if (pooledobject<t>Var3 != null) {
booleanVar7 = true;
}
}
if (booleanVar5) {
if (pooledobject<t>Var3 == null) {
try {
pooledobject<t>Var3 = borrowMaxWaitMillis < 0 ? objectdeque<t>Var10.getIdleObjects().takeFirst() : objectdeque<t>Var10.getIdleObjects().pollFirst(borrowMaxWaitMillis, TimeUnit.MILLISECONDS);
} catch (InterruptedException e) {
throw cast(e);
}
}
if (pooledobject<t>Var3 == null) {
throw new NoSuchElementException(appendStats(""Timeout waiting for idle object, borrowMaxWaitMillis="" + borrowMaxWaitMillis));
}
} else if (pooledobject<t>Var3 == null) {
throw new NoSuchElementException(appendStats(""Pool exhausted""));
}
if (!pooledobject<t>Var3.allocate()) {
pooledobject<t>Var3 = null;
}
if (pooledobject<t>Var3 != null) {
try {
factory.activateObject(key, pooledobject<t>Var3);
} catch (final Exception e) {
try {
destroy(key, pooledobject<t>Var3, true, DestroyMode.NORMAL);
} catch (final Exception e1) {
}
pooledobject<t>Var3 = null;
if (booleanVar7) {
final NoSuchElementException nosuchelementexceptionVar12 = nosuchelementexceptionLiteral13;
nosuchelementexceptionVar12.initCause(e);
throw nosuchelementexceptionVar12;
}
}
if (pooledobject<t>Var3 != null && getTestOnBorrow()) {
boolean booleanVar14 = booleanLiteral15;
Throwable throwableVar16 = pooledobject<t>Literal4;
try {
booleanVar14 = factory.validateObject(key, pooledobject<t>Var3);
} catch (final Throwable t) {
PoolUtils.checkRethrow(t);
throwableVar16 = t;
}
if (!booleanVar14) {
try {
destroy(key, pooledobject<t>Var3, true, DestroyMode.NORMAL);
destroyedByBorrowValidationCount.incrementAndGet();
} catch (final Exception e) {
}
pooledobject<t>Var3 = null;
if (booleanVar7) {
final NoSuchElementException nosuchelementexceptionVar12 = nosuchelementexceptionLiteral17;
nosuchelementexceptionVar12.initCause(throwableVar16);
throw nosuchelementexceptionVar12;
}
}
}
}
}
} finally {
deregister(key);
}
updateStatsBorrow(pooledobject<t>Var3, Duration.ofMillis(System.currentTimeMillis() - longVar8));
return pooledobject<t>Var3.getObject();
}",0
"public synchronized void addObject() throws Exception {
assertOpen();
if (_factory == null) {
throw new IllegalStateException(""Cannot add objects without a factory."");
}
Object objectVar1 = objectLiteral2;
try {
assertOpen();
addObjectToPool(objectVar1, false);
} catch (IllegalStateException ex) {
try {
_factory.destroyObject(objectVar1);
} catch (Exception ex2) {
}
throw ex;
}
}",0
"public synchronized void returnObject(Object obj) throws Exception {
boolean booleanVar1 = booleanLiteral2;
if (_factory != null) {
if (!_factory.validateObject(obj)) {
booleanVar1 = false;
} else {
try {
_factory.passivateObject(obj);
} catch (Exception e) {
booleanVar1 = false;
}
}
}
boolean booleanVar3 = booleanLiteral4;
_numActive--;
if (booleanVar1) {
_pool.add(new SoftReference(obj, refQueue));
}
notifyAll();
if (booleanVar3 && _factory != null) {
try {
_factory.destroyObject(obj);
} catch (Exception e) {
}
}
}",0
"@Override
public void close() {
try {
pool.close();
} catch (Exception e) {
}
}",0
"@Override
public void evict() throws Exception {
assertOpen();
if (getNumIdle() == 0) {
return;
}
PooledObject<T> pooledobject<t>Var1 = pooledobject<t>Literal2;
EvictionPolicy<T> evictionpolicy<t>Var3 = evictionpolicy<t>Literal4;
synchronized (evictionLock) {
EvictionConfig evictionconfigVar5 = evictionconfigLiteral6;
boolean booleanVar7 = booleanLiteral8;
for (int intVar24 = intLiteral25, intVar26 = intLiteral27; intVar9 < intLiteral1; intVar9++) {
if (evictionIterator == null || !evictionIterator.hasNext()) {
if (evictionKeyIterator == null || !evictionKeyIterator.hasNext()) {
List<K> list<k>Var13 = list<k>Literal14;
Lock lockVar15 = lockLiteral16;
lockVar15.lock();
try {
list<k>Var13.addAll(poolKeyList);
} finally {
lockVar15.unlock();
}
evictionKeyIterator = list<k>Var13.iterator();
}
while (evictionKeyIterator.hasNext()) {
evictionKey = evictionKeyIterator.next();
ObjectDeque<T> objectdeque<t>Var17 = objectdeque<t>Literal18;
if (objectdeque<t>Var17 == null) {
continue;
}
final Deque<PooledObject<T>> deque<pooledobject<t>>Var19 = deque<pooledobject<t>>Literal20;
evictionIterator = new EvictionIterator(deque<pooledobject<t>>Var19);
if (evictionIterator.hasNext()) {
break;
}
evictionIterator = null;
}
}
if (evictionIterator == null) {
return;
}
final Deque<PooledObject<T>> deque<pooledobject<t>>Var19;
try {
pooledobject<t>Var1 = evictionIterator.next();
deque<pooledobject<t>>Var19 = evictionIterator.getIdleObjects();
} catch (NoSuchElementException nsee) {
intVar9--;
evictionIterator = null;
continue;
}
if (!pooledobject<t>Var1.startEvictionTest()) {
intVar9--;
continue;
}
boolean booleanVar21;
try {
booleanVar21 = evictionpolicy<t>Var3.evict(evictionconfigVar5, pooledobject<t>Var1, poolMap.get(evictionKey).getIdleObjects().size());
} catch (Throwable t) {
PoolUtils.checkRethrow(t);
swallowException(new Exception(t));
booleanVar21 = false;
}
if (booleanVar21) {
destroy(evictionKey, pooledobject<t>Var1, true);
destroyedByEvictorCount.incrementAndGet();
} else {
if (booleanVar7) {
boolean booleanVar22 = booleanLiteral23;
try {
factory.activateObject(evictionKey, pooledobject<t>Var1);
booleanVar22 = true;
} catch (Exception e) {
destroy(evictionKey, pooledobject<t>Var1, true);
destroyedByEvictorCount.incrementAndGet();
}
if (booleanVar22) {
if (!factory.validateObject(evictionKey, pooledobject<t>Var1)) {
destroy(evictionKey, pooledobject<t>Var1, true);
destroyedByEvictorCount.incrementAndGet();
} else {
try {
factory.passivateObject(evictionKey, pooledobject<t>Var1);
} catch (Exception e) {
destroy(evictionKey, pooledobject<t>Var1, true);
destroyedByEvictorCount.incrementAndGet();
}
}
}
}
if (!pooledobject<t>Var1.endEvictionTest(deque<pooledobject<t>>Var19)) {
}
}
}
}
}",0
